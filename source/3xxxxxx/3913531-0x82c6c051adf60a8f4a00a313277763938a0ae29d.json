{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// copyright contact@ethercheque.com\r\n\r\ncontract EtherCheque {\r\n    enum Status { NONE, CREATED, LOCKED, EXPIRED }\r\n    enum ResultCode { \r\n        SUCCESS,\r\n        ERROR_MAX,\r\n        ERROR_MIN,\r\n        ERROR_EXIST,\r\n        ERROR_NOT_EXIST,\r\n        ERROR_INVALID_STATUS,\r\n        ERROR_LOCKED,\r\n        ERROR_EXPIRED,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    struct Cheque {\r\n        bytes32 pinHash; // we only save sha3 of cheque signature\r\n        address creator;\r\n        Status status;\r\n        uint value;\r\n        uint createTime;\r\n        uint expiringPeriod; // in seconds - optional, 0 mean no expire\r\n        uint8 attempt; // current attempt account to cash the cheque\r\n    }\r\n    address public owner;\r\n    address[] public moderators;\r\n    uint public totalCheque = 0;\r\n    uint public totalChequeValue = 0;\r\n    uint public totalRedeemedCheque = 0;\r\n    uint public totalRedeemedValue = 0;\r\n    uint public commissionFee = 10; // div 1000\r\n    uint public minChequeValue = 0.01 ether;\r\n    uint public maxChequeValue = 0; // optional, 0 mean no limit\r\n    uint8 public maxAttempt = 3;\r\n    bool public isMaintaining = false;\r\n    \r\n    // hash cheque no -> Cheque info\r\n    mapping(bytes32 => Cheque) items;\r\n\r\n    // modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier isActive {\r\n        if(isMaintaining == true) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier onlyModerators() {\r\n        if (msg.sender != owner) {\r\n            bool found = false;\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == msg.sender) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) throw;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function EtherCheque() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // event\r\n    event LogCreate(bytes32 indexed chequeIdHash, uint result, uint amount);\r\n    event LogRedeem(bytes32 indexed chequeIdHash, ResultCode result, uint amount, address receiver);\r\n    event LogWithdrawEther(address indexed sendTo, ResultCode result, uint amount);\r\n    event LogRefundCheque(bytes32 indexed chequeIdHash, ResultCode result);\r\n    \r\n    // owner function\r\n    function ChangeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    function Kill() onlyOwner {\r\n        suicide(owner);\r\n    }\r\n    \r\n    function AddModerator(address _newModerator) onlyOwner {\r\n        for (uint index = 0; index < moderators.length; index++) {\r\n            if (moderators[index] == _newModerator) {\r\n                return;\r\n            }\r\n        }\r\n        moderators.push(_newModerator);\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner {\r\n        uint foundIndex = 0;\r\n        for (; foundIndex < moderators.length; foundIndex++) {\r\n            if (moderators[foundIndex] == _oldModerator) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < moderators.length)\r\n        {\r\n            moderators[foundIndex] = moderators[moderators.length-1];\r\n            delete moderators[moderators.length-1];\r\n            moderators.length--;\r\n        }\r\n    }\r\n    \r\n    // moderator function\r\n    function SetCommissionValue(uint _commissionFee) onlyModerators {\r\n        commissionFee = _commissionFee;\r\n    }\r\n    \r\n    function SetMinChequeValue(uint _minChequeValue) onlyModerators {\r\n        minChequeValue = _minChequeValue;\r\n    }\r\n    \r\n    function SetMaxChequeValue(uint _maxChequeValue) onlyModerators {\r\n        maxChequeValue = _maxChequeValue;\r\n    }\r\n    \r\n    function SetMaxAttempt(uint8 _maxAttempt) onlyModerators {\r\n        maxAttempt = _maxAttempt;\r\n    }\r\n    \r\n    function UpdateMaintenance(bool _isMaintaining) onlyModerators {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n    \r\n    function WithdrawEther(address _sendTo, uint _amount) onlyModerators returns(ResultCode) {\r\n        // can only can withdraw profit - unable to withdraw cheque value\r\n        uint currentProfit = this.balance - (totalChequeValue - totalRedeemedValue);\r\n        if (_amount > currentProfit) {\r\n            LogWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\r\n            return ResultCode.ERROR_INVALID_AMOUNT;\r\n        }\r\n        \r\n        _sendTo.transfer(_amount);\r\n        LogWithdrawEther(_sendTo, ResultCode.SUCCESS, _amount);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    // only when creator wants to get the money back\r\n    // only can refund back to creator\r\n    function RefundChequeById(string _chequeId) onlyModerators returns(ResultCode) {\r\n        bytes32 hashChequeId = sha3(_chequeId);\r\n        Cheque cheque = items[hashChequeId];\r\n        if (cheque.status == Status.NONE) {\r\n            LogRefundCheque(hashChequeId, ResultCode.ERROR_NOT_EXIST);\r\n            return ResultCode.ERROR_NOT_EXIST;\r\n        }\r\n        \r\n        totalRedeemedCheque += 1;\r\n        totalRedeemedValue += cheque.value;\r\n        uint sendAmount = cheque.value;\r\n        delete items[hashChequeId];\r\n        cheque.creator.transfer(sendAmount);\r\n        LogRefundCheque(hashChequeId, ResultCode.SUCCESS);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n\r\n    function RefundChequeByHash(uint256 _chequeIdHash) onlyModerators returns(ResultCode) {\r\n        bytes32 hashChequeId = bytes32(_chequeIdHash);\r\n        Cheque cheque = items[hashChequeId];\r\n        if (cheque.status == Status.NONE) {\r\n            LogRefundCheque(hashChequeId, ResultCode.ERROR_NOT_EXIST);\r\n            return ResultCode.ERROR_NOT_EXIST;\r\n        }\r\n        \r\n        totalRedeemedCheque += 1;\r\n        totalRedeemedValue += cheque.value;\r\n        uint sendAmount = cheque.value;\r\n        delete items[hashChequeId];\r\n        cheque.creator.transfer(sendAmount);\r\n        LogRefundCheque(hashChequeId, ResultCode.SUCCESS);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n\r\n    function GetChequeInfoByHash(uint256 _chequeIdHash) onlyModerators constant returns(Status, uint, uint, uint) {\r\n        bytes32 hashChequeId = bytes32(_chequeIdHash);\r\n        Cheque cheque = items[hashChequeId];\r\n        if (cheque.status == Status.NONE) \r\n            return (Status.NONE, 0, 0, 0);\r\n\r\n        if (cheque.expiringPeriod > 0) {\r\n            uint timeGap = now;\r\n            if (timeGap > cheque.createTime)\r\n                timeGap = timeGap - cheque.createTime;\r\n            else\r\n                timeGap = 0;\r\n\r\n            if (cheque.expiringPeriod > timeGap)\r\n                return (cheque.status, cheque.value, cheque.attempt, cheque.expiringPeriod - timeGap);\r\n            else\r\n                return (Status.EXPIRED, cheque.value, cheque.attempt, 0);\r\n        }\r\n        return (cheque.status, cheque.value, cheque.attempt, 0);\r\n    }\r\n\r\n    function VerifyCheque(string _chequeId, string _pin) onlyModerators constant returns(ResultCode, Status, uint, uint, uint) {\r\n        bytes32 chequeIdHash = sha3(_chequeId);\r\n        Cheque cheque = items[chequeIdHash];\r\n        if (cheque.status == Status.NONE) {\r\n            return (ResultCode.ERROR_NOT_EXIST, Status.NONE, 0, 0, 0);\r\n        }\r\n        if (cheque.pinHash != sha3(_chequeId, _pin)) {\r\n            return (ResultCode.ERROR_INVALID_STATUS, Status.NONE, 0, 0, 0);\r\n        }\r\n        \r\n        return (ResultCode.SUCCESS, cheque.status, cheque.value, cheque.attempt, 0);\r\n    }\r\n    \r\n    // constant function\r\n    function GetChequeInfo(string _chequeId) constant returns(Status, uint, uint, uint) {\r\n        bytes32 hashChequeId = sha3(_chequeId);\r\n        Cheque cheque = items[hashChequeId];\r\n        if (cheque.status == Status.NONE) \r\n            return (Status.NONE, 0, 0, 0);\r\n\r\n        if (cheque.expiringPeriod > 0) {\r\n            uint timeGap = now;\r\n            if (timeGap > cheque.createTime)\r\n                timeGap = timeGap - cheque.createTime;\r\n            else\r\n                timeGap = 0;\r\n\r\n            if (cheque.expiringPeriod > timeGap)\r\n                return (cheque.status, cheque.value, cheque.attempt, cheque.expiringPeriod - timeGap);\r\n            else\r\n                return (Status.EXPIRED, cheque.value, cheque.attempt, 0);\r\n        }\r\n        return (cheque.status, cheque.value, cheque.attempt, 0);\r\n    }\r\n    \r\n    // transaction\r\n    function Create(uint256 _chequeIdHash, uint256 _pinHash, uint32 _expiringPeriod) payable isActive returns(ResultCode) {\r\n        // condition: \r\n        // 1. check min value\r\n        // 2. check _chequeId exist or not\r\n        bytes32 chequeIdHash = bytes32(_chequeIdHash);\r\n        bytes32 pinHash = bytes32(_pinHash);\r\n        uint chequeValue = 0;\r\n        if (msg.value < minChequeValue) {\r\n            msg.sender.transfer(msg.value);\r\n            LogCreate(chequeIdHash, uint(ResultCode.ERROR_MIN), chequeValue);\r\n            return ResultCode.ERROR_MIN;\r\n        }\r\n        if (maxChequeValue > 0 && msg.value > maxChequeValue) {\r\n            msg.sender.transfer(msg.value);\r\n            LogCreate(chequeIdHash, uint(ResultCode.ERROR_MAX), chequeValue);\r\n            return ResultCode.ERROR_MAX;\r\n        }\r\n        if (items[chequeIdHash].status != Status.NONE) {\r\n            msg.sender.transfer(msg.value);\r\n            LogCreate(chequeIdHash, uint(ResultCode.ERROR_EXIST), chequeValue);\r\n            return ResultCode.ERROR_EXIST;\r\n        }\r\n        \r\n        // deduct commission\r\n        chequeValue = (msg.value / 1000) * (1000 - commissionFee);\r\n        totalCheque += 1;\r\n        totalChequeValue += chequeValue;\r\n        items[chequeIdHash] = Cheque({\r\n            pinHash: pinHash,\r\n            creator: msg.sender,\r\n            status: Status.CREATED,\r\n            value: chequeValue,\r\n            createTime: now,\r\n            expiringPeriod: _expiringPeriod,\r\n            attempt: 0\r\n        });\r\n        \r\n        LogCreate(chequeIdHash, uint(ResultCode.SUCCESS), chequeValue);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    function Redeem(string _chequeId, string _pin, address _sendTo) payable returns (ResultCode){\r\n        // condition\r\n        // 1. cheque status must exist\r\n        // 2. cheque status must be CREATED status for non-creator\r\n        // 3. verify attempt and expiry time for non-creator\r\n        bytes32 chequeIdHash = sha3(_chequeId);\r\n        Cheque cheque = items[chequeIdHash];\r\n        if (cheque.status == Status.NONE) {\r\n            LogRedeem(chequeIdHash, ResultCode.ERROR_NOT_EXIST, 0, _sendTo);\r\n            return ResultCode.ERROR_NOT_EXIST;\r\n        }\r\n        if (msg.sender != cheque.creator) {\r\n            if (cheque.status != Status.CREATED) {\r\n                LogRedeem(chequeIdHash, ResultCode.ERROR_INVALID_STATUS, 0, _sendTo);\r\n                return ResultCode.ERROR_INVALID_STATUS;\r\n            }\r\n            if (cheque.attempt > maxAttempt) {\r\n                LogRedeem(chequeIdHash, ResultCode.ERROR_LOCKED, 0, _sendTo);\r\n                return ResultCode.ERROR_LOCKED;\r\n            }\r\n            if (cheque.expiringPeriod > 0 && now > (cheque.createTime + cheque.expiringPeriod)) {\r\n                LogRedeem(chequeIdHash, ResultCode.ERROR_EXPIRED, 0, _sendTo);\r\n                return ResultCode.ERROR_EXPIRED;\r\n            }\r\n        }\r\n        \r\n        // check pin\r\n        if (cheque.pinHash != sha3(_chequeId, _pin)) {\r\n            cheque.attempt += 1;\r\n            LogRedeem(chequeIdHash, ResultCode.ERROR_INVALID_STATUS, 0, _sendTo);\r\n            return ResultCode.ERROR_INVALID_STATUS;\r\n        }\r\n        \r\n        totalRedeemedCheque += 1;\r\n        totalRedeemedValue += cheque.value;\r\n        uint sendMount = cheque.value;\r\n        delete items[chequeIdHash];\r\n        _sendTo.transfer(sendMount);\r\n        LogRedeem(chequeIdHash, ResultCode.SUCCESS, sendMount, _sendTo);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxAttempt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chequeId\",\"type\":\"string\"},{\"name\":\"_pin\",\"type\":\"string\"},{\"name\":\"_sendTo\",\"type\":\"address\"}],\"name\":\"Redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chequeId\",\"type\":\"string\"}],\"name\":\"GetChequeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minChequeValue\",\"type\":\"uint256\"}],\"name\":\"SetMinChequeValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chequeId\",\"type\":\"string\"},{\"name\":\"_pin\",\"type\":\"string\"}],\"name\":\"VerifyCheque\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minChequeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxChequeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxAttempt\",\"type\":\"uint8\"}],\"name\":\"SetMaxAttempt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemedCheque\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalChequeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chequeId\",\"type\":\"string\"}],\"name\":\"RefundChequeById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintenance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chequeIdHash\",\"type\":\"uint256\"},{\"name\":\"_pinHash\",\"type\":\"uint256\"},{\"name\":\"_expiringPeriod\",\"type\":\"uint32\"}],\"name\":\"Create\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCheque\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chequeIdHash\",\"type\":\"uint256\"}],\"name\":\"RefundChequeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxChequeValue\",\"type\":\"uint256\"}],\"name\":\"SetMaxChequeValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chequeIdHash\",\"type\":\"uint256\"}],\"name\":\"GetChequeInfoByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commissionFee\",\"type\":\"uint256\"}],\"name\":\"SetCommissionValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chequeIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chequeIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"chequeIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"LogRefundCheque\",\"type\":\"event\"}]","ContractName":"EtherCheque","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d50a169b0f323258ba878d79a311c2f71cdeee34fe11c30fd2b7f571e33d69ab"}]}