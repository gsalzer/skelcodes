{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.10;\r\n\r\ncontract EthMultiplier {\r\n\r\n//*****************************           **************************************\r\n//***************************** VARIABLES **************************************\r\n//*****************************           **************************************\r\n\r\n//******************************************************************************\r\n//***** PRIVATE VARS ***********************************************************\r\n//******************************************************************************\r\n\r\n uint16 private id;\r\n uint16 private payoutIdx;\r\n address private owner;\r\n\r\n\r\n//******************************************************************************\r\n//***** PUBLIC VARS ************************************************************\r\n//******************************************************************************\r\n\r\n struct Investor {\r\n  address addr;\r\n  uint payout;\r\n  bool paidOut;\r\n }\r\n mapping (uint16 => Investor) public investors;\r\n\r\n uint8 public feePercentage = 10;\r\n uint8 public payOutPercentage = 25;\r\n bool public smartContactForSale = true;\r\n uint public priceOfSmartContract = 25 ether;\r\n \r\n\r\n//*****************************           **************************************\r\n//***************************** FUNCTIONS **************************************\r\n//*****************************           **************************************\r\n\r\n//******************************************************************************\r\n//***** INIT FUNCTION **********************************************************\r\n//******************************************************************************\r\n\r\n function EthMultiplier() { owner = msg.sender; }\r\n\r\n\r\n//******************************************************************************\r\n//***** FALLBACK FUNCTION ******************************************************\r\n//******************************************************************************\r\n\r\n function()\r\n payable {\r\n  // Please be aware: \r\n  // depositing MORE then the price of the smart contract in one transaction \r\n  // will call the 'buySmartContract' function, and will make you the owner.\r\n  msg.value >= priceOfSmartContract? \r\n   buySmartContract(): \r\n   invest();\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** ADD INVESTOR FUNCTION **************************************************\r\n//******************************************************************************\r\n\r\n event newInvestor(\r\n  uint16 idx,\r\n  address investor,\r\n  uint amount,\r\n  uint InvestmentNeededForPayOut\r\n );\r\n \r\n event lastInvestorPaidOut(uint payoutIdx);\r\n\r\n modifier entryCosts(uint min, uint max) {\r\n  if (msg.value < min || msg.value > max) throw;\r\n  _;\r\n }\r\n\r\n function invest()\r\n payable\r\n entryCosts(1 finney, 10 ether) {\r\n  // Warning! the creator of this smart contract is in no way\r\n  // responsible for any losses or gains in both the 'invest' function nor \r\n  // the 'buySmartContract' function.\r\n  \r\n  investors[id].addr = msg.sender;\r\n  investors[id].payout = msg.value * (100 + payOutPercentage) / 100;\r\n\r\n  owner.transfer(msg.value * feePercentage / 100);\r\n\r\n  while (this.balance >= investors[payoutIdx].payout) {\r\n   investors[payoutIdx].addr.transfer(investors[payoutIdx].payout);\r\n   investors[payoutIdx++].paidOut = true;\r\n  }\r\n  \r\n  lastInvestorPaidOut(payoutIdx - 1);\r\n\r\n  newInvestor(\r\n   id++,\r\n   msg.sender,\r\n   msg.value,\r\n   checkInvestmentRequired(id, false)\r\n  );\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** CHECK REQUIRED INVESTMENT FOR PAY OUT FUNCTION *************************\r\n//******************************************************************************\r\n\r\n event manualCheckInvestmentRequired(uint id, uint investmentRequired);\r\n\r\n modifier awaitingPayOut(uint16 _investorId, bool _manual) {\r\n  if (_manual && (_investorId > id || _investorId < payoutIdx)) throw;\r\n  _;\r\n }\r\n\r\n function checkInvestmentRequired(uint16 _investorId, bool _clickYes)\r\n awaitingPayOut(_investorId, _clickYes)\r\n returns(uint amount) {\r\n  for (uint16 iPayoutIdx = payoutIdx; iPayoutIdx <= _investorId; iPayoutIdx++) {\r\n   amount += investors[iPayoutIdx].payout;\r\n  }\r\n\r\n  amount = (amount - this.balance) * 100 / (100 - feePercentage);\r\n\r\n  if (_clickYes) manualCheckInvestmentRequired(_investorId, amount);\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** BUY SMART CONTRACT FUNCTION ********************************************\r\n//******************************************************************************\r\n\r\n event newOwner(uint pricePayed);\r\n\r\n modifier isForSale() {\r\n  if (!smartContactForSale \r\n  || msg.value < priceOfSmartContract \r\n  || msg.sender == owner) throw;\r\n  _;\r\n  if (msg.value > priceOfSmartContract)\r\n   msg.sender.transfer(msg.value - priceOfSmartContract);\r\n }\r\n\r\n function buySmartContract()\r\n payable\r\n isForSale {\r\n  // Warning! the creator of this smart contract is in no way\r\n  // responsible for any losses or gains in both the 'invest' function nor \r\n  // the 'buySmartContract' function.\r\n\r\n  // Always correctly identify the risk related before using this function.\r\n  owner.transfer(priceOfSmartContract);\r\n  owner = msg.sender;\r\n  smartContactForSale = false;\r\n  newOwner(priceOfSmartContract);\r\n }\r\n\r\n\r\n//*****************************            *************************************\r\n//***************************** OWNER ONLY *************************************\r\n//*****************************            *************************************\r\n\r\n modifier onlyOwner() {\r\n  if (msg.sender != owner) throw;\r\n  _;\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** SET FEE PERCENTAGE FUNCTION ********************************************\r\n//******************************************************************************\r\n\r\n event newFeePercentageIsSet(uint percentage);\r\n\r\n modifier FPLimits(uint8 _percentage) {\r\n  // fee percentage cannot be higher than 25\r\n  if (_percentage > 25) throw;\r\n  _;\r\n }\r\n\r\n function setFeePercentage(uint8 _percentage)\r\n onlyOwner\r\n FPLimits(_percentage) {\r\n  feePercentage = _percentage;\r\n  newFeePercentageIsSet(_percentage);\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** SET PAY OUT PERCENTAGE FUNCTION ****************************************\r\n//******************************************************************************\r\n\r\n event newPayOutPercentageIsSet(uint percentageOnTopOfDeposit);\r\n\r\n modifier POTODLimits(uint8 _percentage) {\r\n  // pay out percentage cannot be higher than 100 (so double the investment)\r\n  // it also cannot be lower than the fee percentage\r\n  if (_percentage > 100 || _percentage < feePercentage) throw;\r\n  _;\r\n }\r\n\r\n function setPayOutPercentage(uint8 _percentageOnTopOfDeposit)\r\n onlyOwner\r\n POTODLimits(_percentageOnTopOfDeposit) {\r\n  payOutPercentage = _percentageOnTopOfDeposit;\r\n  newPayOutPercentageIsSet(_percentageOnTopOfDeposit);\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** TOGGLE SMART CONTRACT SALE FUNCTIONS ***********************************\r\n//******************************************************************************\r\n\r\n event smartContractIsForSale(uint price);\r\n event smartContractSaleEnded();\r\n\r\n function putSmartContractOnSale(bool _sell)\r\n onlyOwner {\r\n  smartContactForSale = _sell;\r\n  _sell? \r\n   smartContractIsForSale(priceOfSmartContract): \r\n   smartContractSaleEnded();\r\n }\r\n\r\n\r\n//******************************************************************************\r\n//***** SET SMART CONTRACT PRICE FUNCTIONS *************************************\r\n//******************************************************************************\r\n\r\n event smartContractPriceIsSet(uint price);\r\n\r\n modifier SCPLimits(uint _price) {\r\n  // smart contract price cannot be lower or equal than 10 ether\r\n  if (_price <= 10 ether) throw;\r\n  _;\r\n }\r\n\r\n function setSmartContractPrice(uint _price)\r\n onlyOwner \r\n SCPLimits(_price) {\r\n  priceOfSmartContract = _price;\r\n  smartContractPriceIsSet(_price);\r\n }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"smartContactForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sell\",\"type\":\"bool\"}],\"name\":\"putSmartContractOnSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"paidOut\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setSmartContractPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOfSmartContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buySmartContract\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payOutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentageOnTopOfDeposit\",\"type\":\"uint8\"}],\"name\":\"setPayOutPercentage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorId\",\"type\":\"uint16\"},{\"name\":\"_clickYes\",\"type\":\"bool\"}],\"name\":\"checkInvestmentRequired\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"idx\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"InvestmentNeededForPayOut\",\"type\":\"uint256\"}],\"name\":\"newInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payoutIdx\",\"type\":\"uint256\"}],\"name\":\"lastInvestorPaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investmentRequired\",\"type\":\"uint256\"}],\"name\":\"manualCheckInvestmentRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pricePayed\",\"type\":\"uint256\"}],\"name\":\"newOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"newFeePercentageIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"percentageOnTopOfDeposit\",\"type\":\"uint256\"}],\"name\":\"newPayOutPercentageIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"smartContractIsForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"smartContractSaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"smartContractPriceIsSet\",\"type\":\"event\"}]","ContractName":"EthMultiplier","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4c5ecc15b09fc20ad06414ef2847c8225c4cf3a711c3fb84c12809f2bb82417"}]}