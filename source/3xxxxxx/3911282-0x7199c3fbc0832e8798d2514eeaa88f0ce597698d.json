{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Multisig {\r\n  event Deposit(address _from, uint value);\r\n  event SingleTransact(address owner, uint value, address to, bytes data);\r\n  event MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data);\r\n  event ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);\r\n  function changeOwner(address _from, address _to) external;\r\n  function execute(address _to, uint _value, bytes _data) external returns (bytes32);\r\n  function confirm(bytes32 _h) returns (bool);\r\n}\r\n\r\n\r\ncontract Shareable {\r\n  struct PendingState {\r\n    uint yetNeeded;\r\n    uint ownersDone;\r\n    uint index;\r\n  }\r\n  uint public required;\r\n  address[256] owners;\r\n  mapping(address => uint) ownerIndex;\r\n  mapping(bytes32 => PendingState) pendings;\r\n  bytes32[] pendingsIndex;\r\n  event Confirmation(address owner, bytes32 operation);\r\n  event Revoke(address owner, bytes32 operation);\r\n  modifier onlyOwner {\r\n    if (!isOwner(msg.sender)) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n  modifier onlymanyowners(bytes32 _operation) {\r\n    if (confirmAndCheck(_operation)) {\r\n      _;\r\n    }\r\n  }\r\n  function Shareable(address[] _owners, uint _required) {\r\n    owners[1] = msg.sender;\r\n    ownerIndex[msg.sender] = 1;\r\n    for (uint i = 0; i < _owners.length; ++i) {\r\n      owners[2 + i] = _owners[i];\r\n      ownerIndex[_owners[i]] = 2 + i;\r\n    }\r\n    required = _required;\r\n    if (required > owners.length) {\r\n      throw;\r\n    }\r\n  }\r\n  function revoke(bytes32 _operation) external {\r\n    uint index = ownerIndex[msg.sender];\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    uint ownerIndexBit = 2**index;\r\n    var pending = pendings[_operation];\r\n    if (pending.ownersDone & ownerIndexBit > 0) {\r\n      pending.yetNeeded++;\r\n      pending.ownersDone -= ownerIndexBit;\r\n      Revoke(msg.sender, _operation);\r\n    }\r\n  }\r\n  function getOwner(uint ownerIndex) external constant returns (address) {\r\n    return address(owners[ownerIndex + 1]);\r\n  }\r\n  function isOwner(address _addr) constant returns (bool) {\r\n    return ownerIndex[_addr] > 0;\r\n  }\r\n  function hasConfirmed(bytes32 _operation, address _owner) constant returns (bool) {\r\n    var pending = pendings[_operation];\r\n    uint index = ownerIndex[_owner];\r\n    if (index == 0) {\r\n      return false;\r\n    }\r\n    uint ownerIndexBit = 2**index;\r\n    return !(pending.ownersDone & ownerIndexBit == 0);\r\n  }\r\n  function confirmAndCheck(bytes32 _operation) internal returns (bool) {\r\n    uint index = ownerIndex[msg.sender];\r\n    if (index == 0) {\r\n      throw;\r\n    }\r\n\r\n    var pending = pendings[_operation];\r\n    if (pending.yetNeeded == 0) {\r\n      pending.yetNeeded = required;\r\n      pending.ownersDone = 0;\r\n      pending.index = pendingsIndex.length++;\r\n      pendingsIndex[pending.index] = _operation;\r\n    }\r\n    uint ownerIndexBit = 2**index;\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      Confirmation(msg.sender, _operation);\r\n      if (pending.yetNeeded <= 1) {\r\n        delete pendingsIndex[pendings[_operation].index];\r\n        delete pendings[_operation];\r\n        return true;\r\n      } else {\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  function clearPending() internal {\r\n    uint length = pendingsIndex.length;\r\n    for (uint i = 0; i < length; ++i) {\r\n      if (pendingsIndex[i] != 0) {\r\n        delete pendings[pendingsIndex[i]];\r\n      }\r\n    }\r\n    delete pendingsIndex;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract DayLimit {\r\n\r\n  uint public dailyLimit;\r\n  uint public spentToday;\r\n  uint public lastDay;\r\n  function DayLimit(uint _limit) {\r\n    dailyLimit = _limit;\r\n    lastDay = today();\r\n  }\r\n  function _setDailyLimit(uint _newLimit) internal {\r\n    dailyLimit = _newLimit;\r\n  }\r\n  function _resetSpentToday() internal {\r\n    spentToday = 0;\r\n  }\r\n  function underLimit(uint _value) internal returns (bool) {\r\n    if (today() > lastDay) {\r\n      spentToday = 0;\r\n      lastDay = today();\r\n    }\r\n    if (spentToday + _value >= spentToday && spentToday + _value <= dailyLimit) {\r\n      spentToday += _value;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  function today() private constant returns (uint) {\r\n    return now / 1 days;\r\n  }\r\n  modifier limitedDaily(uint _value) {\r\n    if (!underLimit(_value)) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract MultisigWalletZeppelin is Multisig, Shareable, DayLimit {\r\n\r\n  struct Transaction {\r\n    address to;\r\n    uint value;\r\n    bytes data;\r\n  }\r\n  function MultisigWalletZeppelin(address[] _owners, uint _required, uint _daylimit)       \r\n    Shareable(_owners, _required)        \r\n    DayLimit(_daylimit) { \r\n    }\r\n  function destroy(address _to) onlymanyowners(keccak256(msg.data)) external {\r\n    selfdestruct(_to);\r\n  }\r\n  function() payable {\r\n    if (msg.value > 0)\r\n      Deposit(msg.sender, msg.value);\r\n  }\r\n  function execute(address _to, uint _value, bytes _data) external onlyOwner returns (bytes32 _r) {\r\n    if (underLimit(_value)) {\r\n      SingleTransact(msg.sender, _value, _to, _data);\r\n      if (!_to.call.value(_value)(_data)) {\r\n        throw;\r\n      }\r\n      return 0;\r\n    }\r\n    _r = keccak256(msg.data, block.number);\r\n    if (!confirm(_r) && txs[_r].to == 0) {\r\n      txs[_r].to = _to;\r\n      txs[_r].value = _value;\r\n      txs[_r].data = _data;\r\n      ConfirmationNeeded(_r, msg.sender, _value, _to, _data);\r\n    }\r\n  }\r\n  function confirm(bytes32 _h) onlymanyowners(_h) returns (bool) {\r\n    if (txs[_h].to != 0) {\r\n      if (!txs[_h].to.call.value(txs[_h].value)(txs[_h].data)) {\r\n        throw;\r\n      }\r\n      MultiTransact(msg.sender, _h, txs[_h].value, txs[_h].to, txs[_h].data);\r\n      delete txs[_h];\r\n      return true;\r\n    }\r\n  }\r\n  function setDailyLimit(uint _newLimit) onlymanyowners(keccak256(msg.data)) external {\r\n    _setDailyLimit(_newLimit);\r\n  }\r\n  function resetSpentToday() onlymanyowners(keccak256(msg.data)) external {\r\n    _resetSpentToday();\r\n  }\r\n  function clearPending() internal {\r\n    uint length = pendingsIndex.length;\r\n    for (uint i = 0; i < length; ++i) {\r\n      delete txs[pendingsIndex[i]];\r\n    }\r\n    super.clearPending();\r\n  }\r\n  mapping (bytes32 => Transaction) txs;\r\n}\r\n\r\n\r\ncontract MultisigWallet is MultisigWalletZeppelin {\r\n  uint public totalSpending;\r\n\r\n  function MultisigWallet(address[] _owners, uint _required, uint _daylimit)\r\n    MultisigWalletZeppelin(_owners, _required, _daylimit) payable { }\r\n\r\n  function changeOwner(address _from, address _to) external { }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetSpentToday\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSpending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_h\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"_r\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_daylimit\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SingleTransact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MultiTransact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ConfirmationNeeded\",\"type\":\"event\"}]","ContractName":"MultisigWallet","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000f1bda8f06191bc29f46d0ee3cbf68555a478a21700000000000000000000000022283b7315dd4b1741676e092279fc4f46ecc0030000000000000000000000006c750da8df323d53eed6812a7afb834b0752e94c00000000000000000000000072bbe344986351a0c4e899d655e81de8f64e9794","Library":"","SwarmSource":"bzzr://25ed5680621543b2840b6805f12a8813e02bee0ed35fc9951c9e36b75be78dd5"}]}