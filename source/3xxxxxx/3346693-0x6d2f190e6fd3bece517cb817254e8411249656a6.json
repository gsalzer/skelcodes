{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract AddressOwnershipVerification {\r\n    mapping(address => mapping (uint32 => address)) _requests;        // Pending requests (transactee address => (deposit => transactor address)\r\n    mapping(address => mapping (address => uint32)) _requestsReverse; // Used for reverse lookups  (transactee address => (transactor address => deposit)\r\n    mapping(address => mapping (address => uint32)) _verifications;   // Verified requests (transactor address => (transactee address => deposit)\r\n\r\n    event RequestEvent(address indexed transactor, address indexed transactee, uint32 indexed deposit);      // Event is triggered when a new request is added\r\n    event RemoveRequestEvent(address indexed transactor, address indexed transactee);                        // Event is triggered when an unverified request is removed\r\n    event VerificationEvent(address indexed transactor, address indexed transactee, uint32 indexed deposit); // Event is triggered when someone proves ownership of an address\r\n    event RevokeEvent(address indexed transactor, address indexed transactee, uint32 indexed deposit);       // Event is triggered when either party removes a trust\r\n\r\n    function AddressOwnershipVerification() {}\r\n\r\n    // Used to verify pending requests by transactee sending deposit to this contract\r\n    function () payable {\r\n        uint32 value = uint32(msg.value);\r\n\r\n        if (!_requestExists(msg.sender, value)) {\r\n            throw;\r\n        }\r\n\r\n        // Get matching transactor for request\r\n        address transactor = _requests[msg.sender][value];\r\n\r\n        // Save new Verification\r\n        _saveVerification(transactor, msg.sender, value);\r\n\r\n        // And then delete the verified request\r\n        _deleteRequest(transactor, msg.sender);\r\n\r\n        VerificationEvent(transactor, msg.sender, value);\r\n    }\r\n\r\n    // Request a new verification as transactor\r\n    function request(address transactee, uint32 deposit) {\r\n        // Throw if sender wastes blockchain space\r\n        if (transactee == msg.sender) {\r\n            throw;\r\n        }\r\n\r\n        // Deposit can't be 0 because all uint's get initialized to 0 in _requests\r\n        if (deposit == 0) {\r\n            throw;\r\n        }\r\n\r\n        // Throw if transactee already provided verification to transactor\r\n        if(verify(msg.sender, transactee)) {\r\n            throw;\r\n        }\r\n\r\n        // Throw if transactee already has a pending request for this exact deposit\r\n        if (_requestExists(transactee, deposit)) {\r\n            throw;\r\n        }\r\n\r\n        if (_requestExistsReverse(msg.sender, transactee)) {\r\n            throw;\r\n        }\r\n\r\n        _saveRequest(msg.sender, transactee, deposit);\r\n\r\n        RequestEvent(msg.sender, transactee, deposit);\r\n    }\r\n\r\n    // Returns amount of wei transactee has to send to fullfill transactor's request\r\n    function getRequest(address transactor, address transactee) returns (uint32 deposit) {\r\n        return _requestsReverse[transactee][transactor];\r\n    }\r\n\r\n    // Removes a pending request as transactor or transactee\r\n    function removeRequest(address transactor, address transactee) returns (uint32) {\r\n        // Only transactor and transactee can trigger removal of their request\r\n        if (msg.sender != transactor && msg.sender != transactee) {\r\n            throw;\r\n        }\r\n\r\n        _deleteRequest(transactor, transactee);\r\n\r\n        RemoveRequestEvent(transactor, transactee);\r\n    }\r\n\r\n    //  Returns true if transactee has already proven their address ownership to transactor in the past\r\n    function verify(address transactor, address transactee) returns (bool) {\r\n        return _verifications[transactor][transactee] != 0;\r\n    }\r\n\r\n    // Removes an existing verification and returns the deposited amount to transactee\r\n    // Can be called by either transactor or transactee\r\n    function revoke(address transactor, address transactee) {\r\n        // Only transactor and transactee can trigger removal of their verification\r\n        if (msg.sender != transactor && msg.sender != transactee) {\r\n            throw;\r\n        }\r\n\r\n        // Throw if verification does not exist\r\n        if(!verify(transactor, transactee)) {\r\n            throw;\r\n        }\r\n\r\n        uint32 deposit = _verifications[transactor][transactee];\r\n\r\n        // Delete verification\r\n        delete _verifications[transactor][transactee];\r\n\r\n        // Send deposit to transactee\r\n        if (!transactee.call.value(deposit).gas(23000)()) {\r\n            throw;\r\n        }\r\n\r\n        RevokeEvent(transactor, transactee, deposit);\r\n    }\r\n\r\n    // Internal: Save a new request\r\n    function _saveRequest(address transactor, address transactee, uint32 deposit) internal {\r\n        _requests[transactee][deposit] = transactor;\r\n        _requestsReverse[transactee][transactor] = deposit;\r\n    }\r\n\r\n    // Internal: Remove a fullfilled request\r\n    function _deleteRequest(address transactor, address transactee) internal {\r\n        uint32 deposit = _requestsReverse[transactee][transactor];\r\n\r\n        delete _requests[transactee][deposit];\r\n        delete _requestsReverse[transactee][transactor];\r\n    }\r\n\r\n    // Internal: Test if a request exists when you know transactee and deposit\r\n    function _requestExists(address transactee, uint32 deposit) internal returns(bool) {\r\n        return _requests[transactee][deposit] != 0x0000000000000000000000000000000000000000;\r\n    }\r\n\r\n    // Internal: Test if a request exists when you know transactee and transactor\r\n    function _requestExistsReverse(address transactor, address transactee) internal returns(bool) {\r\n        return _requestsReverse[transactee][transactor] != 0;\r\n    }\r\n\r\n    // Internal: Save a new verification\r\n    function _saveVerification(address transactor, address transactee, uint32 deposit) internal {\r\n        _verifications[transactor][transactee] = deposit;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"transactor\",\"type\":\"address\"},{\"name\":\"transactee\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactor\",\"type\":\"address\"},{\"name\":\"transactee\",\"type\":\"address\"}],\"name\":\"getRequest\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactee\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint32\"}],\"name\":\"request\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactor\",\"type\":\"address\"},{\"name\":\"transactee\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactor\",\"type\":\"address\"},{\"name\":\"transactee\",\"type\":\"address\"}],\"name\":\"removeRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deposit\",\"type\":\"uint32\"}],\"name\":\"RequestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactee\",\"type\":\"address\"}],\"name\":\"RemoveRequestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deposit\",\"type\":\"uint32\"}],\"name\":\"VerificationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deposit\",\"type\":\"uint32\"}],\"name\":\"RevokeEvent\",\"type\":\"event\"}]","ContractName":"AddressOwnershipVerification","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ff6667551c6187a697dce56f0997eb32b0bc6ad13f8c0b7a6df20c3387f1c09"}]}