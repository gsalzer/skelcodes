{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.8;\r\n\r\ncontract owned {\r\n  address public owner;\r\n  function owned() {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner {\r\n    if(msg.sender != owner) throw;\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract RTokenBase {\r\n  /* contract info */\r\n  string public standard = 'Token 0.1';\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  /* maintain a balance mapping of R tokens */\r\n  mapping(address => uint256) public balanceMap;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  /* what to do on transfers */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /* Constructor */\r\n  function RTokenBase(uint256 initialAmt, string tokenName, string tokenSymbol, uint8 decimalUnits) payable {\r\n    balanceMap[msg.sender] = initialAmt;\r\n    totalSupply = initialAmt;\r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n    decimals = decimalUnits;\r\n  }\r\n\r\n  /* send tokens */\r\n  function transfer(address _to, uint256 _value) payable {\r\n    if(\r\n        (balanceMap[msg.sender] < _value) ||\r\n        (balanceMap[_to] + _value < balanceMap[_to])\r\n      )\r\n      throw;\r\n    balanceMap[msg.sender] -= _value;\r\n    balanceMap[_to] += _value;\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /* allow other contracts to spend tokens */\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    return true;\r\n  }\r\n\r\n  /* approve and notify */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _stuff) returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if(approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _stuff);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /* do a transfer */\r\n  function transferFrom(address _from, address _to, uint256 _value) payable returns (bool success) {\r\n    if(\r\n        (balanceMap[_from] < _value) ||\r\n        (balanceMap[_to] + _value < balanceMap[_to]) ||\r\n        (_value > allowance[_from][msg.sender])\r\n      )\r\n      throw;\r\n    balanceMap[_from] -= _value;\r\n    balanceMap[_to] += _value;\r\n    allowance[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /* trap bad sends */\r\n  function () {\r\n    throw;\r\n  }\r\n}\r\n\r\ncontract RTokenMain is owned, RTokenBase {\r\n  uint256 public sellPrice;\r\n  uint256 public buyPrice;\r\n  uint256 public totalSupply;\r\n\r\n  mapping(address => bool) public frozenAccount;\r\n\r\n  event FrozenFunds(address target, bool frozen);\r\n\r\n  function RTokenMain(uint256 initialAmt, string tokenName, string tokenSymbol, uint8 decimals, address centralMinter)\r\n    RTokenBase(initialAmt, tokenName, tokenSymbol, decimals) {\r\n      if(centralMinter != 0)\r\n        owner = centralMinter;\r\n      balanceMap[owner] = initialAmt;\r\n    }\r\n\r\n  function transfer(address _to, uint256 _value) payable {\r\n    if(\r\n        (balanceMap[msg.sender] < _value) ||\r\n        (balanceMap[_to] + _value < balanceMap[_to]) ||\r\n        (frozenAccount[msg.sender])\r\n      )\r\n      throw;\r\n    balanceMap[msg.sender] -= _value;\r\n    balanceMap[_to] += _value;\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) payable returns (bool success) {\r\n    if(\r\n        (frozenAccount[_from]) ||\r\n        (balanceMap[_from] < _value) ||\r\n        (balanceMap[_to] + _value < balanceMap[_to]) ||\r\n        (_value > allowance[_from][msg.sender])\r\n      )\r\n      throw;\r\n    balanceMap[_from] -= _value;\r\n    balanceMap[_to] += _value;\r\n    allowance[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n    balanceMap[target] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n    Transfer(0, this, mintedAmount);\r\n    Transfer(this, target, mintedAmount);\r\n  }\r\n\r\n  function freezeAccount(address target, bool freeze) onlyOwner {\r\n    frozenAccount[target] = freeze;\r\n    FrozenFunds(target, freeze);\r\n  }\r\n\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n    sellPrice = newSellPrice;\r\n    buyPrice = newBuyPrice;\r\n  }\r\n\r\n  function buy() payable {\r\n    uint amount = msg.value/buyPrice;\r\n    if(balanceMap[this] < amount)\r\n      throw;\r\n    balanceMap[msg.sender] += amount;\r\n    balanceMap[this] -= amount;\r\n    Transfer(this, msg.sender, amount);\r\n  }\r\n\r\n  function sell(uint256 amount) {\r\n    if(balanceMap[msg.sender] < amount)\r\n      throw;\r\n    balanceMap[msg.sender] -= amount;\r\n    balanceMap[this] += amount;\r\n    if(!msg.sender.send(amount*sellPrice))\r\n      throw;\r\n    else\r\n      Transfer(msg.sender, this, amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_stuff\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialAmt\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RTokenMain","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e71f0ea1bc07dc917ade97931ba8102fc8c9b9a0000000000000000000000000000000000000000000000000000000000000000c522054696d6520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025253000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2c83e9f3d90ee958fb7d8e0e60bbd3b7cb1cc12b8745bac8b84be14286a31faf"}]}