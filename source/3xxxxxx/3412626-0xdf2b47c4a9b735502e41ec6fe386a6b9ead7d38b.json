{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard Token Interface with HumaniQ features.\r\n/// @author EtherionLab team, https://etherionlab.com\r\ncontract HumaniqToken is StandardToken {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    address public emissionContractAddress = 0x0;\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"HumaniQ\";\r\n    string constant public symbol = \"HMQ\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    address public founder = 0x0;\r\n    bool locked = true;\r\n    /*\r\n     * Modifiers\r\n     */\r\n    modifier onlyFounder() {\r\n        // Only founder is allowed to do this action.\r\n        if (msg.sender != founder) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isCrowdfundingContract() {\r\n        // Only emission address is allowed to proceed.\r\n        if (msg.sender != emissionContractAddress) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier unlocked() {\r\n        // Only when transferring coins is enabled.\r\n        if (locked == true) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\r\n    /// @param _for Address of receiver.\r\n    /// @param tokenCount Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        payable\r\n        isCrowdfundingContract\r\n        returns (bool)\r\n    {\r\n        if (tokenCount == 0) {\r\n            return false;\r\n        }\r\n        balances[_for] += tokenCount;\r\n        totalSupply += tokenCount;\r\n        Issuance(_for, tokenCount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        unlocked\r\n        returns (bool success)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        unlocked\r\n        returns (bool success)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @dev Function to change address that is allowed to do emission.\r\n    /// @param newAddress Address of new emission contract.\r\n    function changeEmissionContractAddress(address newAddress)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        emissionContractAddress = newAddress;\r\n    }\r\n\r\n    /// @dev Function that locks/unlocks transfers of token.\r\n    /// @param value True/False\r\n    function lock(bool value)\r\n        external\r\n        onlyFounder\r\n    {\r\n        locked = value;\r\n    }\r\n\r\n    /// @dev Contract constructor function sets initial token balances.\r\n    /// @param _founder Address of the founder of HumaniQ.\r\n    function HumaniqToken(address _founder)\r\n    {\r\n        totalSupply = 0;\r\n        founder = _founder;\r\n    }\r\n}\r\n\r\n\r\n/// @title HumaniqICO contract - Takes funds from users and issues tokens.\r\n/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\r\ncontract HumaniqICO {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    HumaniqToken public humaniqToken;\r\n\r\n    /*\r\n     * Crowdfunding parameters\r\n     */\r\n    uint constant public CROWDFUNDING_PERIOD = 3 weeks;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public founder;\r\n    address public multisig;\r\n    uint public startDate = 0;\r\n    uint public icoBalance = 0;\r\n    uint public coinsIssued = 0;\r\n    uint public baseTokenPrice = 1 finney; // 0.001 ETH\r\n    uint public discountedPrice = baseTokenPrice;\r\n    bool public isICOActive = false;\r\n\r\n    // participant address => value in Wei\r\n    mapping (address => uint) public investments;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyFounder() {\r\n        // Only founder is allowed to do this action.\r\n        if (msg.sender != founder) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier minInvestment() {\r\n        // User has to send at least the ether value of one token.\r\n        if (msg.value < baseTokenPrice) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier icoActive() {\r\n        if (isICOActive == false) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Returns current bonus\r\n    function getCurrentBonus()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return getBonus(now);\r\n    }\r\n\r\n    /// @dev Returns bonus for the specific moment\r\n    /// @param timestamp Time of investment (in seconds)\r\n    function getBonus(uint timestamp)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n\r\n        if (startDate == 0) {\r\n            return 1499; // 49.9%\r\n        }\r\n\r\n        uint icoDuration = timestamp - startDate;\r\n        if (icoDuration >= 16 days) {\r\n            return 1000;  // 0%\r\n        } else if (icoDuration >= 9 days) {\r\n            return 1125;  // 12.5%\r\n        } else if (icoDuration >= 2 days) {\r\n            return 1250;  // 25%\r\n        } else {\r\n            return 1499;  // 49.9%\r\n        }\r\n    }\r\n\r\n    function calculateTokens(uint investment, uint timestamp)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        // calculate discountedPrice\r\n        discountedPrice = (baseTokenPrice * 1000) / getBonus(timestamp);\r\n\r\n        // Token count is rounded down. Sent ETH should be multiples of baseTokenPrice.\r\n        return investment / discountedPrice;\r\n    }\r\n\r\n    /// @dev Issues tokens\r\n    /// @param beneficiary Address the tokens will be issued to.\r\n    /// @param investment Invested amount in Wei\r\n    /// @param timestamp Time of investment (in seconds)\r\n    /// @param sendToFounders Whether to send received ethers to multisig address or not\r\n    function issueTokens(address beneficiary, uint investment, uint timestamp, bool sendToFounders)\r\n        private\r\n        returns (uint)\r\n    {\r\n        uint tokenCount = calculateTokens(investment, timestamp);\r\n\r\n        // Ether spent by user.\r\n        uint roundedInvestment = tokenCount * discountedPrice;\r\n\r\n        // Send change back to user.\r\n        if (sendToFounders && investment > roundedInvestment && !beneficiary.send(investment - roundedInvestment)) {\r\n            throw;\r\n        }\r\n\r\n        // Update fund's and user's balance and total supply of tokens.\r\n        icoBalance += investment;\r\n        coinsIssued += tokenCount;\r\n        investments[beneficiary] += roundedInvestment;\r\n\r\n        // Send funds to founders if investment was made\r\n        if (sendToFounders && !multisig.send(roundedInvestment)) {\r\n            // Could not send money\r\n            throw;\r\n        }\r\n\r\n        if (!humaniqToken.issueTokens(beneficiary, tokenCount)) {\r\n            // Tokens could not be issued.\r\n            throw;\r\n        }\r\n\r\n        return tokenCount;\r\n    }\r\n\r\n    /// @dev Allows user to create tokens if token creation is still going\r\n    /// and cap was not reached. Returns token count.\r\n    function fund()\r\n        public\r\n        icoActive\r\n        minInvestment\r\n        payable\r\n        returns (uint)\r\n    {\r\n        return issueTokens(msg.sender, msg.value, now, true);\r\n    }\r\n\r\n    /// @dev Issues tokens for users who made BTC purchases.\r\n    /// @param beneficiary Address the tokens will be issued to.\r\n    /// @param investment Invested amount in Wei\r\n    /// @param timestamp Time of investment (in seconds)\r\n    function fixInvestment(address beneficiary, uint investment, uint timestamp)\r\n        external\r\n        icoActive\r\n        onlyFounder\r\n        returns (uint)\r\n    {\r\n        if (timestamp == 0) {\r\n            return issueTokens(beneficiary, investment, now, false);\r\n        }\r\n\r\n        return issueTokens(beneficiary, investment, timestamp, false);\r\n    }\r\n\r\n    /// @dev If ICO has successfully finished sends the money to multisig\r\n    /// wallet.\r\n    function finishCrowdsale()\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        if (isICOActive == true) {\r\n            isICOActive = false;\r\n            // Founders receive 14% of all created tokens.\r\n             uint founderBonus = (coinsIssued * 14) / 86;\r\n             if (!humaniqToken.issueTokens(multisig, founderBonus)) {\r\n                 // Tokens could not be issued.\r\n                 throw;\r\n             }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets token value in Wei.\r\n    /// @param valueInWei New value.\r\n    function changeBaseTokenPrice(uint valueInWei)\r\n        external\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        baseTokenPrice = valueInWei;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenAddress(address token_address) \r\n        public\r\n        onlyFounder\r\n    {\r\n         humaniqToken = HumaniqToken(token_address);\r\n    }\r\n\r\n    function changeFounder(address _founder) \r\n        public\r\n        onlyFounder\r\n    {\r\n        founder = _founder;\r\n    }\r\n\r\n    /// @dev Function that activates ICO.\r\n    function startICO()\r\n        external\r\n        onlyFounder\r\n    {\r\n        if (isICOActive == false && startDate == 0) {\r\n          // Start ICO\r\n          isICOActive = true;\r\n          // Set start-date of token creation\r\n          startDate = now;\r\n        }\r\n    }\r\n\r\n    /// @dev Contract constructor function sets founder and multisig addresses.\r\n    function HumaniqICO(address _founder, address _multisig, address token_address) {\r\n        // Set founder address\r\n        founder = _founder;\r\n        // Set multisig address\r\n        multisig = _multisig;\r\n        // Set token address\r\n        humaniqToken = HumaniqToken(token_address);\r\n    }\r\n\r\n    /// @dev Fallback function. Calls fund() function to create tokens.\r\n    function () payable {\r\n        fund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDFUNDING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humaniqToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"fixInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"changeBaseTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"token_address\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"HumaniqICO","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c890b1f532e674977dfdb791cafaee898dfa9671000000000000000000000000a2c9a7578e2172f32a36c5c0e49d64776f9e78830000000000000000000000009734c136f5c63531b60d02548bca73a3d72e024d","Library":"","SwarmSource":"bzzr://4b794418631817ca797bcc1b62e8de4fc36efa72840302c89717a603397ade96"}]}