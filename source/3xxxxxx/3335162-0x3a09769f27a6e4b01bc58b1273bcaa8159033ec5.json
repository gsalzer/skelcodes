{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract SwapToken is owned {\r\n    /* Public variables of the token */\r\n    \r\n    string public standard = 'Token 0.1';\r\n\r\n    // buyer tokens\r\n    string public buyerTokenName;\r\n    string public buyerSymbol;\r\n    uint8 public buyerDecimals;\r\n    uint256 public totalBuyerSupply;\r\n    \r\n    // issuer tokens\r\n    string public issuerTokenName;\r\n    string public issuerSymbol;\r\n    uint8 public issuerDecimals;\r\n    uint256 public totalIssuerSupply;\r\n    \r\n    // more variables\r\n    uint256 public buyPrice;\r\n    uint256 public issuePrice;\r\n    uint256 public cPT;\r\n    uint256 public premium;\r\n    bool public creditStatus;\r\n    address public project_wallet;\r\n    address public collectionFunds;\r\n    //uint public startBlock;\r\n    //uint public endBlock;\r\n    \r\n    /* Sets the constructor variables */\r\n    function SwapToken(\r\n        string _buyerTokenName,\r\n        string _buyerSymbol,\r\n        uint8 _buyerDecimals,\r\n        string _issuerTokenName,\r\n        string _issuerSymbol,\r\n        uint8 _issuerDecimals,\r\n        address _collectionFunds,\r\n        uint _startBlock,\r\n        uint _endBlock\r\n        ) {\r\n        buyerTokenName = _buyerTokenName;\r\n        buyerSymbol = _buyerSymbol;\r\n        buyerDecimals = _buyerDecimals;\r\n        issuerTokenName = _issuerTokenName;\r\n        issuerSymbol = _issuerSymbol;\r\n        issuerDecimals = _issuerDecimals;\r\n        collectionFunds = _collectionFunds;\r\n        //startBlock = _startBlock;\r\n        //endBlock = _endBlock;\r\n    }\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOfBuyer;\r\n    mapping (address => uint256) public balanceOfIssuer;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract \r\n    function token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n    */\r\n    \r\n    /* Check if contract has started */\r\n    /*function has_contract_started() private constant returns (bool) {\r\n\t    return block.number >= startBlock;\r\n    }\r\n    \r\n    /* Check if contract has ended */\r\n    /*function has_contract_ended() private constant returns (bool) {\r\n        return block.number > endBlock;\r\n    }*/\r\n    \r\n    /* Set a project Wallet */\r\n    function defineProjectWallet(address target) onlyOwner {\r\n        project_wallet = target;\r\n    }\r\n    \r\n    /* Mint coins */\r\n    \r\n    // buyer tokens\r\n    function mintBuyerToken(address target, uint256 mintedAmount) onlyOwner {\r\n        balanceOfBuyer[target] += mintedAmount;\r\n        totalBuyerSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n    \r\n    // issuer tokens\r\n    function mintIssuerToken(address target, uint256 mintedAmount) onlyOwner {\r\n        balanceOfIssuer[target] += mintedAmount;\r\n        totalIssuerSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n    \r\n    /* Distroy coins */\r\n    \r\n    // Distroy buyer coins for sale in contract \r\n    function distroyBuyerToken(uint256 burnAmount) onlyOwner {\r\n        balanceOfBuyer[this] -= burnAmount;\r\n        totalBuyerSupply -= burnAmount;\r\n    }\r\n    \r\n    // Distroy issuer coins for sale in contract\r\n    function distroyIssuerToken(uint256 burnAmount) onlyOwner {\r\n        balanceOfIssuer[this] -= burnAmount;\r\n        totalIssuerSupply -= burnAmount;\r\n    }\r\n\r\n    /* Send coins */\r\n    \r\n    // send buyer coins\r\n    function transferBuyer(address _to, uint256 _value) {\r\n        if (balanceOfBuyer[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw; // Check for overflows\r\n        balanceOfBuyer[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n    \r\n    // send issuer coins\r\n    function transferIssue(address _to, uint256 _value) {\r\n        if (balanceOfIssuer[msg.sender] < _value) throw;\r\n        if (balanceOfIssuer[_to] + _value < balanceOfIssuer[_to]) throw;\r\n        balanceOfIssuer[msg.sender] -= _value;\r\n        balanceOfIssuer[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then comunicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {    \r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOfBuyer[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n        balanceOfBuyer[_from] -= _value;                          // Subtract from the sender\r\n        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    */\r\n    \r\n    /* Set token price */\r\n    function setPrices(uint256 newBuyPrice, uint256 newIssuePrice, uint256 coveragePerToken) onlyOwner {\r\n        buyPrice = newBuyPrice;\r\n        issuePrice = newIssuePrice;\r\n        cPT = coveragePerToken;\r\n    }\r\n\r\n    /* Buy tokens */\r\n    \r\n    // buy buyer tokens\r\n    function buyBuyerTokens() payable {\r\n        //if(!has_contract_started()) throw;                  // checks if the contract has started\r\n        //if(has_contract_ended()) throw;                     // checks if the contract has ended \r\n        uint amount = msg.value / buyPrice;                // calculates the amount\r\n        if (balanceOfBuyer[this] < amount) throw;               // checks if it has enough to sell\r\n        balanceOfBuyer[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n        balanceOfBuyer[this] -= amount;                         // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n    }\r\n    \r\n    // buy issuer tokens\r\n    function buyIssuerTokens() payable {\r\n        uint amount = msg.value / issuePrice;\r\n        if (balanceOfIssuer[this] < amount) throw;\r\n        balanceOfIssuer[msg.sender] += amount;\r\n        balanceOfIssuer[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n    \r\n    /* Credit Status Event */\r\n    function setCreditStatus(bool _status) onlyOwner {\r\n        creditStatus = _status;\r\n    }\r\n\r\n    /* Collection */\r\n    \r\n    // buyer collection sale\r\n    function sellBuyerTokens(uint amount) returns (uint revenue){\r\n        if (creditStatus == false) throw;                       // checks if buyer is eligible for a claim\r\n        if (balanceOfBuyer[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n        balanceOfBuyer[this] += amount;                         // adds the amount to owner's balance\r\n        balanceOfBuyer[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n        revenue = amount * cPT;\r\n        if (!msg.sender.send(revenue)) {                   // sends ether to the seller: it's important\r\n            throw;                                         // to do this last to prevent recursion attacks\r\n        } else {\r\n            Transfer(msg.sender, this, amount);             // executes an event reflecting on the change\r\n            return revenue;                                 // ends function and returns\r\n        }\r\n    }\r\n    \r\n    // get premium, note not tested yet\r\n    function getPremium() private constant returns (uint256 premium) {\r\n        premium = (issuePrice - cPT) * 98/100;\r\n        return premium;\r\n    }\r\n    \r\n    // issuer collection sale\r\n    function sellIssuerTokens(uint amount) returns (uint revenue){\r\n        if (balanceOfIssuer[msg.sender] < amount ) throw;\r\n        balanceOfIssuer[this] += amount;\r\n        balanceOfIssuer[msg.sender] -= amount;\r\n        revenue = amount * getPremium();\r\n        if (!msg.sender.send(revenue)) {\r\n            throw;\r\n        } else {\r\n            Transfer(msg.sender, this, amount);\r\n            return revenue;\r\n        }\r\n    }\r\n    \r\n    /* After contract ends move funds */\r\n    function moveFunds() onlyOwner {\r\n        //if (!has_contract_ended()) throw;\r\n        if (!project_wallet.send(this.balance)) throw;\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"distroyIssuerToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintIssuerToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintBuyerToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"defineProjectWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIssuerTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"distroyBuyerToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferIssue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBuyer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellBuyerTokens\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setCreditStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"project_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newIssuePrice\",\"type\":\"uint256\"},{\"name\":\"coveragePerToken\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cPT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellIssuerTokens\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBuyerTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssuerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_buyerTokenName\",\"type\":\"string\"},{\"name\":\"_buyerSymbol\",\"type\":\"string\"},{\"name\":\"_buyerDecimals\",\"type\":\"uint8\"},{\"name\":\"_issuerTokenName\",\"type\":\"string\"},{\"name\":\"_issuerSymbol\",\"type\":\"string\"},{\"name\":\"_issuerDecimals\",\"type\":\"uint8\"},{\"name\":\"_collectionFunds\",\"type\":\"address\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SwapToken","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000043f996926fbb1f4622c67259939462fac7735ee500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a4275796572546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024254000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b497373756572546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024954000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://89d274008f33b8991cc55c13f581b0154888e6a427a71b63a1fce550612b276b"}]}