{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n/*\r\nThis file is part of Pass DAO.\r\n\r\nPass DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nPass DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with Pass DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\nSmart contract for a Decentralized Autonomous Organization (DAO)\r\nto automate organizational governance and decision-making.\r\n*/\r\n\r\n/// @title Pass Dao smart contract\r\ncontract PassDao {\r\n    \r\n    struct revision {\r\n        // Address of the Committee Room smart contract\r\n        address committeeRoom;\r\n        // Address of the share manager smart contract\r\n        address shareManager;\r\n        // Address of the token manager smart contract\r\n        address tokenManager;\r\n        // Address of the project creator smart contract\r\n        uint startDate;\r\n    }\r\n    // The revisions of the application until today\r\n    revision[] public revisions;\r\n\r\n    struct project {\r\n        // The address of the smart contract\r\n        address contractAddress;\r\n        // The unix effective start date of the contract\r\n        uint startDate;\r\n    }\r\n    // The projects of the Dao\r\n    project[] public projects;\r\n\r\n    // Map with the indexes of the projects\r\n    mapping (address => uint) projectID;\r\n    \r\n    // The address of the meta project\r\n    address metaProject;\r\n\r\n    \r\n// Events\r\n\r\n    event Upgrade(uint indexed RevisionID, address CommitteeRoom, address ShareManager, address TokenManager);\r\n    event NewProject(address Project);\r\n\r\n// Constant functions  \r\n    \r\n    /// @return The effective committee room\r\n    function ActualCommitteeRoom() constant returns (address) {\r\n        return revisions[0].committeeRoom;\r\n    }\r\n    \r\n    /// @return The meta project\r\n    function MetaProject() constant returns (address) {\r\n        return metaProject;\r\n    }\r\n\r\n    /// @return The effective share manager\r\n    function ActualShareManager() constant returns (address) {\r\n        return revisions[0].shareManager;\r\n    }\r\n\r\n    /// @return The effective token manager\r\n    function ActualTokenManager() constant returns (address) {\r\n        return revisions[0].tokenManager;\r\n    }\r\n\r\n// modifiers\r\n\r\n    modifier onlyPassCommitteeRoom {if (msg.sender != revisions[0].committeeRoom  \r\n        && revisions[0].committeeRoom != 0) throw; _;}\r\n    \r\n// Constructor function\r\n\r\n    function PassDao() {\r\n        projects.length = 1;\r\n        revisions.length = 1;\r\n    }\r\n    \r\n// Register functions\r\n\r\n    /// @dev Function to allow the actual Committee Room upgrading the application\r\n    /// @param _newCommitteeRoom The address of the new committee room\r\n    /// @param _newShareManager The address of the new share manager\r\n    /// @param _newTokenManager The address of the new token manager\r\n    /// @return The index of the revision\r\n    function upgrade(\r\n        address _newCommitteeRoom, \r\n        address _newShareManager, \r\n        address _newTokenManager) onlyPassCommitteeRoom returns (uint) {\r\n        \r\n        uint _revisionID = revisions.length++;\r\n        revision r = revisions[_revisionID];\r\n\r\n        if (_newCommitteeRoom != 0) r.committeeRoom = _newCommitteeRoom; else r.committeeRoom = revisions[0].committeeRoom;\r\n        if (_newShareManager != 0) r.shareManager = _newShareManager; else r.shareManager = revisions[0].shareManager;\r\n        if (_newTokenManager != 0) r.tokenManager = _newTokenManager; else r.tokenManager = revisions[0].tokenManager;\r\n\r\n        r.startDate = now;\r\n        \r\n        revisions[0] = r;\r\n        \r\n        Upgrade(_revisionID, _newCommitteeRoom, _newShareManager, _newTokenManager);\r\n            \r\n        return _revisionID;\r\n    }\r\n\r\n    /// @dev Function to set the meta project\r\n    /// @param _projectAddress The address of the meta project\r\n    function addMetaProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        metaProject = _projectAddress;\r\n    }\r\n    \r\n    /// @dev Function to allow the committee room to add a project when ordering\r\n    /// @param _projectAddress The address of the project\r\n    function addProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        if (projectID[_projectAddress] == 0) {\r\n\r\n            uint _projectID = projects.length++;\r\n            project p = projects[_projectID];\r\n        \r\n            projectID[_projectAddress] = _projectID;\r\n            p.contractAddress = _projectAddress; \r\n            p.startDate = now;\r\n            \r\n            NewProject(_projectAddress);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"addMetaProject\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revisions\",\"outputs\":[{\"name\":\"committeeRoom\",\"type\":\"address\"},{\"name\":\"shareManager\",\"type\":\"address\"},{\"name\":\"tokenManager\",\"type\":\"address\"},{\"name\":\"startDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"startDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MetaProject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ActualShareManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ActualTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ActualCommitteeRoom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommitteeRoom\",\"type\":\"address\"},{\"name\":\"_newShareManager\",\"type\":\"address\"},{\"name\":\"_newTokenManager\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"RevisionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CommitteeRoom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ShareManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"TokenManager\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Project\",\"type\":\"address\"}],\"name\":\"NewProject\",\"type\":\"event\"}]","ContractName":"PassDao","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://511029cd99281f25f53b5865594e405d244ebce4406a521a4cff696e753d53c1"}]}