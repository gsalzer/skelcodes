{"status":"1","message":"OK","result":[{"SourceCode":"// This software is a subject to Ambisafe License Agreement.\r\n// No use or distribution is allowed without written permission from Ambisafe.\r\n// https://www.ambisafe.com/terms-of-use/\r\n\r\npragma solidity ^0.4.8;\r\n\r\ncontract Ambi2 {\r\n    bytes32 constant OWNER = \"__root__\";\r\n    uint constant LIFETIME = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    mapping(bytes32 => uint) rolesExpiration;\r\n    mapping(address => bool) nodes;\r\n\r\n    event Assign(address indexed from, bytes32 indexed role, address indexed to, uint expirationDate);\r\n    event Unassign(address indexed from, bytes32 indexed role, address indexed to);\r\n    event Error(bytes32 message);\r\n\r\n    modifier onlyNodeOwner(address _node) {\r\n        if (isOwner(_node, msg.sender)) {\r\n            _;\r\n        } else {\r\n            _error(\"Access denied: only node owner\");\r\n        }\r\n    }\r\n\r\n    function claimFor(address _address, address _owner) returns(bool) {\r\n        if (nodes[_address]) {\r\n            _error(\"Access denied: already owned\");\r\n            return false;\r\n        }\r\n        nodes[_address] = true;\r\n        _assignRole(_address, OWNER, _owner, LIFETIME);\r\n        return true;\r\n    }\r\n\r\n    function claim(address _address) returns(bool) {\r\n        return claimFor(_address, msg.sender);\r\n    }\r\n\r\n    function assignOwner(address _node, address _owner) returns(bool) {\r\n        return assignRole(_node, OWNER, _owner);\r\n    }\r\n\r\n    function assignRole(address _from, bytes32 _role, address _to) returns(bool) {\r\n        return assignRoleWithExpiration(_from, _role, _to, LIFETIME);\r\n    }\r\n\r\n    function assignRoleWithExpiration(address _from, bytes32 _role, address _to, uint _expirationDate) onlyNodeOwner(_from) returns(bool) {\r\n        if (hasRole(_from, _role, _to) && rolesExpiration[_getRoleSignature(_from, _role, _to)] == _expirationDate) {\r\n            _error(\"Role already assigned\");\r\n            return false;\r\n        }\r\n        if (_isPast(_expirationDate)) {\r\n            _error(\"Invalid expiration date\");\r\n            return false;\r\n        }\r\n\r\n        _assignRole(_from, _role, _to, _expirationDate);\r\n        return true;\r\n    }\r\n\r\n    function _assignRole(address _from, bytes32 _role, address _to, uint _expirationDate) internal {\r\n        rolesExpiration[_getRoleSignature(_from, _role, _to)] = _expirationDate;\r\n        Assign(_from, _role, _to, _expirationDate);\r\n    }\r\n\r\n    function unassignOwner(address _node, address _owner) returns(bool) {\r\n        if (_owner == msg.sender) {\r\n            _error(\"Cannot remove ownership\");\r\n            return false;\r\n        }\r\n\r\n        return unassignRole(_node, OWNER, _owner);\r\n    }\r\n\r\n    function unassignRole(address _from, bytes32 _role, address _to) onlyNodeOwner(_from) returns(bool) {\r\n        if (!hasRole(_from, _role, _to)) {\r\n            _error(\"Role not assigned\");\r\n            return false;\r\n        }\r\n\r\n        delete rolesExpiration[_getRoleSignature(_from, _role, _to)];\r\n        Unassign(_from, _role, _to);\r\n        return true;\r\n    }\r\n\r\n    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool) {\r\n        return _isFuture(rolesExpiration[_getRoleSignature(_from, _role, _to)]);\r\n    }\r\n\r\n    function isOwner(address _node, address _owner) constant returns(bool) {\r\n        return hasRole(_node, OWNER, _owner);\r\n    }\r\n\r\n    function _error(bytes32 _message) internal {\r\n        Error(_message);\r\n    }\r\n\r\n    function _getRoleSignature(address _from, bytes32 _role, address _to) internal constant returns(bytes32) {\r\n        return sha3(_from, _role, _to);\r\n    }\r\n\r\n    function _isPast(uint _timestamp) internal constant returns(bool) {\r\n        return _timestamp < now;\r\n    }\r\n\r\n    function _isFuture(uint _timestamp) internal constant returns(bool) {\r\n        return !_isPast(_timestamp);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"}],\"name\":\"assignRoleWithExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"assignOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unassignRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"assignRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unassignOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Unassign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"Ambi2","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://81625a956d445b16c201df0fb6a95b8e577bca5d994a2a2874f364b8b0ccd60f"}]}