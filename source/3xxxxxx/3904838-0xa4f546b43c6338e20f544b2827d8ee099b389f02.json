{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n\r\n/// @title Bitplus Token (BPNT) - crowdfunding code for Bitplus Project\r\ncontract BitplusToken {\r\n    string public constant name = \"Bitplus Token\";\r\n    string public constant symbol = \"BPNT\";\r\n    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\r\n\r\n    uint256 public constant tokenCreationRate = 1000;\r\n\r\n    // The funding cap in weis.\r\n    uint256 public constant tokenCreationCap = 25000 ether * tokenCreationRate;\r\n    uint256 public constant tokenCreationMin = 2500 ether * tokenCreationRate;\r\n\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n\r\n    // The flag indicates if the contract is in Funding state.\r\n    bool public funding = true;\r\n\r\n    // Receives ETH\r\n    address public bitplusAddress;\r\n\r\n    // The current total token supply.\r\n    uint256 totalTokens;\r\n\r\n    mapping (address => uint256) balances;\r\n    \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    struct EarlyBackerCondition {\r\n        address backerAddress;\r\n        uint256 deposited;\r\n        uint256 agreedPercentage;\r\n        uint256 agreedEthPrice;\r\n    }\r\n    \r\n    EarlyBackerCondition[] public earlyBackers;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Refund(address indexed _from, uint256 _value);\r\n    event EarlyBackerDeposit(address indexed _from, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function BitplusToken(uint256 _fundingStartBlock,\r\n                          uint256 _fundingEndBlock) {\r\n\r\n        address _bitplusAddress = 0x286e0060d9DBEa0231389485D455A80f14648B3c;\r\n        if (_bitplusAddress == 0) throw;\r\n        if (_fundingStartBlock <= block.number) throw;\r\n        if (_fundingEndBlock   <= _fundingStartBlock) throw;\r\n        \r\n        // special conditions for the early backers\r\n        earlyBackers.push(EarlyBackerCondition({\r\n            backerAddress: 0xa1cfc9ebdffbffe9b27d741ae04cfc2e78af527a,\r\n            deposited: 0,\r\n            agreedPercentage: 1000,\r\n            agreedEthPrice: 250 ether\r\n        }));\r\n        \r\n        // conditions for the company / developers\r\n        earlyBackers.push(EarlyBackerCondition({\r\n            backerAddress: 0x37ef1168252f274D4cA5b558213d7294085BCA08,\r\n            deposited: 0,\r\n            agreedPercentage: 500,\r\n            agreedEthPrice: 0.1 ether\r\n        }));\r\n        \r\n        earlyBackers.push(EarlyBackerCondition({\r\n            backerAddress: 0x246604643ac38e96526b66ba91c1b2ec0c39d8de,\r\n            deposited: 0,\r\n            agreedPercentage: 500,\r\n            agreedEthPrice: 0.1 ether\r\n        }));        \r\n        \r\n        bitplusAddress = _bitplusAddress;\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n    }\r\n\r\n    /// @notice Transfer `_value` BPNT tokens from sender's account\r\n    /// `msg.sender` to provided account address `_to`.\r\n    /// @notice This function is disabled during the funding.\r\n    /// @dev Required state: Operational\r\n    /// @param _to The address of the tokens recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        // Abort if not in Operational state.\r\n        if (funding) throw;\r\n\r\n        var senderBalance = balances[msg.sender];\r\n        if (senderBalance >= _value && _value > 0) {\r\n            senderBalance -= _value;\r\n            balances[msg.sender] = senderBalance;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) returns (bool success) {\r\n        // Abort if not in Operational state.\r\n        if (funding) throw;         \r\n         \r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n    }    \r\n\r\n    function totalSupply() external constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @notice Create tokens when funding is active.\r\n    /// @dev Required state: Funding Active\r\n    /// @dev State transition: -> Funding Success (only if cap reached)\r\n    function create() payable external {\r\n        // Abort if not in Funding Active state.\r\n        // The checks are split (instead of using or operator) because it is\r\n        // cheaper this way.\r\n        if (!funding) throw;\r\n        if (block.number < fundingStartBlock) throw;\r\n        if (block.number > fundingEndBlock) throw;\r\n\r\n        // Do not allow creating 0 tokens.\r\n        if (msg.value == 0) throw;\r\n        \r\n        bool isEarlyBacker = false;\r\n        \r\n        for (uint i = 0; i < earlyBackers.length; i++) {\r\n            if(earlyBackers[i].backerAddress == msg.sender) {\r\n                earlyBackers[i].deposited += msg.value;\r\n                isEarlyBacker = true;\r\n                EarlyBackerDeposit(msg.sender, msg.value);\r\n            }\r\n        }\r\n        \r\n        \r\n        if(!isEarlyBacker) {\r\n            // do not allow to create more then cap tokens\r\n            if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\r\n                throw;\r\n\r\n            var numTokens = msg.value * tokenCreationRate;\r\n            totalTokens += numTokens;\r\n\r\n            // Assign new tokens to the sender\r\n            balances[msg.sender] += numTokens;\r\n            \r\n            // Log token creation event\r\n            Transfer(0, msg.sender, numTokens);            \r\n        }\r\n    }\r\n\r\n    /// @notice Finalize crowdfunding\r\n    /// @dev If cap was reached or crowdfunding has ended then:\r\n    /// create BPNT for the early backers,\r\n    /// transfer ETH to the Bitplus address.\r\n    /// @dev Required state: Funding Success\r\n    /// @dev State transition: -> Operational Normal\r\n    function finalize() external {\r\n        // Abort if not in Funding Success state.\r\n        if (!funding) throw;\r\n        if ((block.number <= fundingEndBlock ||\r\n             totalTokens < tokenCreationMin) &&\r\n             totalTokens < tokenCreationCap) throw;\r\n\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        funding = false;\r\n        // Transfer ETH to the Bitplus address.\r\n        if (!bitplusAddress.send(this.balance)) throw;\r\n        \r\n        for (uint i = 0; i < earlyBackers.length; i++) {\r\n            if(earlyBackers[i].deposited != uint256(0)) {\r\n                uint256 percentage = (earlyBackers[i].deposited * earlyBackers[i].agreedPercentage / earlyBackers[i].agreedEthPrice);\r\n                uint256 additionalTokens = totalTokens * percentage / (10000 - percentage);\r\n                address backerAddr = earlyBackers[i].backerAddress;\r\n                balances[backerAddr] = additionalTokens;\r\n                totalTokens += additionalTokens;\r\n                Transfer(0, backerAddr, additionalTokens);\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n    /// @notice Get back the ether sent during the funding in case the funding\r\n    /// has not reached the minimum level.\r\n    /// @dev Required state: Funding Failure\r\n    function refund() external {\r\n        // Abort if not in Funding Failure state.\r\n        if (!funding) throw;\r\n        if (block.number <= fundingEndBlock) throw;\r\n        if (totalTokens >= tokenCreationMin) throw;\r\n        \r\n        bool isEarlyBacker = false;\r\n        uint256 ethValue;\r\n        for (uint i = 0; i < earlyBackers.length; i++) {\r\n            if(earlyBackers[i].backerAddress == msg.sender) {\r\n                isEarlyBacker = true;\r\n                ethValue = earlyBackers[i].deposited;\r\n                if (ethValue == 0) throw;\r\n            }\r\n        }\r\n\r\n        if(!isEarlyBacker) {\r\n            var bpntValue = balances[msg.sender];\r\n            if (bpntValue == 0) throw;\r\n            balances[msg.sender] = 0;\r\n            totalTokens -= bpntValue;\r\n            ethValue = bpntValue / tokenCreationRate;\r\n        }\r\n        \r\n        Refund(msg.sender, ethValue);\r\n        if (!msg.sender.send(ethValue)) throw;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    // Just a safeguard for people who might invest and then loose the key\r\n    // If 2 weeks after an unsuccessful end of the campaign there are unclaimed\r\n    // funds, transfer those to Bitplus address - the funds will be returned to \r\n    // respective owners from it\r\n    function safeguard() {\r\n        if(block.number > (fundingEndBlock + 71000)) {\r\n            if (!bitplusAddress.send(this.balance)) throw;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitplusAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earlyBackers\",\"outputs\":[{\"name\":\"backerAddress\",\"type\":\"address\"},{\"name\":\"deposited\",\"type\":\"uint256\"},{\"name\":\"agreedPercentage\",\"type\":\"uint256\"},{\"name\":\"agreedEthPrice\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EarlyBackerDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BitplusToken","CompilerVersion":"v0.4.11-nightly.2017.5.3+commit.1aa0f77a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000003b95e800000000000000000000000000000000000000000000000000000000004141be","Library":"","SwarmSource":"bzzr://f369cf09989930897db98607b81032463546b7a4c33d968157957677e1c968d6"}]}