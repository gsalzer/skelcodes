{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract splitterContract is Ownable{\r\n\r\n    event ev(string msg, address whom, uint256 val);\r\n\r\n    struct xRec {\r\n        bool inList;\r\n        address next;\r\n        address prev;\r\n        uint256 val;\r\n    }\r\n\r\n    struct l8r {\r\n        address whom;\r\n        uint256 val;\r\n    }\r\n    address public myAddress = this;\r\n    address public first;\r\n    address public last;\r\n    address public ddf;\r\n    bool    public thinkMode;\r\n    uint256 public pos;\r\n\r\n    mapping (address => xRec) public theList;\r\n\r\n    l8r[]  afterParty;\r\n\r\n    modifier onlyMeOrDDF() {\r\n        if (msg.sender == ddf || msg.sender == myAddress || msg.sender == owner) {\r\n            _;\r\n            return;\r\n        }\r\n    }\r\n\r\n    function setDDF(address ddf_) onlyOwner {\r\n        ddf = ddf_;\r\n    }\r\n\r\n    function splitterContract(address seed, uint256 seedVal) {\r\n        first = seed;\r\n        last = seed;\r\n        theList[seed] = xRec(true,0x0,0x0,seedVal);\r\n    }\r\n\r\n    function startThinking() onlyOwner {\r\n        thinkMode = true;\r\n        pos = 0;\r\n    }\r\n\r\n    function stopThinking(uint256 num) onlyOwner {\r\n        thinkMode = false;\r\n        for (uint256 i = 0; i < num; i++) {\r\n            if (pos >= afterParty.length) {\r\n                delete afterParty;\r\n                return;\r\n            }\r\n            update(afterParty[pos].whom,afterParty[pos].val);\r\n            pos++;\r\n        }\r\n        thinkMode = true;\r\n    } \r\n\r\n    function thinkLength() constant returns (uint256) {\r\n        return afterParty.length;\r\n    }\r\n\r\n    function addRec4L8R(address whom, uint256 val) internal {\r\n        afterParty.push(l8r(whom,val));\r\n    }\r\n\r\n    function add(address whom, uint256 value) internal {\r\n        theList[whom] = xRec(true,0x0,last,value);\r\n        theList[last].next = whom;\r\n        last = whom;\r\n        ev(\"add\",whom,value);\r\n    }\r\n\r\n    function remove(address whom) internal {\r\n        if (first == whom) {\r\n            first = theList[whom].next;\r\n            theList[whom] = xRec(false,0x0,0x0,0);\r\n            return;\r\n        }\r\n        address next = theList[whom].next;\r\n        address prev = theList[whom].prev;\r\n        if (prev != 0x0) {\r\n            theList[prev].next = next;\r\n        }\r\n        if (next != 0x0) {\r\n            theList[next].prev = prev;\r\n        }\r\n        theList[whom] = xRec(false,0x0,0x0,0);\r\n        ev(\"remove\",whom,0);\r\n    }\r\n\r\n    function update(address whom, uint256 value) onlyMeOrDDF {\r\n        if (thinkMode) {\r\n            addRec4L8R(whom,value);\r\n            return;\r\n        }\r\n        if (value != 0) {\r\n            if (!theList[whom].inList) {\r\n                add(whom,value);\r\n            } else {\r\n                theList[whom].val = value;\r\n                ev(\"update\",whom,value);\r\n            }\r\n            return;\r\n        }\r\n        if (theList[whom].inList) {\r\n                remove(whom);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"myAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"stopThinking\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"theList\",\"outputs\":[{\"name\":\"inList\",\"type\":\"bool\"},{\"name\":\"next\",\"type\":\"address\"},{\"name\":\"prev\",\"type\":\"address\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thinkLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whom\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ddf_\",\"type\":\"address\"}],\"name\":\"setDDF\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thinkMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startThinking\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"seed\",\"type\":\"address\"},{\"name\":\"seedVal\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"whom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ev\",\"type\":\"event\"}]","ContractName":"splitterContract","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001759b80a76f390ef4d5c14a483869b31f2c309c700000000000000000000000000000000000000000000d3c21bcecceda1000000","Library":"","SwarmSource":"bzzr://02f3728ac426b4a1f8a052fd759399df7598b9abd80e21d30460aedfb6b04d26"}]}