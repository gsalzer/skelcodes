{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/*\r\n * This is an example gambling contract that works without any ABI interface.\r\n * The entire game logic is invoked by calling the fallback function which\r\n * is triggered, e.g. upon receiving a transaction at the contract address\r\n * without any data sent along. The contract is attackable in a number of ways:\r\n * - as soon as someone paid in Ether and starts the game, register with a\r\n *   large number of addresses to spam the player list and most likely win.\r\n * - blockhash as source of entropy is attackable by miners\r\n * - probably further exploits\r\n * This only serves as a minimalistic example of how to gamble on Ethereum\r\n * Author: S.C. Buergel for Validity Labs AG\r\n */\r\n\r\ncontract dgame {\r\n    uint public registerDuration;\r\n    uint public endRegisterTime;\r\n    uint public gameNumber;\r\n    uint public numPlayers;\r\n    mapping(uint => mapping(uint => address)) public players;\r\n    mapping(uint => mapping(address => bool)) public registered;\r\n    event StartedGame(address initiator, uint regTimeEnd, uint amountSent, uint gameNumber);\r\n    event RegisteredPlayer(address player, uint gameNumber);\r\n    event FoundWinner(address player, uint gameNumber);\r\n    \r\n    // constructor sets default registration duration to 5min\r\n    function dgame() {\r\n        registerDuration = 600;\r\n    }\r\n    \r\n    // fallback function is used for entire game logic\r\n    function() payable {\r\n        // status idle: start new game and transition to status ongoing\r\n        if (endRegisterTime == 0) {\r\n            endRegisterTime = now + registerDuration;\r\n            if (msg.value == 0)\r\n                throw;  // prevent a new game to be started with empty pot\r\n            StartedGame(msg.sender, endRegisterTime, msg.value, gameNumber);\r\n        } else if (now > endRegisterTime && numPlayers > 0) {\r\n            // status completed: find winner and transition to status idle\r\n            uint winner = uint(block.blockhash(block.number - 1)) % numPlayers; // find index of winner (take blockhash as source of entropy -> exploitable!)\r\n            uint currentGamenumber = gameNumber;\r\n            FoundWinner(players[currentGamenumber][winner], currentGamenumber);\r\n            endRegisterTime = 0;\r\n            numPlayers = 0;\r\n            gameNumber++;\r\n\r\n            // pay winner all Ether that we have\r\n            // ignore if winner rejects prize\r\n            // in that case Ether will be added to prize of the next game\r\n            players[currentGamenumber][winner].send(this.balance);\r\n        } else {\r\n            // status ongoing: register player\r\n            if (registered[gameNumber][msg.sender])\r\n                throw;  // prevent same player to register twice with same address\r\n            registered[gameNumber][msg.sender] = true;\r\n            players[gameNumber][numPlayers] = (msg.sender);\r\n            numPlayers++;\r\n            RegisteredPlayer(msg.sender, gameNumber);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endRegisterTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registerDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"regTimeEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"name\":\"StartedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"name\":\"RegisteredPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"name\":\"FoundWinner\",\"type\":\"event\"}]","ContractName":"dgame","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://781d568fe588654cd5fc31344e646d2887a83d8183ff0085d1da575bada7de78"}]}