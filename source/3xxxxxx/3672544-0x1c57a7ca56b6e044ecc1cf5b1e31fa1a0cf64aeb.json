{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.11;\r\n\r\ncontract Owned {\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    // This contract only defines a modifier and a few useful functions\r\n    // The function body is inserted where the special symbol \"_\" in the\r\n    // definition of a modifier appears.\r\n    modifier onlyOwner { if (msg.sender == owner) _; }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // This is a general safty function that allows the owner to do a lot\r\n    //  of things in the unlikely event that something goes wrong\r\n    // _dst is the contract being called making this like a 1/1 multisig\r\n    function execute(address _dst, uint _value, bytes _data) onlyOwner {\r\n        _dst.call.value(_value)(_data);\r\n    }\r\n}\r\n// to get the needed token functions in the contract\r\ncontract Token {\r\n    function transfer(address, uint) returns(bool);\r\n    function balanceOf(address) constant returns (uint);\r\n}\r\n\r\ncontract TokenSender is Owned {\r\n    Token public token; // the token we are working with\r\n    uint public totalToDistribute;\r\n\r\n    uint public next;\r\n\r\n\r\n    struct Transfer {\r\n        address addr;\r\n        uint amount;\r\n    }\r\n\r\n    Transfer[] public transfers;\r\n\r\n    function TokenSender(address _token) {\r\n        token = Token(_token);\r\n    }\r\n\r\n    // this is a used to save gas\r\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\r\n\r\n    // This is the function that makes the list of transfers and various\r\n    //  checks around that list, it is a little tricky, the data input is\r\n    //  structured with the `amount` and the (receiving) `addr` combined as one\r\n    //  long number and then this number is deconstructed in this function to\r\n    //  save gas and reduce the number of `0`'s that are needed to be stored\r\n    //   on the blockchain\r\n    function fill(uint[] data) onlyOwner {\r\n\r\n        // If the send has started then we just throw\r\n        if (next>0) throw;\r\n\r\n        uint acc;\r\n        uint offset = transfers.length;\r\n        transfers.length = transfers.length + data.length;\r\n        for (uint i = 0; i < data.length; i++ ) {\r\n            address addr = address( data[i] & (D160-1) );\r\n            uint amount = data[i] / D160;\r\n\r\n            transfers[offset + i].addr = addr;\r\n            transfers[offset + i].amount = amount;\r\n            acc += amount;\r\n        }\r\n        totalToDistribute += acc;\r\n    }\r\n    // This function actually makes the sends and tracks the amount of gas used\r\n    //  if it takes more gas than was sent with the transaction then this\r\n    //  function will need to be called a few times until\r\n    function run() onlyOwner {\r\n        if (transfers.length == 0) return;\r\n\r\n        // Keep next in the stack var mNext to save gas\r\n        uint mNext = next;\r\n\r\n        // Set the contract as finalized to avoid reentrance\r\n        next = transfers.length;\r\n\r\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\r\n\r\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\r\n            uint amount = transfers[mNext].amount;\r\n            address addr = transfers[mNext].addr;\r\n            if (amount > 0) {\r\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\r\n            }\r\n            mNext ++;\r\n        }\r\n\r\n        // Set the next to the actual state.\r\n        next = mNext;\r\n    }\r\n\r\n\r\n    ///////////////////////\r\n    // Helper functions\r\n    ///////////////////////\r\n\r\n    function hasTerminated() constant returns (bool) {\r\n        if (transfers.length == 0) return false;\r\n        if (next < transfers.length) return false;\r\n        return true;\r\n    }\r\n\r\n    function nTransfers() constant returns (uint) {\r\n        return transfers.length;\r\n    }\r\n\r\n    function gas() internal constant returns (uint _gas) {\r\n        assembly {\r\n            _gas:= gas\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalToDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasTerminated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"fill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfers\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dst\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"TokenSender","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e0b7927c4af23765cb51314a0e0521a9645f0e2a","Library":"","SwarmSource":"bzzr://f4b15dc7cafee30b741a419f53d1f3467caffc8e858fac8835ba9d85bf9db37d"}]}