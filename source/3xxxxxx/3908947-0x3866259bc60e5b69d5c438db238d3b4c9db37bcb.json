{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract - ERC20 Token Interface\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) \r\n        returns (bool success);\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant \r\n        returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, \r\n        uint _value);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract - Owned contracts\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Current owner, and proposed new owner\r\n    // ------------------------------------------------------------------------\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor - assign creator as the owner\r\n    // ------------------------------------------------------------------------\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Modifier to mark that a function can only be executed by the owner\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can initiate transfer of contract to a new owner\r\n    // ------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n \r\n    // ------------------------------------------------------------------------\r\n    // New owner has to accept transfer of contract\r\n    // ------------------------------------------------------------------------\r\n    function acceptOwnership() {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths, borrowed from OpenZeppelin\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract - Configuration\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// openANX crowdsale token smart contract - configuration parameters\r\n// ----------------------------------------------------------------------------\r\ncontract OpenANXTokenConfig {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token symbol(), name() and decimals()\r\n    // ------------------------------------------------------------------------\r\n    string public constant SYMBOL = \"OAX\";\r\n    string public constant NAME = \"openANX Token\";\r\n    uint8 public constant DECIMALS = 18;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Decimal factor for multiplications from OAX unit to OAX natural unit\r\n    // ------------------------------------------------------------------------\r\n    uint public constant DECIMALSFACTOR = 10**uint(DECIMALS);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Tranche 1 soft cap and hard cap, and total tokens\r\n    // ------------------------------------------------------------------------\r\n    uint public constant TOKENS_SOFT_CAP = 13000000 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_HARD_CAP = 30000000 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_TOTAL = 100000000 * DECIMALSFACTOR;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Tranche 1 crowdsale start date and end date\r\n    // Do not use the `now` function here\r\n    // Start - Thursday, 22-Jun-17 13:00:00 UTC / 1pm GMT 22 June 2017\r\n    // End - Saturday, 22-Jul-17 13:00:00 UTC / 1pm GMT 22 July 2017 \r\n    // ------------------------------------------------------------------------\r\n    uint public constant START_DATE = 1498136400;\r\n    uint public constant END_DATE = 1500728400;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1 year and 2 year dates for locked tokens\r\n    // Do not use the `now` function here \r\n    // ------------------------------------------------------------------------\r\n    uint public constant LOCKED_1Y_DATE = START_DATE + 365 days;\r\n    uint public constant LOCKED_2Y_DATE = START_DATE + 2 * 365 days;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Individual transaction contribution min and max amounts\r\n    // Set to 0 to switch off, or `x ether`\r\n    // ------------------------------------------------------------------------\r\n    uint public CONTRIBUTIONS_MIN = 0 ether;\r\n    uint public CONTRIBUTIONS_MAX = 0 ether;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// OAX 'openANX Token' crowdfunding contract - locked tokens\r\n//\r\n// Refer to http://openanx.org/ for further information.\r\n//\r\n// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract that holds the 1Y and 2Y locked token information\r\n// ----------------------------------------------------------------------------\r\ncontract LockedTokens is OpenANXTokenConfig {\r\n    using SafeMath for uint;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y and 2y locked totals, not including unsold tranche1 and all tranche2\r\n    // tokens\r\n    // ------------------------------------------------------------------------\r\n    uint public constant TOKENS_LOCKED_1Y_TOTAL = 14000000 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_LOCKED_2Y_TOTAL = 26000000 * DECIMALSFACTOR;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Tokens locked for 1 year for sale 2 in the following account\r\n    // ------------------------------------------------------------------------\r\n    address public TRANCHE2_ACCOUNT = 0x813703Eb676f3B6C76dA75cBa0cbC49DdbCA7B37;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Current totalSupply of 1y and 2y locked tokens\r\n    // ------------------------------------------------------------------------\r\n    uint public totalSupplyLocked1Y;\r\n    uint public totalSupplyLocked2Y;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Locked tokens mapping\r\n    // ------------------------------------------------------------------------\r\n    mapping (address => uint) public balancesLocked1Y;\r\n    mapping (address => uint) public balancesLocked2Y;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Address of openANX crowdsale token contract\r\n    // ------------------------------------------------------------------------\r\n    ERC20Interface public tokenContract;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor - called by crowdsale token contract\r\n    // ------------------------------------------------------------------------\r\n    function LockedTokens(address _tokenContract) {\r\n        tokenContract = ERC20Interface(_tokenContract);\r\n\r\n        // --- 1y locked tokens ---\r\n\r\n        // Confirm 1Y totals        \r\n        add1Y(0x4beE088efDBCC610EEEa101ded7204150AF1C8b9,1000000 * DECIMALSFACTOR);\r\n        add1Y(0x839551201f866907Eb5017bE79cEB48aDa58650c,925000 * DECIMALSFACTOR);\r\n        add1Y(0xa92d4Cd3412862386c234Be572Fe4A8FA4BB09c6,925000 * DECIMALSFACTOR);\r\n        add1Y(0xECf2B5fce33007E5669D63de39a4c663e56958dD,925000 * DECIMALSFACTOR);\r\n        add1Y(0xD6B7695bc74E2C950eb953316359Eab283C5Bda8,925000 * DECIMALSFACTOR);\r\n        add1Y(0xBE3463Eae26398D55a7118683079264BcF3ab24B,150000 * DECIMALSFACTOR);\r\n        add1Y(0xf47428Fb9A61c9f3312cB035AEE049FBa76ba62a,150000 * DECIMALSFACTOR);\r\n        add1Y(0xfCcc77165D822Ef9004714d829bDC267C743658a,50000 * DECIMALSFACTOR);\r\n        add1Y(0xaf8df2aCAec3d5d92dE42a6c19d7706A4F3E8D8b,50000 * DECIMALSFACTOR);\r\n        add1Y(0x22a6f9693856374BF2922cd837d07F6670E7FA4d,250000 * DECIMALSFACTOR);\r\n        add1Y(0x3F720Ca8FfF598F00a51DE32A8Cb58Ca73f22aDe,50000 * DECIMALSFACTOR);\r\n        add1Y(0xBd0D1954B301E414F0b5D0827A69EC5dD559e50B,50000 * DECIMALSFACTOR);\r\n        add1Y(0x2ad6B011FEcDE830c9cc4dc0d0b77F055D6b5990,50000 * DECIMALSFACTOR);\r\n        add1Y(0x0c5cD0E971cA18a0F0E0d581f4B93FaD31D608B0,2000085 * DECIMALSFACTOR);\r\n        add1Y(0xFaaDC4d80Eaf430Ab604337CB67d77eC763D3e23,200248 * DECIMALSFACTOR);\r\n        add1Y(0xDAef46f89c264182Cd87Ce93B620B63c7AfB14f7,1616920 * DECIMALSFACTOR);\r\n        add1Y(0x19cc59C30cE54706633dC29EdEbAE1efF1757b25,224980 * DECIMALSFACTOR);\r\n        add1Y(0xa130fE5D399104CA5AF168fbbBBe19F95d739741,745918 * DECIMALSFACTOR);\r\n        add1Y(0xC0cD1bf6F2939095a56B0DFa085Ba2886b84E7d1,745918 * DECIMALSFACTOR);\r\n        add1Y(0xf2C26e79eD264B0E3e5A5DFb1Dd91EA61f512C6e,745918 * DECIMALSFACTOR);\r\n        add1Y(0x5F876a8A5F1B66fbf3D0D119075b62aF4386e319,745918 * DECIMALSFACTOR);\r\n        add1Y(0xb8E046570800Dd76720aF6d42d3cCae451F54f15,745920 * DECIMALSFACTOR);\r\n        add1Y(0xA524fa65Aac4647fa7bA2c20D22F64450c351bBd,714286 * DECIMALSFACTOR);\r\n        add1Y(0x27209b276C15a936BCE08D7D70f0c97aeb3CE8c3,13889 * DECIMALSFACTOR);\r\n\r\n        assert(totalSupplyLocked1Y == TOKENS_LOCKED_1Y_TOTAL);\r\n\r\n        // --- 2y locked tokens ---\r\n        add2Y(0x4beE088efDBCC610EEEa101ded7204150AF1C8b9,1000000 * DECIMALSFACTOR);\r\n        add2Y(0x839551201f866907Eb5017bE79cEB48aDa58650c,925000 * DECIMALSFACTOR);\r\n        add2Y(0xa92d4Cd3412862386c234Be572Fe4A8FA4BB09c6,925000 * DECIMALSFACTOR);\r\n        add2Y(0xECf2B5fce33007E5669D63de39a4c663e56958dD,925000 * DECIMALSFACTOR);\r\n        add2Y(0xD6B7695bc74E2C950eb953316359Eab283C5Bda8,925000 * DECIMALSFACTOR);\r\n        add2Y(0xBE3463Eae26398D55a7118683079264BcF3ab24B,150000 * DECIMALSFACTOR);\r\n        add2Y(0xf47428Fb9A61c9f3312cB035AEE049FBa76ba62a,150000 * DECIMALSFACTOR);\r\n        add2Y(0xfCcc77165D822Ef9004714d829bDC267C743658a,50000 * DECIMALSFACTOR);\r\n        add2Y(0xDAef46f89c264182Cd87Ce93B620B63c7AfB14f7,500000 * DECIMALSFACTOR);\r\n        add2Y(0xaf8df2aCAec3d5d92dE42a6c19d7706A4F3E8D8b,50000 * DECIMALSFACTOR);\r\n        add2Y(0x22a6f9693856374BF2922cd837d07F6670E7FA4d,250000 * DECIMALSFACTOR);\r\n        add2Y(0x3F720Ca8FfF598F00a51DE32A8Cb58Ca73f22aDe,50000 * DECIMALSFACTOR);\r\n        add2Y(0xBd0D1954B301E414F0b5D0827A69EC5dD559e50B,50000 * DECIMALSFACTOR);\r\n        add2Y(0x2ad6B011FEcDE830c9cc4dc0d0b77F055D6b5990,50000 * DECIMALSFACTOR);\r\n\r\n        //treasury\r\n        add2Y(0x990a2D172398007fcbd5078D84696BdD8cCDf7b2,20000000 * DECIMALSFACTOR);\r\n\r\n        assert(totalSupplyLocked2Y == TOKENS_LOCKED_2Y_TOTAL);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add remaining tokens to locked 1y balances\r\n    // ------------------------------------------------------------------------\r\n    function addRemainingTokens() {\r\n        // Only the crowdsale contract can call this function\r\n        require(msg.sender == address(tokenContract));\r\n        // Total tokens to be created\r\n        uint remainingTokens = TOKENS_TOTAL;\r\n        // Minus precommitments and public crowdsale tokens\r\n        remainingTokens = remainingTokens.sub(tokenContract.totalSupply());\r\n        // Minus 1y locked tokens\r\n        remainingTokens = remainingTokens.sub(totalSupplyLocked1Y);\r\n        // Minus 2y locked tokens\r\n        remainingTokens = remainingTokens.sub(totalSupplyLocked2Y);\r\n        // Unsold tranche1 and tranche2 tokens to be locked for 1y \r\n        add1Y(TRANCHE2_ACCOUNT, remainingTokens);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add to 1y locked balances and totalSupply\r\n    // ------------------------------------------------------------------------\r\n    function add1Y(address account, uint value) private {\r\n        balancesLocked1Y[account] = balancesLocked1Y[account].add(value);\r\n        totalSupplyLocked1Y = totalSupplyLocked1Y.add(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add to 2y locked balances and totalSupply\r\n    // ------------------------------------------------------------------------\r\n    function add2Y(address account, uint value) private {\r\n        balancesLocked2Y[account] = balancesLocked2Y[account].add(value);\r\n        totalSupplyLocked2Y = totalSupplyLocked2Y.add(value);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked1Y(address account) constant returns (uint balance) {\r\n        return balancesLocked1Y[account];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 2y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked2Y(address account) constant returns (uint balance) {\r\n        return balancesLocked2Y[account];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y and 2y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked(address account) constant returns (uint balance) {\r\n        return balancesLocked1Y[account].add(balancesLocked2Y[account]);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y and 2y locked total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupplyLocked() constant returns (uint) {\r\n        return totalSupplyLocked1Y + totalSupplyLocked2Y;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // An account can unlock their 1y locked tokens 1y after token launch date\r\n    // ------------------------------------------------------------------------\r\n    function unlock1Y() {\r\n        require(now >= LOCKED_1Y_DATE);\r\n        uint amount = balancesLocked1Y[msg.sender];\r\n        require(amount > 0);\r\n        balancesLocked1Y[msg.sender] = 0;\r\n        totalSupplyLocked1Y = totalSupplyLocked1Y.sub(amount);\r\n        if (!tokenContract.transfer(msg.sender, amount)) throw;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // An account can unlock their 2y locked tokens 2y after token launch date\r\n    // ------------------------------------------------------------------------\r\n    function unlock2Y() {\r\n        require(now >= LOCKED_2Y_DATE);\r\n        uint amount = balancesLocked2Y[msg.sender];\r\n        require(amount > 0);\r\n        balancesLocked2Y[msg.sender] = 0;\r\n        totalSupplyLocked2Y = totalSupplyLocked2Y.sub(amount);\r\n        if (!tokenContract.transfer(msg.sender, amount)) throw;\r\n    }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // symbol(), name() and decimals()\r\n    // ------------------------------------------------------------------------\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Balances for each account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => uint) balances;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner of account approves the transfer of an amount to another account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function ERC20Token(\r\n        string _symbol, \r\n        string _name, \r\n        uint8 _decimals, \r\n        uint _totalSupply\r\n    ) Owned() {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the account balance of another account with address _owner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount             // User has balance\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    // ------------------------------------------------------------------------\r\n    function approve(\r\n        address _spender,\r\n        uint _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// openANX crowdsale token smart contract\r\n// ----------------------------------------------------------------------------\r\ncontract OpenANXToken is ERC20Token, OpenANXTokenConfig {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Has the crowdsale been finalised?\r\n    // ------------------------------------------------------------------------\r\n    bool public finalised = false;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Number of tokens per 1,000 ETH\r\n    // This can be adjusted as the ETH/USD rate changes\r\n    //\r\n    // Indicative rate of ETH per token of 0.00290923 at 8 June 2017\r\n    // \r\n    // This is the same as 1 / 0.00290923 = 343.733565238912015 OAX per ETH\r\n    //\r\n    // tokensPerEther  = 343.733565238912015\r\n    // tokensPerKEther = 343,733.565238912015\r\n    // tokensPerKEther = 343,734 rounded to an uint, six significant figures\r\n    // ------------------------------------------------------------------------\r\n    uint public tokensPerKEther = 343734;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Locked Tokens - holds the 1y and 2y locked tokens information\r\n    // ------------------------------------------------------------------------\r\n    LockedTokens public lockedTokens;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Wallet receiving the raised funds \r\n    // ------------------------------------------------------------------------\r\n    address public wallet;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Crowdsale participant's accounts need to be KYC verified KYC before\r\n    // the participant can move their tokens\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => bool) public kycRequired;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function OpenANXToken(address _wallet) \r\n        ERC20Token(SYMBOL, NAME, DECIMALS, 0)\r\n    {\r\n        wallet = _wallet;\r\n        lockedTokens = new LockedTokens(this);\r\n        require(address(lockedTokens) != 0x0);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX can change the crowdsale wallet address\r\n    // Can be set at any time before or during the crowdsale\r\n    // Not relevant after the crowdsale is finalised as no more contributions\r\n    // are accepted\r\n    // ------------------------------------------------------------------------\r\n    function setWallet(address _wallet) onlyOwner {\r\n        wallet = _wallet;\r\n        WalletUpdated(wallet);\r\n    }\r\n    event WalletUpdated(address newWallet);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX can set number of tokens per 1,000 ETH\r\n    // Can only be set before the start of the crowdsale\r\n    // ------------------------------------------------------------------------\r\n    function setTokensPerKEther(uint _tokensPerKEther) onlyOwner {\r\n        require(now < START_DATE);\r\n        require(_tokensPerKEther > 0);\r\n        tokensPerKEther = _tokensPerKEther;\r\n        TokensPerKEtherUpdated(tokensPerKEther);\r\n    }\r\n    event TokensPerKEtherUpdated(uint tokensPerKEther);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accept ethers to buy tokens during the crowdsale\r\n    // ------------------------------------------------------------------------\r\n    function () payable {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accept ethers from one account for tokens to be created for another\r\n    // account. Can be used by exchanges to purchase tokens on behalf of \r\n    // it's user\r\n    // ------------------------------------------------------------------------\r\n    function proxyPayment(address participant) payable {\r\n        // No contributions after the crowdsale is finalised\r\n        require(!finalised);\r\n\r\n        // No contributions before the start of the crowdsale\r\n        require(now >= START_DATE);\r\n        // No contributions after the end of the crowdsale\r\n        require(now <= END_DATE);\r\n\r\n        // No contributions below the minimum (can be 0 ETH)\r\n        require(msg.value >= CONTRIBUTIONS_MIN);\r\n        // No contributions above a maximum (if maximum is set to non-0)\r\n        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\r\n\r\n        // Calculate number of tokens for contributed ETH\r\n        // `18` is the ETH decimals\r\n        // `- decimals` is the token decimals\r\n        // `+ 3` for the tokens per 1,000 ETH factor\r\n        uint tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\r\n\r\n        // Check if the hard cap will be exceeded\r\n        require(totalSupply + tokens <= TOKENS_HARD_CAP);\r\n\r\n        // Add tokens purchased to account's balance and total supply\r\n        balances[participant] = balances[participant].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n\r\n        // Log the tokens purchased \r\n        Transfer(0x0, participant, tokens);\r\n        TokensBought(participant, msg.value, this.balance, tokens,\r\n             totalSupply, tokensPerKEther);\r\n\r\n        // KYC verification required before participant can transfer the tokens\r\n        kycRequired[participant] = true;\r\n\r\n        // Transfer the contributed ethers to the crowdsale wallet\r\n        if (!wallet.send(msg.value)) throw;\r\n    }\r\n    event TokensBought(address indexed buyer, uint ethers, \r\n        uint newEtherBalance, uint tokens, uint newTotalSupply, \r\n        uint tokensPerKEther);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX to finalise the crowdsale - to adding the locked tokens to \r\n    // this contract and the total supply\r\n    // ------------------------------------------------------------------------\r\n    function finalise() onlyOwner {\r\n        // Can only finalise if raised > soft cap or after the end date\r\n        require(totalSupply >= TOKENS_SOFT_CAP || now > END_DATE);\r\n\r\n        // Can only finalise once\r\n        require(!finalised);\r\n\r\n        // Calculate and add remaining tokens to locked balances\r\n        lockedTokens.addRemainingTokens();\r\n\r\n        // Allocate locked and premined tokens\r\n        balances[address(lockedTokens)] = balances[address(lockedTokens)].\r\n            add(lockedTokens.totalSupplyLocked());\r\n        totalSupply = totalSupply.add(lockedTokens.totalSupplyLocked());\r\n\r\n        // Can only finalise once\r\n        finalised = true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX to add precommitment funding token balance before the crowdsale\r\n    // commences\r\n    // ------------------------------------------------------------------------\r\n    function addPrecommitment(address participant, uint balance) onlyOwner {\r\n        require(now < START_DATE);\r\n        require(balance > 0);\r\n        balances[participant] = balances[participant].add(balance);\r\n        totalSupply = totalSupply.add(balance);\r\n        Transfer(0x0, participant, balance);\r\n    }\r\n    event PrecommitmentAdded(address indexed participant, uint balance);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account, with KYC\r\n    // verification check for the crowdsale participant's first transfer\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends\r\n        require(finalised);\r\n        // Cannot transfer if KYC verification is required\r\n        require(!kycRequired[msg.sender]);\r\n        // Standard transfer\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account, with KYC verification check for the\r\n    // crowdsale participant's first transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n        returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends\r\n        require(finalised);\r\n        // Cannot transfer if KYC verification is required\r\n        require(!kycRequired[_from]);\r\n        // Standard transferFrom\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX to KYC verify the participant's account\r\n    // ------------------------------------------------------------------------\r\n    function kycVerify(address participant) onlyOwner {\r\n        kycRequired[participant] = false;\r\n        KycVerified(participant);\r\n    }\r\n    event KycVerified(address indexed participant);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Any account can burn _from's tokens as long as the _from account has \r\n    // approved the _amount to be burnt using\r\n    //   approve(0x0, _amount)\r\n    // ------------------------------------------------------------------------\r\n    function burnFrom(\r\n        address _from,\r\n        uint _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            && allowed[_from][0x0] >= _amount           // Transfer approved\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[0x0] + _amount > balances[0x0]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][0x0] = allowed[_from][0x0].sub(_amount);\r\n            balances[0x0] = balances[0x0].add(_amount);\r\n            totalSupply = totalSupply.sub(_amount);\r\n            Transfer(_from, 0x0, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked1Y(address account) constant returns (uint balance) {\r\n        return lockedTokens.balanceOfLocked1Y(account);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 2y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked2Y(address account) constant returns (uint balance) {\r\n        return lockedTokens.balanceOfLocked2Y(account);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y and 2y locked balances for an account\r\n    // ------------------------------------------------------------------------\r\n    function balanceOfLocked(address account) constant returns (uint balance) {\r\n        return lockedTokens.balanceOfLocked(account);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y locked total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupplyLocked1Y() constant returns (uint) {\r\n        if (finalised) {\r\n            return lockedTokens.totalSupplyLocked1Y();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 2y locked total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupplyLocked2Y() constant returns (uint) {\r\n        if (finalised) {\r\n            return lockedTokens.totalSupplyLocked2Y();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 1y and 2y locked total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupplyLocked() constant returns (uint) {\r\n        if (finalised) {\r\n            return lockedTokens.totalSupplyLocked();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Unlocked total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupplyUnlocked() constant returns (uint) {\r\n        if (finalised && totalSupply >= lockedTokens.totalSupplyLocked()) {\r\n            return totalSupply.sub(lockedTokens.totalSupplyLocked());\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // openANX can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint amount)\r\n      onlyOwner returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesLocked2Y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfLocked1Y\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock1Y\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_LOCKED_1Y_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLocked2Y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesLocked1Y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANCHE2_ACCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED_2Y_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfLocked2Y\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLocked1Y\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock2Y\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfLocked\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addRemainingTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED_1Y_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_LOCKED_2Y_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"LockedTokens","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000701c244b988a513c945973defa05de933b23fe1d","Library":"","SwarmSource":"bzzr://1ebf78c948e9b064875413e10729508a8cb3f4fc7b2decd423f81a4a0a420b80"}]}