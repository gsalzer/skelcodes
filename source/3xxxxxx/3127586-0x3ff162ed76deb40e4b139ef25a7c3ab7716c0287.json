{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    enum StatusEditor{DisableEdit, EnableEdit}\r\n    mapping(address => StatusEditor) public editors;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function addNewEditor(address _editorAddress) onlyOwner{\r\n        editors[_editorAddress] = StatusEditor.EnableEdit;\r\n    }\r\n\r\n    function deleteEditor(address _editorAddress) onlyOwner{\r\n        editors[_editorAddress] = StatusEditor.DisableEdit;\r\n    }\r\n\r\n    modifier onlyEditor{\r\n        if (editors[msg.sender] != StatusEditor.EnableEdit) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrEditor{\r\n        if (msg.sender != owner && editors[msg.sender] != StatusEditor.EnableEdit) throw;\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract Ur is Owned {\r\n\r\n    struct Group{\r\n\r\n        uint percentageBonus;\r\n        uint price;\r\n    }\r\n\r\n    struct User{\r\n\r\n        address userAddress;\r\n        bool splitReceived;\r\n        //bytes32 userGroup;\r\n        uint userGroupID;\r\n        bool convertedToCoins;\r\n        uint currentPrice;\r\n        uint currentDifficulty;\r\n        uint currentTime;\r\n    }\r\n\r\n    uint256 public totalBalance;\r\n    string public standard = 'UrToken';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    bool public contractPays;\r\n\r\n    uint public Price;\r\n    uint public Difficulty;\r\n    uint balanceTemp;\r\n    bool incrementPriceAndDifficulty;\r\n    uint public difficultyBalance;\r\n    uint public increaseStep;\r\n\r\n    mapping(bytes32 => Group) public userGroups;\r\n    mapping(address => User) public users;\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    address[] public userAddresses;\r\n    bytes32[] public groupArray;\r\n\r\n    uint public sizeOfUserAddresses;\r\n\r\n    event Transfer(address indexed from, address indexed to, int256 value);\r\n\r\n    Group Beginner;\r\n    Group Advanced;\r\n    Group Certified;\r\n    Group Trader;\r\n    Group Master;\r\n    Group Ultimate;\r\n    Group BegAdvCertif;\r\n    Group AdvCertifTrader;\r\n    Group CertifiedTrader;\r\n    Group CertifiedMaster;\r\n    Group CertifTradMast;\r\n    Group TradMastUltim;\r\n\r\n    function Ur(){\r\n        totalBalance = 10000000000000000000000000000;\r\n        balanceOf[msg.sender] = 10000000000000000000000000000;\r\n        name = 'UrToken';\r\n        symbol = 'URT';\r\n        decimals = 16;\r\n        contractPays = false;\r\n\r\n        Price = 1;\r\n        Difficulty = 10;\r\n        balanceTemp = 0;\r\n        incrementPriceAndDifficulty = true;\r\n        increaseStep = 1000000;\r\n\r\n        sizeOfUserAddresses = 0;\r\n    }\r\n    \r\n    function install() onlyOwner {\r\n        Beginner = Group({percentageBonus: 100, price: 99});\r\n        Advanced = Group({percentageBonus: 100, price: 600});\r\n        Certified = Group({percentageBonus: 100, price: 1500});\r\n        Trader = Group({percentageBonus: 300, price: 5500});\r\n        Master = Group({percentageBonus: 700, price: 11750});\r\n        Ultimate = Group({percentageBonus: 1500, price: 22500});\r\n        BegAdvCertif = Group({percentageBonus: 700, price: 2299});\r\n        AdvCertifTrader = Group({percentageBonus: 700, price: 7700});\r\n        CertifiedTrader = Group({percentageBonus: 700, price: 7100});\r\n        CertifiedMaster = Group({percentageBonus: 1500, price: 13350});\r\n        CertifTradMast = Group({percentageBonus: 6300, price: 18850});\r\n        TradMastUltim = Group({percentageBonus: 12700, price: 39750});\r\n\r\n        userGroups[0x426567696e6e6572] = Beginner;                          //000000000000000000000000000000000000000000000000426567696e6e6572\r\n        userGroups[0x416476616e636564] = Advanced;                          //000000000000000000000000000000000000000000000000416476616e636564\r\n        userGroups[0x436572746966696564] = Certified;                       //0000000000000000000000000000000000000000000000436572746966696564\r\n        userGroups[0x547261646572] = Trader;                                //0000000000000000000000000000000000000000000000000000547261646572\r\n        userGroups[0x4d6173746572] = Master;                                //00000000000000000000000000000000000000000000000000004d6173746572\r\n        userGroups[0x556c74696d617465] = Ultimate;                          //000000000000000000000000000000000000000000000000556c74696d617465\r\n        userGroups[0x426567416476436572746966] = BegAdvCertif;              //0000000000000000000000000000000000000000426567416476436572746966\r\n        userGroups[0x416476436572746966547261646572] = AdvCertifTrader;     //0000000000000000000000000000000000416476436572746966547261646572\r\n        userGroups[0x436572746966696564547261646572] = CertifiedTrader;     //0000000000000000000000000000000000436572746966696564547261646572\r\n        userGroups[0x4365727469666965644d6173746572] = CertifiedMaster;     //00000000000000000000000000000000004365727469666965644d6173746572\r\n        userGroups[0x436572746966547261644d617374] = CertifTradMast;        //000000000000000000000000000000000000436572746966547261644d617374\r\n        userGroups[0x547261644d617374556c74696d] = TradMastUltim;           //00000000000000000000000000000000000000547261644d617374556c74696d\r\n\r\n        groupArray.push(0x426567696e6e6572);                                //Beginner\r\n        groupArray.push(0x416476616e636564);                                //Advanced\r\n        groupArray.push(0x436572746966696564);                              //Certified\r\n        groupArray.push(0x547261646572);                                    //Trader\r\n        groupArray.push(0x4d6173746572);                                    //Master\r\n        groupArray.push(0x556c74696d617465);                                //Ultimate\r\n        groupArray.push(0x426567416476436572746966);                        //Beginner+Advanced+Certified\r\n        groupArray.push(0x416476436572746966547261646572);                  //Advanced+Certified+Trader\r\n        groupArray.push(0x436572746966696564547261646572);                  //Certified+Trader\r\n        groupArray.push(0x4365727469666965644d6173746572);                  //Certified+Master\r\n        groupArray.push(0x436572746966547261644d617374);                    //Certified+Trader+Master\r\n        groupArray.push(0x547261644d617374556c74696d);                      //Trader+Master+Ultimate\r\n\r\n    }                                                                         \r\n\r\n    function addCoins(uint256 _value) onlyOwner{\r\n\r\n        balanceOf[owner] += _value; \r\n        totalBalance += _value;\r\n        Transfer(0, owner, int256(_value));\r\n    }\r\n\r\n    function addUser(address _userAddress, uint _userGroupID) onlyOwnerOrEditor returns(bool){ \r\n\r\n        if(groupArray[_userGroupID] == '0x')\r\n            return false;\r\n\r\n        for(uint i=0;i<groupArray.length;i++){\r\n\r\n            if(i == _userGroupID){\r\n                difficultyBalance += userGroups[groupArray[i]].price;\r\n            }\r\n        }\r\n\r\n        users[_userAddress].userGroupID = _userGroupID;\r\n        users[_userAddress].splitReceived = false;\r\n        users[_userAddress].userAddress = _userAddress;\r\n        users[_userAddress].convertedToCoins = false;\r\n        users[_userAddress].currentPrice = 0;\r\n        users[_userAddress].currentTime = 0;\r\n\r\n        userAddresses.push(_userAddress);\r\n\r\n        //if(difficultyBalance>balanceTemp){\r\n        //    incrementPriceAndDifficulty = false;\r\n        //    increasePriceAndDifficulty();\r\n        //}\r\n\r\n        sizeOfUserAddresses = userAddresses.length;\r\n                \r\n        return true;\r\n    }\r\n\r\n    function addNewGroup(bytes32 _groupName, uint _percentageBonus, uint _price) onlyOwnerOrEditor returns (bool){ \r\n\r\n        userGroups[_groupName].percentageBonus = _percentageBonus;\r\n        userGroups[_groupName].price = _price;\r\n\r\n        groupArray.push(_groupName);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeUserGroup(address _userAddress, uint _newUserGroupID) onlyOwner returns (bool){\r\n\r\n        if(groupArray[_newUserGroupID] == '0x')\r\n            return false;\r\n\r\n        for(uint i=0;i<groupArray.length;i++){\r\n\r\n            if(i == _newUserGroupID){\r\n                users[_userAddress].userGroupID = _newUserGroupID;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function switchSplitBonusValue(address _userAddress, bool _newSplitValue) onlyOwner{\r\n\r\n        users[_userAddress].splitReceived = _newSplitValue;\r\n    }\r\n\r\n    function increasePriceAndDifficulty() onlyOwnerOrEditor{\r\n        if((difficultyBalance - balanceTemp) >= increaseStep){            \r\n            balanceTemp = difficultyBalance;\r\n            Difficulty += 10;\r\n            Price += 1;           \r\n        }\r\n    }\r\n\r\n    function changeDifficultyAndPrice(uint _newDifficulty, uint _newPrice) onlyOwner{\r\n        Difficulty = _newDifficulty;\r\n        Price = _newPrice;\r\n        difficultyBalance = 0;\r\n        balanceTemp = 0;\r\n    }\r\n    \r\n    function changeIncreaseStep (uint _increaseStep) onlyOwner {\r\n        increaseStep = _increaseStep;\r\n    }\r\n\r\n    function convert(address _userAddress) onlyOwnerOrEditor{\r\n\r\n        users[_userAddress].convertedToCoins = true;\r\n        users[_userAddress].currentPrice = Price;\r\n        users[_userAddress].currentDifficulty = Difficulty;\r\n        users[_userAddress].currentTime = block.timestamp;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) {\r\n\r\n        if (_value < 0 || balanceOf[msg.sender] < _value)\r\n            throw;\r\n\r\n        if (users[msg.sender].convertedToCoins) throw;\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, int256(_value));\r\n        if (contractPays && !msg.sender.send(tx.gasprice))\r\n            throw;\r\n    }\r\n\r\n    function switchFeePolicy(bool _contractPays) onlyOwner {\r\n        contractPays = _contractPays;\r\n    }\r\n\r\n    function showUser(address _userAddress) constant returns(address, bool, bytes32, bool, uint, uint, uint){\r\n\r\n        return (users[_userAddress].userAddress, users[_userAddress].splitReceived, groupArray[users[_userAddress].userGroupID],\r\n                users[_userAddress].convertedToCoins, users[_userAddress].currentPrice, users[_userAddress].currentDifficulty, users[_userAddress].currentTime);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userGroups\",\"outputs\":[{\"name\":\"percentageBonus\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"install\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_increaseStep\",\"type\":\"uint256\"}],\"name\":\"changeIncreaseStep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editorAddress\",\"type\":\"address\"}],\"name\":\"addNewEditor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_percentageBonus\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractPays\",\"type\":\"bool\"}],\"name\":\"switchFeePolicy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"showUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increasePriceAndDifficulty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_newSplitValue\",\"type\":\"bool\"}],\"name\":\"switchSplitBonusValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeOfUserAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDifficulty\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeDifficultyAndPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"splitReceived\",\"type\":\"bool\"},{\"name\":\"userGroupID\",\"type\":\"uint256\"},{\"name\":\"convertedToCoins\",\"type\":\"bool\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"currentDifficulty\",\"type\":\"uint256\"},{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"editors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_userGroupID\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficultyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractPays\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editorAddress\",\"type\":\"address\"}],\"name\":\"deleteEditor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_newUserGroupID\",\"type\":\"uint256\"}],\"name\":\"changeUserGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Ur","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7497747c86d188647782add3204d0fbf88b0ef42d23efd3398e607ed1ead40e0"}]}