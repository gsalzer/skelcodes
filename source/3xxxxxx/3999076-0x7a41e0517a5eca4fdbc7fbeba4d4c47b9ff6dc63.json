{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Original from:\r\n// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n// (c) BokkyPooBah 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n    // Get the total token supply     function totalSupply() constant returns (uint256 totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    // Send _value amount of token from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) returns (bool success); \r\n    \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n   // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n// Migration Agent interface\r\ncontract migration {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\n/// @title Zeus Shield Coin (ZSC)\r\ncontract ZeusShieldCoin is owned, ERC20Interface {\r\n    // Public variables of the token\r\n    string public constant standard = 'ERC20';\r\n    string public constant name = 'Zeus Shield Coin';  \r\n    string public constant symbol = 'ZSC';\r\n    uint8  public constant decimals = 18;\r\n    uint public registrationTime = 0;\r\n    bool public registered = false;\r\n\r\n    uint256 public totalMigrated = 0;\r\n    address public migrationAgent = 0;\r\n\r\n    uint256 totalTokens = 0; \r\n\r\n\r\n    // This creates an array with all balances \r\n    mapping (address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n   \r\n    // These are related to ZSC team members\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint[3]) public frozenTokens;\r\n\r\n    // Variables of token frozen rules for ZSC team members.\r\n    uint[3] public unlockat;\r\n\r\n    event Migrate(address _from, address _to, uint256 _value);\r\n\r\n    // Constructor\r\n    function ZeusShieldCoin() \r\n    {\r\n    }\r\n\r\n    // This unnamed function is called whenever someone tries to send ether to it \r\n    function () \r\n    {\r\n        throw; // Prevents accidental sending of ether\r\n    }\r\n\r\n    function totalSupply() \r\n        constant \r\n        returns (uint256) \r\n    {\r\n        return totalTokens;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) \r\n        constant \r\n        returns (uint256) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) \r\n        returns (bool success) \r\n    {\r\n        if (!registered) return false;\r\n        if (_amount <= 0) return false;\r\n        if (frozenRules(msg.sender, _amount)) return false;\r\n\r\n        if (balances[msg.sender] >= _amount\r\n            && balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }     \r\n    }\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount) \r\n        returns (bool success) \r\n    {\r\n        if (!registered) return false;\r\n        if (_amount <= 0) return false;\r\n        if (frozenRules(_from, _amount)) return false;\r\n\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.     \r\n    function approve(address _spender, uint256 _amount) \r\n        returns (bool success) \r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) \r\n        constant \r\n        returns (uint256 remaining) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Set address of migration agent contract and enable migration\r\n    /// @param _agent The address of the MigrationAgent contract\r\n    function setMigrationAgent(address _agent) \r\n        public\r\n        onlyOwner\r\n    {\r\n        if (!registered) throw;\r\n        if (migrationAgent != 0) throw;\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    /// @dev Buyer can apply for migrating tokens to the new token contract.\r\n    /// @param _value The amount of token to be migrated\r\n    function applyMigrate(uint256 _value) \r\n        public\r\n    {\r\n        if (!registered) throw;\r\n        if (migrationAgent == 0) throw;\r\n\r\n        // Validate input value.\r\n        if (_value == 0) throw;\r\n        if (_value > balances[msg.sender]) throw;\r\n\r\n        balances[msg.sender] -= _value;\r\n        totalTokens -= _value;\r\n        totalMigrated += _value;\r\n        migration(migrationAgent).migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, migrationAgent, _value);\r\n    }\r\n\r\n\r\n    /// @dev Register for crowdsale and do the token pre-allocation.\r\n    /// @param _tokenFactory The address of ICO-sale contract\r\n    /// @param _congressAddress The address of multisig token contract\r\n    function registerSale(address _tokenFactory, address _congressAddress) \r\n        public\r\n        onlyOwner \r\n    {\r\n        // The token contract can be only registered once.\r\n        if (!registered) {\r\n            // Total supply\r\n            totalTokens  = 6100 * 1000 * 1000 * 10**18; \r\n\r\n            // (51%) of total supply to ico-sale contract\r\n            balances[_tokenFactory]    = 3111 * 1000 * 1000 * 10**18;\r\n\r\n            // (34%) of total supply to the congress address for congress and partners\r\n            balances[_congressAddress] = 2074 * 1000 * 1000 * 10**18;\r\n\r\n            // Allocate rest (15%) of total supply to development team and contributors\r\n            // 915,000,000 * 10**18;\r\n            teamAllocation();\r\n\r\n            registered = true;\r\n            registrationTime = now;\r\n\r\n            unlockat[0] = registrationTime +  6 * 30 days;\r\n            unlockat[1] = registrationTime + 12 * 30 days;\r\n            unlockat[2] = registrationTime + 24 * 30 days;\r\n        }\r\n    }\r\n\r\n    /// @dev Allocate 15% of total supply to ten team members.\r\n    /// @param _account The address of account to be frozen.\r\n    /// @param _totalAmount The amount of tokens to be frozen.\r\n    function freeze(address _account, uint _totalAmount) \r\n        public\r\n        onlyOwner \r\n    {\r\n        frozenAccount[_account] = true;  \r\n        frozenTokens[_account][0] = _totalAmount;            // 100% of locked token within 6 months\r\n        frozenTokens[_account][1] = _totalAmount * 80 / 100; //  80% of locked token within 12 months\r\n        frozenTokens[_account][2] = _totalAmount * 50 / 100; //  50% of locked token within 24 months\r\n    }\r\n\r\n    /// @dev Allocate 15% of total supply to the team members.\r\n    function teamAllocation() \r\n        internal \r\n    {\r\n        // 1.5% of total supply allocated to each team member.\r\n        uint individual = 91500 * 1000 * 10**18;\r\n\r\n        balances[0xCDc5BDEFC6Fddc66E73250fCc2F08339e091dDA3] = individual; // 1.5% \r\n        balances[0x8b47D27b085a661E6306Ac27A932a8c0b1C11b84] = individual; // 1.5% \r\n        balances[0x825f4977DB4cd48aFa51f8c2c9807Ee89120daB7] = individual; // 1.5% \r\n        balances[0xcDf5D7049e61b2F50642DF4cb5a005b1b4A5cfc2] = individual; // 1.5% \r\n        balances[0xab0461FB41326a960d3a2Fe2328DD9A65916181d] = individual; // 1.5% \r\n        balances[0xd2A131F16e4339B2523ca90431322f559ABC4C3d] = individual; // 1.5%\r\n        balances[0xCcB4d663E6b05AAda0e373e382628B9214932Fff] = individual; // 1.5% \r\n        balances[0x60284720542Ff343afCA6a6DBc542901942260f2] = individual; // 1.5% \r\n        balances[0xcb6d0e199081A489f45c73D1D22F6de58596a99C] = individual; // 1.5% \r\n        balances[0x928D99333C57D31DB917B4c67D4d8a033F2143A7] = individual; // 1.5% \r\n\r\n        // Freeze tokens allocated to the team for at most two years.\r\n        // Freeze tokens in three phases\r\n        // 91500 * 1000 * 10**18; 100% of locked tokens within 6 months\r\n        // 73200 * 1000 * 10**18;  80% of locked tokens within 12 months\r\n        // 45750 * 1000 * 10**18;  50% of locked tokens within 24 months\r\n        freeze(\"0xCDc5BDEFC6Fddc66E73250fCc2F08339e091dDA3\", individual);\r\n        freeze(\"0x8b47D27b085a661E6306Ac27A932a8c0b1C11b84\", individual);\r\n        freeze(\"0x825f4977DB4cd48aFa51f8c2c9807Ee89120daB7\", individual);\r\n        freeze(\"0xcDf5D7049e61b2F50642DF4cb5a005b1b4A5cfc2\", individual);\r\n        freeze(\"0xab0461FB41326a960d3a2Fe2328DD9A65916181d\", individual);\r\n        freeze(\"0xd2A131F16e4339B2523ca90431322f559ABC4C3d\", individual);\r\n        freeze(\"0xCcB4d663E6b05AAda0e373e382628B9214932Fff\", individual);\r\n        freeze(\"0x60284720542Ff343afCA6a6DBc542901942260f2\", individual);\r\n        freeze(\"0xcb6d0e199081A489f45c73D1D22F6de58596a99C\", individual);\r\n        freeze(\"0x928D99333C57D31DB917B4c67D4d8a033F2143A7\", individual);\r\n    }\r\n\r\n    /// @dev Token frozen rules for token holders.\r\n    /// @param _from The token sender.\r\n    /// @param _value The token amount.\r\n    function frozenRules(address _from, uint256 _value) \r\n        internal \r\n        returns (bool success) \r\n    {\r\n        if (frozenAccount[_from]) {\r\n            if (now < unlockat[0]) {\r\n               // 100% locked within the first 6 months.\r\n               if (balances[_from] - _value < frozenTokens[_from][0]) \r\n                    return true;  \r\n            } else if (now >= unlockat[0] && now < unlockat[1]) {\r\n               // 20% unlocked after 6 months.\r\n               if (balances[_from] - _value < frozenTokens[_from][1]) \r\n                    return true;  \r\n            } else if (now >= unlockat[1] && now < unlockat[2]) {\r\n               // 50% unlocked after 12 months. \r\n               if (balances[_from]- _value < frozenTokens[_from][2]) \r\n                   return true;  \r\n            } else {\r\n               // 100% unlocked after 24 months.\r\n               frozenAccount[_from] = false; \r\n            }\r\n        }\r\n        return false;\r\n    }   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_congressAddress\",\"type\":\"address\"}],\"name\":\"registerSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"applyMigrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ZeusShieldCoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e4c0757659c6ff457319243cde281b2c62181547dd020fbca0bcb2f64f7121f"}]}