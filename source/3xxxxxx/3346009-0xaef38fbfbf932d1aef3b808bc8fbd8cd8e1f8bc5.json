{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ICreditBOND{\r\n    function getBondMultiplier(uint _creditAmount, uint _locktime) constant returns (uint bondMultiplier) {}\r\n    function getNewCoinsIssued(uint _lockedBalance, uint _blockDifference, uint _percentReward) constant returns(uint newCoinsIssued){}\r\n}\r\n\r\ncontract ITokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); \r\n}\r\n\r\ncontract IERC20Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}   \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract CreditBIT is IERC20Token {\r\n\r\n    struct CreditBalance{\r\n        uint avaliableBalance;\r\n        uint lockedBalance;\r\n\r\n        uint bondMultiplier;\r\n        uint lockedUntilBlock;\r\n        uint lastBlockClaimed;\r\n    }\r\n\r\n\taddress public dev;\r\n\taddress public creditDaoAddress;\r\n    ICreditBOND creditBond;\r\n    address public creditGameAddress;\r\n    address public creditMcAddress;\r\n    bool public lockdown;\r\n\r\n    string public standard = 'Creditbit 1.0';\r\n    string public name = 'CreditBIT';\r\n    string public symbol = 'CRB';\r\n    uint8 public decimals = 8;\r\n\r\n    uint256 public totalSupply = 0;\r\n    uint public totalAvaliableSupply = 0;\r\n    uint public totalLockedSupply = 0; \r\n\r\n    mapping (address => CreditBalance) balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n    //event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LockCredits(address _owner, uint _amount, uint _numberOfBlocks);\r\n    event UnlockCredits(address _owner, uint _amount);\r\n    event Mint(address _owner, uint _amount);\r\n\r\n    function CreditBIT() {\r\n        dev = msg.sender;\r\n        lockdown = false;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint avaliableBalance){\r\n        return balances[_owner].avaliableBalance;\r\n    }\r\n\r\n    function lockedBalanceOf(address _owner) constant returns (uint avaliableBalance){\r\n        return balances[_owner].lockedBalance;\r\n    }\r\n\r\n    function getAccountData(address _owner) constant returns (uint avaliableBalance, uint lockedBalance, uint bondMultiplier, uint lockedUntilBlock, uint lastBlockClaimed){\r\n        CreditBalance memory tempAccountData = balances[_owner];\r\n        return (\r\n            tempAccountData.avaliableBalance,\r\n            tempAccountData.lockedBalance,\r\n            tempAccountData.bondMultiplier,\r\n            tempAccountData.lockedUntilBlock,\r\n            tempAccountData.lastBlockClaimed\r\n        );\r\n    }\r\n\r\n    function lockBalance(uint _amount, uint _lockForBlocks) returns (uint error){\r\n        if (lockdown) throw;\r\n        uint realBlocksLocked;\r\n        if (block.number + _lockForBlocks < balances[msg.sender].lockedUntilBlock){\r\n            realBlocksLocked = balances[msg.sender].lockedUntilBlock;\r\n        }else{\r\n            realBlocksLocked = block.number + _lockForBlocks;\r\n        }\r\n        \r\n        uint realAmount;\r\n        if (balances[msg.sender].avaliableBalance < (_amount * 10**8)) {\r\n            realAmount = (balances[msg.sender].avaliableBalance / 10**8) * 10**8;\r\n        }else{\r\n            realAmount = (_amount * 10**8);\r\n        }\r\n\r\n        uint newBondMultiplier = creditBond.getBondMultiplier(realAmount, realBlocksLocked);\r\n        if (newBondMultiplier == 0) throw;\r\n\r\n        uint claimError = claimBondReward();\r\n\r\n        balances[msg.sender].avaliableBalance -= realAmount;\r\n        balances[msg.sender].lockedBalance += realAmount;\r\n        totalAvaliableSupply -= realAmount;\r\n        totalLockedSupply += realAmount;\r\n        balances[msg.sender].bondMultiplier = newBondMultiplier;\r\n        balances[msg.sender].lockedUntilBlock = realBlocksLocked;\r\n        balances[msg.sender].lastBlockClaimed = block.number;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function mintMigrationTokens(address _reciever, uint _amount) returns (uint error){\r\n      \r\n        if (msg.sender != creditMcAddress) { return 1; }\r\n        \r\n        mint(_amount, _reciever);\r\n        return 0;\r\n    }\r\n\r\n    function claimBondReward() returns (uint error){\r\n        if (lockdown) throw;\r\n        if (balances[msg.sender].lockedBalance == 0) { return 1;}\r\n        \r\n        uint blockDifference = block.number - balances[msg.sender].lastBlockClaimed;\r\n        if (blockDifference < 10){ return 1;}\r\n        \r\n        uint newCreditsIssued = creditBond.getNewCoinsIssued(\r\n            balances[msg.sender].lockedBalance, \r\n            blockDifference, \r\n            balances[msg.sender].bondMultiplier);\r\n        if (newCreditsIssued == 0) { return 1; }\r\n        \r\n        if (balances[msg.sender].lockedUntilBlock < block.number ) {\r\n            balances[msg.sender].avaliableBalance += balances[msg.sender].lockedBalance;\r\n            totalAvaliableSupply += balances[msg.sender].lockedBalance;\r\n            totalLockedSupply -= balances[msg.sender].lockedBalance;\r\n            balances[msg.sender].bondMultiplier = 0;\r\n            balances[msg.sender].lockedUntilBlock = 0;\r\n            UnlockCredits(msg.sender, balances[msg.sender].lockedBalance);\r\n            balances[msg.sender].lockedBalance = 0;\r\n        }else{\r\n            balances[msg.sender].lastBlockClaimed = block.number;\r\n        }\r\n        \r\n        mint(newCreditsIssued, msg.sender);\r\n    }\r\n    \r\n    function claimGameReward(address _champion, uint _lockedTokenAmount, uint _lockTime) returns (uint error){\r\n        if (lockdown) throw;\r\n        if (msg.sender != creditGameAddress) { return 1; }\r\n        \r\n        uint newCreditsIssued = creditBond.getNewCoinsIssued(\r\n            _lockedTokenAmount, \r\n            _lockTime, \r\n            creditBond.getBondMultiplier(_lockedTokenAmount, _lockTime + block.number));\r\n        if (newCreditsIssued == 0) { return 1; }\r\n        mint(newCreditsIssued, _champion);\r\n        return 0;\r\n    }\r\n\r\n    function mintBonusTokensForGames(uint _amount) returns (uint error){\r\n        if (lockdown) throw;\r\n        if (msg.sender != creditDaoAddress) { return 1; }\r\n\r\n        mint(_amount, creditGameAddress);\r\n        return 0;\r\n    }\r\n\r\n    function mint(uint _newCreditsIssued, address _sender) internal {\r\n       \r\n        totalSupply += _newCreditsIssued;\r\n        totalAvaliableSupply += _newCreditsIssued;\r\n        balances[_sender].avaliableBalance += _newCreditsIssued;\r\n        Transfer(0x0, _sender, _newCreditsIssued);\r\n        Mint(_sender, _newCreditsIssued);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (lockdown) throw;\r\n        if (balances[msg.sender].avaliableBalance < _value) throw;\r\n        if (balances[_to].avaliableBalance + _value < balances[_to].avaliableBalance) throw;\r\n        balances[msg.sender].avaliableBalance -= _value;\r\n        balances[_to].avaliableBalance += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if (lockdown) throw;\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        if (lockdown) throw;\r\n        ITokenRecipient spender = ITokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }        \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (lockdown) throw;\r\n        if (balances[_from].avaliableBalance < _value) throw;\r\n        if (balances[_to].avaliableBalance + _value < balances[_to].avaliableBalance) throw;\r\n        if (_value > allowance[_from][msg.sender]) throw;\r\n        balances[_from].avaliableBalance -= _value;\r\n        balances[_to].avaliableBalance += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function setCreditBond(address _bondAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditBond = ICreditBOND(_bondAddress);\r\n        return 0;\r\n    }\r\n\r\n    function getCreditBondAddress() constant returns (address bondAddress){\r\n        return address(creditBond);\r\n    }\r\n    \r\n    function setCreditDaoAddress(address _daoAddress) returns (uint error){\r\n        if (msg.sender != dev) {return 1;}\r\n        \r\n        creditDaoAddress = _daoAddress;\r\n        return 0;\r\n    }\r\n    \r\n    function setCreditGameAddress(address _gameAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditGameAddress = _gameAddress;\r\n        return 0;\r\n    }\r\n    \r\n    function setCreditMcAddress(address _mcAddress) returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n        \r\n        creditMcAddress = _mcAddress;\r\n        return 0;\r\n    }\r\n\r\n    function lockToken() returns (uint error){\r\n        if (msg.sender != creditDaoAddress) {return 1;}\r\n\r\n        lockdown = !lockdown;\r\n        return 0;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreditBondAddress\",\"outputs\":[{\"name\":\"bondAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"setCreditGameAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockForBlocks\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reciever\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintMigrationTokens\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setCreditDaoAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditDaoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"},{\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"name\":\"bondMultiplier\",\"type\":\"uint256\"},{\"name\":\"lockedUntilBlock\",\"type\":\"uint256\"},{\"name\":\"lastBlockClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBondReward\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"avaliableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champion\",\"type\":\"address\"},{\"name\":\"_lockedTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"claimGameReward\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditGameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bondAddress\",\"type\":\"address\"}],\"name\":\"setCreditBond\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mcAddress\",\"type\":\"address\"}],\"name\":\"setCreditMcAddress\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintBonusTokensForGames\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAvaliableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditMcAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"name\":\"LockCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnlockCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CreditBIT","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed94e1deaef3d280cafc04c42d0491cd965a37e6bd517f97d78c50612c6a8db6"}]}