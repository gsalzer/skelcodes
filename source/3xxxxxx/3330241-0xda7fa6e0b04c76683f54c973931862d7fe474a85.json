{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    event Transfer(bytes32 indexed node, address owner);\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\ncontract ReverseRegistrar {\r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n    \r\n    /**\r\n     * @dev Constructor\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param node The node hash that this registrar governs.\r\n     */\r\n    function ReverseRegistrar(address ensAddr, bytes32 node) {\r\n        ens = AbstractENS(ensAddr);\r\n        rootNode = node;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the reverse ENS record associated with the\r\n     *      calling account.\r\n     * @param owner The address to set as the owner of the reverse record in ENS.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function claim(address owner) returns (bytes32 node) {\r\n        var label = sha3HexAddress(msg.sender);\r\n        ens.setSubnodeOwner(rootNode, label, owner);\r\n        return sha3(rootNode, label);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the node hash for a given account's reverse records.\r\n     * @param addr The address to hash\r\n     * @return The ENS node hash.\r\n     */\r\n    function node(address addr) constant returns (bytes32 ret) {\r\n        return sha3(rootNode, sha3HexAddress(addr));\r\n    }\r\n\r\n    /**\r\n     * @dev An optimised function to compute the sha3 of the lower-case\r\n     *      hexadecimal representation of an Ethereum address.\r\n     * @param addr The address to hash\r\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\r\n     *         input address.\r\n     */\r\n    function sha3HexAddress(address addr) private returns (bytes32 ret) {\r\n        assembly {\r\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\r\n            let i := 40\r\n        loop:\r\n            i := sub(i, 1)\r\n            mstore8(i, byte(and(addr, 0xf), lookup))\r\n            addr := div(addr, 0x10)\r\n            i := sub(i, 1)\r\n            mstore8(i, byte(and(addr, 0xf), lookup))\r\n            addr := div(addr, 0x10)\r\n            jumpi(loop, i)\r\n            ret := sha3(0, 40)\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ensAddr\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"ReverseRegistrar","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2","Library":"","SwarmSource":"bzzr://6551702d4f0ded6074c9fd4371888253374d3ab7f9ea60e48f1a3d3a74bb3a7b"}]}