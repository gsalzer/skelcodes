{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// Visit ethersphere.io for more information\r\n// v2.0.1\r\n\r\ncontract EtherSphere {\r\n    mapping(address => uint) bidPool;\r\n    address[] public bidders;\r\n    address highestBidder;\r\n    uint bidderArraySize;\r\n    uint public numBidders;\r\n    uint public minBid;\r\n    uint public interval = 1 days;\r\n    uint public rewardPool;\r\n    uint public todaysBidTotal;\r\n    uint public endOfDay;\r\n    uint public previousRoundJackpot;\r\n    uint public highestBid;\r\n    uint public minBidMultiplier = 10;\r\n    //Jackpot triggers when todaysBidTotal > rewardPool * 1.05\r\n    uint public jackpotConditionPercent = 105;\r\n    //Max bid as a proportion of reward pool pre-jackpot. Disabled by default\r\n    uint public maxBidPercent; \r\n    \r\n    function EtherSphere(){\r\n        etherSphereHost = msg.sender;\r\n        minBid = 0.01 ether;\r\n        rewardPool = 0;\r\n        cost = 0;\r\n        numBidders = 0;\r\n        todaysBidTotal = 0;\r\n        previousRoundJackpot = 0;\r\n        highestBid = 0;\r\n        bidderArraySize = 0;\r\n        maxBidPercent = 100; \r\n        endOfDay = now + interval;\r\n    }\r\n    \r\n    function inject() ismain payable{\r\n        rewardPool += msg.value;\r\n    }\r\n    \r\n    function addEtherToSphere() private{\r\n        if (msg.value < minBid) throw;\r\n        if (triggerPreJackpotLimit()) throw;\r\n        \r\n        bidPool[msg.sender] += msg.value;\r\n        if (bidPool[msg.sender] > highestBid) {\r\n            highestBid = bidPool[msg.sender];\r\n            highestBidder = msg.sender;\r\n        }\r\n        todaysBidTotal += msg.value;\r\n    }\r\n    \r\n    function triggerPreJackpotLimit() private returns(bool){\r\n        if (maxBidPercent == 100) return false;\r\n        bool willBidExceedPreJackpotLimit = rewardPool * maxBidPercent / 100 < msg.value + bidPool[msg.sender];\r\n        bool willBePostJackpot = (todaysBidTotal + msg.value) >= (rewardPool * jackpotConditionPercent / 100);\r\n        return willBidExceedPreJackpotLimit && !willBePostJackpot;\r\n    }\r\n    \r\n    function () payable{\r\n        if (shouldCompleteDay()) completeDay();\r\n        recordSenderIfNecessary();\r\n        addEtherToSphere();\r\n    }\r\n    \r\n    function recordSenderIfNecessary() private{\r\n       if (bidPool[msg.sender] == 0){\r\n            setMinBid();\r\n            if (msg.value < minBid) throw;\r\n            if (numBidders >= bidderArraySize){\r\n                bidders.push(msg.sender);\r\n                numBidders++;\r\n                bidderArraySize++;\r\n            }\r\n            else {\r\n                bidders[numBidders] = msg.sender;\r\n                numBidders++;\r\n            }\r\n            setMinBid();\r\n        }\r\n    }\r\n    \r\n    function completeDay() private{\r\n        if (doTriggerJackpot()) {\r\n            triggerJackpot();\r\n        }\r\n        else {\r\n            previousRoundJackpot = 0;\r\n        }\r\n        if (numBidders > 0) {\r\n            distributeReward();\r\n            fees();\r\n            endOfDay = endOfDay + interval;\r\n        }\r\n        else {\r\n            endOfDay = endOfDay + interval;\r\n            return;\r\n        }\r\n        uint poolReserved = todaysBidTotal / 20;\r\n        rewardPool = todaysBidTotal - poolReserved;\r\n        cost += poolReserved;\r\n        todaysBidTotal = 0;\r\n        highestBid = 0;\r\n        numBidders = 0;\r\n    }\r\n    \r\n    //Jackpot condition, happens when today's total bids is more than or equals to current pool * condition percent\r\n    function doTriggerJackpot() private constant returns (bool){\r\n        return numBidders > 0 && todaysBidTotal > (rewardPool * jackpotConditionPercent / 100);\r\n    }\r\n    \r\n    function end() ismain payable{\r\n        if (msg.sender == etherSphereHost)  suicide(etherSphereHost);\r\n    }\r\n    \r\n    //Reward all participants\r\n    function distributeReward() private{\r\n        uint portion = 0;\r\n        uint distributed = 0;\r\n        for (uint i = 0; i < numBidders; i++){\r\n            address bidderAddress = bidders[i];\r\n            if (i < numBidders - 1){\r\n                portion = bidPool[bidderAddress] * rewardPool / todaysBidTotal;\r\n            }\r\n            else {\r\n                portion = rewardPool - distributed;\r\n            }\r\n            distributed += portion;\r\n            bidPool[bidderAddress] = 0;\r\n            sendPortion(portion, bidderAddress);\r\n        }\r\n    }\r\n    \r\n    function triggerJackpot() private{\r\n        uint rewardAmount = rewardPool * 35 / 100;\r\n        rewardPool -= rewardAmount;\r\n        previousRoundJackpot = rewardAmount;\r\n        sendPortion(rewardAmount, highestBidder);\r\n    }\r\n    \r\n    function sendPortion(uint amount, address target) private{\r\n        if (!target.send(amount)) throw;\r\n    }\r\n    \r\n    function shouldCompleteDay() private returns (bool){\r\n        return now > endOfDay;\r\n    }\r\n    \r\n    function containsSender() private constant returns (bool){\r\n        for (uint i = 0; i < numBidders; i++){\r\n            if (bidders[i] == msg.sender)\r\n                return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    //Change minimum bids as more bidders enter. minBidMultiplier default = 10\r\n    function setMinBid() private{\r\n        uint bid = 0.001 ether;\r\n        if (numBidders > 5){\r\n            bid = 0.01 ether;\r\n            if (numBidders > 50){\r\n                bid = 0.02 ether;\r\n                if (numBidders > 100){\r\n                    bid = 0.05 ether;\r\n                    if (numBidders > 150){\r\n                        bid = 0.1 ether;\r\n                        if (numBidders > 200){\r\n                            bid = 0.5 ether;\r\n                            if (numBidders > 250){\r\n                                bid = 2.5 ether;\r\n                                if (numBidders > 300){\r\n                                    bid = 5 ether;\r\n                                    if (numBidders > 350){\r\n                                        bid = 10 ether;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        minBid = minBidMultiplier * bid;\r\n    }\r\n    \r\n    //administrative functionalities\r\n    address etherSphereHost;\r\n    uint cost;\r\n    \r\n    //In case we run out of gas\r\n    function manualEndDay() ismain payable{\r\n        if (shouldCompleteDay()) completeDay();\r\n    }\r\n    //Change bid multiplier to manage volume\r\n    function changeMinBidMultiplier(uint bidMultiplier) ismain payable{\r\n        minBidMultiplier = bidMultiplier;\r\n    }\r\n    \r\n    //Change prejackpot cap to prevent game rigging\r\n    function changePreJackpotBidLimit(uint bidLimit) ismain payable{\r\n        if (bidLimit == 0) throw;\r\n        maxBidPercent = bidLimit;\r\n    }\r\n    \r\n    modifier ismain() {\r\n        if (msg.sender != etherSphereHost) throw;\r\n        _;\r\n    }\r\n    \r\n    //Clear fees to EtherSphereHost\r\n    function fees() private {\r\n        if (cost == 0) return;\r\n        if (!etherSphereHost.send(cost)) throw;\r\n        cost = 0;\r\n    }\r\n    \r\n    //Manual claim\r\n    function _fees() ismain payable{\r\n        fees();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minBidMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"todaysBidTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBidPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualEndDay\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotConditionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bidMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeMinBidMultiplier\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bidLimit\",\"type\":\"uint256\"}],\"name\":\"changePreJackpotBidLimit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousRoundJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inject\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_fees\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBidders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"EtherSphere","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://647a57a96e17fb0795108b58a3810f79ad417774197d547a37ea57358bd1c400"}]}