{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract NTRYToken{\r\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n   function takeBackNTRY(address _from,address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ncontract PreICO {\r\n   \r\n    address owner;\r\n    modifier onlyOwner {if (msg.sender != owner) throw; _;}\r\n\r\n    struct Contribution {\r\n        uint256 amount;\r\n        uint currentPrice;\r\n        uint256 NTRY;\r\n        address contributor;\r\n    }\r\n    \r\n    // public variables\r\n    Contribution[] public contributions;\r\n    mapping (address => Contribution) rewardsLedger;\r\n    \r\n    address beneficiary;\r\n    \r\n    uint256 constant tokensAsReward =  3500000 * 1 ether;\r\n    uint PRICE = 875;                 // 1 ether = 875 NTRY tokens\r\n    uint256 fundingGoal = 3990 * 1 ether;\r\n    \r\n    uint256 remainingTokens = tokensAsReward;\r\n    uint256 amountRaised = 0;                          // Funds raised in ethers\r\n   \r\n    bool preICOClosed = false;\r\n    bool returnFunds = false;\r\n\r\n    // Time limit for PRE-ICO\r\n    uint public deadline = now + (40320 * 1 minutes);    \r\n    NTRYToken private notaryToken;\r\n    address private recoveryAccount;\r\n    \r\n    event GoalReached(address owner, uint amountRaised);\r\n    event LogFundingReceived(address contributor, uint amount, uint currentTotal);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    // Initialize the contract\r\n    function PreICO(){\r\n        owner = 0x1538EF80213cde339A333Ee420a85c21905b1b2D;\r\n        notaryToken = NTRYToken(0x67cE771AF21FD013FAA48ac04D35Aa1F20F9F7a6);\r\n        beneficiary = 0x1D1739F37a103f0D7a5f5736fEd2E77DE9863450;   \r\n        recoveryAccount = 0x543d99C00686628b677A8b03a4E7A9Ac60023727;  // In case pre-ICO failed, NTRY will be recoverd back to this address\r\n    }\r\n\r\n    /* Geter functions for variables */\r\n    \r\n    function preICOBeneficiaryAddress() constant returns(address){ return beneficiary; }\r\n    function NTRYAvailableForSale() constant returns(uint256){ return tokensAsReward; }\r\n    function NTRYPerEther() constant returns(uint){ return PRICE; }\r\n    function minimumFundingGoal() constant returns(uint256){ return fundingGoal; }\r\n    function remaingNTRY() constant returns(uint256){ return remainingTokens; }\r\n    function RaisedFunds() constant returns(uint256){ return amountRaised; }\r\n    function isPreICOClosed() constant returns(bool){ return preICOClosed; }\r\n\r\n    /* Set price of NTRY corresponding to ether */\r\n    // @param _price Number of NTRY per ether\r\n    function updatePrice(uint _price) onlyOwner {\r\n        PRICE = _price;  \r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Recieve funds and rewards tokens\r\n    function () payable {\r\n        if(preICOClosed || msg.value <= 0){ throw; }       // return if pre-ico is closed or received funds are zero\r\n        uint256 amount = msg.value * PRICE;                // calculates the amount of NTRY\r\n        if (remainingTokens >= amount){\r\n            amount = addBonuses(amount);\r\n            if (notaryToken.transferFrom(owner, msg.sender, amount)){\r\n                amountRaised += msg.value;\r\n                updateRewardLedger(msg.sender,msg.value,amount);\r\n                LogFundingReceived(msg.sender, msg.value, amountRaised);\r\n            }else{ throw; }\r\n        }else{\r\n            throw;\r\n        }  \r\n    }\r\n    \r\n    function updateRewardLedger(address _contributor,uint256 eth,uint256 ntry) {\r\n        if (rewardsLedger[_contributor].contributor == 0){\r\n            rewardsLedger[_contributor] = Contribution({\r\n                amount: eth,\r\n                currentPrice: PRICE,\r\n                NTRY: ntry,\r\n                contributor: _contributor\r\n            });\r\n            contributions.push(rewardsLedger[_contributor]);\r\n        }else{\r\n            rewardsLedger[_contributor].amount += eth;\r\n            rewardsLedger[_contributor].currentPrice = 0;\r\n            rewardsLedger[_contributor].NTRY += ntry;\r\n            contributions.push(Contribution({\r\n                    amount: eth,\r\n                    currentPrice: PRICE,\r\n                    NTRY: ntry,\r\n                    contributor: _contributor\r\n                    })\r\n            );\r\n        }\r\n    }\r\n    \r\n\r\n    /* For the first 1.500.000 NTRY tokens investors will get additional 125% of their investment.\r\n    The second 1.000.000 NTRY tokens investors will get additional 100% of their investment.\r\n    And for last 1.000.000 NTRY tokens investors will get additional 62.5% of their investment. */\r\n    /// @param _amount NTRY tokens inverster get in return of fund\r\n    function addBonuses(uint256 _amount) returns(uint256){\r\n        uint256 reward;\r\n        var (x, y) = (reward,reward);                // define type at compile at time\r\n        if(remainingTokens > 2000000 * 1 ether){\r\n            (x, y) = levelOneBonus(_amount);\r\n             reward += x;\r\n            if(y != 0){\r\n                (x, y) = levelTwoBonus(y);\r\n                reward += x;\r\n                if(y != 0){\r\n                    return reward+levelThreeBonus(y);\r\n                }\r\n            }\r\n            return reward;\r\n        }else if(remainingTokens > 1000000 * 1 ether){\r\n            (x, y) = levelTwoBonus(_amount);\r\n            if(y != 0){\r\n                return x+levelThreeBonus(y);\r\n            }\r\n            return x;\r\n        }else{\r\n            return levelThreeBonus(_amount);\r\n        }\r\n    }\r\n\r\n    /* Add 125% bonus */\r\n    /// @param _amount NTRY tokens inverster have purchased\r\n    function levelOneBonus(uint256 _amount)returns(uint256,uint256){\r\n        uint256 available = remainingTokens - 2000000 * 1 ether;\r\n        if(available >= _amount){\r\n            remainingTokens -= _amount;\r\n            return (_amount * 9/4, 0);\r\n        }else{\r\n            remainingTokens -= available;\r\n            return(available * 9/4, _amount - available);\r\n        }\r\n    }\r\n\r\n    /* Add 100% bonus */\r\n    /// @param _amount NTRY tokens inverster have purchased\r\n    function levelTwoBonus(uint256 _amount)returns(uint256,uint256){\r\n        uint256 available = remainingTokens - 1000000 * 1 ether;\r\n        if(available >= _amount){\r\n            remainingTokens -= _amount;\r\n            return (_amount * 2, 0);\r\n        }else{\r\n            remainingTokens -= available;\r\n            return(available * 2, _amount - available);\r\n        }\r\n    }\r\n\r\n    /* Add 62.5% bonus */\r\n    /// @param _amount NTRY tokens inverster have purchased\r\n    function levelThreeBonus(uint256 _amount)returns(uint256){\r\n        remainingTokens -= _amount;\r\n        return _amount * 13/8;\r\n    } \r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n    \r\n    function checkGoalReached() afterDeadline {\r\n        if(amountRaised >= fundingGoal){\r\n            GoalReached(beneficiary, amountRaised);\r\n            returnFunds = false;\r\n            remainingTokens = 0;\r\n        }else{\r\n            // In case of failing funds are transferred to team members  account; \r\n            // they will try to find resources to finance further development\r\n            remainingTokens = 0; \r\n            returnFunds = true;\r\n        }\r\n\r\n        preICOClosed = true;\r\n    }\r\n\r\n\r\n     // In case of success funds will be transferred to beneficiary otherwise \r\n     // contributors can safely withdraw their funds\r\n    function safeWithdrawal() afterDeadline {\r\n        if (returnFunds) {\r\n            if (rewardsLedger[msg.sender].NTRY > 0) {\r\n                if(notaryToken.takeBackNTRY(msg.sender, recoveryAccount , rewardsLedger[msg.sender].NTRY)){\r\n                    return;\r\n                }\r\n                if (msg.sender.send(rewardsLedger[msg.sender].amount)) {\r\n                    FundTransfer(msg.sender, rewardsLedger[msg.sender].amount, false);\r\n                    delete rewardsLedger[msg.sender];\r\n                } else {\r\n                    notaryToken.takeBackNTRY(recoveryAccount, msg.sender , rewardsLedger[msg.sender].NTRY);    \r\n                }\r\n            }\r\n        }\r\n        if (!returnFunds && beneficiary == msg.sender) {\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                returnFunds = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function mortal() {\r\n        uint256 expire = deadline + (40320 * 1 minutes); \r\n        if (now >= expire && beneficiary == msg.sender){\r\n            beneficiary.transfer(amountRaised);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaingNTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"NTRY\",\"type\":\"uint256\"},{\"name\":\"contributor\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"ntry\",\"type\":\"uint256\"}],\"name\":\"updateRewardLedger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"levelThreeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOBeneficiaryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NTRYAvailableForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"levelOneBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RaisedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"levelTwoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NTRYPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mortal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"PreICO","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75361ce7c2495d4782714d861e629e114ad490b48863a8b61e0b31d685704200"}]}