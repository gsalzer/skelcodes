{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths, borrowed from OpenZeppelin\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is Owned {\r\n    using SafeMath for uint;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total Supply\r\n    // ------------------------------------------------------------------------\r\n    uint256 _totalSupply = 0;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Balances for each account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => uint256) balances;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner of account approves the transfer of an amount to another account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the total token supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the account balance of another account with address _owner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount                // User has balance\r\n            && _amount > 0                                 // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]     // Overflow check\r\n        ) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    // ------------------------------------------------------------------------\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _value);\r\n}\r\n\r\n\r\ncontract DaoCasinoToken is ERC20Token {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token information\r\n    // ------------------------------------------------------------------------\r\n    string public constant symbol = \"BET\";\r\n    string public constant name = \"Dao.Casino\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Do not use `now` here\r\n    uint256 public STARTDATE;\r\n    uint256 public ENDDATE;\r\n\r\n    // Cap USD 25mil @ 296.1470 ETH/USD\r\n    uint256 public CAP;\r\n\r\n    // Cannot have a constant address here - Solidity bug\r\n    // https://github.com/ethereum/solidity/issues/2441\r\n    address public multisig;\r\n\r\n    function DaoCasinoToken(uint256 _start, uint256 _end, uint256 _cap, address _multisig) {\r\n        STARTDATE = _start;\r\n        ENDDATE   = _end;\r\n        CAP       = _cap;\r\n        multisig  = _multisig;\r\n    }\r\n\r\n    // > new Date(\"2017-06-29T13:00:00\").getTime()/1000\r\n    // 1498741200\r\n\r\n    uint256 public totalEthers;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Tokens per ETH\r\n    // Day  1    : 2,000 BET = 1 Ether\r\n    // Days 2–14 : 1,800 BET = 1 Ether\r\n    // Days 15–17: 1,700 BET = 1 Ether\r\n    // Days 18–20: 1,600 BET = 1 Ether\r\n    // Days 21–23: 1,500 BET = 1 Ether\r\n    // Days 24–26: 1,400 BET = 1 Ether\r\n    // Days 27–28: 1,300 BET = 1 Ether\r\n    // ------------------------------------------------------------------------\r\n    function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(now);\r\n    }\r\n\r\n    function buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < STARTDATE) {\r\n            return 0;\r\n        } else if (at < (STARTDATE + 1 days)) {\r\n            return 2000;\r\n        } else if (at < (STARTDATE + 15 days)) {\r\n            return 1800;\r\n        } else if (at < (STARTDATE + 18 days)) {\r\n            return 1700;\r\n        } else if (at < (STARTDATE + 21 days)) {\r\n            return 1600;\r\n        } else if (at < (STARTDATE + 24 days)) {\r\n            return 1500;\r\n        } else if (at < (STARTDATE + 27 days)) {\r\n            return 1400;\r\n        } else if (at <= ENDDATE) {\r\n            return 1300;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Buy tokens from the contract\r\n    // ------------------------------------------------------------------------\r\n    function () payable {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Exchanges can buy on behalf of participant\r\n    // ------------------------------------------------------------------------\r\n    function proxyPayment(address participant) payable {\r\n        // No contributions before the start of the crowdsale\r\n        require(now >= STARTDATE);\r\n        // No contributions after the end of the crowdsale\r\n        require(now <= ENDDATE);\r\n        // No 0 contributions\r\n        require(msg.value > 0);\r\n\r\n        // Add ETH raised to total\r\n        totalEthers = totalEthers.add(msg.value);\r\n        // Cannot exceed cap\r\n        require(totalEthers <= CAP);\r\n\r\n        // What is the BET to ETH rate\r\n        uint256 _buyPrice = buyPrice();\r\n\r\n        // Calculate #BET - this is safe as _buyPrice is known\r\n        // and msg.value is restricted to valid values\r\n        uint tokens = msg.value * _buyPrice;\r\n\r\n        // Check tokens > 0\r\n        require(tokens > 0);\r\n        // Compute tokens for foundation 30%\r\n        // Number of tokens restricted so maths is safe\r\n        uint multisigTokens = tokens * 3 / 7;\r\n\r\n        // Add to total supply\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        _totalSupply = _totalSupply.add(multisigTokens);\r\n\r\n        // Add to balances\r\n        balances[participant] = balances[participant].add(tokens);\r\n        balances[multisig] = balances[multisig].add(multisigTokens);\r\n\r\n        // Log events\r\n        TokensBought(participant, msg.value, totalEthers, tokens,\r\n            multisigTokens, _totalSupply, _buyPrice);\r\n        Transfer(0x0, participant, tokens);\r\n        Transfer(0x0, multisig, multisigTokens);\r\n\r\n        // Move the funds to a safe wallet\r\n        multisig.transfer(msg.value);\r\n    }\r\n    event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \r\n        uint256 newTotalSupply, uint256 buyPrice);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner to add precommitment funding token balance before the crowdsale\r\n    // commences\r\n    // ------------------------------------------------------------------------\r\n    function addPrecommitment(address participant, uint balance) onlyOwner {\r\n        require(now < STARTDATE);\r\n        require(balance > 0);\r\n        balances[participant] = balances[participant].add(balance);\r\n        _totalSupply = _totalSupply.add(balance);\r\n        Transfer(0x0, participant, balance);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account, with a\r\n    // check that the crowdsale is finalised\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transfer\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account, with a check that the crowdsale is\r\n    // finalised\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n        returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transferFrom\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint amount)\r\n      onlyOwner returns (bool success) \r\n    {\r\n        return ERC20Token(tokenAddress).transfer(owner, amount);\r\n    }\r\n}\r\n\r\nlibrary CreatorDaoCasinoToken {\r\n    function create(uint256 _start, uint256 _end, uint256 _cap, address _multisig) returns (DaoCasinoToken)\r\n    { return new DaoCasinoToken(_start, _end, _cap, _multisig); }\r\n\r\n    function version() constant returns (string)\r\n    { return \"v0.6.3\"; }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"DaoCasinoToken\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"CreatorDaoCasinoToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff6ddbeff3eba3ffac8678c8c0def28dd71f96313978ef298e6d539fdf35c9cc"}]}