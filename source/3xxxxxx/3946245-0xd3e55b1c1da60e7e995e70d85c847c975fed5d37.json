{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nBET Buyer\r\n========================\r\n\r\nBuys BET tokens from the DAO.Casino crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// Interface to BET ICO Contract\r\ncontract DaoCasinoToken {\r\n  uint256 public CAP;\r\n  uint256 public totalEthers;\r\n  function proxyPayment(address participant) payable;\r\n  function transfer(address _to, uint _amount) returns (bool success);\r\n}\r\n\r\ncontract BetBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Store whether or not each account would have made it into the crowdsale.\r\n  mapping (address => bool) public checked_in;\r\n  // Bounty for executing buy.\r\n  uint256 public bounty;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record the time the contract bought the tokens.\r\n  uint256 public time_bought;\r\n  // Emergency kill switch in case a critical bug is found.\r\n  bool public kill_switch;\r\n  \r\n  // Ratio of BET tokens received to ETH contributed\r\n  uint256 bet_per_eth = 2000;\r\n  \r\n  // The BET Token address and sale address are the same.\r\n  DaoCasinoToken public token = DaoCasinoToken(0x2B09b52d42DfB4e0cBA43F607dD272ea3FE1FB9F);\r\n  // The developer address.\r\n  address developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;\r\n  \r\n  // Allows the developer to shut down everything except withdrawals in emergencies.\r\n  function activate_kill_switch() {\r\n    // Only allow the developer to activate the kill switch.\r\n    if (msg.sender != developer) throw;\r\n    // Irreversibly activate the kill switch.\r\n    kill_switch = true;\r\n  }\r\n  \r\n  // Withdraws all ETH deposited or BET purchased by the sender.\r\n  function withdraw(){\r\n    // If called before the ICO, cancel caller's participation in the sale.\r\n    if (!bought_tokens) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint256 eth_amount = balances[msg.sender];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[msg.sender] = 0;\r\n      // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n      msg.sender.transfer(eth_amount);\r\n    }\r\n    // Withdraw the sender's tokens if the contract has already purchased them.\r\n    else {\r\n      // Store the user's BET balance in a temporary variable (1 ETHWei -> 2000 BETWei).\r\n      uint256 bet_amount = balances[msg.sender] * bet_per_eth;\r\n      // Update the user's balance prior to sending BET to prevent recursive call.\r\n      balances[msg.sender] = 0;\r\n      // No fee for withdrawing if the user would have made it into the crowdsale alone.\r\n      uint256 fee = 0;\r\n      // 1% fee if the user didn't check in during the crowdsale.\r\n      if (!checked_in[msg.sender]) {\r\n        fee = bet_amount / 100;\r\n        // Send any non-zero fees to developer.\r\n        if(!token.transfer(developer, fee)) throw;\r\n      }\r\n      // Send the user their tokens.  Throws if the crowdsale isn't over.\r\n      if(!token.transfer(msg.sender, bet_amount - fee)) throw;\r\n    }\r\n  }\r\n  \r\n  // Allow developer to add ETH to the buy execution bounty.\r\n  function add_to_bounty() payable {\r\n    // Only allow the developer to contribute to the buy execution bounty.\r\n    if (msg.sender != developer) throw;\r\n    // Disallow adding to bounty if kill switch is active.\r\n    if (kill_switch) throw;\r\n    // Disallow adding to the bounty if contract has already bought the tokens.\r\n    if (bought_tokens) throw;\r\n    // Update bounty to include received amount.\r\n    bounty += msg.value;\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n  function claim_bounty(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    // Disallow buying into the crowdsale if kill switch is active.\r\n    if (kill_switch) throw;\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the time the contract bought the tokens.\r\n    time_bought = now;\r\n    // Transfer all the funds (less the bounty) to the BET crowdsale contract\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    token.proxyPayment.value(this.balance - bounty)(address(this));\r\n    // Send the caller their bounty for buying tokens for the contract.\r\n    msg.sender.transfer(bounty);\r\n  }\r\n  \r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Treat near-zero ETH transactions as check ins and withdrawal requests.\r\n    if (msg.value <= 1 finney) {\r\n      // Check in during the crowdsale.\r\n      if (bought_tokens) {\r\n        // Only allow checking in before the crowdsale has reached the cap.\r\n        if (token.totalEthers() >= token.CAP()) throw;\r\n        // Mark user as checked in, meaning they would have been able to enter alone.\r\n        checked_in[msg.sender] = true;\r\n      }\r\n      // Withdraw funds if the crowdsale hasn't begun yet or is already over.\r\n      else {\r\n        withdraw();\r\n      }\r\n    }\r\n    // Deposit the user's funds for use in purchasing tokens.\r\n    else {\r\n      // Disallow deposits if kill switch is active.\r\n      if (kill_switch) throw;\r\n      // Only allow deposits if the contract hasn't already purchased the tokens.\r\n      if (bought_tokens) throw;\r\n      // Update records of deposited ETH to include the received amount.\r\n      balances[msg.sender] += msg.value;\r\n    }\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Delegate to the helper function.\r\n    default_helper();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim_bounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"checked_in\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"default_helper\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time_bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"BetBuyer","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://442877cf8d5ad1df9e86230bfbac679d6a83defae3aaeb751c07bb3db01f2e9c"}]}