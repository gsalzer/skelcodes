{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract Consents {\r\n\r\n    enum ActionType { REVOKE, CONSENT, NONE }\r\n\r\n    struct Action {\r\n        ActionType actionType;\r\n        string inputDate;\r\n        string endDate;\r\n    }\r\n\r\n    mapping (address => Action[]) consentHistoryByUser;\r\n\r\n    function giveConsent(string inputDate, string endDate){\r\n        address userId = msg.sender;\r\n        consentHistoryByUser[userId].push(Action(ActionType.CONSENT, inputDate, endDate));\r\n    }\r\n\r\n    function revokeConsent(string inputDate){\r\n        address userId = msg.sender;\r\n        consentHistoryByUser[userId].push(Action(ActionType.REVOKE, inputDate, \"\"));\r\n    }\r\n\r\n    function getLastAction(address userId) returns (ActionType, string, string) {\r\n        Action[] memory history = consentHistoryByUser[userId];\r\n        if (history.length < 1) {\r\n            return (ActionType.NONE, \"\", \"\");\r\n        }\r\n        Action memory lastAction = history[history.length - 1];\r\n        return (lastAction.actionType, lastAction.inputDate, lastAction.endDate);\r\n    }\r\n\r\n    function getActionHistorySize() returns (uint) {\r\n        address userId = msg.sender;\r\n        return consentHistoryByUser[userId].length;\r\n    }\r\n\r\n    function getActionHistoryItem(uint index) returns (ActionType, string, string) {\r\n        address userId = msg.sender;\r\n        Action[] memory history = consentHistoryByUser[userId];\r\n        Action memory action = history[index];\r\n        return (action.actionType, action.inputDate, action.endDate);\r\n    }\r\n\r\n    function strActionType(ActionType actionType) internal constant returns (string) {\r\n        if (actionType == ActionType.REVOKE) {\r\n            return \"REVOCATION\";\r\n        }\r\n        else if (actionType == ActionType.CONSENT) {\r\n            return \"ACTIVATION\";\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    function strConcatAction(string accumulator, Action action, bool firstItem) internal constant returns (string) {\r\n\r\n        string memory str_separator = \", \";\r\n        string memory str_link = \" \";\r\n\r\n        bytes memory bytes_separator = bytes(str_separator);\r\n        bytes memory bytes_accumulator = bytes(accumulator);\r\n        bytes memory bytes_date = bytes(action.inputDate);\r\n        bytes memory bytes_link = bytes(str_link);\r\n        bytes memory bytes_action = bytes(strActionType(action.actionType));\r\n\r\n        uint str_length = 0;\r\n        str_length += bytes_accumulator.length;\r\n        if (!firstItem) {\r\n            str_length += bytes_separator.length;\r\n        }\r\n        str_length += bytes_date.length;\r\n        str_length += bytes_link.length;\r\n        str_length += bytes_action.length;\r\n\r\n        string memory result = new string(str_length);\r\n        bytes memory bytes_result = bytes(result);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < bytes_accumulator.length; i++) bytes_result[k++] = bytes_accumulator[i];\r\n        if (!firstItem) {\r\n            for (i = 0; i < bytes_separator.length; i++) bytes_result[k++] = bytes_separator[i];\r\n        }\r\n        for (i = 0; i < bytes_date.length; i++) bytes_result[k++] = bytes_date[i];\r\n        for (i = 0; i < bytes_link.length; i++) bytes_result[k++] = bytes_link[i];\r\n        for (i = 0; i < bytes_action.length; i++) bytes_result[k++] = bytes_action[i];\r\n        return string(bytes_result);\r\n\r\n    }\r\n\r\n    function Restitution_Historique_Transactions(address userId) public constant returns (string) {\r\n        Action[] memory history = consentHistoryByUser[userId];\r\n        string memory result = \"\";\r\n        if (history.length > 0) {\r\n            result = strConcatAction(result, history[0], true);\r\n            for (uint i = 1; i < history.length; i++) {\r\n                result = strConcatAction(result, history[i], false);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"address\"}],\"name\":\"Restitution_Historique_Transactions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"address\"}],\"name\":\"getLastAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"}],\"name\":\"giveConsent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getActionHistorySize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getActionHistoryItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputDate\",\"type\":\"string\"}],\"name\":\"revokeConsent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"Consents","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1cb71cf9cf017f87ef9e28dd46ee75b6921cd54fc4c1571c9af522d68bbe2a39"}]}