{"status":"1","message":"OK","result":[{"SourceCode":"//A BurnableOpenPaymet is instantiated with a specified payer and a commitThreshold.\r\n//The recipient not set when the contract is instantiated.\r\n\r\n//The constructor is payable, so the contract can be instantiated with initial funds.\r\n//Anyone can contribute to the payment at any time (the () function is payable).\r\n\r\n//All behavior of the contract is directed by the payer, but\r\n//the payer can never directly recover the payment unless he becomes the recipient.\r\n\r\n//Anyone can become the recipient by contributing the commitThreshold.\r\n//The recipient cannot change once it's been set.\r\n\r\n//The payer can at any time choose to burn or release to the recipient any amount of funds.\r\n\r\npragma solidity ^0.4.1;\r\n\r\ncontract BurnableOpenPayment {\r\n    address public payer;\r\n    address public recipient;\r\n    address public burnAddress = 0xdead;\r\n    string public payerString;\r\n    string public recipientString;\r\n    uint public commitThreshold;\r\n    \r\n    modifier onlyPayer() {\r\n        if (msg.sender != payer) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier onlyRecipient() {\r\n        if (msg.sender != recipient) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWithRecipient() {\r\n        if (recipient == address(0x0)) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWithoutRecipient() {\r\n        if (recipient != address(0x0)) throw;\r\n        _;\r\n    }\r\n    \r\n    function () payable {}\r\n    \r\n    function BurnableOpenPayment(address _payer, uint _commitThreshold)\r\n    public\r\n    payable {\r\n        payer = _payer;\r\n        commitThreshold = _commitThreshold;\r\n    }\r\n    \r\n    function getPayer()\r\n    public returns (address) { return payer; }\r\n    \r\n    function getRecipient()\r\n    public returns (address) { return recipient; }\r\n    \r\n    function getCommitThreshold()\r\n    public returns (uint) { return commitThreshold; }\r\n    \r\n    function getPayerString()\r\n    public returns (string) { return payerString; }\r\n    \r\n    function getRecipientString()\r\n    public returns (string) { return recipientString; }\r\n    \r\n    function commit()\r\n    public\r\n    onlyWithoutRecipient()\r\n    payable\r\n    {\r\n        if (msg.value < commitThreshold) throw;\r\n        recipient = msg.sender;\r\n    }\r\n    \r\n    function burn(uint amount)\r\n    public\r\n    onlyPayer()\r\n    onlyWithRecipient()\r\n    returns (bool)\r\n    {\r\n        return burnAddress.send(amount);\r\n    }\r\n    \r\n    function release(uint amount)\r\n    public\r\n    onlyPayer()\r\n    onlyWithRecipient()\r\n    returns (bool)\r\n    {\r\n        return recipient.send(amount);\r\n    }\r\n    \r\n    function setPayerString(string _string)\r\n    public\r\n    onlyPayer()\r\n    {\r\n        payerString = _string;\r\n    }\r\n    \r\n    function setRecipientString(string _string)\r\n    public\r\n    onlyRecipient()\r\n    {\r\n        recipientString = _string;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"payerString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCommitThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPayerString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"setPayerString\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipientString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"setRecipientString\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRecipientString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_commitThreshold\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"BurnableOpenPayment","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000071badd37739ba852e7ef2ccc15224c0823134570000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://316690c5c4086137fb15210509fa1e64a5fdeb5e9ff8e62c22e9ccb4817fce6d"}]}