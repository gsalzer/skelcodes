{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nBancor Buyer\r\n========================\r\n\r\nBuys Bancor tokens from the crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint _value) returns (bool success);\r\n}\r\n\r\ncontract BancorBuyer {\r\n  // Store the amount of ETH deposited or BNT owned by each account.\r\n  mapping (address => uint) public balances;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record the time the contract bought the tokens.\r\n  uint public time_bought;\r\n  \r\n  // The Bancor Token Sale address.\r\n  address sale = 0xBbc79794599b19274850492394004087cBf89710;\r\n  // Bancor Smart Token Contract address.\r\n  address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C;\r\n  // The developer address.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n  \r\n  // Withdraws all ETH deposited by the sender.\r\n  // Called to cancel a user's participation in the sale.\r\n  function withdraw(){\r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint amount = balances[msg.sender];\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n    msg.sender.transfer(amount);\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale, callable by anyone.\r\n  function buy(){\r\n    // Transfer all funds to the Bancor crowdsale contract to buy tokens.\r\n    // Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    sale.transfer(this.balance);\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the time the contract bought the tokens.\r\n    time_bought = now;\r\n  }\r\n  \r\n  function () payable {\r\n    // Only allow deposits if the contract hasn't already purchased the tokens.\r\n    if (!bought_tokens) {\r\n      // Update records of deposited ETH to include the received amount.\r\n      balances[msg.sender] += msg.value;\r\n    }\r\n    // Withdraw the sender's tokens if the contract has already purchased them.\r\n    else {\r\n      // Store the user's BNT balance in a temporary variable (1 ETHWei -> 100 BNTWei).\r\n      uint amount = balances[msg.sender] * 100;\r\n      // Update the user's balance prior to sending BNT to prevent recursive call.\r\n      balances[msg.sender] = 0;\r\n      // No fee for withdrawing during the crowdsale.\r\n      uint fee = 0;\r\n      // 1% fee for withdrawing after the crowdsale has ended.\r\n      if (now > time_bought + 1 hours) {\r\n        fee = amount / 100;\r\n      }\r\n      // Transfer the tokens to the sender and the developer.\r\n      ERC20(token).transfer(msg.sender, amount - fee);\r\n      ERC20(token).transfer(developer, fee);\r\n      // Refund any ETH sent after the contract has already purchased tokens.\r\n      msg.sender.transfer(msg.value);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time_bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"BancorBuyer","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4feffbb268e027989312b38028920b6800fe6033c4c005164538c011447eeadd"}]}