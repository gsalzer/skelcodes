{"status":"1","message":"OK","result":[{"SourceCode":"//A BurnableOpenPaymet is instantiated with a specified payer and a commitThreshold.\r\n//The recipient not set when the contract is instantiated.\r\n\r\n//All behavior of the contract is directed by the payer, but\r\n//the payer can never directly recover the payment unless he becomes the recipient.\r\n\r\n//Anyone can become the recipient by contributing the commitThreshold.\r\n//The recipient cannot change once it's been set.\r\n\r\n//The payer can at any time choose to burn or release to the recipient any amount of funds.\r\n\r\npragma solidity ^0.4.1;\r\n\r\ncontract BurnableOpenPayment {\r\n    address public payer;\r\n    address public recipient;\r\n    address public burnAddress = 0xdead;\r\n    uint public commitThreshold;\r\n    \r\n    modifier onlyPayer() {\r\n        if (msg.sender != payer) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWithRecipient() {\r\n        if (recipient == address(0x0)) throw;\r\n        _;\r\n    }\r\n    \r\n    //Only allowing the payer to fund the contract ensures that the contract's\r\n    //balance is at most as difficult to predict or interpret as the payer.\r\n    //If the payer is another smart contract or script-based, balance changes\r\n    //could reliably indicate certain intentions, judgements or states of the payer.\r\n    function () payable onlyPayer { }\r\n    \r\n    function BurnableOpenPayment(address _payer, uint _commitThreshold) payable {\r\n        payer = _payer;\r\n        commitThreshold = _commitThreshold;\r\n    }\r\n    \r\n    function getPayer() returns (address) {\r\n        return payer;\r\n    }\r\n    \r\n    function getRecipient() returns (address) {\r\n        return recipient;\r\n    }\r\n    \r\n    function getCommitThreshold() returns (uint) {\r\n        return commitThreshold;\r\n    }\r\n    \r\n    function commit()\r\n    payable\r\n    {\r\n        if (recipient != address(0x0)) throw;\r\n        if (msg.value < commitThreshold) throw;\r\n        recipient = msg.sender;\r\n    }\r\n    \r\n    function burn(uint amount)\r\n    onlyPayer()\r\n    onlyWithRecipient()\r\n    returns (bool)\r\n    {\r\n        return burnAddress.send(amount);\r\n    }\r\n    \r\n    function release(uint amount)\r\n    onlyPayer()\r\n    onlyWithRecipient()\r\n    returns (bool)\r\n    {\r\n        return recipient.send(amount);\r\n    }\r\n}\r\n\r\ncontract BurnableOpenPaymentFactory {\r\n    function newBurnableOpenPayment(address payer, uint commitThreshold) payable returns (address) {\r\n        //pass along any ether to the constructor\r\n        return (new BurnableOpenPayment).value(msg.value)(payer, commitThreshold);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"},{\"name\":\"commitThreshold\",\"type\":\"uint256\"}],\"name\":\"newBurnableOpenPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"type\":\"function\"}]","ContractName":"BurnableOpenPaymentFactory","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f014848d349be66ea1b0375b463aa31728b0e8707662afb71f4250eca2ab7399"}]}