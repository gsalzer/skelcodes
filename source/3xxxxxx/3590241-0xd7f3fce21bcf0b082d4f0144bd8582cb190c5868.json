{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\n */\r\npragma solidity ^0.4.6;\r\n\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n      uint c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n      uint c = a + b;\r\n      assert(c>=a && c>=b);\r\n      return c;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n      if (!assertion) throw;\r\n    }\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    /**\r\n     * Reviewed:\r\n     * - Interger overflow = OK, checked\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      //Default assumes totalSupply can't be over max (2^256 - 1).\r\n      //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n      //Replace the if with this one instead.\r\n      if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\n/**\r\n *  AntiqueCoin Main Contract\r\n *\r\n */\r\ncontract AntiqueCoin is StandardToken, SafeMath {\r\n\r\n    string public name = \"AntiqueCoin\";\r\n    string public symbol = \"1XNC\";\r\n    uint public decimals = 18;\r\n    address public founder = 0x0;\r\n    uint private counter = 0;\r\n\r\n    mapping (bytes32 => address) public antiques;\r\n\r\n\r\n    event RegistrationAntique(bytes32 hash);\r\n    event TransferAntique(bytes32 filehash, address from, address to);\r\n\r\n    // Initial founder address (set in constructor)\r\n\r\n    function AntiqueCoin(address _founder,  uint256 _totalSupply) {\r\n      founder = _founder;\r\n      balances[_founder] = _totalSupply;\r\n      totalSupply = _totalSupply;\r\n    }\r\n\r\n    function registerAntique(bytes32 _fileHash) returns (bool success){\r\n      if (msg.sender != founder) throw;\r\n    //  if (antiques[_fileHash] != 0x0) throw;\r\n      antiques[_fileHash] = msg.sender;\r\n      RegistrationAntique(_fileHash);\r\n      return true;\r\n    }\r\n\r\n\r\n    function transferAntique(address _to, bytes32 _fileHash) returns (bool success){\r\n      if (antiques[_fileHash] != msg.sender) throw;\r\n      antiques[_fileHash] = _to;\r\n      TransferAntique(_fileHash, msg.sender, _to);\r\n      return true;\r\n    }\r\n\r\n\r\n    function changeFounder(address _newFounder) returns (bool success){\r\n      if (msg.sender!=founder) throw;\r\n      balances[_newFounder] = safeAdd(balances[_newFounder], balances[founder]);\r\n      balances[founder] = 0;\r\n      founder = _newFounder;\r\n      return true;\r\n    }\r\n\r\n    function() {\r\n      throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fileHash\",\"type\":\"bytes32\"}],\"name\":\"registerAntique\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"antiques\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_fileHash\",\"type\":\"bytes32\"}],\"name\":\"transferAntique\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RegistrationAntique\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"filehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferAntique\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AntiqueCoin","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f36ca4a1da98666052fb5b44cc185a129e5cb80400000000000000000000000000000000000000000052b7d2dcc80cd2e4000000","Library":"","SwarmSource":"bzzr://78e2fcd67ad252e2be53f552dba8d0233bf9f7d8d0128f793967a4fffe640f79"}]}