{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\ncontract StandardToken {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard Token Interface for TokenFund.\r\n/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\r\ncontract TokenFund is StandardToken {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    address public emissionContractAddress = 0x0;\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"TheToken Fund\";\r\n    string constant public symbol = \"TKN\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n    address public owner = 0x0;\r\n    bool public emissionEnabled = true;\r\n    bool transfersEnabled = true;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier isCrowdfundingContract() {\r\n        // Only emission address is allowed to proceed.\r\n        if (msg.sender != emissionContractAddress) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // Only owner is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n     /// @dev TokenFund emission function.\r\n    /// @param _for Address of receiver.\r\n    /// @param tokenCount Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        isCrowdfundingContract\r\n        returns (bool)\r\n    {\r\n        if (emissionEnabled == false) {\r\n            throw;\r\n        }\r\n\r\n        balances[_for] += tokenCount;\r\n        totalSupply += tokenCount;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Withdraws tokens for msg.sender.\r\n    /// @param tokenCount Number of tokens to withdraw.\r\n    function withdrawTokens(uint tokenCount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint balance = balances[msg.sender];\r\n        if (balance < tokenCount) {\r\n            return false;\r\n        }\r\n        balances[msg.sender] -= tokenCount;\r\n        totalSupply -= tokenCount;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to change address that is allowed to do emission.\r\n    /// @param newAddress Address of new emission contract.\r\n    function changeEmissionContractAddress(address newAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        emissionContractAddress = newAddress;\r\n    }\r\n\r\n    /// @dev Function that enables/disables transfers of token.\r\n    /// @param value True/False\r\n    function enableTransfers(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transfersEnabled = value;\r\n    }\r\n\r\n    /// @dev Function that enables/disables token emission.\r\n    /// @param value True/False\r\n    function enableEmission(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emissionEnabled = value;\r\n    }\r\n\r\n    /*\r\n     * Overriding ERC20 standard token functions to support transfer lock\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        returns (bool success)\r\n    {\r\n        if (transfersEnabled == true) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        returns (bool success)\r\n    {\r\n        if (transfersEnabled == true) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /// @dev Contract constructor function sets initial token balances.\r\n    /// @param _owner Address of the owner of TokenFund.\r\n    function TokenFund(address _owner)\r\n    {\r\n        totalSupply = 0;\r\n        owner = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Fund is owned {\r\n\r\n\t/*\r\n     * External contracts\r\n     */\r\n    TokenFund public tokenFund;\r\n\r\n\t/*\r\n     * Storage\r\n     */\r\n    address public ethAddress;\r\n    address public multisig;\r\n    address public supportAddress;\r\n    uint public tokenPrice = 1 finney; // 0.001 ETH\r\n\r\n    mapping (address => address) public referrals;\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n\t/// @dev Withdraws tokens for msg.sender.\r\n    /// @param tokenCount Number of tokens to withdraw.\r\n    function withdrawTokens(uint tokenCount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return tokenFund.withdrawTokens(tokenCount);\r\n    }\r\n\r\n    function issueTokens(address _for, uint tokenCount)\r\n    \tprivate\r\n    \treturns (bool)\r\n    {\r\n    \tif (tokenCount == 0) {\r\n        return false;\r\n      }\r\n\r\n      var percent = tokenCount / 100;\r\n\r\n      // 1% goes to the fund managers\r\n      if (!tokenFund.issueTokens(multisig, percent)) {\r\n        // Tokens could not be issued.\r\n        throw;\r\n      }\r\n\r\n\t\t  // 1% goes to the support team\r\n      if (!tokenFund.issueTokens(supportAddress, percent)) {\r\n        // Tokens could not be issued.\r\n        throw;\r\n      }\r\n\r\n      if (referrals[_for] != 0) {\r\n      \t// 3% goes to the referral\r\n      \tif (!tokenFund.issueTokens(referrals[_for], 3 * percent)) {\r\n          // Tokens could not be issued.\r\n          throw;\r\n        }\r\n      } else {\r\n      \t// if there is no referral, 3% goes to the fund managers\r\n      \tif (!tokenFund.issueTokens(multisig, 3 * percent)) {\r\n          // Tokens could not be issued.\r\n          throw;\r\n        }\r\n      }\r\n\r\n      if (!tokenFund.issueTokens(_for, tokenCount - 5 * percent)) {\r\n        // Tokens could not be issued.\r\n        throw;\r\n\t    }\r\n\r\n\t    return true;\r\n    }\r\n\r\n    /// @dev Issues tokens for users who made investment.\r\n    /// @param beneficiary Address the tokens will be issued to.\r\n    /// @param valueInWei investment in wei\r\n    function addInvestment(address beneficiary, uint valueInWei)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint tokenCount = calculateTokens(valueInWei);\r\n    \treturn issueTokens(beneficiary, tokenCount);\r\n    }\r\n\r\n    /// @dev Issues tokens for users who made direct ETH payment.\r\n    function fund()\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        // Token count is rounded down. Sent ETH should be multiples of baseTokenPrice.\r\n        address beneficiary = msg.sender;\r\n        uint tokenCount = calculateTokens(msg.value);\r\n        uint roundedInvestment = tokenCount * tokenPrice / 100000000;\r\n\r\n        // Send change back to user.\r\n        if (msg.value > roundedInvestment && !beneficiary.send(msg.value - roundedInvestment)) {\r\n          throw;\r\n        }\r\n        // Send money to the fund ethereum address\r\n        if (!ethAddress.send(roundedInvestment)) {\r\n          throw;\r\n        }\r\n        return issueTokens(beneficiary, tokenCount);\r\n    }\r\n\r\n    function calculateTokens(uint valueInWei)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return valueInWei * 100000000 / tokenPrice;\r\n    }\r\n\r\n    function estimateTokens(uint valueInWei)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return valueInWei * 95000000 / tokenPrice;\r\n    }\r\n\r\n    function setReferral(address client, address referral)\r\n        public\r\n        onlyOwner\r\n    {\r\n        referrals[client] = referral;\r\n    }\r\n\r\n    function getReferral(address client)\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return referrals[client];\r\n    }\r\n\r\n    /// @dev Sets token price (TKN/ETH) in Wei.\r\n    /// @param valueInWei New value.\r\n    function setTokenPrice(uint valueInWei)\r\n        public\r\n        onlyOwner\r\n    {\r\n        tokenPrice = valueInWei;\r\n    }\r\n\r\n    function getTokenPrice()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return tokenPrice;\r\n    }\r\n\r\n    function changeMultisig(address newMultisig)\r\n        onlyOwner\r\n    {\r\n        multisig = newMultisig;\r\n    }\r\n\r\n    function changeEthAddress(address newEthAddress)\r\n        onlyOwner\r\n    {\r\n        ethAddress = newEthAddress;\r\n    }\r\n\r\n    /// @dev Contract constructor function\r\n    /// @param _ethAddress Ethereum address of the TokenFund.\r\n    /// @param _multisig Address of the owner of TokenFund.\r\n    /// @param _supportAddress Address of the developers team.\r\n    /// @param _tokenAddress Address of the token contract.\r\n    function Fund(address _owner, address _ethAddress, address _multisig, address _supportAddress, address _tokenAddress)\r\n    {\r\n        owner = _owner;\r\n        ethAddress = _ethAddress;\r\n        multisig = _multisig;\r\n        supportAddress = _supportAddress;\r\n        tokenFund = TokenFund(_tokenAddress);\r\n    }\r\n\r\n    /// @dev Fallback function. Calls fund() function to create tokens.\r\n    function () payable {\r\n        fund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supportAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"addInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMultisig\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthAddress\",\"type\":\"address\"}],\"name\":\"changeEthAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"estimateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ethAddress\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_supportAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Fund","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008cfaa95cad5dddeddcebb350c50757c8fa26711f000000000000000000000000ba3b826539161a4c3bf681752021847c25a2b46a0000000000000000000000006e8ec8a086b485940b435d18303b59b6c35048c10000000000000000000000009e8fab94cada52a584ec6f10042c3bb165e79114000000000000000000000000739c71235a9669f6b900490ab1c95310c19abc71","Library":"","SwarmSource":"bzzr://100b390a5f4bba87d26ea44dabbebb7ea3ed70f657f8f962f92a089a714296be"}]}