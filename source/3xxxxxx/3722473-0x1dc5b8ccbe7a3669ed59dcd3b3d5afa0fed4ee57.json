{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n /* Receiver must implement this function to receive tokens\r\n *  otherwise token transaction will fail\r\n */\r\n \r\n contract ContractReceiver {\r\n    function tokenFallback(address _from, uint256 _value, bytes _data){\r\n      _from = _from;\r\n      _value = _value;\r\n      _data = _data;\r\n      // Incoming transaction code here\r\n    }\r\n}\r\n \r\n /* New ERC23 contract interface */\r\n\r\ncontract ERC23 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n\r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint256 value) returns (bool ok);\r\n  function transfer(address to, uint256 value, bytes data) returns (bool ok);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool ok);\r\n  function approve(address spender, uint256 value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n /**\r\n * ERC23 token by Dexaran\r\n *\r\n * https://github.com/Dexaran/ERC23-tokens\r\n */\r\n \r\ncontract ERC23Token is ERC23 {\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  //function that is called when a user or another contract wants to transfer funds\r\n  function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\r\n  \r\n    //filtering if the target is a contract with bytecode inside it\r\n    if(isContract(_to)) {\r\n        transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        transferToAddress(_to, _value, _data);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        transferToAddress(_to, _value, empty);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n    Transfer(msg.sender, _to, _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      _addr = _addr;\r\n      uint256 length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    \r\n    if(_value > _allowance) {\r\n        throw;\r\n    }\r\n\r\n    balances[_to] += _value;\r\n    balances[_from] -= _value;\r\n    allowed[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract ABCToken is ERC23Token {\r\n    // Constructor\r\n    function ABCToken(\r\n            string _name,\r\n            string _symbol,\r\n            uint8 _decimals,\r\n            uint256 _totalSupply,\r\n            address _initialTokensHolder) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[_initialTokensHolder] = _totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_initialTokensHolder\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ABCToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000adb53acfa41aee120000000000000000000000000000008e090955f93376bdd758464f80920f8567d0152a0000000000000000000000000000000000000000000000000000000000000008416c70686162697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://31ab05cf84f0c2da9981a1e10baadc3bbf62105c99d7acef8c1c5df4719c7553"}]}