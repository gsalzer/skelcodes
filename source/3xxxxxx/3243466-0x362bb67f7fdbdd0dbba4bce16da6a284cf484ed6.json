{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\tCrowdsale for Edgeless Tokens.\r\n*\tRaised Ether will be stored safely at a multisignature wallet and returned to the ICO in case the funding goal is not reached,\r\n*   allowing the investors to withdraw their funds.\r\n*\tAuthor: Julia Altenried\r\n**/\r\n\r\npragma solidity ^0.4.6;\r\n\r\ncontract token {\r\n\tfunction transferFrom(address sender, address receiver, uint amount) returns(bool success){}\r\n\tfunction burn() {}\r\n}\r\n\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\n\r\ncontract Crowdsale is SafeMath {\r\n    /* tokens will be transfered from this address */\r\n\taddress public beneficiary = 0x003230bbe64eccd66f62913679c8966cf9f41166;\r\n\t/* if the funding goal is not reached, investors may withdraw their funds */\r\n\tuint public fundingGoal = 50000000;\r\n\t/* the maximum amount of tokens to be sold */\r\n\tuint public maxGoal = 440000000;\r\n\t/* how much has been raised by crowdale (in ETH) */\r\n\tuint public amountRaised;\r\n\t/* the start date of the crowdsale */\r\n\tuint public start = 1488294000;\r\n\t/* the number of tokens already sold */\r\n\tuint public tokensSold;\r\n\t/* there are different prices in different time intervals */\r\n\tuint[4] public deadlines = [1488297600, 1488902400, 1489507200,1490112000];\r\n\tuint[4] public prices = [833333333333333, 909090909090909,952380952380952, 1000000000000000];\r\n\t/* the address of the token contract */\r\n\ttoken public tokenReward;\r\n\t/* the balances (in ETH) of all investors */\r\n\tmapping(address => uint256) public balanceOf;\r\n\t/* indicated if the funding goal has been reached. */\r\n\tbool fundingGoalReached = false;\r\n\t/* indicates if the crowdsale has been closed already */\r\n\tbool crowdsaleClosed = false;\r\n\t/* the multisignature wallet on which the funds will be stored */\r\n\taddress msWallet = 0x91efffb9c6cd3a66474688d0a48aa6ecfe515aa5;\r\n\t/* notifying transfers and the success of the crowdsale*/\r\n\tevent GoalReached(address beneficiary, uint amountRaised);\r\n\tevent FundTransfer(address backer, uint amount, bool isContribution, uint amountRaised);\r\n\r\n\r\n\r\n    /*  initialization, set the token address */\r\n    function Crowdsale( ) {\r\n        tokenReward = token(0x08711d3b02c8758f2fb3ab4e80228418a7f8e39c);\r\n    }\r\n\r\n    /* invest by sending ether to the contract. */\r\n    function () payable{\r\n\t\tif(msg.sender != msWallet) //do not trigger investment if the multisig wallet is returning the funds\r\n        \tinvest(msg.sender);\r\n    }\r\n\r\n    /* make an investment\r\n    *  only callable if the crowdsale started and hasn't been closed already and the maxGoal wasn't reached yet.\r\n    *  the current token price is looked up and the corresponding number of tokens is transfered to the receiver.\r\n    *  the sent value is directly forwarded to a safe multisig wallet.\r\n    *  this method allows to purchase tokens in behalf of another address.*/\r\n    function invest(address receiver) payable{\r\n    \tuint amount = msg.value;\r\n    \tuint price = getPrice();\r\n    \tif(price > amount) throw;\r\n\t\tuint numTokens = amount / price;\r\n\t\tif (crowdsaleClosed||now<start||safeAdd(tokensSold,numTokens)>maxGoal) throw;\r\n\t\tif(!msWallet.send(amount)) throw;\r\n\t\tbalanceOf[receiver] = safeAdd(balanceOf[receiver],amount);\r\n\t\tamountRaised = safeAdd(amountRaised, amount);\r\n\t\ttokensSold+=numTokens;\r\n\t\tif(!tokenReward.transferFrom(beneficiary, receiver, numTokens)) throw;\r\n        FundTransfer(receiver, amount, true, amountRaised);\r\n    }\r\n\r\n    /* looks up the current token price */\r\n    function getPrice() constant returns (uint256 price){\r\n        for(var i = 0; i < deadlines.length; i++)\r\n            if(now<deadlines[i])\r\n                return prices[i];\r\n        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadlines[deadlines.length-1]) _; }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline {\r\n        if (tokensSold >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            tokenReward.burn(); //burn remaining tokens but 60 000 000\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    /* allows the funders to withdraw their funds if the goal has not been reached.\r\n\t*  only works after funds have been returned from the multisig wallet. */\r\n\tfunction safeWithdrawal() afterDeadline {\r\n\t\tuint amount = balanceOf[msg.sender];\r\n\t\tif(address(this).balance >= amount){\r\n\t\t\tbalanceOf[msg.sender] = 0;\r\n\t\t\tif (amount > 0) {\r\n\t\t\t\tif (msg.sender.send(amount)) {\r\n\t\t\t\t\tFundTransfer(msg.sender, amount, false, amountRaised);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbalanceOf[msg.sender] = amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84e1616b31f2ac80da1d59e95332cc556205c5e74b8c83e64d5428ed1555b24c"}]}