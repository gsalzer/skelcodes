{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * The Edgeless token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n * Additionally tokens can be locked for a defined time interval by token holders.\r\n * The owner's share of tokens is locked for the first 360 days and all tokens not\r\n * being sold during the crowdsale but 60.000.000 (owner's share + bounty program) are burned.\r\n * Author: Julia Altenried\r\n * */\r\n\r\npragma solidity ^0.4.6;\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\ncontract EdgelessToken is SafeMath {\r\n    /* Public variables of the token */\r\n    string public standard = 'ERC20';\r\n    string public name = 'Edgeless';\r\n    string public symbol = 'EDG';\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    uint256 public currentInterval = 1;\r\n    uint256 public intervalLength = 30 days;\r\n    address public owner;\r\n    /* from this time on tokens may be transfered (after ICO)*/\r\n    uint256 public startTime = 1490112000;\r\n    /* tells if tokens have been burned already */\r\n    bool burned;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* Defines how many tokens of which addresses are locked in which interval*/\r\n    mapping(address => mapping(uint256=>uint256)) public locked;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Lock(address indexed owner, uint256 interval, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract,\r\n    *  locks the owner's final share of tokens for the first 12 intervals. */\r\n    function EdgelessToken() {\r\n        owner = 0x003230BBE64eccD66f62913679C8966Cf9F41166;\r\n        balanceOf[owner] = 500000000;              // Give the owner all initial tokens\r\n        totalSupply = 500000000;                   // Update total supply\r\n        for(uint8 i = 1; i < 13; i++)\t\t   // lock owner's final share of tokens for the first 12 months\r\n        \tlocked[owner][i] = 50000000;\r\n    }\r\n\r\n    /* Send some of your tokens to a given address */\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (now < startTime) throw; //check if the crowdsale is already over\r\n        if (locked[msg.sender][getInterval()] >= balanceOf[msg.sender] || balanceOf[msg.sender]-locked[msg.sender][getInterval()] < _value) throw;   // Check if the sender has enough\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);                     // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to],_value);                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    /* Allow another contract or person to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /* A contract or  person attempts to get the tokens of somebody else.\r\n    *  This is only allowed if the token holder approved. */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (now < startTime && _from!=owner) throw; //check if the crowdsale is already over\r\n        if (locked[_from][getInterval()] >= balanceOf[_from] || balanceOf[_from]-locked[_from][getInterval()] < _value) throw;     // Check if the sender has enough\r\n        var _allowance = allowance[_from][msg.sender];\r\n        balanceOf[_from] = safeSub(balanceOf[_from],_value); // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to],_value);     // Add the same to the recipient\r\n        allowance[_from][msg.sender] = safeSub(_allowance,_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Lock a number of tokens. This means, you will not be able to transfer these tokens until\r\n    *  the start of the next interval. */\r\n    function lock(address holder, uint256 _value) returns (bool success) {\r\n        if(holder==msg.sender||holder==tx.origin){\r\n\t\t\tuint ci = getInterval();\r\n\t\t\tuint holderLock = locked[holder][ci];\r\n            locked[holder][ci] = safeAdd(holderLock,_value);\r\n            Lock(holder, ci, _value);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* Increase the interval, if sufficient time has passed.\r\n    *  When a new interval starts, all tokens are unlocked. */\r\n    function getInterval() returns (uint256 interval){\r\n        if (now > safeAdd(safeMul(currentInterval, intervalLength), startTime)) {\r\n            currentInterval = (now - startTime) / intervalLength + 1;\r\n        }\r\n        return currentInterval;\r\n    }\r\n\r\n    /* to be called when ICO is closed, burns the remaining tokens but the owners share (50 000 000) and the ones reserved\r\n    *  for the bounty program (10 000 000).\r\n    *  anybody may burn the tokens after ICO ended, but only once (in case the owner holds more tokens in the future).\r\n    *  this ensures that the owner will not posses a majority of the tokens. */\r\n    function burn(){\r\n    \t//if tokens have not been burned already and the ICO ended\r\n    \tif(!burned && now>startTime){\r\n    \t\tuint difference = safeSub(balanceOf[owner], 60000000);//checked for overflow above\r\n    \t\tbalanceOf[owner] = 60000000;\r\n    \t\ttotalSupply = safeSub(totalSupply, difference);\r\n    \t\tburned = true;\r\n    \t}\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"name\":\"interval\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intervalLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"}]","ContractName":"EdgelessToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a688b0f2eee88b80eb68630ad3102ae4baa5e2c14cab32daae7945b82134414"}]}