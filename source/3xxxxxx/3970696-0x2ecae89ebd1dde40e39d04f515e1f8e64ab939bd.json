{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ==== DISCLAIMER ====\r\n//\r\n// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.\r\n// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN.\r\n// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR.\r\n// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS.\r\n// DON'T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON'T KNOW WHAT YOU ARE DOING.\r\n//\r\n// THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\r\n// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// ====\r\n//\r\n\r\n/// @author Santiment Sagl\r\n/// @title  CrowdsaleMinter\r\n\r\ncontract Base {\r\n\r\n    function max(uint a, uint b) returns (uint) { return a >= b ? a : b; }\r\n    function min(uint a, uint b) returns (uint) { return a <= b ? a : b; }\r\n\r\n    modifier only(address allowed) {\r\n        if (msg.sender != allowed) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    ///@return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns (bool) {\r\n        if (_addr == 0) return false;\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n\r\n    //@dev predefined locks (up to uint bit length, i.e. 256 possible)\r\n    uint constant internal L00 = 2 ** 0;\r\n    uint constant internal L01 = 2 ** 1;\r\n    uint constant internal L02 = 2 ** 2;\r\n    uint constant internal L03 = 2 ** 3;\r\n    uint constant internal L04 = 2 ** 4;\r\n    uint constant internal L05 = 2 ** 5;\r\n\r\n    //prevents reentrancy attacs: specific locks\r\n    uint private bitlocks = 0;\r\n    modifier noReentrancy(uint m) {\r\n        var _locks = bitlocks;\r\n        if (_locks & m > 0) throw;\r\n        bitlocks |= m;\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        if (_locks > 0) throw;\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n    ///@dev empty marking modifier signaling to user of the marked function , that it can cause an reentrant call.\r\n    ///     developer should make the caller function reentrant-safe if it use a reentrant function.\r\n    modifier reentrant { _; }\r\n\r\n}\r\n\r\ncontract MintableToken {\r\n    //target token contract is responsible to accept only authorized mint calls.\r\n    function mint(uint amount, address account);\r\n\r\n    //start the token on minting finished,\r\n    function start();\r\n}\r\n\r\ncontract Owned is Base {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) only(owner) {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() only(newOwner) {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n}\r\n\r\ncontract BalanceStorage {\r\n    function balances(address account) public constant returns(uint balance);\r\n}\r\n\r\ncontract AddressList {\r\n    function contains(address addr) public constant returns (bool);\r\n}\r\n\r\ncontract MinMaxWhiteList {\r\n    function allowed(address addr) public constant returns (uint /*finney*/, uint /*finney*/ );\r\n}\r\n\r\ncontract PresaleBonusVoting {\r\n    function rawVotes(address addr) public constant returns (uint rawVote);\r\n}\r\n\r\ncontract CrowdsaleMinter is Owned {\r\n\r\n    string public constant VERSION = \"0.2.1-TEST.MAX.2\";\r\n\r\n    /* ====== configuration START ====== */\r\n    uint public constant COMMUNITY_SALE_START = 3971950; /* approx. 04.07.2017 10:00 */\r\n    uint public constant PRIORITY_SALE_START  = 3972150; /* approx. 04.07.2017 11:00 */\r\n    uint public constant PUBLIC_SALE_START    = 3972250; /* approx. 04.07.2017 11:30 */\r\n    uint public constant PUBLIC_SALE_END      = 3972350; /* approx. 04.07.2017 12:00 */\r\n    uint public constant WITHDRAWAL_END       = 3972450; /* approx. 04.07.2017 12:30 */\r\n\r\n    address public TEAM_GROUP_WALLET           = 0x215aCB37845027cA64a4f29B2FCb7AffA8E9d326;\r\n    address public ADVISERS_AND_FRIENDS_WALLET = 0x41ab8360dEF1e19FdFa32092D83a7a7996C312a4;\r\n\r\n    uint public constant TEAM_BONUS_PER_CENT            = 18;\r\n    uint public constant ADVISORS_AND_PARTNERS_PER_CENT = 10;\r\n\r\n    MintableToken      public TOKEN                    = MintableToken(0x00000000000000000000000000);\r\n\r\n    AddressList        public PRIORITY_ADDRESS_LIST    = AddressList(0x463635eFd22558c64Efa6227A45649eeDc0e4888);\r\n    MinMaxWhiteList    public COMMUNITY_ALLOWANCE_LIST = MinMaxWhiteList(0x26c63d631A307897d76Af5f02A08A09b3395DCb9);\r\n    BalanceStorage     public PRESALE_BALANCES         = BalanceStorage(0x4Fd997Ed7c10DbD04e95d3730cd77D79513076F2);\r\n    PresaleBonusVoting public PRESALE_BONUS_VOTING     = PresaleBonusVoting(0x283a97Af867165169AECe0b2E963b9f0FC7E5b8c);\r\n\r\n    uint public constant COMMUNITY_PLUS_PRIORITY_SALE_CAP_ETH = 4;\r\n    uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 3;\r\n    uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 5;\r\n    uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 200;\r\n    uint public constant TOKEN_PER_ETH = 1000;\r\n    uint public constant PRE_SALE_BONUS_PER_CENT = 54;\r\n\r\n    //constructor\r\n    function CrowdsaleMinter() {\r\n        //check configuration if something in setup is looking weird\r\n        if (\r\n            TOKEN_PER_ETH == 0\r\n            || TEAM_BONUS_PER_CENT + ADVISORS_AND_PARTNERS_PER_CENT >=100\r\n            || MIN_ACCEPTED_AMOUNT_FINNEY < 1\r\n            || owner == 0x0\r\n            || address(COMMUNITY_ALLOWANCE_LIST) == 0x0\r\n            || address(PRIORITY_ADDRESS_LIST) == 0x0\r\n            || address(PRESALE_BONUS_VOTING) == 0x0\r\n            || address(PRESALE_BALANCES) == 0x0\r\n            || COMMUNITY_SALE_START == 0\r\n            || PRIORITY_SALE_START == 0\r\n            || PUBLIC_SALE_START == 0\r\n            || PUBLIC_SALE_END == 0\r\n            || WITHDRAWAL_END == 0\r\n            || MIN_TOTAL_AMOUNT_TO_RECEIVE == 0\r\n            || MAX_TOTAL_AMOUNT_TO_RECEIVE == 0\r\n            || COMMUNITY_PLUS_PRIORITY_SALE_CAP == 0\r\n            || COMMUNITY_SALE_START <= block.number\r\n            || COMMUNITY_SALE_START >= PRIORITY_SALE_START\r\n            || PRIORITY_SALE_START >= PUBLIC_SALE_START\r\n            || PUBLIC_SALE_START >= PUBLIC_SALE_END\r\n            || PUBLIC_SALE_END >= WITHDRAWAL_END\r\n            || COMMUNITY_PLUS_PRIORITY_SALE_CAP > MAX_TOTAL_AMOUNT_TO_RECEIVE\r\n            || MIN_TOTAL_AMOUNT_TO_RECEIVE > MAX_TOTAL_AMOUNT_TO_RECEIVE )\r\n        throw;\r\n    }\r\n\r\n    /* ====== configuration END ====== */\r\n\r\n    /* ====== public states START====== */\r\n\r\n    bool public isAborted = false;\r\n    mapping (address => uint) public balances;\r\n    bool public TOKEN_STARTED = false;\r\n    uint public total_received_amount;\r\n    address[] public investors;\r\n\r\n    //displays number of uniq investors\r\n    function investorsCount() constant external returns(uint) { return investors.length; }\r\n\r\n    //displays received amount in eth upto now\r\n    function TOTAL_RECEIVED_ETH() constant external returns (uint) { return total_received_amount / 1 ether; }\r\n\r\n    //displays current contract state in human readable form\r\n    function state() constant external returns (string) { return stateNames[ uint(currentState()) ]; }\r\n\r\n    function san_whitelist(address addr) public constant returns(uint, uint) { return COMMUNITY_ALLOWANCE_LIST.allowed(addr); }\r\n    function cfi_whitelist(address addr) public constant returns(bool) { return PRIORITY_ADDRESS_LIST.contains(addr); }\r\n\r\n    /* ====== public states END ====== */\r\n\r\n    string[] private stateNames = [\"BEFORE_START\", \"COMMUNITY_SALE\", \"PRIORITY_SALE\", \"PRIORITY_SALE_FINISHED\", \"PUBLIC_SALE\", \"BONUS_MINTING\", \"WITHDRAWAL_RUNNING\", \"REFUND_RUNNING\", \"CLOSED\" ];\r\n    enum State { BEFORE_START, COMMUNITY_SALE, PRIORITY_SALE, PRIORITY_SALE_FINISHED, PUBLIC_SALE, BONUS_MINTING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }\r\n\r\n    uint private constant COMMUNITY_PLUS_PRIORITY_SALE_CAP = COMMUNITY_PLUS_PRIORITY_SALE_CAP_ETH * 1 ether;\r\n    uint private constant MIN_TOTAL_AMOUNT_TO_RECEIVE = MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\r\n    uint private constant MAX_TOTAL_AMOUNT_TO_RECEIVE = MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\r\n    uint private constant MIN_ACCEPTED_AMOUNT = MIN_ACCEPTED_AMOUNT_FINNEY * 1 finney;\r\n    bool private allBonusesAreMinted = false;\r\n\r\n    //\r\n    // ======= interface methods =======\r\n    //\r\n\r\n    //accept payments here\r\n    function ()\r\n    payable\r\n    noAnyReentrancy\r\n    {\r\n        State state = currentState();\r\n        uint amount_allowed;\r\n        if (state == State.COMMUNITY_SALE) {\r\n            var (min_finney, max_finney) = COMMUNITY_ALLOWANCE_LIST.allowed(msg.sender);\r\n            var (min, max) = (min_finney * 1 finney, max_finney * 1 finney);\r\n            var sender_balance = balances[msg.sender];\r\n            assert (sender_balance <= max); //sanity check: should be always true;\r\n            assert (msg.value >= min);      //reject payments less than minimum\r\n            amount_allowed = max - sender_balance;\r\n            _receiveFundsUpTo(amount_allowed);\r\n        } else if (state == State.PRIORITY_SALE) {\r\n            assert (PRIORITY_ADDRESS_LIST.contains(msg.sender));\r\n            amount_allowed = COMMUNITY_PLUS_PRIORITY_SALE_CAP - total_received_amount;\r\n            _receiveFundsUpTo(amount_allowed);\r\n        } else if (state == State.PUBLIC_SALE) {\r\n            amount_allowed = MAX_TOTAL_AMOUNT_TO_RECEIVE - total_received_amount;\r\n            _receiveFundsUpTo(amount_allowed);\r\n        } else if (state == State.REFUND_RUNNING) {\r\n            // any entring call in Refund Phase will cause full refund\r\n            _sendRefund();\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n\r\n    function refund() external\r\n    inState(State.REFUND_RUNNING)\r\n    noAnyReentrancy\r\n    {\r\n        _sendRefund();\r\n    }\r\n\r\n\r\n    function withdrawFundsAndStartToken() external\r\n    inState(State.WITHDRAWAL_RUNNING)\r\n    noAnyReentrancy\r\n    only(owner)\r\n    {\r\n        // transfer funds to owner\r\n        if (!owner.send(this.balance)) throw;\r\n\r\n        //notify token contract to start\r\n        if (TOKEN.call(bytes4(sha3(\"start()\")))) {\r\n            TOKEN_STARTED = true;\r\n            TokenStarted(TOKEN);\r\n        }\r\n    }\r\n\r\n    event TokenStarted(address tokenAddr);\r\n\r\n    //there are around 40 addresses in PRESALE_ADDRESSES list. Everything fits into single Tx.\r\n    function mintAllBonuses() external\r\n    inState(State.BONUS_MINTING)\r\n    noAnyReentrancy\r\n    {\r\n        assert(!allBonusesAreMinted);\r\n        allBonusesAreMinted = true;\r\n\r\n        uint TEAM_AND_PARTNERS_PER_CENT = TEAM_BONUS_PER_CENT + ADVISORS_AND_PARTNERS_PER_CENT;\r\n\r\n        uint total_presale_amount_with_bonus = mintPresaleBonuses();\r\n        uint total_collected_amount = total_received_amount + total_presale_amount_with_bonus;\r\n        uint extra_amount = total_collected_amount * TEAM_AND_PARTNERS_PER_CENT / (100 - TEAM_AND_PARTNERS_PER_CENT);\r\n        uint extra_team_amount = extra_amount * TEAM_BONUS_PER_CENT / TEAM_AND_PARTNERS_PER_CENT;\r\n        uint extra_partners_amount = extra_amount * ADVISORS_AND_PARTNERS_PER_CENT / TEAM_AND_PARTNERS_PER_CENT;\r\n/* \r\n        //beautify total supply: round down to full eth.\r\n        uint total_to_mint = total_collected_amount + extra_amount;\r\n        uint round_remainder = total_to_mint - (total_to_mint / 1 ether * 1 ether);\r\n        extra_team_amount -= round_remainder; //this will reduce total_supply to rounded value\r\n*/\r\n        //mint group bonuses\r\n        _mint(extra_team_amount , TEAM_GROUP_WALLET);\r\n        _mint(extra_partners_amount, ADVISERS_AND_FRIENDS_WALLET);\r\n\r\n    }\r\n\r\n    function mintPresaleBonuses() internal returns(uint amount) {\r\n        uint total_presale_amount_with_bonus = 0;\r\n        //mint presale bonuses\r\n        for(uint i=0; i < PRESALE_ADDRESSES.length; ++i) {\r\n            address addr = PRESALE_ADDRESSES[i];\r\n            var amount_with_bonus = presaleTokenAmount(addr);\r\n            if (amount_with_bonus>0) {\r\n                _mint(amount_with_bonus, addr);\r\n                total_presale_amount_with_bonus += amount_with_bonus;\r\n            }\r\n        }//for\r\n        return total_presale_amount_with_bonus;\r\n    }\r\n\r\n    function presaleTokenAmount(address addr) public constant returns(uint){\r\n        uint presale_balance = PRESALE_BALANCES.balances(addr);\r\n        if (presale_balance > 0) {\r\n            // this calculation is about waived pre-sale bonus.\r\n            // rawVote contains a value [0..1 ether].\r\n            //     0 ether    - means \"default value\" or \"no vote\" : 100% bonus saved\r\n            //     1 ether    - means \"vote 100%\" : 100% bonus saved\r\n            //    <=10 finney - special value \"vote 0%\" : no bonus at all (100% bonus waived).\r\n            //  other value - \"PRE_SALE_BONUS_PER_CENT * rawVote / 1 ether\" is an effective bonus per cent for particular presale member.\r\n            //\r\n            var rawVote = PRESALE_BONUS_VOTING.rawVotes(addr);\r\n            if (rawVote == 0)              rawVote = 1 ether; //special case \"no vote\" (default value) ==> (1 ether is 100%)\r\n            else if (rawVote <= 10 finney) rawVote = 0;       //special case \"0%\" (no bonus)           ==> (0 ether is   0%)\r\n            else if (rawVote > 1 ether)    rawVote = 1 ether; //max bonus is 100% (should not occur)\r\n            var presale_bonus = presale_balance * PRE_SALE_BONUS_PER_CENT * rawVote / 1 ether / 100;\r\n            return presale_balance + presale_bonus;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function attachToToken(MintableToken tokenAddr) external\r\n    inState(State.BEFORE_START)\r\n    only(owner)\r\n    {\r\n        TOKEN = tokenAddr;\r\n    }\r\n\r\n    function abort() external\r\n    inStateBefore(State.REFUND_RUNNING)\r\n    only(owner)\r\n    {\r\n        isAborted = true;\r\n    }\r\n\r\n    //\r\n    // ======= implementation methods =======\r\n    //\r\n\r\n    function _sendRefund() private\r\n    tokenHoldersOnly\r\n    {\r\n        // load balance to refund plus amount currently sent\r\n        var amount_to_refund = balances[msg.sender] + msg.value;\r\n        // reset balance\r\n        balances[msg.sender] = 0;\r\n        // send refund back to sender\r\n        if (!msg.sender.send(amount_to_refund)) throw;\r\n    }\r\n\r\n    function _receiveFundsUpTo(uint amount) private\r\n    notTooSmallAmountOnly\r\n    {\r\n        require (amount > 0);\r\n        if (msg.value > amount) {\r\n            // accept amount only and return change\r\n            var change_to_return = msg.value - amount;\r\n            if (!msg.sender.send(change_to_return)) throw;\r\n        } else {\r\n            // accept full amount\r\n            amount = msg.value;\r\n        }\r\n        if (balances[msg.sender] == 0) investors.push(msg.sender);\r\n        balances[msg.sender] += amount;\r\n        total_received_amount += amount;\r\n        _mint(amount,msg.sender);\r\n    }\r\n\r\n    function _mint(uint amount, address account) private {\r\n        MintableToken(TOKEN).mint(amount * TOKEN_PER_ETH, account);\r\n    }\r\n\r\n    function currentState() private constant\r\n    returns (State)\r\n    {\r\n        if (isAborted) {\r\n            return this.balance > 0\r\n                   ? State.REFUND_RUNNING\r\n                   : State.CLOSED;\r\n        } else if (block.number < COMMUNITY_SALE_START || address(TOKEN) == 0x0) {\r\n             return State.BEFORE_START;\r\n        } else if (block.number < PRIORITY_SALE_START) {\r\n            return State.COMMUNITY_SALE;\r\n        } else if (block.number < PUBLIC_SALE_START) {\r\n            return total_received_amount < COMMUNITY_PLUS_PRIORITY_SALE_CAP\r\n                ? State.PRIORITY_SALE\r\n                : State.PRIORITY_SALE_FINISHED;\r\n        } else if (block.number <= PUBLIC_SALE_END && total_received_amount < MAX_TOTAL_AMOUNT_TO_RECEIVE) {\r\n            return State.PUBLIC_SALE;\r\n        } else if (this.balance == 0) {\r\n            return State.CLOSED;\r\n        } else if (block.number <= WITHDRAWAL_END && total_received_amount >= MIN_TOTAL_AMOUNT_TO_RECEIVE) {\r\n            return allBonusesAreMinted\r\n                ? State.WITHDRAWAL_RUNNING\r\n                : State.BONUS_MINTING;\r\n        } else {\r\n            return State.REFUND_RUNNING;\r\n        }\r\n    }\r\n\r\n    //\r\n    // ============ modifiers ============\r\n    //\r\n\r\n    //fails if state dosn't match\r\n    modifier inState(State state) {\r\n        if (state != currentState()) throw;\r\n        _;\r\n    }\r\n\r\n    //fails if the current state is not before than the given one.\r\n    modifier inStateBefore(State state) {\r\n        if (currentState() >= state) throw;\r\n        _;\r\n    }\r\n\r\n    //accepts calls from token holders only\r\n    modifier tokenHoldersOnly(){\r\n        if (balances[msg.sender] == 0) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    // don`t accept transactions with value less than allowed minimum\r\n    modifier notTooSmallAmountOnly(){\r\n        if (msg.value < MIN_ACCEPTED_AMOUNT) throw;\r\n        _;\r\n    }\r\n\r\n    //\r\n    // ============ DATA ============\r\n    //\r\n\r\n    address[] PRESALE_ADDRESSES = [\r\n        0xF55DFd2B02Cf3282680C94BD01E9Da044044E6A2,\r\n        0x0D40B53828948b340673674Ae65Ee7f5D8488e33,\r\n        0x0ea690d466d6bbd18F124E204EA486a4Bf934cbA,\r\n        0x6d25B9f40b92CcF158250625A152574603465192,\r\n        0x481Da0F1e89c206712BCeA4f7D6E60d7b42f6C6C,\r\n        0x416EDa5D6Ed29CAc3e6D97C102d61BC578C5dB87,\r\n        0xD78Ac6FFc90E084F5fD563563Cc9fD33eE303f18,\r\n        0xe6714ab523acEcf9b85d880492A2AcDBe4184892,\r\n        0x285A9cA5fE9ee854457016a7a5d3A3BB95538093,\r\n        0x600ca6372f312B081205B2C3dA72517a603a15Cc,\r\n        0x2b8d5C9209fBD500Fd817D960830AC6718b88112,\r\n        0x4B15Dd23E5f9062e4FB3a9B7DECF653C0215e560,\r\n        0xD67449e6AB23c1f46dea77d3f5E5D47Ff33Dc9a9,\r\n        0xd0ADaD7ed81AfDa039969566Ceb8423E0ab14d90,\r\n        0x245f27796a44d7E3D30654eD62850ff09EE85656,\r\n        0x639D6eC2cef4d6f7130b40132B3B6F5b667e5105,\r\n        0x5e9a69B8656914965d69d8da49c3709F0bF2B5Ef,\r\n        0x0832c3B801319b62aB1D3535615d1fe9aFc3397A,\r\n        0xf6Dd631279377205818C3a6725EeEFB9D0F6b9F3,\r\n        0x47696054e71e4c3f899119601a255a7065C3087B,\r\n        0xf107bE6c6833f61A24c64D63c8A7fcD784Abff06,\r\n        0x056f072Bd2240315b708DBCbDDE80d400f0394a1,\r\n        0x9e5BaeC244D8cCD49477037E28ed70584EeAD956,\r\n        0x40A0b2c1B4E30F27e21DF94e734671856b485966,\r\n        0x84f0620A547a4D14A7987770c4F5C25d488d6335,\r\n        0x036Ac11c161C09d94cA39F7B24C1bC82046c332B,\r\n        0x2912A18C902dE6f95321D6d6305D7B80Eec4C055,\r\n        0xE1Ad30971b83c17E2A24c0334CB45f808AbEBc87,\r\n        0x07f35b7FE735c49FD5051D5a0C2e74c9177fEa6d,\r\n        0x11669Cce6AF3ce1Ef3777721fCC0eef0eE57Eaba,\r\n        0xBDbaF6434d40D6355B1e80e40Cc4AB9C68D96116,\r\n        0x17125b59ac51cEe029E4bD78D7f5947D1eA49BB2,\r\n        0xA382A3A65c3F8ee2b726A2535B3c34A89D9094D4,\r\n        0xAB78c8781fB64Bed37B274C5EE759eE33465f1f3,\r\n        0xE74F2062612E3cAE8a93E24b2f0D3a2133373884,\r\n        0x505120957A9806827F8F111A123561E82C40bC78,\r\n        0x00A46922B1C54Ae6b5818C49B97E03EB4BB352e1,\r\n        0xE76fE52a251C8F3a5dcD657E47A6C8D16Fdf4bFA\r\n    ];\r\n\r\n}// CrowdsaleMinter","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"san_whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cfi_whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"attachToToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BALANCES\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintAllBonuses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_ALLOWANCE_LIST\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_RECEIVED_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_SALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISERS_AND_FRIENDS_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIORITY_SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFundsAndStartToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_STARTED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ACCEPTED_AMOUNT_FINNEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"presaleTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BONUS_VOTING\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_BONUS_PER_CENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_received_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIORITY_ADDRESS_LIST\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_BONUS_PER_CENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_PLUS_PRIORITY_SALE_CAP_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_GROUP_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_AND_PARTNERS_PER_CENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAborted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"TokenStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdsaleMinter","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3399339d718dd5bdc89b3cb4bb68a3ae32ed6cf8548a476fd58a68f066d02f05"}]}