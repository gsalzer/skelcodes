{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.4;\r\n\r\n\r\ncontract Token {\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions.\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    // Token meta data\r\n    // Those are not abstract functions, because solc won't recognize generated getter functions for public variables as functions.\r\n    function name() constant returns (string) {}\r\n    function symbol() constant returns (string) {}\r\n    function decimals() constant returns (uint8) {}\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Standard token contract - Standard token interface implementation.\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/// @title Gnosis token contract - Holds tokens of Gnosis.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract GnosisToken is StandardToken {\r\n\r\n    /*\r\n     *  Token meta data\r\n     */\r\n    string constant public name = \"Gnosis Token\";\r\n    string constant public symbol = \"GNO\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets dutch auction contract address and assigns all tokens to dutch auction.\r\n    /// @param dutchAuction Address of dutch auction contract.\r\n    /// @param owners Array of addresses receiving preassigned tokens.\r\n    /// @param tokens Array of preassigned token amounts.\r\n    function GnosisToken(address dutchAuction, address[] owners, uint[] tokens)\r\n        public\r\n    {\r\n        if (dutchAuction == 0)\r\n            // Address should not be null.\r\n            throw;\r\n        totalSupply = 10000000 * 10**18;\r\n        balances[dutchAuction] = 9000000 * 10**18;\r\n        uint assignedTokens = balances[dutchAuction];\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == 0)\r\n                // Address should not be null.\r\n                throw;\r\n            balances[owners[i]] += tokens[i];\r\n            assignedTokens += tokens[i];\r\n        }\r\n        if (assignedTokens != totalSupply)\r\n            throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"dutchAuction\",\"type\":\"address\"},{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GnosisToken","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000001be2862387d46ef9a7c2145ee74961d62aa4154000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000001d805bc00b8fa3c96ae6c8fa97b2fd24b19a98010000000000000000000000005210c4dcd7eb899a1274fd6471adec9896ae05aa0000000000000000000000009f7dfab2222a473284205cddf08a677726d786a00000000000000000000000006750adbb477d0310f395da2ad93abe4b9bfd1c8700000000000000000000000031cba7ad3483f9bff236df556e1c3695736a9615000000000000000000000000593f428a6e04115265590c848fa403739a634cbb0000000000000000000000000caf57ef67a63e77210b4cd3a4c5938dbdd10d550000000000000000000000007affd9acf94e8e2c47ed6e16cd230f4ce7f671c90000000000000000000000002f9a065b183f08b6feb9562f555a0ffc7cd9f4f10000000000000000000000009f7dfab2222a473284205cddf08a677726d786a0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000054b40b1f852bda000000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000032d26d12e980b60000000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000000000000000000000001fc3842bd1f071c0000000000000000000000000000000000000000000000000098774738bc82220000000000000000000000000000000000000000000000000065a4da25d3016c0000000000000000000000000000000000000000000000000152d02c7e14af6800000","Library":"","SwarmSource":""}]}