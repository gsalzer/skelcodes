{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\ncontract token {\r\n\tfunction transferFrom(address sender, address receiver, uint amount) returns(bool success){}\r\n\tfunction burn() {}\r\n}\r\n\r\n/**\r\n*\tCrowdsale for Edgeless Tokens.\r\n*\tAuthor: Julia Altenried\r\n**/\r\ncontract Crowdsale {\r\n    /* if successful, the funds will be retrievable by this address */\r\n\taddress public beneficiary = 0x003230bbe64eccd66f62913679c8966cf9f41166;\r\n\t/* if the funding goal is not reached, investors may withdraw their funds */\r\n\tuint public fundingGoal = 50000000;\r\n\t/* the maximum amount of tokens to be sold */\r\n\tuint public maxGoal = 440000000;\r\n\t/* how much has been raised by crowdale (in ETH) */\r\n\tuint public amountRaised;\r\n\t/* the start date of the crowdsale */\r\n\tuint public start = 1488294000;\r\n\t/* the number of tokens already sold */\r\n\tuint public tokensSold;\r\n\t/* there are different prices in different time intervals */\r\n\tuint[4] public deadlines = [1488297600, 1488902400, 1489507200,1490112000];\r\n\tuint[4] public prices = [833333333333333, 909090909090909,952380952380952, 1000000000000000];\r\n\t/* the address of the token contract */\r\n\ttoken public tokenReward;\r\n\t/* the balances (in ETH) of all investors */\r\n\tmapping(address => uint256) public balanceOf;\r\n\tbool fundingGoalReached = false;\r\n\tbool crowdsaleClosed = false;\r\n\t/* notifying transfers and the success of the crowdsale*/\r\n\tevent GoalReached(address beneficiary, uint amountRaised);\r\n\tevent FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n\r\n\r\n    /*  initialization, set the token address */\r\n    function Crowdsale( ) {\r\n        tokenReward = token(0xbe87e87965b96d8174eae4e3724a6d7417c488b0);\r\n    }\r\n\r\n    /* whenever anyone sends funds to a contract, the corresponding amount of tokens is transfered to the sender\r\n    \tif the crowdsale started and hasn't been closed already and the maxGoal wasn't reached yet.*/\r\n    function () payable{\r\n        invest(msg.sender);\r\n    }\r\n\r\n    /* if the crowdsale started and hasn't been closed already and the maxGoal wasn't reached yet tokens are transfered to the receiver.\r\n    to be called in case the msg.sender is not the one to receive the tokens.*/\r\n    function invest(address receiver) payable{\r\n    \tuint amount = msg.value;\r\n\tuint numTokens = amount / getPrice();\r\n\tif (crowdsaleClosed||now<start||tokensSold+numTokens>maxGoal) throw;\r\n\tbalanceOf[receiver] += amount;\r\n\tamountRaised += amount;\r\n\ttokensSold+=numTokens;\r\n\tif(!tokenReward.transferFrom(beneficiary, receiver, numTokens)) throw;\r\n        FundTransfer(receiver, amount, true);\r\n    }\r\n\r\n    /* looks up the current token price */\r\n    function getPrice() constant returns (uint256 price){\r\n        for(var i = 0; i < deadlines.length; i++)\r\n            if(now<deadlines[i])\r\n                return prices[i];\r\n        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadlines[deadlines.length-1]) _; }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline {\r\n        if (tokensSold >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    /* allows the beneficiary and/or the funders to withdraw their funds */\r\n    function safeWithdrawal() afterDeadline {\r\n        // if the goal hasn't been reached, investors may withdraw their funds\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n        //if the goal has benn reached and the beneficiary himself is the sender, he may withdraw everything\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            tokenReward.burn(); //burn remaining tokens but 60 000 000\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40e26ee771142872932e5015c74107cd729473174b850f09f69003f661eba316"}]}