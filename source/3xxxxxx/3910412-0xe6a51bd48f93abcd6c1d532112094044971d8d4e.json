{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.4;\r\n\r\n//from Zeppelin\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) throw;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    address newOwner;\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Finalizable is Owned {\r\n    bool public finalized;\r\n\r\n    function finalize() onlyOwner {\r\n        finalized = true;\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        if (finalized) throw;\r\n        _;\r\n    }\r\n}\r\n\r\ncontract IToken {\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function balanceOf(address owner) returns(uint);\r\n}\r\n\r\ncontract TokenReceivable is Owned {\r\n    event logTokenTransfer(address token, address to, uint amount);\r\n\r\n    function claimTokens(address _token, address _to) onlyOwner returns (bool) {\r\n        IToken token = IToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        if (token.transfer(_to, balance)) {\r\n            logTokenTransfer(_token, _to, balance);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract EventDefinitions {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Token is Finalizable, TokenReceivable, SafeMath, EventDefinitions {\r\n\r\n    string public name = \"FunFair\";\r\n    uint8 public decimals = 8;\r\n    string public symbol = \"FUN\";\r\n\r\n    Controller controller;\r\n    address owner;\r\n\r\n    function setController(address _c) onlyOwner notFinalized {\r\n        controller = Controller(_c);\r\n    }\r\n\r\n    function balanceOf(address a) constant returns (uint) {\r\n        return controller.balanceOf(a);\r\n    }\r\n\r\n    function totalSupply() constant returns (uint) {\r\n        return controller.totalSupply();\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return controller.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n       success = controller.transfer(msg.sender, _to, _value);\r\n        if (success) {\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n    onlyPayloadSize(3)\r\n    returns (bool success) {\r\n       success = controller.transferFrom(msg.sender, _from, _to, _value);\r\n        if (success) {\r\n            Transfer(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        //promote safe user behavior\r\n        if (controller.allowance(msg.sender, _spender) > 0) throw;\r\n\r\n        success = controller.approve(msg.sender, _spender, _value);\r\n        if (success) {\r\n            Approval(msg.sender, _spender, _value);\r\n        }\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        success = controller.increaseApproval(msg.sender, _spender, _addedValue);\r\n        if (success) {\r\n            uint newval = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newval);\r\n        }\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        success = controller.decreaseApproval(msg.sender, _spender, _subtractedValue);\r\n        if (success) {\r\n            uint newval = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newval);\r\n        }\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n    assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function burn(uint _amount) {\r\n        controller.burn(msg.sender, _amount);\r\n        Transfer(msg.sender, 0x0, _amount);\r\n    }\r\n}\r\n\r\ncontract Controller is Owned, Finalizable {\r\n    Ledger public ledger;\r\n    address public token;\r\n\r\n    function setToken(address _token) onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    function setLedger(address _ledger) onlyOwner {\r\n        ledger = Ledger(_ledger);\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        if (msg.sender != token) throw;\r\n        _;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint) {\r\n        return ledger.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _a) onlyToken constant returns (uint) {\r\n        return Ledger(ledger).balanceOf(_a);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    onlyToken constant returns (uint) {\r\n        return ledger.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint _value)\r\n    onlyToken\r\n    returns (bool success) {\r\n        return ledger.transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _spender, address _from, address _to, uint _value)\r\n    onlyToken\r\n    returns (bool success) {\r\n        return ledger.transferFrom(_spender, _from, _to, _value);\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint _value)\r\n    onlyToken\r\n    returns (bool success) {\r\n        return ledger.approve(_owner, _spender, _value);\r\n    }\r\n\r\n    function increaseApproval (address _owner, address _spender, uint _addedValue)\r\n    onlyToken\r\n    returns (bool success) {\r\n        return ledger.increaseApproval(_owner, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _owner, address _spender, uint _subtractedValue)\r\n    onlyToken\r\n    returns (bool success) {\r\n        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\r\n    }\r\n\r\n\r\n    function burn(address _owner, uint _amount) onlyToken {\r\n        ledger.burn(_owner, _amount);\r\n    }\r\n}\r\n\r\ncontract Ledger is Owned, SafeMath, Finalizable {\r\n    address public controller;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    uint public totalSupply;\r\n\r\n    function setController(address _controller) onlyOwner notFinalized {\r\n        controller = _controller;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        if (msg.sender != controller) throw;\r\n        _;\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint _value)\r\n    onlyController\r\n    returns (bool success) {\r\n        if (balanceOf[_from] < _value) return false;\r\n\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _spender, address _from, address _to, uint _value)\r\n    onlyController\r\n    returns (bool success) {\r\n        if (balanceOf[_from] < _value) return false;\r\n\r\n        var allowed = allowance[_from][_spender];\r\n        if (allowed < _value) return false;\r\n\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        allowance[_from][_spender] = safeSub(allowed, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint _value)\r\n    onlyController\r\n    returns (bool success) {\r\n        //require user to set to zero before resetting to nonzero\r\n        if ((_value != 0) && (allowance[_owner][_spender] != 0)) {\r\n            return false;\r\n        }\r\n\r\n        allowance[_owner][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval (address _owner, address _spender, uint _addedValue)\r\n    onlyController\r\n    returns (bool success) {\r\n        uint oldValue = allowance[_owner][_spender];\r\n        allowance[_owner][_spender] = safeAdd(oldValue, _addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _owner, address _spender, uint _subtractedValue)\r\n    onlyController\r\n    returns (bool success) {\r\n        uint oldValue = allowance[_owner][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[_owner][_spender] = 0;\r\n        } else {\r\n            allowance[_owner][_spender] = safeSub(oldValue, _subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    event LogMint(address indexed owner, uint amount);\r\n    event LogMintingStopped();\r\n\r\n    function mint(address _a, uint _amount) onlyOwner mintingActive {\r\n        balanceOf[_a] += _amount;\r\n        totalSupply += _amount;\r\n        LogMint(_a, _amount);\r\n    }\r\n\r\n    function multiMint(uint[] bits) onlyOwner mintingActive {\r\n        for (uint i=0; i<bits.length; i++) {\r\n\t    address a = address(bits[i]>>96);\r\n\t    uint amount = bits[i]&((1<<96) - 1);\r\n\t    mint(a, amount);\r\n        }\r\n    }\r\n\r\n    bool public mintingStopped;\r\n\r\n    function stopMinting() onlyOwner {\r\n        mintingStopped = true;\r\n        LogMintingStopped();\r\n    }\r\n\r\n    modifier mintingActive() {\r\n        if (mintingStopped) throw;\r\n        _;\r\n    }\r\n\r\n    function burn(address _owner, uint _amount) onlyController {\r\n        balanceOf[_owner] = safeSub(balanceOf[_owner], _amount);\r\n        totalSupply = safeSub(totalSupply, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bits\",\"type\":\"uint256[]\"}],\"name\":\"multiMint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogMintingStopped\",\"type\":\"event\"}]","ContractName":"Ledger","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f63e57e8cde6e54a244275edd73c8176dff584f6f2466d29c3f740a9a2c1ab95"}]}