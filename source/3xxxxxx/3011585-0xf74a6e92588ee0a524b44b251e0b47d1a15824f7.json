{"status":"1","message":"OK","result":[{"SourceCode":"//! Badge Registry contract.\r\n//! By Gav Wood (Ethcore), 2016.\r\n//! Released under the Apache Licence 2.\r\n\r\npragma solidity ^0.4.0;\r\n\r\n// From Owned.sol\r\ncontract Owned {\r\n\tmodifier only_owner { if (msg.sender != owner) return; _; }\r\n\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tfunction setOwner(address _new) only_owner { NewOwner(owner, _new); owner = _new; }\r\n\r\n\taddress public owner = msg.sender;\r\n}\r\n\r\ncontract BadgeReg is Owned {\r\n\tstruct Badge {\r\n\t\taddress addr;\r\n\t\tbytes32 name;\r\n\t\taddress owner;\r\n\t\tmapping (bytes32 => bytes32) meta;\r\n\t}\r\n\r\n\tmodifier when_fee_paid { if (msg.value < fee) return; _; }\r\n\tmodifier when_address_free(address _addr) { if (mapFromAddress[_addr] != 0) return; _; }\r\n\tmodifier when_name_free(bytes32 _name) { if (mapFromName[_name] != 0) return; _; }\r\n\tmodifier when_has_name(bytes32 _name) { if (mapFromName[_name] == 0) return; _; }\r\n\tmodifier only_badge_owner(uint _id) { if (badges[_id].owner != msg.sender) return; _; }\r\n\r\n\tevent Registered(bytes32 indexed name, uint indexed id, address addr);\r\n\tevent Unregistered(bytes32 indexed name, uint indexed id);\r\n\tevent MetaChanged(uint indexed id, bytes32 indexed key, bytes32 value);\r\n\tevent AddressChanged(uint indexed id, address addr);\r\n\r\n\tfunction register(address _addr, bytes32 _name) payable returns (bool) {\r\n\t\treturn registerAs(_addr, _name, msg.sender);\r\n\t}\r\n\r\n\tfunction registerAs(address _addr, bytes32 _name, address _owner) payable when_fee_paid when_address_free(_addr) when_name_free(_name) returns (bool) {\r\n\t\tbadges.push(Badge(_addr, _name, _owner));\r\n\t\tmapFromAddress[_addr] = badges.length;\r\n\t\tmapFromName[_name] = badges.length;\r\n\t\tRegistered(_name, badges.length - 1, _addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction unregister(uint _id) only_owner {\r\n\t\tUnregistered(badges[_id].name, _id);\r\n\t\tdelete mapFromAddress[badges[_id].addr];\r\n\t\tdelete mapFromName[badges[_id].name];\r\n\t\tdelete badges[_id];\r\n\t}\r\n\r\n\tfunction setFee(uint _fee) only_owner {\r\n\t\tfee = _fee;\r\n\t}\r\n\r\n\tfunction badgeCount() constant returns (uint) { return badges.length; }\r\n\r\n\tfunction badge(uint _id) constant returns (address addr, bytes32 name, address owner) {\r\n\t\tvar t = badges[_id];\r\n\t\taddr = t.addr;\r\n\t\tname = t.name;\r\n\t\towner = t.owner;\r\n\t}\r\n\r\n\tfunction fromAddress(address _addr) constant returns (uint id, bytes32 name, address owner) {\r\n\t\tid = mapFromAddress[_addr] - 1;\r\n\t\tvar t = badges[id];\r\n\t\tname = t.name;\r\n\t\towner = t.owner;\r\n\t}\r\n\r\n\tfunction fromName(bytes32 _name) constant returns (uint id, address addr, address owner) {\r\n\t\tid = mapFromName[_name] - 1;\r\n\t\tvar t = badges[id];\r\n\t\taddr = t.addr;\r\n\t\towner = t.owner;\r\n\t}\r\n\r\n\tfunction meta(uint _id, bytes32 _key) constant returns (bytes32) {\r\n\t\treturn badges[_id].meta[_key];\r\n\t}\r\n\r\n\tfunction setAddress(uint _id, address _newAddr) only_badge_owner(_id) when_address_free(_newAddr) {\r\n\t\tvar oldAddr = badges[_id].addr;\r\n\t\tbadges[_id].addr = _newAddr;\r\n\t\tmapFromAddress[oldAddr] = 0;\r\n\t\tmapFromAddress[_newAddr] = _id;\r\n\t\tAddressChanged(_id, _newAddr);\r\n\t}\r\n\r\n\tfunction setMeta(uint _id, bytes32 _key, bytes32 _value) only_badge_owner(_id) {\r\n\t\tbadges[_id].meta[_key] = _value;\r\n\t\tMetaChanged(_id, _key, _value);\r\n\t}\r\n\r\n\tfunction drain() only_owner {\r\n\t\tif (!msg.sender.send(this.balance))\r\n\t\t\tthrow;\r\n\t}\r\n\r\n\tmapping (address => uint) mapFromAddress;\r\n\tmapping (bytes32 => uint) mapFromName;\r\n\tBadge[] badges;\r\n\tuint public fee = 1 ether;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fromName\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badgeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"meta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"fromAddress\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"badge\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMeta\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"registerAs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"MetaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"BadgeReg","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b72a4faa7028974dd0798dfd607552ad41ca7114d4317783549830b7aaba61c8"}]}