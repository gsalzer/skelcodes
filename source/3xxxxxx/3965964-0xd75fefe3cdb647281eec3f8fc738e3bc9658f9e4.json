{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ParityProofOfSMSInterface {\r\n    function certified(address _who) constant returns (bool);\r\n}\r\n\r\ncontract ProofOfReadToken {\r\n    ParityProofOfSMSInterface public proofOfSms;\r\n    \r\n    //maps reader addresses to a map of story num => have claimed readership\r\n    mapping (address => mapping(uint256 => bool)) public readingRegister;\r\n    //article hash to key hash\r\n    mapping (string => bytes32) articleKeyHashRegister; \r\n    //story num to article hash\r\n    mapping (uint256 => string) public publishedRegister; \r\n    //set the max number of claimable tokens for each article\r\n    mapping (string => uint256) remainingTokensForArticle;\r\n\r\n    uint256 public numArticlesPublished;\r\n    address public publishingOwner;\r\n    uint256 public minSecondsBetweenPublishing;\r\n    uint256 public maxTokensPerArticle;\r\n    uint public timeOfLastPublish;\r\n    bool public shieldsUp; //require sms verification\r\n    string ipfsGateway;\r\n\r\n    /* ERC20 fields */\r\n    string public standard = \"Token 0.1\";\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    event Transfer (address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\r\n    event ClaimResult (uint);\r\n    event PublishResult (uint);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ProofOfReadToken(uint256 _minSecondsBetweenPublishing,\r\n                              uint256 _maxTokensPerArticle,\r\n                              string tokenName, \r\n                              uint8 decimalUnits, \r\n                              string tokenSymbol) {\r\n                                  \r\n        publishingOwner = msg.sender;\r\n        minSecondsBetweenPublishing = _minSecondsBetweenPublishing; \r\n        maxTokensPerArticle = _maxTokensPerArticle;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = decimalUnits;\r\n        ipfsGateway = \"http://ipfs.io/ipfs/\";\r\n        proofOfSms = ParityProofOfSMSInterface(0x9ae98746EB8a0aeEe5fF2b6B15875313a986f103);\r\n    }\r\n    \r\n    /* Publish article */\r\n    function publish(string articleHash, bytes32 keyHash, uint256 numTokens) {\r\n        \r\n        if (msg.sender != publishingOwner) {\r\n            PublishResult(1);\r\n            throw;\r\n        } else if (numTokens > maxTokensPerArticle) {\r\n            PublishResult(2);\r\n            throw;\r\n        } else if (block.timestamp - timeOfLastPublish < minSecondsBetweenPublishing) {\r\n            PublishResult(3);\r\n            throw;\r\n        } else if (articleKeyHashRegister[articleHash] != 0) {\r\n            PublishResult(4);  //can't republish same article\r\n            throw;\r\n        }\r\n        \r\n        timeOfLastPublish = block.timestamp;\r\n        publishedRegister[numArticlesPublished] = articleHash;\r\n        articleKeyHashRegister[articleHash] = keyHash;\r\n        numArticlesPublished++;\r\n        remainingTokensForArticle[articleHash] = numTokens;\r\n        PublishResult(3);\r\n    }\r\n    \r\n    /*Claim a token for an article */\r\n    function claimReadership(uint256 articleNum, string key) {\r\n        \r\n        if (shieldsUp && !proofOfSms.certified(msg.sender)) {\r\n            ClaimResult(1); //missing sms certification\r\n             throw;\r\n        } else if (readingRegister[msg.sender][articleNum]) {\r\n            ClaimResult(2); // user alread claimed\r\n            throw; \r\n        } else if (remainingTokensForArticle[publishedRegister[articleNum]] <= 0) {\r\n            ClaimResult(3); //article out of tokens\r\n            throw;\r\n        } else if (keccak256(key) != articleKeyHashRegister[publishedRegister[articleNum]]) {\r\n            ClaimResult(4); //incorrect key\r\n            throw; \r\n        } else if (balanceOf[msg.sender] + 1 < balanceOf[msg.sender]) {\r\n            ClaimResult(5); //overflow error\r\n            throw;\r\n        } \r\n        \r\n        remainingTokensForArticle[publishedRegister[articleNum]]--;\r\n        totalSupply++;\r\n        readingRegister[msg.sender][articleNum] = true;\r\n        balanceOf[msg.sender] += 1;\r\n        \r\n        ClaimResult(0);\r\n    }\r\n    \r\n    /* Check if an address has read a given article */\r\n    function hasReadership(address toCheck, uint256 articleNum) public returns (bool) {\r\n        return readingRegister[toCheck][articleNum];\r\n    }\r\n    \r\n    function getRemainingTokenForArticle(string articleHash) public returns (uint256) {\r\n        return remainingTokensForArticle[articleHash];\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) return false;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false; // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                            // Subtract from the sender\r\n        balanceOf[_to] += _value;                                   // Add the same to the recipient\r\n        /* Notify anyone listening that this transfer took place */\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address.\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\r\n        balanceOf[_from] -= _value;                           // Subtract from the sender\r\n        balanceOf[_to] += _value;                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function updateIpfsGateway(string gateway) {\r\n        if (msg.sender == publishingOwner)\r\n            ipfsGateway = gateway;\r\n    }\r\n        \r\n    function setSmsCertificationRequired(bool enable) {\r\n        if (msg.sender == publishingOwner)\r\n            shieldsUp = enable;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publishingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toCheck\",\"type\":\"address\"},{\"name\":\"articleNum\",\"type\":\"uint256\"}],\"name\":\"hasReadership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensPerArticle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"articleNum\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"claimReadership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shieldsUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numArticlesPublished\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSecondsBetweenPublishing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSmsCertificationRequired\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gateway\",\"type\":\"string\"}],\"name\":\"updateIpfsGateway\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"readingRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publishedRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"articleHash\",\"type\":\"string\"}],\"name\":\"getRemainingTokenForArticle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"articleHash\",\"type\":\"string\"},{\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofOfSms\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minSecondsBetweenPublishing\",\"type\":\"uint256\"},{\"name\":\"_maxTokensPerArticle\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClaimResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PublishResult\",\"type\":\"event\"}]","ContractName":"ProofOfReadToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001a43566f656c6c2050726f6f66206f66205265616420546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000064356504f52540000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1e82110976ecd85901366bec535d4ce6a2fa33b4b9456b5d9af692a4d37cd194"}]}