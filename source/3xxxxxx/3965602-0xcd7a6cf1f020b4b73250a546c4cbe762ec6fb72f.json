{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract SafeMath {\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function safeAddCheck(uint256 x, uint256 y) internal returns(bool) {\r\n      uint256 z = x + y;\r\n      if ((z >= x) && (z >= y)) {\r\n          return true;\r\n      }\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract LeeroyPoints is Token, SafeMath {\r\n    address public owner;\r\n    mapping (address => bool) public controllers;\r\n\r\n    string public constant name = \"Leeroy Points\";\r\n    string public constant symbol = \"LRP\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n    uint256 public constant baseUnit = 1 * 10**decimals;\r\n\r\n    event CreateLRP(address indexed _to, uint256 _value);\r\n\r\n    function LeeroyPoints() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n\r\n    modifier onlyController { if (controllers[msg.sender] == false) throw; _; }\r\n\r\n    function enableController(address controller) onlyOwner {\r\n        controllers[controller] = true;\r\n    }\r\n\r\n    function disableController(address controller) onlyOwner {\r\n        controllers[controller] = false;\r\n    }\r\n\r\n    function create(uint num, address targetAddress) onlyController {\r\n        uint points = safeMult(num, baseUnit);\r\n        // use bool instead of assert, controller can run indefinitely\r\n        // regardless of totalSupply\r\n        bool checked = safeAddCheck(totalSupply, points);\r\n        if (checked) {\r\n            totalSupply = totalSupply + points;\r\n            balances[targetAddress] += points;\r\n            CreateLRP(targetAddress, points);\r\n        }\r\n   }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract Leeroy {\r\n\r\n    // metadata\r\n    string public constant name = \"Leeroy\";\r\n\r\n    // points contract\r\n    LeeroyPoints public points;\r\n\r\n    // points awarded\r\n    uint pointsPerAction = 1;\r\n\r\n    // events\r\n    event NewUser(bytes32 indexed username);\r\n    event NewPost(bytes32 indexed username, uint id);\r\n    event Reply(bytes32 indexed username, bytes32 indexed target, uint indexed id);\r\n    event Follow(bytes32 indexed username, bytes32 indexed target, bool follow);\r\n    event Like(bytes32 indexed username, bytes32 indexed target, uint indexed id);\r\n    event Repost(bytes32 indexed username, bytes32 indexed target, uint indexed id);\r\n    event ChangeFeed(bytes32 indexed username, uint indexed id);\r\n\r\n    function Leeroy(address pointsAddress) {\r\n        points = LeeroyPoints(pointsAddress);\r\n    }\r\n\r\n    // users\r\n    struct User {\r\n        bytes32 username;\r\n        address owner;\r\n        bytes32 detailsHash;\r\n        uint joined;\r\n        uint blockNumber;\r\n        mapping(bytes32 => bool) following;\r\n    }\r\n\r\n    mapping (bytes32 => User) public usernames; // lookup user by username\r\n    mapping (address => bytes32) public addresses; // lookup username by address\r\n\r\n    // posts\r\n    struct Post {\r\n        bytes32 username;\r\n        bytes32 postHash;\r\n        uint timestamp;\r\n        uint blockNumber;\r\n        uint id;\r\n        mapping(bytes32 => bool) likes;\r\n        mapping(bytes32 => bool) reposts;\r\n        uint repostOf;\r\n        uint inReplyTo;\r\n    }\r\n\r\n    Post[] public posts;\r\n\r\n    function registerUsername(bytes32 username) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        if (usernames[username].owner != 0) throw; // prevents registration of existing name\r\n        if (user.owner != 0) throw; // prevents registered address from registering another name\r\n        if (!isLowercase(username)) throw; // username must be lowercase\r\n        var newUser = User({\r\n            username: username,\r\n            owner: msg.sender,\r\n            detailsHash: \"\",\r\n            joined: block.timestamp,\r\n            blockNumber: block.number,\r\n        });\r\n        usernames[username] = newUser;\r\n        addresses[msg.sender] = username;\r\n        NewUser(username);\r\n        points.create(pointsPerAction, msg.sender);\r\n    }\r\n\r\n    function updateUserDetails(bytes32 detailsHash) {\r\n        var senderUsername = addresses[msg.sender]; // lookup registered username for this address\r\n        var user = usernames[senderUsername]; // get user details\r\n        if (user.owner == 0) throw; // user must be registered\r\n        user.detailsHash = detailsHash;\r\n    }\r\n\r\n    function follow(bytes32 username) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        var target = usernames[username];\r\n        var following = user.following[target.username];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        if (target.owner == 0) throw; // target must be registered\r\n        if (user.username == target.username) throw; // user cannot follow themself\r\n        if (following == true) throw; // user must not have followed target already\r\n        user.following[target.username] = true;\r\n        Follow(user.username, target.username, true);\r\n    }\r\n\r\n    function unfollow(bytes32 username) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        var target = usernames[username];\r\n        var following = user.following[target.username];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        if (target.owner == 0) throw; // target must be registered\r\n        if (user.username == target.username) throw; // user cannot follow themself\r\n        if (following == false) throw; // user must be following target\r\n        user.following[target.username] = false;\r\n        Follow(user.username, target.username, false);\r\n    }\r\n\r\n    function post(bytes32 postHash) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        // create post\r\n        var id = posts.length + 1;\r\n        posts.push(Post({\r\n            username: user.username,\r\n            postHash: postHash,\r\n            timestamp: block.timestamp,\r\n            blockNumber: block.number,\r\n            id: id,\r\n            repostOf: 0,\r\n            inReplyTo: 0,\r\n        }));\r\n        NewPost(user.username, id);\r\n        points.create(pointsPerAction, user.owner);\r\n    }\r\n\r\n    function reply(bytes32 postHash, uint id) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        uint index = id - 1;\r\n        var post = posts[index];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        if (post.id == 0) throw; // post must exist\r\n        var postId = posts.length + 1;\r\n        posts.push(Post({\r\n            username: user.username,\r\n            postHash: postHash,\r\n            timestamp: block.timestamp,\r\n            blockNumber: block.number,\r\n            id: postId,\r\n            repostOf: 0,\r\n            inReplyTo: post.id,\r\n        }));\r\n        Reply(user.username, post.username, post.id);\r\n        ChangeFeed(post.username, post.id);\r\n        NewPost(user.username, postId);\r\n        if (user.username != post.username) {\r\n            // points only created when interacting with other user content\r\n            points.create(pointsPerAction, usernames[post.username].owner);\r\n            points.create(pointsPerAction, user.owner);\r\n        }\r\n    }\r\n\r\n    function repost(uint id) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        uint index = id - 1;\r\n        var post = posts[index];\r\n        var reposted = post.reposts[user.username];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        if (post.id == 0) throw; // post must exist\r\n        if (reposted == true) throw; // user must not have reposted already\r\n        post.reposts[user.username] = true;\r\n        var postId = posts.length + 1;\r\n        posts.push(Post({\r\n            username: user.username,\r\n            postHash: \"\",\r\n            timestamp: block.timestamp,\r\n            blockNumber: block.number,\r\n            id: postId,\r\n            repostOf: post.id,\r\n            inReplyTo: 0,\r\n        }));\r\n        Repost(user.username, post.username, post.id);\r\n        ChangeFeed(post.username, post.id);\r\n        NewPost(user.username, postId);\r\n        if (user.username != post.username) {\r\n            points.create(pointsPerAction, usernames[post.username].owner);\r\n            points.create(pointsPerAction, user.owner);\r\n        }\r\n    }\r\n\r\n    function like(uint id) {\r\n        var senderUsername = addresses[msg.sender];\r\n        var user = usernames[senderUsername];\r\n        uint index = id - 1;\r\n        var post = posts[index];\r\n        var liked = post.likes[user.username];\r\n        if (user.owner == 0) throw; // user must be registered\r\n        if (post.id == 0) throw; // post must exist\r\n        if (liked == true) throw; // user must not have liked already\r\n        post.likes[user.username] = true;\r\n        Like(user.username, post.username, post.id);\r\n        ChangeFeed(post.username, post.id);\r\n        if (user.username != post.username) {\r\n            points.create(pointsPerAction, usernames[post.username].owner);\r\n            points.create(pointsPerAction, user.owner);\r\n        }\r\n    }\r\n\r\n    function isLowercase(bytes32 self) internal constant returns (bool) {\r\n        for (uint i = 0; i < 32; i++) {\r\n            byte char = byte(bytes32(uint(self) * 2 ** (8 * i)));\r\n            if (char >= 0x41 && char <= 0x5A) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getUserBlockNumber(bytes32 username) constant returns (uint) {\r\n        return usernames[username].blockNumber;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"name\":\"username\",\"type\":\"bytes32\"},{\"name\":\"postHash\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"repostOf\",\"type\":\"uint256\"},{\"name\":\"inReplyTo\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"repost\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"points\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"detailsHash\",\"type\":\"bytes32\"}],\"name\":\"updateUserDetails\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"unfollow\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"registerUsername\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"getUserBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"follow\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"postHash\",\"type\":\"bytes32\"}],\"name\":\"post\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"like\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"postHash\",\"type\":\"bytes32\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"reply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usernames\",\"outputs\":[{\"name\":\"username\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"detailsHash\",\"type\":\"bytes32\"},{\"name\":\"joined\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"pointsAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Reply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"follow\",\"type\":\"bool\"}],\"name\":\"Follow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Like\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Repost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ChangeFeed\",\"type\":\"event\"}]","ContractName":"Leeroy","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006088a529b22cc225f0780a5b29b09d34017f6c39","Library":"","SwarmSource":"bzzr://334f5398ec2c0bf50420d8cae7c1c31c23fb6965244eb0222a7d57003bbdf35d"}]}