{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract HYIP {\r\n\t\r\n\t/* CONTRACT SETUP */\r\n\r\n\tuint constant PAYOUT_INTERVAL = 1 days;\r\n\r\n\t/* NB: Solidity doesn't support fixed or floats yet, so we use promille instead of percent */\t\r\n\tuint constant BENEFICIARIES_INTEREST = 37;\r\n\tuint constant INVESTORS_INTEREST = 33;\r\n\tuint constant INTEREST_DENOMINATOR = 1000;\r\n\r\n\t/* DATA TYPES */\r\n\r\n\t/* the payout happend */\r\n\tevent Payout(uint paidPeriods, uint investors, uint beneficiaries);\r\n\t\r\n\t/* Investor struct: describes a single investor */\r\n\tstruct Investor\r\n\t{\t\r\n\t\taddress etherAddress;\r\n\t\tuint deposit;\r\n\t\tuint investmentTime;\r\n\t}\r\n\r\n\t/* FUNCTION MODIFIERS */\r\n\tmodifier adminOnly { if (msg.sender == m_admin) _; }\r\n\r\n\t/* VARIABLE DECLARATIONS */\r\n\r\n\t/* the contract owner, the only address that can change beneficiaries */\r\n\taddress private m_admin;\r\n\r\n\t/* the time of last payout */\r\n\tuint private m_latestPaidTime;\r\n\r\n\t/* Array of investors */\r\n\tInvestor[] private m_investors;\r\n\r\n\t/* Array of beneficiaries */\r\n\taddress[] private m_beneficiaries;\r\n\t\r\n\t/* PUBLIC FUNCTIONS */\r\n\r\n\t/* contract constructor, sets the admin to the address deployed from and adds benificary */\r\n\tfunction HYIP() \r\n\t{\r\n\t\tm_admin = msg.sender;\r\n\t\tm_latestPaidTime = now;\t\t\r\n\t}\r\n\r\n\t/* fallback function: called when the contract received plain ether */\r\n\tfunction() payable\r\n\t{\r\n\t\taddInvestor();\r\n\t}\r\n\r\n\tfunction Invest() payable\r\n\t{\r\n\t\taddInvestor();\t\r\n\t}\r\n\r\n\tfunction status() constant returns (uint bank, uint investorsCount, uint beneficiariesCount, uint unpaidTime, uint unpaidIntervals)\r\n\t{\r\n\t\tbank = this.balance;\r\n\t\tinvestorsCount = m_investors.length;\r\n\t\tbeneficiariesCount = m_beneficiaries.length;\r\n\t\tunpaidTime = now - m_latestPaidTime;\r\n\t\tunpaidIntervals = unpaidTime / PAYOUT_INTERVAL;\r\n\t}\r\n\r\n\r\n\t/* checks if it's time to make payouts. if so, send the ether */\r\n\tfunction performPayouts()\r\n\t{\r\n\t\tuint paidPeriods = 0;\r\n\t\tuint investorsPayout;\r\n\t\tuint beneficiariesPayout = 0;\r\n\r\n\t\twhile(m_latestPaidTime + PAYOUT_INTERVAL < now)\r\n\t\t{\t\t\t\t\t\t\r\n\t\t\tuint idx;\r\n\r\n\t\t\t/* pay the beneficiaries */\t\t\r\n\t\t\tif(m_beneficiaries.length > 0) \r\n\t\t\t{\r\n\t\t\t\tbeneficiariesPayout = (this.balance * BENEFICIARIES_INTEREST) / INTEREST_DENOMINATOR;\r\n\t\t\t\tuint eachBeneficiaryPayout = beneficiariesPayout / m_beneficiaries.length;  \r\n\t\t\t\tfor(idx = 0; idx < m_beneficiaries.length; idx++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!m_beneficiaries[idx].send(eachBeneficiaryPayout))\r\n\t\t\t\t\t\tthrow;\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* pay the investors  */\r\n\t\t\t/* we use reverse iteration here */\r\n\t\t\tfor (idx = m_investors.length; idx-- > 0; )\r\n\t\t\t{\r\n\t\t\t\tif(m_investors[idx].investmentTime > m_latestPaidTime + PAYOUT_INTERVAL)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tuint payout = (m_investors[idx].deposit * INVESTORS_INTEREST) / INTEREST_DENOMINATOR;\r\n\t\t\t\tif(!m_investors[idx].etherAddress.send(payout))\r\n\t\t\t\t\tthrow;\r\n\t\t\t\tinvestorsPayout += payout;\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* save the latest paid time */\r\n\t\t\tm_latestPaidTime += PAYOUT_INTERVAL;\r\n\t\t\tpaidPeriods++;\r\n\t\t}\r\n\t\t\t\r\n\t\t/* emit the Payout event */\r\n\t\tPayout(paidPeriods, investorsPayout, beneficiariesPayout);\r\n\t}\r\n\r\n\t/* PRIVATE FUNCTIONS */\r\n\tfunction addInvestor() private \r\n\t{\r\n\t\tm_investors.push(Investor(msg.sender, msg.value, now));\r\n\t}\r\n\r\n\t/* ADMIN FUNCTIONS */\r\n\r\n\t/* pass the admin rights to another address */\r\n\tfunction changeAdmin(address newAdmin) adminOnly \r\n\t{\r\n\t\tm_admin = newAdmin;\r\n\t}\r\n\r\n\t/* add one more benificiary to the list */\r\n\tfunction addBeneficiary(address beneficiary) adminOnly\r\n\t{\r\n\t\tm_beneficiaries.push(beneficiary);\r\n\t}\r\n\r\n\r\n\t/* reset beneficiary list */\r\n\tfunction resetBeneficiaryList() adminOnly\r\n\t{\r\n\t\tdelete m_beneficiaries;\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"bank\",\"type\":\"uint256\"},{\"name\":\"investorsCount\",\"type\":\"uint256\"},{\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"name\":\"unpaidTime\",\"type\":\"uint256\"},{\"name\":\"unpaidIntervals\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetBeneficiaryList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"performPayouts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paidPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiaries\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"}]","ContractName":"HYIP","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ffe85bf72ed867907f434968de0e501a2c429e04ae2eabac222d163f95565eb"}]}