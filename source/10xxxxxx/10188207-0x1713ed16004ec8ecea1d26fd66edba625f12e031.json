{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/StakingAsset.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract StakingAsset is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @trusttoken/registry/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] calldata _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ProxyStorage.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n/**\r\n * All storage must be declared here\r\n * New storage must be appended to the end\r\n * Never remove items from this list\r\n */\r\ncontract ProxyStorage {\r\n    bool initalized;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (uint144 => uint256) attributes; // see RegistrySubscriber\r\n\r\n    address owner_;\r\n    address pendingOwner_;\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 64         uint256(address),uint256(1)                                   balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(2))       allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(3))                attributes\r\n    **/\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ValSafeMath.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n/**\r\n * Forked subset of Openzeppelin SafeMath allowing custom underflow/overflow messages\r\n * Useful for debugging, replaceable with standard SafeMath\r\n */\r\nlibrary ValSafeMath {\r\n    function add(uint256 a, uint256 b, string memory overflowMessage) internal pure returns (uint256 result) {\r\n        result = a + b;\r\n        require(result >= a, overflowMessage);\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory underflowMessage) internal pure returns (uint256 result) {\r\n        require(b <= a, underflowMessage);\r\n        result = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b, string memory overflowMessage) internal pure returns (uint256 result) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        result = a * b;\r\n        require(result / a == b, overflowMessage);\r\n    }\r\n    function div(uint256 a, uint256 b, string memory divideByZeroMessage) internal pure returns (uint256 result) {\r\n        require(b > 0, divideByZeroMessage);\r\n        result = a / b;\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ERC20.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\n// Fork of OpenZeppelin's BasicToken\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract ModularBasicToken is ProxyStorage {\r\n    using ValSafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function _addBalance(address _who, uint256 _value) internal returns (uint256 priorBalance) {\r\n        priorBalance = balanceOf[_who];\r\n        balanceOf[_who] = priorBalance.add(_value, \"balance overflow\");\r\n    }\r\n\r\n    function _subBalance(address _who, uint256 _value) internal returns (uint256 result) {\r\n        result = balanceOf[_who].sub(_value, \"insufficient balance\");\r\n        balanceOf[_who] = result;\r\n    }\r\n\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        balanceOf[_who] = _value;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ModularStandardToken is ModularBasicToken {\r\n    using ValSafeMath for uint256;\r\n    uint256 constant INFINITE_ALLOWANCE = 0xfe00000000000000000000000000000000000000000000000000000000000000;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _approveAllArgs(_spender, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\r\n        _setAllowance(_tokenHolder, _spender, _value);\r\n        emit Approval(_tokenHolder, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        _increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _increaseApprovalAllArgs(address _spender, uint256 _addedValue, address _tokenHolder) internal {\r\n        _addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(_tokenHolder, _spender, allowance[_tokenHolder][_spender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        _decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _decreaseApprovalAllArgs(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\r\n        uint256 oldValue = allowance[_tokenHolder][_spender];\r\n        uint256 newValue;\r\n        if (_subtractedValue > oldValue) {\r\n            newValue = 0;\r\n        } else {\r\n            newValue = oldValue - _subtractedValue;\r\n        }\r\n        _setAllowance(_tokenHolder, _spender, newValue);\r\n        emit Approval(_tokenHolder,_spender, newValue);\r\n    }\r\n\r\n    function _addAllowance(address _who, address _spender, uint256 _value) internal {\r\n        allowance[_who][_spender] = allowance[_who][_spender].add(_value, \"allowance overflow\");\r\n    }\r\n\r\n    function _subAllowance(address _who, address _spender, uint256 _value) internal returns (uint256 newAllowance){\r\n        newAllowance = allowance[_who][_spender].sub(_value, \"insufficient allowance\");\r\n        if (newAllowance < INFINITE_ALLOWANCE) {\r\n            allowance[_who][_spender] = newAllowance;\r\n        }\r\n    }\r\n\r\n    function _setAllowance(address _who, address _spender, uint256 _value) internal {\r\n        allowance[_who][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/RegistrySubscriber.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract RegistrySubscriber is ProxyStorage {\r\n    // Registry Attributes\r\n    bytes32 constant PASSED_KYCAML = \"hasPassedKYC/AML\";\r\n    bytes32 constant IS_DEPOSIT_ADDRESS = \"isDepositAddress\";\r\n    bytes32 constant BLACKLISTED = 0x6973426c61636b6c697374656400000000000000000000000000000000000000;\r\n    bytes32 constant REGISTERED_CONTRACT = 0x697352656769737465726564436f6e7472616374000000000000000000000000;\r\n\r\n    // attributes Bitmasks\r\n    uint256 constant ACCOUNT_BLACKLISTED     = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_BLACKLISTED_INV = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_KYC             = 0x00ff000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_KYC_INV         = 0xff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_ADDRESS         = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_ADDRESS_INV     = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_HOOK            = 0x0000ff0000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_HOOK_INV        = 0xffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    function registry() internal view returns (Registry);\r\n\r\n    modifier onlyRegistry {\r\n        require(msg.sender == address(registry()));\r\n        _;\r\n    }\r\n\r\n    /**\r\n        Attributes are set per autosweep account\r\n        The layout of attributes is detailed here\r\n        lower bytes -> upper bytes\r\n        [0, 20)  recipient address\r\n        [29, 30) REGISTERED_CONTRACT\r\n        [30, 31) PASSED_KYCAML\r\n        [31, 32) BLACKLISTED\r\n    */\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\r\n        uint144 who = uint144(uint160(_who) >> 20);\r\n        uint256 prior = attributes[who];\r\n        if (prior == 0) {\r\n            prior = uint256(_who);\r\n        }\r\n        if (_attribute == IS_DEPOSIT_ADDRESS) {\r\n            if (address(prior) != address(_value)) {\r\n                // TODO sweep balance from address(prior) to address(_value)\r\n            }\r\n            attributes[who] = (prior & ACCOUNT_ADDRESS_INV) | uint256(address(_value));\r\n        } else if (_attribute == BLACKLISTED) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_BLACKLISTED;\r\n            } else  {\r\n                attributes[who] = prior & ACCOUNT_BLACKLISTED_INV;\r\n            }\r\n        } else if (_attribute == PASSED_KYCAML) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_KYC;\r\n            } else {\r\n                attributes[who] = prior & ACCOUNT_KYC_INV;\r\n            }\r\n        } else if (_attribute == REGISTERED_CONTRACT) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_HOOK;\r\n            } else {\r\n                attributes[who] = prior & ACCOUNT_HOOK_INV;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/TrueCoinReceiver.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\ncontract TrueCoinReceiver {\r\n    function tokenFallback( address from, uint256 value ) external;\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ValTokenWithHook.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\ncontract ValTokenWithHook is IERC20, ModularStandardToken, RegistrySubscriber {\r\n\r\n    event Burn(address indexed from, uint256 indexed amount);\r\n    event Mint(address indexed to, uint256 indexed amount);\r\n\r\n    function _resolveRecipient(address _to) internal view returns (address to, bool hook) {\r\n        uint256 flags = (attributes[uint144(uint160(_to) >> 20)]);\r\n        if (flags == 0) {\r\n            to = _to;\r\n            // attributes[uint144(uint160(to) >> 20)] = uint256(to);\r\n            hook = false;\r\n        } else {\r\n            to = address(flags);\r\n            hook = (flags & ACCOUNT_HOOK) != 0;\r\n        }\r\n    }\r\n\r\n    modifier resolveSender(address _from) {\r\n        uint256 flags = (attributes[uint144(uint160(_from) >> 20)]);\r\n        address from = address(flags);\r\n        if (from != address(0)) {\r\n            require(from == _from, \"account collision\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function _transferFromAllArgs(address _from, address _to, uint256 _value, address _spender) internal {\r\n        _subAllowance(_from, _spender, _value);\r\n        _transferAllArgs(_from, _to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        _transferFromAllArgs(_from, _to, _value, msg.sender);\r\n        return true;\r\n    }\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        _transferAllArgs(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal resolveSender(_from) {\r\n        _subBalance(_from, _value);\r\n        emit Transfer(_from, _to, _value);\r\n        bool hasHook;\r\n        address to;\r\n        (to, hasHook) = _resolveRecipient(_to);\r\n        _addBalance(to, _value);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        if (hasHook) {\r\n            TrueCoinReceiver(to).tokenFallback(_from, _value);\r\n        }\r\n    }\r\n\r\n    function _burn(address _from, uint256 _value) internal returns (uint256 resultBalance_, uint256 resultSupply_) {\r\n        emit Transfer(_from, address(0), _value);\r\n        emit Burn(_from, _value);\r\n        resultBalance_ = _subBalance(_from, _value);\r\n        resultSupply_ = totalSupply.sub(_value, \"removing more stake than in supply\");\r\n        totalSupply = resultSupply_;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _value) internal {\r\n        emit Transfer(address(0), _to, _value);\r\n        emit Mint(_to, _value);\r\n        (address to, bool hook) = _resolveRecipient(_to);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        _addBalance(to, _value);\r\n        totalSupply = totalSupply.add(_value, \"totalSupply overflow\");\r\n        if (hook) {\r\n            TrueCoinReceiver(to).tokenFallback(address(0x0), _value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/AStakedToken.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Abstract StakedToken\r\n * @dev Single token staking model for ERC-20\r\n * StakedToken represents a share in an Assurace Pool.\r\n * Accounts stake ERC-20 staking asset and recieve ERC-20 reward asset.\r\n * StakingOpportunityFactory creates instances of StakedToken\r\n */\r\ncontract AStakedToken is ValTokenWithHook {\r\n    using ValSafeMath for uint256;\r\n\r\n    // current representation of rewards per stake\r\n    // this number only goes up\r\n    uint256 cumulativeRewardsPerStake;\r\n\r\n    // amount each account has claimed up to cumulativeRewardsPerStake\r\n    // claiming rewards sets claimedRewardsPerStake to cumulativeRewardsPerStake\r\n    mapping (address => uint256) claimedRewardsPerStake;\r\n\r\n    // amount that has been awarded to the pool but not pool holders\r\n    // tracks leftovers for when stake gets very large\r\n    // strictly less than total supply, usually ever less than $1\r\n    // rolls over the next time we award\r\n    uint256 rewardsRemainder;\r\n\r\n    // total value of stake not currently in supply and not currrently withdrawn\r\n    // need this to calculate how many new staked tokens to awarn when depositing\r\n    uint256 public stakePendingWithdrawal;\r\n\r\n    // map accounts => timestamp => money\r\n    // have to reference timestamp to access previous withdrawal\r\n    // multiple withdrawals in the same block increase amount for that timestamp\r\n    // same acconut that initiates withdrawal needs to complete withdrawal\r\n    mapping (address => mapping (uint256 => uint256)) pendingWithdrawals;\r\n\r\n    // unstake period in days\r\n    uint256 constant UNSTAKE_PERIOD = 14 days;\r\n\r\n    // PendingWithdrawal event is initiated when finalizing stake\r\n    // used to help user interfaces\r\n    event PendingWithdrawal(address indexed staker, uint256 indexed timestamp, uint256 indexed amount);\r\n\r\n    /**\r\n     * @dev Get unclaimed reward balance for staker\r\n     * @param _staker address of staker\r\n     * @return claimedRewards_ withdrawable amount of rewards belonging to this staker\r\n    **/\r\n    function unclaimedRewards(address _staker) public view returns (uint256 unclaimedRewards_) {\r\n        uint256 stake = balanceOf[_staker];\r\n        if (stake == 0) {\r\n            return 0;\r\n        }\r\n        unclaimedRewards_ = stake.mul(cumulativeRewardsPerStake.sub(claimedRewardsPerStake[_staker], \"underflow\"), \"unclaimed rewards overflow\");\r\n    }\r\n\r\n    /// @return ERC-20 stake asset\r\n    function stakeAsset() internal view returns (StakingAsset);\r\n\r\n    /// @return ERC-20 reward asset\r\n    function rewardAsset() internal view returns (StakingAsset);\r\n\r\n    /// @return liquidator address\r\n    function liquidator() internal view returns (address);\r\n\r\n    // max int size to prevent overflow\r\n    uint256 constant MAX_UINT256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    // default ratio is how much we multiply trusttokens by to calculate stake\r\n    // helps achieve precision when dividing\r\n    uint256 constant DEFAULT_RATIO = 1000;\r\n\r\n    /**\r\n     * @dev Initialize function called by constructor\r\n     * Approves liqudiator for maximum amount\r\n    */\r\n    function initialize() internal {\r\n        stakeAsset().approve(liquidator(), MAX_UINT256);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides from ValTokenWithHook to track rewards remainder\r\n     * If account is zero, we consider this value for gas refund\r\n     * When you transfer your stake you transfer your unclaimed rewards\r\n     * Contracts that have this staking token don't know they have rewards\r\n     * This way we an exchange on uniswap or other exchanges\r\n     */\r\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal resolveSender(_from) {\r\n        uint256 fromRewards = claimedRewardsPerStake[_from];\r\n        if (_subBalance(_from, _value) == 0) {\r\n            claimedRewardsPerStake[_from] = 0;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        (address to, bool hasHook) = _resolveRecipient(_to);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        // here we track rewards remainder and claimed rewards per stake\r\n        // claimed rewards per stake of _to is the weighted average of the\r\n        // prior value and added value according to their unclaimedrewards\r\n        uint256 priorBalance = _addBalance(to, _value);\r\n        uint256 numerator = (_value * fromRewards + priorBalance * claimedRewardsPerStake[to]);\r\n        uint256 denominator = (_value + priorBalance);\r\n        uint256 result = numerator / denominator;\r\n        uint256 remainder = numerator % denominator;\r\n        if (remainder > 0) {\r\n            // remainder always less than denominator\r\n            rewardsRemainder = rewardsRemainder.add(denominator - remainder, \"remainder overflow\");\r\n            result += 1;\r\n        }\r\n        claimedRewardsPerStake[to] = result;\r\n        if (hasHook) {\r\n            TrueCoinReceiver(to).tokenFallback(_from, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides from ValTokenWithHook\r\n     * At award time, award is not distributed to pending withdrawals\r\n     * At deposit time, pending withdrawals are remembered to calculate stake per deposit\r\n     * At slash time, pending withdrawals are slashed\r\n     * So, pending withdrawals are quantified in stake\r\n     * Pending withdrawals reduce both\r\n     * Only KYC approved accounts can claim rewards\r\n     * Called by initUnstake to burn and modify total supply\r\n     * We use totalSupply to calculate rewards\r\n     */\r\n    function _burn(address _from, uint256 _value) internal returns (uint256 resultBalance_, uint256 resultSupply_) {\r\n        (resultBalance_, resultSupply_) = super._burn(_from, _value);\r\n        uint256 userClaimedRewardsPerStake = claimedRewardsPerStake[_from];\r\n        uint256 totalRewardsPerStake = cumulativeRewardsPerStake;\r\n        uint256 pendingRewards = (totalRewardsPerStake - userClaimedRewardsPerStake) * _value;\r\n        if (resultBalance_ == 0) {\r\n            // pay out the unclaimed rewards to the pool\r\n            _award(pendingRewards);\r\n        } else {\r\n            // merge unclaimed rewards with remaining balance\r\n            // in the case this goes negative, award remainder to pool\r\n            uint256 pendingRewardsPerStake = pendingRewards / resultBalance_;\r\n            uint256 award_ = pendingRewards % resultBalance_;\r\n            if (pendingRewardsPerStake > userClaimedRewardsPerStake) {\r\n                claimedRewardsPerStake[_from] = 0;\r\n                _award(award_.add((pendingRewardsPerStake - userClaimedRewardsPerStake).mul(resultBalance_, \"award overflow\"), \"award overflow?\"));\r\n            } else {\r\n                claimedRewardsPerStake[_from] = userClaimedRewardsPerStake - pendingRewardsPerStake;\r\n                _award(award_);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides from ValTokenWithHook\r\n     * Checks rewards remainder of recipient of mint\r\n     */\r\n    function _mint(address _to, uint256 _value) internal {\r\n        emit Transfer(address(0), _to, _value);\r\n        emit Mint(_to, _value);\r\n        (address to, bool hook) = _resolveRecipient(_to);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        uint256 priorBalance = _addBalance(to, _value);\r\n        uint256 numerator = (cumulativeRewardsPerStake * _value + claimedRewardsPerStake[_to] * priorBalance);\r\n        uint256 denominator = (priorBalance + _value);\r\n        uint256 result = numerator / denominator;\r\n        uint256 remainder = numerator % denominator;\r\n        if (remainder > 0) {\r\n            rewardsRemainder = rewardsRemainder.add(denominator - remainder, \"remainder overflow\");\r\n            result += 1;\r\n        }\r\n        claimedRewardsPerStake[_to] = result;\r\n        totalSupply = totalSupply.add(_value, \"totalSupply overflow\");\r\n        if (hook) {\r\n            TrueCoinReceiver(to).tokenFallback(address(0x0), _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when this contract recieves stake. Called by token fallback.\r\n     * Issue stake to _staker according to _amount\r\n     * Invoked after _amount is deposited in this contract\r\n    */\r\n    function _deposit(address _staker, uint256 _amount) internal {\r\n        uint256 balance = stakeAsset().balanceOf(address(this));\r\n        uint256 stakeAmount;\r\n        if (_amount < balance) {\r\n            stakeAmount = _amount.mul(totalSupply.add(stakePendingWithdrawal, \"stakePendingWithdrawal > totalSupply\"), \"overflow\").div(balance - _amount, \"insufficient deposit\");\r\n        } else {\r\n            // first staker\r\n            require(totalSupply == 0, \"pool drained\");\r\n            stakeAmount = _amount * DEFAULT_RATIO;\r\n        }\r\n        _mint(_staker, stakeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev If is reward asset, reward pool.\r\n     * If stake asset, deposit.\r\n     * Single staking token model. Can't stake TUSD for TUSD.\r\n     */\r\n    function tokenFallback(address _originalSender, uint256 _amount) external {\r\n        if (msg.sender == address(stakeAsset())) {\r\n            if (_originalSender == liquidator()) {\r\n                // do not credit the liquidator\r\n                return;\r\n            }\r\n            _deposit(_originalSender, _amount);\r\n        } else if (msg.sender == address(rewardAsset())) {\r\n            _award(_amount);\r\n        } else {\r\n            revert(\"Wrong token\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit stake into the pool.\r\n     * @param _amount amount to deposit.\r\n     */\r\n    function deposit(uint256 _amount) external {\r\n        require(stakeAsset().transferFrom(msg.sender, address(this), _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize unstake. Can specify a portion of your balance to unstake.\r\n     * @param _maxAmount max amount caller wishes to unstake (in this.balanceOf units)\r\n     * @return unstake_\r\n    */\r\n    function initUnstake(uint256 _maxAmount) external returns (uint256 unstake_) {\r\n        unstake_ = balanceOf[msg.sender];\r\n        if (unstake_ > _maxAmount) {\r\n            unstake_ = _maxAmount;\r\n        }\r\n        _burn(msg.sender, unstake_); // burn tokens\r\n\r\n        // add to stake pending withdrawals and account pending withdrawals\r\n        stakePendingWithdrawal = stakePendingWithdrawal.add(unstake_, \"stakePendingWithdrawal overflow\");\r\n        pendingWithdrawals[msg.sender][now] = pendingWithdrawals[msg.sender][now].add(unstake_, \"pendingWithdrawals overflow\");\r\n        emit PendingWithdrawal(msg.sender, now, unstake_);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize unstake after 2 weeks.\r\n     * Loop over timestamps\r\n     * Checks if unstake perioud has passed, if yes, calculate how much stake account get\r\n     * @param recipient recipient of\r\n     * @param _timestamps timestamps to\r\n     */\r\n    function finalizeUnstake(address recipient, uint256[] calldata _timestamps) external {\r\n        uint256 totalUnstake = 0;\r\n        // loop through timestamps and calculate total unstake\r\n        for (uint256 i = _timestamps.length; i --> 0;) {\r\n            uint256 timestamp = _timestamps[i];\r\n            require(timestamp + UNSTAKE_PERIOD <= now, \"must wait 2 weeks to unstake\");\r\n            // add to total unstake amount\r\n            totalUnstake = totalUnstake.add(pendingWithdrawals[msg.sender][timestamp], \"stake overflow\");\r\n\r\n            pendingWithdrawals[msg.sender][timestamp] = 0;\r\n        }\r\n        IERC20 stake = stakeAsset(); // get stake asset\r\n        uint256 totalStake = stake.balanceOf(address(this)); // get total stake\r\n\r\n        // calulate correstponding stake\r\n        // consider stake pending withdrawal and total supply of stake token\r\n        // totalUnstake / totalSupply = correspondingStake / totalStake\r\n        // totalUnstake * totalStake / totalSupply = correspondingStake\r\n        uint256 correspondingStake = totalStake.mul(totalUnstake, \"totalStake*totalUnstake overflow\").div(totalSupply.add(stakePendingWithdrawal, \"overflow totalSupply+stakePendingWithdrawal\"), \"zero totals\");\r\n        stakePendingWithdrawal = stakePendingWithdrawal.sub(totalUnstake, \"stakePendingWithdrawal underflow\");\r\n        stake.transfer(recipient, correspondingStake);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer awards to the staking pool\r\n     * @param _amount of rewardAsset to award\r\n     */\r\n    function award(uint256 _amount) external {\r\n        require(rewardAsset().transferFrom(msg.sender, address(this), _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Award stakig pool.\r\n     * @param _amount amount of rewardAsset to reward\r\n     */\r\n    function _award(uint256 _amount) internal {\r\n        uint256 remainder = rewardsRemainder.add(_amount, \"rewards overflow\");\r\n        uint256 totalStake = totalSupply;\r\n        if (totalStake > 0) {\r\n            uint256 rewardsAdded = remainder / totalStake;\r\n            rewardsRemainder = remainder % totalStake;\r\n            cumulativeRewardsPerStake = cumulativeRewardsPerStake.add(rewardsAdded, \"cumulative rewards overflow\");\r\n        } else {\r\n            rewardsRemainder = remainder;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Claim rewards and send to a destination.\r\n     * Fails if sender account is not KYC.\r\n     * KYC flag doesn't have to be synced to the registry.\r\n     * @param _destination withdraw destination\r\n     */\r\n    function claimRewards(address _destination) external {\r\n        // check KYC attribte\r\n        require(attributes[uint144(uint160(msg.sender) >> 20)] & ACCOUNT_KYC != 0 || registry().getAttributeValue(msg.sender, PASSED_KYCAML) != 0, \"please register at app.trusttoken.com\");\r\n\r\n        // calculate how much stake and rewards account has\r\n        uint256 stake = balanceOf[msg.sender];\r\n        if (stake == 0) {\r\n            return;\r\n        }\r\n        uint256 dueRewards = stake.mul(cumulativeRewardsPerStake.sub(claimedRewardsPerStake[msg.sender], \"underflow\"), \"dueRewards overflow\");\r\n        if (dueRewards == 0) {\r\n            return;\r\n        }\r\n        claimedRewardsPerStake[msg.sender] = cumulativeRewardsPerStake;\r\n\r\n        // decimals are 3 more than stake asset decimals\r\n        require(rewardAsset().transfer(_destination, dueRewards));\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return stakeAsset().decimals() + 3;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return string(abi.encodePacked(stakeAsset().name(), \" staked for \", rewardAsset().name()));\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return string(abi.encodePacked(stakeAsset().symbol(), \":\", rewardAsset().symbol()));\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/StakedToken.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StakedToken\r\n * @dev Implementation of AStakedToken\r\n**/\r\ncontract StakedToken is AStakedToken {\r\n    StakingAsset stakeAsset_;\r\n    StakingAsset rewardAsset_;\r\n    Registry registry_;\r\n    address liquidator_;\r\n\r\n    /**\r\n     * @dev configure this contract\r\n     */\r\n    function configure(\r\n        StakingAsset _stakeAsset,\r\n        StakingAsset _rewardAsset,\r\n        Registry _registry,\r\n        address _liquidator\r\n    ) external {\r\n        require(!initalized, \"already initalized StakedToken\");\r\n        stakeAsset_ = _stakeAsset;\r\n        rewardAsset_ = _rewardAsset;\r\n        registry_ = _registry;\r\n        liquidator_ = _liquidator;\r\n        initialize();\r\n        initalized = true;\r\n    }\r\n\r\n    function stakeAsset() internal view returns (StakingAsset) {\r\n        return stakeAsset_;\r\n    }\r\n\r\n    function rewardAsset() internal view returns (StakingAsset) {\r\n        return rewardAsset_;\r\n    }\r\n\r\n    function registry() internal view returns (Registry) {\r\n        return registry_;\r\n    }\r\n\r\n    function liquidator() internal view returns (address) {\r\n        return liquidator_;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract StakingAsset\",\"name\":\"_stakeAsset\",\"type\":\"address\"},{\"internalType\":\"contract StakingAsset\",\"name\":\"_rewardAsset\",\"type\":\"address\"},{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"finalizeUnstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"initUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstake_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakePendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakedToken","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://71cfb5c6367ce0e6779d3d704b082ec924acb0af9a938dca34ddf8ccb6808887"}]}