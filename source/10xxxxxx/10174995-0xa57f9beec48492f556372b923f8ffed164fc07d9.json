{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract RemoteBase {\r\n    IERC20 internal _remoteToken;\r\n    address internal _remoteContractAddress;\r\n    address internal _contractAddress;\r\n    address internal _devAddress;\r\n    constructor (address remoteContractAddress) internal{\r\n        _remoteContractAddress = remoteContractAddress;\r\n        _remoteToken = IERC20(_remoteContractAddress);\r\n        _contractAddress = address(this);\r\n        _devAddress = msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\n \r\ninterface IERC20 {\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract RemoteRead is RemoteBase {\r\n    function remoteBalanceOf(address owner) external view returns (uint256) {\r\n        return _remoteToken.balanceOf(owner);\r\n    }\r\n    function remoteTotalSupply() external view returns (uint256) {\r\n        return _remoteToken.totalSupply();\r\n    }\r\n    /** */\r\n    function remoteAllowance (address owner, address spender) external view returns (uint256) {\r\n        return _remoteToken.allowance(owner, spender);\r\n    }\r\n    /**\r\n    @dev remoteBalanceOfThis Return tokens from the balance of this contract.\r\n    @return balance\r\n     */\r\n    function remoteBalanceOfThis () external view\r\n        returns(uint256 balance) {\r\n        balance = _remoteToken.balanceOf(_contractAddress);\r\n    }\r\n    /**\r\n    * @dev contractDetails\r\n    * @return address contractAddress\r\n    * @return address remoteContractAddress\r\n     */\r\n    function contractDetails() external view returns (\r\n        address contractAddress,\r\n        address remoteContractAddress) {\r\n        contractAddress = _contractAddress;\r\n        remoteContractAddress = _remoteContractAddress;\r\n    }\r\n}\r\ncontract Flip is RemoteRead {\r\n\tusing SafeMath for uint256;\r\n\tuint public payPercentage = 98;\r\n\tuint public devPercentage = 2;\r\n\t// Maximum amount to bet in WEIs\r\n\tuint public maxAmountToBetInTokens = (32) * (10**uint(18));\r\n\tuint public minAmountToBetInTokens = (1) * (10**uint(18));\r\n\tuint playedGamesCount;\r\n\tevent Status (\r\n\t\tstring _msg,\r\n\t\taddress indexed user,\r\n\t\tuint bet,\r\n\t\tuint amount,\r\n\t\tbool winner\r\n\t);\r\n\tconstructor (address remoteContractAddress) public payable\r\n\t\tRemoteBase(remoteContractAddress)\r\n\t\t{\r\n\r\n\t\t}\r\n\tfunction PlayWithTokens(uint256 amountOfTokens) public {\r\n\t\taddress from = msg.sender;\r\n\t\tuint256 amountAllowed = _remoteToken.allowance(from, _contractAddress);\r\n\t\trequire(amountAllowed > 0, \"No allowance has been set\");\r\n\t\tuint256 amountBalance = _remoteToken.balanceOf(from);\r\n\t\trequire(amountBalance >= amountOfTokens, \"Your balance must be equal or more than the amount you wish to send\");\r\n\t\trequire(amountAllowed >= amountOfTokens, \"Your allowance must be equal or more than the amount you wish to send\");\r\n\t\trequire(amountOfTokens >= minAmountToBetInTokens,\r\n\t\t\"You have not requested enough Switch\");\r\n\t\trequire(amountOfTokens <= maxAmountToBetInTokens,\r\n\t\t\"You have requested too many Switch\");\r\n\t\t_playWithTokens(from, amountOfTokens);\r\n\t}\r\n\tfunction () external payable {\r\n\t\trevert();\r\n\t}\r\n\tfunction potentialTokenPrize (uint amountWager) external view returns(uint prize) {\r\n\t\trequire(amountWager >= minAmountToBetInTokens,\r\n\t\t\"You have not requested enough Switch\");\r\n\t\trequire(amountWager <= maxAmountToBetInTokens,\r\n\t\t\"You have requested too many Switch\");\r\n\t\tuint _prize = (amountWager.mul(100 + payPercentage)) / 100;\r\n\t\tuint bankTokenBalance = _remoteToken.balanceOf(_contractAddress);\r\n\t\tif (bankTokenBalance < (_prize)) {\r\n\t\t\t_prize = (bankTokenBalance);\r\n\t\t}\r\n\t\treturn _prize;\r\n\t}\r\n\tfunction _playWithTokens (address from, uint amountInTokens) internal {\r\n\t\tuint amountWager = amountInTokens;\r\n\t\t// The prize at this stage does not include wager\r\n\t\tuint _prize = (amountWager.mul(payPercentage)) / 100;\r\n\t\tuint bankTokenBalance = _remoteToken.balanceOf(_contractAddress);\r\n\t\trequire(bankTokenBalance > 0, \"The Switch Flip fund doesn't have any ESH.\");\r\n\t\tif (uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.number, playedGamesCount))) % 2 == 0){\r\n\t\t\tif (bankTokenBalance < (_prize)) {\r\n\t\t\t\trequire(_remoteToken.transfer(from, bankTokenBalance), \"Transfer must succeed.\");\r\n\t\t\t\t// We do not have enough funds to pay for the prize, so we transfer everything we have\r\n\t\t\t\temit Status (\"Congratulations, you flipped your Switch! Sorry, we didn't have enough rewards, we will give you everything we have!\",\r\n\t\t\t\tfrom, amountWager, bankTokenBalance, true);\r\n\t\t\t} else {\r\n\t\t\t\trequire(_remoteToken.transfer(from, _prize), \"Transfer must succeed.\");\r\n\t\t\t\temit Status (\"Congratulations, you flipped your Switch!\",\r\n\t\t\t\tfrom, amountWager, _prize, true);\r\n\t\t\t}\r\n\t\t\tplayedGamesCount++;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tuint _devFund = (amountWager.mul(devPercentage)) / 100;\r\n\t\t\trequire(_remoteToken.transferFrom(from, _contractAddress, (amountWager.sub(_devFund))), \"Transfer must succeed\");\r\n\t\t\trequire(_remoteToken.transfer(_devAddress, _devFund), \"Transfer must succeed\");\r\n\t\t\temit Status (\"Sorry, your Switch didn't flip! Switch donated to House and Dev.\", from, amountWager, (amountWager.sub(_devFund)), false);\r\n\t\t\tplayedGamesCount++;\r\n\t\t}\r\n\t}\r\n\tfunction getGameCount () public view returns (uint) {\r\n\t\treturn playedGamesCount;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remoteContractAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"}],\"name\":\"Status\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"PlayWithTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountToBetInTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmountToBetInTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWager\",\"type\":\"uint256\"}],\"name\":\"potentialTokenPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"remoteAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"remoteBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remoteBalanceOfThis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remoteTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Flip","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d6a55c63865affd67e2fb9f284f87b7a9e5ff3bd","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6a89d7f2546e95f967e27f6440d3531c4fc024ae671a505d91f7c980fac294f9"}]}