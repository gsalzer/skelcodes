{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract Context {\\n    constructor () internal { }\\n    \\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\"},\"Govern.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ninterface Executor {\\n    function execute(uint, uint, uint, uint) external;\\n}\\n\\ncontract KaniGovernance is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function seize(IERC20 _token, uint amount) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_token != token, \\\"reward\\\");\\n        _token.safeTransfer(governance, amount);\\n    }\\n\\n    bool public breaker = false;\\n    function setBreaker(bool _breaker) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        breaker = _breaker;\\n    }\\n\\n    mapping(address =\\u003e uint) public voteLock; // period that your sake it locked to keep it for voting\\n\\n    struct Proposal {\\n        uint id;\\n        address proposer;\\n        mapping(address =\\u003e uint) forVotes;\\n        mapping(address =\\u003e uint) againstVotes;\\n        uint totalForVotes;\\n        uint totalAgainstVotes;\\n        uint start; // block start;\\n        uint end; // start + period\\n        address executor;\\n        string hash;\\n        uint totalVotesAvailable;\\n        uint quorum;\\n        uint quorumRequired;\\n        bool open;\\n    }\\n\\n    mapping (uint =\\u003e Proposal) public proposals;\\n    uint public proposalCount;\\n    uint public period = 17280; // voting period in blocks ~ 17280 3 days for 15s/block\\n    uint public lock = 17280; // vote lock in blocks ~ 17280 3 days for 15s/block\\n    uint public minimum = 1e18;\\n    uint public quorum = 2000;\\n    bool public config = true;\\n\\n\\n    address public governance;\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setQuorum(uint _quorum) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        quorum = _quorum;\\n    }\\n\\n    function setMinimum(uint _minimum) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        minimum = _minimum;\\n    }\\n\\n    function setPeriod(uint _period) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        period = _period;\\n    }\\n\\n    function setLock(uint _lock) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        lock = _lock;\\n    }\\n\\n    function initialize(uint id) public {\\n        require(config == true, \\\"!config\\\");\\n        config = false;\\n        proposalCount = id;\\n        governance = 0x4384f49d5ABc78cD05dFe37E2FFc35A519262071;\\n    }\\n\\n    event NewProposal(uint id, address creator, uint start, uint duration, address executor);\\n    event Vote(uint indexed id, address indexed voter, bool vote, uint weight);\\n\\n    function propose(address executor, string memory hash) public {\\n        require(votesOf(msg.sender) \\u003e minimum, \\\"\\u003cminimum\\\");\\n        proposals[proposalCount++] = Proposal({\\n            id: proposalCount,\\n            proposer: msg.sender,\\n            totalForVotes: 0,\\n            totalAgainstVotes: 0,\\n            start: block.number,\\n            end: period.add(block.number),\\n            executor: executor,\\n            hash: hash,\\n            totalVotesAvailable: totalVotes,\\n            quorum: 0,\\n            quorumRequired: quorum,\\n            open: true\\n            });\\n\\n        emit NewProposal(proposalCount, msg.sender, block.number, period, executor);\\n        voteLock[msg.sender] = lock.add(block.number);\\n    }\\n\\n    function execute(uint id) public {\\n        (uint _for, uint _against, uint _quorum) = getStats(id);\\n        require(proposals[id].quorumRequired \\u003c _quorum, \\\"!quorum\\\");\\n        require(proposals[id].end \\u003c block.number , \\\"!end\\\");\\n        if (proposals[id].open == true) {\\n            tallyVotes(id);\\n        }\\n        Executor(proposals[id].executor).execute(id, _for, _against, _quorum);\\n    }\\n\\n    function getStats(uint id) public view returns (uint _for, uint _against, uint _quorum) {\\n        _for = proposals[id].totalForVotes;\\n        _against = proposals[id].totalAgainstVotes;\\n\\n        uint _total = _for.add(_against);\\n        _for = _for.mul(10000).div(_total);\\n        _against = _against.mul(10000).div(_total);\\n\\n        _quorum = _total.mul(10000).div(proposals[id].totalVotesAvailable);\\n    }\\n\\n    event ProposalFinished(uint indexed id, uint _for, uint _against, bool quorumReached);\\n\\n    function tallyVotes(uint id) public {\\n        require(proposals[id].open == true, \\\"!open\\\");\\n        require(proposals[id].end \\u003c block.number, \\\"!end\\\");\\n\\n        (uint _for, uint _against,) = getStats(id);\\n        bool _quorum = false;\\n        if (proposals[id].quorum \\u003e= proposals[id].quorumRequired) {\\n            _quorum = true;\\n        }\\n        proposals[id].open = false;\\n        emit ProposalFinished(id, _for, _against, _quorum);\\n    }\\n\\n    function votesOf(address voter) public view returns (uint) {\\n        return votes[voter];\\n    }\\n\\n    uint public totalVotes;\\n    mapping(address =\\u003e uint) public votes;\\n    event RegisterVoter(address voter, uint votes, uint totalVotes);\\n    event RevokeVoter(address voter, uint votes, uint totalVotes);\\n\\n    function register() public {\\n        require(voters[msg.sender] == false, \\\"voter\\\");\\n        voters[msg.sender] = true;\\n        votes[msg.sender] = plyr_[msg.sender].stake;\\n        totalVotes = totalVotes.add(votes[msg.sender]);\\n        emit RegisterVoter(msg.sender, votes[msg.sender], totalVotes);\\n    }\\n\\n\\n    function revoke() public {\\n        require(voters[msg.sender] == true, \\\"!voter\\\");\\n        voters[msg.sender] = false;\\n        if (totalVotes \\u003c votes[msg.sender]) {\\n            //edge case, should be impossible, but this is defi\\n            totalVotes = 0;\\n        } else {\\n            totalVotes = totalVotes.sub(votes[msg.sender]);\\n        }\\n        emit RevokeVoter(msg.sender, votes[msg.sender], totalVotes);\\n        votes[msg.sender] = 0;\\n    }\\n\\n    mapping(address =\\u003e bool) public voters;\\n\\n    function voteFor(uint id) public {\\n        require(proposals[id].start \\u003c block.number , \\\"\\u003cstart\\\");\\n        require(proposals[id].end \\u003e block.number , \\\"\\u003eend\\\");\\n\\n        uint _against = proposals[id].againstVotes[msg.sender];\\n        if (_against \\u003e 0) {\\n            proposals[id].totalAgainstVotes = proposals[id].totalAgainstVotes.sub(_against);\\n            proposals[id].againstVotes[msg.sender] = 0;\\n        }\\n\\n        uint vote = votesOf(msg.sender).sub(proposals[id].forVotes[msg.sender]);\\n        proposals[id].totalForVotes = proposals[id].totalForVotes.add(vote);\\n        proposals[id].forVotes[msg.sender] = votesOf(msg.sender);\\n\\n        proposals[id].totalVotesAvailable = totalVotes;\\n        uint _votes = proposals[id].totalForVotes.add(proposals[id].totalAgainstVotes);\\n        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\\n\\n        voteLock[msg.sender] = lock.add(block.number);\\n\\n        emit Vote(id, msg.sender, true, vote);\\n    }\\n\\n    function voteAgainst(uint id) public {\\n        require(proposals[id].start \\u003c block.number , \\\"\\u003cstart\\\");\\n        require(proposals[id].end \\u003e block.number , \\\"\\u003eend\\\");\\n\\n        uint _for = proposals[id].forVotes[msg.sender];\\n        if (_for \\u003e 0) {\\n            proposals[id].totalForVotes = proposals[id].totalForVotes.sub(_for);\\n            proposals[id].forVotes[msg.sender] = 0;\\n        }\\n\\n        uint vote = votesOf(msg.sender).sub(proposals[id].againstVotes[msg.sender]);\\n        proposals[id].totalAgainstVotes = proposals[id].totalAgainstVotes.add(vote);\\n        proposals[id].againstVotes[msg.sender] = votesOf(msg.sender);\\n\\n        proposals[id].totalVotesAvailable = totalVotes;\\n        uint _votes = proposals[id].totalForVotes.add(proposals[id].totalAgainstVotes);\\n        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\\n\\n        voteLock[msg.sender] = lock.add(block.number);\\n\\n        emit Vote(id, msg.sender, false, vote);\\n    }\\n\\n\\n    IERC20 public token = IERC20(0x790aCe920bAF3af2b773D4556A69490e077F6B4A);\\n\\n    struct Player {\\n        uint256 stake; // 总质押总数\\n        uint256 payout; //\\n        uint256 total_out; // 已经领取的分红\\n    }\\n    mapping(address =\\u003e Player) public plyr_; // (player =\\u003e data) player data\\n\\n    struct Global {\\n        uint256 total_stake; // 总质押总数\\n        uint256 total_out; //  总分红金额\\n        uint256 earnings_per_share; // 每股分红\\n    }\\n    mapping(uint256 =\\u003e Global) public global_; // (global =\\u003e data) global data\\n    mapping (address =\\u003e uint256) public deposittime;\\n    uint256 constant internal magnitude = 10**40;\\n\\n    uint256 constant internal extraReward = 500000*1e18;\\n    uint256 internal rewarded = 0;\\n    uint256 internal dailyReward = extraReward.div(365);\\n    uint256 internal lastUpdateTime = 0;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    function make_profit(uint256 amount) public {\\n        require(amount\\u003e0,\\\"not 0\\\");\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        make_profit_internal(amount);\\n    }\\n    \\n    function make_profit_internal(uint256 amount) internal{\\n        if (global_[0].total_stake \\u003e 0) {\\n            global_[0].earnings_per_share = global_[0].earnings_per_share.add(\\n                amount.mul(magnitude).div(global_[0].total_stake)\\n            );\\n        }\\n        global_[0].total_out = global_[0].total_out.add(amount);\\n        emit RewardAdded(amount);\\n    }\\n\\n    function deposit(uint amount) external daily_reward {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        plyr_[msg.sender].stake = plyr_[msg.sender].stake.add(amount);\\n        if (global_[0].earnings_per_share != 0) {\\n            plyr_[msg.sender].payout = plyr_[msg.sender].payout.add(\\n                global_[0].earnings_per_share.mul(amount).sub(1).div(magnitude).add(1)\\n            );\\n        }\\n        global_[0].total_stake = global_[0].total_stake.add(amount);\\n        deposittime[msg.sender] = now;\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function cal_out(address user) public view returns (uint256) {\\n        uint256 _cal = global_[0].earnings_per_share.mul(plyr_[user].stake).div(magnitude);\\n        if (_cal \\u003c plyr_[user].payout) {\\n            return 0;\\n        } else {\\n            return _cal.sub(plyr_[user].payout);\\n        }\\n    }\\n\\n    function cal_out_pending(uint256 _pendingBalance,address user) public view returns (uint256) {\\n        uint256 _earnings_per_share = global_[0].earnings_per_share.add(\\n            _pendingBalance.mul(magnitude).div(global_[0].total_stake)\\n        );\\n        uint256 _cal = _earnings_per_share.mul(plyr_[user].stake).div(magnitude);\\n        _cal = _cal.sub(cal_out(user));\\n        if (_cal \\u003c plyr_[user].payout) {\\n            return 0;\\n        } else {\\n            return _cal.sub(plyr_[user].payout);\\n        }\\n    }\\n\\n    function claim() public daily_reward {\\n        uint256 out = cal_out(msg.sender);\\n        plyr_[msg.sender].payout = global_[0].earnings_per_share.mul(plyr_[msg.sender].stake).div(magnitude);\\n        plyr_[msg.sender].total_out = plyr_[msg.sender].total_out.add(out);\\n\\n        if (out \\u003e 0) {\\n            uint256 _depositTime = now - deposittime[msg.sender];\\n            if (_depositTime \\u003c 1 days){ //deposit in 24h\\n                uint256 actually_out = _depositTime.mul(out).mul(1e18).div(1 days).div(1e18);\\n                uint256 back_to_profit = out.sub(actually_out);\\n                make_profit_internal(back_to_profit);\\n                out = actually_out;\\n            }\\n            token.safeTransfer(msg.sender, out);\\n            emit RewardPaid(msg.sender, out);\\n        }\\n    }\\n\\n    function withdraw(uint amount) public daily_reward {\\n        claim();\\n        require(amount\\u003c=plyr_[msg.sender].stake,\\\"!balance\\\");\\n        uint r = amount;\\n\\n        // Check balance\\n        uint b = token.balanceOf(address(this));\\n        if (b \\u003c r) {\\n            uint _withdraw = r.sub(b);\\n            // Controller(controller).withdraw(address(token), _withdraw);\\n            uint _after = token.balanceOf(address(this));\\n            uint _diff = _after.sub(b);\\n            if (_diff \\u003c _withdraw) {\\n                r = b.add(_diff);\\n            }\\n        }\\n\\n        plyr_[msg.sender].payout = plyr_[msg.sender].payout.sub(\\n            global_[0].earnings_per_share.mul(amount).div(magnitude)\\n        );\\n        plyr_[msg.sender].stake = plyr_[msg.sender].stake.sub(amount);\\n        global_[0].total_stake = global_[0].total_stake.sub(amount);\\n\\n        token.safeTransfer(msg.sender, r);\\n        emit Withdrawn(msg.sender, r);\\n    }\\n\\n    modifier daily_reward(){\\n        require(lastUpdateTime \\u003e 0, \\\"not start\\\");\\n        if (block.timestamp.sub(lastUpdateTime) \\u003e 1 days \\u0026\\u0026\\n            rewarded \\u003c extraReward) {\\n            rewarded = rewarded.add(dailyReward);\\n            lastUpdateTime = block.timestamp;\\n            make_profit_internal(dailyReward);\\n        }\\n        _;\\n    }\\n\\n    function notifyRewardAmount() public onlyOwner {\\n        require(lastUpdateTime == 0, \\\"inited\\\");\\n        token.mint(address(this),extraReward);\\n        lastUpdateTime = block.timestamp.sub(1 days);\\n        emit RewardAdded(extraReward);\\n    }\\n\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function mint(address account, uint amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary Math {\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"quorumReached\",\"type\":\"bool\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"RegisterVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"RevokeVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cal_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cal_out_pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposittime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"global_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings_per_share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"make_profit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"plyr_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_out\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"votesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KaniGovernance","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://208ddb8199555647e895dfaf6fc573f4a2b69ec1268809c9988f6bcc136ad038"}]}