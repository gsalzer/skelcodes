{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20contract.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED \\\"\\r\\npragma solidity ^0.6.0;\\r\\n// ----------------------------------------------------------------------------\\r\\n// ERC Token Standard #20 Interface\\r\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\r\\n// ----------------------------------------------------------------------------\\r\\nabstract contract ERC20Interface {\\r\\n    function totalSupply() public virtual view returns (uint);\\r\\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\\r\\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\\r\\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\\r\\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\r\\n}\"},\"LockingSale.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\nimport \\u0027./Owned.sol\\u0027;\\r\\nimport \\u0027./Token.sol\\u0027;\\r\\n\\r\\ncontract ZeedexSale is Owned {\\r\\n    \\r\\n    Token token;\\r\\n    enum State {_OPEN, _CLOSE, _UNLOCKED}\\r\\n    \\r\\n    State saleState = State._CLOSE;\\r\\n    \\r\\n    mapping(address =\\u003e uint256) public tokenAllocation;\\r\\n    mapping(uint256 =\\u003e address) public users;\\r\\n    uint256 totalUsers;\\r\\n    uint256 public totalTokens;\\r\\n    \\r\\n    event TokensAllocated(uint256 tokens, address purchaser);\\r\\n    event TokensUnlocked();\\r\\n    \\r\\n    constructor(address payable _owner, address _tokenAddress) public{\\r\\n        owner = _owner; \\r\\n        token = Token(_tokenAddress);\\r\\n    }\\r\\n    \\r\\n    function startSale() external onlyOwner{\\r\\n        require(token.balanceOf(address(this)) \\u003e 0, \\\"tokens: Insufficient token balance of the contract\\\");\\r\\n        require(saleState == State._CLOSE, \\\"sale state: The sale is open already\\\");\\r\\n        \\r\\n        totalTokens = token.balanceOf(address(this));\\r\\n        saleState = State._OPEN; // open sale but tokens are locked\\r\\n    }\\r\\n    \\r\\n    function endSale() external onlyOwner{\\r\\n        require(saleState == State._OPEN, \\\"sale state: Sale is closed already\\\");\\r\\n        \\r\\n        saleState = State._CLOSE;\\r\\n        \\r\\n        if(totalTokens \\u003e 0){\\r\\n            token.transfer(owner, totalTokens);\\r\\n            totalTokens = 0;\\r\\n        }\\r\\n        \\r\\n        owner.transfer(address(this).balance); // send all collected funds to the owner\\r\\n    }\\r\\n    \\r\\n    function unlockTokens() external onlyOwner{\\r\\n        require(saleState == State._CLOSE, \\\"sale state: Sale is open\\\");\\r\\n        saleState = State._UNLOCKED;\\r\\n        sendTokens();\\r\\n        emit TokensUnlocked();\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function sendTokens() internal{\\r\\n        for(uint256 i = 1; i\\u003c= totalUsers; i++){\\r\\n            address _to = users[i];\\r\\n            token.transfer(_to, tokenAllocation[_to]); // transfer tokens to the users\\r\\n            tokenAllocation[_to] = 0;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    // receive ethers\\r\\n    fallback() external payable{\\r\\n        purchase();\\r\\n    }\\r\\n    \\r\\n    // receive ethers with data \\r\\n    receive() external payable{\\r\\n        purchase();\\r\\n    }\\r\\n    \\r\\n    function purchase() internal {\\r\\n        require(saleState == State._OPEN, \\\"sale state: Sale is not open\\\");\\r\\n        require(msg.value \\u003e= 0.5 ether \\u0026\\u0026 msg.value \\u003c= 20 ether, \\\"investment: Purchase amount is not within limits\\\");\\r\\n        require(totalTokens \\u003e= calculateTokens(), \\\"tokens: Insufficient token balance of the contract, try with lower amount\\\");\\r\\n        tokenAllocation[msg.sender] += calculateTokens();\\r\\n        totalTokens -= calculateTokens();\\r\\n        totalUsers++;\\r\\n        users[totalUsers] = msg.sender;\\r\\n        emit TokensAllocated(calculateTokens(), msg.sender);\\r\\n    }\\r\\n    function calculateTokens() internal returns(uint256 _tokens){\\r\\n        /* Calculations\\r\\n        \\r\\n           1 eth = 4000 ZDEX tokens \\r\\n           1 * 10^18 = 4000 * 10 ^ 18 \\r\\n           cancelling 10^18 on b.sides \\r\\n           1 wei = 4000 ZDEX parts\\r\\n           \\r\\n        */\\r\\n        \\r\\n        return msg.value * (4000); \\r\\n    }\\r\\n}\"},\"Owned.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED \\\"\\r\\npragma solidity ^0.6.0;\\r\\n// ----------------------------------------------------------------------------\\r\\n// Owned contract\\r\\n// ----------------------------------------------------------------------------\\r\\ncontract Owned {\\r\\n    address payable public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\r\\n        owner = _newOwner;\\r\\n        emit OwnershipTransferred(msg.sender, _newOwner);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED \\\"\\r\\npragma solidity ^0.6.0;\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n *\\r\\n*/\\r\\n \\r\\nlibrary SafeMath {\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  \\r\\n  function ceil(uint a, uint m) internal pure returns (uint r) {\\r\\n    return (a + m - 1) / m * m;\\r\\n  }\\r\\n}\"},\"Token.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// \\u0027Zeedex\\u0027 token contract\\r\\n\\r\\n// Symbol      : ZDEX\\r\\n// Name        : Zeedex\\r\\n// Total supply: 10,000,000 (10 million)\\r\\n// Decimals    : 18\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./ERC20contract.sol\\u0027;\\r\\nimport \\u0027./Owned.sol\\u0027;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\\r\\n// token transfers\\r\\n// ----------------------------------------------------------------------------\\r\\ncontract Token is ERC20Interface, Owned {\\r\\n    using SafeMath for uint256;\\r\\n    string public symbol = \\\"ZDEX\\\";\\r\\n    string public  name = \\\"Zeedex\\\";\\r\\n    uint256 public decimals = 18;\\r\\n    uint256 _totalSupply = 10 * 1000000 * 10 ** (decimals); \\r\\n    \\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Constructor\\r\\n    // ------------------------------------------------------------------------\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        balances[address(owner)] = totalSupply();\\r\\n        \\r\\n        emit Transfer(address(0),address(owner), totalSupply());\\r\\n    }\\r\\n    \\r\\n    /** ERC20Interface function\\u0027s implementation **/\\r\\n    \\r\\n    function totalSupply() public override view returns (uint256){\\r\\n       return _totalSupply; \\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Get the token balance for account `tokenOwner`\\r\\n    // ------------------------------------------------------------------------\\r\\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Transfer the balance from token owner\\u0027s account to `to` account\\r\\n    // - Owner\\u0027s account must have sufficient balance to transfer\\r\\n    // - 0 value transfers are allowed\\r\\n    // ------------------------------------------------------------------------\\r\\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\\r\\n        // prevent transfer to 0x0, use burn instead\\r\\n        require(address(to) != address(0));\\r\\n        require(balances[msg.sender] \\u003e= tokens );\\r\\n        require(balances[to] + tokens \\u003e= balances[to]);\\r\\n            \\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        emit Transfer(msg.sender,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\\r\\n    // from the token owner\\u0027s account\\r\\n    // ------------------------------------------------------------------------\\r\\n    function approve(address spender, uint256 tokens) public override returns (bool success){\\r\\n        allowed[msg.sender][spender] = tokens;\\r\\n        emit Approval(msg.sender,spender,tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Transfer `tokens` from the `from` account to the `to` account\\r\\n    // \\r\\n    // The calling account must already have sufficient tokens approve(...)-d\\r\\n    // for spending from the `from` account and\\r\\n    // - From account must have sufficient balance to transfer\\r\\n    // - Spender must have sufficient allowance to transfer\\r\\n    // - 0 value transfers are allowed\\r\\n    // ------------------------------------------------------------------------\\r\\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\\r\\n        require(tokens \\u003c= allowed[from][msg.sender]); //check allowance\\r\\n        require(balances[from] \\u003e= tokens);\\r\\n            \\r\\n        balances[from] = balances[from].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\r\\n        emit Transfer(from,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Returns the amount of tokens approved by the owner that can be\\r\\n    // transferred to the spender\\u0027s account\\r\\n    // ------------------------------------------------------------------------\\r\\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\\r\\n        return allowed[tokenOwner][spender];\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Burn the `_amount` amount of tokens from the calling `account`\\r\\n    // @params _amount the amount of tokens to burn\\r\\n    // ------------------------------------------------------------------------\\r\\n    function burnTokens(uint256 _amount) public {\\r\\n        _burn(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // @dev Internal function that burns an amount of the token from a given account\\r\\n    // @param _amount The amount that will be burnt\\r\\n    // @param _account The tokens to burn from\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _burn(uint256 _amount, address _account) internal {\\r\\n        require(balances[_account] \\u003e= _amount, \\\"insufficient account balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(_amount);\\r\\n        balances[address(_account)] = balances[address(_account)].sub(_amount);\\r\\n        emit Transfer(address(_account), address(0), _amount);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"TokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ZeedexSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d891d7f669cd5d92b1abdeaadd1c7f55dbdeb0c600000000000000000000000073dbbf72d427076bdd73cf905fdfc442c9c67d4a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe26a6ddb8392cc1502f7b52850bf8da57978c4cdcad9d86a76f6c90eb875aa7"}]}