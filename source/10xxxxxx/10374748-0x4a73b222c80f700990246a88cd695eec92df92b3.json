{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\ncontract MineTree {\r\n    address public Wallet;\r\n    address public usirs;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint totalEarning;\r\n        address[] referral;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n\r\n    uint public REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint public PERIOD_LENGTH = 77 days;\r\n    uint public GRACE_PERIOD = 3 days;\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    mapping(address => mapping (uint => uint)) public levelEarned;\r\n    mapping (address => uint) public loopCheck;\r\n    uint public currUserID = 0;\r\n    bool public lockStatus;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n\r\n    constructor(address _usirsAddress) public {\r\n        Wallet = msg.sender;\r\n        lockStatus = true;\r\n        usirs = _usirsAddress;\r\n        \r\n        //FOUNDATION\r\n        LEVEL_PRICE[1] = 0.07 ether;\r\n        LEVEL_PRICE[2] = 0.12 ether;\r\n        LEVEL_PRICE[3] = 0.24 ether;\r\n        LEVEL_PRICE[4] = 0.96 ether;\r\n        LEVEL_PRICE[5] = 3 ether;\r\n        LEVEL_PRICE[6] = 10 ether;\r\n        //PREMIUM\r\n        LEVEL_PRICE[7] = 20 ether;\r\n        LEVEL_PRICE[8] = 30 ether;\r\n        LEVEL_PRICE[9] = 40 ether;\r\n        LEVEL_PRICE[10] = 60 ether;\r\n        LEVEL_PRICE[11] = 120 ether;\r\n        LEVEL_PRICE[12] = 240 ether;\r\n        //ELITE\r\n        LEVEL_PRICE[13] = 100 ether;\r\n        LEVEL_PRICE[14] = 150 ether;\r\n        LEVEL_PRICE[15] = 300 ether;\r\n        LEVEL_PRICE[16] = 500 ether;\r\n        LEVEL_PRICE[17] = 1000 ether;\r\n        LEVEL_PRICE[18] = 2000 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            totalEarning:0,\r\n            referrerID: 0,\r\n            referral: new address[](0)\r\n        });\r\n        users[Wallet] = userStruct;\r\n        userList[currUserID] = Wallet;\r\n\r\n        for(uint i = 1; i <= 18; i++) {\r\n            users[Wallet].levelExpired[i] = 55555555555;\r\n        }\r\n    }\r\n    \r\n    modifier isUnlock(){\r\n        require(lockStatus == true,\"Contract is locked\");\r\n        _;\r\n    }\r\n\r\n    function () external payable isUnlock {\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n        else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n        else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n        else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n        else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n        else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n        else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n        else if(msg.value == LEVEL_PRICE[8]) level = 8;\r\n        else if(msg.value == LEVEL_PRICE[9]) level = 9;\r\n        else if(msg.value == LEVEL_PRICE[10]) level = 10;\r\n        else if(msg.value == LEVEL_PRICE[11]) level = 11;\r\n        else if(msg.value == LEVEL_PRICE[12]) level = 12;\r\n        else if(msg.value == LEVEL_PRICE[13]) level = 13;\r\n        else if(msg.value == LEVEL_PRICE[14]) level = 14;\r\n        else if(msg.value == LEVEL_PRICE[15]) level = 15;\r\n        else if(msg.value == LEVEL_PRICE[16]) level = 16;\r\n        else if(msg.value == LEVEL_PRICE[17]) level = 17;\r\n        else if(msg.value == LEVEL_PRICE[18]) level = 18;\r\n        else revert(\"Incorrect Value send\");\r\n\r\n        if(users[msg.sender].isExist) buyLevel(level);\r\n        else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(users[referrer].isExist) refId = users[referrer].id;\r\n            else revert(\"Incorrect referrer\");\r\n\r\n            regUser(refId);\r\n        }\r\n        else revert(\"Please buy first level for 0.07 ETH\");\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable isUnlock {\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        require(_referrerID > 0 && _referrerID <= currUserID, \"Incorrect referrer Id\");\r\n        require(msg.value == LEVEL_PRICE[1], \"Incorrect Value\");\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            totalEarning:0,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        loopCheck[msg.sender] = 0;\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable isUnlock {\r\n        require(users[msg.sender].isExist, \"User not exist\"); \r\n        require(_level > 0 && _level <= 18, \"Incorrect level\");\r\n\r\n        if(_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], \"Incorrect Value\");\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        }\r\n        else {\r\n            require(msg.value == LEVEL_PRICE[_level], \"Incorrect Value\");\r\n\r\n            for(uint l =_level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l]+GRACE_PERIOD >= now, \"Buy the previous level\");\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0) users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            else users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n        }\r\n        loopCheck[msg.sender] = 0;\r\n        payForLevel(_level, msg.sender);\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n        address referer5;\r\n\r\n        if(_level == 1 || _level == 7 || _level == 13) {\r\n            referer = userList[users[_user].referrerID];\r\n        }\r\n        else if(_level == 2 || _level == 8 || _level == 14) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 3 || _level == 9 || _level == 15) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 4 || _level == 10 || _level == 16) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n        else if(_level == 5 || _level == 11 || _level == 17) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n        else if(_level == 6 || _level == 12 || _level == 18) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer5 = userList[users[referer4].referrerID];\r\n            referer = userList[users[referer5].referrerID];\r\n        }\r\n\r\n        if(!users[referer].isExist) referer = userList[1];\r\n\r\n        if (loopCheck[msg.sender] >= 12) {\r\n            referer = userList[1];\r\n        }\r\n        \r\n        if(users[referer].levelExpired[_level] >= now) {\r\n            if(referer == Wallet) {\r\n                require(address(uint160(usirs)).send(LEVEL_PRICE[_level]), \"Transfer failed\");\r\n                emit getMoneyForLevelEvent(usirs, msg.sender, _level, now);\r\n            }    \r\n            else{    \r\n                require(address(uint160(referer)).send(LEVEL_PRICE[_level]), \"Referrer transfer failed\");\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n            }\r\n            users[referer].totalEarning += LEVEL_PRICE[_level];\r\n            levelEarned[referer][_level] +=  LEVEL_PRICE[_level];\r\n                \r\n        }\r\n        else {\r\n            if (loopCheck[msg.sender] < 12) {\r\n                loopCheck[msg.sender] += 1;\r\n                \r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n\r\n            payForLevel(_level, referer);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateUsirs(address _usirsAddress) public returns (bool) {\r\n       require(msg.sender == Wallet, \"Only Wallet\");\r\n       \r\n       usirs = _usirsAddress;\r\n       return true;\r\n    }\r\n    \r\n    function updatePrice(uint _level, uint _price) public returns (bool) {\r\n        require(msg.sender == Wallet, \"Only Wallet\");\r\n\r\n        LEVEL_PRICE[_level] = _price;\r\n        return true;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == Wallet, \"Only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == Wallet, \"Invalid User\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n        address[] memory referrals = new address[](254);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 254; i++) {\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if(i < 126) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usirsAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_1_LEVEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loopCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usirsAddress\",\"type\":\"address\"}],\"name\":\"updateUsirs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usirs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MineTree","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb8fe5d4eb9e1e1a1ea053b4c0d66bca0c8a222c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dd7327d736b10f3740ef3aaa77890884e1391a721bfba16b0d85e49645b62f67"}]}