{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.1;\r\n\r\n// ----------------------------------------------------------------------------\r\n// PEG Stable Coin\r\n//\r\n// Symbol      : PEG\r\n// Name        : PEG Stable Coin\r\n// Decimals    : 18\r\n//\r\n// Ciarán Ó hAoláin, Dr Phil Maguire 2020.\r\n// Maynooth University 2020.\r\n// The MIT License.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math library\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a, \"subtraction overflow\");\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"multiplication overflow\");\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"division by zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @notice ERC Token Standard #20 Interface\r\n/// @dev ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n    function approve(address spender, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 tokens\r\n    );\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @notice Contract function to receive approval and execute function in one call\r\n/// @dev Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 tokens,\r\n        address token,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @notice Owned Contract\r\n/// @dev Owned Contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"unauthorised call\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"unauthorised call\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @notice DAI Medianiser Interface\r\n/// @dev DAI Medianiser Interface\r\n// ----------------------------------------------------------------------------\r\ninterface MedianiserInterface {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title PEG Stable Coin\r\n/// @author Ciarán Ó hAoláin\r\n/// @notice Defines an ERC20 token which manages the PEG token and its ETH pool\r\n/// @dev Defines an ERC20 token which manages the PEG token and its ETH pool\r\n// ----------------------------------------------------------------------------\r\ncontract PEG is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 _totalSupply;\r\n    uint256 lastPriceAdjustment;\r\n    uint256 timeBetweenPriceAdjustments;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    MedianiserInterface medianiser;\r\n\r\n    event Burn(address indexed owner, uint256 tokens);\r\n    event gotPEG(\r\n        address indexed caller,\r\n        uint256 amountGivenEther,\r\n        uint256 amountReceivedPEG\r\n    );\r\n    event gotEther(\r\n        address indexed caller,\r\n        uint256 amountGivenPEG,\r\n        uint256 amountReceivedEther\r\n    );\r\n    event Inflate(uint256 previousPoolSize, uint256 amountMinted);\r\n    event Deflate(uint256 previousPoolSize, uint256 amountBurned);\r\n    event NoAdjustment();\r\n    event FailedAdjustment();\r\n\r\n    // ----------------------------------------------------------------------------\r\n    /// @notice This creates the PEG Stable Coin and creates PEG tokens for the pool\r\n    /// @dev Contract constructor which accepts no parameters\r\n    /// @param medianiserAddress address of the medianiser contract\r\n    // ----------------------------------------------------------------------------\r\n    constructor(\r\n        address medianiserAddress,\r\n        uint256 setTimeBetweenPriceAdjustments\r\n    ) public payable {\r\n        symbol = \"PEG\";\r\n        name = \"PEG Stablecoin\";\r\n        decimals = 18;\r\n        lastPriceAdjustment = now;\r\n        timeBetweenPriceAdjustments = setTimeBetweenPriceAdjustments;\r\n\r\n        medianiser = MedianiserInterface(medianiserAddress);\r\n\r\n        uint256 feedPrice;\r\n        bool priceIsValid;\r\n        (feedPrice, priceIsValid) = getOraclePriceETH_USD();\r\n        require(priceIsValid, \"oracle failure\");\r\n\r\n        _totalSupply = feedPrice.mul(address(this).balance).div(\r\n            10**uint256(decimals)\r\n        );\r\n        balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the current total supply of PEG tokens\r\n    /// @dev Get the current total supply of PEG tokens\r\n    /// @return total supply of PEG tokens\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the PEG balance of a given address\r\n    /// @dev Get the PEG balance of a given address\r\n    /// @param owner The address to find the PEG balance of\r\n    /// @return balance PEG balance of owner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Transfer PEG tokens from a user to another user. Doesn't allow transfers to 0x0 address (use burn())\r\n    /// @dev Transfer PEG tokens from a user to another user. Doesn't allow transfers to 0x0 address (use burn())\r\n    /// @param to Address to send tokens to\r\n    /// @param tokens Quantity of tokens to send\r\n    /// @return success true if transfer is successful\r\n    // ----------------f--------------------------------------------------------\r\n    function transfer(address to, uint256 tokens)\r\n        public\r\n        canTriggerPriceAdjustment\r\n        override\r\n        returns (bool success)\r\n    {\r\n        require(to != address(0), \"can't send to 0 address, use burn\");\r\n        if (to == address(this)) getEther(tokens);\r\n        else {\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Burn PEG Tokens\r\n    /// @dev Burn PEG Tokens\r\n    /// @param tokens Quantity of tokens to burn\r\n    /// @return success true if burn is successful\r\n    // ------------------------------------------------------------------------\r\n    function burn(uint256 tokens) public canTriggerPriceAdjustment returns (bool success) {\r\n        _totalSupply = _totalSupply.sub(tokens);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        emit Burn(msg.sender, tokens);\r\n        emit Transfer(msg.sender, address(0), tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Token owner can approve for `spender` to `transferFrom(...)` `tokens` from the token owner's account\r\n    /// @dev Token owner can approve for `spender` to `transferFrom(...)` `tokens` from the token owner's account\r\n    /// @param spender Address to authorise to spend tokens on your behalf\r\n    /// @param tokens Quantity of tokens to authorise for spending\r\n    /// @return success true if approval is successful\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens)\r\n        public\r\n        canTriggerPriceAdjustment\r\n        override\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Transfer `tokens` from the `from` account to the `to` account. Caller must be approved to spend these funds. Can't be to the PEG contract (for conversion).\r\n    /// @dev Transfer `tokens` from the `from` account to the `to` account. Caller must be approved to spend these funds. Can't be to the PEG contract (for conversion).\r\n    /// @param from Address to transfer tokens from\r\n    /// @param to Address tokens will be transferred to. Can't be the PEG contract's address\r\n    /// @param tokens Quantity of tokens to transfer (must be approvedd by `to` address)\r\n    /// @return success true if approval is successful\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens)\r\n        public\r\n        canTriggerPriceAdjustment\r\n        override\r\n        returns (bool success)\r\n    {\r\n        require(to != address(0), \"can't send to 0 address, use burn\");\r\n        require(to != address(this), \"can't transfer to self\");\r\n        balances[from] = balances[from].sub(tokens);\r\n        if (allowed[from][msg.sender] < MAX_UINT256) {\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        }\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the amount of tokens approved by an address `owner` for use by `spender`\r\n    /// @dev Get the amount of tokens approved by an address `owner` for use by `spender`\r\n    /// @param owner The address owner whose tokens we want to verify approval for\r\n    /// @param spender The address of the potentially approved spender\r\n    /// @return allowancePEG the amount of PEG `spender` is approved to transfer on behalf of `owner`\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 allowancePEG)\r\n    {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account. The `spender` contract function `receiveApproval(...)` is then executed\r\n    /// @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account. The `spender` contract function `receiveApproval(...)` is then executed\r\n    /// @param spender The contract address to be approved\r\n    /// @param tokens The number of tokens the caller is approving for `spender` to use\r\n    /// @param data The function call data provided to `spender.receiveApproval()`\r\n    /// @return success true if call is successful\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint256 tokens, bytes memory data)\r\n        public\r\n        canTriggerPriceAdjustment\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(\r\n            msg.sender,\r\n            tokens,\r\n            address(this),\r\n            data\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Ether can be sent directly to the contract in exchange for PEG (if sufficient gas is provided)\r\n    /// @dev Ether can be sent directly to the contract in exchange for PEG (if sufficient gas is provided)\r\n    // ------------------------------------------------------------------------\r\n    receive () external payable {\r\n        getPEG();\r\n    }\r\n\r\n    // Runs a price feed adjustment if more than timeBetweenPriceAdjustments has passed\r\n    modifier canTriggerPriceAdjustment {\r\n        _;\r\n        if (now >= lastPriceAdjustment + timeBetweenPriceAdjustments)\r\n            priceFeedAdjustment();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Gets the seconds until the next price adjustment\r\n    /// @dev Gets the seconds until the next price adjustment\r\n    /// @return nextPriceAdjustmentTime seconds to next price adjustment, or 0 if this will take place after the next conversion transaction\r\n    // ------------------------------------------------------------------------\r\n    function getNextPriceAdjustmentTime()\r\n        public\r\n        view\r\n        returns (uint256 nextPriceAdjustmentTime)\r\n    {\r\n        if (now >= lastPriceAdjustment + timeBetweenPriceAdjustments) return 0;\r\n        else return lastPriceAdjustment + timeBetweenPriceAdjustments - now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Provides the caller with PEG in return for Ether\r\n    /// @dev Provides the caller with PEG in return for Ether\r\n    /// @return success true if the transaction is successful\r\n    /// @return amountReceivedPEG the amount of PEG received by the caller\r\n    // ------------------------------------------------------------------------\r\n    function getPEG()\r\n        public\r\n        payable\r\n        canTriggerPriceAdjustment\r\n        returns (bool success, uint256 amountReceivedPEG)\r\n    {\r\n        amountReceivedPEG = balances[address(this)]\r\n            .mul(msg.value.mul(10**8).div(address(this).balance))\r\n            .div(10**8);\r\n        balances[address(this)] = balances[address(this)].sub(\r\n            amountReceivedPEG\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].add(amountReceivedPEG);\r\n        emit gotPEG(msg.sender, msg.value, amountReceivedPEG);\r\n        emit Transfer(address(this), msg.sender, amountReceivedPEG);\r\n        return (true, amountReceivedPEG);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Provides the caller with Ether in return for PEG\r\n    /// @dev Provides the caller with Ether in return for PEG\r\n    /// @param amountGivenPEG the quantity of PEG you want to exchange for Ether\r\n    /// @return success true if the transaction was successful\r\n    /// @return amountReceivedEther the amount of Ether received by the caller\r\n    // ------------------------------------------------------------------------\r\n    function getEther(uint256 amountGivenPEG)\r\n        public\r\n        canTriggerPriceAdjustment\r\n        returns (bool success, uint256 amountReceivedEther)\r\n    {\r\n        amountReceivedEther = address(this)\r\n            .balance\r\n            .mul(\r\n            amountGivenPEG.mul(10**8).div(\r\n                balances[address(this)].add(amountGivenPEG)\r\n            )\r\n        )\r\n            .div(10**8);\r\n        balances[address(this)] = balances[address(this)].add(amountGivenPEG);\r\n        balances[msg.sender] = balances[msg.sender].sub(amountGivenPEG);\r\n        emit gotEther(msg.sender, amountGivenPEG, amountReceivedEther);\r\n        emit Transfer(msg.sender, address(this), amountGivenPEG);\r\n        msg.sender.transfer(amountReceivedEther);\r\n        return (true, amountReceivedEther);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the quantity of Ether and PEG in the pools\r\n    /// @dev Get the quantity of Ether and PEG in the pools\r\n    /// @return balanceETH the amount of Ether in the pool\r\n    /// @return balancePEG the amount of PEG in the pool\r\n    // ------------------------------------------------------------------------\r\n    function getPoolBalances()\r\n        public\r\n        view\r\n        returns (uint256 balanceETH, uint256 balancePEG)\r\n    {\r\n        return (address(this).balance, balanceOf(address(this)));\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Increase the size of the ETH pool WITHOUT GAINING ANYTHING\r\n    /// @dev Increase the size of the ETH pool WITHOUT GAINING ANYTHING\r\n    /// @return success true if the transaction is successful\r\n    // ------------------------------------------------------------------------\r\n    function inflateEtherPool() public payable returns (bool success) {\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Gets the current ETH_USD exchange rate, according to the MakerDAO Oracle\r\n    /// @dev Gets the current ETH_USD exchange rate, according to the MakerDAO Oracle\r\n    /// @return priceETH_USD the current ETH_USD exchange rate\r\n    /// @return priceIsValid true if oracle says it has a value\r\n    // ------------------------------------------------------------------------\r\n    function getOraclePriceETH_USD()\r\n        public\r\n        view\r\n        returns (uint256 priceETH_USD, bool priceIsValid)\r\n    {\r\n        bytes32 price;\r\n        (price, priceIsValid) = medianiser.peek();\r\n        return (uint256(price), priceIsValid);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice (private) Performs a pool size adjustment (+/- 10% of the difference) if > 1% deviation\r\n    /// @dev (private) Performs a pool size adjustment (+/- 10% of the difference) if > 1% deviation\r\n    /// @return newPoolPEG The new size of the PEG pool\r\n    // ------------------------------------------------------------------------\r\n    function priceFeedAdjustment() private returns (uint256 newPoolPEG) {\r\n        uint256 feedPrice;\r\n        bool priceIsValid;\r\n        (feedPrice, priceIsValid) = getOraclePriceETH_USD();\r\n\r\n        if (!priceIsValid) {\r\n            newPoolPEG = balances[address(this)];\r\n            lastPriceAdjustment = now;\r\n            emit FailedAdjustment();\r\n            return (newPoolPEG);\r\n        }\r\n\r\n        feedPrice = feedPrice.mul(address(this).balance).div(\r\n            10**uint256(decimals)\r\n        );\r\n        if (feedPrice > (balances[address(this)] / 100) * 101) {\r\n            uint256 posDelta = feedPrice.sub(balances[address(this)]).div(10);\r\n            newPoolPEG = balances[address(this)].add(posDelta);\r\n            emit Inflate(balances[address(this)], posDelta);\r\n            emit Transfer(address(0), address(this), posDelta);\r\n            balances[address(this)] = newPoolPEG;\r\n            _totalSupply = _totalSupply.add(posDelta);\r\n        } else if (feedPrice < (balances[address(this)] / 100) * 99) {\r\n            uint256 negDelta = balances[address(this)].sub(feedPrice).div(10);\r\n            newPoolPEG = balances[address(this)].sub(negDelta);\r\n            emit Deflate(balances[address(this)], negDelta);\r\n            emit Transfer(address(this), address(0), negDelta);\r\n            balances[address(this)] = newPoolPEG;\r\n            _totalSupply = _totalSupply.sub(negDelta);\r\n        } else {\r\n            newPoolPEG = balances[address(this)];\r\n            emit NoAdjustment();\r\n        }\r\n        lastPriceAdjustment = now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Allows the contract owner to withdraw wasted tokens\r\n    /// @dev Allows the contract owner to withdraw wasted tokens\r\n    /// @param tokenAddress the contract address of the token to be transferred\r\n    /// @param tokens the quantity of tokens to be transferred\r\n    /// @return success true if the transaction is successful\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(tokenAddress != address(this), \"can't withdraw PEG\");\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"medianiserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"setTimeBetweenPriceAdjustments\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPoolSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"name\":\"Deflate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FailedAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPoolSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"}],\"name\":\"Inflate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGivenPEG\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedEther\",\"type\":\"uint256\"}],\"name\":\"gotEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGivenEther\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedPEG\",\"type\":\"uint256\"}],\"name\":\"gotPEG\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowancePEG\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGivenPEG\",\"type\":\"uint256\"}],\"name\":\"getEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedEther\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPriceAdjustmentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextPriceAdjustmentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePriceETH_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceETH_USD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"priceIsValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPEG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedPEG\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balancePEG\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflateEtherPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PEG","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b0000000000000000000000000000000000000000000000000000000000005460","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e183a4772a4fce3a59195825ee05ff9d19431984f3c76fedec49867db05e14f"}]}