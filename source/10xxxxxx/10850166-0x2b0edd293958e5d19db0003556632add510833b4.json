{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract LiquidityLock {\r\n\r\n    IERC20 public uni;\r\n    IERC20 public flap;\r\n    uint256 public duration;\r\n    uint256 public ratio;\r\n    uint256 public totalLocked;\r\n    address internal _owner;\r\n    \r\n    mapping(address => uint256) locked;\r\n    mapping(address => uint256) time;\r\n\r\n    event Locked (address indexed user, uint256 amount);\r\n    event Unlocked (address indexed user, uint256 amount);\r\n\r\n    constructor (IERC20 _uni, IERC20 _flap) public {\r\n        uni = _uni;\r\n        flap = _flap;\r\n        duration = 1814400;\r\n        ratio = 5000;\r\n        _owner = msg.sender;\r\n        \r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n    }\r\n    \r\n    function setRatio(uint256 flapsxuni) public onlyOwner {\r\n        ratio = flapsxuni;\r\n    }\r\n    \r\n    function lock(uint256 amount) public {\r\n        \r\n        uint256 flaps = amount*ratio;\r\n        require(flaps <= flap.balanceOf(address(this)), \"This contract has run out of flapp rewards, wait for replenishment or try a different contract\");\r\n        require(uni.transferFrom(msg.sender, address(this), amount), \"You need to approve UNI tokens to be transferred to this contract before locking\");\r\n        locked[msg.sender] = locked[msg.sender] + amount;\r\n        totalLocked = totalLocked + amount;\r\n        time[msg.sender] = now;\r\n        flap.transfer(msg.sender, flaps);\r\n        emit Locked(msg.sender, amount);\r\n    }\r\n\r\n     function unlock() public {\r\n\r\n        require(now >= time[msg.sender] + duration, \"You can't unlock yet, wait for the lock to end\");\r\n        uint256 amount = locked[msg.sender];\r\n        require(amount > 0, \"You have no tokens to unlock\");\r\n        locked[msg.sender] = locked[msg.sender] - amount;\r\n        totalLocked = totalLocked - amount;\r\n        uni.transfer(msg.sender, amount);\r\n        emit Unlocked(msg.sender, amount);\r\n    }\r\n\r\n    function getLockedAmount(address user) public view returns (uint256) {\r\n        return locked[user];\r\n    }\r\n\r\n    function getUnlockTime(address user) public view returns (uint256) {\r\n        return (time[user] + duration);\r\n    }\r\n\r\n    function getMyStatus() public view returns (uint256, uint256) {\r\n        uint256 lockedAmount = getLockedAmount(msg.sender);\r\n        uint256 unlockTime = getUnlockTime(msg.sender);\r\n        return (lockedAmount, unlockTime);\r\n    }\r\n\r\n    function getTotalLocked() public view returns (uint256) {\r\n        return totalLocked;\r\n    }\r\n\r\n    \r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_uni\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_flap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flap\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flapsxuni\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityLock","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e66d60821a39bfb02412dc7c2f92d81aedfd5c2000000000000000000000000cfb72ed3647cc8e7fa52e4f121ecdabefc305e7f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70bb98bd95563a5122be7e26b5a2de52d573fbcfd7e40845cb97cfd6c8972a2b"}]}