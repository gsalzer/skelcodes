{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Xirtam {\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        mapping(uint => X3Struct) X3Matrix;\r\n        mapping(uint => X14Struct) X14Matrix;\r\n        mapping(uint => uint) currentLevel;\r\n    }\r\n\r\n    struct X3Struct {\r\n        uint currentReferrer;\r\n        address[] referral;\r\n        bool levelExpired;\r\n        uint reInvestCount;\r\n        bool blocked;\r\n    }\r\n    \r\n    struct X14Struct {\r\n        uint currentReferrer;\r\n        address[] firstLineRef;\r\n        address[] secondLineRef;\r\n        address[] thirdLineRef;\r\n        bool levelStatus;\r\n        uint reInvestCount;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n    address public ownerAddress;\r\n    uint public currentId = 0;\r\n    uint refLimit = 2;\r\n    uint constant LAST_LEVEL =12;\r\n    bool public lockStatus;\r\n    address public partnerContract;\r\n    address public dividendAddress;\r\n    uint public dividendCount;\r\n    \r\n    mapping (uint => uint) public levelPrice;\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    mapping (address => mapping (uint => mapping (uint => uint))) public EarnedEth;\r\n    mapping (address => mapping (uint => uint)) public totalEarnedEth;\r\n    mapping (address => bool) public dividendStatus;\r\n    \r\n    event regLevelEvent(uint indexed Matrix,address indexed UserAddress, address indexed ReferrerAddress, uint Time);\r\n    event buyLevelEvent(uint indexed Matrix, address indexed UserAddress, uint Levelno, uint Time);\r\n    event reInvestEvent(uint indexed Matrix, address indexed UserAddress, address indexed ReferrerAddress, address  CallerAddress,uint Levelno, uint Count, uint Time);\r\n    event getMoneyForLevelEvent(uint indexed Matrix,address indexed UserAddress,uint UserId,address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    event lostMoneyForLevelEvent(uint indexed Matrix,address indexed UserAddress,uint UserId,address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    event Dividend(address UserAddress, uint Amount);\r\n    event lostReferrer(address indexed UserAddress, uint Matrix);\r\n    \r\n    constructor(address _partner, address _dividentAddress) public {\r\n        ownerAddress = msg.sender;\r\n        partnerContract = _partner;\r\n        dividendAddress = _dividentAddress;\r\n        \r\n        levelPrice[1] = 0.02 ether;\r\n        \r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        currentId = currentId.add(1);\r\n        \r\n        UserStruct memory user = UserStruct({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrer: address (0),\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        userList[currentId] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].X3Matrix[i].levelExpired = true;\r\n            users[ownerAddress].X14Matrix[i].levelStatus = true;\r\n            users[ownerAddress].currentLevel[1] = i;\r\n            users[ownerAddress].currentLevel[2] = i;\r\n        }\r\n        \r\n    }\r\n    \r\n    function () external payable {\r\n        revert(\"Invalid Transaction\");\r\n    }\r\n    \r\n    function registration(uint _referrerID) external payable {\r\n        require(users[userList[_referrerID]].isExist == true,\"Referrer not Exist\");\r\n        require(users[msg.sender].isExist == false,\"User  Exist\");\r\n        require(_referrerID>0 && _referrerID <= currentId,\"Incorrect Id\");\r\n        require(msg.value == levelPrice[1].mul(2),\"Incorrect Value\");\r\n        \r\n        UserStruct memory user;\r\n        currentId = currentId.add(1);\r\n        \r\n        user = UserStruct ({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrer: userList[_referrerID],\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[msg.sender]= user;\r\n        userList[currentId] = msg.sender;\r\n        users[userList[_referrerID]].partnersCount = users[userList[_referrerID]].partnersCount.add(1);\r\n        \r\n        X3Registration();\r\n        X14Registration();\r\n    }\r\n    \r\n    function X3BuyLevel(uint256 _level) external payable {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        require(users[msg.sender].isExist,\"User not exist\"); \r\n        require(users[msg.sender].X3Matrix[_level].levelExpired == false,\"Already Active in this level\"); \r\n        require(_level > 0 && _level <= 12,\"Incorrect level\");\r\n        require(msg.value == levelPrice[_level],\"Incorrect Value\");\r\n        \r\n            \r\n        users[msg.sender].X3Matrix[_level].levelExpired = true;\r\n        users[msg.sender].currentLevel[1] = _level;\r\n        \r\n        if (users[msg.sender].X3Matrix[_level-1].blocked) {\r\n                users[msg.sender].X3Matrix[_level-1].blocked = false;\r\n        }\r\n        \r\n        uint _referrerID = users[findX3Referrer(msg.sender,_level)].id;\r\n        \r\n        updateX3Details(_referrerID,msg.sender,_level);\r\n        emit buyLevelEvent(1,msg.sender, _level, now);\r\n    }\r\n    \r\n    function X14BuyLevel(uint256 _level) external payable {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        require(users[msg.sender].isExist,\"User not exist\");\r\n        require(_level > 0 && _level <= 12,\"Incorrect level\");\r\n        require(users[msg.sender].X14Matrix[_level].levelStatus == false, \"Already Active in this level\");\r\n        require(msg.value == levelPrice[_level],\"Incorrect Value\");\r\n            \r\n        users[msg.sender].X14Matrix[_level].levelStatus = true;\r\n        users[msg.sender].currentLevel[2] = _level;\r\n        users[msg.sender].X14Matrix[_level].firstLineRef = new address[](0);\r\n        users[msg.sender].X14Matrix[_level].secondLineRef = new address[](0);\r\n        users[msg.sender].X14Matrix[_level].reInvestCount = 0;\r\n        \r\n        uint _referrerID = users[findX14Referrer(msg.sender,_level)].id;\r\n        \r\n        updateX14Details(_referrerID,msg.sender,_level,0);\r\n        emit buyLevelEvent(2,msg.sender, _level, now);\r\n    }\r\n    \r\n    function contractLock(bool _lockStatus) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Invalid User\");\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function updateLevelPrice(uint _level, uint _price) public returns(bool) {\r\n          require(msg.sender == ownerAddress,\"only OwnerWallet\");\r\n          levelPrice[_level] = _price;\r\n          return true;\r\n    }\r\n    \r\n    function updatePartnerAddress(address _partner) public returns(bool) {\r\n          require(msg.sender == ownerAddress,\"only OwnerWallet\");\r\n          partnerContract = _partner;\r\n          return true;\r\n    }\r\n    \r\n    function updateDividendAddress(address _dividentAddress) public returns(bool) {\r\n          require(msg.sender == ownerAddress,\"only OwnerWallet\");\r\n          dividendAddress = _dividentAddress;\r\n          return true;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function viewX3UserReferral(address _userAddress,uint _level) public view returns(address[] memory) {\r\n        return users[_userAddress].X3Matrix[_level].referral;\r\n    }\r\n    \r\n    function viewX14UserReferral(address _userAddress,uint _level) public view returns(address[] memory,address [] memory, address [] memory) {\r\n        return (users[_userAddress].X14Matrix[_level].firstLineRef,users[_userAddress].X14Matrix[_level].secondLineRef,users[_userAddress].X14Matrix[_level].thirdLineRef);\r\n    }\r\n    \r\n    function viewX3UserLevelStatus(address _userAddress,uint _level) public view returns(bool) {\r\n        return users[_userAddress].X3Matrix[_level].levelExpired;\r\n    }\r\n    \r\n    function viewX14UserLevelStatus(address _userAddress,uint _level) public view returns(bool) {\r\n        return users[_userAddress].X14Matrix[_level].levelStatus;\r\n    }\r\n    \r\n    function getX3TotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for( uint i=1;i<=currentId;i++) {\r\n            totalEth = totalEth.add(totalEarnedEth[userList[i]][1]);\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    function getAutoPoolTotalEarnedEther() public view returns(uint) {\r\n         uint totalEth;\r\n        \r\n        for( uint i=1;i<=currentId;i++) {\r\n            totalEth = totalEth.add(totalEarnedEth[userList[i]][2]);\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool, uint, bool) {\r\n        return (userList[users[userAddress].X3Matrix[level].currentReferrer],\r\n                users[userAddress].X3Matrix[level].referral,\r\n                users[userAddress].X3Matrix[level].levelExpired,\r\n                users[userAddress].X3Matrix[level].reInvestCount,\r\n                users[userAddress].X3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersX14Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, address [] memory,bool, uint) {\r\n        return (userList[users[userAddress].X14Matrix[level].currentReferrer],\r\n                users[userAddress].X14Matrix[level].firstLineRef,\r\n                users[userAddress].X14Matrix[level].secondLineRef,\r\n                users[userAddress].X14Matrix[level].thirdLineRef,\r\n                users[userAddress].X14Matrix[level].levelStatus,\r\n                users[userAddress].X14Matrix[level].reInvestCount);\r\n    }\r\n    \r\n    function usersCurrentLevel(address _userAddress, uint _matrix) public view returns(uint) {\r\n        return users[_userAddress].currentLevel[_matrix];\r\n    }\r\n    \r\n    function getX14Referrer(uint _flag,uint _level,address _referrerAddress) internal view returns(uint) {\r\n        require(users[_referrerAddress].X14Matrix[_level].levelStatus ==  true, \"referer not active\"); \r\n        \r\n        if(_flag == 1) {\r\n            address[] memory referrals = new address[](2);\r\n            referrals[0] = users[_referrerAddress].X14Matrix[_level].firstLineRef[0];\r\n            referrals[1] = users[_referrerAddress].X14Matrix[_level].firstLineRef[1];\r\n            \r\n            \r\n            if(users[_referrerAddress].X14Matrix[_level].secondLineRef.length == 0 ||\r\n            users[_referrerAddress].X14Matrix[_level].secondLineRef.length == 2) {\r\n                \r\n                if(users[referrals[0]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[0]].id);\r\n                }\r\n            }\r\n            \r\n            else if(users[_referrerAddress].X14Matrix[_level].secondLineRef.length == 1 ||\r\n            users[_referrerAddress].X14Matrix[_level].secondLineRef.length == 3) {\r\n                \r\n                if(users[referrals[1]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[1]].id);\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(_flag == 2) {\r\n            address[] memory referrals = new address[](4);\r\n            referrals[0] = users[_referrerAddress].X14Matrix[_level].secondLineRef[0];\r\n            referrals[1] = users[_referrerAddress].X14Matrix[_level].secondLineRef[1];\r\n            referrals[2] = users[_referrerAddress].X14Matrix[_level].secondLineRef[2];\r\n            referrals[3] = users[_referrerAddress].X14Matrix[_level].secondLineRef[3];\r\n            \r\n            \r\n            if(users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 0 ||\r\n            users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 4)  {\r\n                \r\n                if(users[referrals[0]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[0]].id);\r\n                }\r\n            }\r\n            \r\n            else if(users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 1 ||\r\n            users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 5)  {\r\n                \r\n                if(users[referrals[1]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[1]].id);\r\n                }\r\n            }\r\n            \r\n            else if(users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 2 ||\r\n            users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 6)  {\r\n                \r\n                if(users[referrals[2]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[2]].id);\r\n                }\r\n            }\r\n            \r\n            else if(users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 3 ||\r\n            users[_referrerAddress].X14Matrix[_level].thirdLineRef.length == 7)  {\r\n                \r\n                if(users[referrals[3]].X14Matrix[_level].firstLineRef.length < 2) {\r\n                    return (users[referrals[3]].id);\r\n                }\r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n    \r\n    function findX14Referrer(address userAddress, uint _level) internal  returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].X14Matrix[_level].levelStatus == true) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n            emit lostMoneyForLevelEvent(2,msg.sender,users[msg.sender].id,userAddress,users[userAddress].id, _level, levelPrice[_level],now);\r\n        }\r\n        \r\n    }\r\n    \r\n    function findX3Referrer(address userAddress, uint _level) internal view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].X3Matrix[_level].levelExpired == true) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function X3Registration() internal  {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        \r\n        address ref = findX3Referrer(msg.sender,1);\r\n        users[msg.sender].X3Matrix[1].currentReferrer = users[ref].id;\r\n        users[msg.sender].currentLevel[1] =1;\r\n        users[msg.sender].X3Matrix[1].levelExpired = true;\r\n        users[msg.sender].X3Matrix[1].blocked = false;\r\n        \r\n        updateX3Details(users[ref].id,msg.sender,1);\r\n        emit regLevelEvent(1,msg.sender, ref, now);\r\n    }\r\n    \r\n    function updateX3Details(uint _referrerID, address userAddress, uint level) internal {\r\n        \r\n        users[userList[_referrerID]].X3Matrix[level].referral.push(userAddress);\r\n\r\n        if (users[userList[_referrerID]].X3Matrix[level].referral.length < 3) {\r\n           \r\n            return X3Pay(userList[_referrerID],level);\r\n        }\r\n        \r\n       \r\n        //close matrix\r\n        users[userList[_referrerID]].X3Matrix[level].referral = new address[](0);\r\n        if (!users[userList[_referrerID]].X3Matrix[level+1].levelExpired && level != LAST_LEVEL) {\r\n            users[userList[_referrerID]].X3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (userList[_referrerID] != ownerAddress) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findX3Referrer(userList[_referrerID], level);\r\n            if (users[userList[_referrerID]].X3Matrix[level].currentReferrer != users[freeReferrerAddress].id) {\r\n                users[userList[_referrerID]].X3Matrix[level].currentReferrer = users[freeReferrerAddress].id;\r\n            }\r\n            \r\n            users[userList[_referrerID]].X3Matrix[level].reInvestCount = users[userList[_referrerID]].X3Matrix[level].reInvestCount.add(1);\r\n            emit reInvestEvent(1,userList[_referrerID],userList[users[userList[_referrerID]].X3Matrix[level].currentReferrer],msg.sender,level,users[userList[_referrerID]].X3Matrix[level].reInvestCount,now);   \r\n            updateX3Details(users[freeReferrerAddress].id,userList[_referrerID], level);\r\n            \r\n        } else {\r\n            X3Pay(ownerAddress,level);\r\n            users[userList[1]].X3Matrix[level].reInvestCount = users[userList[1]].X3Matrix[level].reInvestCount.add(1);\r\n            emit reInvestEvent(1,userList[_referrerID],userList[users[userList[_referrerID]].X3Matrix[level].currentReferrer],msg.sender,level,users[userList[_referrerID]].X3Matrix[level].reInvestCount,now);\r\n        }\r\n    }\r\n    \r\n    function X14Registration() internal  {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        require(users[msg.sender].isExist == true, \"User not exist in working plan\");\r\n        \r\n        address ref = findX14Referrer(msg.sender,1);\r\n\r\n        users[msg.sender].X14Matrix[1].currentReferrer = users[ref].id;\r\n        users[msg.sender].currentLevel[2] = 1;\r\n        users[msg.sender].X14Matrix[1].levelStatus = true;\r\n        \r\n        updateX14Details(users[ref].id,msg.sender,1,0);\r\n        \r\n        emit regLevelEvent(2,msg.sender, ref, now);\r\n    }\r\n    \r\n    function updateX14Details(uint _referrerID, address _userAddress,uint _level, uint _flag) internal {\r\n        \r\n        if (users[userList[_referrerID]].X14Matrix[_level].firstLineRef.length < 2) {\r\n            users[userList[_referrerID]].X14Matrix[_level].firstLineRef.push(_userAddress);\r\n            users[_userAddress].X14Matrix[_level].currentReferrer = _referrerID;\r\n            \r\n            uint ref2 = users[userList[_referrerID]].X14Matrix[_level].currentReferrer;\r\n            \r\n            if(ref2 != 0)\r\n                users[userList[ref2]].X14Matrix[_level].secondLineRef.push(_userAddress);\r\n            \r\n            uint ref3 = users[userList[ref2]].X14Matrix[_level].currentReferrer;\r\n            \r\n            if(ref3 != 0) {\r\n                users[userList[ref3]].X14Matrix[_level].thirdLineRef.push(_userAddress);\r\n                _referrerID = ref3;\r\n            }\r\n            \r\n            \r\n        } else if (users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length < 4)  {\r\n            \r\n            \r\n            uint ref1;\r\n             \r\n            ref1 = getX14Referrer(1,_level,userList[_referrerID]);\r\n                \r\n            users[userList[ref1]].X14Matrix[_level].firstLineRef.push(_userAddress);\r\n            users[_userAddress].X14Matrix[_level].currentReferrer = ref1;\r\n            \r\n            users[userList[_referrerID]].X14Matrix[_level].secondLineRef.push(_userAddress);\r\n            \r\n            uint ref3 = users[userList[_referrerID]].X14Matrix[_level].currentReferrer;\r\n            \r\n            if(ref3 != 0) {\r\n                users[userList[ref3]].X14Matrix[_level].thirdLineRef.push(_userAddress);\r\n                 _referrerID = ref3;\r\n            }\r\n           \r\n            \r\n        } else if (users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length < 8)  {\r\n            \r\n            \r\n            uint ref1 = getX14Referrer(2,_level,userList[_referrerID]);\r\n            \r\n            users[userList[ref1]].X14Matrix[_level].firstLineRef.push(_userAddress);\r\n            \r\n            users[_userAddress].X14Matrix[_level].currentReferrer = ref1;\r\n            \r\n            uint ref2 = users[userList[ref1]].X14Matrix[_level].currentReferrer;\r\n            \r\n            users[userList[ref2]].X14Matrix[_level].secondLineRef.push(_userAddress);\r\n            \r\n            users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.push(_userAddress);\r\n            \r\n            _referrerID = _referrerID;\r\n            \r\n        }\r\n        \r\n        //0 -- directUpline\r\n        if((users[userList[_referrerID]].X14Matrix[_level].firstLineRef.length == 1 && users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 0 ) || \r\n        (users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 2 && users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 0) ||\r\n        users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 1 || users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 3) {\r\n            \r\n            if(_flag == 0)\r\n                X14Pay(0,_level,userList[_referrerID]);\r\n        }\r\n        \r\n        //1 -- your wallet\r\n        else if((users[userList[_referrerID]].X14Matrix[_level].firstLineRef.length == 2 && users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 0) ||\r\n        (users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 1 && users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 0)  || \r\n        (users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 3 && users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 0) ||\r\n        users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 2 || users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 4 ||\r\n        users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 5 || users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 7) {\r\n            \r\n            if(_flag == 0) \r\n                X14Pay(1,_level,userList[_referrerID]);\r\n            \r\n        }\r\n        \r\n        //2 -- oneaboveUpline\r\n        else if( (users[userList[_referrerID]].X14Matrix[_level].secondLineRef.length == 4 &&  users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 0)||\r\n        users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 6 ) {\r\n            \r\n            if(_flag == 0)\r\n                X14Pay(2,_level,userList[_referrerID]);\r\n        }\r\n        \r\n        \r\n        else if(users[userList[_referrerID]].X14Matrix[_level].thirdLineRef.length == 8) {\r\n            \r\n            if(_flag == 0)\r\n                X14Pay(3,_level,ownerAddress);\r\n            \r\n            users[userList[_referrerID]].X14Matrix[_level].firstLineRef = new address[](0);\r\n            users[userList[_referrerID]].X14Matrix[_level].secondLineRef = new address[](0);\r\n            users[userList[_referrerID]].X14Matrix[_level].thirdLineRef = new address[](0);\r\n            \r\n            if(userList[_referrerID] != ownerAddress) {\r\n            \r\n                address FreeReferrer = findX14Referrer(userList[_referrerID],_level);\r\n                \r\n                if (users[userList[_referrerID]].X14Matrix[_level].currentReferrer != users[FreeReferrer].id) {\r\n                    users[userList[_referrerID]].X14Matrix[_level].currentReferrer = users[FreeReferrer].id;\r\n                }\r\n                \r\n               updateX14Details(users[FreeReferrer].id,userList[_referrerID],_level,1);\r\n               users[userList[_referrerID]].X14Matrix[_level].reInvestCount =  users[userList[_referrerID]].X14Matrix[_level].reInvestCount.add(1);\r\n               emit reInvestEvent(2,userList[_referrerID],userList[users[userList[_referrerID]].X14Matrix[_level].currentReferrer],msg.sender,_level,users[userList[_referrerID]].X14Matrix[_level].reInvestCount,now);\r\n            }\r\n            else {\r\n                users[ownerAddress].X14Matrix[_level].reInvestCount =  users[ownerAddress].X14Matrix[_level].reInvestCount.add(1);\r\n                emit reInvestEvent(2,ownerAddress,address(0),msg.sender,_level,users[ownerAddress].X14Matrix[_level].reInvestCount,now);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function findX3Receiver(address referer, uint _level) internal returns(address) {\r\n        \r\n        while (true) {\r\n                if (users[referer].X3Matrix[_level].blocked) {\r\n                    emit lostMoneyForLevelEvent(1,msg.sender,users[msg.sender].id,referer,users[referer].id, _level, levelPrice[_level],now);\r\n                    referer = userList[users[referer].X3Matrix[_level].currentReferrer];\r\n                }\r\n                else {\r\n                    return referer;\r\n                }\r\n        }\r\n        \r\n    }\r\n\r\n    function X3Pay(address _referrerAddress,uint _level) internal {\r\n        \r\n        address referer = findX3Receiver(_referrerAddress,_level);\r\n\r\n        if(!users[referer].isExist) \r\n            referer = userList[1];\r\n        \r\n        \r\n        if(users[referer].X3Matrix[_level].levelExpired == true) {\r\n            if(referer == ownerAddress) {\r\n                require((address(uint160(partnerContract)).send(levelPrice[_level])), \"Transaction Failure X3\");\r\n                totalEarnedEth[partnerContract][1] = totalEarnedEth[partnerContract][1].add(levelPrice[_level]);\r\n                EarnedEth[partnerContract][1][_level] =  EarnedEth[partnerContract][1][_level].add(levelPrice[_level]);\r\n                emit getMoneyForLevelEvent(1,msg.sender,users[msg.sender].id,ownerAddress,1, _level, levelPrice[_level],now);\r\n            } else {\r\n                require((address(uint160(referer)).send(levelPrice[_level])), \"Transaction Failure X3\");\r\n                totalEarnedEth[referer][1] = totalEarnedEth[referer][1].add(levelPrice[_level]);\r\n                EarnedEth[referer][1][_level] =  EarnedEth[referer][1][_level].add(levelPrice[_level]);\r\n                emit getMoneyForLevelEvent(1,msg.sender,users[msg.sender].id,referer,users[referer].id, _level, levelPrice[_level],now);\r\n            }\r\n        }    \r\n        \r\n    }\r\n    \r\n     function X14Pay(uint _flag,uint _level,address _userAddress) internal {\r\n       \r\n        address[2] memory referer;\r\n        \r\n        if(_flag == 0)\r\n          referer[0] = userList[users[_userAddress].X14Matrix[_level].currentReferrer];\r\n        \r\n        else if(_flag == 1) \r\n          referer[0] = _userAddress;\r\n             \r\n        else if(_flag == 2) {\r\n          referer[1] = userList[users[_userAddress].X14Matrix[_level].currentReferrer];\r\n          referer[0] = userList[users[referer[1]].X14Matrix[_level].currentReferrer];\r\n        }\r\n        \r\n        else if(_flag == 3) \r\n            referer[0] = ownerAddress;\r\n\r\n        if(!users[referer[0]].isExist) \r\n            referer[0] = userList[1];\r\n \r\n        \r\n        if(users[referer[0]].X14Matrix[_level].levelStatus == true) {\r\n            \r\n            if(referer[0] == ownerAddress && _flag != 3) {\r\n                \r\n                require((address(uint160(partnerContract)).send(levelPrice[_level])), \"Transaction Failure X14\");\r\n                totalEarnedEth[partnerContract][2] = totalEarnedEth[partnerContract][2].add(levelPrice[_level]);\r\n                EarnedEth[partnerContract][2][_level] =  EarnedEth[partnerContract][2][_level].add(levelPrice[_level]);\r\n                emit getMoneyForLevelEvent(2,msg.sender,users[msg.sender].id,ownerAddress,1, _level, levelPrice[_level],now);\r\n                \r\n            } else if(referer[0] == ownerAddress && _flag == 3) {\r\n                \r\n                uint256 share = ((levelPrice[_level]).mul(33.33 ether)).div(10**20);\r\n                require((address(uint160(dividendAddress)).send(share)) &&\r\n                (address(uint160(partnerContract)).send(levelPrice[_level].sub(share))), \"Transaction Failure X14\");\r\n                dividendCount = dividendCount.add(1);\r\n                totalEarnedEth[dividendAddress][2] = totalEarnedEth[dividendAddress][2].add(share);\r\n                EarnedEth[dividendAddress][2][_level] =  EarnedEth[dividendAddress][2][_level].add(share);\r\n                emit getMoneyForLevelEvent(2,msg.sender,users[msg.sender].id,dividendAddress,0, _level, share,now);\r\n                totalEarnedEth[partnerContract][2] = totalEarnedEth[partnerContract][2].add(levelPrice[_level].sub(share));\r\n                EarnedEth[partnerContract][2][_level] =  EarnedEth[partnerContract][2][_level].add(levelPrice[_level].sub(share));\r\n                emit getMoneyForLevelEvent(2,msg.sender,users[msg.sender].id,ownerAddress,1, _level, levelPrice[_level].sub(share),now);\r\n                \r\n            }\r\n            else {\r\n                \r\n                require((address(uint160(referer[0])).send(levelPrice[_level])), \"Transaction Failure X14\");\r\n                totalEarnedEth[referer[0]][2] = totalEarnedEth[referer[0]][2].add(levelPrice[_level]);\r\n                EarnedEth[referer[0]][2][_level] =  EarnedEth[referer[0]][2][_level].add(levelPrice[_level]);\r\n                emit getMoneyForLevelEvent(2,msg.sender,users[msg.sender].id,referer[0],users[referer[0]].id, _level, levelPrice[_level],now);\r\n            }    \r\n        \r\n         }\r\n        \r\n    }    \r\n    \r\n    \r\n    function dividendShare(address[] memory addresses, uint256[] memory _amount) public payable returns (bool) {\r\n        require(msg.sender == dividendAddress || msg.sender == ownerAddress, \"Unauthorized call\");\r\n        require(addresses.length == _amount.length, \"Invalid length\");\r\n        \r\n        uint _divident = msg.value;\r\n       \r\n        for(uint i =0 ; i < addresses.length; i++) {\r\n            require(addresses[i] != address(0),\"Invalid address\");\r\n            require(_amount[i] > 0, \"Invalid amount\");\r\n            require(users[addresses[i]].isExist, \"User not exist\");\r\n            require(users[addresses[i]].X14Matrix[8].levelStatus == true, \"Invalid level\");\r\n            require(dividendStatus[addresses[i]] == false, \"Divident already sent\");\r\n            require(_divident >= _amount[i],\"Insufficient divident\");\r\n            require(address(uint160(addresses[i])).send(_amount[i]), \"Transfer failed\");\r\n            \r\n            _divident = _divident.sub(_amount[i]);\r\n            totalEarnedEth[dividendAddress][2] = totalEarnedEth[dividendAddress][2].sub(_amount[i]);\r\n            dividendStatus[addresses[i]] = true;\r\n            emit Dividend(addresses[i], _amount[i]);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"}],\"name\":\"lostReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CallerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"reInvestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"X14BuyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"X3BuyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"dividendShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAutoPoolTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getX3TotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividentAddress\",\"type\":\"address\"}],\"name\":\"updateDividendAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateLevelPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartnerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_matrix\",\"type\":\"uint256\"}],\"name\":\"usersCurrentLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX14Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewX14UserLevelStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewX14UserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewX3UserLevelStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewX3UserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Xirtam","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f3e92ac646b2a0837edd2c55233a794c908c15860000000000000000000000008de28063ab64abd6bafd7d0a29063ad90cd5d833","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a2afc3576f459acbaa16f215cda67298c497248c4f995838876b8729a894f375"}]}