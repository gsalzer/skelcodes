{"status":"1","message":"OK","result":[{"SourceCode":"# (c) Curve.Fi, 2020\r\n# Stateless bulk calculator of prices for stablecoin-to-stablecoin pools\r\n\r\nMAX_COINS: constant(int128) = 8\r\nINPUT_SIZE: constant(int128) = 100\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\n\r\n\r\n@constant\r\n@private\r\ndef get_D(n_coins: uint256, xp: uint256[MAX_COINS], amp: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculating the invariant (D)\r\n    @param n_coins Number of coins in the pool\r\n    @param xp Array with coin balances made into the same (1e18) digits\r\n    @param amp Amplification coefficient\r\n    @return The value of invariant\r\n    \"\"\"\r\n    S: uint256 = 0\r\n    for _x in xp:\r\n        if _x == 0:\r\n            break\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    Dprev: uint256 = 0\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * n_coins\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            if _x == 0:\r\n                break\r\n            D_P = D_P * D / (_x * n_coins)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S + D_P * n_coins) * D / ((Ann - 1) * D + (n_coins + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                break\r\n        else:\r\n            if Dprev - D <= 1:\r\n                break\r\n    return D\r\n\r\n\r\n@constant\r\n@private\r\ndef get_y(D: uint256, n_coins: int128, xp: uint256[MAX_COINS], amp: uint256,\r\n          i: int128, j: int128, x: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Bulk-calculate new balance of coin j given a new value of coin i\r\n    @param D The Invariant\r\n    @param n_coins Number of coins in the pool\r\n    @param xp Array with coin balances made into the same (1e18) digits\r\n    @param amp Amplification coefficient\r\n    @param i Index of the changed coin (trade in)\r\n    @param j Index of the other changed coin (trade out)\r\n    @param x Amount of coin i (trade in)\r\n    @return Amount of coin j (trade out)\r\n    \"\"\"\r\n    assert (i != j) and (i >= 0) and (j >= 0) and (i < n_coins) and (j < n_coins)\r\n    n_coins_256: uint256 = convert(n_coins, uint256)\r\n\r\n    Ann: uint256 = amp * n_coins_256\r\n\r\n    _x: uint256 = 0\r\n    S_: uint256 = 0\r\n    c: uint256 = D\r\n    for _i in range(MAX_COINS):\r\n        if _i >= n_coins:\r\n            break\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * n_coins_256)\r\n    c = c * D / (Ann * n_coins_256)\r\n    b: uint256 = S_ + D / Ann  # - D\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n\r\n    return y\r\n\r\n\r\n@constant\r\n@public\r\ndef get_dy(n_coins: int128, balances: uint256[MAX_COINS], amp: uint256, fee: uint256,\r\n           rates: uint256[MAX_COINS], precisions: uint256[MAX_COINS],\r\n           underlying: bool,\r\n           i: int128, j: int128, dx: uint256[INPUT_SIZE]) -> uint256[INPUT_SIZE]:\r\n    \"\"\"\r\n    @notice Bulk-calculate amount of of coin j given in exchange for coin i\r\n    @param n_coins Number of coins in the pool\r\n    @param balances Array with coin balances\r\n    @param amp Amplification coefficient\r\n    @param fee Pool's fee at 1e10 basis\r\n    @param rates Array with rates for \"lent out\" tokens\r\n    @param precisions Precision multipliers to get the coin to 1e18 basis\r\n    @param underlying Whether the coin is in raw or lent-out form\r\n    @param i Index of the changed coin (trade in)\r\n    @param j Index of the other changed coin (trade out)\r\n    @param dx Array of values of coin i (trade in)\r\n    @return Array of values of coin j (trade out)\r\n    \"\"\"\r\n\r\n    xp: uint256[MAX_COINS] = balances\r\n    ratesp: uint256[MAX_COINS] = precisions\r\n    for k in range(MAX_COINS):\r\n        xp[k] = xp[k] * rates[k] * precisions[k] / 10 ** 18\r\n        if not underlying:\r\n            ratesp[k] = ratesp[k] * rates[k] / 10 ** 18\r\n    D: uint256 = self.get_D(convert(n_coins, uint256), xp, amp)\r\n\r\n    dy: uint256[INPUT_SIZE] = dx\r\n    for k in range(INPUT_SIZE):\r\n        if dx[k] == 0:\r\n            break\r\n        else:\r\n            x_after_trade: uint256 = dx[k] * ratesp[i] + xp[i]\r\n            dy[k] = self.get_y(D, n_coins, xp, amp, i, j, x_after_trade)\r\n            dy[k] = (xp[j] - dy[k] - 1) / ratesp[j]\r\n            dy[k] -= dy[k] * fee / FEE_DENOMINATOR\r\n\r\n    return dy\r\n\r\n\r\n@constant\r\n@public\r\ndef get_dx(n_coins: int128, balances: uint256[MAX_COINS], amp: uint256, fee: uint256,\r\n           rates: uint256[MAX_COINS], precisions: uint256[MAX_COINS],\r\n           underlying: bool,\r\n           i: int128, j: int128, dy: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate amount of of coin i taken when exchanging for coin j\r\n    @param n_coins Number of coins in the pool\r\n    @param balances Array with coin balances\r\n    @param amp Amplification coefficient\r\n    @param fee Pool's fee at 1e10 basis\r\n    @param rates Array with rates for \"lent out\" tokens\r\n    @param precisions Precision multipliers to get the coin to 1e18 basis\r\n    @param underlying Whether the coin is in raw or lent-out form\r\n    @param i Index of the changed coin (trade in)\r\n    @param j Index of the other changed coin (trade out)\r\n    @param dy Amount of coin j (trade out)\r\n    @return Amount of coin i (trade in)\r\n    \"\"\"\r\n\r\n    xp: uint256[MAX_COINS] = balances\r\n    ratesp: uint256[MAX_COINS] = precisions\r\n    for k in range(MAX_COINS):\r\n        xp[k] = xp[k] * rates[k] * precisions[k] / 10 ** 18\r\n        if not underlying:\r\n            ratesp[k] = ratesp[k] * rates[k] / 10 ** 18\r\n    D: uint256 = self.get_D(convert(n_coins, uint256), xp, amp)\r\n\r\n    y_after_trade: uint256 = xp[j] - dy * ratesp[j] * FEE_DENOMINATOR / (FEE_DENOMINATOR - fee)\r\n    x: uint256 = self.get_y(D, n_coins, xp, amp, j, i, y_after_trade)\r\n    dx: uint256 = (x - xp[i]) / ratesp[i]\r\n\r\n    return dx","ABI":"[{\"name\":\"get_dy\",\"outputs\":[{\"type\":\"uint256[100]\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"n_coins\"},{\"type\":\"uint256[8]\",\"name\":\"balances\"},{\"type\":\"uint256\",\"name\":\"amp\"},{\"type\":\"uint256\",\"name\":\"fee\"},{\"type\":\"uint256[8]\",\"name\":\"rates\"},{\"type\":\"uint256[8]\",\"name\":\"precisions\"},{\"type\":\"bool\",\"name\":\"underlying\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256[100]\",\"name\":\"dx\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":44277431},{\"name\":\"get_dx\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"n_coins\"},{\"type\":\"uint256[8]\",\"name\":\"balances\"},{\"type\":\"uint256\",\"name\":\"amp\"},{\"type\":\"uint256\",\"name\":\"fee\"},{\"type\":\"uint256[8]\",\"name\":\"rates\"},{\"type\":\"uint256[8]\",\"name\":\"precisions\"},{\"type\":\"bool\",\"name\":\"underlying\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dy\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2663047}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b17","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}