{"status":"1","message":"OK","result":[{"SourceCode":"contract UniswapV2Router02 {\r\n    function addLiquidityETH (\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint, uint, uint);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    address public WETH;\r\n}\r\n\r\ninterface IUniswapV2ERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract LiqController3D {\r\n    uint constant rate = 1;\r\n    uint lastClaim;\r\n    address routerAddr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address tokenAddr;\r\n    address owner;\r\n\r\n    UniswapV2Router02 router;\r\n    IUniswapV2ERC20 liq;\r\n\r\n    constructor(address _tokenAddr, address _poolAddr) public {\r\n        owner =  tx.origin;\r\n        lastClaim = now;\r\n        tokenAddr = _tokenAddr;\r\n\r\n        router = UniswapV2Router02(routerAddr);\r\n        liq = IUniswapV2ERC20(_poolAddr);\r\n    }\r\n\r\n    function removeLiq(uint _withdrawType) external {\r\n        require(msg.sender==owner);\r\n        require(now - lastClaim > 1 days);\r\n        require(_withdrawType==1 || _withdrawType==2, 'Invalid Withdraw Type');\r\n        \r\n        uint bal = liq.balanceOf(address(this));\r\n        uint liqAmount;\r\n\r\n        if (bal < 100){ liqAmount = bal; }  // Collect remaining dust\r\n        else { liqAmount = (bal * rate) / 100; }\r\n\r\n        if (_withdrawType == 1) {\r\n            router.removeLiquidityETH(tokenAddr, liqAmount, 1, 1, owner, now);\r\n        }\r\n\r\n        else if (_withdrawType == 2) { \r\n            liq.transfer(owner, liqAmount);   \r\n        }\r\n\r\n        lastClaim = now;\r\n    }\r\n\r\n    function approveLiqTokens() external {\r\n        liq.approve(routerAddr, uint(-1));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveLiqTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawType\",\"type\":\"uint256\"}],\"name\":\"removeLiq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiqController3D","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003d3d35bb9bec23b06ca00fe472b50e7a4c692c30000000000000000000000000da3706c9a099077e6bc389d1baf918565212a54d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b57ae9bcfec2c50357ec43cbf66427b9abb25d97369a97a74292fc283a992135"}]}