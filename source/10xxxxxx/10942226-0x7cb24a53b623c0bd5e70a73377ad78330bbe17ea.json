{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract JTN is Ownable{\r\n    using SafeMath for uint;\r\n    uint256 public totalStake;\r\n    uint256 public totalVipStake;\r\n    uint32 public currentVipCount;\r\n    uint32 public currentUserCount;\r\n    uint8  public governanceRate = 0;\r\n\r\n    mapping (uint32  => address) public userList;\r\n    mapping (address => bool) public vipMap;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => address) public levelToUp;\r\n    mapping (address => address[]) public levelToDown;\r\n    mapping (address => uint) public vipProfit;\r\n\r\n    event NewVip(address indexed from, uint256 amount);\r\n    event Deposit(address indexed from, uint256 amount);\r\n    event AddAdviser(address indexed down, address indexed up);\r\n    event Withdraw(address indexed to, uint256 value);\r\n    event GovWithdraw(address indexed to, uint256 value);\r\n\r\n\r\n    uint constant private minInvestmentLimit = 10 finney;\r\n    uint constant private vipBasePrice = 1 ether;\r\n    uint constant private vipLevelLimit = 100;\r\n\r\n    constructor()public {\r\n    }\r\n\r\n    function buyVip() public payable{\r\n        uint cost = vipPrice();\r\n        require(msg.value == cost, \"vip cost mismatch\");\r\n        require(!vipMap[msg.sender], \"vip already\");\r\n        vipMap[msg.sender] = true;\r\n        uint balance = balanceOf(msg.sender);\r\n        if(balance > 0){\r\n            totalVipStake = totalVipStake.add(balance);\r\n        }\r\n        currentVipCount++;\r\n        emit NewVip(msg.sender, msg.value);\r\n    }\r\n    function depositWithAdviser(address _adviser) public payable{\r\n        require(_adviser != address(0) , \"zero address input\");\r\n        if(_balances[msg.sender] == 0){\r\n            address upper = levelToUp[msg.sender];\r\n            if( upper == address(0) && _adviser != msg.sender && isVip(_adviser)){\r\n                levelToUp[msg.sender] = _adviser;\r\n                levelToDown[_adviser].push(msg.sender);\r\n            }\r\n        }\r\n\r\n        deposit();\r\n        emit AddAdviser(msg.sender,_adviser);\r\n    }\r\n\r\n    function deposit() private {\r\n        if(_balances[msg.sender] == 0){\r\n            require(msg.value >= minInvestmentLimit,\"!deposit limit\");\r\n            userList[currentUserCount] = msg.sender;\r\n            currentUserCount++;\r\n        }\r\n        require(msg.value > 0, \"!value\");\r\n        address upper = levelToUp[msg.sender];\r\n\r\n        totalStake = totalStake.add(msg.value);\r\n        if(isVip(msg.sender)){\r\n            totalVipStake = totalVipStake.add(msg.value);\r\n        }\r\n\r\n        if(upper != address(0)){\r\n            uint profit = msg.value.div(100);\r\n            _balances[upper] = _balances[upper].add(profit);\r\n            vipProfit[upper] = vipProfit[upper].add(profit);\r\n        }\r\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\r\n        emit Deposit(msg.sender,msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n        require(_amount > 0, \"!value\");\r\n        uint reduceAmount = _amount.mul(100).div(100-governanceRate);\r\n        require(reduceAmount <= _balances[msg.sender], \"!balance limit\");\r\n        _balances[msg.sender] = _balances[msg.sender].sub(reduceAmount, \"withdraw amount exceeds balance\");\r\n        totalStake = totalStake.sub(reduceAmount);\r\n        if(isVip(msg.sender)){\r\n            totalVipStake = totalVipStake - reduceAmount;\r\n        }\r\n        msg.sender.transfer(_amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdrawEther(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function changeRate(uint8 _rate)onlyOwner public {\r\n        require(100 > _rate, \"governanceRate big than 100\");\r\n        governanceRate = _rate;\r\n    }\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function vipPrice() public view returns (uint) {\r\n        uint difficult = currentVipCount/vipLevelLimit+1;\r\n        return difficult.mul(vipBasePrice);\r\n    }\r\n    function isVip(address account) public view returns (bool) {\r\n        return vipMap[account];\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function subCountOf(address account) public view returns (uint) {\r\n        return levelToDown[account].length;\r\n    }\r\n\r\n    function profitOf(address account) public view returns (uint) {\r\n        return vipProfit[account];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"down\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"}],\"name\":\"AddAdviser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyVip\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rate\",\"type\":\"uint8\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVipCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adviser\",\"type\":\"address\"}],\"name\":\"depositWithAdviser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governanceRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelToDown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelToUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"subCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVipStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"JTN","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://65c4af3083a2739f70bd058824c6976372071159d2df04bcbe673775eecdb181"}]}