{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OneSplitInterface {\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitHelpers is Helpers {\r\n    /**\r\n     * @dev Return 1Split Address\r\n     */\r\n    function getOneSplitAddress() internal pure returns (address) {\r\n        return 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    }\r\n\r\n    function getTokenDecimals(TokenInterface buy, TokenInterface sell) internal view returns(uint _buyDec, uint _sellDec){\r\n        _buyDec = address(buy) == getAddressETH() ? 18 : buy.decimals();\r\n        _sellDec = address(sell) == getAddressETH() ? 18 : sell.decimals();\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        TokenInterface buyAddr,\r\n        uint expectedAmt,\r\n        TokenInterface sellAddr,\r\n        uint sellAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        (uint buyDec, uint sellDec) = getTokenDecimals(buyAddr, sellAddr);\r\n        uint _sellAmt = convertTo18(sellDec, sellAmt);\r\n        uint _buyAmt = convertTo18(buyDec, expectedAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is OneSplitHelpers {\r\n\r\n    function getBuyAmount(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint distribution,\r\n        uint disableDexes\r\n    ) public view returns (uint buyAmt, uint unitAmt, uint[] memory distributions) {\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n        (buyAmt, distributions) = OneSplitInterface(getOneSplitAddress())\r\n                .getExpectedReturn(\r\n                    _sellAddr,\r\n                    _buyAddr,\r\n                    sellAmt,\r\n                    distribution,\r\n                    disableDexes\r\n                    );\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n}\r\n\r\n\r\ncontract InstaOneSplitResolver is Resolver {\r\n    string public constant name = \"1Split-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaOneSplitResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://81e00f94b438e3a5cde8138f88b00ca3ef0d6c64d6030a741c985f00fe24435a"}]}