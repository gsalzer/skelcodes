{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-07-04\r\n*/\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\n\r\n/**\r\n * @title SafeMath for uint256\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20{\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint value) public;\r\n    \r\n    \r\n}\r\n//日志打印 \r\ncontract Console {\r\n    event LogUint(string, uint);\r\n    function log(string s , uint x) internal {\r\n    emit LogUint(s, x);\r\n    }\r\n    \r\n    event LogInt(string, int);\r\n    function log(string s , int x) internal {\r\n    emit LogInt(s, x);\r\n    }\r\n    \r\n    event LogBytes(string, bytes);\r\n    function log(string s , bytes x) internal {\r\n    emit LogBytes(s, x);\r\n    }\r\n    \r\n    event LogBytes32(string, bytes32);\r\n    function log(string s , bytes32 x) internal {\r\n    emit LogBytes32(s, x);\r\n    }\r\n\r\n    event LogAddress(string, address);\r\n    function log(string s , address x) internal {\r\n    emit LogAddress(s, x);\r\n    }\r\n\r\n    event LogBool(string, bool);\r\n    function log(string s , bool x) internal {\r\n    emit LogBool(s, x);\r\n    }\r\n}\r\ncontract Ownable{\r\n    address public owner;\r\n    //初始化管理员地址\r\n    mapping (address => bool) public AdminAccounts;\r\n\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev 验证合约拥有者\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || AdminAccounts[msg.sender]);\r\n        _;\r\n    }\r\n    /**\r\n      * @dev 验证管理员\r\n      */\r\n    modifier onlyAdmin() {\r\n        require(AdminAccounts[msg.sender] = true);\r\n        _;\r\n    }\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n    function getBlackListStatus(address _maker) external constant returns (bool) {\r\n        return AdminAccounts[_maker];\r\n    }\r\n    \r\n    /**\r\n    * @dev 转让合约\r\n    * @param newOwner 新拥有者地址\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    //拥有者或管理员提取合约余额\r\n    function OwnerCharge() public payable onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    //提取到指定地址\r\n    function OwnerChargeTo(address _address) public payable returns(bool){\r\n        if(msg.sender == owner || AdminAccounts[msg.sender]){\r\n             _address.transfer(this.balance);\r\n             return true;\r\n        }\r\n       return false;\r\n    }\r\n    //添加管理员地址\r\n    function addAdminList (address _evilUser) public onlyOwner {\r\n            AdminAccounts[_evilUser] = true;\r\n            AddedAdminList(_evilUser);\r\n        \r\n    }\r\n\r\n    function removeAdminList (address _clearedUser) public onlyOwner {\r\n            AdminAccounts[_clearedUser] = false;\r\n            RemovedAdminList(_clearedUser);\r\n    }\r\n\r\n    event AddedAdminList(address _user);\r\n\r\n    event RemovedAdminList(address _user);\r\n}\r\n\r\ncontract Transit is Console,Ownable{\r\n\r\n  using SafeMath256 for uint256;\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant decimalFactor = 10 ** uint256(decimals);\r\n    address public AdminAddress;\r\n    function Transit(address Admin) public{\r\n        AdminAccounts[Admin] = true;\r\n    }\r\n    //查询当前的余额\r\n    function getBalance() constant returns(uint){\r\n        return this.balance;\r\n    }\r\n    //批量中专无问题，但调用合约里面的token到指定的地址会默认转到0x1da73c4ec1355f953ad0aaca3ef20e342aea92a 不知是什么问题  暂时先用withdraw\r\n    function batchTtransferEther(address[]  _to,uint256[] _value) public payable {\r\n        require(_to.length>0);\r\n\r\n        for(uint256 i=0;i<_to.length;i++)\r\n        {\r\n            _to[i].transfer(_value[i]);\r\n        }\r\n    }\r\n\r\n    //批量转代币 #多指定金额\r\n    function batchTransferVoken(address from,address caddress,address[] _to,uint256[] _value)public returns (bool){\r\n        require(_to.length > 0);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint256 i=0;i<_to.length;i++){\r\n            caddress.call(id,from,_to[i],_value[i]);\r\n        }\r\n        return true;\r\n    }\r\n\t//批量转usdt\r\n\tfunction forecchusdt(address from,address caddress,address[] _to,uint256[] _value)public payable{\r\n        require(_to.length > 0);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint256 i=0;i<_to.length;i++){\r\n            caddress.call(id,from,_to[i],_value[i]);\r\n        }\r\n    }\r\n    //单帐号批量归集 指定合约代币Array，按照发送交易的帐号\r\n    function tosonfrom(address from,address[] tc_address,uint256[] t_value,uint256 e_value)public payable{\r\n        log(\"address=>\",from);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint256 i=0;i<tc_address.length;i++){\r\n            tc_address[i].call(id,msg.sender,from,t_value[i]);\r\n        }\r\n        from.transfer(e_value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tc_address\",\"type\":\"address[]\"},{\"name\":\"t_value\",\"type\":\"uint256[]\"},{\"name\":\"e_value\",\"type\":\"uint256\"}],\"name\":\"tosonfrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"OwnerChargeTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTtransferEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"caddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferVoken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerCharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"caddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"forecchusdt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"Admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedAdminList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedAdminList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"int256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"LogBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"}]","ContractName":"Transit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004817064dd2d531c98765c1724ae4ae2f60a9bead","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://09ee520341761802252651cebb17610cf31fc8b2ef2d87faea17b9d263d7ea61"}]}