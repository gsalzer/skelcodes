{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: Addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: Subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: Multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when divide by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: Modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ETHERMAXX is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    address public burnAddress;\r\n    address public owner;\r\n    address public sigAddress;\r\n    address public ethermaxxAddress;\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    mapping (bytes32 => bool) private hashConfirmation;\r\n\r\n    constructor (address _burnAddress, address _sigAddress) public {\r\n        symbol = \"ERX\";\r\n        name = \"ETHERMAXX\";\r\n        decimals = 18;\r\n        burnAddress = _burnAddress;\r\n        owner = msg.sender;\r\n        sigAddress = _sigAddress;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check balance of the holder\r\n     * @param _owner Token holder address\r\n     */ \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to specified address\r\n     * @param _to Receiver address\r\n     * @param _value Amount of the tokens\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_value <= balances[msg.sender], \"Insufficient balance\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        uint256 burnFee = (_value.mul(0.1 ether)).div(10**20);\r\n        uint256 balanceFee = _value.sub(burnFee);\r\n        balances[burnAddress] = balances[burnAddress].add(burnFee);\r\n        balances[_to] = balances[_to].add(balanceFee);\r\n        \r\n        emit Transfer(msg.sender, _to, balanceFee);\r\n        emit Transfer(msg.sender, burnAddress, burnFee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from  The holder address\r\n     * @param _to  The Receiver address\r\n     * @param _value  the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0), \"Invalid from address\");\r\n        require(_to != address(0), \"Invalid to address\");\r\n        require(_value <= balances[_from], \"Invalid balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"Invalid allowance\");\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        uint256 burnFee = (_value.mul(0.1 ether)).div(10**20);\r\n        uint256 balanceFee = _value.sub(burnFee);\r\n        balances[burnAddress] = balances[burnAddress].add(burnFee);\r\n        balances[msg.sender] = balances[msg.sender].add(balanceFee);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, balanceFee);\r\n        emit Transfer(_from, burnAddress, burnFee);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve respective tokens for spender\r\n     * @param _spender Spender address\r\n     * @param _value Amount of tokens to be allowed\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0), \"Null address\");\r\n        require(_value > 0, \"Invalid value\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To view approved balance\r\n     * @param _owner Holder address\r\n     * @param _spender Spender address\r\n     */ \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }  \r\n    \r\n    /**\r\n     * @dev To change burnt Address\r\n     * @param _newOwner New owner address\r\n     */ \r\n    function changeowner(address _newOwner) public onlyOwner returns(bool) {\r\n        require(_newOwner != address(0), \"Invalid Address\");\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev To change ETHERMAXX Address\r\n     * @param _newEthermaxxAddress New sigOwner address\r\n     */ \r\n    function changeEthermaxxAddress(address _newEthermaxxAddress) public onlyOwner returns(bool) {\r\n        require(_newEthermaxxAddress != address(0), \"Invalid Address\");\r\n        ethermaxxAddress = _newEthermaxxAddress;\r\n        return true;\r\n    }\r\n   \r\n    \r\n    /**\r\n     * @dev To change burnt Address\r\n     * @param _burnAddress New burn address\r\n     */ \r\n    function changeburnt(address _burnAddress) public onlyOwner returns(bool) {\r\n        require(_burnAddress != address(0), \"Invalid Address\");\r\n        burnAddress = _burnAddress;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To change signature Address\r\n     * @param _newSigAddress New sigOwner address\r\n     */ \r\n    function changesigAddress(address _newSigAddress) public onlyOwner returns(bool) {\r\n        require(_newSigAddress != address(0), \"Invalid Address\");\r\n        sigAddress = _newSigAddress;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To mint OAP Tokens\r\n     * @param _receiver Reciever address\r\n     * @param _amount Amount to mint\r\n     * @param _mrs _mrs[0] - message hash _mrs[1] - r of signature _mrs[2] - s of signature \r\n     * @param _v  v of signature\r\n     */ \r\n    function mint(address _receiver, uint256 _amount,bytes32[3] memory _mrs, uint8 _v) public returns (bool) {\r\n        require(_receiver != address(0), \"Invalid address\");\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        require(hashConfirmation[_mrs[0]] != true, \"Hash exists\");\r\n        require(msg.sender == ethermaxxAddress,\"only From ETHERMAXX\");\r\n        require(ecrecover(_mrs[0], _v, _mrs[1], _mrs[2]) == sigAddress, \"Invalid Signature\");\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        hashConfirmation[_mrs[0]] = true;\r\n        emit Transfer(address(0), _receiver, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To mint OAP Tokens\r\n     * @param _receiver Reciever address\r\n     * @param _amount Amount to mint\r\n     */ \r\n    function ownerMint(address _receiver, uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_receiver != address(0), \"Invalid address\");\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        emit Transfer(address(0), _receiver, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEthermaxxAddress\",\"type\":\"address\"}],\"name\":\"changeEthermaxxAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"changeburnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeowner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigAddress\",\"type\":\"address\"}],\"name\":\"changesigAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethermaxxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_mrs\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETHERMAXX","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007c2cbcf14cd44b33f3b0a623416bdfb6255e45d70000000000000000000000005003ad8c968ac87bbbc2db16daf5434fa1c07643","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8eae5ae4b49a3453feeed5dfd303b2d060fdde0a26d57184adad3e7601d21c81"}]}