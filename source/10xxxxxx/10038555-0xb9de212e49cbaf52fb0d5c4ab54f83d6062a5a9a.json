{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-10\r\n*/\r\n\r\npragma solidity ^0.4.12;\r\n     \r\n    contract IMigrationContract {\r\n        function migrate(address addr, uint256 nas) returns (bool success);\r\n    }\r\n     \r\n    contract SafeMath {\r\n     \r\n     \r\n        function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n            uint256 z = x + y;\r\n            assert((z >= x) && (z >= y));\r\n            return z;\r\n        }\r\n     \r\n        function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n            assert(x >= y);\r\n            uint256 z = x - y;\r\n            return z;\r\n        }\r\n     \r\n        function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n            uint256 z = x * y;\r\n            assert((x == 0)||(z/x == y));\r\n            return z;\r\n        }\r\n     \r\n    }\r\n     \r\n    contract Token {\r\n        uint256 public totalSupply;\r\n        function balanceOf(address _owner) constant returns (uint256 balance);\r\n        function transfer(address _to, uint256 _value) returns (bool success);\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n        function approve(address _spender, uint256 _value) returns (bool success);\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    }\r\n     \r\n     \r\n    /*  ERC 20 token */\r\n    contract StandardToken is Token {\r\n     \r\n        function transfer(address _to, uint256 _value) returns (bool success) {\r\n            require(!frozenAccount[msg.sender]);\r\n            if (msg.sender != address(0) && balances[msg.sender] >= _value && _value > 0) {\r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n     \r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n            if (_from != address(0) && _to !=address(0) && balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n                balances[_to] += _value;\r\n                balances[_from] -= _value;\r\n                allowed[_from][msg.sender] -= _value;\r\n                Transfer(_from, _to, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n     \r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n     \r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n     \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n            return allowed[_owner][_spender];\r\n        }\r\n     \r\n        mapping (address => uint256) balances;\r\n        mapping (address => mapping (address => uint256)) allowed;\r\n        mapping (address => bool) public frozenAccount;\r\n        event FrozenFunds(address target, bool frozen);\r\n    }\r\n     \r\n    contract LbmToken is StandardToken, SafeMath {\r\n     \r\n        // metadata\r\n        string  public constant name = \"lb\";\r\n        string  public constant symbol = \"LB\";\r\n        uint256 public constant decimals = 3;\r\n        string  public version = \"1.0\";\r\n     \r\n        // contracts\r\n        address public ethFundDeposit;          // ETH存放地址\r\n        address public newContractAddr;         // token更新地址\r\n     \r\n        // crowdsale parameters\r\n        bool    public isFunding;                // 状态切换到true\r\n        uint256 public fundingStartBlock;\r\n        uint256 public fundingStopBlock;\r\n     \r\n               // 正在售卖中的tokens数量\r\n               // 总的售卖数量token\r\n           // 总的已经交易的 token\r\n                   \r\n     \r\n        // events\r\n        event AllocateToken(address indexed _to, uint256 _value);   // 分配的私有交易token;\r\n        event IssueToken(address indexed _to, uint256 _value);      // 公开发行售卖的token;\r\n        \r\n        \r\n        event Migrate(address indexed _to, uint256 _value);\r\n        event AddSupply(uint amount);\r\n     \r\n        // 转换\r\n        function formatDecimals(uint256 _value) internal returns (uint256 ) {\r\n            return _value * 10 ** decimals;\r\n        }\r\n     \r\n        // constructor\r\n        function LbmToken(address _ethFundDeposit, uint256 _totalSupply)\r\n            \r\n        {\r\n            ethFundDeposit = _ethFundDeposit;                        //创始人 \r\n            fundingStartBlock = 0;\r\n            fundingStopBlock = 0;\r\n     \r\n            \r\n            totalSupply = formatDecimals(_totalSupply);\r\n            balances[msg.sender] = totalSupply;\r\n            \r\n        }\r\n     \r\n        modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\r\n \r\n        ///@dev  启动区块检测 异常的处理\r\n        function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\r\n            if (isFunding) throw;\r\n            if (_fundingStartBlock >= _fundingStopBlock) throw;\r\n            if (block.number >= _fundingStartBlock) throw;\r\n     \r\n            fundingStartBlock = _fundingStartBlock;\r\n            fundingStopBlock = _fundingStopBlock;\r\n            isFunding = true;\r\n        }\r\n     \r\n        ///@dev  关闭区块异常处理\r\n        function stopFunding() isOwner external {\r\n            if (!isFunding) throw;\r\n            isFunding = false;\r\n        }\r\n     \r\n        ///@dev 开发了一个新的合同来接收token（或者更新token）\r\n        function setMigrateContract(address _newContractAddr) isOwner external {\r\n            if (_newContractAddr == newContractAddr) throw;\r\n            newContractAddr = _newContractAddr;\r\n        }\r\n     \r\n        ///@dev 设置新的所有者地址\r\n        function changeOwner(address _newFundDeposit) isOwner() external {\r\n            if (_newFundDeposit == address(0x0)) throw;\r\n            ethFundDeposit = _newFundDeposit;\r\n        }\r\n     \r\n        ///dev转移token到新的合约\r\n        function migrate() external {\r\n            if(isFunding) throw;\r\n            if(newContractAddr == address(0x0)) throw;\r\n     \r\n            uint256 tokens = balances[msg.sender];\r\n            if (tokens == 0) throw;\r\n     \r\n            balances[msg.sender] = 0;\r\n           \r\n     \r\n            IMigrationContract newContract = IMigrationContract(newContractAddr);\r\n            if (!newContract.migrate(msg.sender, tokens)) throw;\r\n     \r\n            Migrate(msg.sender, tokens);               // log it\r\n        }\r\n     \r\n\r\n     \r\n        ///@dev  将 token分配到预处理地址。\r\n        function allocateToken (address _addr, uint256 _eth) isOwner() external {\r\n            if (_eth == 0) throw;\r\n            if (_addr == address(0x0)) throw;\r\n     \r\n            uint256 tokens = formatDecimals(_eth);\r\n            if (tokens  > totalSupply) throw;\r\n     \r\n           \r\n            balances[_addr] += tokens;\r\n     \r\n            AllocateToken(_addr, tokens);  // 记录token日志\r\n        }\r\n        ///增发 代币 \r\n        function mine(address target, uint _amount) public isOwner {\r\n         uint256 amount = formatDecimals(_amount);\r\n         totalSupply += amount;\r\n         balances[target] += amount;\r\n         Transfer(address(0), target, amount);\r\n        } \r\n       /// 资产冻结 \r\n        function freezeAccount(address target, bool freeze)isOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"allocateToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopFunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContractAddr\",\"type\":\"address\"}],\"name\":\"setMigrateContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingStopBlock\",\"type\":\"uint256\"}],\"name\":\"startFunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFundDeposit\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStopBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllocateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LbmToken","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f19a01bd51420e55f2ed68efd7212dba560f528000000000000000000000000000000000000000000000000000000174876e800","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://423190a9584f7e9ef396b194e37c431e1f9a08a3b96d4287ab5703f0eb314a06"}]}