{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n// Access controls access contracts' private methods\r\ncontract Access {\r\n\r\n    mapping(address => bool) private _admins;\r\n    mapping(address => bool) private _services;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admins[msg.sender], \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(_admins[msg.sender] || _services[msg.sender], \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _admins[msg.sender] = true;\r\n    }\r\n\r\n    function addAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = false;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns (bool) {\r\n        return _admins[addr];\r\n    }\r\n\r\n    function addService(address addr) public onlyAdmin {\r\n        _services[addr] = true;\r\n    }\r\n\r\n    function removeService(address addr) public onlyAdmin {\r\n        _services[addr] = false;\r\n    }\r\n\r\n    function isService(address addr) public view returns (bool) {\r\n        return _services[addr];\r\n    }\r\n}\r\n\r\n\r\n// CyberbridgeETH receives ETH deposits\r\ncontract CyberbridgeETH {\r\n\r\n    Access public access;\r\n\r\n    bool public isActive = true;\r\n\r\n    event onDeposit(address from, uint256 amount, bytes32 token);\r\n    event onWithdraw(address to, uint256 amount, bytes32 token);\r\n\r\n    modifier onlyAdmin() {\r\n        require(access.isAdmin(msg.sender), \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(access.isAdmin(msg.sender) || access.isService(msg.sender), \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0x0), \"null address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActiveContract() {\r\n        require(isActive, \"inactive contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address accessAddr) public onlyValidAddress(accessAddr) {\r\n        access = Access(accessAddr);\r\n    }\r\n\r\n    function setActive(bool active) public onlyAdmin {\r\n        isActive = active;\r\n    }\r\n\r\n    function refill() public onlyAdmin payable { }\r\n\r\n    function drain(address recipientAddr) public onlyAdmin onlyValidAddress(recipientAddr) {\r\n        uint256 ethAmount = address(this).balance;\r\n        if (ethAmount > 0) {\r\n            recipientAddr.transfer(ethAmount);\r\n        }\r\n    }\r\n\r\n    // ---\r\n\r\n    function deposit(bytes32 token) public onlyActiveContract payable {\r\n        require(msg.value > 0, \"zero amount\");\r\n        emit onDeposit(msg.sender, msg.value, token);\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount, bytes32 token) public onlyActiveContract onlyAdminOrService onlyValidAddress(to) {\r\n        require(amount > 0, \"zero amount\");\r\n        require(address(this).balance >= amount, \"not enough funds\");\r\n        to.transfer(amount);\r\n        emit onWithdraw(to, amount, token);\r\n    }\r\n}\r\n\r\n\r\n// CyberbridgeUSDT receives USDT deposits\r\ncontract CyberbridgeUSDT {\r\n\r\n    Access public access;\r\n    IStdToken public usdtToken;\r\n\r\n    bool public isActive = true;\r\n\r\n    event onDeposit(address from, uint256 amount, bytes32 token);\r\n    event onWithdraw(address to, uint256 amount, bytes32 token);\r\n\r\n    modifier onlyAdmin() {\r\n        require(access.isAdmin(msg.sender), \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(access.isAdmin(msg.sender) || access.isService(msg.sender), \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0x0), \"null address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActiveContract() {\r\n        require(isActive, \"inactive contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address accessAddr, address usdtAddr) public onlyValidAddress(accessAddr) onlyValidAddress(usdtAddr) {\r\n        access = Access(accessAddr);\r\n        usdtToken = IStdToken(usdtAddr);\r\n    }\r\n\r\n    function setActive(bool active) public onlyAdmin {\r\n        isActive = active;\r\n    }\r\n\r\n    function drain(address recipientAddr) public onlyAdmin onlyValidAddress(recipientAddr) {\r\n        uint256 amount = usdtToken.balanceOf(address(this));\r\n        if (amount > 0) {\r\n            usdtToken.transfer(recipientAddr, amount);\r\n        }\r\n    }\r\n\r\n    // ---\r\n\r\n    function deposit(uint256 usdtAmount, bytes32 token) public onlyActiveContract {\r\n        require(usdtAmount > 0, \"zero amount\");\r\n        require(usdtToken.balanceOf(msg.sender) >= usdtAmount, \"not enough\");\r\n        require(usdtToken.allowance(msg.sender, address(this)) >= usdtAmount, \"check allowance\");\r\n\r\n        if (usdtToken.transferFrom(msg.sender, address(this), usdtAmount)) {\r\n            emit onDeposit(msg.sender, usdtAmount, token);\r\n        }\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount, bytes32 token) public onlyActiveContract onlyAdminOrService onlyValidAddress(to) {\r\n        require(amount > 0, \"zero amount\");\r\n        require(usdtToken.balanceOf(address(this)) >= amount, \"not enough\");\r\n\r\n        if (usdtToken.transfer(to, amount)) {\r\n            emit onWithdraw(to, amount, token);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract IStdToken {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"access\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipientAddr\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"accessAddr\",\"type\":\"address\"},{\"name\":\"usdtAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"CyberbridgeUSDT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006aa840fae066a9d94afee8b903572ca8282b7a67000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e6b8a27c74218e23a1d27a2c2beaafcf2a2a801fbaf332287cb329b4d6694284"}]}