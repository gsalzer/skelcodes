{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"interface ERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address who) external view returns (uint256);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function transfer(address to, uint256 value) external returns (bool);\\n  function approve(address spender, uint256 value) external returns (bool);\\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\n  function burn(uint256 amount) external;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"library SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a / b;\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a);\\n    return c;\\n  }\\n\\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\\n    uint256 c = add(a,m);\\n    uint256 d = sub(c,1);\\n    return mul(div(d,m),m);\\n  }\\n}\\n\"},\"upgrade.sol\":{\"content\":\"pragma solidity 0.4.26;\\n\\n//Contract for upgrading Meridian Network tokens from MRDN to LOCK\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract MeridianUpgrade{\\n  using SafeMath for uint;\\n\\n  ERC20 public oldToken;\\n  ERC20 public newToken;\\n  constructor(address tokenAddr1,address tokenAddr2) public{\\n    oldToken=ERC20(tokenAddr1);\\n    newToken=ERC20(tokenAddr2);\\n  }\\n  function upgrade(uint amount) public{\\n    //transfer old tokens\\n    oldToken.transferFrom(msg.sender,address(this),amount);\\n    //user recieves tokens at given ratio\\n    newToken.transfer(msg.sender,amount);\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr1\",\"type\":\"address\"},{\"name\":\"tokenAddr2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MeridianUpgrade","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000896a07e3788983ec52eaf0f9c6f6e031464ee2cc00000000000000000000000095172ccbe8344fecd73d0a30f54123652981bd6f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b5526051faf5795b554c75d7da0871af7e237bf3fe45c7add33dd25045109238"}]}