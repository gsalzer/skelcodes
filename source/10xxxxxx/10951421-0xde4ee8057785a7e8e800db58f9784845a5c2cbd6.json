{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./Address.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \\\"Address: call to non-contract\\\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\"\r\n    },\r\n    \"./Context.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\"\r\n    },\r\n    \"./Dexe.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\npragma solidity 0.7.0;\npragma experimental ABIEncoderV2;\n\nimport './Ownable.sol';\nimport './SafeMath.sol';\nimport './ERC20Burnable.sol';\n\nimport './IPriceFeed.sol';\nimport './IDexe.sol';\n\nlibrary ExtraMath {\n    using SafeMath for uint;\n\n    function divCeil(uint _a, uint _b) internal pure returns(uint) {\n        if (_a.mod(_b) > 0) {\n            return (_a / _b).add(1);\n        }\n        return _a / _b;\n    }\n\n    function toUInt8(uint _a) internal pure returns(uint8) {\n        require(_a <= uint8(-1), 'uint8 overflow');\n        return uint8(_a);\n    }\n\n    function toUInt32(uint _a) internal pure returns(uint32) {\n        require(_a <= uint32(-1), 'uint32 overflow');\n        return uint32(_a);\n    }\n\n    function toUInt120(uint _a) internal pure returns(uint120) {\n        require(_a <= uint120(-1), 'uint120 overflow');\n        return uint120(_a);\n    }\n\n    function toUInt128(uint _a) internal pure returns(uint128) {\n        require(_a <= uint128(-1), 'uint128 overflow');\n        return uint128(_a);\n    }\n}\n\ncontract Dexe is Ownable, ERC20Burnable, IDexe {\n    using ExtraMath for *;\n    using SafeMath for *;\n\n    uint private constant DEXE = 10**18;\n    uint private constant USDC = 10**6;\n    uint private constant USDT = 10**6;\n    uint private constant MONTH = 30 days;\n    uint public constant ROUND_SIZE_BASE = 190_476;\n    uint public constant ROUND_SIZE = ROUND_SIZE_BASE * DEXE;\n    uint public constant FIRST_ROUND_SIZE_BASE = 1_000_000;\n\n\n    IERC20 public usdcToken;\n    IERC20 public usdtToken;\n    IPriceFeed public usdtPriceFeed; // Provides USDC per 1 * USDT\n    IPriceFeed public dexePriceFeed; // Provides USDC per 1 * DEXE\n    IPriceFeed public ethPriceFeed; // Provides USDC per 1 * ETH\n\n    // Deposits are immediately transferred here.\n    address payable public treasury;\n\n    enum LockType {\n        Staking,\n        Foundation,\n        Team,\n        Partnership,\n        School,\n        Marketing\n    }\n\n    enum ForceReleaseType {\n        X7,\n        X10,\n        X15,\n        X20\n    }\n\n    struct LockConfig {\n        uint32 releaseStart;\n        uint32 vesting;\n    }\n\n    struct Lock {\n        uint128 balance; // Total locked.\n        uint128 released; // Released so far.\n    }\n\n    uint public averagePrice; // 2-10 rounds average.\n    uint public override launchedAfter; // How many seconds passed between sale end and product launch.\n\n    mapping(uint => mapping(address => HolderRound)) internal _holderRounds;\n    mapping(address => UserInfo) internal _usersInfo;\n    mapping(address => BalanceInfo) internal _balanceInfo;\n\n    mapping(LockType => LockConfig) public lockConfigs;\n    mapping(LockType => mapping(address => Lock)) public locks;\n\n    mapping(address => mapping(ForceReleaseType => bool)) public forceReleased;\n\n    uint constant ROUND_DURATION_SEC = 86400;\n    uint constant TOTAL_ROUNDS = 22;\n\n    struct Round {\n        uint120 totalDeposited; // USDC\n        uint128 roundPrice; // USDC per 1 * DEXE\n    }\n\n    mapping(uint => Round) public rounds; // Indexes are 1-22.\n\n    // Sunday, September 28, 2020 12:00:00 PM GMT\n    uint public constant tokensaleStartDate = 1601294400;\n    uint public override constant tokensaleEndDate = tokensaleStartDate + ROUND_DURATION_SEC * TOTAL_ROUNDS;\n\n    event NoteDeposit(address sender, uint value, bytes data);\n    event Note(address sender, bytes data);\n\n    modifier noteDeposit() {\n        emit NoteDeposit(_msgSender(), msg.value, msg.data);\n        _;\n    }\n\n    modifier note() {\n        emit Note(_msgSender(), msg.data);\n        _;\n    }\n\n    constructor(address _distributor) ERC20('Dexe', 'DEXE') {\n        _mint(address(this), 99_000_000 * DEXE);\n\n        // Market Liquidity Fund.\n        _mint(_distributor, 1_000_000 * DEXE);\n\n        // Staking rewards are locked on the Dexe itself.\n        locks[LockType.Staking][address(this)].balance = 10_000_000.mul(DEXE).toUInt128();\n\n        locks[LockType.Foundation][_distributor].balance = 33_000_000.mul(DEXE).toUInt128();\n        locks[LockType.Team][_distributor].balance = 20_000_000.mul(DEXE).toUInt128();\n        locks[LockType.Partnership][_distributor].balance = 16_000_000.mul(DEXE).toUInt128();\n        locks[LockType.School][_distributor].balance = 10_000_000.mul(DEXE).toUInt128();\n        locks[LockType.Marketing][_distributor].balance = 5_000_000.mul(DEXE).toUInt128();\n\n        lockConfigs[LockType.Staking].releaseStart = (tokensaleEndDate).toUInt32();\n        lockConfigs[LockType.Staking].vesting = (365 days).toUInt32();\n\n        lockConfigs[LockType.Foundation].releaseStart = (tokensaleEndDate + 365 days).toUInt32();\n        lockConfigs[LockType.Foundation].vesting = (1460 days).toUInt32();\n\n        lockConfigs[LockType.Team].releaseStart = (tokensaleEndDate + 180 days).toUInt32();\n        lockConfigs[LockType.Team].vesting = (730 days).toUInt32();\n\n        lockConfigs[LockType.Partnership].releaseStart = (tokensaleEndDate + 90 days).toUInt32();\n        lockConfigs[LockType.Partnership].vesting = (365 days).toUInt32();\n\n        lockConfigs[LockType.School].releaseStart = (tokensaleEndDate + 60 days).toUInt32();\n        lockConfigs[LockType.School].vesting = (365 days).toUInt32();\n\n        lockConfigs[LockType.Marketing].releaseStart = (tokensaleEndDate + 30 days).toUInt32();\n        lockConfigs[LockType.Marketing].vesting = (365 days).toUInt32();\n\n        treasury = payable(_distributor);\n    }\n\n    function setUSDTTokenAddress(IERC20 _address) external onlyOwner() note() {\n        usdtToken = _address;\n    }\n\n    function setUSDCTokenAddress(IERC20 _address) external onlyOwner() note() {\n        usdcToken = _address;\n    }\n\n    function setUSDTFeed(IPriceFeed _address) external onlyOwner() note() {\n        usdtPriceFeed = _address;\n    }\n\n    function setDEXEFeed(IPriceFeed _address) external onlyOwner() note() {\n        dexePriceFeed = _address;\n    }\n\n    function setETHFeed(IPriceFeed _address) external onlyOwner() note() {\n        ethPriceFeed = _address;\n    }\n\n    function setTreasury(address payable _address) external onlyOwner() note() {\n        require(_address != address(0), 'Not zero address required');\n\n        treasury = _address;\n    }\n\n    function addToWhitelist(address _address, uint _limit) external onlyOwner() note() {\n        _updateWhitelist(_address, _limit);\n    }\n\n    function removeFromWhitelist(address _address) external onlyOwner() note() {\n        _updateWhitelist(_address, 0);\n    }\n\n    function _updateWhitelist(address _address, uint _limit) private {\n        _usersInfo[_address].firstRoundLimit = _limit.toUInt120();\n    }\n\n    // For UI purposes.\n    function getAllRounds() external view returns(Round[22] memory) {\n        Round[22] memory _result;\n        for (uint i = 1; i <= 22; i++) {\n            _result[i-1] = rounds[i];\n        }\n        return _result;\n    }\n\n    // For UI purposes.\n    function getFullHolderInfo(address _holder) external view\n    returns(\n        UserInfo memory _info,\n        HolderRound[22] memory _rounds,\n        Lock[6] memory _locks,\n        bool _isWhitelisted,\n        bool[4] memory _forceReleases,\n        uint _balance\n    ) {\n        _info = _usersInfo[_holder];\n        for (uint i = 1; i <= 22; i++) {\n            _rounds[i-1] = _holderRounds[i][_holder];\n        }\n        for (uint i = 0; i < 6; i++) {\n            _locks[i] = locks[LockType(i)][_holder];\n        }\n        _isWhitelisted = _usersInfo[_holder].firstRoundLimit > 0;\n        for (uint i = 0; i < 4; i++) {\n            _forceReleases[i] = forceReleased[_holder][ForceReleaseType(i)];\n        }\n        _balance = balanceOf(_holder);\n        return (_info, _rounds, _locks, _isWhitelisted, _forceReleases, _balance);\n    }\n\n    // Excludes possibility of unexpected price change.\n    function prepareDistributionPrecise(uint _round, uint _botPriceLimit, uint _topPriceLimit)\n    external onlyOwner() note() {\n        uint _currentPrice = updateAndGetCurrentPrice();\n        require(_botPriceLimit <= _currentPrice && _currentPrice <= _topPriceLimit,\n           'Price is out of range');\n\n        _prepareDistribution(_round);\n    }\n\n    // Should be performed in the last hour of every round.\n    function prepareDistribution(uint _round) external onlyOwner() note() {\n        _prepareDistribution(_round);\n    }\n\n    function _prepareDistribution(uint _round) private {\n        require(isRoundDepositsEnded(_round),\n            'Deposit round not ended');\n\n        Round memory _localRound = rounds[_round];\n        require(_localRound.roundPrice == 0, 'Round already prepared');\n        require(_round > 0 && _round < 23, 'Round is not valid');\n\n        if (_round == 1) {\n            _localRound.roundPrice = _localRound.totalDeposited.divCeil(FIRST_ROUND_SIZE_BASE).toUInt128();\n\n            // If nobody deposited.\n            if (_localRound.roundPrice == 0) {\n                _localRound.roundPrice = 1;\n            }\n            rounds[_round].roundPrice = _localRound.roundPrice;\n            return;\n        }\n\n        require(isRoundPrepared(_round.sub(1)), 'Previous round not prepared');\n\n        uint _localRoundPrice = updateAndGetCurrentPrice();\n        uint _totalTokensSold = _localRound.totalDeposited.mul(DEXE) / _localRoundPrice;\n\n        if (_totalTokensSold < ROUND_SIZE) {\n            // Apply 0-10% discount based on how much tokens left. Empty round applies 10% discount.\n            _localRound.roundPrice =\n                (uint(9).mul(ROUND_SIZE_BASE).mul(_localRoundPrice).add(_localRound.totalDeposited)).divCeil(\n                uint(10).mul(ROUND_SIZE_BASE)).toUInt128();\n            uint _discountedTokensSold = _localRound.totalDeposited.mul(DEXE) / _localRound.roundPrice;\n\n            rounds[_round].roundPrice = _localRound.roundPrice;\n            _burn(address(this), ROUND_SIZE.sub(_discountedTokensSold));\n        } else {\n            // Round overflown, calculate price based on even spread of available tokens.\n            rounds[_round].roundPrice = _localRound.totalDeposited.divCeil(ROUND_SIZE_BASE).toUInt128();\n        }\n\n        if (_round == 10) {\n            uint _averagePrice;\n            for (uint i = 2; i <= 10; i++) {\n                _averagePrice = _averagePrice.add(rounds[i].roundPrice);\n            }\n\n            averagePrice = _averagePrice / 9;\n        }\n    }\n\n    // Receive tokens/rewards for all processed rounds.\n    function receiveAll() public {\n        _receiveAll(_msgSender());\n    }\n\n    function _receiveAll(address _holder) private {\n        // Holder received everything.\n        if (_holderRounds[TOTAL_ROUNDS][_holder].status == HolderRoundStatus.Received) {\n            return;\n        }\n\n        // Holder didn't participate in the sale.\n        if (_usersInfo[_holder].firstRoundDeposited == 0) {\n            return;\n        }\n\n        if (_notPassed(tokensaleStartDate)) {\n            return;\n        }\n\n        uint _currentRound = currentRound();\n\n        for (uint i = _usersInfo[_holder].firstRoundDeposited; i < _currentRound; i++) {\n            // Skip received rounds.\n            if (_holderRounds[i][_holder].status == HolderRoundStatus.Received) {\n                continue;\n            }\n\n            Round memory _localRound = rounds[i];\n            require(_localRound.roundPrice > 0, 'Round is not prepared');\n\n            _holderRounds[i][_holder].status = HolderRoundStatus.Received;\n            _receiveDistribution(i, _holder, _localRound);\n            _receiveRewards(i, _holder, _localRound);\n        }\n    }\n\n    // Receive tokens based on the deposit.\n    function _receiveDistribution(uint _round, address _holder, Round memory _localRound) private {\n        HolderRound memory _holderRound = _holderRounds[_round][_holder];\n        uint _balance = _holderRound.deposited.mul(DEXE) / _localRound.roundPrice;\n\n        uint _endBalance = _holderRound.endBalance.add(_balance);\n        _holderRounds[_round][_holder].endBalance = _endBalance.toUInt128();\n        if (_round < TOTAL_ROUNDS) {\n            _holderRounds[_round.add(1)][_holder].endBalance =\n                _holderRounds[_round.add(1)][_holder].endBalance.add(_endBalance).toUInt128();\n        }\n        _transfer(address(this), _holder, _balance);\n    }\n\n    // Receive rewards based on the last round balance, participation in 1st round and this round fill.\n    function _receiveRewards(uint _round, address _holder, Round memory _localRound) private {\n        if (_round > 21) {\n            return;\n        }\n        HolderRound memory _holderRound = _holderRounds[_round][_holder];\n\n        uint _reward;\n        if (_round == 1) {\n            // First round is always 5%.\n            _reward = (_holderRound.endBalance).mul(5) / 100;\n        } else {\n            uint _x2 = 1;\n            uint _previousRoundBalance = _holderRounds[_round.sub(1)][_holder].endBalance;\n\n            // Double reward if increased balance since last round by 1%+.\n            if (_previousRoundBalance > 0 &&\n                (_previousRoundBalance.mul(101) / 100) < _holderRound.endBalance)\n            {\n                _x2 = 2;\n            }\n\n            uint _roundPrice = _localRound.roundPrice;\n            uint _totalDeposited = _localRound.totalDeposited;\n            uint _holderBalance = _holderRound.endBalance;\n            uint _minPercent = 2;\n            uint _maxBonusPercent = 6;\n            if (_holderRounds[1][_holder].endBalance > 0) {\n                _minPercent = 5;\n                _maxBonusPercent = 15;\n            }\n            // Apply reward modifiers in the following way:\n            // 1. If participated in round 1, then the base is 5%, otherwise 2%.\n            // 2. Depending on the round fill 0-100% get extra 15-0% (round 1 participants) or 6-0%.\n            // 3. Double reward if increased balance since last round by 1%+.\n            _reward = _minPercent.add(_maxBonusPercent).mul(_roundPrice).mul(ROUND_SIZE_BASE)\n                .sub(_maxBonusPercent.mul(_totalDeposited)).mul(_holderBalance).mul(_x2) /\n                100.mul(_roundPrice).mul(ROUND_SIZE_BASE);\n        }\n\n        uint _rewardsLeft = locks[LockType.Staking][address(this)].balance;\n        // If not enough left, give everything.\n        if (_rewardsLeft < _reward) {\n            _reward = _rewardsLeft;\n        }\n\n        locks[LockType.Staking][_holder].balance =\n            locks[LockType.Staking][_holder].balance.add(_reward).toUInt128();\n        locks[LockType.Staking][address(this)].balance = _rewardsLeft.sub(_reward).toUInt128();\n    }\n\n    function depositUSDT(uint _amount) external note() {\n        usdtToken.transferFrom(_msgSender(), treasury, _amount);\n        uint _usdcAmount = _amount.mul(usdtPriceFeed.updateAndConsult()) / USDT;\n        _deposit(_usdcAmount);\n    }\n\n    function depositETH() payable external noteDeposit() {\n        _depositETH();\n    }\n\n    receive() payable external noteDeposit() {\n        _depositETH();\n    }\n\n    function _depositETH() private {\n        treasury.transfer(msg.value);\n        uint _usdcAmount = msg.value.mul(ethPriceFeed.updateAndConsult()) / 1 ether;\n        _deposit(_usdcAmount);\n    }\n\n    function depositUSDC(uint _amount) external note() {\n        usdcToken.transferFrom(_msgSender(), treasury, _amount);\n        _deposit(_amount);\n    }\n\n    function _deposit(uint _amount) private {\n        uint _depositRound = depositRound();\n        uint _newDeposited = _holderRounds[_depositRound][_msgSender()].deposited.add(_amount);\n        uint _limit = _usersInfo[_msgSender()].firstRoundLimit;\n        if (_depositRound == 1) {\n            require(_limit > 0, 'Not whitelisted');\n            require(_newDeposited <= _limit, 'Deposit limit is reached');\n        }\n        require(_amount >= 1 * USDC, 'Less than minimum amount 1 usdc');\n\n        _holderRounds[_depositRound][_msgSender()].deposited = _newDeposited.toUInt120();\n\n        rounds[_depositRound].totalDeposited = rounds[_depositRound].totalDeposited.add(_amount).toUInt120();\n\n        if (_usersInfo[_msgSender()].firstRoundDeposited == 0) {\n            _usersInfo[_msgSender()].firstRoundDeposited = _depositRound.toUInt8();\n        }\n    }\n\n    // In case someone will send USDC/USDT/SomeToken directly.\n    function withdrawLocked(IERC20 _token, address _receiver, uint _amount) external onlyOwner() note() {\n        require(address(_token) != address(this), 'Cannot withdraw this');\n        _token.transfer(_receiver, _amount);\n    }\n\n    function currentRound() public view returns(uint) {\n        require(_passed(tokensaleStartDate), 'Tokensale not started yet');\n        if (_passed(tokensaleEndDate)) {\n            return 23;\n        }\n\n        return _since(tokensaleStartDate).divCeil(ROUND_DURATION_SEC);\n    }\n\n    // Deposit round ends 1 hour before the end of each round.\n    function depositRound() public view returns(uint) {\n        require(_passed(tokensaleStartDate), 'Tokensale not started yet');\n        require(_notPassed(tokensaleEndDate.sub(1 hours)), 'Deposits ended');\n\n        return _since(tokensaleStartDate).add(1 hours).divCeil(ROUND_DURATION_SEC);\n    }\n\n    function isRoundDepositsEnded(uint _round) public view returns(bool) {\n        return _passed(ROUND_DURATION_SEC.mul(_round).add(tokensaleStartDate).sub(1 hours));\n    }\n\n    function isRoundPrepared(uint _round) public view returns(bool) {\n        return rounds[_round].roundPrice > 0;\n    }\n\n    function currentPrice() public view returns(uint) {\n        return dexePriceFeed.consult();\n    }\n\n    function updateAndGetCurrentPrice() public returns(uint) {\n        return dexePriceFeed.updateAndConsult();\n    }\n\n    function _passed(uint _time) private view returns(bool) {\n        return block.timestamp > _time;\n    }\n\n    function _notPassed(uint _time) private view returns(bool) {\n        return _not(_passed(_time));\n    }\n\n    function _not(bool _condition) private pure returns(bool) {\n        return !_condition;\n    }\n\n    // Get released tokens to the main balance.\n    function releaseLock(LockType _lock) external note() {\n        _release(_lock, _msgSender());\n    }\n\n    // Assign locked tokens to another holder.\n    function transferLock(LockType _lockType, address _to, uint _amount) external note() {\n        receiveAll();\n        Lock memory _lock = locks[_lockType][_msgSender()];\n        require(_lock.released == 0, 'Cannot transfer after release');\n        require(_lock.balance >= _amount, 'Insuffisient locked funds');\n\n        locks[_lockType][_msgSender()].balance = _lock.balance.sub(_amount).toUInt128();\n        locks[_lockType][_to].balance = locks[_lockType][_to].balance.add(_amount).toUInt128();\n    }\n\n    function _release(LockType _lockType, address _holder) private {\n        LockConfig memory _lockConfig = lockConfigs[_lockType];\n        require(_passed(_lockConfig.releaseStart),\n            'Releasing has no started yet');\n\n        Lock memory _lock = locks[_lockType][_holder];\n        uint _balance = _lock.balance;\n        uint _released = _lock.released;\n\n        uint _balanceToRelease =\n            _balance.mul(_since(_lockConfig.releaseStart)) / _lockConfig.vesting;\n\n        // If more than enough time already passed, release what is left.\n        if (_balanceToRelease > _balance) {\n            _balanceToRelease = _balance;\n        }\n\n        require(_balanceToRelease > _released, 'Insufficient unlocked');\n\n        // Underflow cannot happen here, SafeMath usage left for code style.\n        uint _amount = _balanceToRelease.sub(_released);\n\n        locks[_lockType][_holder].released = _balanceToRelease.toUInt128();\n        _transfer(address(this), _holder, _amount);\n    }\n\n\n    // Wrap call to updateAndGetCurrentPrice() function before froceReleaseStaking on UI to get\n    // most up-to-date price.\n    // In case price increased enough since average, allow holders to release Staking rewards with a fee.\n    function forceReleaseStaking(ForceReleaseType _forceReleaseType) external note() {\n        uint _currentRound = currentRound();\n        require(_currentRound > 10, 'Only after 10 round');\n        receiveAll();\n        Lock memory _lock = locks[LockType.Staking][_msgSender()];\n        require(_lock.balance > 0, 'Nothing to force unlock');\n\n        uint _priceMul;\n        uint _unlockedPart;\n        uint _receivedPart;\n\n        if (_forceReleaseType == ForceReleaseType.X7) {\n            _priceMul = 7;\n            _unlockedPart = 10;\n            _receivedPart = 86;\n        } else if (_forceReleaseType == ForceReleaseType.X10) {\n            _priceMul = 10;\n            _unlockedPart = 15;\n            _receivedPart = 80;\n        } else if (_forceReleaseType == ForceReleaseType.X15) {\n            _priceMul = 15;\n            _unlockedPart = 20;\n            _receivedPart = 70;\n        } else {\n            _priceMul = 20;\n            _unlockedPart = 30;\n            _receivedPart = 60;\n        }\n\n        require(_not(forceReleased[_msgSender()][_forceReleaseType]), 'Already force released');\n\n        forceReleased[_msgSender()][_forceReleaseType] = true;\n\n        require(updateAndGetCurrentPrice() >= averagePrice.mul(_priceMul), 'Current price is too small');\n\n        uint _balance = _lock.balance.sub(_lock.released);\n\n        uint _released = _balance.mul(_unlockedPart) / 100;\n        uint _receiveAmount = _released.mul(_receivedPart) / 100;\n        uint _burned = _released.sub(_receiveAmount);\n\n        locks[LockType.Staking][_msgSender()].released = _lock.released.add(_released).toUInt128();\n\n        if (_currentRound <= TOTAL_ROUNDS) {\n            _holderRounds[_currentRound][_msgSender()].endBalance =\n                _holderRounds[_currentRound][_msgSender()].endBalance.add(_receiveAmount).toUInt128();\n        }\n        _burn(address(this), _burned);\n        _transfer(address(this), _msgSender(), _receiveAmount);\n    }\n\n    function launchProduct() external onlyOwner() note() {\n        require(_passed(tokensaleEndDate), 'Tokensale is not ended yet');\n        require(launchedAfter == 0, 'Product already launched');\n        require(isTokensaleProcessed(), 'Tokensale is not processed');\n\n        launchedAfter = _since(tokensaleEndDate);\n    }\n\n    function isTokensaleProcessed() private view returns(bool) {\n        return rounds[TOTAL_ROUNDS].roundPrice > 0;\n    }\n\n    // Zero address and Dexe itself are not considered as valid holders.\n    function _isHolder(address _addr) private view returns(bool) {\n        if (_addr == address(this) || _addr == address(0)) {\n            return false;\n        }\n        return true;\n    }\n\n    // Happen before every transfer to update all the metrics.\n    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal override {\n        if (_isHolder(_from)) {\n            // Automatically receive tokens/rewards for previous rounds.\n            _receiveAll(_from);\n        }\n\n        if (_notPassed(tokensaleEndDate)) {\n            uint _round = 1;\n            if (_passed(tokensaleStartDate)) {\n                _round = currentRound();\n            }\n\n            if (_isHolder(_from)) {\n                _holderRounds[_round][_from].endBalance =\n                    _holderRounds[_round][_from].endBalance.sub(_amount).toUInt128();\n            }\n            if (_isHolder(_to)) {\n                UserInfo memory _userToInfo = _usersInfo[_to];\n                if (_userToInfo.firstRoundDeposited == 0) {\n                    _usersInfo[_to].firstRoundDeposited = _round.toUInt8();\n                }\n                if (_from != address(this)) {\n                    _holderRounds[_round][_to].endBalance =\n                        _holderRounds[_round][_to].endBalance.add(_amount).toUInt128();\n                }\n            }\n        }\n\n        if (launchedAfter == 0) {\n            if (_isHolder(_from)) {\n                _usersInfo[_from].balanceBeforeLaunch = _usersInfo[_from].balanceBeforeLaunch.sub(_amount).toUInt128();\n            }\n            if (_isHolder(_to)) {\n                _usersInfo[_to].balanceBeforeLaunch = _usersInfo[_to].balanceBeforeLaunch.add(_amount).toUInt128();\n                if (_balanceInfo[_to].firstBalanceChange == 0) {\n                    _balanceInfo[_to].firstBalanceChange = block.timestamp.toUInt32();\n                    _balanceInfo[_to].lastBalanceChange = block.timestamp.toUInt32();\n                }\n            }\n        }\n        _updateBalanceAverage(_from);\n        _updateBalanceAverage(_to);\n    }\n\n    function _since(uint _timestamp) private view returns(uint) {\n        return block.timestamp.sub(_timestamp);\n    }\n\n    function launchDate() public override view returns(uint) {\n        uint _launchedAfter = launchedAfter;\n        if (_launchedAfter == 0) {\n            return 0;\n        }\n        return tokensaleEndDate.add(_launchedAfter);\n    }\n\n    function _calculateBalanceAverage(address _holder) private view returns(BalanceInfo memory) {\n        BalanceInfo memory _user = _balanceInfo[_holder];\n        if (!_isHolder(_holder)) {\n            return _user;\n        }\n\n        uint _lastBalanceChange = _user.lastBalanceChange;\n        uint _balance = balanceOf(_holder);\n        uint _launchDate = launchDate();\n        bool _notLaunched = _launchDate == 0;\n        uint _accumulatorTillNow = _user.balanceAccumulator\n            .add(_balance.mul(_since(_lastBalanceChange)));\n\n        if (_notLaunched) {\n            // Last update happened in the current before launch period.\n            _user.balanceAccumulator = _accumulatorTillNow;\n            _user.balanceAverage = (_accumulatorTillNow /\n                _since(_user.firstBalanceChange)).toUInt128();\n            _user.lastBalanceChange = block.timestamp.toUInt32();\n            return _user;\n        }\n\n        // Calculating the end of the last average period.\n        uint _timeEndpoint = _since(_launchDate).div(MONTH).mul(MONTH).add(_launchDate);\n        if (_lastBalanceChange >= _timeEndpoint) {\n            // Last update happened in the current average period.\n            _user.balanceAccumulator = _accumulatorTillNow;\n        } else {\n            // Last update happened before the current average period.\n            uint _sinceLastBalanceChangeToEndpoint = _timeEndpoint.sub(_lastBalanceChange);\n            uint _accumulatorAtTheEndpoint = _user.balanceAccumulator\n                .add(_balance.mul(_sinceLastBalanceChangeToEndpoint));\n\n            if (_timeEndpoint == _launchDate) {\n                // Last update happened before the launch period.\n                _user.balanceAverage = (_accumulatorAtTheEndpoint /\n                    _timeEndpoint.sub(_user.firstBalanceChange)).toUInt128();\n            } else if (_sinceLastBalanceChangeToEndpoint <= MONTH) {\n                // Last update happened in the previous average period.\n                _user.balanceAverage = (_accumulatorAtTheEndpoint / MONTH).toUInt128();\n            } else {\n                // Last update happened before the previous average period.\n                _user.balanceAverage = _balance.toUInt128();\n            }\n\n            _user.balanceAccumulator = _balance.mul(_since(_timeEndpoint));\n        }\n\n        _user.lastBalanceChange = block.timestamp.toUInt32();\n        return _user;\n    }\n\n    function _updateBalanceAverage(address _holder) private {\n        if (_balanceInfo[_holder].lastBalanceChange == block.timestamp) {\n            return;\n        }\n        _balanceInfo[_holder] = _calculateBalanceAverage(_holder);\n    }\n\n    function getAverageBalance(address _holder) external override view returns(uint) {\n        return _calculateBalanceAverage(_holder).balanceAverage;\n    }\n\n    function firstBalanceChange(address _holder) external override view returns(uint) {\n        return _balanceInfo[_holder].firstBalanceChange;\n    }\n\n    function holderRounds(uint _round, address _holder) external override view returns(\n        HolderRound memory\n    ) {\n        return _holderRounds[_round][_holder];\n    }\n\n    function usersInfo(address _holder) external override view returns(\n        UserInfo memory\n    ) {\n        return _usersInfo[_holder];\n    }\n}\n\"\r\n    },\r\n\t\"./ERC20.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \\\"./Context.sol\\\";\nimport \\\"./IERC20.sol\\\";\nimport \\\"./SafeMath.sol\\\";\nimport \\\"./Address.sol\\\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\"\r\n    },\r\n    \"./ERC20Burnable.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \\\"./Context.sol\\\";\nimport \\\"./ERC20.sol\\\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n\"\r\n    },\r\n\t\"./IDexe.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\npragma solidity 0.7.0;\npragma experimental ABIEncoderV2;\n\nimport './IERC20.sol';\n\ninterface IDexe is IERC20 {\n    enum HolderRoundStatus {None, Received}\n\n    struct HolderRound {\n        uint120 deposited; // USDC\n        uint128 endBalance; // DEXE\n        HolderRoundStatus status;\n    }\n\n    struct UserInfo {\n        uint128 balanceBeforeLaunch; // Final balance before product launch.\n        uint120 firstRoundLimit; // limit of USDC that could deposited in first round\n        uint8 firstRoundDeposited; // First round when holder made a deposit or received DEXE.\n    }\n\n    struct BalanceInfo {\n        uint32 firstBalanceChange; // Timestamp of first tokens receive.\n        uint32 lastBalanceChange; // Timestamp of last balance change.\n        uint128 balanceAverage; // Average balance for the previous period.\n        uint balanceAccumulator; // Accumulates average for current period.\n    }\n\n    function launchedAfter() external view returns (uint);\n    function launchDate() external view returns(uint);\n    function tokensaleEndDate() external view returns (uint);\n    function holderRounds(uint _round, address _holder) external view returns(HolderRound memory);\n    function usersInfo(address _holder) external view returns(UserInfo memory);\n    function getAverageBalance(address _holder) external view returns(uint);\n    function firstBalanceChange(address _holder) external view returns(uint);\n}\n\"\r\n    },\r\n\t\"./IERC20.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\"\r\n    },\r\n\t\"./Ownable.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \\\"./Context.sol\\\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\"\r\n    },\r\n\t\"./IPriceFeed.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\npragma solidity >= 0.6.5 <= 0.7.0;\n\ninterface IPriceFeed {\n    function update() external returns(uint);\n    function consult() external view returns (uint);\n    function updateAndConsult() external returns (uint);\n}\n\"\r\n    },\r\n\t\"./SafeMath.sol\": {\r\n\t  \"content\": \"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \\\"SafeMath: division by zero\\\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n   \"evmVersion\":\"istanbul\",\r\n   \"libraries\":{\r\n   },\r\n   \"metadata\":{\r\n      \"bytecodeHash\":\"ipfs\"\r\n   },\r\n   \"optimizer\":{\r\n      \"enabled\":true,\r\n      \"runs\":10000\r\n   },\r\n   \"remappings\":[],\r\n   \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n\t\t\t\"metadata\",\r\n\t\t\t\"abi\",\r\n\t\t\t\"evm.deployedBytecode\",\r\n\t\t\t\"evm.bytecode\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Note\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NoteDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIRST_ROUND_SIZE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_SIZE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexePriceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"firstBalanceChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Dexe.ForceReleaseType\",\"name\":\"_forceReleaseType\",\"type\":\"uint8\"}],\"name\":\"forceReleaseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum Dexe.ForceReleaseType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"forceReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint120\",\"name\":\"totalDeposited\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"roundPrice\",\"type\":\"uint128\"}],\"internalType\":\"struct Dexe.Round[22]\",\"name\":\"\",\"type\":\"tuple[22]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getAverageBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getFullHolderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"balanceBeforeLaunch\",\"type\":\"uint128\"},{\"internalType\":\"uint120\",\"name\":\"firstRoundLimit\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"firstRoundDeposited\",\"type\":\"uint8\"}],\"internalType\":\"struct IDexe.UserInfo\",\"name\":\"_info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint120\",\"name\":\"deposited\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"endBalance\",\"type\":\"uint128\"},{\"internalType\":\"enum IDexe.HolderRoundStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IDexe.HolderRound[22]\",\"name\":\"_rounds\",\"type\":\"tuple[22]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"released\",\"type\":\"uint128\"}],\"internalType\":\"struct Dexe.Lock[6]\",\"name\":\"_locks\",\"type\":\"tuple[6]\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool[4]\",\"name\":\"_forceReleases\",\"type\":\"bool[4]\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"holderRounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint120\",\"name\":\"deposited\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"endBalance\",\"type\":\"uint128\"},{\"internalType\":\"enum IDexe.HolderRoundStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IDexe.HolderRound\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"isRoundDepositsEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"isRoundPrepared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Dexe.LockType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lockConfigs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"releaseStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesting\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Dexe.LockType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"released\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"prepareDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_botPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topPriceLimit\",\"type\":\"uint256\"}],\"name\":\"prepareDistributionPrecise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Dexe.LockType\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"releaseLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"totalDeposited\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"roundPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDEXEFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setETHFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUSDCTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUSDTFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUSDTTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensaleEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensaleStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Dexe.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAndGetCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"balanceBeforeLaunch\",\"type\":\"uint128\"},{\"internalType\":\"uint120\",\"name\":\"firstRoundLimit\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"firstRoundDeposited\",\"type\":\"uint8\"}],\"internalType\":\"struct IDexe.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Dexe","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000303a83425d32a7c8be71abf65b7a223885387d77","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}