{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function decimals() external view returns (uint256 digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Swap3D {\r\n    \r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from, \r\n        address indexed to, \r\n        uint256 tokens\r\n    );\r\n\r\n    string public name = \"Swap3D\";\r\n    string public symbol = \"S3D\";\r\n    uint8 public constant decimals = 18;\r\n    uint8 internal constant dividendFee_ = 10; // 10%\r\n    uint8 internal constant sellFee_ = 10; // 10%\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 internal constant magnitude = 2**64;\r\n    address internal constant tokenAddress = address(0xCC4304A31d09258b0029eA7FE63d032f52e44EFe);  // TrustSwap (SWAP) token address\r\n    ERC20 internal constant _contract = ERC20(tokenAddress);\r\n\r\n    // Admin for premine lock \r\n    address internal administrator;\r\n    uint256 public stakingRequirement = 10e18; // 10 SWAP minimum \r\n    uint256 public releaseTime = 1594728000; // Tuesday, July 14, 2020 12:00:00 PM GMT\r\n\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n    \r\n    function checkAndTransfer(uint256 _amount) private {\r\n        require(\r\n            _contract.transferFrom(\r\n                msg.sender, \r\n                address(this), \r\n                _amount\r\n            ) == true, \"transfer must succeed\"\r\n        );\r\n    }\r\n\r\n    function buy(uint256 _amount, address _referredBy) public returns(uint256) {\r\n        checkAndTransfer(_amount);\r\n        \r\n        return purchaseTokens(\r\n            _amount, \r\n            _referredBy, \r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function reinvest() public onlyStronghands() {\r\n        uint256 _dividends = myDividends(false); \r\n\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        uint256 _tokens = purchaseTokens(\r\n            _dividends, \r\n            address(0x0), \r\n            _customerAddress\r\n        );\r\n        \r\n        emit onReinvestment(\r\n            _customerAddress,\r\n            _dividends,\r\n            _tokens\r\n        );\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() public onlyStronghands() {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        _contract.transfer(_customerAddress, _dividends);\r\n\r\n        emit onWithdraw(\r\n            _customerAddress,\r\n            _dividends\r\n        );\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) public onlyBagholders() {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div((_ethereum * sellFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _tokens\r\n        );\r\n\r\n        int256 _updatedPayouts = (int256)(profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(\r\n                profitPerShare_,\r\n                (_dividends * magnitude) / tokenSupply_\r\n            );\r\n        }\r\n\r\n        // fire sell event\r\n        emit onTokenSell(\r\n            _customerAddress,\r\n            _tokens,\r\n            _taxedEthereum\r\n        );\r\n        \r\n        // fire burn event \r\n        emit Transfer(\r\n            _customerAddress,\r\n            address(0x0000000000000000000000000000000000000000),\r\n            _tokens\r\n        );\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        onlyBagholders()\r\n        returns (bool)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        if (myDividends(true) > 0) withdraw(); // withdraw divs if any \r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n        \r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_toAddress],\r\n            _amountOfTokens\r\n        );\r\n\r\n        payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _amountOfTokens);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Method to view the current TrustSwap stored in the contract\r\n     * Example: totalSwapBalance()\r\n     */\r\n    function totalSwapBalance() public view returns (uint256) {\r\n        return _contract.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total S3D supply.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return\r\n            _includeReferralBonus\r\n                ? dividendsOf(_customerAddress) +\r\n                    referralBalance_[_customerAddress]\r\n                : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the S3D token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the SWAP token balance of any single address.\r\n     * You can call the SWAP contract directly, but the front end will thank you if you just do this one here.\r\n     */\r\n    function swapBalanceOf(address _customerAddress) public view returns (uint256) {\r\n        return _contract.balanceOf(address(_customerAddress));\r\n    }\r\n\r\n    /**\r\n     * Retrieve the referral balance of any single address.\r\n     */\r\n    function getReferralBalance(address _customerAddress) public view returns (uint256) {\r\n        return referralBalance_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (uint256)(\r\n                (int256)(\r\n                    profitPerShare_ * tokenBalanceLedger_[_customerAddress]\r\n                ) - payoutsTo_[_customerAddress]\r\n            ) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div((_ethereum * sellFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to fetch all data in one call \r\n     */\r\n    function getData()\r\n        public \r\n        view \r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            // [0] - Total SWAP in contract \r\n            totalSwapBalance(),\r\n            \r\n            // [1] - Total supply of S3D\r\n            totalSupply(),\r\n            \r\n            // [2] - S3D balance of msg.sender \r\n            balanceOf(msg.sender),\r\n            \r\n            // [3] - Referral balance of msg.sender\r\n            getReferralBalance(msg.sender),\r\n            \r\n            // [4] - Dividends of msg.sender \r\n            dividendsOf(msg.sender),\r\n            \r\n            // [5] - Sell price of 1 token \r\n            sellPrice(),\r\n            \r\n            // [6] - Buy price of 1 token \r\n            buyPrice(),\r\n            \r\n            // [7] - Balance of SWAP token in user's wallet (free balance that isn't staked)\r\n            swapBalanceOf(msg.sender)\r\n        );\r\n    }\r\n\r\n    function purchaseTokens(\r\n        uint256 _incomingEthereum,\r\n        address _referredBy,\r\n        address _sender\r\n    ) \r\n        internal \r\n        returns (uint256) \r\n    {\r\n        require((block.timestamp >= releaseTime) || (_sender == administrator));\r\n        address _customerAddress = _sender;\r\n        uint256 _undividedDividends = SafeMath.div(\r\n            _incomingEthereum,\r\n            dividendFee_\r\n        );\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(\r\n            _incomingEthereum,\r\n            _undividedDividends\r\n        );\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(\r\n            _amountOfTokens > 0 &&\r\n                (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_)\r\n        );\r\n\r\n        if (\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n            // does the referrer meet the staking requirement?\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ) {\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(\r\n                referralBalance_[_referredBy],\r\n                _referralBonus\r\n            );\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        // we can't give people infinite tokens \r\n        if (tokenSupply_ > 0) {\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee =\r\n                _fee -\r\n                (_fee -\r\n                    (_amountOfTokens *\r\n                        ((_dividends * magnitude) / (tokenSupply_))));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n\r\n        int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        // fire event\r\n        emit onTokenPurchase(\r\n            _customerAddress,\r\n            _incomingEthereum,\r\n            _amountOfTokens,\r\n            _referredBy\r\n        );\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = ((\r\n            SafeMath.sub(\r\n                (\r\n                    sqrt(\r\n                        (_tokenPriceInitial**2) +\r\n                            (2 *\r\n                                (tokenPriceIncremental_ * 1e18) *\r\n                                (_ethereum * 1e18)) +\r\n                            (((tokenPriceIncremental_)**2) *\r\n                                (tokenSupply_**2)) +\r\n                            (2 *\r\n                                (tokenPriceIncremental_) *\r\n                                _tokenPriceInitial *\r\n                                tokenSupply_)\r\n                    )\r\n                ),\r\n                _tokenPriceInitial\r\n            )\r\n        ) / (tokenPriceIncremental_)) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived = (SafeMath.sub(\r\n            (((tokenPriceInitial_ +\r\n                (tokenPriceIncremental_ * (_tokenSupply / 1e18))) -\r\n                tokenPriceIncremental_) * (tokens_ - 1e18)),\r\n            (tokenPriceIncremental_ * ((tokens_**2 - tokens_) / 1e18)) / 2\r\n        ) / 1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSwapBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"swapBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"getReferralBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Swap3D","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c00276ed6100981837650dad0c5eb26fb954dad672c7661303f5acd2d25a6318"}]}