{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0; \r\n\r\nabstract contract CEtherInterface {\r\n    function mint() external virtual payable;\r\n    function repayBorrow() external virtual payable;\r\n} \r\n\r\nabstract contract CompoundOracleInterface {\r\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\r\n} \r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} \r\n\r\nabstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    // function mint() external virtual payable;\r\n\r\n    function accrueInterest() public virtual returns (uint);\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n} \r\n\r\nabstract contract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n\r\n    function claimComp(address holder) virtual public;\r\n} \r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n} \r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n \r\n} \r\n\r\nabstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} \r\n\r\ncontract DSAuth  {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} \r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n} \r\n\r\n\r\nabstract contract DSProxy is DSAuth, DSNote {\r\n   \r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} /// @title Utlity functions for Compound contracts\r\ncontract CompoundSaverHelper is DSMath {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\r\n    address public constant COMPOUND_ORACLE = 0xDDc46a3B076aec7ab3Fc37420A8eDd2959764Ec4;\r\n\r\n    /// @notice Helper method to payback the Compound debt\r\n    /// @dev If amount is bigger it will repay the whole debt and send the extra to the _user\r\n    /// @param _amount Amount of tokens we want to repay\r\n    /// @param _cBorrowToken Ctoken address we are repaying\r\n    /// @param _borrowToken Token address we are repaying\r\n    /// @param _user Owner of the compound position we are paying back\r\n    function paybackDebt(uint _amount, address _cBorrowToken, address _borrowToken, address payable _user) internal {\r\n        uint wholeDebt = CTokenInterface(_cBorrowToken).borrowBalanceCurrent(address(this));\r\n\r\n        if (_amount > wholeDebt) {\r\n            if (_borrowToken == ETH_ADDRESS) {\r\n                _user.transfer((_amount - wholeDebt));\r\n            } else {\r\n                ERC20(_borrowToken).safeTransfer(_user, (_amount - wholeDebt));\r\n            }\r\n\r\n            _amount = wholeDebt;\r\n        }\r\n\r\n        approveCToken(_borrowToken, _cBorrowToken);\r\n\r\n        if (_borrowToken == ETH_ADDRESS) {\r\n            CEtherInterface(_cBorrowToken).repayBorrow{value: _amount}();\r\n        } else {\r\n            require(CTokenInterface(_cBorrowToken).repayBorrow(_amount) == 0);\r\n        }\r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _cTokenAddr Address which will gain the approval\r\n    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    /// @param _cTokenAddress cToken address\r\n    /// @return Token address of the cToken specified\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n\r\n} \r\n\r\ncontract CompShifter is CompoundSaverHelper {\r\n\r\n    address public constant COMPTROLLER_ADDR = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    function getWholeDebt(uint _cdpId, address _joinAddr) public virtual returns(uint loanAmount) {\r\n        return CTokenInterface(_joinAddr).borrowBalanceCurrent(msg.sender);\r\n    }\r\n\r\n    function close(\r\n        address _cCollAddr,\r\n        address _cBorrowAddr,\r\n        uint _collAmount,\r\n        uint _debtAmount\r\n    ) public {\r\n        address collAddr = getUnderlyingAddr(_cCollAddr);\r\n\r\n        // payback debt\r\n        paybackDebt(_debtAmount, _cBorrowAddr, getUnderlyingAddr(_cBorrowAddr), tx.origin);\r\n\r\n        // draw coll\r\n        if (CTokenInterface(_cBorrowAddr).borrowBalanceCurrent(address(this)) == 0) {\r\n            uint cTokenBalance = CTokenInterface(_cCollAddr).balanceOf(address(this));\r\n            require(CTokenInterface(_cCollAddr).redeem(cTokenBalance) == 0);\r\n        } else {\r\n            require(CTokenInterface(_cCollAddr).redeemUnderlying(_collAmount) == 0);\r\n        }\r\n\r\n        // Send back money to repay FL\r\n        if (collAddr == ETH_ADDRESS) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(collAddr).transfer(msg.sender, ERC20(collAddr).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function changeDebt(\r\n        address _cBorrowAddrOld,\r\n        address _cBorrowAddrNew,\r\n        uint _debtAmountOld,\r\n        uint _debtAmountNew\r\n    ) public {\r\n\r\n        address borrowAddrNew = getUnderlyingAddr(_cBorrowAddrNew);\r\n\r\n        // payback debt in one token\r\n        paybackDebt(_debtAmountOld, _cBorrowAddrOld, getUnderlyingAddr(_cBorrowAddrOld), tx.origin);\r\n\r\n        // draw debt in another one\r\n        borrowCompound(_cBorrowAddrNew, _debtAmountNew);\r\n\r\n        // Send back money to repay FL\r\n        if (borrowAddrNew == ETH_ADDRESS) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(borrowAddrNew).transfer(msg.sender, ERC20(borrowAddrNew).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function open(\r\n        address _cCollAddr,\r\n        address _cBorrowAddr,\r\n        uint _debtAmount\r\n    ) public {\r\n\r\n        address collAddr = getUnderlyingAddr(_cCollAddr);\r\n        address borrowAddr = getUnderlyingAddr(_cBorrowAddr);\r\n\r\n        uint collAmount = 0;\r\n\r\n        if (collAddr == ETH_ADDRESS) {\r\n            collAmount = address(this).balance;\r\n        } else {\r\n            collAmount = ERC20(collAddr).balanceOf(address(this));\r\n        }\r\n\r\n        depositCompound(collAddr, _cCollAddr, collAmount);\r\n\r\n        // draw debt\r\n        borrowCompound(_cBorrowAddr, _debtAmount);\r\n\r\n        // Send back money to repay FL\r\n        if (borrowAddr == ETH_ADDRESS) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(borrowAddr).transfer(msg.sender, ERC20(borrowAddr).balanceOf(address(this)));\r\n        }\r\n\r\n    }\r\n\r\n    function depositCompound(address _tokenAddr, address _cTokenAddr, uint _amount) internal {\r\n        approveCToken(_tokenAddr, _cTokenAddr);\r\n\r\n        enterMarket(_cTokenAddr);\r\n\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            require(CTokenInterface(_cTokenAddr).mint(_amount) == 0, \"mint error\");\r\n        } else {\r\n            CEtherInterface(_cTokenAddr).mint{value: _amount}();\r\n        }\r\n    }\r\n\r\n    function borrowCompound(address _cTokenAddr, uint _amount) internal {\r\n        enterMarket(_cTokenAddr);\r\n\r\n        require(CTokenInterface(_cTokenAddr).borrow(_amount) == 0);\r\n    }\r\n\r\n    function enterMarket(address _cTokenAddr) public {\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = _cTokenAddr;\r\n\r\n        ComptrollerInterface(COMPTROLLER_ADDR).enterMarkets(markets);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowAddrOld\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cBorrowAddrNew\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmountOld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmountNew\",\"type\":\"uint256\"}],\"name\":\"changeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCollAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cBorrowAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"}],\"name\":\"enterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"getWholeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCollAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cBorrowAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompShifter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed52deb5f0e85a8afbdcb99a8202c325311df4d7e42d9312e46b1c08c3d6cae2"}]}