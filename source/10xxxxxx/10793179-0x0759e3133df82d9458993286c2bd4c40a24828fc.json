{"status":"1","message":"OK","result":[{"SourceCode":"/**\nSPDX-License-Identifier: UNLICENSED\nSee https://github.com/OpenZeppelin/openzeppelin-contracts/blob/2a0f2a8ba807b41360e7e092c3d5bb1bfbeb8b50/LICENSE and https://github.com/NovakDistributed/macroverse/blob/eea161aff5dba9d21204681a3b0f5dbe1347e54b/LICENSE\n*/\n\npragma solidity ^0.6.10;\n\n\n/**\n * RealMath: fixed-point math library, based on fractional and integer parts.\n * Using int128 as real88x40, which isn't in Solidity yet.\n * 40 fractional bits gets us down to 1E-12 precision, while still letting us\n * go up to galaxy scale counting in meters.\n * Internally uses the wider int256 for some math.\n *\n * Note that for addition, subtraction, and mod (%), you should just use the\n * built-in Solidity operators. Functions for these operations are not provided.\n *\n * Note that the fancy functions like sqrt, atan2, etc. aren't as accurate as\n * they should be. They are (hopefully) Good Enough for doing orbital mechanics\n * on block timescales in a game context, but they may not be good enough for\n * other applications.\n */\nlibrary RealMath {\n    \n    /**@dev\n     * How many total bits are there?\n     */\n    int256 constant REAL_BITS = 128;\n    \n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n    \n    /**@dev\n     * How many integer bits are there?\n     */\n    int256 constant REAL_IBITS = REAL_BITS - REAL_FBITS;\n    \n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n    \n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> int128(1);\n    \n    /**@dev\n     * What's two? Two is pretty useful.\n     */\n    int128 constant REAL_TWO = REAL_ONE << int128(1);\n    \n    /**@dev\n     * And our logarithms are based on ln(2).\n     */\n    int128 constant REAL_LN_TWO = 762123384786;\n    \n    /**@dev\n     * It is also useful to have Pi around.\n     */\n    int128 constant REAL_PI = 3454217652358;\n    \n    /**@dev\n     * And half Pi, to save on divides.\n     * TODO: That might not be how the compiler handles constants.\n     */\n    int128 constant REAL_HALF_PI = 1727108826179;\n    \n    /**@dev\n     * And two pi, which happens to be odd in its most accurate representation.\n     */\n    int128 constant REAL_TWO_PI = 6908435304715;\n    \n    /**@dev\n     * What's the sign bit?\n     */\n    int128 constant SIGN_MASK = int128(1) << int128(127);\n    \n\n    /**\n     * Convert an integer to a real. Preserves sign.\n     */\n    function toReal(int88 ipart) public pure returns (int128) {\n        return int128(ipart) * REAL_ONE;\n    }\n    \n    /**\n     * Convert a real to an integer. Preserves sign.\n     */\n    function fromReal(int128 real_value) public pure returns (int88) {\n        return int88(real_value / REAL_ONE);\n    }\n    \n    /**\n     * Round a real to the nearest integral real value.\n     */\n    function round(int128 real_value) public pure returns (int128) {\n        // First, truncate.\n        int88 ipart = fromReal(real_value);\n        if ((fractionalBits(real_value) & (uint40(1) << uint40(REAL_FBITS - 1))) > 0) {\n            // High fractional bit is set. Round up.\n            if (real_value < int128(0)) {\n                // Rounding up for a negative number is rounding down.\n                ipart -= 1;\n            } else {\n                ipart += 1;\n            }\n        }\n        return toReal(ipart);\n    }\n    \n    /**\n     * Get the absolute value of a real. Just the same as abs on a normal int128.\n     */\n    function abs(int128 real_value) public pure returns (int128) {\n        if (real_value > 0) {\n            return real_value;\n        } else {\n            return -real_value;\n        }\n    }\n    \n    /**\n     * Returns the fractional bits of a real. Ignores the sign of the real.\n     */\n    function fractionalBits(int128 real_value) public pure returns (uint40) {\n        return uint40(abs(real_value) % REAL_ONE);\n    }\n    \n    /**\n     * Get the fractional part of a real, as a real. Ignores sign (so fpart(-0.5) is 0.5).\n     */\n    function fpart(int128 real_value) public pure returns (int128) {\n        // This gets the fractional part but strips the sign\n        return abs(real_value) % REAL_ONE;\n    }\n\n    /**\n     * Get the fractional part of a real, as a real. Respects sign (so fpartSigned(-0.5) is -0.5).\n     */\n    function fpartSigned(int128 real_value) public pure returns (int128) {\n        // This gets the fractional part but strips the sign\n        int128 fractional = fpart(real_value);\n        if (real_value < 0) {\n            // Add the negative sign back in.\n            return -fractional;\n        } else {\n            return fractional;\n        }\n    }\n    \n    /**\n     * Get the integer part of a fixed point value.\n     */\n    function ipart(int128 real_value) public pure returns (int128) {\n        // Subtract out the fractional part to get the real part.\n        return real_value - fpartSigned(real_value);\n    }\n    \n    /**\n     * Multiply one real by another. Truncates overflows.\n     */\n    function mul(int128 real_a, int128 real_b) public pure returns (int128) {\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\n        return int128((int256(real_a) * int256(real_b)) >> REAL_FBITS);\n    }\n    \n    /**\n     * Divide one real by another real. Truncates overflows.\n     */\n    function div(int128 real_numerator, int128 real_denominator) public pure returns (int128) {\n        // We use the reverse of the multiplication trick: convert numerator from\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n        return int128((int256(real_numerator) * REAL_ONE) / int256(real_denominator));\n    }\n    \n    /**\n     * Create a real from a rational fraction.\n     */\n    function fraction(int88 numerator, int88 denominator) public pure returns (int128) {\n        return div(toReal(numerator), toReal(denominator));\n    }\n    \n    // Now we have some fancy math things (like pow and trig stuff). This isn't\n    // in the RealMath that was deployed with the original Macroverse\n    // deployment, so it needs to be linked into your contract statically.\n    \n    /**\n     * Raise a number to a positive integer power in O(log power) time.\n     * See <https://stackoverflow.com/a/101613>\n     */\n    function ipow(int128 real_base, int88 exponent) public pure returns (int128) {\n        if (exponent < 0) {\n            // Negative powers are not allowed here.\n            revert();\n        }\n        \n        // Start with the 0th power\n        int128 real_result = REAL_ONE;\n        while (exponent != 0) {\n            // While there are still bits set\n            if ((exponent & 0x1) == 0x1) {\n                // If the low bit is set, multiply in the (many-times-squared) base\n                real_result = mul(real_result, real_base);\n            }\n            // Shift off the low bit\n            exponent = exponent >> 1;\n            // Do the squaring\n            real_base = mul(real_base, real_base);\n        }\n        \n        // Return the final result.\n        return real_result;\n    }\n    \n    /**\n     * Zero all but the highest set bit of a number.\n     * See <https://stackoverflow.com/a/53184>\n     */\n    function hibit(uint256 val) internal pure returns (uint256) {\n        // Set all the bits below the highest set bit\n        val |= (val >>  1);\n        val |= (val >>  2);\n        val |= (val >>  4);\n        val |= (val >>  8);\n        val |= (val >> 16);\n        val |= (val >> 32);\n        val |= (val >> 64);\n        val |= (val >> 128);\n        return val ^ (val >> 1);\n    }\n    \n    /**\n     * Given a number with one bit set, finds the index of that bit.\n     */\n    function findbit(uint256 val) internal pure returns (uint8 index) {\n        index = 0;\n        // We and the value with alternating bit patters of various pitches to find it.\n        \n        if (val & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA != 0) {\n            // Picth 1\n            index |= 1;\n        }\n        if (val & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC != 0) {\n            // Pitch 2\n            index |= 2;\n        }\n        if (val & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 != 0) {\n            // Pitch 4\n            index |= 4;\n        }\n        if (val & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 != 0) {\n            // Pitch 8\n            index |= 8;\n        }\n        if (val & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 != 0) {\n            // Pitch 16\n            index |= 16;\n        }\n        if (val & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 != 0) {\n            // Pitch 32\n            index |= 32;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000 != 0) {\n            // Pitch 64\n            index |= 64;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 != 0) {\n            // Pitch 128\n            index |= 128;\n        }\n    }\n    \n    /**\n     * Shift real_arg left or right until it is between 1 and 2. Return the\n     * rescaled value, and the number of bits of right shift applied. Shift may be negative.\n     *\n     * Expresses real_arg as real_scaled * 2^shift, setting shift to put real_arg between [1 and 2).\n     *\n     * Rejects 0 or negative arguments.\n     */\n    function rescale(int128 real_arg) internal pure returns (int128 real_scaled, int88 shift) {\n        if (real_arg <= 0) {\n            // Not in domain!\n            revert();\n        }\n        \n        // Find the high bit\n        int88 high_bit = findbit(hibit(uint256(real_arg)));\n        \n        // We'll shift so the high bit is the lowest non-fractional bit.\n        shift = high_bit - int88(REAL_FBITS);\n        \n        if (shift < 0) {\n            // Shift left\n            real_scaled = real_arg << int128(-shift);\n        } else if (shift >= 0) {\n            // Shift right\n            real_scaled = real_arg >> int128(shift);\n        }\n    }\n    \n    /**\n     * Calculate the natural log of a number. Rescales the input value and uses\n     * the algorithm outlined at <https://math.stackexchange.com/a/977836> and\n     * the ipow implementation.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function lnLimited(int128 real_arg, int max_iterations) public pure returns (int128) {\n        if (real_arg <= 0) {\n            // Outside of acceptable domain\n            revert();\n        }\n        \n        if (real_arg == REAL_ONE) {\n            // Handle this case specially because people will want exactly 0 and\n            // not ~2^-39 ish.\n            return 0;\n        }\n        \n        // We know it's positive, so rescale it to be between [1 and 2)\n        int128 real_rescaled;\n        int88 shift;\n        (real_rescaled, shift) = rescale(real_arg);\n        \n        // Compute the argument to iterate on\n        int128 real_series_arg = div(real_rescaled - REAL_ONE, real_rescaled + REAL_ONE);\n        \n        // We will accumulate the result here\n        int128 real_series_result = 0;\n        \n        for (int88 n = 0; n < max_iterations; n++) {\n            // Compute term n of the series\n            int128 real_term = div(ipow(real_series_arg, 2 * n + 1), toReal(2 * n + 1));\n            // And add it in\n            real_series_result += real_term;\n            if (real_term == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n        \n        // Double it to account for the factor of 2 outside the sum\n        real_series_result = mul(real_series_result, REAL_TWO);\n        \n        // Now compute and return the overall result\n        return mul(toReal(shift), REAL_LN_TWO) + real_series_result;\n        \n    }\n    \n    /**\n     * Calculate a natural logarithm with a sensible maximum iteration count to\n     * wait until convergence. Note that it is potentially possible to get an\n     * un-converged value; lack of convergence does not throw.\n     */\n    function ln(int128 real_arg) public pure returns (int128) {\n        return lnLimited(real_arg, 100);\n    }\n    \n    /**\n     * Calculate e^x. Uses the series given at\n     * <http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html>.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function expLimited(int128 real_arg, int max_iterations) public pure returns (int128) {\n        // We will accumulate the result here\n        int128 real_result = 0;\n        \n        // We use this to save work computing terms\n        int128 real_term = REAL_ONE;\n        \n        for (int88 n = 0; n < max_iterations; n++) {\n            // Add in the term\n            real_result += real_term;\n            \n            // Compute the next term\n            real_term = mul(real_term, div(real_arg, toReal(n + 1)));\n            \n            if (real_term == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n        \n        // Return the result\n        return real_result;\n        \n    }\n    \n    /**\n     * Calculate e^x with a sensible maximum iteration count to wait until\n     * convergence. Note that it is potentially possible to get an un-converged\n     * value; lack of convergence does not throw.\n     */\n    function exp(int128 real_arg) public pure returns (int128) {\n        return expLimited(real_arg, 100);\n    }\n    \n    /**\n     * Raise any number to any power, except for negative bases to fractional powers.\n     */\n    function pow(int128 real_base, int128 real_exponent) public pure returns (int128) {\n        if (real_exponent == 0) {\n            // Anything to the 0 is 1\n            return REAL_ONE;\n        }\n        \n        if (real_base == 0) {\n            if (real_exponent < 0) {\n                // Outside of domain!\n                revert();\n            }\n            // Otherwise it's 0\n            return 0;\n        }\n        \n        if (fpart(real_exponent) == 0) {\n            // Anything (even a negative base) is super easy to do to an integer power.\n            \n            if (real_exponent > 0) {\n                // Positive integer power is easy\n                return ipow(real_base, fromReal(real_exponent));\n            } else {\n                // Negative integer power is harder\n                return div(REAL_ONE, ipow(real_base, fromReal(-real_exponent)));\n            }\n        }\n        \n        if (real_base < 0) {\n            // It's a negative base to a non-integer power.\n            // In general pow(-x^y) is undefined, unless y is an int or some\n            // weird rational-number-based relationship holds.\n            revert();\n        }\n        \n        // If it's not a special case, actually do it.\n        return exp(mul(real_exponent, ln(real_base)));\n    }\n    \n    /**\n     * Compute the square root of a number.\n     */\n    function sqrt(int128 real_arg) public pure returns (int128) {\n        return pow(real_arg, REAL_HALF);\n    }\n    \n    /**\n     * Compute the sin of a number to a certain number of Taylor series terms.\n     */\n    function sinLimited(int128 real_arg, int88 max_iterations) public pure returns (int128) {\n        // First bring the number into 0 to 2 pi\n        // TODO: This will introduce an error for very large numbers, because the error in our Pi will compound.\n        // But for actual reasonable angle values we should be fine.\n        real_arg = real_arg % REAL_TWO_PI;\n        \n        int128 accumulator = REAL_ONE;\n        \n        // We sum from large to small iteration so that we can have higher powers in later terms\n        for (int88 iteration = max_iterations - 1; iteration >= 0; iteration--) {\n            accumulator = REAL_ONE - mul(div(mul(real_arg, real_arg), toReal((2 * iteration + 2) * (2 * iteration + 3))), accumulator);\n            // We can't stop early; we need to make it to the first term.\n        }\n        \n        return mul(real_arg, accumulator);\n    }\n    \n    /**\n     * Calculate sin(x) with a sensible maximum iteration count to wait until\n     * convergence.\n     */\n    function sin(int128 real_arg) public pure returns (int128) {\n        return sinLimited(real_arg, 15);\n    }\n    \n    /**\n     * Calculate cos(x).\n     */\n    function cos(int128 real_arg) public pure returns (int128) {\n        return sin(real_arg + REAL_HALF_PI);\n    }\n    \n    /**\n     * Calculate tan(x). May overflow for large results. May throw if tan(x)\n     * would be infinite, or return an approximation, or overflow.\n     */\n    function tan(int128 real_arg) public pure returns (int128) {\n        return div(sin(real_arg), cos(real_arg));\n    }\n    \n    /**\n     * Calculate atan(x) for x in [-1, 1].\n     * Uses the Chebyshev polynomial approach presented at\n     * https://www.mathworks.com/help/fixedpoint/examples/calculate-fixed-point-arctangent.html\n     * Uses polynomials received by personal communication.\n     * 0.999974x-0.332568x^3+0.193235x^5-0.115729x^7+0.0519505x^9-0.0114658x^11\n     */\n    function atanSmall(int128 real_arg) public pure returns (int128) {\n        int128 real_arg_squared = mul(real_arg, real_arg);\n        return mul(mul(mul(mul(mul(mul(\n            - 12606780422,  real_arg_squared) // x^11\n            + 57120178819,  real_arg_squared) // x^9\n            - 127245381171, real_arg_squared) // x^7\n            + 212464129393, real_arg_squared) // x^5\n            - 365662383026, real_arg_squared) // x^3\n            + 1099483040474, real_arg);       // x^1\n    }\n    \n    /**\n     * Compute the nice two-component arctangent of y/x.\n     */\n    function atan2(int128 real_y, int128 real_x) public pure returns (int128) {\n        int128 atan_result;\n        \n        // Do the angle correction shown at\n        // https://www.mathworks.com/help/fixedpoint/examples/calculate-fixed-point-arctangent.html\n        \n        // We will re-use these absolute values\n        int128 real_abs_x = abs(real_x);\n        int128 real_abs_y = abs(real_y);\n        \n        if (real_abs_x > real_abs_y) {\n            // We are in the (0, pi/4] region\n            // abs(y)/abs(x) will be in 0 to 1.\n            atan_result = atanSmall(div(real_abs_y, real_abs_x));\n        } else {\n            // We are in the (pi/4, pi/2) region\n            // abs(x) / abs(y) will be in 0 to 1; we swap the arguments\n            atan_result = REAL_HALF_PI - atanSmall(div(real_abs_x, real_abs_y));\n        }\n        \n        // Now we correct the result for other regions\n        if (real_x < 0) {\n            if (real_y < 0) {\n                atan_result -= REAL_PI;\n            } else {\n                atan_result = REAL_PI - atan_result;\n            }\n        } else {\n            if (real_y < 0) {\n                atan_result = -atan_result;\n            }\n        }\n        \n        return atan_result;\n    }\n}\n\n// This code is part of Macroverse and is licensed: MIT\n\n/**\n * Provides methods for doing orbital mechanics calculations, based on\n * RealMath.\n * \n * DON'T use these functions for computing positions for things every frame;\n * the RealMath library isn't really accurate enough for that. Use these in\n * smart contract game logic, on a time scale of one or more blocks.\n */\ncontract OrbitalMechanics {\n    using RealMath for *;\n\n    /**@dev\n     * We need the gravitational constant. Calculated by solving the mean\n     * motion equation for Earth. We can be mostly precise here, because we\n     * know the semimajor axis and year length (in Julian years) to a few\n     * places.\n     *\n     * This is 132712875029098577920 m^3 s^-2 sols^-1\n     */\n    int128 constant REAL_G_PER_SOL = 145919349250077040774785972305920;\n\n    // TODO: We have to copy-paste constants from RealMath because Solidity doesn't expose them by import.\n\n    /**@dev\n     * It is also useful to have Pi around.\n     * We can't pull it in from the library.\n     */\n    int128 constant REAL_PI = 3454217652358;\n\n    /**@dev\n     * And two pi, which happens to be odd in its most accurate representation.\n     */\n    int128 constant REAL_TWO_PI = 6908435304715;\n\n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n\n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n\n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> int128(1);\n\n    /**@dev\n     * We need 2 for constants in numerical methods.\n     */\n    int128 constant REAL_TWO = REAL_ONE * 2;\n    \n    /**@dev\n     * We need 3 for constants in numerical methods.\n     */\n    int128 constant REAL_THREE = REAL_ONE * 3;\n\n    /**@dev\n     * A \"year\" is 365.25 days. We use Julian years.\n     */\n    int128 constant REAL_SECONDS_PER_YEAR = 34697948144703898000;\n\n    \n\n    // Functions for orbital mechanics. Maybe should be a library?\n    // Are NOT controlled access, since they don't talk to the RNG.\n    // Please don't do these in Solidity unless you have to; you can do orbital mechanics in JS just fine with actual floats.\n    // The steps to compute an orbit are:\n    // \n    // 1. Compute the semimajor axis as (apoapsis + periapsis) / 2 (do this yourself)\n    // 2. Compute the mean angular motion, n = sqrt(central mass * gravitational constant / semimajor axis^3)\n    // 3. Compute the Mean Anomaly, as n * time since epoch + MA at epoch, and wrap to an angle 0 to 2 pi\n    // 4. Compute the Eccentric Anomaly numerically to solve MA = EA - eccentricity * sin(EA)\n    // 5. Compute the True Anomaly as 2 * atan2(sqrt(1 - eccentricity) * cos(EA / 2), sqrt(1 + eccentricity) * sin(EA / 2))\n    // 6. Compute the current radius as r = semimajor * (1 - eccentricity^2) / (1 + eccentricity * cos(TA))\n    // 7. Compute Cartesian X (toward longitude 0) = radius * (cos(LAN) * cos(AOP + TA) - sin(LAN) * sin(AOP + TA) * cos(inclination))\n    // 8. Compute Cartesian Y (in plane) = radius * (sin(LAN) * cos(AOP + TA) + cos(LAN) * sin(AOP + TA) * cos(inclination))\n    // 9. Compute Cartesian Z (above plane) = radius * sin(inclination) * sin(AOP + TA)\n\n\n    /**\n     * Compute the mean angular motion, in radians per Julian year (365.25\n     * days), given a star mass in sols and a semimajor axis in meters.\n     */\n    function computeMeanAngularMotion(int128 real_central_mass_in_sols, int128 real_semimajor_axis) public pure returns (int128) {\n        // REAL_G_PER_SOL is big, but nothing masses more than 100s of sols, so we can do the multiply.\n        // But the semimajor axis in meters may be very big so we can't really do the cube for the denominator.\n        // And since values in radians per second are tiny, their squares are even tinier and probably out of range.\n        // So we scale up to radians per year\n        return real_central_mass_in_sols.mul(REAL_G_PER_SOL)\n            .div(real_semimajor_axis)\n            .mul(REAL_SECONDS_PER_YEAR)\n            .div(real_semimajor_axis)\n            .mul(REAL_SECONDS_PER_YEAR).div(real_semimajor_axis).sqrt();\n    }\n\n    /**\n     * Compute the mean anomaly, from 0 to 2 PI, given the mean anomaly at\n     * epoch, mean angular motion (in radians per Julian year) and the time (in\n     * Julian years) since epoch.\n     */\n    function computeMeanAnomaly(int128 real_mean_anomaly_at_epoch, int128 real_mean_angular_motion, int128 real_years_since_epoch) public pure returns (int128) {\n        return (real_mean_anomaly_at_epoch + real_mean_angular_motion.mul(real_years_since_epoch)) % REAL_TWO_PI;\n    }\n\n    /**\n     * Compute the eccentric anomaly, given the mean anomaly and eccentricity.\n     * Uses numerical methods to solve MA = EA - eccentricity * sin(EA). Limit to a certain iteration count.\n     */\n    function computeEccentricAnomalyLimited(int128 real_mean_anomaly, int128 real_eccentricity, int88 max_iterations) public pure returns (int128) {\n        // We are going to find the root of EA - eccentricity * sin(EA) - MA, in EA.\n        // We use Newton's Method.\n        // f(EA) =  EA - eccentricity * sin(EA) - MA\n        // f'(EA) = 1 - eccentricity * cos(EA)\n        // x_n = x_n-1 - f(x_n) / f'(x_n)\n\n        // Start with the 3rd-order approximation from http://alpheratz.net/dynamics/twobody/KeplerIterations_summary.pdf\n        // \"A Practical Method for Solving the Kepler Equation\"\n        int128 e2 = real_eccentricity.mul(real_eccentricity);\n        int128 e3 = e2.mul(real_eccentricity);\n        int128 cosMA = real_mean_anomaly.cos();\n        int128 real_guess = real_mean_anomaly + ((-REAL_HALF).mul(e3) + real_eccentricity + \n            (e2 + cosMA.mul(e3).mul(REAL_THREE).div(REAL_TWO)).mul(cosMA)).mul(real_mean_anomaly.sin());\n            \n        for (int88 i = 0; i < max_iterations; i++) {\n            int128 real_value = real_guess - real_eccentricity.mul(real_guess.sin()) - real_mean_anomaly;\n            \n            if (real_value.abs() <= 5) {\n                // We found the root within epsilon.\n                // Note that we are implicitly turning this random small number into a tiny real.\n                break;\n            }\n            \n            // Otherwise we update\n            int128 real_derivative = REAL_ONE - real_eccentricity.mul(real_guess.cos());\n            // The derivative can never be 0. If it were, since cos() is <= 1, the eccentricity would be 1.\n            // Eccentricity must be <= 1\n            assert(real_derivative != 0);\n            real_guess = real_guess - real_value.div(real_derivative);\n        }\n\n        // Bound to 0 to 2 pi angle range.\n        return real_guess % REAL_TWO_PI;\n    }\n\n    /**\n     * Compute the eccentric anomaly, given the mean anomaly and eccentricity.\n     * Uses numerical methods to solve MA = EA - eccentricity * sin(EA). Internally limited to a reasonable iteration count.\n     */\n    function computeEccentricAnomaly(int128 real_mean_anomaly, int128 real_eccentricity) public pure returns (int128) {\n        return computeEccentricAnomalyLimited(real_mean_anomaly, real_eccentricity, 10);\n    }\n\n    /**\n     * Compute the true anomaly from the eccentric anomaly and the eccentricity.\n     */\n    function computeTrueAnomaly(int128 real_eccentric_anomaly, int128 real_eccentricity) public pure returns (int128) {\n        int128 real_half_ea = real_eccentric_anomaly.div(REAL_TWO);\n        return RealMath.atan2((REAL_ONE - real_eccentricity).sqrt().mul(real_half_ea.cos()), (REAL_ONE + real_eccentricity).sqrt().mul(real_half_ea.sin())).mul(REAL_TWO);\n    }\n\n    /**\n     * Compute the current orbit radius (distance from parent body) from the true anomaly, semimajor axis, and eccentricity.\n     * Operates on distances in meters.\n     */\n    function computeRadius(int128 real_true_anomaly, int128 real_semimajor_axis, int128 real_eccentricity) public pure returns (int128) {\n         return real_semimajor_axis.mul(REAL_ONE - real_eccentricity.mul(real_eccentricity)).div(REAL_ONE + real_eccentricity.mul(real_true_anomaly.cos()));\n    }\n\n    /**\n     * Compute Cartesian X, Y, and Z offset from center of parent body to orbiting body.\n     * Operates on distances in meters.\n     * X is toward longitude 0 of the parent body.\n     * Y is the other in-plane direction.\n     * Z is up out of the plane.\n     */\n    function computeCartesianOffset(int128 real_radius, int128 real_true_anomaly, int128 real_lan, int128 real_inclination,\n        int128 real_aop) public pure returns (int128 real_x, int128 real_y, int128 real_z) {\n        \n        // Compute some intermediates\n        int128 cos_lan = real_lan.cos();\n        int128 sin_lan = real_lan.sin();\n        int128 aop_ta_cos = (real_aop + real_true_anomaly).cos();\n        int128 aop_ta_sin = (real_aop + real_true_anomaly).sin();\n        int128 inclination_cos = real_inclination.cos();\n        int128 inclination_sin = real_inclination.sin();\n\n        // Compute the actual coordinates\n        real_x = real_radius.mul(cos_lan.mul(aop_ta_cos) - sin_lan.mul(aop_ta_sin).mul(inclination_cos));\n        real_y = real_radius.mul(sin_lan.mul(aop_ta_cos) + cos_lan.mul(aop_ta_sin).mul(inclination_cos));\n        real_z = real_radius.mul(inclination_sin).mul(aop_ta_sin);\n\n    }\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED","ABI":"[{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_radius\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_true_anomaly\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_lan\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_inclination\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_aop\",\"type\":\"int128\"}],\"name\":\"computeCartesianOffset\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"real_x\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_y\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_z\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_mean_anomaly\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_eccentricity\",\"type\":\"int128\"}],\"name\":\"computeEccentricAnomaly\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_mean_anomaly\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_eccentricity\",\"type\":\"int128\"},{\"internalType\":\"int88\",\"name\":\"max_iterations\",\"type\":\"int88\"}],\"name\":\"computeEccentricAnomalyLimited\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_central_mass_in_sols\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_semimajor_axis\",\"type\":\"int128\"}],\"name\":\"computeMeanAngularMotion\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_mean_anomaly_at_epoch\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_mean_angular_motion\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_years_since_epoch\",\"type\":\"int128\"}],\"name\":\"computeMeanAnomaly\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_true_anomaly\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_semimajor_axis\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_eccentricity\",\"type\":\"int128\"}],\"name\":\"computeRadius\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"real_eccentric_anomaly\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"real_eccentricity\",\"type\":\"int128\"}],\"name\":\"computeTrueAnomaly\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"OrbitalMechanics","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"RealMath:547abddbc2ca50edd8832b8bb1fe1b6ee2d6cad7","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}