{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-22\r\n*/\r\n\r\npragma solidity ^0.5.14;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() public {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract WIPcoin is ERC20, ReentrancyGuard, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _admin;\r\n\r\n    event MintWIP(address mintingAddress, uint256 amount);\r\n    event BurnWIP(uint256 amount);\r\n\r\n    mapping (address => uint256) private amountClaimableByAddress;\r\n\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"WIPcoin\";\r\n    string constant public symbol = \"WIPC\";\r\n    uint256 constant public WIPHardCap = 1000000;\r\n    uint256 public timerInitiated;\r\n    uint256 public halvingIndex;\r\n    uint256 public halvingTimeStamp;\r\n    uint256 constant public halvingPeriodSeconds = 19353600;\r\n    bool public numberOfAttendeesSet;\r\n    bool public weeklyCountFinalized;\r\n    bool public backDropComplete;\r\n    \r\n    address public expensesWeeklyAddress;\r\n    address public promoWeeklyAddress;\r\n\r\n    uint256 claimTimeDelay;\r\n    uint256 thisWeeksAttendees;\r\n    uint256 totalMeetups;\r\n    uint256 totalAttendees;\r\n    \r\n    uint256 expensesSplit;\r\n    uint256 promotionalSplit;\r\n    uint256 communitySplit;\r\n    \r\n    constructor() public {\r\n        _mint(0x63a9dbCe75413036B2B778E670aaBd4493aAF9F3, WIPHardCap*6*10**16);\r\n        _mint(0x442DCCEe68425828C106A3662014B4F131e3BD9b, WIPHardCap*6*10**16);\r\n        _mint(0x81E5cd19323ce7f6b36c9511fbC98d477a188b13, WIPHardCap*6*10**16);\r\n        _mint(0xc2F82A1F287B5b5AEBff7C19e83e0a16Cf3bD041, WIPHardCap*6*10**16);\r\n        _mint(0xfd3be6f4D3E099eDa7158dB21d459794B25309F8, WIPHardCap*6*10**16);\r\n        timerInitiated = block.timestamp;\r\n        halvingTimeStamp = timerInitiated + halvingPeriodSeconds;\r\n        halvingIndex = 0;\r\n        totalMeetups = 22;\r\n        totalAttendees = 1247;\r\n        backDropComplete = false;\r\n        expensesWeeklyAddress = 0x63a9dbCe75413036B2B778E670aaBd4493aAF9F3;\r\n        promoWeeklyAddress = 0x1082ACF0F6C0728F80FAe05741e6EcDEF976C181;\r\n        communitySplit = 60;\r\n        expensesSplit = 25;\r\n        promotionalSplit = 15;\r\n        _admin.add(0x63a9dbCe75413036B2B778E670aaBd4493aAF9F3);\r\n        _admin.add(0x442DCCEe68425828C106A3662014B4F131e3BD9b);\r\n        _admin.add(0x81E5cd19323ce7f6b36c9511fbC98d477a188b13);\r\n        _admin.add(0xc2F82A1F287B5b5AEBff7C19e83e0a16Cf3bD041);\r\n    }\r\n\r\n    function getWeeklyDistribution() public view returns (uint256 communityDistributionAmount, uint256 expensesDistributionAmount, uint256 promotionalDistributionAmount) {\r\n        uint256 halvingDecay = 2**halvingIndex;\r\n        uint256 totalDistributionAmount = WIPHardCap*1/halvingDecay*10**16;\r\n        \r\n        communityDistributionAmount = totalDistributionAmount*communitySplit/100;\r\n        expensesDistributionAmount = totalDistributionAmount*expensesSplit/100;\r\n        promotionalDistributionAmount = totalDistributionAmount*promotionalSplit/100;\r\n    }\r\n\r\n    function getCirculatingWIP() private view returns (uint256 circulatingWIP) {\r\n        circulatingWIP = totalSupply().div(10**18); \r\n    }\r\n\r\n    function updateHalvingIndex() private {\r\n        if (getTimeToNextHalving() <= 0) {\r\n            halvingIndex = halvingIndex + 1;\r\n        }\r\n        halvingTimeStamp = timerInitiated + ((halvingIndex + 1) * halvingPeriodSeconds);\r\n    }\r\n\r\n    function getTimeToNextHalving() private view returns (int256 timeToNextHalving){\r\n        timeToNextHalving = int256(halvingTimeStamp - block.timestamp);\r\n    }\r\n\r\n    function updateNumberOfAttendees(uint256 numberOfAttendees) public {\r\n        require(_admin.has(msg.sender), \"Only official admin can update number of attendees.\");\r\n        require (getTimeToDelayEnd() <= 0);\r\n        \r\n        numberOfAttendeesSet = true;\r\n        weeklyCountFinalized = false;\r\n        thisWeeksAttendees = numberOfAttendees; \r\n        \r\n        updateHalvingIndex();\r\n    }\r\n\r\n    function pushAddresses(address[] memory attendee) public nonReentrant {\r\n        require(_admin.has(msg.sender), \"Only official admin can push attendee addresses.\");\r\n        require(getTimeToNextHalving() >= 0);\r\n        require(getTimeToNextHalving() <= int256(halvingPeriodSeconds));\r\n        \r\n        require(numberOfAttendeesSet == true);\r\n        require(thisWeeksAttendees == attendee.length);\r\n        \r\n        uint256 crowdDistribution;\r\n        (crowdDistribution,,) = getWeeklyDistribution();\r\n        \r\n        uint256 weeklyWIPDistribution = crowdDistribution/thisWeeksAttendees;\r\n        for(uint256 i = 0; i < attendee.length; i++){\r\n            amountClaimableByAddress[attendee[i]] = amountClaimableByAddress[attendee[i]] + weeklyWIPDistribution;\r\n        }\r\n        \r\n        finalizeWeeklyAddresses();\r\n    }\r\n    \r\n    function initialBackDrop(address[] memory attendee, uint256[] memory backDropAmount) public onlyOwner nonReentrant {\r\n        require(backDropComplete == false);\r\n        require(attendee.length == backDropAmount.length);\r\n        \r\n        for(uint256 i = 0; i < attendee.length; i++){\r\n            amountClaimableByAddress[attendee[i]] = amountClaimableByAddress[attendee[i]] + backDropAmount[i];\r\n        }\r\n        \r\n        backDropComplete = true;\r\n    }\r\n\r\n    function finalizeWeeklyAddresses() private {\r\n        numberOfAttendeesSet = false;\r\n        weeklyCountFinalized = true;\r\n        totalMeetups = totalMeetups + 1;\r\n        totalAttendees = totalAttendees + thisWeeksAttendees;\r\n        claimTimeDelay = block.timestamp + 518400; //6 days to allow for some input lag\r\n        claimTeamWeekly();\r\n    }\r\n    \r\n    function getTimeToDelayEnd() private view returns (int256 timeToDelayEnd){\r\n        timeToDelayEnd = int256(claimTimeDelay - block.timestamp);\r\n    }\r\n\r\n    function claimWIPCoin() public nonReentrant {\r\n        require(weeklyCountFinalized == true);\r\n        uint256 amountToClaim = amountClaimableByAddress[msg.sender];\r\n        amountClaimableByAddress[msg.sender] = 0;\r\n        \r\n        require(getCirculatingWIP() + amountToClaim <= WIPHardCap.mul(10**18));\r\n        \r\n        _mint(msg.sender, amountToClaim);\r\n        emit MintWIP(msg.sender, amountToClaim.div(10**18));\r\n    }\r\n    \r\n    function claimTeamWeekly() private {\r\n        require(weeklyCountFinalized == true);\r\n        \r\n        uint256 expensesDistribution;\r\n        uint256 promotionalDistribution;\r\n        (,expensesDistribution, promotionalDistribution) = getWeeklyDistribution();\r\n        \r\n        require(getCirculatingWIP() + expensesDistribution <= WIPHardCap.mul(10**18));\r\n        _mint(expensesWeeklyAddress, expensesDistribution);\r\n        emit MintWIP(expensesWeeklyAddress, expensesDistribution.div(10**18));\r\n        \r\n        require(getCirculatingWIP() + promotionalDistribution <= WIPHardCap.mul(10**18));\r\n        _mint(promoWeeklyAddress, promotionalDistribution);\r\n        emit MintWIP(promoWeeklyAddress, promotionalDistribution.div(10**18));        \r\n    }\r\n    \r\n    function updateTeamWeekly(address newTeamWeekly) public onlyOwner {\r\n        expensesWeeklyAddress = newTeamWeekly;\r\n    }\r\n\r\n    function updatePromoWeekly(address newPromoWeekly) public onlyOwner {\r\n        promoWeeklyAddress = newPromoWeekly;\r\n    }\r\n    \r\n    function adjustWeeklySplit(uint256 newExpenses, uint256 newPromo, uint256 newCommunity) public onlyOwner {\r\n        require(newExpenses + newPromo + newCommunity == 100);\r\n        \r\n        expensesSplit = newExpenses;\r\n        promotionalSplit = newPromo;\r\n        communitySplit = newCommunity;\r\n    }\r\n    \r\n    function getStats() public view returns (uint256 meetups, uint256 attendees, uint256 weeklyAttendees , uint256 circulatingSupply, int256 nextHalvingCountdown, int256 nextTimeDelayEnding, uint256 expensesPercent, uint256 promotionalPercent, uint256 communityPercent){\r\n        meetups = totalMeetups;\r\n        attendees =  totalAttendees;\r\n        weeklyAttendees = thisWeeksAttendees;\r\n        circulatingSupply = getCirculatingWIP();\r\n        nextHalvingCountdown = getTimeToNextHalving();\r\n        nextTimeDelayEnding = getTimeToDelayEnd();\r\n        expensesPercent = expensesSplit;\r\n        promotionalPercent = promotionalSplit;\r\n        communityPercent = communitySplit;\r\n    }\r\n    \r\n    function getAmountClaimable(address userAddress) public view returns (uint256 amountClaimable) {\r\n        amountClaimable = amountClaimableByAddress[userAddress];\r\n    }\r\n    \r\n    function addAdminAddress(address newAdminAddress) public onlyOwner {\r\n        _admin.add(newAdminAddress);\r\n    }\r\n    \r\n    function removeAdminAddress(address oldAdminAddress) public onlyOwner {\r\n        _admin.remove(oldAdminAddress);\r\n    }\r\n    \r\n    function burnWIP(uint256 WIPToBurn) public nonReentrant {\r\n        _burn(msg.sender, WIPToBurn);\r\n        emit BurnWIP(WIPToBurn.div(10**18));\r\n        }\r\n    }","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnWIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintWIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"WIPHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"addAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExpenses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPromo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCommunity\",\"type\":\"uint256\"}],\"name\":\"adjustWeeklySplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backDropComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WIPToBurn\",\"type\":\"uint256\"}],\"name\":\"burnWIP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimWIPCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expensesWeeklyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAmountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"meetups\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weeklyAttendees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nextHalvingCountdown\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextTimeDelayEnding\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expensesPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionalPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeeklyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"communityDistributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expensesDistributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionalDistributionAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halvingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halvingPeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halvingTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attendee\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"backDropAmount\",\"type\":\"uint256[]\"}],\"name\":\"initialBackDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAttendeesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoWeeklyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attendee\",\"type\":\"address[]\"}],\"name\":\"pushAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAdminAddress\",\"type\":\"address\"}],\"name\":\"removeAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timerInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfAttendees\",\"type\":\"uint256\"}],\"name\":\"updateNumberOfAttendees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPromoWeekly\",\"type\":\"address\"}],\"name\":\"updatePromoWeekly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamWeekly\",\"type\":\"address\"}],\"name\":\"updateTeamWeekly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weeklyCountFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WIPcoin","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e8a96e2ffe972c18b74a6a54bbf985af5a60f86086432b42c42759bfde9720d0"}]}