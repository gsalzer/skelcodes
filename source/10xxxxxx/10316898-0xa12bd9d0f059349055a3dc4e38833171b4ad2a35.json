{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.10;\r\n\r\n//Powm Coin Master Contract\r\n\r\ncontract PoWM {\r\n    uint256 constant private INITIAL_SUPPLY = 8e26;\r\n\tstring constant public name = \"PoWM\";\r\n\tstring constant public symbol = \"POWM\";\r\n\tuint256 constant private POINT_AT = 2**64;\r\n\tuint256 constant private MIN_STAKING_AMOUNT = 2e19;\r\n\tuint256 constant private MIN_CIRCULATION = 1;\r\n\tuint256 constant private DEFLATION_QUANT = 12;\r\n\tuint8 constant public decimals = 18;\r\n\tevent Whitelist(address indexed user, bool status);\r\n\tevent Stakelist(address indexed user, bool status);\r\n\tevent AddedStaker(address indexed user);\r\n\tevent Stake(address indexed owner, uint256 tokens);\r\n\tevent Burn(uint256 tokens);\r\n\tevent Unstake(address indexed owner, uint256 tokens);\r\n\tevent Withdrawal(address indexed owner, uint256 tokens);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tfunction stakersCount() public view returns(uint total) {\r\n        return stakers.length;\r\n    }\r\n    function stakersAll() public view returns( address  [] memory){\r\n        return stakers;\r\n    }\r\n\tstruct Entity {\r\n\t    uint256 stakerIndex;\r\n\t\tbool whitelisted;\r\n\t\tbool stakelisted;\r\n\t\tuint256 invites;\r\n\t\tuint256 balance;\r\n\t\tuint256 frozen;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\tstruct Entities {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalStaked;\r\n\t\tmapping(address => Entity) users;\r\n\t\tuint256 scaledPayoutPerToken;\r\n\t\taddress admin;\r\n\t}\r\n\tEntities private info;\r\n\taddress[] public stakers;\r\n\tconstructor() public {\r\n\t\tinfo.admin = msg.sender;\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\twhitelist(msg.sender, true);\r\n\t\tinfo.users[msg.sender].balance = INITIAL_SUPPLY;\r\n\t\temit Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\r\n\t}\r\n\r\n\tfunction withdraw_dividends() external returns (uint256) {\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends >= 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * POINT_AT);\r\n\t\tinfo.users[msg.sender].balance += _dividends;\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\temit Withdrawal(msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\r\n\tfunction burn(uint256 _tokens) external {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tuint256 _burnedAmount = _tokens;\r\n\t\tif (info.totalStaked > 0) {\r\n\t\t\t_burnedAmount /= 2;\r\n\t\t\tinfo.scaledPayoutPerToken += _burnedAmount * POINT_AT / info.totalStaked;\r\n\t\t\temit Transfer(msg.sender, address(this), _burnedAmount);\r\n\t\t}\r\n\t\tinfo.totalSupply -= _burnedAmount;\r\n\t\temit Transfer(msg.sender, address(0x0), _burnedAmount);\r\n\t\temit Burn(_burnedAmount);\r\n\t}\r\n\r\n\tfunction send_interest(uint256 _tokens) external {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\trequire(info.totalStaked > 0);\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tinfo.scaledPayoutPerToken += _tokens * POINT_AT / info.totalStaked;\r\n\t\temit Transfer(msg.sender, address(this), _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\r\n\t\trequire(_receivers.length == _amounts.length);\r\n\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\r\n\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\r\n\t\t}\r\n\t}\r\n    function deleteStaker(uint index) public {\r\n        require(msg.sender == info.admin);\r\n        require(index < stakers.length);\r\n        stakers[index] = stakers[stakers.length-1];\r\n        stakers.pop();\r\n    }\r\n    function setStakelistedStatus(address _user, bool _status) public {\r\n        require(msg.sender == info.admin);\r\n\t\tinfo.users[_user].stakelisted = _status;\r\n    }\r\n    function setInvites(address _user, uint amount) public {\r\n        require(msg.sender == info.admin);\r\n        info.users[_user].invites = amount;\r\n    }\r\n\tfunction stakelistAdmin(address _user, bool _status, uint256 invites) public {\r\n\t\trequire(msg.sender == info.admin);\r\n\t\tinfo.users[_user].stakelisted = _status;\r\n\t\tif (_status && !(info.users[_user].stakerIndex > 0)) {\r\n\t\t    info.users[_user].stakerIndex = stakers.length;\r\n\t\t    stakers.push(_user);\r\n\t\t    if (invites > 0) {\r\n\t\t    setInvites(_user, invites);\r\n\t\t    }\r\n\t\t} else {\r\n\t\t    //pad last staker for correct indexing after deleting from array\r\n\t\t    info.users[stakers[stakers.length-1]].stakerIndex = info.users[_user].stakerIndex;\r\n\t\t    deleteStaker(info.users[_user].stakerIndex);\r\n\t\t    info.users[_user].stakerIndex = 0;\r\n\t\t    setInvites(_user, invites);\r\n\t\t}\r\n\t\temit Stakelist(_user, _status);\r\n\t}\r\n\tfunction stakelistUser(address _user) public {\r\n\t\trequire(info.users[msg.sender].invites > 0);\r\n\t\trequire(!(info.users[_user].stakerIndex > 0));\r\n\t\tinfo.users[msg.sender].invites--;\r\n\t\tinfo.users[_user].stakelisted = true;\r\n\t\tinfo.users[_user].stakerIndex = stakers.length;\r\n\t\tstakers.push(_user);\r\n\t\temit AddedStaker(_user);\r\n\t}\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction totalStaked() public view returns (uint256) {\r\n\t\treturn info.totalStaked;\r\n\t}\r\n\r\n\tfunction whitelist(address _user, bool _status) public {\r\n\t\trequire(msg.sender == info.admin);\r\n\t\tinfo.users[_user].whitelisted = _status;\r\n\t\temit Whitelist(_user, _status);\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance - stakedOf(_user);\r\n\t}\r\n\r\n\tfunction stakedOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].frozen;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledPayoutPerToken * info.users[_user].frozen) - info.users[_user].scaledPayout) / POINT_AT;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction isWhitelisted(address _user) public view returns (bool) {\r\n\t\treturn info.users[_user].whitelisted;\r\n\t}\r\n\r\n\tfunction isStakelisted(address _user) public view returns (bool) {\r\n\t\treturn info.users[_user].stakelisted;\r\n\t}\r\n\r\n\tfunction invitesCount(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].invites;\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) public view returns\r\n\t(uint256 totalTokenSupply, uint256 totalTokensFrozen, uint256 userBalance,\r\n\tuint256 userFrozen, uint256 userDividends, bool stakeListed, uint256 invites) {\r\n\t\treturn (totalSupply(), totalStaked(), balanceOf(_user),\r\n\t\tstakedOf(_user), dividendsOf(_user), isStakelisted(_user), invitesCount(_user));\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tuint256 _burnedAmount = _tokens * DEFLATION_QUANT / 100;\r\n\t\tif (totalSupply() - _burnedAmount < INITIAL_SUPPLY * MIN_CIRCULATION / 100 || isWhitelisted(_from)) {\r\n\t\t\t_burnedAmount = 0;\r\n\t\t}\r\n\t\tuint256 _transferred = _tokens - _burnedAmount;\r\n\t\tinfo.users[_to].balance += _transferred;\r\n\t\temit Transfer(_from, _to, _transferred);\r\n\t\tif (_burnedAmount > 0) {\r\n\t\t\tif (info.totalStaked > 0) {\r\n\t\t\t\t_burnedAmount /= 2;\r\n\t\t\t\tinfo.scaledPayoutPerToken += _burnedAmount * POINT_AT / info.totalStaked;\r\n\t\t\t\temit Transfer(_from, address(this), _burnedAmount);\r\n\t\t\t}\r\n\t\t\tinfo.totalSupply -= _burnedAmount;\r\n\t\t\temit Transfer(_from, address(0x0), _burnedAmount);\r\n\t\t\temit Burn(_burnedAmount);\r\n\t\t}\r\n\t\treturn _transferred;\r\n\t}\r\n\r\n\tfunction stakeCoins(uint256 _amount) internal {\r\n\t    require(isStakelisted(msg.sender));\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\trequire(stakedOf(msg.sender) + _amount >= MIN_STAKING_AMOUNT);\r\n\t\tinfo.totalStaked += _amount;\r\n\t\tinfo.users[msg.sender].frozen += _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);\r\n\t\temit Transfer(msg.sender, address(this), _amount);\r\n\t\temit Stake(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction unstakeCoins(uint256 _amount) internal {\r\n\t\trequire(stakedOf(msg.sender) >= _amount);\r\n\t\tuint256 _burnedAmount = _amount * DEFLATION_QUANT / 100;\r\n\t\tinfo.scaledPayoutPerToken += _burnedAmount * POINT_AT / info.totalStaked;\r\n\t\tinfo.totalStaked -= _amount;\r\n\t\tinfo.users[msg.sender].balance -= _burnedAmount;\r\n\t\tinfo.users[msg.sender].frozen -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\r\n\t\temit Transfer(address(this), msg.sender, _amount - _burnedAmount);\r\n\t\temit Unstake(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction stake(uint256 amount) external {\r\n\t\tstakeCoins(amount);\r\n\t}\r\n\r\n\tfunction unstake(uint256 amount) external {\r\n\t\tunstakeCoins(amount);\r\n\t}\r\n}\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Stakelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensFrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stakeListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invites\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"invitesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isStakelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"send_interest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInvites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStakelistedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invites\",\"type\":\"uint256\"}],\"name\":\"stakelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoWM","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ff1e616b863329335ac70aaa578fa6b6a902aa8d38503e3015c9f8b2cb25c24"}]}