{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n  function approve(address spender, uint value) external returns (bool success);\r\n}\r\n\r\ncontract YFMSTokenSwap {\r\n  using SafeMath for uint256;\r\n\r\n  ERC20 public YFMSToken;\r\n  ERC20 public LUCRToken;\r\n\r\n  address public owner;\r\n\r\n  constructor(address yfms, address lucr) public {\r\n    owner = msg.sender;\r\n    YFMSToken = ERC20(yfms);\r\n    LUCRToken = ERC20(lucr);\r\n  }\r\n\r\n  function swap () public {\r\n    uint256 balance = YFMSToken.balanceOf(msg.sender);\r\n    require(balance > 0, \"balance must be greater than 0\");\r\n    require(YFMSToken.transferFrom(msg.sender, address(this), balance), \"YFMS transfer failed\");\r\n    require(LUCRToken.transferFrom(owner, msg.sender, balance), \"LUCR transfer failed\");\r\n  }\r\n\r\n  function withdrawYFMS () public {\r\n    require(msg.sender == owner);\r\n    YFMSToken.transfer(owner, YFMSToken.balanceOf(address(this)));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yfms\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lucr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LUCRToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YFMSToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawYFMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YFMSTokenSwap","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fef3bef71a5eb97e097039038776fd967ae5b106000000000000000000000000547d61182b7a5c43d4e4f93a01628e6c5634b9c9","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b7cedab83371d82a0ffc023e28efe1254306fe839fc248af70d2e13032c60119"}]}