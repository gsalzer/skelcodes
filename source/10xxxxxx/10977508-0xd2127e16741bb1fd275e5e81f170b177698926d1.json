{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss-deploy/blob/master/src/join.sol\r\ninterface GemJoinImplementationAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n    function setImplementation(address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\ncontract SpellAction {\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.1.2/contracts.json\r\n\r\n    address constant MCD_VAT         = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant MCD_JUG         = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n\r\n    // TUSD-A specific addresses\r\n    address constant TUSD_IMPL       = 0xffc40F39806F1400d8278BfD33823705b5a4c196;\r\n    address constant MCD_JOIN_TUSD_A = 0x4454aF7C8bb9463203b66C816220D41ED7837f44;\r\n\r\n    // Decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant    TWO = 1000000000627937192491029810;\r\n    uint256 constant  THREE = 1000000000937303470807876289;\r\n    uint256 constant   FOUR = 1000000001243680656318820312;\r\n    uint256 constant  EIGHT = 1000000002440418608258400030;\r\n    uint256 constant TWELVE = 1000000003593629043335673582;\r\n    uint256 constant  FIFTY = 1000000012857214317438491659;\r\n\r\n    function execute() external {\r\n        // Set the global debt ceiling to 1,456,000,000\r\n        // 1,416 (current DC) + 40 (PAXUSD-A)\r\n        VatAbstract(MCD_VAT).file(\"Line\", 1456 * MILLION * RAD);\r\n\r\n        // Set the PAXUSD-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 60 million\r\n        // New debt ceiling: 100 million\r\n        VatAbstract(MCD_VAT).file(\"PAXUSD-A\", \"line\", 100 * MILLION * RAD);\r\n\r\n        // Set the ETH-A stability fee\r\n        //\r\n        // Previous: 2.25%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", TWO);\r\n\r\n        // Set the BAT-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", FOUR);\r\n\r\n        // Set the USDC-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-A\", \"duty\", FOUR);\r\n\r\n        // Set the USDC-B stability fee\r\n        //\r\n        // Previous: 50.25%\r\n        // New: 50%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-B\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-B\", \"duty\", FIFTY);\r\n\r\n        // Set the WBTC-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"WBTC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"WBTC-A\", \"duty\", FOUR);\r\n\r\n        // Set the TUSD-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"TUSD-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"TUSD-A\", \"duty\", FOUR);\r\n\r\n        // Set the KNC-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"KNC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"KNC-A\", \"duty\", FOUR);\r\n\r\n        // Set the ZRX-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"ZRX-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"ZRX-A\", \"duty\", FOUR);\r\n\r\n        // Set the MANA-A stability fee\r\n        //\r\n        // Previous: 12.25%\r\n        // New: 12%\r\n        JugAbstract(MCD_JUG).drip(\"MANA-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"MANA-A\", \"duty\", TWELVE);\r\n\r\n        // Set the USDT-A stability fee\r\n        //\r\n        // Previous: 8.25%\r\n        // New: 8%\r\n        JugAbstract(MCD_JUG).drip(\"USDT-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDT-A\", \"duty\", EIGHT);\r\n\r\n        // Set the PAXUSD-A stability fee\r\n        //\r\n        // Previous: 4.25%\r\n        // New: 4%\r\n        JugAbstract(MCD_JUG).drip(\"PAXUSD-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"PAXUSD-A\", \"duty\", FOUR);\r\n\r\n        // Set the LINK-A stability fee\r\n        //\r\n        // Previous: 2.25%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"LINK-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"LINK-A\", \"duty\", TWO);\r\n\r\n        // Set the LRC-A stability fee\r\n        //\r\n        // Previous: 3.25%\r\n        // New: 3%\r\n        JugAbstract(MCD_JUG).drip(\"LRC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"LRC-A\", \"duty\", THREE);  \r\n\r\n        // Set the COMP-A stability fee\r\n        //\r\n        // Previous: 3.25%\r\n        // New: 3%\r\n        JugAbstract(MCD_JUG).drip(\"COMP-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"COMP-A\", \"duty\", THREE);    \r\n\r\n        // Unblock TUSD\r\n        GemJoinImplementationAbstract(MCD_JOIN_TUSD_A).setImplementation(TUSD_IMPL, 1);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    DSPauseAbstract public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address         public action;\r\n    bytes32         public tag;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    uint256         public expiration;\r\n    bool            public done;\r\n\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/cbf3dd1eab77cb3c5fe3b8db22a08b55a8d4aeaf/governance/votes/Executive%20vote%20-%20October%202%2C%202020.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-10-02 MakerDAO Executive Spell | Hash: 0xbf384941515f3594205f47f8e4675883118fead22472792119cf051ed37f29a8\";\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    // modifier officeHours {\r\n    //     uint day = (now / 1 days + 3) % 7;\r\n    //     require(day < 5, \"Can only be cast on a weekday\");\r\n    //     uint hour = now / 1 hours % 24;\r\n    //     require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n    //     _;\r\n    // }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fa201c1c27be9766a1f3d02e214f175ba82d6830a1de94f63dd2212f99704aa9"}]}