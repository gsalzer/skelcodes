{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\nabstract contract DSGuard {\r\n    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function permit(address src, address dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(address src, address dst, bytes32 sig) public virtual;\r\n}\r\n\r\n\r\nabstract contract DSGuardFactory {\r\n    function newGuard() public virtual returns (DSGuard guard);\r\n} abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} abstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n} contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}\r\n\r\n/// @title Struct Data in a separate contract soit can be used in multiple places\r\ncontract StrategyData {\r\n\r\n    struct Trigger {\r\n        bytes32 id;\r\n        bytes data;\r\n    }\r\n\r\n    struct Action {\r\n        bytes32 id;\r\n        bytes data;\r\n    }\r\n\r\n    struct Strategy {\r\n        address user;\r\n        address proxy;\r\n        bool active;\r\n        uint[] triggerIds;\r\n        uint[] actionIds;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Storage of actions and triggers which can be added/removed and modified\r\ncontract Subscriptions is StrategyData {\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\r\n\r\n    Strategy[] internal strategies;\r\n    Action[] internal actions;\r\n    Trigger[] internal triggers;\r\n\r\n    /// @notice Subscribes a new strategy for a user\r\n    /// @param _triggers Array of trigger data\r\n    /// @param _actions Array of action data\r\n    function subscribe(Trigger[] memory _triggers, Action[] memory _actions) public {\r\n        uint[] memory triggerIds = new uint[](_triggers.length);\r\n        uint[] memory actionsIds = new uint[](_actions.length);\r\n\r\n        // Populate triggers\r\n        for (uint i = 0; i < _triggers.length; ++i) {\r\n            triggers.push(Trigger({\r\n                id: _triggers[i].id,\r\n                data: _triggers[i].data\r\n            }));\r\n\r\n            triggerIds[i] = triggers.length - 1;\r\n        }\r\n\r\n        // Populate actions\r\n        for (uint i = 0; i < _actions.length; ++i) {\r\n            actions.push(Action({\r\n                id: _actions[i].id,\r\n                data: _actions[i].data\r\n            }));\r\n\r\n            actionsIds[i] = actions.length - 1;\r\n        }\r\n\r\n        strategies.push(Strategy({\r\n            user: getProxyOwner(msg.sender),\r\n            proxy: msg.sender,\r\n            active: true,\r\n            triggerIds: triggerIds,\r\n            actionIds: actionsIds\r\n        }));\r\n\r\n        logger.Log(address(this), msg.sender, \"Subscribe\", abi.encode(strategies.length - 1));\r\n    }\r\n\r\n    // TODO: what if we have more/less actions then in the original strategy?\r\n\r\n    /// @notice Update an existing strategy\r\n    /// @param _subId Subscription id\r\n    /// @param _triggers Array of trigger data\r\n    /// @param _actions Array of action data\r\n    function update(uint _subId, Trigger[] memory _triggers, Action[] memory _actions) public {\r\n        Strategy memory s = strategies[_subId];\r\n        require(s.user != address(0), \"Strategy does not exist\");\r\n        require(msg.sender == s.proxy, \"Proxy not strategy owner\");\r\n\r\n        // update triggers\r\n        for (uint i = 0; i < _triggers.length; ++i) {\r\n            triggers[s.triggerIds[i]] = Trigger({\r\n                id: _triggers[i].id,\r\n                data: _triggers[i].data\r\n            });\r\n        }\r\n\r\n        // update actions\r\n        for (uint i = 0; i < _actions.length; ++i) {\r\n            actions[s.actionIds[i]] = Action({\r\n                id: _actions[i].id,\r\n                data: _actions[i].data\r\n            });\r\n        }\r\n\r\n        logger.Log(address(this), msg.sender, \"Update\", abi.encode(_subId));\r\n    }\r\n\r\n    /// @notice Unsubscribe an existing strategy\r\n    /// @param _subId Subscription id\r\n    function unsubscribe(uint _subId) public {\r\n        Strategy memory s = strategies[_subId];\r\n        require(s.user != address(0), \"Strategy does not exist\");\r\n        require(msg.sender == s.proxy, \"Proxy not strategy owner\");\r\n\r\n        strategies[_subId].active = false;\r\n\r\n        logger.Log(address(this), msg.sender, \"Unsubscribe\", abi.encode(_subId));\r\n    }\r\n\r\n\r\n    function getProxyOwner(address _proxy) internal returns (address proxyOwner) {\r\n        proxyOwner = DSProxyInterface(_proxy).owner();\r\n        require(proxyOwner != address(0), \"No proxy\");\r\n    }\r\n\r\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\r\n\r\n    function getTrigger(uint _triggerId) public view returns (Trigger memory) {\r\n        return triggers[_triggerId];\r\n    }\r\n\r\n    function getAction(uint _actionId) public view returns (Action memory) {\r\n        return actions[_actionId];\r\n    }\r\n\r\n    function getStreategyCount() public view returns (uint) {\r\n        return strategies.length;\r\n    }\r\n\r\n    function getStrategy(uint _subId) public view returns (Strategy memory) {\r\n        return strategies[_subId];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Handles auth and calls subscription contract\r\ncontract SubscriptionProxy is StrategyData {\r\n\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n\r\n    function subscribe(address _executorAddr, address _subAddr, Trigger[] memory _triggers, Action[] memory _actions) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        if (currAuthority == address(0)) {\r\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\r\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\r\n        }\r\n\r\n        guard.permit(_executorAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n\r\n        Subscriptions(_subAddr).subscribe(_triggers, _actions);\r\n    }\r\n\r\n    function update(address _subAddr, uint _subId, Trigger[] memory _triggers, Action[] memory _actions) public {\r\n        Subscriptions(_subAddr).update(_subId, _triggers, _actions);\r\n    }\r\n\r\n    // TODO: should we remove permission if no more strategies left?\r\n    function unsubscribe(address _subAddr, uint _subId) public {\r\n        Subscriptions(_subAddr).unsubscribe(_subId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct StrategyData.Trigger[]\",\"name\":\"_triggers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct StrategyData.Action[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct StrategyData.Trigger[]\",\"name\":\"_triggers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct StrategyData.Action[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SubscriptionProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6cbb3a39d225f6919ef7a82b00ec53ecb6f836cef525c0539955e2522a1624e"}]}