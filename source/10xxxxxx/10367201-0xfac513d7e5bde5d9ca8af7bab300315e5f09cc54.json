{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ChromiaToken {\r\n  // Create a table so that we can map addresses\r\n  // to the balances associated with them\r\n  mapping(address => uint256) balances;\r\n  // Create a table so that we can map\r\n  // the addresses of contract owners to\r\n  // those who are allowed to utilize the owner's contract\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n  // In this case, the total supply\r\n  // of MyERCToken is fixed, but\r\n  // it can very much be changed\r\n  uint256 _totalSupply = 100000000;\r\n  // Owner of this contract\r\n  address public owner;\r\n  \r\n  function totalSupply() constant returns (uint256 theTotalSupply) {\r\n    // Because our function signature\r\n    // states that the returning variable\r\n    // is \"theTotalSupply\", we'll just set that variable\r\n    // to the value of the instance variable \"_totalSupply\"\r\n    // and return it\r\n    theTotalSupply = _totalSupply;\r\n    return theTotalSupply;\r\n  }\r\n  \r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  function approve(address _spender, uint256 _amount) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    // Fire the event \"Approval\" to execute any logic\r\n    // that was listening to it\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n  \r\n  // Note: This function returns a boolean value\r\n  //       indicating whether the transfer was successful\r\n  function transfer(address _to, uint256 _amount) returns (bool success) {\r\n    // If the sender has sufficient funds to send\r\n    // and the amount is not zero, then send to\r\n    // the given address\r\n    if (balances[msg.sender] >= _amount \r\n      && _amount > 0\r\n      && balances[_to] + _amount > balances[_to]) {\r\n      balances[msg.sender] -= _amount;\r\n      balances[_to] += _amount;\r\n      // Fire a transfer event for any\r\n      // logic that's listening\r\n      Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n   }\r\n   \r\n   function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n    if (balances[_from] >= _amount\r\n      && allowed[_from][msg.sender] >= _amount\r\n      && _amount > 0\r\n      && balances[_to] + _amount > balances[_to]) {\r\n    balances[_from] -= _amount;\r\n    balances[_to] += _amount;\r\n    Transfer(_from, _to, _amount);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"theTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ChromiaToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://80005ef5799c34e8b2dd15712c6421c247b2ccde93b3ced90e8542dfb77ba707"}]}