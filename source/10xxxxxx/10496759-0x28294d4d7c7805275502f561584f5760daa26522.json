{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Crypto stamp 2 Swipe Collection Helper\r\n * Helper contract to allow creating a Collection\r\n * and transfering a Crypto stamp into it in one transaction\r\n *\r\n * Developed by Capacity Blockchain Solutions GmbH <capacity.at>\r\n * for Ã–sterreichische Post AG <post.at>\r\n */\r\n\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from`, `to` cannot be zero.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\nabstract contract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public virtual returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/ENSReverseRegistrarI.sol\r\n\r\n/*\r\n * Interfaces for ENS Reverse Registrar\r\n * See https://github.com/ensdomains/ens/blob/master/contracts/ReverseRegistrar.sol for full impl\r\n * Also see https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/ENSReverseRegister.sol\r\n *\r\n * Use this as follows (registryAddress is the address of the ENS registry to use):\r\n * -----\r\n * // This hex value is caclulated by namehash('addr.reverse')\r\n * bytes32 public constant ENS_ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n * function registerReverseENS(address registryAddress, string memory calldata) external {\r\n *     require(registryAddress != address(0), \"need a valid registry\");\r\n *     address reverseRegistrarAddress = ENSRegistryOwnerI(registryAddress).owner(ENS_ADDR_REVERSE_NODE)\r\n *     require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * or\r\n * -----\r\n * function registerReverseENS(address reverseRegistrarAddress, string memory calldata) external {\r\n *    require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * ENS deployments can be found at https://docs.ens.domains/ens-deployments\r\n * E.g. Etherscan can be used to look up that owner on those contracts.\r\n * namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n * Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n * Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ninterface ENSRegistryOwnerI {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ENSReverseRegistrarI {\r\n    function setName(string calldata name) external returns (bytes32 node);\r\n}\r\n\r\n// File: contracts/CollectionsI.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Outward-facing interface of a Collections contract.\r\n */\r\ninterface CollectionsI is IERC721 {\r\n    event NewCollection(address indexed owner, address collectionAddress);\r\n\r\n    /**\r\n     * @dev Creates a new Collection.\r\n     */\r\n    function create(address _notificationContract,\r\n                    string calldata _ensName,\r\n                    string calldata _ensSubdomainName,\r\n                    address _ensSubdomainRegistrarAddress,\r\n                    address _ensReverseRegistrarAddress)\r\n    external;\r\n\r\n    /**\r\n     * @dev Create a collection for a different owner. Only callable by a create controller role.\r\n     */\r\n    function createFor(address payable _newOwner,\r\n                       address _notificationContract,\r\n                       string calldata _ensName,\r\n                       string calldata _ensSubdomainName,\r\n                       address _ensSubdomainRegistrarAddress,\r\n                       address _ensReverseRegistrarAddress)\r\n    external payable;\r\n\r\n    /**\r\n     * @dev Removes (burns) an empty Collection. Only the Collection contract itself can call this.\r\n     */\r\n    function burn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns if a Collection NFT exists for the specified `tokenId`.\r\n     */\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given `tokenId`.\r\n     */\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the Collection address for a token ID.\r\n     */\r\n    function collectionAddress(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the token ID for a Collection address.\r\n     */\r\n    function tokenIdForCollection(address collectionAddr) external view returns (uint256 tokenId);\r\n}\r\n\r\n// File: contracts/ERC721ExistsI.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 compliant contract with an exists() function.\r\n */\r\nabstract contract ERC721ExistsI is IERC721 {\r\n\r\n    // Returns whether the specified token exists\r\n    function exists(uint256 tokenId) public view virtual returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/CS2SignedTransferI.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 compliant contract with an exists() function.\r\n */\r\nabstract contract CS2SignedTransferI is ERC721ExistsI {\r\n\r\n    // Outward-facing function for signed transfer: assembles the expected data and then calls the internal function to do the rest.\r\n    // Can called by anyone knowing about the right signature, but can only transfer to the given specific target.\r\n    function signedTransfer(uint256 _tokenId, address _to, bytes memory _signature) external virtual;\r\n\r\n    // Outward-facing function for operator-driven signed transfer: assembles the expected data and then calls the internal function to do the rest.\r\n    // Can transfer to any target, but only be called by the trusted operator contained in the signature.\r\n    function signedTransferWithOperator(uint256 _tokenId, address _to, bytes memory _signature) external virtual;\r\n\r\n    // Mint token and transfer it in the same transaction.\r\n    // Can called by anyone knowing about the right signature (and proof), but can only transfer to the given specific target.\r\n    function signedTransferWithMintProof(bytes32 tokenData, address _to, bytes calldata _signature, bytes32[] calldata merkleProof) external virtual;\r\n\r\n    // Mint token and transfer it in the same transaction.\r\n    // Can transfer to any target, but only be called by the trusted operator contained in the signature.\r\n    function signedTransferWithOperatorAndMintProof(bytes32 tokenData, address _to, bytes calldata _signature, bytes32[] calldata merkleProof) external virtual;\r\n\r\n}\r\n\r\n// File: contracts/CS2SwipeCollectionHelper.sol\r\n\r\n/*\r\n * Helper for CS2 contract connecting to Achievements\r\n */\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CS2SwipeCollectionHelper is ERC165, IERC721Receiver {\r\n    using SafeMath for uint256;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    address public tokenAssignmentControl;\r\n\r\n    CollectionsI public collections;\r\n    uint256 public inFlightCollectionId;\r\n\r\n    event TokenAssignmentControlTransferred(address indexed previousTokenAssignmentControl, address indexed newTokenAssignmentControl);\r\n    // ERC721 event - never emitted in this contract but helpful for running our tests.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    // CS2/CSGU and TestCS2 events - never emitted in this contract but helpful for running our tests.\r\n    event TestMintedWithProof(address operator, uint256 indexed tokenId, address indexed owner);\r\n    event SignedTransfer(address operator, address indexed from, address indexed to, uint256 indexed tokenId, uint256 signedTransferNonce);\r\n    // Collections event - never emitted in this contract but helpful for running our tests.\r\n    event NewCollection(address indexed owner, address collectionAddress);\r\n\r\n    constructor(address _collectionsAddress, address _tokenAssignmentControl)\r\n    public\r\n    {\r\n        _registerInterface(_ERC721_RECEIVED);\r\n        collections = CollectionsI(_collectionsAddress);\r\n        require(address(collections) != address(0x0), \"You need to provide an actual Collections contract.\");\r\n        tokenAssignmentControl = _tokenAssignmentControl;\r\n        require(tokenAssignmentControl != address(0), \"tokenAssignmentControl cannot be the zero address.\");\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == tokenAssignmentControl, \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function transferTokenAssignmentControl(address _newTokenAssignmentControl)\r\n    public\r\n    onlyTokenAssignmentControl\r\n    {\r\n        require(_newTokenAssignmentControl != address(0), \"tokenAssignmentControl cannot be the zero address.\");\r\n        emit TokenAssignmentControlTransferred(tokenAssignmentControl, _newTokenAssignmentControl);\r\n        tokenAssignmentControl = _newTokenAssignmentControl;\r\n    }\r\n\r\n    /*** Helper for creating a new collection and fundedTransfer of CS2/CSGU in the same transaction  ***/\r\n\r\n    function createCollectionWithToken(\r\n        address _newOwner,\r\n        address _notificationContract,\r\n        string memory _ensName,\r\n        string memory _ensSubdomainName,\r\n        address _ensSubdomainRegistrarAddress,\r\n        address _ensReverseRegistrarAddress,\r\n        address _tokenContractAddress,\r\n        uint256 _tokenId,\r\n        bytes memory _signature\r\n    )\r\n    public\r\n    {\r\n        require(address(_tokenContractAddress) != address(0x0), \"You need to provide an actual Crypto stamp token contract.\");\r\n        CS2SignedTransferI cstoken = CS2SignedTransferI(_tokenContractAddress);\r\n        address collectionAddress = _createCollection(_newOwner, _notificationContract, _ensName, _ensSubdomainName, _ensSubdomainRegistrarAddress, _ensReverseRegistrarAddress);\r\n        cstoken.signedTransferWithOperator(_tokenId, collectionAddress, _signature);\r\n    }\r\n\r\n    function createCollectionWithTokenAndMintProof(\r\n        address _newOwner,\r\n        address _notificationContract,\r\n        string memory _ensName,\r\n        string memory _ensSubdomainName,\r\n        address _ensSubdomainRegistrarAddress,\r\n        address _ensReverseRegistrarAddress,\r\n        address _tokenContractAddress,\r\n        bytes32 tokenData,\r\n        bytes calldata _signature,\r\n        bytes32[] calldata merkleProof\r\n    )\r\n    public\r\n    {\r\n        require(address(_tokenContractAddress) != address(0x0), \"You need to provide an actual Crypto stamp token contract.\");\r\n        CS2SignedTransferI cstoken = CS2SignedTransferI(_tokenContractAddress);\r\n        address collectionAddress = _createCollection(_newOwner, _notificationContract, _ensName, _ensSubdomainName, _ensSubdomainRegistrarAddress, _ensReverseRegistrarAddress);\r\n        cstoken.signedTransferWithOperatorAndMintProof(tokenData, collectionAddress, _signature, merkleProof);\r\n    }\r\n\r\n    function _createCollection(\r\n        address _newOwner,\r\n        address _notificationContract,\r\n        string memory _ensName,\r\n        string memory _ensSubdomainName,\r\n        address _ensSubdomainRegistrarAddress,\r\n        address _ensReverseRegistrarAddress\r\n    )\r\n    internal\r\n    returns (address)\r\n    {\r\n        inFlightCollectionId = 0;\r\n        collections.create(_notificationContract, _ensName, _ensSubdomainName, _ensSubdomainRegistrarAddress, _ensReverseRegistrarAddress);\r\n        require(inFlightCollectionId > 0, \"Temporary ID store did not work!\");\r\n        address collection_address = collections.collectionAddress(inFlightCollectionId);\r\n        // alternative without inFlightCollection hack: address collection_address = ens_resolver.addr(ens_node);\r\n        collections.safeTransferFrom(address(this), _newOwner, inFlightCollectionId);\r\n        inFlightCollectionId = 0;\r\n        return collection_address;\r\n    }\r\n\r\n    // Only allow receiving when we are the operator ourselves.\r\n    function onERC721Received(address _operator, address /*_from*/, uint256 _tokenId, bytes memory /*_data*/)\r\n    public override\r\n    returns (bytes4)\r\n    {\r\n        require(_operator == address(this), \"onERC721Received operator needs to be ourselves!\");\r\n        inFlightCollectionId = _tokenId;\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /*** Enable reverse ENS registration ***/\r\n\r\n    // Call this with the address of the reverse registrar for the respecitve network and the ENS name to register.\r\n    // The reverse registrar can be found as the owner of 'addr.reverse' in the ENS system.\r\n    // See https://docs.ens.domains/ens-deployments for address of ENS deployments, e.g. Etherscan can be used to look up that owner on those.\r\n    // namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n    // Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n    // Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n       require(_reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n       ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(address _foreignToken, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        IERC20 erc20Token = IERC20(_foreignToken);\r\n        erc20Token.transfer(_to, erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n    // If this contract gets a balance in some ERC721 contract after it's finished, then we can rescue it.\r\n    function approveNFTrescue(IERC721 _foreignNFT, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignNFT.setApprovalForAll(_to, true);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"NewCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signedTransferNonce\",\"type\":\"uint256\"}],\"name\":\"SignedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TestMintedWithProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTokenAssignmentControl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenAssignmentControl\",\"type\":\"address\"}],\"name\":\"TokenAssignmentControlTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_foreignNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"approveNFTrescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"contract CollectionsI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_notificationContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ensSubdomainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ensSubdomainRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensReverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createCollectionWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_notificationContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ensSubdomainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ensSubdomainRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensReverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"createCollectionWithTokenAndMintProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inFlightCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerReverseENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAssignmentControl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAssignmentControl\",\"type\":\"address\"}],\"name\":\"transferTokenAssignmentControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CS2SwipeCollectionHelper","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000574317b5167521d2e3e34469a6993102fbbd92ed000000000000000000000000596e620e175c2c37a5f35a41d9f2305a991ffc89","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://900ecff43176befd1f39676f5bb994c215d7a198d7d2295e6e23f4c3ed2c48db"}]}