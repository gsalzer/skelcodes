{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.8;\r\n\r\n\r\nlibrary Math {\r\n\r\n    // return a + b\r\n    function add(uint256 a, uint256 b) public pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"add overflow\");\r\n        return c;\r\n    }\r\n\r\n    // return a - b\r\n    function sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n        require(b <= a, \"sub underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    // return a * b\r\n    function mul(uint256 a, uint256 b) public pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n        return c;\r\n    }\r\n\r\n    // return a / b\r\n    function div(uint256 a, uint256 b) public pure returns (uint256) {\r\n        require(b != 0, \"div zero\");\r\n        return a / b;\r\n    }\r\n\r\n    // return the greatest uint256 less than or equal to the square root of a\r\n    function sqrt(uint256 a) public pure returns (uint256) {\r\n        uint256 result = 0;\r\n        uint256 bit = 1 << 254; // the second to top bit\r\n        while (bit > a) {\r\n            bit >>= 2;\r\n        }\r\n        while (bit != 0) {\r\n            uint256 sum = result + bit;\r\n            result >>= 1;\r\n            if (a >= sum) {\r\n                a -= sum;\r\n                result += bit;\r\n            }\r\n            bit >>= 2;\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"div\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Math","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://10bb506c4bfa8877d0100b8b375a1f88882636e69fbf9be2cc8317d9ff818650"}]}