{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/artist-controls/ArtistEditionBurner.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKODAV2ArtistBurner {\r\n  function editionActive(uint256 _editionNumber) external view returns (bool);\r\n\r\n  function artistCommission(uint256 _editionNumber) external view returns (address _artistAccount, uint256 _artistCommission);\r\n\r\n  function updateActive(uint256 _editionNumber, bool _active) external;\r\n\r\n  function totalSupplyEdition(uint256 _editionNumber) external view returns (uint256);\r\n\r\n  function totalRemaining(uint256 _editionNumber) external view returns (uint256);\r\n\r\n  function updateTotalAvailable(uint256 _editionNumber, uint256 _totalAvailable) external;\r\n}\r\n\r\n/**\r\n* @title Artists burning contract for KnownOrigin (KODA)\r\n*\r\n* Allows for edition artists to burn unsold works or reduce the supply of sold tokens from editions\r\n*\r\n* https://www.knownorigin.io/\r\n*\r\n* BE ORIGINAL. BUY ORIGINAL.\r\n*/\r\ncontract ArtistEditionBurner is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  // Interface into the KODA world\r\n  IKODAV2ArtistBurner public kodaAddress;\r\n\r\n  event EditionDeactivated(\r\n    uint256 indexed _editionNumber\r\n  );\r\n\r\n  event EditionSupplyReduced(\r\n    uint256 indexed _editionNumber\r\n  );\r\n\r\n  constructor(IKODAV2ArtistBurner _kodaAddress) public {\r\n    kodaAddress = _kodaAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the provided edition to either a deactivated state or reduces the available supply to zero\r\n   * @dev Only callable from edition artists defined in KODA NFT contract\r\n   * @dev Only callable when contract is not paused\r\n   * @dev Reverts if edition is invalid\r\n   * @dev Reverts if edition is not active in KDOA NFT contract\r\n   */\r\n  function deactivateOrReduceEditionSupply(uint256 _editionNumber) external whenNotPaused {\r\n    (address artistAccount, uint256 _) = kodaAddress.artistCommission(_editionNumber);\r\n    require(msg.sender == artistAccount || msg.sender == owner, \"Only from the edition artist account\");\r\n\r\n    // only allow them to be disabled if we have not already done it already\r\n    bool isActive = kodaAddress.editionActive(_editionNumber);\r\n    require(isActive, \"Only when edition is active\");\r\n\r\n    // only allow changes if not sold out\r\n    uint256 totalRemaining = kodaAddress.totalRemaining(_editionNumber);\r\n    require(totalRemaining > 0, \"Only when edition not sold out\");\r\n\r\n    // total issued so far\r\n    uint256 totalSupply = kodaAddress.totalSupplyEdition(_editionNumber);\r\n\r\n    // if no tokens issued, simply disable the edition, burn it!\r\n    if (totalSupply == 0) {\r\n      kodaAddress.updateActive(_editionNumber, false);\r\n      kodaAddress.updateTotalAvailable(_editionNumber, 0);\r\n      emit EditionDeactivated(_editionNumber);\r\n    }\r\n    // if some tokens issued, reduce ths supply so that no more can be issued\r\n    else {\r\n      kodaAddress.updateTotalAvailable(_editionNumber, totalSupply);\r\n      emit EditionSupplyReduced(_editionNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKodavV2(IKODAV2ArtistBurner _kodaAddress) onlyOwner public {\r\n    kodaAddress = _kodaAddress;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"deactivateOrReduceEditionSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"EditionDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"EditionSupplyReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArtistEditionBurner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dbe6ffa6a21483cd9999d0873d0eb8d216b0dddf67a6f7df931b55bbefe37066"}]}