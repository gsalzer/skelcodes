{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n─██████████████─██████████████─██████──██████─██████████████─██████████████████────████████──────────██████████████─\r\n─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░░░██────██░░░░██──────────██░░░░░░░░░░██─\r\n─██░░██████████─██████░░██████─██░░██──██░░██─██░░██████░░██─████████████░░░░██────████░░██──────────██░░██████░░██─\r\n─██░░██─────────────██░░██─────██░░██──██░░██─██░░██──██░░██─────────████░░████──────██░░██──────────██░░██──██░░██─\r\n─██░░██████████─────██░░██─────██░░██████░░██─██░░██──██░░██───────████░░████────────██░░██──────────██░░██──██░░██─\r\n─██░░░░░░░░░░██─────██░░██─────██░░░░░░░░░░██─██░░██──██░░██─────████░░████──────────██░░██──────────██░░██──██░░██─\r\n─██░░██████████─────██░░██─────██░░██████░░██─██░░██──██░░██───████░░████────────────██░░██──────────██░░██──██░░██─\r\n─██░░██─────────────██░░██─────██░░██──██░░██─██░░██──██░░██─████░░████──────────────██░░██──────────██░░██──██░░██─\r\n─██░░██████████─────██░░██─────██░░██──██░░██─██░░██████░░██─██░░░░████████████────████░░████─██████─██░░██████░░██─\r\n─██░░░░░░░░░░██─────██░░██─────██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░░░██────██░░░░░░██─██░░██─██░░░░░░░░░░██─\r\n─██████████████─────██████─────██████──██████─██████████████─██████████████████────██████████─██████─██████████████─\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n\r\nImmutable Global Single Line Autopool | 100% Open Source  | 100% Decentralized\r\n\r\nVisit at : https://www.ethoz.io/\r\n\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract ethoz {\r\n    address payable public owner;\r\n    uint256 public SumEthz;\r\n    uint256 public wrgEthz;\r\n    uint256 public WaitCnt;\r\n    uint256 public ethozid;\r\n    uint256 public ethzslotid;\r\n    uint256 public lastsent;\r\n    uint256 public ethozsent;\r\n    uint256 public ethozbal;\r\n    \r\n    constructor(address payable _owner,address payable _genesisUsr) public\r\n    {\r\n        owner = _owner;\r\n        ethozid = 100;\r\n        ethzslotid = 1000;\r\n        SumEthz = 0;\r\n        lastsent = 999;\r\n        wrgEthz = 0;\r\n        \r\n        User memory genusr = User({\r\n            isExist: true,\r\n            activeslotid: 0,\r\n            id:ethozid,\r\n            referrer:_genesisUsr,\r\n            partners:0,\r\n            complete:0,\r\n            lastslotid:0\r\n        });\r\n        users[_genesisUsr] = genusr;\r\n        usrIds[ethozid] = _genesisUsr;\r\n        ethozid++;\r\n    }\r\n    \r\n    event newRegistered(uint indexed userid, address indexed userAdr,address indexed inviter); \r\n    event NewSlotBuy(uint indexed _uid,uint indexed _slotid, address indexed userAdr, uint256 amount); \r\n    event EthozPaid(uint indexed _slotid, address indexed userAdr, uint256 amount); \r\n    \r\n    struct User{\r\n        bool isExist;\r\n        uint256 activeslotid;\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partners;\r\n        uint complete;\r\n        uint256 lastslotid;\r\n    }\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public usrIds;\r\n    \r\n    enum statuses {Created,Paid,Due,Sent}\r\n    \r\n    struct slot{\r\n        address payable uadress;\r\n        uint256 amountrcvd;\r\n        uint256 dueamount;\r\n        statuses status;\r\n    }\r\n    \r\n    mapping(uint256 => slot) public ethozslots;\r\n    \r\n    modifier oad() {\r\n        require(msg.sender == owner, \"You are not contract owner\");\r\n        _;\r\n    }\r\n    \r\n    function register(address userAddress, address refAddress) private {\r\n        uint32 size;\r\n        assembly {size := extcodesize(userAddress)}\r\n        require(size == 0, \"Registration address cannot be a contract\");\r\n        require(users[userAddress].isExist == false, \"User already exist\");\r\n        if(users[refAddress].isExist == false){\r\n            refAddress = usrIds[100];\r\n            users[usrIds[100]].partners += 1;\r\n        }\r\n        else{\r\n            users[refAddress].partners += 1;\r\n        }\r\n        User memory newusr = User({\r\n            isExist: true,\r\n            activeslotid: 0,\r\n            id:ethozid,\r\n            referrer:refAddress,\r\n            partners:0,\r\n            complete:0,\r\n            lastslotid:0\r\n            \r\n        });\r\n        users[userAddress] = newusr;\r\n        usrIds[ethozid] = userAddress;\r\n        ethozid++;\r\n        SumEthz += 0.001 ether;\r\n        emit newRegistered(ethozid - 1,userAddress,refAddress);\r\n    }\r\n    \r\n    function buyslot(address payable uadrslot) private {\r\n        require(users[uadrslot].isExist == true, \"User not exist, please register first.\");\r\n        require(users[uadrslot].activeslotid == 0, \"Already own active slot\");\r\n        slot memory newslot = slot({\r\n            uadress: uadrslot,\r\n            amountrcvd: 0.1 ether,\r\n            dueamount:0.15 ether,\r\n            status: statuses.Paid\r\n        });\r\n        ethozslots[ethzslotid] = newslot;\r\n        users[uadrslot].activeslotid = ethzslotid;\r\n        SumEthz += 0.005 ether;\r\n        ethozbal += 0.1 ether;\r\n        emit NewSlotBuy(users[uadrslot].id,ethzslotid,msg.sender,msg.value);\r\n        ethzslotid++;\r\n        \r\n        uint256 dueslot = 0;\r\n        dueslot = lastsent + 1;\r\n        if(ethozslots[dueslot].status == statuses.Paid && ethozbal >= ethozslots[dueslot].dueamount && ethozslots[dueslot].dueamount > 0)\r\n        {\r\n        uint256 dueamt = ethozslots[dueslot].dueamount;\r\n        ethozbal = ethozbal - dueamt;\r\n        ethozslots[dueslot].status = statuses.Sent;\r\n        users[ethozslots[dueslot].uadress].activeslotid = 0;\r\n        users[ethozslots[dueslot].uadress].complete += 1;\r\n        lastsent = dueslot;\r\n        users[ethozslots[dueslot].uadress].lastslotid = dueslot;\r\n        ethozsent += dueamt;\r\n        ethozslots[dueslot].dueamount = 0;\r\n        ethozslots[dueslot].uadress.transfer(dueamt);\r\n        emit EthozPaid(dueslot,ethozslots[dueslot].uadress,dueamt);\r\n        }\r\n    }\r\n    \r\n    function regme(address rfAdr) external payable {\r\n        require(msg.value == 0.001 ether, \"Send 0.001 ether to register\");\r\n        register(msg.sender, rfAdr);\r\n    }\r\n\r\n    function buynewslot() external payable {\r\n        require(msg.value == 0.105 ether, \"Send 0.105 ether to buy slot\");\r\n        buyslot(msg.sender);\r\n    }\r\n    \r\n    receive() external payable {\r\n        if(msg.value > 0)\r\n        {\r\n            if(msg.value == 0.001 ether && msg.data.length == 0)\r\n            {\r\n                return register(msg.sender, usrIds[100]);\r\n            }\r\n            else if(msg.value == 0.001 ether)\r\n            {\r\n                return register(msg.sender, bytesToAddress(msg.data));\r\n            }\r\n            else if(msg.value == 0.105 ether)\r\n            {\r\n                return buyslot(msg.sender);\r\n            }\r\n            else\r\n            {\r\n                revert(\"Invalid transaction or transaction amount\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getEthozCnt() public view returns (uint){\r\n            return ethozid;\r\n    }\r\n    \r\n    function getSlotCnt() public view returns (uint){\r\n            return ethzslotid;\r\n    }\r\n    \r\n    function getLastSent() public view returns (uint){\r\n            return lastsent;\r\n    }\r\n    \r\n    function getEthozBal() public view returns (uint256){\r\n            return ethozbal;\r\n    }\r\n    \r\n    function getEthozSent() public view returns (uint256){\r\n            return ethozsent;\r\n    }\r\n    \r\n    function getRegEthoz() public view returns (uint256){\r\n            return SumEthz;\r\n    }\r\n    \r\n    function getUsrActvSlid(address _uadr) public view returns (uint){\r\n            return users[_uadr].activeslotid;\r\n    }\r\n    \r\n    function getUsrAdr(uint256 _slid) public view returns (address){\r\n            return usrIds[_slid];\r\n    }\r\n    \r\n    function getUsrId(address adrss) public view returns (uint){\r\n            return users[adrss].id;\r\n    }\r\n    \r\n    function getWtng(address uadr) public view returns (uint){\r\n        require(users[uadr].isExist == true, \"User not exist.\");\r\n        uint256 wtng = 0;\r\n        if(users[uadr].activeslotid > 0 && users[uadr].activeslotid >= lastsent)    \r\n        {\r\n            wtng = users[uadr].activeslotid - lastsent;\r\n        }\r\n        return wtng;\r\n    }\r\n    \r\n    function getUser(address chkAdr) public view returns(uint256 ActvSlot, uint256 uid,address ref,uint invites,uint cdone,uint256 LastSlot)\r\n    {\r\n        require(users[chkAdr].isExist == true, \"User not exist.\");\r\n        ActvSlot = users[chkAdr].activeslotid;\r\n        uid = users[chkAdr].id;\r\n        ref = users[chkAdr].referrer;\r\n        invites = users[chkAdr].partners;\r\n        cdone = users[chkAdr].complete;\r\n        LastSlot = users[chkAdr].lastslotid;\r\n        \r\n        return(ActvSlot,uid,ref,invites,cdone,LastSlot);\r\n    }\r\n    \r\n    function getSlot(uint256 slid) public view returns(address uAdr,uint256 amount, uint256 due,uint stat)\r\n    {\r\n        uAdr = ethozslots[slid].uadress;\r\n        amount = ethozslots[slid].amountrcvd;\r\n        due = ethozslots[slid].dueamount;\r\n        stat = uint(ethozslots[slid].status);\r\n        \r\n        return(uAdr,amount,due,stat);\r\n    }\r\n    \r\n    fallback() external payable {\r\n        \r\n    }\r\n    \r\n    function bytesToAddress(bytes memory byts) private pure returns (address addrs) {\r\n        assembly {\r\n            addrs := mload(add(byts, 20))\r\n        }\r\n        return addrs;\r\n    }\r\n    \r\n    function EthozRegAd(address payable wadr, uint256 amt) public oad\r\n    {   \r\n        require(SumEthz >= amt, \"Balance is low\");\r\n        wrgEthz += amt;\r\n        SumEthz -= amt;\r\n        wadr.transfer(amt);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_genesisUsr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_slotid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthozPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_slotid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewSlotBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"newRegistered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wadr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"EthozRegAd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SumEthz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WaitCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buynewslot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethozbal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethozid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethozsent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethozslots\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"uadress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountrcvd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueamount\",\"type\":\"uint256\"},{\"internalType\":\"enum ethoz.statuses\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethzslotid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthozBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthozCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthozSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegEthoz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slid\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uAdr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlotCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chkAdr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ActvSlot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cdone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastSlot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uadr\",\"type\":\"address\"}],\"name\":\"getUsrActvSlid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slid\",\"type\":\"uint256\"}],\"name\":\"getUsrAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adrss\",\"type\":\"address\"}],\"name\":\"getUsrId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uadr\",\"type\":\"address\"}],\"name\":\"getWtng\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastsent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rfAdr\",\"type\":\"address\"}],\"name\":\"regme\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activeslotid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complete\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastslotid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usrIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrgEthz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ethoz","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000fa6aa23f1242174311accf507cd760bc89833b800000000000000000000000026c06a01b47a31a8b282031c59cfbd0c20bbf8bc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3f2c66bfaadbeba2bff749dceaa2aaa7cbc8b87e1711c8b01908dd0f1dad0519"}]}