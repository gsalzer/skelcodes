{"status":"1","message":"OK","result":[{"SourceCode":"{\"ApproveAndCallFallback.sol\":{\"content\":\"pragma solidity 0.4.26;\\n\\n\\ninterface ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\\n}\\n\"},\"Context.sol\":{\"content\":\"pragma solidity 0.4.26;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"interface ERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address who) external view returns (uint256);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function transfer(address to, uint256 value) external returns (bool);\\n  function approve(address spender, uint256 value) external returns (bool);\\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\n  function burn(uint256 amount) external;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"meridianToken.sol\":{\"content\":\"pragma solidity 0.4.26;\\n\\n\\n// Meridian Network token\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ApproveAndCallFallback.sol\\\";\\n\\n\\ncontract Meridian is ERC20, Ownable {\\n  using SafeMath for uint256;\\n\\n  mapping (address =\\u003e uint256) public balances;\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowed;\\n  string public constant name  = \\\"Meridian Network\\\";\\n  string public constant symbol = \\\"LOCK\\\";\\n  uint8 public constant decimals = 18;\\n\\n  uint256 _totalSupply = 15500000 * (10 ** 18);\\n  uint256 public totalBurned = 0;\\n\\n  //nonstandard variables\\n  mapping(address=\\u003ebool) public burnExempt;\\n  uint256 public TOKEN_BURN_RATE = 100; //represents 10%, shows 100 so that it may be adjusted to decimal precision\\n  bool public burnActive=true; //once turned off burn on transfer is permanently disabled\\n  uint256 LOCKED_AMOUNT=500000 * (10 ** 18);\\n  uint256 unlockTime=now + 40 days;\\n\\n  constructor() public Ownable(){\\n    balances[address(this)] = LOCKED_AMOUNT;\\n    uint amountRemaining = _totalSupply.sub(LOCKED_AMOUNT);\\n    balances[msg.sender] = amountRemaining;\\n    emit Transfer(address(0), address(this), LOCKED_AMOUNT);\\n    emit Transfer(address(0), msg.sender, amountRemaining);\\n  }\\n  function addBurnExempt(address addr) public onlyOwner{\\n    burnExempt[addr]=true;\\n  }\\n  function removeBurnExempt(address addr) public onlyOwner{\\n    burnExempt[addr]=false;\\n  }\\n  function permanentlyDisableBurnOnTransfer() public onlyOwner{\\n    burnActive=false;\\n  }\\n  /*\\n    After 2 months team can retrieve locked tokens\\n  */\\n  function retrieveLockedAmount(address to) public onlyOwner{\\n    require(now\\u003eunlockTime);\\n    uint256 toRetrieve = balances[address(this)];\\n    balances[to] = balances[to].add(toRetrieve);\\n    balances[address(this)] = 0;\\n    emit Transfer(address(this), to, toRetrieve);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address user) public view returns (uint256) {\\n    return balances[user];\\n  }\\n\\n  function allowance(address user, address spender) public view returns (uint256) {\\n    return allowed[user][spender];\\n  }\\n\\n  function transfer(address recipient, uint256 value) public returns (bool) {\\n    require(value \\u003c= balances[msg.sender]);\\n    require(recipient != address(0));\\n\\n    uint burnFee;\\n    if((!burnActive)||burnExempt[msg.sender]){\\n      burnFee=0;\\n    }\\n    else{\\n      burnFee=value.mul(TOKEN_BURN_RATE).div(1000);\\n    }\\n    uint256 tokensToTransfer = value.sub(burnFee);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n    balances[recipient] = balances[recipient].add(tokensToTransfer);\\n\\n    _totalSupply = _totalSupply.sub(burnFee);\\n    totalBurned = totalBurned.add(burnFee);\\n\\n    emit Transfer(msg.sender, recipient, tokensToTransfer);\\n    if(burnFee\\u003e0){\\n      emit Transfer(msg.sender, address(0), burnFee);\\n    }\\n    return true;\\n  }\\n\\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\\n    for (uint256 i = 0; i \\u003c receivers.length; i++) {\\n      transfer(receivers[i], amounts[i]);\\n    }\\n  }\\n\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n    allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\\n    allowed[msg.sender][spender] = tokens;\\n    emit Approval(msg.sender, spender, tokens);\\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address recipient, uint256 value) public returns (bool) {\\n    require(value \\u003c= balances[from]);\\n    require(value \\u003c= allowed[from][msg.sender]);\\n    require(recipient != address(0));\\n\\n    uint burnFee;\\n    if((!burnActive)||burnExempt[from]||burnExempt[msg.sender]){\\n      burnFee=0;\\n    }\\n    else{\\n      burnFee=value.mul(TOKEN_BURN_RATE).div(1000);\\n    }\\n    uint256 tokensToTransfer = value.sub(burnFee);\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[recipient] = balances[recipient].add(tokensToTransfer);\\n\\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\\n\\n    _totalSupply = _totalSupply.sub(burnFee);\\n    totalBurned = totalBurned.add(burnFee);\\n\\n    emit Transfer(from, recipient, tokensToTransfer);\\n    if(burnFee\\u003e0){\\n      emit Transfer(msg.sender, address(0), burnFee);\\n    }\\n\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    require(spender != address(0));\\n    allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    require(spender != address(0));\\n    allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n    return true;\\n  }\\n\\n  function burn(uint256 amount) public {\\n    require(amount != 0);\\n    require(amount \\u003c= balances[msg.sender]);\\n    totalBurned = totalBurned.add(amount);\\n    _totalSupply = _totalSupply.sub(amount);\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    emit Transfer(msg.sender, address(0), amount);\\n  }\\n\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.4.26;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"library SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a / b;\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a);\\n    return c;\\n  }\\n\\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\\n    uint256 c = add(a,m);\\n    uint256 d = sub(c,1);\\n    return mul(div(d,m),m);\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveLockedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnExempt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_BURN_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeBurnExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"permanentlyDisableBurnOnTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addBurnExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Meridian","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bbd443289c407807722be496e2fe7975aec0269bf0534cd3001092b0af99a8b5"}]}