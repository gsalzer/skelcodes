{"status":"1","message":"OK","result":[{"SourceCode":"/***\n *    ██████╗ ███████╗ ██████╗  ██████╗ \n *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\n *    ██║  ██║█████╗  ██║  ███╗██║   ██║\n *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\n *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\n *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \n *    \n * https://dego.finance\n                                  \n* MIT License\n* ===========\n*\n* Copyright (c) 2020 dego\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n// File: contracts/interface/IPool.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IPool {\n    function totalSupply( ) external view returns (uint256);\n    function balanceOf( address player ) external view returns (uint256);\n}\n\n// File: contracts/library/Governance.sol\n\npragma solidity ^0.5.0;\n\ncontract Governance {\n\n    address public _governance;\n\n    constructor() public {\n        _governance = tx.origin;\n    }\n\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyGovernance {\n        require(msg.sender == _governance, \"not governance\");\n        _;\n    }\n\n    function setGovernance(address governance)  public  onlyGovernance\n    {\n        require(governance != address(0), \"new governance the zero address\");\n        emit GovernanceTransferred(_governance, governance);\n        _governance = governance;\n    }\n\n\n}\n\n// File: contracts/governance/DegoVoteProxy.sol\n\npragma solidity ^0.5.5;\n\n\n\ncontract DegoVoterProxy is Governance {\n    \n    struct info{\n        IPool poolAddr;\n        uint256 weight;\n    }\n    mapping(address => uint256) public _addr2Id;  \n    mapping(uint256 => info) public _pools;  \n    uint256 public _pID;       \n    \n    function decimals() external pure returns (uint8) {\n        return uint8(18);\n    }\n    \n    function name() external pure returns (string memory) {\n        return \"dego.voteproxy\";\n    }\n    \n    function symbol() external pure returns (string memory) {\n        return \"DEGOVOTE\";\n    }\n    \n    function totalSupply() external view returns (uint) {\n\n        uint256 total = 0;\n        for(uint256 i=1; i<=_pID; i++){\n            if(_pools[i].weight>0){\n                total  +=  _pools[i].poolAddr.totalSupply()*_pools[i].weight;\n            }\n        }\n        return total; \n    }\n    \n    function balanceOf(address voter) external view returns (uint) {\n\n        uint256 votes = 0;\n        for(uint256 i=1; i<=_pID; i++){\n            if(_pools[i].weight>0){\n                votes  +=  _pools[i].poolAddr.balanceOf(voter)*_pools[i].weight;\n            }\n        }\n        return votes;\n\n    }\n\n    function setPool(address pool, uint256 weight)  public  onlyGovernance{\n\n        uint256 pID= _addr2Id[pool];\n        if(pID == 0){\n            _pID++;\n            pID = _pID;\n            _addr2Id[pool] = pID;\n            _pools[pID].weight=weight;\n            _pools[pID].poolAddr=IPool(pool);\n        }\n        else{\n            _pools[pID].weight=weight;\n        }\n\n    }\n\n\n    constructor() public {}\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pools\",\"outputs\":[{\"name\":\"poolAddr\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_pID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addr2Id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"}]","ContractName":"DegoVoterProxy","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}