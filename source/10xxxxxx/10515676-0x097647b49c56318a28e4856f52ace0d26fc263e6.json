{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\ninterface IHandler {\r\n    function deposit(address _token, uint256 _amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw(address _token, uint256 _amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function getRealBalance(address _token) external returns (uint256);\r\n\r\n    function getRealLiquidity(address _token) external returns (uint256);\r\n\r\n    function getBalance(address _token) external view returns (uint256);\r\n\r\n    function getLiquidity(address _token) external view returns (uint256);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function tokenIsEnabled(address _underlyingToken)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n    event OwnerUpdate(address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(\r\n            msg.sender == newOwner,\r\n            \"AcceptOwnership: only new owner do this.\"\r\n        );\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_) public onlyOwner {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ncontract Dispatcher is DSAuth {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev List all handler contract address.\r\n     */\r\n    address[] public handlers;\r\n\r\n    address public defaultHandler;\r\n\r\n    /**\r\n     * @dev Deposit ratio of each handler contract.\r\n     *      Notice: the sum of all deposit ratio should be 1000000.\r\n     */\r\n    mapping(address => uint256) public proportions;\r\n\r\n    uint256 public constant totalProportion = 1000000;\r\n\r\n    /**\r\n     * @dev map: handlerAddress -> true/false,\r\n     *      Whether the handler has been added or not.\r\n     */\r\n    mapping(address => bool) public isHandlerActive;\r\n\r\n    /**\r\n     * @dev Set original handler contract and its depoist ratio.\r\n     *      Notice: the sum of all deposit ratio should be 1000000.\r\n     * @param _handlers The original support handler contract.\r\n     * @param _proportions The original depoist ratio of support handler.\r\n     */\r\n    constructor(address[] memory _handlers, uint256[] memory _proportions)\r\n        public\r\n    {\r\n        setHandlers(_handlers, _proportions);\r\n    }\r\n\r\n    /**\r\n     * @dev Sort handlers in descending order of the liquidity in each market.\r\n     * @param _data The data to sort, which are the handlers here.\r\n     * @param _left The index of data to start sorting.\r\n     * @param _right The index of data to end sorting.\r\n     * @param _token Asset address.\r\n     */\r\n    function sortByLiquidity(\r\n        address[] memory _data,\r\n        int256 _left,\r\n        int256 _right,\r\n        address _token\r\n    ) internal {\r\n        int256 i = _left;\r\n        int256 j = _right;\r\n        if (i == j) return;\r\n\r\n        uint256 _pivot = IHandler(_data[uint256(_left + (_right - _left) / 2)])\r\n            .getRealLiquidity(_token);\r\n        while (i <= j) {\r\n            while (\r\n                IHandler(_data[uint256(i)]).getRealLiquidity(_token) > _pivot\r\n            ) i++;\r\n            while (\r\n                _pivot > IHandler(_data[uint256(j)]).getRealLiquidity(_token)\r\n            ) j--;\r\n            if (i <= j) {\r\n                (_data[uint256(i)], _data[uint256(j)]) = (\r\n                    _data[uint256(j)],\r\n                    _data[uint256(i)]\r\n                );\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (_left < j) sortByLiquidity(_data, _left, j, _token);\r\n        if (i < _right) sortByLiquidity(_data, i, _right, _token);\r\n    }\r\n\r\n    /************************/\r\n    /*** Admin Operations ***/\r\n    /************************/\r\n\r\n    /**\r\n     * @dev Replace current handlers with _handlers and corresponding _proportions,\r\n     * @param _handlers The list of new handlers, the 1st one will act as default hanlder.\r\n     * @param _proportions The list of corresponding proportions.\r\n     */\r\n    function setHandlers(\r\n        address[] memory _handlers,\r\n        uint256[] memory _proportions\r\n    ) private {\r\n        require(\r\n            _handlers.length == _proportions.length && _handlers.length > 0,\r\n            \"setHandlers: handlers & proportions should not have 0 or different lengths\"\r\n        );\r\n\r\n        // The 1st will act as the default handler.\r\n        defaultHandler = _handlers[0];\r\n\r\n        uint256 _sum = 0;\r\n        for (uint256 i = 0; i < _handlers.length; i++) {\r\n            require(\r\n                _handlers[i] != address(0),\r\n                \"setHandlers: handler address invalid\"\r\n            );\r\n\r\n            // Do not allow to set the same handler twice\r\n            require(\r\n                !isHandlerActive[_handlers[i]],\r\n                \"setHandlers: handler address already exists\"\r\n            );\r\n\r\n            _sum = _sum.add(_proportions[i]);\r\n\r\n            handlers.push(_handlers[i]);\r\n            proportions[_handlers[i]] = _proportions[i];\r\n            isHandlerActive[_handlers[i]] = true;\r\n        }\r\n\r\n        // The sum of proportions should be 1000000.\r\n        require(\r\n            _sum == totalProportion,\r\n            \"the sum of proportions must be 1000000\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update proportions of the handlers.\r\n     * @param _handlers List of the handlers to update.\r\n     * @param _proportions List of the corresponding proportions to update.\r\n     */\r\n    function updateProportions(\r\n        address[] memory _handlers,\r\n        uint256[] memory _proportions\r\n    ) public auth {\r\n        require(\r\n            _handlers.length == _proportions.length &&\r\n                handlers.length == _proportions.length,\r\n            \"updateProportions: handlers & proportions must match the current length\"\r\n        );\r\n\r\n        uint256 _sum = 0;\r\n        for (uint256 i = 0; i < _proportions.length; i++) {\r\n            for (uint256 j = 0; j < i; j++) {\r\n                require(\r\n                    _handlers[i] != _handlers[j],\r\n                    \"updateProportions: input handler contract address is duplicate\"\r\n                );\r\n            }\r\n            require(\r\n                isHandlerActive[_handlers[i]],\r\n                \"updateProportions: the handler contract address does not exist\"\r\n            );\r\n            _sum = _sum.add(_proportions[i]);\r\n\r\n            proportions[_handlers[i]] = _proportions[i];\r\n        }\r\n\r\n        // The sum of `proportions` should be 1000000.\r\n        require(\r\n            _sum == totalProportion,\r\n            \"the sum of proportions must be 1000000\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Add new handler.\r\n     *      Notice: the corresponding proportion of the new handler is 0.\r\n     * @param _handlers List of the new handlers to add.\r\n     */\r\n    function addHandlers(address[] memory _handlers) public auth {\r\n        for (uint256 i = 0; i < _handlers.length; i++) {\r\n            require(\r\n                !isHandlerActive[_handlers[i]],\r\n                \"addHandlers: handler address already exists\"\r\n            );\r\n            require(\r\n                _handlers[i] != address(0),\r\n                \"addHandlers: handler address invalid\"\r\n            );\r\n\r\n            handlers.push(_handlers[i]);\r\n            proportions[_handlers[i]] = 0;\r\n            isHandlerActive[_handlers[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reset handlers and corresponding proportions, will delete the old ones.\r\n     * @param _handlers The list of new handlers.\r\n     * @param _proportions the list of corresponding proportions.\r\n     */\r\n    function resetHandlers(\r\n        address[] calldata _handlers,\r\n        uint256[] calldata _proportions\r\n    ) external auth {\r\n        address[] memory _oldHandlers = handlers;\r\n        for (uint256 i = 0; i < _oldHandlers.length; i++) {\r\n            delete proportions[_oldHandlers[i]];\r\n            delete isHandlerActive[_oldHandlers[i]];\r\n        }\r\n        defaultHandler = address(0);\r\n        delete handlers;\r\n\r\n        setHandlers(_handlers, _proportions);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the default handler.\r\n     * @param _defaultHandler The default handler to update.\r\n     */\r\n    function updateDefaultHandler(address _defaultHandler) public auth {\r\n        require(\r\n            _defaultHandler != address(0),\r\n            \"updateDefaultHandler: New defaultHandler should not be zero address\"\r\n        );\r\n\r\n        address _oldDefaultHandler = defaultHandler;\r\n        require(\r\n            _defaultHandler != _oldDefaultHandler,\r\n            \"updateDefaultHandler: Old and new address cannot be the same.\"\r\n        );\r\n\r\n        handlers[0] = _defaultHandler;\r\n        proportions[_defaultHandler] = proportions[_oldDefaultHandler];\r\n        isHandlerActive[_defaultHandler] = true;\r\n\r\n        delete proportions[_oldDefaultHandler];\r\n        delete isHandlerActive[_oldDefaultHandler];\r\n\r\n        defaultHandler = _defaultHandler;\r\n    }\r\n\r\n    /***********************/\r\n    /*** User Operations ***/\r\n    /***********************/\r\n\r\n    /**\r\n     * @dev Query the current handlers and the corresponding proportions.\r\n     * @return Return two arrays, the current handlers,\r\n     *         and the corresponding proportions.\r\n     */\r\n    function getHandlers()\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory _handlers = handlers;\r\n        uint256[] memory _proportions = new uint256[](_handlers.length);\r\n        for (uint256 i = 0; i < _proportions.length; i++)\r\n            _proportions[i] = proportions[_handlers[i]];\r\n\r\n        return (_handlers, _proportions);\r\n    }\r\n\r\n    /**\r\n     * @dev According to the proportion, calculate deposit amount for each handler.\r\n     * @param _amount The amount to deposit.\r\n     * @return Return two arrays, the current handlers,\r\n     *         and the corresponding deposit amounts.\r\n     */\r\n    function getDepositStrategy(uint256 _amount)\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory _handlers = handlers;\r\n\r\n        uint256[] memory _amounts = new uint256[](_handlers.length);\r\n\r\n        uint256 _sum = 0;\r\n        uint256 _res = _amount;\r\n        uint256 _lastIndex = _amounts.length.sub(1);\r\n        for (uint256 i = 0; ; i++) {\r\n            // Return empty strategy if any handler is paused for abnormal case,\r\n            // resulting further failure with mint and burn\r\n            if (IHandler(_handlers[i]).paused()) {\r\n                delete _handlers;\r\n                delete _amounts;\r\n                break;\r\n            }\r\n\r\n            // The last handler gets the remaining amount without check proportion.\r\n            if (i == _lastIndex) {\r\n                _amounts[i] = _res.sub(_sum);\r\n                break;\r\n            }\r\n\r\n            // Calculate deposit amount according to the proportion,\r\n            _amounts[i] = _res.mul(proportions[_handlers[i]]) / totalProportion;\r\n\r\n            _sum = _sum.add(_amounts[i]);\r\n        }\r\n\r\n        return (_handlers, _amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Provide a strategy to withdraw, now sort handlers in descending order of the liquidity.\r\n     * @param _token The token to withdraw.\r\n     * @param _amount The amount to withdraw, including exchange fees between tokens.\r\n     * @return Return two arrays, the handlers,\r\n     *         and the corresponding withdraw amount.\r\n     */\r\n    function getWithdrawStrategy(address _token, uint256 _amount)\r\n        external\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory _handlers = handlers;\r\n        // Sort handlers in descending order of the liquidity.\r\n        if (_handlers.length > 2)\r\n            sortByLiquidity(\r\n                _handlers,\r\n                int256(1),\r\n                int256(_handlers.length - 1),\r\n                _token\r\n            );\r\n\r\n        uint256[] memory _amounts = new uint256[](_handlers.length);\r\n        uint256 _balance;\r\n        uint256 _res = _amount;\r\n        uint256 _lastIndex = _amounts.length.sub(1);\r\n        for (uint256 i = 0; i < _handlers.length; i++) {\r\n            // Return empty strategy if any handler is paused for abnormal case,\r\n            // resulting further failure with mint and burn\r\n            if (IHandler(_handlers[i]).paused()) {\r\n                delete _handlers;\r\n                delete _amounts;\r\n                break;\r\n            }\r\n\r\n            // Continue to check whether all handlers are unpaused\r\n            if (_res == 0) continue;\r\n\r\n            if (i == _lastIndex) {\r\n                _amounts[i] = _res;\r\n                break;\r\n            }\r\n\r\n            // The maximum amount can be withdrown from market.\r\n            _balance = IHandler(_handlers[i]).getRealLiquidity(_token);\r\n            _amounts[i] = _balance > _res ? _res : _balance;\r\n            _res = _res.sub(_amounts[i]);\r\n        }\r\n\r\n        return (_handlers, _amounts);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_handlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proportions\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_handlers\",\"type\":\"address[]\"}],\"name\":\"addHandlers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getDepositStrategy\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHandlers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getWithdrawStrategy\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"handlers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandlerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proportions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_handlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proportions\",\"type\":\"uint256[]\"}],\"name\":\"resetHandlers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultHandler\",\"type\":\"address\"}],\"name\":\"updateDefaultHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_handlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proportions\",\"type\":\"uint256[]\"}],\"name\":\"updateProportions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Dispatcher","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000885dd179c76ee5949b9053f1958ba3a91e4cf592000000000000000000000000bcdd2a069a46e9b5d032d2f99725418508ce6aee000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000dbba0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://91103d7e9a55b54b57b0c90b5a6557ef63eb0ebfd75becac5ea926e36d3024a4"}]}