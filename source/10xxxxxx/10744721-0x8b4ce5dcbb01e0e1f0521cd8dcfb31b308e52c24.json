{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// IlkRegistry.sol -- Publicly updatable ilk registry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\ninterface JoinLike {\r\n  function vat()          external view returns (address);\r\n  function ilk()          external view returns (bytes32);\r\n  function gem()          external view returns (address);\r\n  function dec()          external view returns (uint256);\r\n  function live()         external view returns (uint256);\r\n}\r\n\r\ninterface VatLike {\r\n  function wards(address) external view returns (uint256);\r\n  function live()         external view returns (uint256);\r\n}\r\n\r\ninterface CatLike {\r\n  function vat()          external view returns (address);\r\n  function live()         external view returns (uint256);\r\n  function ilks(bytes32)  external view returns (address, uint256, uint256);\r\n}\r\n\r\ninterface FlipLike {\r\n  function vat()          external view returns (address);\r\n  function cat()          external view returns (address);\r\n}\r\n\r\ninterface SpotLike {\r\n  function live()         external view returns (uint256);\r\n  function vat()          external view returns (address);\r\n  function ilks(bytes32)  external view returns (address, uint256);\r\n}\r\n\r\ninterface TokenLike {\r\n    function name()       external view returns (string memory);\r\n    function symbol()     external view returns (string memory);\r\n}\r\n\r\ncontract GemInfo {\r\n    function name(address token) external view returns (string memory) {\r\n        return TokenLike(token).name();\r\n    }\r\n\r\n    function symbol(address token) external view returns (string memory) {\r\n        return TokenLike(token).symbol();\r\n    }\r\n}\r\n\r\ncontract IlkRegistry {\r\n\r\n    event Rely(address usr);\r\n    event Deny(address usr);\r\n    event AddIlk(bytes32 ilk);\r\n    event RemoveIlk(bytes32 ilk);\r\n    event UpdateIlk(bytes32 ilk);\r\n    event NameError(bytes32 ilk);\r\n    event SymbolError(bytes32 ilk);\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\r\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"IlkRegistry/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    VatLike  public immutable vat;\r\n    GemInfo  private immutable gemInfo;\r\n\r\n    CatLike  public cat;\r\n    SpotLike public spot;\r\n\r\n    struct Ilk {\r\n        uint256 pos;   // Index in ilks array\r\n        address gem;   // The token contract\r\n        address pip;   // Token price\r\n        address join;  // DSS GemJoin adapter\r\n        address flip;  // Auction contract\r\n        uint256 dec;   // Token decimals\r\n        string name;   // Token name\r\n        string symbol; // Token symbol\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilkData;\r\n    bytes32[] ilks;\r\n\r\n    // Initialize the registry\r\n    constructor(address vat_, address cat_, address spot_) public {\r\n\r\n        VatLike _vat = vat = VatLike(vat_);\r\n        cat = CatLike(cat_);\r\n        spot = SpotLike(spot_);\r\n\r\n        require(cat.vat() == vat_, \"IlkRegistry/invalid-cat-vat\");\r\n        require(spot.vat() == vat_, \"IlkRegistry/invalid-spotter-vat\");\r\n        require(_vat.wards(cat_) == 1, \"IlkRegistry/cat-not-authorized\");\r\n        require(_vat.wards(spot_) == 1, \"IlkRegistry/spot-not-authorized\");\r\n        require(_vat.live() == 1, \"IlkRegistry/vat-not-live\");\r\n        require(cat.live() == 1, \"IlkRegistry/cat-not-live\");\r\n        require(spot.live() == 1, \"IlkRegistry/spot-not-live\");\r\n\r\n        gemInfo = new GemInfo();\r\n\r\n        wards[msg.sender] = 1;\r\n    }\r\n\r\n    // Pass an active join adapter to the registry to add it to the set\r\n    function add(address adapter) external {\r\n        JoinLike join = JoinLike(adapter);\r\n\r\n        // Validate adapter\r\n        require(join.vat() == address(vat), \"IlkRegistry/invalid-join-adapter-vat\");\r\n        require(vat.wards(address(join)) == 1, \"IlkRegistry/adapter-not-authorized\");\r\n\r\n        // Validate ilk\r\n        bytes32 _ilk = join.ilk();\r\n        require(_ilk != 0, \"IlkRegistry/ilk-adapter-invalid\");\r\n        require(ilkData[_ilk].join == address(0), \"IlkRegistry/ilk-already-exists\");\r\n\r\n        (address _pip,) = spot.ilks(_ilk);\r\n        require(_pip != address(0), \"IlkRegistry/pip-invalid\");\r\n\r\n        (address _flip,,) = cat.ilks(_ilk);\r\n        require(_flip != address(0), \"IlkRegistry/flip-invalid\");\r\n        require(FlipLike(_flip).cat() == address(cat), \"IlkRegistry/flip-wrong-cat\");\r\n        require(FlipLike(_flip).vat() == address(vat), \"IlkRegistry/flip-wrong-vat\");\r\n\r\n        string memory name = bytes32ToStr(_ilk);\r\n        try gemInfo.name(join.gem()) returns (string memory _name) {\r\n            if (bytes(_name).length != 0) {\r\n                name = _name;\r\n            }\r\n        } catch {\r\n            emit NameError(_ilk);\r\n        }\r\n\r\n        string memory symbol = bytes32ToStr(_ilk);\r\n        try gemInfo.symbol(join.gem()) returns (string memory _symbol) {\r\n            if (bytes(_symbol).length != 0) {\r\n                symbol = _symbol;\r\n            }\r\n        } catch {\r\n            emit SymbolError(_ilk);\r\n        }\r\n\r\n        ilks.push(_ilk);\r\n        ilkData[ilks[ilks.length - 1]] = Ilk(\r\n            ilks.length - 1,\r\n            join.gem(),\r\n            _pip,\r\n            address(join),\r\n            _flip,\r\n            join.dec(),\r\n            name,\r\n            symbol\r\n        );\r\n\r\n        emit AddIlk(_ilk);\r\n    }\r\n\r\n    // Anyone can remove an ilk if the adapter has been caged\r\n    function remove(bytes32 ilk) external {\r\n        JoinLike join = JoinLike(ilkData[ilk].join);\r\n        require(address(join) != address(0), \"IlkRegistry/invalid-ilk\");\r\n        require(join.live() == 0, \"IlkRegistry/ilk-live\");\r\n        _remove(ilk);\r\n        emit RemoveIlk(ilk);\r\n    }\r\n\r\n    // Admin can remove an ilk without any precheck\r\n    function removeAuth(bytes32 ilk) external auth {\r\n        _remove(ilk);\r\n        emit RemoveIlk(ilk);\r\n    }\r\n\r\n    // Authed edit function\r\n    function file(bytes32 what, address data) external auth {\r\n        if (what == \"cat\")  cat  = CatLike(data);\r\n        else if (what == \"spot\") spot = SpotLike(data);\r\n        else revert(\"IlkRegistry/file-unrecognized-param-address\");\r\n    }\r\n\r\n    // Authed edit function\r\n    function file(bytes32 ilk, bytes32 what, address data) external auth {\r\n        if (what == \"gem\")       ilkData[ilk].gem  = data;\r\n        else if (what == \"join\") ilkData[ilk].join = data;\r\n        else revert(\"IlkRegistry/file-unrecognized-param-address\");\r\n    }\r\n\r\n    // Authed edit function\r\n    function file(bytes32 ilk, bytes32 what, uint256 data) external auth {\r\n        if (what == \"dec\")       ilkData[ilk].dec  = data;\r\n        else revert(\"IlkRegistry/file-unrecognized-param-uint256\");\r\n    }\r\n\r\n    // Authed edit function\r\n    function file(bytes32 ilk, bytes32 what, string calldata data) external auth {\r\n        if (what == \"name\")        ilkData[ilk].name   = data;\r\n        else if (what == \"symbol\") ilkData[ilk].symbol = data;\r\n        else revert(\"IlkRegistry/file-unrecognized-param-string\");\r\n    }\r\n\r\n    // Remove ilk from the ilks array by replacing the ilk with the\r\n    //  last in the array and then trimming the end.\r\n    function _remove(bytes32 ilk) internal {\r\n        // Get the position in the array\r\n        uint256 _index = ilkData[ilk].pos;\r\n        // Get the last ilk in the array\r\n        bytes32 _moveIlk = ilks[ilks.length - 1];\r\n        // Replace the ilk we are removing\r\n        ilks[_index] = _moveIlk;\r\n        // Update the array position for the moved ilk\r\n        ilkData[_moveIlk].pos = _index;\r\n        // Trim off the end of the ilks array\r\n        ilks.pop();\r\n        // Delete struct data\r\n        delete ilkData[ilk];\r\n    }\r\n\r\n    // The number of active ilks\r\n    function count() external view returns (uint256) {\r\n        return ilks.length;\r\n    }\r\n\r\n    // Return an array of the available ilks\r\n    function list() external view returns (bytes32[] memory) {\r\n        return ilks;\r\n    }\r\n\r\n    // Get a splice of the available ilks, useful when ilks array is large.\r\n    function list(uint256 start, uint256 end) external view returns (bytes32[] memory) {\r\n        require(start <= end && end < ilks.length, \"IlkRegistry/invalid-input\");\r\n        bytes32[] memory _ilks = new bytes32[]((end - start) + 1);\r\n        uint256 _count = 0;\r\n        for (uint256 i = start; i <= end; i++) {\r\n            _ilks[_count] = ilks[i];\r\n            _count++;\r\n        }\r\n        return _ilks;\r\n    }\r\n\r\n    // Get the ilk at a specific position in the array\r\n    function get(uint256 pos) external view returns (bytes32) {\r\n        require(pos < ilks.length);\r\n        return ilks[pos];\r\n    }\r\n\r\n    // Get information about an ilk, including name and symbol\r\n    function info(bytes32 ilk) external view returns (\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 dec,\r\n        address gem,\r\n        address pip,\r\n        address join,\r\n        address flip\r\n    ) {\r\n        Ilk memory _ilk = ilkData[ilk];\r\n        return (\r\n            _ilk.name,\r\n            _ilk.symbol,\r\n            _ilk.dec,\r\n            _ilk.gem,\r\n            _ilk.pip,\r\n            _ilk.join,\r\n            _ilk.flip\r\n        );\r\n    }\r\n\r\n    // The location of the ilk in the ilks array\r\n    function pos(bytes32 ilk) external view returns (uint256) {\r\n        return ilkData[ilk].pos;\r\n    }\r\n\r\n    // The token address\r\n    function gem(bytes32 ilk) external view returns (address) {\r\n        return ilkData[ilk].gem;\r\n    }\r\n\r\n    // The ilk's price feed\r\n    function pip(bytes32 ilk) external view returns (address) {\r\n        return ilkData[ilk].pip;\r\n    }\r\n\r\n    // The ilk's join adapter\r\n    function join(bytes32 ilk) external view returns (address) {\r\n        return ilkData[ilk].join;\r\n    }\r\n\r\n    // The flipper for the ilk\r\n    function flip(bytes32 ilk) external view returns (address) {\r\n        return ilkData[ilk].flip;\r\n    }\r\n\r\n    // The number of decimals on the ilk\r\n    function dec(bytes32 ilk) external view returns (uint256) {\r\n        return ilkData[ilk].dec;\r\n    }\r\n\r\n    // Return the symbol of the token, if available\r\n    function symbol(bytes32 ilk) external view returns (string memory) {\r\n        return ilkData[ilk].symbol;\r\n    }\r\n\r\n    // Return the name of the token, if available\r\n    function name(bytes32 ilk) external view returns (string memory) {\r\n        return ilkData[ilk].name;\r\n    }\r\n\r\n    // Public function to update an ilk's pip and flip if the ilk has been updated.\r\n    function update(bytes32 ilk) external {\r\n        require(JoinLike(ilkData[ilk].join).vat() == address(vat), \"IlkRegistry/invalid-ilk\");\r\n        require(JoinLike(ilkData[ilk].join).live() == 1, \"IlkRegistry/ilk-not-live-use-remove-instead\");\r\n\r\n        (address _pip,) = spot.ilks(ilk);\r\n        require(_pip != address(0), \"IlkRegistry/pip-invalid\");\r\n\r\n        (address _flip,,) = cat.ilks(ilk);\r\n        require(_flip != address(0), \"IlkRegistry/flip-invalid\");\r\n        require(FlipLike(_flip).cat() == address(cat), \"IlkRegistry/flip-wrong-cat\");\r\n        require(FlipLike(_flip).vat() == address(vat), \"IlkRegistry/flip-wrong-vat\");\r\n\r\n        ilkData[ilk].pip   = _pip;\r\n        ilkData[ilk].flip  = _flip;\r\n        emit UpdateIlk(ilk);\r\n    }\r\n\r\n    function bytes32ToStr(bytes32 _bytes32) internal pure returns (string memory) {\r\n        bytes memory bytesArray = new bytes(32);\r\n        for (uint256 i; i < 32; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spot_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"AddIlk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"NameError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"RemoveIlk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"SymbolError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"UpdateIlk\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cat\",\"outputs\":[{\"internalType\":\"contract CatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"dec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"flip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ilkData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dec\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pip\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flip\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"pip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"pos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"removeAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spot\",\"outputs\":[{\"internalType\":\"contract SpotLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IlkRegistry","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b00000000000000000000000078f2c2af65126834c51822f56be0d7469d7a523e00000000000000000000000065c79fcb50ca1594b025960e539ed7a9a6d434a3","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e6274d726cca3f3928cb4f29410eed56dc9dd6ac0c8391345b08a8990534c936"}]}