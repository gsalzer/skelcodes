{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    \r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  \r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public Admininstrator;\r\n\r\n  constructor() public {Admininstrator = msg.sender;}\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == Admininstrator, \"Only authorized personnels\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract PUBLICWHITELISTING is Owned{\r\n    \r\n    \r\n  using SafeMath for uint;\r\n  \r\n \r\n  address public sellingtoken;\r\n  address public conditiontoken;\r\n  \r\n  \r\n  address payable saleswallet;\r\n  bool public whiteliststatus = true;\r\n  bool public retrievalState = false;\r\n  uint public _conditionAmount = 20000000000000000000;\r\n  uint decimal = 10**18;\r\n  uint public retrievalqtty = 18000000000000000000;\r\n  \r\n  mapping(address => bool) public whitelist;\r\n\r\n \r\n  \r\n\r\n \r\n  constructor() public { Admininstrator = msg.sender; }\r\n   \r\n //========================================CONFIGURATIONS======================================\r\n \r\n function setSalesWallet(address payable _salewallet) public onlyAdmin{saleswallet = _salewallet;}\r\n function sellingToken(address _tokenaddress) public onlyAdmin{sellingtoken = _tokenaddress;}\r\n \r\n function conditionTokenAddress(address _tokenaddress) public onlyAdmin{conditiontoken = _tokenaddress;}\r\n function whitelistStatus(bool _status) public onlyAdmin{whiteliststatus = _status;}\r\n //function AllowSales(bool _status) public onlyAdmin{startSales = _status;}\r\n function conditionTokenQuantity(uint _quantity) public onlyAdmin{_conditionAmount = _quantity;}\r\n\r\n function Allowretrieval(bool _status) public onlyAdmin{retrievalState = _status;}\r\n function Retrievalqtty(uint256 _qttytoretrieve) public onlyAdmin{retrievalqtty = _qttytoretrieve;}\r\n \r\n \r\n//  function minbuy(uint _minbuyinGwei) public onlyAdmin{minBuy = _minbuyinGwei;}\r\n// function maxbuy(uint _maxbuyinGwei) public onlyAdmin{maxBuy = _maxbuyinGwei;}\r\n\t\r\n\t\r\n  \r\n  function whitelisting() public returns(bool){\r\n    \r\n    require(whiteliststatus == true, \"Whitelisting is closed\");\r\n    require(whitelist[msg.sender] == false, \"You have already whitelisted\");\r\n    require(ERC20Interface(conditiontoken).allowance(msg.sender, address(this)) >= _conditionAmount, \"Inadequate allowance given to contract by you\");\r\n    require(ERC20Interface(conditiontoken).balanceOf(msg.sender) >= _conditionAmount, \"You do not have sufficient amount of the condition token\");\r\n    ERC20Interface(conditiontoken).transferFrom(msg.sender, address(this), _conditionAmount);\r\n    whitelist[msg.sender] = true;\r\n   \r\n    \r\n    return true;\r\n    \r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  function isWhitelisted(address _address) public view returns(bool){return whitelist[_address];}\r\n  \r\n  \r\n  function retrieval() public returns(bool){\r\n    \r\n    require(retrievalState == true, \"retrieval is not yet allowed\");\r\n    require(whitelist[msg.sender] == true, \"You did not whitelist or have already retrieved\");\r\n    \r\n    require(ERC20Interface(conditiontoken).balanceOf(address(this)) >= retrievalqtty, \"Insufficient token in contract\");\r\n    whitelist[msg.sender] = false;\r\n    require(ERC20Interface(conditiontoken).transfer(msg.sender, retrievalqtty), \"Transaction failed\");\r\n    \r\n    return true;\r\n    \r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  function Abinitio() public onlyAdmin returns(bool){\r\n      \r\n      saleswallet.transfer(address(this).balance);\r\n  }\r\n  \r\n  function AbinitioToken() public onlyAdmin returns(bool){\r\n      \r\n      uint bal = ERC20Interface(sellingtoken).balanceOf(address(this));\r\n      require(ERC20Interface(sellingtoken).transfer(saleswallet, bal), \"Transaction failed\");\r\n      \r\n  }\r\n  \r\n  function AbinitioToken2() public onlyAdmin returns(bool){\r\n      \r\n      uint bal = ERC20Interface(conditiontoken).balanceOf(address(this));\r\n      require(ERC20Interface(conditiontoken).transfer(saleswallet, bal), \"Transaction failed\");\r\n      \r\n  }\r\n  \r\n \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"Abinitio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AbinitioToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AbinitioToken2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admininstrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Allowretrieval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qttytoretrieve\",\"type\":\"uint256\"}],\"name\":\"Retrievalqtty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_conditionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"conditionTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"conditionTokenQuantity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conditiontoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retrievalState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retrievalqtty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"sellingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_salewallet\",\"type\":\"address\"}],\"name\":\"setSalesWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelistStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"whitelisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteliststatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PUBLICWHITELISTING","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://740a82b432691bc7b5fb3ea3f4583203ed2c06bcf7ca48185cb2a72bfea94310"}]}