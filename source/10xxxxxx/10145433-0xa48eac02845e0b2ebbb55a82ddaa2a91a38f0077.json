{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    bool public active;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        manager = 0x8E968988807b41b317BbA732435723f25221E955;\r\n        active = (owner == manager);\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"2002\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(\r\n            (msg.sender == owner) || (msg.sender == manager),\r\n            \"2003\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwner(address newOwner) public onlyManager {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function transferManager(address _manager) public onlyManager {\r\n        manager = _manager;\r\n    }\r\n\r\n    function transferActive(bool _active) public onlyManager {\r\n      active = _active;\r\n    }\r\n\r\n    function kill() public onlyOwnerOrManager { \r\n        selfdestruct(address(uint160(manager)));\r\n    }\r\n}\r\n\r\ncontract Ceres is Ownable {\r\n    event registerEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _userid,\r\n        uint256 _referrerid,\r\n        uint256 _time,\r\n        uint256 _expired\r\n    );\r\n    event buyEvent(\r\n        address indexed _user,\r\n        uint256 _userid,\r\n        uint256 _time,\r\n        uint256 _expired\r\n    );\r\n\r\n    event withdrawEvent(\r\n        address indexed _user,\r\n        uint256 _amound\r\n    );\r\n\r\n    uint256 REFERRER_1_LEVEL_LIMIT = 5;\r\n    uint256 PERIOD_LENGTH = 365 days;\r\n    uint256 LEVEL_PRICE = 1 ether;\r\n    uint256 ACTIVE_PRICE = 5 ether;\r\n    uint256[5] DISTRIBUTION=[10,15,20,25,30];\r\n    \r\n\r\n    struct UserStruct {\r\n      bool isExist;\r\n      uint256 id;\r\n      uint256 referrerID; \r\n      address[] referral; \r\n      uint256 expired; \r\n      uint256 recommend;\r\n      uint256 amount;\r\n      uint256 paid;\r\n    }\r\n\r\n\r\n    mapping(address => UserStruct) public users;\r\n    mapping(uint256 => address) public userList;\r\n    uint256 public currUserID = 0;\r\n    uint256 public tradingTotal = 0;\r\n    uint256 public etherTotal = 0;\r\n    uint256 public createTime = 0;\r\n    uint256 public seedIndex = 0;\r\n\r\n    constructor(uint256 _days, uint256 _level_price,uint256 _active_price,uint256[5] memory _distribution) public {\r\n      require(_days > 0 && _days <= 3650, \"2004\");\r\n      ACTIVE_PRICE = _active_price;\r\n      PERIOD_LENGTH = _days * 1 days;\r\n      LEVEL_PRICE = _level_price;\r\n      \r\n      uint256 _total = 0;\r\n      for(uint i = 0; i < 5; i++) {\r\n          if(_distribution[i]>0){\r\n              _total+=_distribution[i];\r\n          }else{\r\n              _total = 0;\r\n              break;\r\n          }\r\n      }\r\n      if(_total!=100){\r\n          revert(\"2020\");\r\n      }\r\n      DISTRIBUTION = _distribution;\r\n      \r\n      \r\n      UserStruct memory userStruct;\r\n      currUserID++;\r\n\r\n      userStruct = UserStruct({\r\n          isExist: true,\r\n          id: currUserID,\r\n          referrerID: 0,\r\n          referral: new address[](0),\r\n          expired:32503680000,\r\n          recommend:0,\r\n          amount:0,\r\n          paid:0\r\n      });\r\n      users[msg.sender] = userStruct;\r\n      userList[currUserID] = msg.sender;\r\n\r\n      createTime=now;\r\n      active = (msg.sender==manager);\r\n    }\r\n\r\n    function() external payable {\r\n        address sender = msg.sender;\r\n        if(active==false && ACTIVE_PRICE==msg.value){\r\n          address(uint160(manager)).transfer(msg.value);\r\n          active = true;\r\n          return;\r\n        }\r\n        require(msg.value == LEVEL_PRICE, \"2006\");\r\n        if (users[sender].isExist) {\r\n            buyLevel(sender);\r\n        } else {\r\n            uint256 refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (users[referrer].isExist) {\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert(\"2009\");\r\n            }\r\n            registerLevel(refId, sender);\r\n        }\r\n        tradingTotal++;\r\n    }\r\n\r\n    function registerLevel(uint256 _referrer, address _user)\r\n        public\r\n        payable\r\n    {\r\n        require(!users[_user].isExist, \"2010\");\r\n        require(\r\n            _referrer > 0 && _referrer <= currUserID,\r\n            \"2011\"\r\n        );\r\n        require(msg.value == LEVEL_PRICE, \"2008\");\r\n\r\n        uint256 originalReferrer = _referrer;\r\n        if (\r\n            users[userList[_referrer]].referral.length >= REFERRER_1_LEVEL_LIMIT\r\n        ) {\r\n            _referrer = users[findFreeReferrer(userList[_referrer])].id;\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        uint256 expired = now + PERIOD_LENGTH;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrer,\r\n            referral: new address[](0),\r\n            expired:expired,\r\n            recommend:0,\r\n            amount:0,\r\n            paid:0\r\n        });\r\n        \r\n        users[_user] = userStruct;\r\n        userList[currUserID] = _user;\r\n        \r\n        users[userList[_referrer]].referral.push(_user);\r\n        users[userList[originalReferrer]].recommend +=1;\r\n        payForLevel(_user);\r\n        emit registerEvent(\r\n            _user,\r\n            userList[_referrer],\r\n            userStruct.id,\r\n            userStruct.referrerID,\r\n            now,\r\n            expired\r\n        );\r\n    }\r\n\r\n    function buyLevel(address _user) public payable {\r\n        require(users[_user].isExist, \"2012\");\r\n        require(msg.value == LEVEL_PRICE, \"2008\");\r\n        uint256 expired = users[_user].expired;\r\n        if (expired < now) {\r\n            expired = now;\r\n        }\r\n        expired += PERIOD_LENGTH;\r\n        users[_user].expired = expired;\r\n        \r\n        payForLevel(_user);\r\n        emit buyEvent(_user, users[_user].id, now, expired);\r\n    }\r\n\r\n    function buyHelp(address _target)\r\n        external\r\n        payable\r\n    {\r\n        require(msg.value == LEVEL_PRICE, \"2008\");\r\n        if (users[_target].isExist) {\r\n            buyLevel(_target);\r\n        }else{\r\n            uint256 refId = 0;\r\n            if (users[msg.sender].isExist) {\r\n                refId = users[msg.sender].id;\r\n            } else {\r\n                revert(\"2009\");\r\n            }\r\n            registerLevel(refId, _target);\r\n        }\r\n        tradingTotal++;\r\n    }\r\n\r\n    function payForLevel(address _user) internal {\r\n      address[] memory referrers=new address[](5);\r\n      referrers[0]=findReferrer(_user);\r\n      referrers[1]=findReferrer(referrers[0]);\r\n      referrers[2]=findReferrer(referrers[1]);\r\n      referrers[3]=findReferrer(referrers[2]);\r\n      referrers[4]=findReferrer(referrers[3]);\r\n      \r\n      uint256 toManager=0;\r\n      for(uint256 i=0;i<referrers.length;i++){\r\n        address _addr=referrers[i];\r\n        uint256 value = SafeMath.div(SafeMath.mul(LEVEL_PRICE,DISTRIBUTION[i]),100);\r\n        if(active==false && _addr==userList[1]){\r\n            toManager+=value;\r\n        }else{\r\n            users[_addr].amount=SafeMath.add(users[_addr].amount,value);\r\n        }\r\n      }\r\n      if(toManager>0){\r\n          address(uint160(manager)).transfer(toManager);\r\n      }\r\n      etherTotal += msg.value;\r\n    }\r\n\r\n    function withdraw()\r\n        external\r\n        payable\r\n    {\r\n        uint256 amount = users[msg.sender].amount;\r\n        require(users[msg.sender].isExist,\"2012\");\r\n        require(amount>0,\"2018\");\r\n        require(address(this).balance>=amount,\"2019\");\r\n        users[msg.sender].paid=SafeMath.add(users[msg.sender].paid,amount);\r\n        users[msg.sender].amount=0;\r\n        address(uint160(msg.sender)).transfer(amount);\r\n        emit withdrawEvent(msg.sender,amount);\r\n    }\r\n\r\n    function findFreeReferrer(address _user)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        if (users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) {\r\n            return _user;\r\n        }\r\n        address[] memory referrals=new address[](11718);\r\n        for(uint256 i = 0; i < REFERRER_1_LEVEL_LIMIT; i++) {\r\n          referrals[i] = users[_user].referral[i];\r\n        }\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint256 i=0;i<referrals.length;i++){\r\n          if (users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n              if(i<3905){\r\n                for(uint256 j = 0; j < REFERRER_1_LEVEL_LIMIT; j++) {\r\n                    referrals[(i+1)*REFERRER_1_LEVEL_LIMIT+j] = users[referrals[i]].referral[j];\r\n                }\r\n              }\r\n          } else {\r\n              noFreeReferrer = false;\r\n              freeReferrer = referrals[i];\r\n              break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, \"2016\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function appendSeed(address _referrer,uint256 sum) external payable onlyManager {\r\n        require(users[_referrer].isExist,\"2009\");\r\n        require(tradingTotal==0,\"Not allowed to add\");\r\n        SeedContract sc = SeedContract(0xBEBE40605260F8716A18B3C5007b9113Ec65CE61);\r\n        address[] memory _seeds = sc.getList();\r\n        uint256 limit=sum+seedIndex;\r\n        require(_seeds.length>=limit,\"Alternate address exceeded\");\r\n\r\n        uint256 refId = 0;\r\n        \r\n        for(uint256 i=seedIndex;i<limit;i++){\r\n            uint256 n=i/5;\r\n            if(n==0){\r\n                refId = users[_referrer].id;\r\n            }else{\r\n                refId=users[_seeds[n-1]].id;\r\n            }\r\n            address _user=_seeds[i];\r\n            UserStruct memory userStruct;\r\n            currUserID++;\r\n\r\n            userStruct = UserStruct({\r\n                isExist: true,\r\n                id: currUserID,\r\n                referrerID: refId,\r\n                referral: new address[](0),\r\n                expired:0,\r\n                recommend:0,\r\n                amount:0,\r\n                paid:0\r\n            });\r\n            users[_user] = userStruct;\r\n            userList[currUserID] = _user;\r\n            users[userList[refId]].referral.push(_user);\r\n        }\r\n        seedIndex=limit;\r\n    }\r\n\r\n    function viewUserById(uint256 userid) \r\n        public\r\n        view\r\n        returns (uint256 id,address useraddr, uint256 referrerid, address referrer,address[] memory referrals, uint256 expired, uint256 recommend, uint256 amount,uint256 paid)\r\n    {\r\n        return viewUser(userList[userid]);\r\n    }\r\n\r\n    function viewUser(address _user)\r\n        public\r\n        view\r\n        returns (uint256 id,address useraddr, uint256 referrerid, address referrer,address[] memory referrals, uint256 expired, uint256 recommend, uint256 amount,uint256 paid)\r\n    {\r\n        id = users[_user].id;\r\n        referrerid = users[_user].referrerID;\r\n        recommend = users[_user].recommend;\r\n        amount = users[_user].amount;\r\n        paid = users[_user].paid;\r\n        if (referrerid > 0) {\r\n            referrer = userList[referrerid];\r\n        } else {\r\n            referrer = address(0);\r\n        }\r\n        expired = users[_user].expired;\r\n        referrals = users[_user].referral;\r\n        \r\n        return (id,_user, referrerid, referrer,referrals, expired, recommend, amount,paid);\r\n    }\r\n\r\n    function viewExists(address _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[_user].isExist;\r\n    }\r\n\r\n    function viewExistsById(uint256 _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userList[_user]].isExist;\r\n    }\r\n\r\n    function viewReferralsById(uint256 userid)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return viewReferrals(userList[userid]);\r\n    }\r\n\r\n    function viewReferrals(address _user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewSummary()\r\n        public\r\n        view\r\n        returns (address _owner,address _manager,uint256 user_sum,uint256 trading_sum,uint256 ether_sum,\r\n        bool active_status,uint256 cycle,uint256 create_time,uint256 price,uint256 active_price,uint256 balance)\r\n    {\r\n        _owner=owner;\r\n        _manager=manager;\r\n        user_sum=currUserID;\r\n        trading_sum=tradingTotal;\r\n        ether_sum=etherTotal;\r\n        active_status=active;\r\n        cycle=PERIOD_LENGTH / 1 days;\r\n        create_time=createTime;\r\n        price=LEVEL_PRICE;\r\n        active_price=ACTIVE_PRICE;\r\n        balance=address(this).balance;\r\n    }\r\n\r\n    function viewTest() public view returns (uint256 bb){\r\n        bb=etherTotal;\r\n    }\r\n\r\n    function findReferrer(address _user)\r\n        internal\r\n        returns (address ref)\r\n    {\r\n        uint256 _id = users[_user].referrerID;\r\n        if(_id==0){\r\n            ref = userList[1];\r\n        }else if(users[userList[_id]].expired>=now){\r\n            ref= userList[_id];\r\n        }else{\r\n            ref=findReferrer(userList[_id]);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    function test2() public view returns(uint256,uint256){\r\n        return (seedIndex,currUserID);\r\n    }\r\n}\r\n\r\ncontract SeedContract  {\r\n    function getList() public view returns(address[] memory);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_active_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"_distribution\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expired\",\"type\":\"uint256\"}],\"name\":\"buyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expired\",\"type\":\"uint256\"}],\"name\":\"registerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amound\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"appendSeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"buyHelp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"registerLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"transferActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewExistsById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"}],\"name\":\"viewReferralsById\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSummary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user_sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trading_sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ether_sum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"create_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"active_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"}],\"name\":\"viewUserById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Ceres","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000016d0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f84c728fe53899c3fad5f710333996e38ad7e9a2ee495cb31a32ff4beba833a8"}]}