{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface POWER {\r\n    \r\n   function scaledPower(uint amount) external returns(bool);\r\n   function totalPopping() external view returns (uint256);\r\n }\r\n\r\ninterface FIRE {\r\n\r\n    function balanceOf(address _user) external view returns (uint256); \r\n }\r\n \r\n \r\ncontract OPERATORS{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    //======================================EVENTS=========================================//\r\n    event POPCORNEvent(address indexed executioner, address indexed pool, uint amount);\r\n    event DITCHEvent(address indexed executioner, address indexed pool, uint amount);\r\n    event PooppingRewardEvent(address indexed executioner, address indexed pool, uint amount);\r\n\r\n   \r\n     //======================================OPERATORS VARS=========================================//\r\n    address public popcornToken;\r\n    address public power;\r\n    address public fireball;\r\n    \r\n    bool public _machineReady;\r\n    \r\n    uint256 constant private FLOAT_SCALAR = 2**64;\r\n    uint256 public MINIMUM_POP = 10000000000000000000;\r\n\tuint256 private MIN_POP_DUR = 10 days;\r\n\tuint256 public MIN_FIRE_TO_POP = 1000000000000000000;\r\n\tuint256 private  DITCH_FEE = 30; \r\n\tuint public infocheck;\r\n\tuint _burnedAmount;\r\n\tuint actualValue;\r\n    \r\n    struct User {\r\n        \r\n\t\tuint256 popslot;\r\n\t\tint256 scaledPayout;  \r\n\t\tuint256 poptime;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t    \r\n\t\tuint256 totalPopping;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledPayoutPerToken; //pool balance \r\n\t\taddress admin;\r\n\t}\r\n\t\r\n\tInfo private info;\r\n\tmapping(address => bool) whitelisted;\r\n\t\r\n\tconstructor() public {\r\n       \r\n\t    info.admin = msg.sender;\r\n\t\t_machineReady = true;\r\n\t\t\r\n\t}\r\n\t\r\n//======================================ADMINSTRATION=========================================//\r\n\r\n\tmodifier onlyCreator() {\r\n        require(msg.sender == info.admin, \"Ownable: caller is not the administrator\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlypopcornToken() {\r\n        require(msg.sender == popcornToken, \"Authorization: only token contract can call\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n\t function machinery(address _popcorn, address _power, address _fire) public onlyCreator returns (bool success) {\r\n        popcornToken = _popcorn;\r\n        power = _power;\r\n        fireball = _fire;\r\n        return true;\r\n    }\r\n    \r\n  \r\n    \r\n    function _whitelist(address _address) onlyCreator public {\r\n\t\t\r\n\t\twhitelisted[_address] = true;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\tfunction _minPopAmount(uint256 _number) onlyCreator public {\r\n\t\t\r\n\t\tMINIMUM_POP = _number*1000000000000000000;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction _minFIRE_TO_POP(uint256 _number) onlyCreator public {\r\n\t\t\r\n\t\tMIN_FIRE_TO_POP = _number*1000000000000000000;\r\n\t\t\r\n\t}\r\n    \r\n    function machineReady(bool _status) public onlyCreator {\r\n\t_machineReady = _status;\r\n    }\r\n    \r\n    function ditchFee(uint _rate) public onlyCreator returns (bool success) {\r\n        DITCH_FEE = _rate;\r\n        return true;\r\n    }\r\n    \r\n//======================================USER WRITE=========================================//\r\n\r\n\tfunction popCorns(uint256 _tokens) external {\r\n\t\t_popcorns(_tokens);\r\n\t}\r\n    \r\n    function DitchCorns(uint256 _tokens) external {\r\n\t\t_ditchcorns(_tokens);\r\n\t}\r\n\t\r\n//======================================USER READ=========================================//\r\n\r\n\tfunction totalPopping() public view returns (uint256) {\r\n\t\treturn info.totalPopping;\r\n\t}\r\n\t\r\n    function popslotOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].popslot;\r\n\t}\r\n\r\n\tfunction cornsOf(address _user) public view returns (uint256) {\r\n\t    \r\n\t   return uint256(int256(info.scaledPayoutPerToken * info.users[_user].popslot) - info.users[_user].scaledPayout) / FLOAT_SCALAR;   \r\n\t    \r\n\t}\r\n\t\r\n\r\n\tfunction userData(address _user) public view \r\n\treturns (uint256 totalCornsPopping, uint256 userpopslot, \r\n\tuint256 usercorns, uint256 userpoptime, int256 scaledPayout) {\r\n\t    \r\n\t\treturn (totalPopping(), popslotOf(_user), cornsOf(_user), info.users[_user].poptime, info.users[_user].scaledPayout);\r\n\t\r\n\t    \r\n\t}\r\n\t\r\n\r\n//======================================ACTION CALLS=========================================//\t\r\n\t\r\n\tfunction _popcorns(uint256 _amount) internal {\r\n\t    \r\n\t    require(_machineReady, \"Staking not yet initialized\");\r\n\t    require(FIRE(fireball).balanceOf(msg.sender) > MIN_FIRE_TO_POP, \"You do not have sufficient fire to pop this corn\");\r\n\t    \r\n\t\trequire(IERC20(popcornToken).balanceOf(msg.sender) >= _amount, \"Insufficient corn balance\");\r\n\t\trequire(popslotOf(msg.sender) + _amount >= MINIMUM_POP, \"Your amount is lower than the minimum amount allowed to stake\");\r\n\t\trequire(IERC20(popcornToken).allowance(msg.sender, address(this)) >= _amount, \"Not enough allowance given to contract yet to spend by user\");\r\n\t\t\r\n\t\tinfo.users[msg.sender].poptime = now;\r\n\t\tinfo.totalPopping += _amount;\r\n\t\tinfo.users[msg.sender].popslot += _amount;\r\n\t\t\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); \r\n\t\tIERC20(popcornToken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract\r\n\t\t\r\n        emit POPCORNEvent(msg.sender, address(this), _amount);\r\n\t}\r\n\t\r\n\t    \r\n\t\r\n\tfunction _ditchcorns(uint256 _amount) internal {\r\n\t    \r\n\t\trequire(popslotOf(msg.sender) >= _amount, \"You currently do not have up to that amount popping\");\r\n\t\t\r\n\t\tinfo.totalPopping -= _amount;\r\n\t\tinfo.users[msg.sender].popslot -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\r\n\t\t\r\n\t\t\r\n\t\t\r\n    \t\tif(whitelisted[msg.sender] == true){\r\n    \t\t   \r\n    \t\t   require(IERC20(popcornToken).transfer(msg.sender, _amount), \"Transaction failed\");\r\n                        emit DITCHEvent(address(this), msg.sender, _amount);\r\n    \t\t    \r\n    \t\t    \r\n    \t \t}else{\r\n    \t\t        uint256 interval =  now - info.users[msg.sender].poptime;\r\n    \t\t        if(interval < MIN_POP_DUR){\r\n            \t\t    \r\n            \t\t_burnedAmount = mulDiv(_amount, DITCH_FEE, 100);\r\n            \t\tactualValue = _amount.sub(_burnedAmount);\r\n            \t\t\r\n            \t\trequire(IERC20(popcornToken).transfer(msg.sender, actualValue), \"Transaction failed\");\r\n                    emit DITCHEvent(address(this), msg.sender, actualValue);\r\n            \t\t\r\n            \t\t_burnedAmount /=2;\r\n            \t\trequire(IERC20(popcornToken).transfer(address(this), _burnedAmount), \"Transaction failed\");\r\n            \t\tscaledOperatorSelf(_burnedAmount);\r\n            \t\t\r\n            \t\t\r\n            \t\t\r\n             \t    require(IERC20(popcornToken).transfer(power, _burnedAmount), \"Transaction failed\");\r\n             \t\tPOWER(power).scaledPower(_burnedAmount);\r\n             \t\t\r\n            \t\t\r\n            \t\t\r\n            \t\t \r\n            \t\t}else{\r\n            \t\t    \r\n            \t\trequire(IERC20(popcornToken).transfer(msg.sender, _amount), \"Transaction failed\");\r\n                    emit DITCHEvent(address(this), msg.sender, _amount);\r\n            \t\t\r\n            \t\t}\r\n    \t\t    \r\n    \t\t    \r\n    \t\t}\r\n            \t\t\r\n\t\t\r\n\t}\r\n\t\t\r\n\t\t\r\n\tfunction Takecorns() external returns (uint256) {\r\n\t\t    \r\n\t\tuint256 _dividends = cornsOf(msg.sender);\r\n\t\trequire(_dividends >= 0, \"you do not have any corn yet\");\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\r\n\t\t\r\n\t\trequire(IERC20(popcornToken).transfer(msg.sender, _dividends), \"Transaction Failed\");    // Transfer dividends to msg.sender\r\n\t\temit PooppingRewardEvent(msg.sender, address(this), _dividends);\r\n\t\t\r\n\t\treturn _dividends;\r\n\t    \r\n\t\t    \r\n\t}\r\n\t\t\r\n\t\t\r\n \r\n    function scaledOperators(uint _amount) external onlypopcornToken returns(bool){\r\n            \r\n    \t\tinfo.scaledPayoutPerToken += _amount * FLOAT_SCALAR / info.totalPopping;\r\n    \t\tinfocheck = info.scaledPayoutPerToken;\r\n    \t\treturn true;\r\n            \r\n    }\r\n    \r\n    function scaledOperatorSelf(uint _amount) private  returns(bool){\r\n            \r\n    \t\tinfo.scaledPayoutPerToken += _amount * FLOAT_SCALAR / info.totalPopping;\r\n    \t\tinfocheck = info.scaledPayoutPerToken;\r\n    \t\treturn true;\r\n            \r\n    }\r\n        \r\n    function mulDiv (uint x, uint y, uint z) public pure returns (uint) {\r\n              (uint l, uint h) = fullMul (x, y);\r\n              assert (h < z);\r\n              uint mm = mulmod (x, y, z);\r\n              if (mm > l) h -= 1;\r\n              l -= mm;\r\n              uint pow2 = z & -z;\r\n              z /= pow2;\r\n              l /= pow2;\r\n              l += h * ((-pow2) / pow2 + 1);\r\n              uint r = 1;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              return l * r;\r\n    }\r\n        \r\n    function fullMul (uint x, uint y) private pure returns (uint l, uint h) {\r\n              uint mm = mulmod (x, y, uint (-1));\r\n              l = x * y;\r\n              h = mm - l;\r\n              if (mm < l) h -= 1;\r\n    }\r\n \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DITCHEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"POPCORNEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executioner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PooppingRewardEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"DitchCorns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FIRE_TO_POP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Takecorns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_machineReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"_minFIRE_TO_POP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"_minPopAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cornsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"ditchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireball\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infocheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"machineReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_popcorn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_power\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fire\",\"type\":\"address\"}],\"name\":\"machinery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"popCorns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popcornToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"popslotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"power\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"scaledOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPopping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCornsPopping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userpopslot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usercorns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userpoptime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"scaledPayout\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OPERATORS","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://705b579da2f2ac3a7e11302ebeb3dfc4b3dd181a9dc2a71f1df30ce48eace8f3"}]}