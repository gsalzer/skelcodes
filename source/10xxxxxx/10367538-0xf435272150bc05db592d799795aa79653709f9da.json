{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IAccessModule {\r\n    enum Operation {\r\n        // LiquidityModule\r\n        Deposit,\r\n        Withdraw,\r\n        // LoanModule\r\n        CreateDebtProposal,\r\n        AddPledge,\r\n        WithdrawPledge,\r\n        CancelDebtProposal,\r\n        ExecuteDebtProposal,\r\n        Repay,\r\n        ExecuteDebtDefault,\r\n        WithdrawUnlockedPledge\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if operation is allowed\r\n     * @param operation Requested operation\r\n     * @param sender Sender of transaction\r\n     */\r\n    function isOperationAllowed(Operation operation, address sender) external view returns(bool);\r\n}\r\n\r\n/**\r\n * @title Bonding Curve Interface\r\n * @dev A bonding curve is a method for continous token minting / burning.\r\n */\r\n/* solhint-disable func-order */\r\ninterface ICurveModule {\r\n    /**\r\n     * @notice Calculates amount of pTokens to mint\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param debtCommitments Debt commitments\r\n     * @param lAmount Amount of liquidTokens to deposit\r\n     * @return Amount of pTokens to mint/unlock\r\n     */\r\n    function calculateEnter(uint256 liquidAssets, uint256 debtCommitments, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens to withdraw (full: sum of withdrawU and withdrawP)\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExit(uint256 liquidAssets, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee = withdrawU\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExitWithFee(uint256 liquidAssets, uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of liquid tokens one can withdraw from the pool when pTokens are burned/locked\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     * @return Amount of liquid tokens to withdraw: total, for user, for pool\r\n     */\r\n    function calculateExitInverseWithFee(uint256 liquidAssets, uint256 pAmount) external view returns (uint256 withdraw, uint256 withdrawU, uint256 withdrawP);\r\n\r\n    /**\r\n     * @notice Calculates lAmount to be taken as fee upon withdraw\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee\r\n     * @return Amount of liquid tokens which will be additionally taken as a pool fee\r\n     */\r\n    function calculateExitFee(uint256 lAmount) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for token transfers, provides info about current liquidity/debts and pool token price.\r\n */\r\ninterface IFundsModule {\r\n    event Status(uint256 lBalance, uint256 lDebts, uint256 lProposals, uint256 pEnterPrice, uint256 pExitPrice);\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) external;\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) external;\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens and distribute the to other PToken holders\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function distributePTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) external;\r\n\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external;\r\n\r\n    function mintAndLockPTokens(uint256 amount) external;\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) external;\r\n\r\n    function burnLockedPTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n    \r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) external view returns(uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Current pool liquidity\r\n     * @return available liquidity\r\n     */\r\n    function lBalance() external view returns(uint256);\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Liquidity Module Interface\r\n * @dev Liquidity module is responsible for deposits, withdrawals and works with Funds module.\r\n */\r\ninterface ILiquidityModule {\r\n\r\n    event Deposit(address indexed sender, uint256 lAmount, uint256 pAmount);\r\n    event Withdraw(address indexed sender, uint256 lAmountTotal, uint256 lAmountUser, uint256 pAmount);\r\n\r\n    /*\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) external;\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param pAmount Amount of pTokens to send\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    /**\r\n     * @notice Simulate withdrawal for loan repay with PTK\r\n     * @param pAmount Amount of pTokens to use\r\n     */\r\n    function withdrawForRepay(address borrower, uint256 pAmount) external;\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanModule {\r\n    event Repay(address indexed sender, uint256 debt, uint256 lDebtLeft, uint256 lFullPaymentAmount, uint256 lInterestPaid, uint256 pInterestPaid, uint256 newlastPayment);\r\n    event UnlockedPledgeWithdraw(address indexed sender, address indexed borrower, uint256 proposal, uint256 debt, uint256 pAmount);\r\n    event DebtDefaultExecuted(address indexed borrower, uint256 debt, uint256 pBurned);\r\n\r\n    /**\r\n     * @notice Creates Debt from proposal\r\n     * @dev Used by LoanProposalModule to create debt\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of DebtProposal\r\n     * @param lAmount Amount of the loan\r\n     * @return Index of created Debt\r\n     */\r\n    function createDebt(address borrower, uint256 proposal, uint256 lAmount) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Repay amount of liquidToken and unlock pTokens\r\n     * @param debt Index of Debt\r\n     * @param lAmount Amount of liquid tokens to repay\r\n     */\r\n    function repay(uint256 debt, uint256 lAmount) external;\r\n\r\n    function repayPTK(uint256 debt, uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    function repayAllInterest(address borrower) external;\r\n\r\n    /**\r\n     * @notice Allows anyone to default a debt which is behind it's repay deadline\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function executeDebtDefault(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Withdraw part of the pledge which is already unlocked (borrower repaid part of the debt) + interest\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function withdrawUnlockedPledge(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Calculates if default time for the debt is reached\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @return true if debt is defaulted\r\n     */\r\n    function isDebtDefaultTimeReached(address borrower, uint256 debt) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Check if user has active debts\r\n     * @param borrower Address to check\r\n     * @return True if borrower has unpaid debts\r\n     */\r\n    function hasActiveDebts(address borrower) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Total amount of debts\r\n     * @return Summ of all liquid token in debts\r\n     */\r\n    function totalLDebts() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanProposalsModule {\r\n    event DebtProposalCreated(address indexed sender, uint256 proposal, uint256 lAmount, uint256 interest, bytes32 descriptionHash);\r\n    event PledgeAdded(address indexed sender, address indexed borrower, uint256 proposal, uint256 lAmount, uint256 pAmount);\r\n    event PledgeWithdrawn(address indexed sender, address indexed borrower, uint256 proposal, uint256 lAmount, uint256 pAmount);\r\n    event DebtProposalCanceled(address indexed sender, uint256 proposal);\r\n    event DebtProposalExecuted(address indexed sender, uint256 proposal, uint256 debt, uint256 lAmount);\r\n\r\n    /**\r\n     * @notice Create DebtProposal\r\n     * @param debtLAmount Amount of debt in liquid tokens\r\n     * @param interest Annual interest rate multiplied by INTEREST_MULTIPLIER (to allow decimal numbers)\r\n     * @param pAmountMax Max amount of pTokens to use as collateral\r\n     * @param descriptionHash Hash of loan description\r\n     * @return Index of created DebtProposal\r\n     */\r\n    function createDebtProposal(uint256 debtLAmount, uint256 interest, uint256 pAmountMax, bytes32 descriptionHash) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Add pledge to DebtProposal\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of borroers's proposal\r\n     * @param pAmount Amount of pTokens to use as collateral\r\n     * @param lAmountMin Minimal amount of liquid tokens to cover by this pledge\r\n     */\r\n    function addPledge(address borrower, uint256 proposal, uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    /**\r\n     * @notice Withdraw pledge from DebtProposal\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of borrowers's proposal\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     */\r\n    function withdrawPledge(address borrower, uint256 proposal, uint256 pAmount) external;\r\n\r\n    /**\r\n     * @notice Execute DebtProposal\r\n     * @dev Creates Debt using data of DebtProposal\r\n     * @param proposal Index of DebtProposal\r\n     * @return Index of created Debt\r\n     */\r\n    function executeDebtProposal(uint256 proposal) external returns(uint256);\r\n\r\n\r\n    /**\r\n     * @notice Total amount of collateral locked in proposals\r\n     * Although this is measured in liquid tokens, it's not actual tokens,\r\n     * just a value wich is supposed to represent the collateral locked in proposals.\r\n     * @return Summ of all collaterals in proposals\r\n     */\r\n    function totalLProposals() external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns most used data from proposal and pledge\r\n     * @param borrower Address of borrower\r\n     * @param proposal Proposal id\r\n     * @param supporter Address of supporter (can be same as borrower)\r\n     */\r\n    function getProposalAndPledgeInfo(address borrower, uint256 proposal, address supporter) external view\r\n    returns(uint256 lAmount, uint256 lCovered, uint256 pCollected, uint256 interest, uint256 lPledge, uint256 pPledge);\r\n\r\n    /**\r\n    * @dev Returns interest rate of proposal. Usefull when only this value is required\r\n    */\r\n    function getProposalInterestRate(address borrower, uint256 proposal) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanLimitsModule {\r\n    // List of limit types. See LoanLimits struct for descriptions\r\n    enum LoanLimitType {\r\n        L_DEBT_AMOUNT_MIN,\r\n        DEBT_INTEREST_MIN,\r\n        PLEDGE_PERCENT_MIN,\r\n        L_MIN_PLEDGE_MAX,    \r\n        DEBT_LOAD_MAX,       \r\n        MAX_OPEN_PROPOSALS_PER_USER,\r\n        MIN_CANCEL_PROPOSAL_TIMEOUT\r\n    }\r\n\r\n    function set(LoanLimitType limit, uint256 value) external;\r\n    function get(LoanLimitType limit) external view returns(uint256);\r\n\r\n    function lDebtAmountMin() external view returns(uint256);\r\n    function debtInterestMin() external view returns(uint256);\r\n    function pledgePercentMin() external view returns(uint256);\r\n    function lMinPledgeMax() external view returns(uint256);\r\n    function debtLoadMax() external view returns(uint256);\r\n    function maxOpenProposalsPerUser() external view returns(uint256);\r\n    function minCancelProposalTimeout() external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title PToken Interface\r\n */\r\ninterface IPToken {\r\n    /* solhint-disable func-order */\r\n    //Standart ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    //Mintable & Burnable\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    //Distributions\r\n    function distribute(uint256 amount) external;\r\n    function claimDistributions(address account) external returns(uint256);\r\n    function claimDistributions(address account, uint256 lastDistribution) external returns(uint256);\r\n    function claimDistributions(address[] calldata accounts) external;\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external;\r\n    function fullBalanceOf(address account) external view returns(uint256);\r\n    function calculateDistributedAmount(uint256 startDistribution, uint256 nextDistribution, uint256 initialBalance) external view returns(uint256);\r\n    function nextDistribution() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string public constant MODULE_ACCESS            = \"access\";\r\n    string public constant MODULE_PTOKEN            = \"ptoken\";\r\n    string public constant MODULE_CURVE             = \"curve\";\r\n    string public constant MODULE_FUNDS             = \"funds\";\r\n    string public constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string public constant MODULE_LOAN              = \"loan\";\r\n    string public constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string public constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string public constant MODULE_LTOKEN            = \"ltoken\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\ncontract LoanModule is Module, ILoanModule {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant INTEREST_MULTIPLIER = 10**3;    // Multiplier to store interest rate (decimal) in int\r\n    uint256 public constant ANNUAL_SECONDS = 365*24*60*60+(24*60*60/4);  // Seconds in a year + 1/4 day to compensate leap years\r\n\r\n    uint256 public constant DEBT_REPAY_DEADLINE_PERIOD = 90*24*60*60;   //Period before debt without payments may be defaulted\r\n\r\n    uint256 public constant DEBT_LOAD_MULTIPLIER = 10**3;\r\n\r\n    struct Debt {\r\n        uint256 proposal;           // Index of DebtProposal in adress's proposal list\r\n        uint256 lAmount;            // Current amount of debt (in liquid token). If 0 - debt is fully paid\r\n        uint256 lastPayment;        // Timestamp of last interest payment (can be timestamp of last payment or a virtual date untill which interest is paid)\r\n        uint256 pInterest;          // Amount of pTokens minted as interest for this debt\r\n        mapping(address => uint256) claimedPledges;  //Amount of pTokens already claimed by supporter\r\n        bool defaultExecuted;       // If debt default is already executed by executeDebtDefault()\r\n    }\r\n\r\n    mapping(address=>Debt[]) public debts;                 \r\n\r\n    uint256 private lDebts;\r\n\r\n    mapping(address=>uint256) public activeDebts;           // Counts how many active debts the address has \r\n\r\n    modifier operationAllowed(IAccessModule.Operation operation) {\r\n        IAccessModule am = IAccessModule(getModuleAddress(MODULE_ACCESS));\r\n        require(am.isOperationAllowed(operation, _msgSender()), \"LoanModule: operation not allowed\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute DebtProposal\r\n     * @dev Creates Debt using data of DebtProposal\r\n     * @param proposal Index of DebtProposal\r\n     * @return Index of created Debt\r\n     */\r\n    function createDebt(address borrower, uint256 proposal, uint256 lAmount) public returns(uint256) {\r\n        require(_msgSender() == getModuleAddress(MODULE_LOAN_PROPOSALS), \"LoanModule: requests only accepted from LoanProposalsModule\");\r\n        //TODO: check there is no debt for this proposal\r\n        debts[borrower].push(Debt({\r\n            proposal: proposal,\r\n            lAmount: lAmount,\r\n            lastPayment: now,\r\n            pInterest: 0,\r\n            defaultExecuted: false\r\n        }));\r\n        uint256 debtIdx = debts[borrower].length-1; //It's important to save index before calling external contract\r\n\r\n        uint256 maxDebts = limits().debtLoadMax().mul(fundsModule().lBalance().add(lDebts)).div(DEBT_LOAD_MULTIPLIER);\r\n\r\n        lDebts = lDebts.add(lAmount);\r\n        require(lDebts <= maxDebts, \"LoanModule: Debt can not be created now because of debt loan limit\");\r\n\r\n        //Move locked pTokens to Funds - done in LoanProposals\r\n\r\n        increaseActiveDebts(borrower);\r\n        fundsModule().withdrawLTokens(borrower, lAmount);\r\n        return debtIdx;\r\n    }\r\n\r\n    /**\r\n     * @notice Repay amount of lToken and unlock pTokens\r\n     * @param debt Index of Debt\r\n     * @param lAmount Amount of liquid tokens to repay (it will not take more than needed for full debt repayment)\r\n     */\r\n    function repay(uint256 debt, uint256 lAmount) public operationAllowed(IAccessModule.Operation.Repay) {\r\n        address borrower = _msgSender();\r\n        Debt storage d = debts[borrower][debt];\r\n        require(d.lAmount > 0, \"LoanModule: Debt is already fully repaid\"); //Or wrong debt index\r\n        require(!_isDebtDefaultTimeReached(d), \"LoanModule: debt is already defaulted\");\r\n\r\n        (, uint256 lCovered, , uint256 interest, uint256 pledgeLAmount, )\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, d.proposal, borrower);\r\n\r\n        uint256 lInterest = calculateInterestPayment(d.lAmount, interest, d.lastPayment, now);\r\n\r\n        uint256 actualInterest;\r\n        if (lAmount < lInterest) {\r\n            uint256 paidTime = now.sub(d.lastPayment).mul(lAmount).div(lInterest);\r\n            assert(d.lastPayment + paidTime <= now);\r\n            d.lastPayment = d.lastPayment.add(paidTime);\r\n            actualInterest = lAmount;\r\n        } else {\r\n            uint256 fullRepayLAmount = d.lAmount.add(lInterest);\r\n            if (lAmount > fullRepayLAmount) lAmount = fullRepayLAmount;\r\n\r\n            d.lastPayment = now;\r\n            uint256 debtReturned = lAmount.sub(lInterest);\r\n            d.lAmount = d.lAmount.sub(debtReturned);\r\n            lDebts = lDebts.sub(debtReturned);\r\n            actualInterest = lInterest;\r\n        }\r\n\r\n        uint256 pInterest = calculatePoolEnter(actualInterest);\r\n        d.pInterest = d.pInterest.add(pInterest);\r\n        uint256 poolInterest = pInterest.mul(pledgeLAmount).div(lCovered);\r\n\r\n        fundsModule().depositLTokens(borrower, lAmount); \r\n        fundsModule().distributePTokens(poolInterest);\r\n        fundsModule().mintAndLockPTokens(pInterest.sub(poolInterest));\r\n\r\n        emit Repay(_msgSender(), debt, d.lAmount, lAmount, actualInterest, pInterest, d.lastPayment);\r\n\r\n        if (d.lAmount == 0) {\r\n            //Debt is fully repaid\r\n            decreaseActiveDebts(borrower);\r\n            withdrawUnlockedPledge(borrower, debt);\r\n        }\r\n    }\r\n\r\n    function repayPTK(uint256 debt, uint256 pAmount, uint256 lAmountMin) public operationAllowed(IAccessModule.Operation.Repay) {\r\n        address borrower = _msgSender();\r\n        Debt storage d = debts[borrower][debt];\r\n        require(d.lAmount > 0, \"LoanModule: Debt is already fully repaid\"); //Or wrong debt index\r\n        require(!_isDebtDefaultTimeReached(d), \"LoanModule: debt is already defaulted\");\r\n\r\n        (, uint256 lAmount,) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        require(lAmount >= lAmountMin, \"LoanModule: Minimal amount is too high\");\r\n\r\n        (uint256 actualPAmount, uint256 actualInterest, uint256 pInterest, uint256 poolInterest) \r\n            = repayPTK_calculateInterestAndUpdateDebt(borrower, d, lAmount);\r\n        if (actualPAmount == 0) actualPAmount = pAmount; // Fix of stack too deep if send original pAmount to repayPTK_calculateInterestAndUpdateDebt\r\n\r\n        liquidityModule().withdrawForRepay(borrower, actualPAmount);\r\n        fundsModule().distributePTokens(poolInterest);\r\n        fundsModule().mintAndLockPTokens(pInterest.sub(poolInterest));\r\n\r\n        emit Repay(_msgSender(), debt, d.lAmount, lAmount, actualInterest, pInterest, d.lastPayment);\r\n\r\n        if (d.lAmount == 0) {\r\n            //Debt is fully repaid\r\n            decreaseActiveDebts(borrower);\r\n            withdrawUnlockedPledge(borrower, debt);\r\n        }\r\n    }\r\n\r\n    function repayPTK_calculateInterestAndUpdateDebt(address borrower, Debt storage d, uint256 lAmount) private \r\n    returns(uint256 pAmount, uint256 actualInterest, uint256 pInterest, uint256 poolInterest){\r\n        (, uint256 lCovered, , uint256 interest, uint256 lPledge, )\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, d.proposal, borrower);\r\n\r\n        uint256 lInterest = calculateInterestPayment(d.lAmount, interest, d.lastPayment, now);\r\n        if (lAmount < lInterest) {\r\n            uint256 paidTime = now.sub(d.lastPayment).mul(lAmount).div(lInterest);\r\n            assert(d.lastPayment + paidTime <= now);\r\n            d.lastPayment = d.lastPayment.add(paidTime);\r\n            actualInterest = lAmount;\r\n        } else {\r\n            uint256 fullRepayLAmount = d.lAmount.add(lInterest);\r\n            if (lAmount > fullRepayLAmount) {\r\n                lAmount = fullRepayLAmount;\r\n                pAmount = calculatePoolExitWithFee(lAmount);\r\n            }\r\n\r\n            d.lastPayment = now;\r\n            uint256 debtReturned = lAmount.sub(lInterest);\r\n            d.lAmount = d.lAmount.sub(debtReturned);\r\n            lDebts = lDebts.sub(debtReturned);\r\n            actualInterest = lInterest;\r\n        }\r\n\r\n        //current liquidity already includes lAmount, which was never actually withdrawn, so we need to remove it here\r\n        pInterest = calculatePoolEnter(actualInterest, lAmount); \r\n        d.pInterest = d.pInterest.add(pInterest);\r\n        poolInterest = pInterest.mul(lPledge).div(lCovered);\r\n    }\r\n\r\n    function repayAllInterest(address borrower) public {\r\n        require(_msgSender() == getModuleAddress(MODULE_LIQUIDITY), \"LoanModule: call only allowed from LiquidityModule\");\r\n        Debt[] storage userDebts = debts[borrower];\r\n        if (userDebts.length == 0) return;\r\n        uint256 totalLFee;\r\n        uint256 totalPWithdraw;\r\n        uint256 totalPInterestToDistribute;\r\n        uint256 totalPInterestToMint;\r\n        uint256 activeDebtCount = 0;\r\n        for (int256 i=int256(userDebts.length)-1; i >= 0; i--){\r\n            Debt storage d = userDebts[uint256(i)];\r\n            // bool isUnpaid = (d.lAmount != 0);\r\n            // bool isDefaulted = _isDebtDefaultTimeReached(d);\r\n            // if (isUnpaid && !isDefaulted){                      \r\n            if ((d.lAmount != 0) && !_isDebtDefaultTimeReached(d)){ //removed isUnpaid and isDefaulted variables to preent \"Stack too deep\" error\r\n                (uint256 pWithdrawn, uint256 lFee, uint256 poolInterest, uint256 pInterestToMint) \r\n                    = repayInterestForDebt(borrower, uint256(i), d, totalLFee);\r\n                totalPWithdraw = totalPWithdraw.add(pWithdrawn);\r\n                totalLFee = totalLFee.add(lFee);\r\n                totalPInterestToDistribute = totalPInterestToDistribute.add(poolInterest);\r\n                totalPInterestToMint = totalPInterestToMint.add(pInterestToMint);\r\n\r\n                activeDebtCount++;\r\n                if (activeDebtCount >= activeDebts[borrower]) break;\r\n            }\r\n        }\r\n        if (totalPWithdraw > 0) {\r\n            liquidityModule().withdrawForRepay(borrower, totalPWithdraw);\r\n            fundsModule().distributePTokens(totalPInterestToDistribute);\r\n            fundsModule().mintAndLockPTokens(totalPInterestToMint);\r\n        } else {\r\n            assert(totalPInterestToDistribute == 0);\r\n            assert(totalPInterestToMint == 0);\r\n        }\r\n    }\r\n\r\n    function repayInterestForDebt(address borrower, uint256 debt, Debt storage d, uint256 totalLFee) private \r\n    returns(uint256 pWithdrawn, uint256 lFee, uint256 poolInterest, uint256 pInterestToMint) {\r\n        (, uint256 lCovered, , uint256 interest, uint256 lPledge, )\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, d.proposal, borrower);\r\n        uint256 lInterest = calculateInterestPayment(d.lAmount, interest, d.lastPayment, now);\r\n        pWithdrawn = calculatePoolExitWithFee(lInterest, totalLFee);\r\n        lFee = calculateExitFee(lInterest);\r\n\r\n        //Update debt\r\n        d.lastPayment = now;\r\n        //current liquidity already includes totalLFee, which was never actually withdrawn, so we need to remove it here\r\n        uint256 pInterest = calculatePoolEnter(lInterest, lInterest.add(totalLFee)); \r\n        d.pInterest = d.pInterest.add(pInterest);\r\n        poolInterest = pInterest.mul(lPledge).div(lCovered);\r\n        pInterestToMint = pInterest.sub(poolInterest); //We substract interest that will be minted during distribution\r\n        emitRepay(borrower, debt, d, lInterest, lInterest, pInterest);\r\n    }\r\n\r\n    function emitRepay(address borrower, uint256 debt, Debt storage d, uint256 lFullPaymentAmount, uint256 lInterestPaid, uint256 pInterestPaid) private {\r\n        emit Repay(borrower, debt, d.lAmount, lFullPaymentAmount, lInterestPaid, pInterestPaid, d.lastPayment);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows anyone to default a debt which is behind it's repay deadline\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function executeDebtDefault(address borrower, uint256 debt) public operationAllowed(IAccessModule.Operation.ExecuteDebtDefault) {\r\n        Debt storage dbt = debts[borrower][debt];\r\n        require(dbt.lAmount > 0, \"LoanModule: debt is fully repaid\");\r\n        require(!dbt.defaultExecuted, \"LoanModule: default is already executed\");\r\n        require(_isDebtDefaultTimeReached(dbt), \"LoanModule: not enough time passed\");\r\n\r\n        (uint256 proposalLAmount, , uint256 pCollected, , , uint256 pPledge)\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, dbt.proposal, borrower);\r\n\r\n        withdrawDebtDefaultPayment(borrower, debt);\r\n\r\n        uint256 pLockedBorrower = pPledge.mul(dbt.lAmount).div(proposalLAmount);\r\n        uint256 pUnlockedBorrower = pPledge.sub(pLockedBorrower);\r\n        uint256 pSupportersPledge = pCollected.sub(pPledge);\r\n        uint256 pLockedSupportersPledge = pSupportersPledge.mul(dbt.lAmount).div(proposalLAmount);\r\n        uint256 pLocked = pLockedBorrower.add(pLockedSupportersPledge);\r\n        dbt.defaultExecuted = true;\r\n        lDebts = lDebts.sub(dbt.lAmount);\r\n        uint256 pExtra;\r\n        if (pUnlockedBorrower > pLockedSupportersPledge){\r\n            pExtra = pUnlockedBorrower - pLockedSupportersPledge;\r\n            fundsModule().distributePTokens(pExtra);\r\n        }\r\n        fundsModule().burnLockedPTokens(pLocked.add(pExtra));\r\n        decreaseActiveDebts(borrower);\r\n        emit DebtDefaultExecuted(borrower, debt, pLocked);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw part of the pledge which is already unlocked (borrower repaid part of the debt) + interest\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function withdrawUnlockedPledge(address borrower, uint256 debt) public operationAllowed(IAccessModule.Operation.WithdrawUnlockedPledge) {\r\n        (, uint256 pUnlocked, uint256 pInterest, uint256 pWithdrawn) = calculatePledgeInfo(borrower, debt, _msgSender());\r\n\r\n        uint256 pUnlockedPlusInterest = pUnlocked.add(pInterest);\r\n        require(pUnlockedPlusInterest > pWithdrawn, \"LoanModule: nothing to withdraw\");\r\n        uint256 pAmount = pUnlockedPlusInterest.sub(pWithdrawn);\r\n\r\n        Debt storage dbt = debts[borrower][debt];\r\n        dbt.claimedPledges[_msgSender()] = dbt.claimedPledges[_msgSender()].add(pAmount);\r\n        \r\n        fundsModule().unlockAndWithdrawPTokens(_msgSender(), pAmount);\r\n        emit UnlockedPledgeWithdraw(_msgSender(), borrower, dbt.proposal, debt, pAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates if default time for the debt is reached\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @return true if debt is defaulted\r\n     */\r\n    function isDebtDefaultTimeReached(address borrower, uint256 debt) public view returns(bool) {\r\n        Debt storage dbt = debts[borrower][debt];\r\n        return _isDebtDefaultTimeReached(dbt);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates current pledge state\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @param supporter Address of supporter to check. If supporter == borrower, special rules applied.\r\n     * @return current pledge state:\r\n     *      pLocked - locked pTokens\r\n     *      pUnlocked - unlocked pTokens (including already withdrawn)\r\n     *      pInterest - received interest\r\n     *      pWithdrawn - amount of already withdrawn pTokens\r\n     */\r\n    function calculatePledgeInfo(address borrower, uint256 debt, address supporter) public view\r\n    returns(uint256 pLocked, uint256 pUnlocked, uint256 pInterest, uint256 pWithdrawn){\r\n        Debt storage dbt = debts[borrower][debt];\r\n\r\n        (uint256 proposalLAmount, uint256 lCovered, , , uint256 lPledge, uint256 pPledge)\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, dbt.proposal, supporter);\r\n\r\n        pWithdrawn = dbt.claimedPledges[supporter];\r\n\r\n        // DebtPledge storage dp = proposal.pledges[supporter];\r\n\r\n        if (supporter == borrower) {\r\n            if (dbt.lAmount == 0) {\r\n                pLocked = 0;\r\n                pUnlocked = pPledge;\r\n            } else {\r\n                pLocked = pPledge;\r\n                pUnlocked = 0;\r\n                if (dbt.defaultExecuted || _isDebtDefaultTimeReached(dbt)) {\r\n                    pLocked = 0; \r\n                }\r\n            }\r\n            pInterest = 0;\r\n        }else{\r\n            pLocked = pPledge.mul(dbt.lAmount).div(proposalLAmount);\r\n            assert(pLocked <= pPledge);\r\n            pUnlocked = pPledge.sub(pLocked);\r\n            pInterest = dbt.pInterest.mul(lPledge).div(lCovered);\r\n            assert(pInterest <= dbt.pInterest);\r\n            if (dbt.defaultExecuted || _isDebtDefaultTimeReached(dbt)) {\r\n                (pLocked, pUnlocked) = calculatePledgeInfoForDefault(borrower, dbt, proposalLAmount, lCovered, lPledge, pLocked, pUnlocked);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculatePledgeInfoForDefault(\r\n        address borrower, Debt storage dbt, uint256 proposalLAmount, uint256 lCovered, uint256 lPledge, \r\n        uint256 pLocked, uint256 pUnlocked) private view\r\n    returns(uint256, uint256){\r\n        (, , , , uint256 bpledgeLAmount, uint256 bpledgePAmount) = loanProposals().getProposalAndPledgeInfo(borrower, dbt.proposal, borrower);\r\n        uint256 pLockedBorrower = bpledgePAmount.mul(dbt.lAmount).div(proposalLAmount);\r\n        uint256 pUnlockedBorrower = bpledgePAmount.sub(pLockedBorrower);\r\n        uint256 pCompensation = pUnlockedBorrower.mul(lPledge).div(lCovered.sub(bpledgeLAmount));\r\n        if (pCompensation > pLocked) {\r\n            pCompensation = pLocked;\r\n        }\r\n        if (dbt.defaultExecuted) {\r\n            pLocked = 0;\r\n            pUnlocked = pUnlocked.add(pCompensation);\r\n        }else {\r\n            pLocked = pCompensation;\r\n        }\r\n        return (pLocked, pUnlocked);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates current pledge state\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @return Amount of unpaid debt, amount of interest payment\r\n     */\r\n    function getDebtRequiredPayments(address borrower, uint256 debt) public view returns(uint256, uint256) {\r\n        Debt storage d = debts[borrower][debt];\r\n        if (d.lAmount == 0) {\r\n            return (0, 0);\r\n        }\r\n        uint256 interestRate = loanProposals().getProposalInterestRate(borrower, d.proposal);\r\n\r\n        uint256 interest = calculateInterestPayment(d.lAmount, interestRate, d.lastPayment, now);\r\n        return (d.lAmount, interest);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if user has active debts\r\n     * @param borrower Address to check\r\n     * @return True if borrower has unpaid debts\r\n     */\r\n    function hasActiveDebts(address borrower) public view returns(bool) {\r\n        return activeDebts[borrower] > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates unpaid interest on all actve debts of the borrower\r\n     * @dev This function may use a lot of gas, so it is not recommended to call it in the context of transaction. Use payAllInterest() instead.\r\n     * @param borrower Address of borrower\r\n     * @return summ of interest payments on all unpaid debts, summ of all interest payments per second\r\n     */\r\n    function getUnpaidInterest(address borrower) public view returns(uint256 totalLInterest, uint256 totalLInterestPerSecond){\r\n        Debt[] storage userDebts = debts[borrower];\r\n        if (userDebts.length == 0) return (0, 0);\r\n        uint256 activeDebtCount;\r\n        for (int256 i=int256(userDebts.length)-1; i >= 0; i--){\r\n            Debt storage d = userDebts[uint256(i)];\r\n            bool isUnpaid = (d.lAmount != 0);\r\n            bool isDefaulted = _isDebtDefaultTimeReached(d);\r\n            if (isUnpaid && !isDefaulted){\r\n                uint256 interestRate = loanProposals().getProposalInterestRate(borrower, d.proposal);\r\n                uint256 lInterest = calculateInterestPayment(d.lAmount, interestRate, d.lastPayment, now);\r\n                uint256 lInterestPerSecond = lInterest.div(now.sub(d.lastPayment));\r\n                totalLInterest = totalLInterest.add(lInterest);\r\n                totalLInterestPerSecond = totalLInterestPerSecond.add(lInterestPerSecond);\r\n\r\n                activeDebtCount++;\r\n                if (activeDebtCount >= activeDebts[borrower]) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Total amount of debts\r\n     * @return Sum of all liquid token in debts\r\n     */\r\n    function totalLDebts() public view returns(uint256){\r\n        return lDebts;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates interest amount for a debt\r\n     * @param debtLAmount Current amount of debt\r\n     * @param interest Annual interest rate multiplied by INTEREST_MULTIPLIER\r\n     * @param prevPayment Timestamp of previous payment\r\n     * @param currentPayment Timestamp of current payment\r\n     */\r\n    function calculateInterestPayment(uint256 debtLAmount, uint256 interest, uint256 prevPayment, uint currentPayment) public pure returns(uint256){\r\n        require(prevPayment <= currentPayment, \"LoanModule: prevPayment should be before currentPayment\");\r\n        uint256 annualInterest = debtLAmount.mul(interest).div(INTEREST_MULTIPLIER);\r\n        uint256 time = currentPayment.sub(prevPayment);\r\n        return time.mul(annualInterest).div(ANNUAL_SECONDS);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) internal view returns(uint256) {\r\n        return fundsModule().calculatePoolEnter(lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) internal view returns(uint256) {\r\n        return fundsModule().calculatePoolEnter(lAmount, liquidityCorrection);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) internal view returns(uint256) {\r\n        return fundsModule().calculatePoolExit(lAmount);\r\n    }\r\n    \r\n    function calculatePoolExitWithFee(uint256 lAmount) internal view returns(uint256) {\r\n        return fundsModule().calculatePoolExitWithFee(lAmount);\r\n    }\r\n\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) internal view returns(uint256) {\r\n        return fundsModule().calculatePoolExitWithFee(lAmount, liquidityCorrection);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) internal view returns(uint256, uint256, uint256) {\r\n        return fundsModule().calculatePoolExitInverse(pAmount);\r\n    }\r\n\r\n    function calculateExitFee(uint256 lAmount) internal view returns(uint256){\r\n        return ICurveModule(getModuleAddress(MODULE_CURVE)).calculateExitFee(lAmount);\r\n    }\r\n\r\n    function fundsModule() internal view returns(IFundsModule) {\r\n        return IFundsModule(getModuleAddress(MODULE_FUNDS));\r\n    }\r\n\r\n    function liquidityModule() internal view returns(ILiquidityModule) {\r\n        return ILiquidityModule(getModuleAddress(MODULE_LIQUIDITY));\r\n    }\r\n\r\n    function pToken() internal view returns(IPToken){\r\n        return IPToken(getModuleAddress(MODULE_PTOKEN));\r\n    }\r\n\r\n    function limits() internal view returns(ILoanLimitsModule) {\r\n        return ILoanLimitsModule(getModuleAddress(MODULE_LOAN_LIMTS));\r\n    }\r\n\r\n    function loanProposals() internal view returns(ILoanProposalsModule) {\r\n        return ILoanProposalsModule(getModuleAddress(MODULE_LOAN_PROPOSALS));\r\n    }\r\n\r\n    function increaseActiveDebts(address borrower) private {\r\n        activeDebts[borrower] = activeDebts[borrower].add(1);\r\n    }\r\n\r\n    function decreaseActiveDebts(address borrower) private {\r\n        activeDebts[borrower] = activeDebts[borrower].sub(1);\r\n    }\r\n\r\n    function withdrawDebtDefaultPayment(address borrower, uint256 debt) private {\r\n        Debt storage d = debts[borrower][debt];\r\n\r\n        uint256 lInterest = calculateInterestPayment(d.lAmount, loanProposals().getProposalInterestRate(borrower, d.proposal), d.lastPayment, now);\r\n\r\n        uint256 lAmount = d.lAmount.add(lInterest);\r\n        uint256 pAmount = calculatePoolExitWithFee(lAmount);\r\n        uint256 pBalance = pToken().balanceOf(borrower);\r\n        if (pBalance == 0) return;\r\n\r\n        if (pAmount > pBalance) {\r\n            pAmount = pBalance;\r\n            (, lAmount,) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        }\r\n\r\n        (uint256 pInterest, uint256 poolInterest) \r\n            = withdrawDebtDefaultPayment_calculatePInterest(borrower, d, lAmount, lInterest); \r\n        d.pInterest = d.pInterest.add(pInterest);\r\n        \r\n        if (lAmount < lInterest) {\r\n            uint256 paidTime = now.sub(d.lastPayment).mul(lAmount).div(lInterest);\r\n            assert(d.lastPayment + paidTime <= now);\r\n            d.lastPayment = d.lastPayment.add(paidTime);\r\n            lInterest = lAmount;\r\n        } else {\r\n            d.lastPayment = now;\r\n            uint256 debtReturned = lAmount.sub(lInterest);\r\n            d.lAmount = d.lAmount.sub(debtReturned);\r\n            lDebts = lDebts.sub(debtReturned);\r\n        }\r\n\r\n\r\n        liquidityModule().withdrawForRepay(borrower, pAmount);\r\n        fundsModule().distributePTokens(poolInterest);\r\n        fundsModule().mintAndLockPTokens(pInterest.sub(poolInterest));\r\n\r\n        emit Repay(borrower, debt, d.lAmount, lAmount, lInterest, pInterest, d.lastPayment);\r\n    }\r\n\r\n    function withdrawDebtDefaultPayment_calculatePInterest(address borrower, Debt storage d, uint256 lAmount, uint256 lInterest) private view \r\n    returns(uint256 pInterest, uint256 poolInterest) {\r\n        //current liquidity already includes lAmount, which was never actually withdrawn, so we need to remove it here\r\n        pInterest = calculatePoolEnter(lInterest, lAmount); \r\n\r\n        (, uint256 lCovered, , , uint256 lPledge, )\r\n        = loanProposals().getProposalAndPledgeInfo(borrower, d.proposal, borrower);\r\n        poolInterest = pInterest.mul(lPledge).div(lCovered);\r\n    }\r\n\r\n    function _isDebtDefaultTimeReached(Debt storage dbt) private view returns(bool) {\r\n        uint256 timeSinceLastPayment = now.sub(dbt.lastPayment);\r\n        return timeSinceLastPayment > DEBT_REPAY_DEADLINE_PERIOD;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pBurned\",\"type\":\"uint256\"}],\"name\":\"DebtDefaultExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lDebtLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lFullPaymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lInterestPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pInterestPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newlastPayment\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"UnlockedPledgeWithdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANNUAL_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEBT_LOAD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEBT_REPAY_DEADLINE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTEREST_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_ACCESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_CURVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_FUNDS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LIQUIDITY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_LIMTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_PROPOSALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_PTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtLAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPayment\",\"type\":\"uint256\"}],\"name\":\"calculateInterestPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"}],\"name\":\"calculatePledgeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"createDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"defaultExecuted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"executeDebtDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"getDebtRequiredPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getUnpaidInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLInterestPerSecond\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"hasActiveDebts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"isDebtDefaultTimeReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"repayAllInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmountMin\",\"type\":\"uint256\"}],\"name\":\"repayPTK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"withdrawUnlockedPledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoanModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://680e79115b717a99d238760e833a9d73a31498e01d141b787b0383499a992ec0"}]}