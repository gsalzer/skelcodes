{"status":"1","message":"OK","result":[{"SourceCode":"/*\n\n⚠⚠⚠ WARNING WARNING WARNING ⚠⚠⚠\n\nThis is a TARGET contract - DO NOT CONNECT TO IT DIRECTLY IN YOUR CONTRACTS or DAPPS!\n\nThis contract has an associated PROXY that MUST be used for all integrations - this TARGET will be REPLACED in an upcoming Synthetix release!\nThe proxy for this contract can be found here:\n\nhttps://contracts.synthetix.io/ProxyFeePool\n\n*//*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: FeePool.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/FeePool.sol\n* Docs: https://docs.synthetix.io/contracts/FeePool\n*\n* Contract Dependencies: \n*\t- EternalStorage\n*\t- IAddressResolver\n*\t- IFeePool\n*\t- LimitedSetup\n*\t- MixinResolver\n*\t- Owned\n*\t- Proxyable\n*\t- SelfDestructible\n*\t- State\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n/* ===============================================\n* Flattened with Solidifier by Coinage\n* \n* https://solidifier.coina.ge\n* ===============================================\n*/\n\n\npragma solidity ^0.5.16;\n\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/Proxy\ncontract Proxy is Owned {\n    Proxyable public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(Proxyable _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(_target);\n    }\n\n    function _emit(\n        bytes calldata callData,\n        uint numTopics,\n        bytes32 topic1,\n        bytes32 topic2,\n        bytes32 topic3,\n        bytes32 topic4\n    ) external onlyTarget {\n        uint size = callData.length;\n        bytes memory _callData = callData;\n\n        assembly {\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\n             * This means moving call_data across 32 bytes guarantees we correctly access\n             * the data itself. */\n            switch numTopics\n                case 0 {\n                    log0(add(_callData, 32), size)\n                }\n                case 1 {\n                    log1(add(_callData, 32), size, topic1)\n                }\n                case 2 {\n                    log2(add(_callData, 32), size, topic1, topic2)\n                }\n                case 3 {\n                    log3(add(_callData, 32), size, topic1, topic2, topic3)\n                }\n                case 4 {\n                    log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\n                }\n        }\n    }\n\n    // solhint-disable no-complex-fallback\n    function() external payable {\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\n        target.setMessageSender(msg.sender);\n\n        assembly {\n            let free_ptr := mload(0x40)\n            calldatacopy(free_ptr, 0, calldatasize)\n\n            /* We must explicitly forward ether to the underlying contract as well. */\n            let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n            returndatacopy(free_ptr, 0, returndatasize)\n\n            if iszero(result) {\n                revert(free_ptr, returndatasize)\n            }\n            return(free_ptr, returndatasize)\n        }\n    }\n\n    modifier onlyTarget {\n        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\n        _;\n    }\n\n    event TargetUpdated(Proxyable newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/Proxyable\ncontract Proxyable is Owned {\n    // This contract should be treated like an abstract contract\n\n    /* The proxy this contract exists behind. */\n    Proxy public proxy;\n    Proxy public integrationProxy;\n\n    /* The caller of the proxy, passed through to this contract.\n     * Note that every function using this member must apply the onlyProxy or\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\n    address public messageSender;\n\n    constructor(address payable _proxy) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setProxy(address payable _proxy) external onlyOwner {\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setIntegrationProxy(address payable _integrationProxy) external onlyOwner {\n        integrationProxy = Proxy(_integrationProxy);\n    }\n\n    function setMessageSender(address sender) external onlyProxy {\n        messageSender = sender;\n    }\n\n    modifier onlyProxy {\n        require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, \"Only the proxy can call\");\n        _;\n    }\n\n    modifier optionalProxy {\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\n            messageSender = msg.sender;\n        }\n        _;\n    }\n\n    modifier optionalProxy_onlyOwner {\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\n            messageSender = msg.sender;\n        }\n        require(messageSender == owner, \"Owner only function\");\n        _;\n    }\n\n    event ProxyUpdated(address proxyAddress);\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/SelfDestructible\ncontract SelfDestructible is Owned {\n    uint public constant SELFDESTRUCT_DELAY = 4 weeks;\n\n    uint public initiationTime;\n    bool public selfDestructInitiated;\n\n    address public selfDestructBeneficiary;\n\n    constructor() internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n        selfDestructBeneficiary = owner;\n        emit SelfDestructBeneficiaryUpdated(owner);\n    }\n\n    /**\n     * @notice Set the beneficiary address of this contract.\n     * @dev Only the contract owner may call this. The provided beneficiary must be non-null.\n     * @param _beneficiary The address to pay any eth contained in this contract to upon self-destruction.\n     */\n    function setSelfDestructBeneficiary(address payable _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0), \"Beneficiary must not be zero\");\n        selfDestructBeneficiary = _beneficiary;\n        emit SelfDestructBeneficiaryUpdated(_beneficiary);\n    }\n\n    /**\n     * @notice Begin the self-destruction counter of this contract.\n     * Once the delay has elapsed, the contract may be self-destructed.\n     * @dev Only the contract owner may call this.\n     */\n    function initiateSelfDestruct() external onlyOwner {\n        initiationTime = now;\n        selfDestructInitiated = true;\n        emit SelfDestructInitiated(SELFDESTRUCT_DELAY);\n    }\n\n    /**\n     * @notice Terminate and reset the self-destruction timer.\n     * @dev Only the contract owner may call this.\n     */\n    function terminateSelfDestruct() external onlyOwner {\n        initiationTime = 0;\n        selfDestructInitiated = false;\n        emit SelfDestructTerminated();\n    }\n\n    /**\n     * @notice If the self-destruction delay has elapsed, destroy this contract and\n     * remit any ether it owns to the beneficiary address.\n     * @dev Only the contract owner may call this.\n     */\n    function selfDestruct() external onlyOwner {\n        require(selfDestructInitiated, \"Self Destruct not yet initiated\");\n        require(initiationTime + SELFDESTRUCT_DELAY < now, \"Self destruct delay not met\");\n        emit SelfDestructed(selfDestructBeneficiary);\n        selfdestruct(address(uint160(selfDestructBeneficiary)));\n    }\n\n    event SelfDestructTerminated();\n    event SelfDestructed(address beneficiary);\n    event SelfDestructInitiated(uint selfDestructDelay);\n    event SelfDestructBeneficiaryUpdated(address newBeneficiary);\n}\n\n\n// https://docs.synthetix.io/contracts/LimitedSetup\ncontract LimitedSetup {\n    uint public setupExpiryTime;\n\n    /**\n     * @dev LimitedSetup Constructor.\n     * @param setupDuration The time the setup period will last for.\n     */\n    constructor(uint setupDuration) internal {\n        setupExpiryTime = now + setupDuration;\n    }\n\n    modifier onlyDuringSetup {\n        require(now < setupExpiryTime, \"Can only perform this action during setup\");\n        _;\n    }\n}\n\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\ninterface ISynthetix {\n    // Views\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n\n    function debtBalanceOfAndTotalDebt(address issuer, bytes32 currencyKey)\n        external\n        view\n        returns (uint debtBalance, uint totalSystemValue);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\n\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\n\n    function transferableSynthetix(address account) external view returns (uint);\n\n    // Mutative Functions\n    function burnSynths(uint amount) external;\n\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\n\n    function burnSynthsToTarget() external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function issueMaxSynths() external;\n\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n\n    function issueSynths(uint amount) external;\n\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\n\n    function mint() external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/AddressResolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            repository[names[i]] = destinations[i];\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getSynth(bytes32 key) external view returns (address) {\n        ISynthetix synthetix = ISynthetix(repository[\"Synthetix\"]);\n        require(address(synthetix) != address(0), \"Cannot find Synthetix address\");\n        return address(synthetix.synths(key));\n    }\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/MixinResolver\ncontract MixinResolver is Owned {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    bytes32[] public resolverAddressesRequired;\n\n    uint public constant MAX_ADDRESSES_FROM_RESOLVER = 24;\n\n    constructor(address _resolver, bytes32[MAX_ADDRESSES_FROM_RESOLVER] memory _addressesToCache) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        for (uint i = 0; i < _addressesToCache.length; i++) {\n            if (_addressesToCache[i] != bytes32(0)) {\n                resolverAddressesRequired.push(_addressesToCache[i]);\n            } else {\n                // End early once an empty item is found - assumes there are no empty slots in\n                // _addressesToCache\n                break;\n            }\n        }\n        resolver = AddressResolver(_resolver);\n        // Do not sync the cache as addresses may not be in the resolver yet\n    }\n\n    /* ========== SETTERS ========== */\n    function setResolverAndSyncCache(AddressResolver _resolver) external onlyOwner {\n        resolver = _resolver;\n\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            addressCache[name] = resolver.requireAndGetAddress(name, \"Resolver missing target\");\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function requireAndGetAddress(bytes32 name, string memory reason) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    // Note: this could be made external in a utility contract if addressCache was made public\n    // (used for deployment)\n    function isResolverCached(AddressResolver _resolver) external view returns (bool) {\n        if (resolver != _resolver) {\n            return false;\n        }\n\n        // otherwise, check everything\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            bytes32 name = resolverAddressesRequired[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Note: can be made external into a utility contract (used for deployment)\n    function getResolverAddressesRequired()\n        external\n        view\n        returns (bytes32[MAX_ADDRESSES_FROM_RESOLVER] memory addressesRequired)\n    {\n        for (uint i = 0; i < resolverAddressesRequired.length; i++) {\n            addressesRequired[i] = resolverAddressesRequired[i];\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n    function appendToAddressCache(bytes32 name) internal {\n        resolverAddressesRequired.push(name);\n        require(resolverAddressesRequired.length < MAX_ADDRESSES_FROM_RESOLVER, \"Max resolver cache size met\");\n        // Because this is designed to be called internally in constructors, we don't\n        // check the address exists already in the resolver\n        addressCache[name] = resolver.getAddress(name);\n    }\n}\n\n\ninterface IFeePool {\n    // Views\n    function getExchangeFeeRateForSynth(bytes32 synthKey) external view returns (uint);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function FEE_ADDRESS() external view returns (address);\n\n    function feesAvailable(address account) external view returns (uint, uint);\n\n    function isFeesClaimable(address account) external view returns (bool);\n\n    function totalFeesAvailable() external view returns (uint);\n\n    function totalRewardsAvailable() external view returns (uint);\n\n    // Mutative Functions\n    function claimFees() external returns (bool);\n\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\n\n    function closeCurrentFeePeriod() external;\n\n    // Restricted: used internally to Synthetix\n    function appendAccountIssuanceRecord(\n        address account,\n        uint lockedAmount,\n        uint debtEntryIndex\n    ) external;\n\n    function recordFeePaid(uint sUSDAmount) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.synthetix.io/contracts/SafeDecimalMath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n\n\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ninterface ISystemStatus {\n    // Views\n    function requireSystemActive() external view;\n\n    function requireIssuanceActive() external view;\n\n    function requireExchangeActive() external view;\n\n    function requireSynthActive(bytes32 currencyKey) external view;\n\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n}\n\n\ninterface IRewardEscrow {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n\n    function numVestingEntries(address account) external view returns (uint);\n\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\n\n    function totalVestedAccountBalance(address account) external view returns (uint);\n\n    // Mutative functions\n    function appendVestingEntry(address account, uint quantity) external;\n\n    function vest() external;\n}\n\n\ninterface IExchangeRates {\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function anyRateIsStale(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint);\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozen\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function ratesAndStaleForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory, bool);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    function rateStalePeriod() external view returns (uint);\n}\n\n\ninterface ISynthetixState {\n    // Views\n    function debtLedger(uint index) external view returns (uint);\n\n    function issuanceRatio() external view returns (uint);\n\n    function issuanceData(address account) external view returns (uint initialDebtOwnership, uint debtEntryIndex);\n\n    function debtLedgerLength() external view returns (uint);\n\n    function hasIssued(address account) external view returns (bool);\n\n    function lastDebtLedgerEntry() external view returns (uint);\n\n    // Mutative functions\n    function incrementTotalIssuerCount() external;\n\n    function decrementTotalIssuerCount() external;\n\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\n\n    function appendDebtLedgerValue(uint value) external;\n\n    function clearIssuanceData(address account) external;\n}\n\n\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n}\n\n\ninterface IIssuer {\n    // Views\n    function canBurnSynths(address account) external view returns (bool);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    // Restricted: used internally to Synthetix\n    function issueSynths(address from, uint amount) external;\n\n    function issueSynthsOnBehalf(\n        address issueFor,\n        address from,\n        uint amount\n    ) external;\n\n    function issueMaxSynths(address from) external;\n\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n\n    function burnSynths(address from, uint amount) external;\n\n    function burnSynthsOnBehalf(\n        address burnForAddress,\n        address from,\n        uint amount\n    ) external;\n\n    function burnSynthsToTarget(address from) external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\n\n    function liquidateDelinquentAccount(address account, uint susdAmount, address liquidator) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\ninterface IRewardsDistribution {\n    // Mutative functions\n    function distributeRewards(uint amount) external returns (bool);\n}\n\n\ninterface IDelegateApprovals {\n    // Views\n    function canBurnFor(address authoriser, address delegate) external view returns (bool);\n\n    function canIssueFor(address authoriser, address delegate) external view returns (bool);\n\n    function canClaimFor(address authoriser, address delegate) external view returns (bool);\n\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool);\n\n    // Mutative\n    function approveAllDelegatePowers(address delegate) external;\n\n    function removeAllDelegatePowers(address delegate) external;\n\n    function approveBurnOnBehalf(address delegate) external;\n\n    function removeBurnOnBehalf(address delegate) external;\n\n    function approveIssueOnBehalf(address delegate) external;\n\n    function removeIssueOnBehalf(address delegate) external;\n\n    function approveClaimOnBehalf(address delegate) external;\n\n    function removeClaimOnBehalf(address delegate) external;\n\n    function approveExchangeOnBehalf(address delegate) external;\n\n    function removeExchangeOnBehalf(address delegate) external;\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/FeePoolState\ncontract FeePoolState is Owned, SelfDestructible, LimitedSetup {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== STATE VARIABLES ========== */\n\n    uint8 public constant FEE_PERIOD_LENGTH = 6;\n\n    address public feePool;\n\n    // The IssuanceData activity that's happened in a fee period.\n    struct IssuanceData {\n        uint debtPercentage;\n        uint debtEntryIndex;\n    }\n\n    // The IssuanceData activity that's happened in a fee period.\n    mapping(address => IssuanceData[FEE_PERIOD_LENGTH]) public accountIssuanceLedger;\n\n    constructor(address _owner, IFeePool _feePool) public Owned(_owner) SelfDestructible() LimitedSetup(6 weeks) {\n        feePool = address(_feePool);\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice set the FeePool contract as it is the only authority to be able to call\n     * appendAccountIssuanceRecord with the onlyFeePool modifer\n     * @dev Must be set by owner when FeePool logic is upgraded\n     */\n    function setFeePool(IFeePool _feePool) external onlyOwner {\n        feePool = address(_feePool);\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Get an accounts issuanceData for\n     * @param account users account\n     * @param index Index in the array to retrieve. Upto FEE_PERIOD_LENGTH\n     */\n    function getAccountsDebtEntry(address account, uint index)\n        public\n        view\n        returns (uint debtPercentage, uint debtEntryIndex)\n    {\n        require(index < FEE_PERIOD_LENGTH, \"index exceeds the FEE_PERIOD_LENGTH\");\n\n        debtPercentage = accountIssuanceLedger[account][index].debtPercentage;\n        debtEntryIndex = accountIssuanceLedger[account][index].debtEntryIndex;\n    }\n\n    /**\n     * @notice Find the oldest debtEntryIndex for the corresponding closingDebtIndex\n     * @param account users account\n     * @param closingDebtIndex the last periods debt index on close\n     */\n    function applicableIssuanceData(address account, uint closingDebtIndex) external view returns (uint, uint) {\n        IssuanceData[FEE_PERIOD_LENGTH] memory issuanceData = accountIssuanceLedger[account];\n\n        // We want to use the user's debtEntryIndex at when the period closed\n        // Find the oldest debtEntryIndex for the corresponding closingDebtIndex\n        for (uint i = 0; i < FEE_PERIOD_LENGTH; i++) {\n            if (closingDebtIndex >= issuanceData[i].debtEntryIndex) {\n                return (issuanceData[i].debtPercentage, issuanceData[i].debtEntryIndex);\n            }\n        }\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Logs an accounts issuance data in the current fee period which is then stored historically\n     * @param account Message.Senders account address\n     * @param debtRatio Debt of this account as a percentage of the global debt.\n     * @param debtEntryIndex The index in the global debt ledger. synthetix.synthetixState().issuanceData(account)\n     * @param currentPeriodStartDebtIndex The startingDebtIndex of the current fee period\n     * @dev onlyFeePool to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\n     * per fee period so we know to allocate the correct proportions of fees and rewards per period\n      accountIssuanceLedger[account][0] has the latest locked amount for the current period. This can be update as many time\n      accountIssuanceLedger[account][1-2] has the last locked amount for a previous period they minted or burned\n     */\n    function appendAccountIssuanceRecord(\n        address account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint currentPeriodStartDebtIndex\n    ) external onlyFeePool {\n        // Is the current debtEntryIndex within this fee period\n        if (accountIssuanceLedger[account][0].debtEntryIndex < currentPeriodStartDebtIndex) {\n            // If its older then shift the previous IssuanceData entries periods down to make room for the new one.\n            issuanceDataIndexOrder(account);\n        }\n\n        // Always store the latest IssuanceData entry at [0]\n        accountIssuanceLedger[account][0].debtPercentage = debtRatio;\n        accountIssuanceLedger[account][0].debtEntryIndex = debtEntryIndex;\n    }\n\n    /**\n     * @notice Pushes down the entire array of debt ratios per fee period\n     */\n    function issuanceDataIndexOrder(address account) private {\n        for (uint i = FEE_PERIOD_LENGTH - 2; i < FEE_PERIOD_LENGTH; i--) {\n            uint next = i + 1;\n            accountIssuanceLedger[account][next].debtPercentage = accountIssuanceLedger[account][i].debtPercentage;\n            accountIssuanceLedger[account][next].debtEntryIndex = accountIssuanceLedger[account][i].debtEntryIndex;\n        }\n    }\n\n    /**\n     * @notice Import issuer data from synthetixState.issuerData on FeePeriodClose() block #\n     * @dev Only callable by the contract owner, and only for 6 weeks after deployment.\n     * @param accounts Array of issuing addresses\n     * @param ratios Array of debt ratios\n     * @param periodToInsert The Fee Period to insert the historical records into\n     * @param feePeriodCloseIndex An accounts debtEntryIndex is valid when within the fee peroid,\n     * since the input ratio will be an average of the pervious periods it just needs to be\n     * > recentFeePeriods[periodToInsert].startingDebtIndex\n     * < recentFeePeriods[periodToInsert - 1].startingDebtIndex\n     */\n    function importIssuerData(\n        address[] calldata accounts,\n        uint[] calldata ratios,\n        uint periodToInsert,\n        uint feePeriodCloseIndex\n    ) external onlyOwner onlyDuringSetup {\n        require(accounts.length == ratios.length, \"Length mismatch\");\n\n        for (uint i = 0; i < accounts.length; i++) {\n            accountIssuanceLedger[accounts[i]][periodToInsert].debtPercentage = ratios[i];\n            accountIssuanceLedger[accounts[i]][periodToInsert].debtEntryIndex = feePeriodCloseIndex;\n            emit IssuanceDebtRatioEntry(accounts[i], ratios[i], feePeriodCloseIndex);\n        }\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyFeePool {\n        require(msg.sender == address(feePool), \"Only the FeePool contract can perform this action\");\n        _;\n    }\n\n    /* ========== Events ========== */\n    event IssuanceDebtRatioEntry(address indexed account, uint debtRatio, uint feePeriodCloseIndex);\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/State\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _associatedContract) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n// Inheritance\n\n\n/**\n * @notice  This contract is based on the code available from this blog\n * https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88/\n * Implements support for storing a keccak256 key and value pairs. It is the more flexible\n * and extensible option. This ensures data schema changes can be implemented without\n * requiring upgrades to the storage contract.\n */\n// https://docs.synthetix.io/contracts/EternalStorage\ncontract EternalStorage is Owned, State {\n    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {}\n\n    /* ========== DATA TYPES ========== */\n    mapping(bytes32 => uint) internal UIntStorage;\n    mapping(bytes32 => string) internal StringStorage;\n    mapping(bytes32 => address) internal AddressStorage;\n    mapping(bytes32 => bytes) internal BytesStorage;\n    mapping(bytes32 => bytes32) internal Bytes32Storage;\n    mapping(bytes32 => bool) internal BooleanStorage;\n    mapping(bytes32 => int) internal IntStorage;\n\n    // UIntStorage;\n    function getUIntValue(bytes32 record) external view returns (uint) {\n        return UIntStorage[record];\n    }\n\n    function setUIntValue(bytes32 record, uint value) external onlyAssociatedContract {\n        UIntStorage[record] = value;\n    }\n\n    function deleteUIntValue(bytes32 record) external onlyAssociatedContract {\n        delete UIntStorage[record];\n    }\n\n    // StringStorage\n    function getStringValue(bytes32 record) external view returns (string memory) {\n        return StringStorage[record];\n    }\n\n    function setStringValue(bytes32 record, string calldata value) external onlyAssociatedContract {\n        StringStorage[record] = value;\n    }\n\n    function deleteStringValue(bytes32 record) external onlyAssociatedContract {\n        delete StringStorage[record];\n    }\n\n    // AddressStorage\n    function getAddressValue(bytes32 record) external view returns (address) {\n        return AddressStorage[record];\n    }\n\n    function setAddressValue(bytes32 record, address value) external onlyAssociatedContract {\n        AddressStorage[record] = value;\n    }\n\n    function deleteAddressValue(bytes32 record) external onlyAssociatedContract {\n        delete AddressStorage[record];\n    }\n\n    // BytesStorage\n    function getBytesValue(bytes32 record) external view returns (bytes memory) {\n        return BytesStorage[record];\n    }\n\n    function setBytesValue(bytes32 record, bytes calldata value) external onlyAssociatedContract {\n        BytesStorage[record] = value;\n    }\n\n    function deleteBytesValue(bytes32 record) external onlyAssociatedContract {\n        delete BytesStorage[record];\n    }\n\n    // Bytes32Storage\n    function getBytes32Value(bytes32 record) external view returns (bytes32) {\n        return Bytes32Storage[record];\n    }\n\n    function setBytes32Value(bytes32 record, bytes32 value) external onlyAssociatedContract {\n        Bytes32Storage[record] = value;\n    }\n\n    function deleteBytes32Value(bytes32 record) external onlyAssociatedContract {\n        delete Bytes32Storage[record];\n    }\n\n    // BooleanStorage\n    function getBooleanValue(bytes32 record) external view returns (bool) {\n        return BooleanStorage[record];\n    }\n\n    function setBooleanValue(bytes32 record, bool value) external onlyAssociatedContract {\n        BooleanStorage[record] = value;\n    }\n\n    function deleteBooleanValue(bytes32 record) external onlyAssociatedContract {\n        delete BooleanStorage[record];\n    }\n\n    // IntStorage\n    function getIntValue(bytes32 record) external view returns (int) {\n        return IntStorage[record];\n    }\n\n    function setIntValue(bytes32 record, int value) external onlyAssociatedContract {\n        IntStorage[record] = value;\n    }\n\n    function deleteIntValue(bytes32 record) external onlyAssociatedContract {\n        delete IntStorage[record];\n    }\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/FeePoolEternalStorage\ncontract FeePoolEternalStorage is EternalStorage, LimitedSetup {\n    bytes32 internal constant LAST_FEE_WITHDRAWAL = \"last_fee_withdrawal\";\n\n    constructor(address _owner, address _feePool) public EternalStorage(_owner, _feePool) LimitedSetup(6 weeks) {}\n\n    function importFeeWithdrawalData(address[] calldata accounts, uint[] calldata feePeriodIDs)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        require(accounts.length == feePeriodIDs.length, \"Length mismatch\");\n\n        for (uint8 i = 0; i < accounts.length; i++) {\n            this.setUIntValue(keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, accounts[i])), feePeriodIDs[i]);\n        }\n    }\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/FeePool\ncontract FeePool is Owned, Proxyable, SelfDestructible, LimitedSetup, MixinResolver, IFeePool {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    // Exchange fee may not exceed 10%.\n    uint public constant MAX_EXCHANGE_FEE_RATE = 1e18 / 10;\n\n    // Where fees are pooled in sUSD.\n    address public constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\n\n    // sUSD currencyKey. Fees stored and paid in sUSD\n    bytes32 private sUSD = \"sUSD\";\n\n    // This struct represents the issuance activity that's happened in a fee period.\n    struct FeePeriod {\n        uint64 feePeriodId;\n        uint64 startingDebtIndex;\n        uint64 startTime;\n        uint feesToDistribute;\n        uint feesClaimed;\n        uint rewardsToDistribute;\n        uint rewardsClaimed;\n    }\n\n    // A staker(mintr) can claim from the previous fee period (7 days) only.\n    // Fee Periods stored and managed from [0], such that [0] is always\n    // the current active fee period which is not claimable until the\n    // public function closeCurrentFeePeriod() is called closing the\n    // current weeks collected fees. [1] is last weeks feeperiod\n    uint8 public constant FEE_PERIOD_LENGTH = 2;\n\n    FeePeriod[FEE_PERIOD_LENGTH] private _recentFeePeriods;\n    uint256 private _currentFeePeriod;\n\n    // How long a fee period lasts at a minimum. It is required for\n    // anyone to roll over the periods, so they are not guaranteed\n    // to roll over at exactly this duration, but the contract enforces\n    // that they cannot roll over any quicker than this duration.\n    uint public feePeriodDuration = 1 weeks;\n    // The fee period must be between 1 day and 60 days.\n    uint public constant MIN_FEE_PERIOD_DURATION = 1 days;\n    uint public constant MAX_FEE_PERIOD_DURATION = 60 days;\n\n    // Users are unable to claim fees if their collateralisation ratio drifts out of target treshold\n    uint public targetThreshold = (1 * SafeDecimalMath.unit()) / 100;\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant CONTRACT_FEEPOOLSTATE = \"FeePoolState\";\n    bytes32 private constant CONTRACT_FEEPOOLETERNALSTORAGE = \"FeePoolEternalStorage\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\n    bytes32 private constant CONTRACT_SYNTHETIXSTATE = \"SynthetixState\";\n    bytes32 private constant CONTRACT_REWARDESCROW = \"RewardEscrow\";\n    bytes32 private constant CONTRACT_DELEGATEAPPROVALS = \"DelegateApprovals\";\n    bytes32 private constant CONTRACT_REWARDSDISTRIBUTION = \"RewardsDistribution\";\n\n    bytes32[24] private addressesToCache = [\n        CONTRACT_SYSTEMSTATUS,\n        CONTRACT_SYNTHETIX,\n        CONTRACT_FEEPOOLSTATE,\n        CONTRACT_FEEPOOLETERNALSTORAGE,\n        CONTRACT_EXCHANGER,\n        CONTRACT_ISSUER,\n        CONTRACT_SYNTHETIXSTATE,\n        CONTRACT_REWARDESCROW,\n        CONTRACT_DELEGATEAPPROVALS,\n        CONTRACT_REWARDSDISTRIBUTION\n    ];\n\n    /* ========== ETERNAL STORAGE CONSTANTS ========== */\n\n    bytes32 private constant LAST_FEE_WITHDRAWAL = \"last_fee_withdrawal\";\n    bytes32 private constant SYNTH_EXCHANGE_FEE_RATE = \"synth_exchange_fee_rate\";\n\n    constructor(\n        address payable _proxy,\n        address _owner,\n        address _resolver\n    )\n        public\n        Owned(_owner)\n        SelfDestructible()\n        Proxyable(_proxy)\n        LimitedSetup(3 weeks)\n        MixinResolver(_resolver, addressesToCache)\n    {\n        // Set our initial fee period\n        _recentFeePeriodsStorage(0).feePeriodId = 1;\n        _recentFeePeriodsStorage(0).startTime = uint64(now);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS, \"Missing SystemStatus address\"));\n    }\n\n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX, \"Missing Synthetix address\"));\n    }\n\n    function feePoolState() internal view returns (FeePoolState) {\n        return FeePoolState(requireAndGetAddress(CONTRACT_FEEPOOLSTATE, \"Missing FeePoolState address\"));\n    }\n\n    function feePoolEternalStorage() internal view returns (FeePoolEternalStorage) {\n        return\n            FeePoolEternalStorage(\n                requireAndGetAddress(CONTRACT_FEEPOOLETERNALSTORAGE, \"Missing FeePoolEternalStorage address\")\n            );\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER, \"Missing Exchanger address\"));\n    }\n\n    function issuer() internal view returns (IIssuer) {\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER, \"Missing Issuer address\"));\n    }\n\n    function synthetixState() internal view returns (ISynthetixState) {\n        return ISynthetixState(requireAndGetAddress(CONTRACT_SYNTHETIXSTATE, \"Missing SynthetixState address\"));\n    }\n\n    function rewardEscrow() internal view returns (IRewardEscrow) {\n        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARDESCROW, \"Missing RewardEscrow address\"));\n    }\n\n    function delegateApprovals() internal view returns (IDelegateApprovals) {\n        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS, \"Missing DelegateApprovals address\"));\n    }\n\n    function rewardsDistribution() internal view returns (IRewardsDistribution) {\n        return\n            IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION, \"Missing RewardsDistribution address\"));\n    }\n\n    function recentFeePeriods(uint index)\n        external\n        view\n        returns (\n            uint64 feePeriodId,\n            uint64 startingDebtIndex,\n            uint64 startTime,\n            uint feesToDistribute,\n            uint feesClaimed,\n            uint rewardsToDistribute,\n            uint rewardsClaimed\n        )\n    {\n        FeePeriod memory feePeriod = _recentFeePeriodsStorage(index);\n        return (\n            feePeriod.feePeriodId,\n            feePeriod.startingDebtIndex,\n            feePeriod.startTime,\n            feePeriod.feesToDistribute,\n            feePeriod.feesClaimed,\n            feePeriod.rewardsToDistribute,\n            feePeriod.rewardsClaimed\n        );\n    }\n\n    function _recentFeePeriodsStorage(uint index) internal view returns (FeePeriod storage) {\n        return _recentFeePeriods[(_currentFeePeriod + index) % FEE_PERIOD_LENGTH];\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Logs an accounts issuance data per fee period\n     * @param account Message.Senders account address\n     * @param debtRatio Debt percentage this account has locked after minting or burning their synth\n     * @param debtEntryIndex The index in the global debt ledger. synthetixState.issuanceData(account)\n     * @dev onlyIssuer to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\n     * per fee period so we know to allocate the correct proportions of fees and rewards per period\n     */\n    function appendAccountIssuanceRecord(\n        address account,\n        uint debtRatio,\n        uint debtEntryIndex\n    ) external onlyIssuer {\n        feePoolState().appendAccountIssuanceRecord(\n            account,\n            debtRatio,\n            debtEntryIndex,\n            _recentFeePeriodsStorage(0).startingDebtIndex\n        );\n\n        emitIssuanceDebtRatioEntry(account, debtRatio, debtEntryIndex, _recentFeePeriodsStorage(0).startingDebtIndex);\n    }\n\n    /**\n     * @notice Set the fee period duration\n     */\n    function setFeePeriodDuration(uint _feePeriodDuration) external optionalProxy_onlyOwner {\n        require(_feePeriodDuration >= MIN_FEE_PERIOD_DURATION, \"value < MIN_FEE_PERIOD_DURATION\");\n        require(_feePeriodDuration <= MAX_FEE_PERIOD_DURATION, \"value > MAX_FEE_PERIOD_DURATION\");\n\n        feePeriodDuration = _feePeriodDuration;\n\n        emitFeePeriodDurationUpdated(_feePeriodDuration);\n    }\n\n    function setTargetThreshold(uint _percent) external optionalProxy_onlyOwner {\n        require(_percent <= 50, \"Threshold too high\");\n        targetThreshold = _percent.mul(SafeDecimalMath.unit()).div(100);\n    }\n\n    /**\n     * @notice The Exchanger contract informs us when fees are paid.\n     * @param amount susd amount in fees being paid.\n     */\n    function recordFeePaid(uint amount) external onlyExchangerOrSynth {\n        // Keep track off fees in sUSD in the open fee pool period.\n        _recentFeePeriodsStorage(0).feesToDistribute = _recentFeePeriodsStorage(0).feesToDistribute.add(amount);\n    }\n\n    /**\n     * @notice The RewardsDistribution contract informs us how many SNX rewards are sent to RewardEscrow to be claimed.\n     */\n    function setRewardsToDistribute(uint amount) external {\n        address rewardsAuthority = address(rewardsDistribution());\n        require(messageSender == rewardsAuthority || msg.sender == rewardsAuthority, \"Caller is not rewardsAuthority\");\n        // Add the amount of SNX rewards to distribute on top of any rolling unclaimed amount\n        _recentFeePeriodsStorage(0).rewardsToDistribute = _recentFeePeriodsStorage(0).rewardsToDistribute.add(amount);\n    }\n\n    /**\n     * @notice Close the current fee period and start a new one.\n     */\n    function closeCurrentFeePeriod() external {\n        require(_recentFeePeriodsStorage(0).startTime <= (now - feePeriodDuration), \"Too early to close fee period\");\n\n        systemStatus().requireIssuanceActive();\n\n        // Note:  when FEE_PERIOD_LENGTH = 2, periodClosing is the current period & periodToRollover is the last open claimable period\n        FeePeriod storage periodClosing = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2);\n        FeePeriod storage periodToRollover = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 1);\n\n        // Any unclaimed fees from the last period in the array roll back one period.\n        // Because of the subtraction here, they're effectively proportionally redistributed to those who\n        // have already claimed from the old period, available in the new period.\n        // The subtraction is important so we don't create a ticking time bomb of an ever growing\n        // number of fees that can never decrease and will eventually overflow at the end of the fee pool.\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).feesToDistribute = periodToRollover\n            .feesToDistribute\n            .sub(periodToRollover.feesClaimed)\n            .add(periodClosing.feesToDistribute);\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).rewardsToDistribute = periodToRollover\n            .rewardsToDistribute\n            .sub(periodToRollover.rewardsClaimed)\n            .add(periodClosing.rewardsToDistribute);\n\n        // Shift the previous fee periods across to make room for the new one.\n        _currentFeePeriod = _currentFeePeriod.add(FEE_PERIOD_LENGTH).sub(1).mod(FEE_PERIOD_LENGTH);\n\n        // Clear the first element of the array to make sure we don't have any stale values.\n        delete _recentFeePeriods[_currentFeePeriod];\n\n        // Open up the new fee period.\n        // Increment periodId from the recent closed period feePeriodId\n        _recentFeePeriodsStorage(0).feePeriodId = uint64(uint256(_recentFeePeriodsStorage(1).feePeriodId).add(1));\n        _recentFeePeriodsStorage(0).startingDebtIndex = uint64(synthetixState().debtLedgerLength());\n        _recentFeePeriodsStorage(0).startTime = uint64(now);\n\n        emitFeePeriodClosed(_recentFeePeriodsStorage(1).feePeriodId);\n    }\n\n    /**\n     * @notice Claim fees for last period when available or not already withdrawn.\n     */\n    function claimFees() external optionalProxy returns (bool) {\n        return _claimFees(messageSender);\n    }\n\n    /**\n     * @notice Delegated claimFees(). Call from the deletegated address\n     * and the fees will be sent to the claimingForAddress.\n     * approveClaimOnBehalf() must be called first to approve the deletage address\n     * @param claimingForAddress The account you are claiming fees for\n     */\n    function claimOnBehalf(address claimingForAddress) external optionalProxy returns (bool) {\n        require(delegateApprovals().canClaimFor(claimingForAddress, messageSender), \"Not approved to claim on behalf\");\n\n        return _claimFees(claimingForAddress);\n    }\n\n    function _claimFees(address claimingAddress) internal returns (bool) {\n        systemStatus().requireIssuanceActive();\n\n        uint rewardsPaid = 0;\n        uint feesPaid = 0;\n        uint availableFees;\n        uint availableRewards;\n\n        // Address won't be able to claim fees if it is too far below the target c-ratio.\n        // It will need to burn synths then try claiming again.\n        require(isFeesClaimable(claimingAddress), \"C-Ratio below penalty threshold\");\n\n        // Get the claimingAddress available fees and rewards\n        (availableFees, availableRewards) = feesAvailable(claimingAddress);\n\n        require(\n            availableFees > 0 || availableRewards > 0,\n            \"No fees or rewards available for period, or fees already claimed\"\n        );\n\n        // Record the address has claimed for this period\n        _setLastFeeWithdrawal(claimingAddress, _recentFeePeriodsStorage(1).feePeriodId);\n\n        if (availableFees > 0) {\n            // Record the fee payment in our recentFeePeriods\n            feesPaid = _recordFeePayment(availableFees);\n\n            // Send them their fees\n            _payFees(claimingAddress, feesPaid);\n        }\n\n        if (availableRewards > 0) {\n            // Record the reward payment in our recentFeePeriods\n            rewardsPaid = _recordRewardPayment(availableRewards);\n\n            // Send them their rewards\n            _payRewards(claimingAddress, rewardsPaid);\n        }\n\n        emitFeesClaimed(claimingAddress, feesPaid, rewardsPaid);\n\n        return true;\n    }\n\n    /**\n     * @notice Admin function to import the FeePeriod data from the previous contract\n     */\n    function importFeePeriod(\n        uint feePeriodIndex,\n        uint feePeriodId,\n        uint startingDebtIndex,\n        uint startTime,\n        uint feesToDistribute,\n        uint feesClaimed,\n        uint rewardsToDistribute,\n        uint rewardsClaimed\n    ) public optionalProxy_onlyOwner onlyDuringSetup {\n        require(startingDebtIndex <= synthetixState().debtLedgerLength(), \"Cannot import bad data\");\n\n        _recentFeePeriods[_currentFeePeriod.add(feePeriodIndex).mod(FEE_PERIOD_LENGTH)] = FeePeriod({\n            feePeriodId: uint64(feePeriodId),\n            startingDebtIndex: uint64(startingDebtIndex),\n            startTime: uint64(startTime),\n            feesToDistribute: feesToDistribute,\n            feesClaimed: feesClaimed,\n            rewardsToDistribute: rewardsToDistribute,\n            rewardsClaimed: rewardsClaimed\n        });\n    }\n\n    function setExchangeFeeRateForSynths(bytes32[] calldata synthKeys, uint256[] calldata exchangeFeeRates) external optionalProxy_onlyOwner\n    {\n        require(synthKeys.length == exchangeFeeRates.length, \"Array lengths dont match\");\n        for (uint i = 0; i < synthKeys.length; i++) {\n            require(exchangeFeeRates[i] <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\n            feePoolEternalStorage().setUIntValue(\n                keccak256(abi.encodePacked(SYNTH_EXCHANGE_FEE_RATE, synthKeys[i])),\n                exchangeFeeRates[i]\n            );\n            emitExchangeFeeUpdated(synthKeys[i], exchangeFeeRates[i]);\n        }\n    }\n\n    function getExchangeFeeRateForSynth(bytes32 synthKey) external view returns (uint exchangeFeeRate) {\n        exchangeFeeRate = feePoolEternalStorage().getUIntValue(\n            keccak256(abi.encodePacked(SYNTH_EXCHANGE_FEE_RATE, synthKey))\n        );\n    }\n\n    /**\n     * @notice Owner can escrow SNX. Owner to send the tokens to the RewardEscrow\n     * @param account Address to escrow tokens for\n     * @param quantity Amount of tokens to escrow\n     */\n    function appendVestingEntry(address account, uint quantity) public optionalProxy_onlyOwner {\n        // Transfer SNX from messageSender to the Reward Escrow\n        IERC20(address(synthetix())).transferFrom(messageSender, address(rewardEscrow()), quantity);\n\n        // Create Vesting Entry\n        rewardEscrow().appendVestingEntry(account, quantity);\n    }\n\n    /**\n     * @notice Record the fee payment in our recentFeePeriods.\n     * @param sUSDAmount The amount of fees priced in sUSD.\n     */\n    function _recordFeePayment(uint sUSDAmount) internal returns (uint) {\n        // Don't assign to the parameter\n        uint remainingToAllocate = sUSDAmount;\n\n        uint feesPaid;\n        // Start at the oldest period and record the amount, moving to newer periods\n        // until we've exhausted the amount.\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\n        for (uint i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\n            uint feesAlreadyClaimed = _recentFeePeriodsStorage(i).feesClaimed;\n            uint delta = _recentFeePeriodsStorage(i).feesToDistribute.sub(feesAlreadyClaimed);\n\n            if (delta > 0) {\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\n                uint amountInPeriod = delta < remainingToAllocate ? delta : remainingToAllocate;\n\n                _recentFeePeriodsStorage(i).feesClaimed = feesAlreadyClaimed.add(amountInPeriod);\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\n                feesPaid = feesPaid.add(amountInPeriod);\n\n                // No need to continue iterating if we've recorded the whole amount;\n                if (remainingToAllocate == 0) return feesPaid;\n\n                // We've exhausted feePeriods to distribute and no fees remain in last period\n                // User last to claim would in this scenario have their remainder slashed\n                if (i == 0 && remainingToAllocate > 0) {\n                    remainingToAllocate = 0;\n                }\n            }\n        }\n\n        return feesPaid;\n    }\n\n    /**\n     * @notice Record the reward payment in our recentFeePeriods.\n     * @param snxAmount The amount of SNX tokens.\n     */\n    function _recordRewardPayment(uint snxAmount) internal returns (uint) {\n        // Don't assign to the parameter\n        uint remainingToAllocate = snxAmount;\n\n        uint rewardPaid;\n\n        // Start at the oldest period and record the amount, moving to newer periods\n        // until we've exhausted the amount.\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\n        for (uint i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\n            uint toDistribute = _recentFeePeriodsStorage(i).rewardsToDistribute.sub(\n                _recentFeePeriodsStorage(i).rewardsClaimed\n            );\n\n            if (toDistribute > 0) {\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\n                uint amountInPeriod = toDistribute < remainingToAllocate ? toDistribute : remainingToAllocate;\n\n                _recentFeePeriodsStorage(i).rewardsClaimed = _recentFeePeriodsStorage(i).rewardsClaimed.add(amountInPeriod);\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\n                rewardPaid = rewardPaid.add(amountInPeriod);\n\n                // No need to continue iterating if we've recorded the whole amount;\n                if (remainingToAllocate == 0) return rewardPaid;\n\n                // We've exhausted feePeriods to distribute and no rewards remain in last period\n                // User last to claim would in this scenario have their remainder slashed\n                // due to rounding up of PreciseDecimal\n                if (i == 0 && remainingToAllocate > 0) {\n                    remainingToAllocate = 0;\n                }\n            }\n        }\n        return rewardPaid;\n    }\n\n    /**\n     * @notice Send the fees to claiming address.\n     * @param account The address to send the fees to.\n     * @param sUSDAmount The amount of fees priced in sUSD.\n     */\n    function _payFees(address account, uint sUSDAmount) internal notFeeAddress(account) {\n        // Grab the sUSD Synth\n        ISynth sUSDSynth = synthetix().synths(sUSD);\n\n        // NOTE: we do not control the FEE_ADDRESS so it is not possible to do an\n        // ERC20.approve() transaction to allow this feePool to call ERC20.transferFrom\n        // to the accounts address\n\n        // Burn the source amount\n        sUSDSynth.burn(FEE_ADDRESS, sUSDAmount);\n\n        // Mint their new synths\n        sUSDSynth.issue(account, sUSDAmount);\n    }\n\n    /**\n     * @notice Send the rewards to claiming address - will be locked in rewardEscrow.\n     * @param account The address to send the fees to.\n     * @param snxAmount The amount of SNX.\n     */\n    function _payRewards(address account, uint snxAmount) internal notFeeAddress(account) {\n        // Record vesting entry for claiming address and amount\n        // SNX already minted to rewardEscrow balance\n        rewardEscrow().appendVestingEntry(account, snxAmount);\n    }\n\n    /**\n     * @notice The total fees available in the system to be withdrawnn in sUSD\n     */\n    function totalFeesAvailable() external view returns (uint) {\n        uint totalFees = 0;\n\n        // Fees in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(_recentFeePeriodsStorage(i).feesToDistribute);\n            totalFees = totalFees.sub(_recentFeePeriodsStorage(i).feesClaimed);\n        }\n\n        return totalFees;\n    }\n\n    /**\n     * @notice The total SNX rewards available in the system to be withdrawn\n     */\n    function totalRewardsAvailable() external view returns (uint) {\n        uint totalRewards = 0;\n\n        // Rewards in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalRewards = totalRewards.add(_recentFeePeriodsStorage(i).rewardsToDistribute);\n            totalRewards = totalRewards.sub(_recentFeePeriodsStorage(i).rewardsClaimed);\n        }\n\n        return totalRewards;\n    }\n\n    /**\n     * @notice The fees available to be withdrawn by a specific account, priced in sUSD\n     * @dev Returns two amounts, one for fees and one for SNX rewards\n     */\n    function feesAvailable(address account) public view returns (uint, uint) {\n        // Add up the fees\n        uint[2][FEE_PERIOD_LENGTH] memory userFees = feesByPeriod(account);\n\n        uint totalFees = 0;\n        uint totalRewards = 0;\n\n        // Fees & Rewards in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(userFees[i][0]);\n            totalRewards = totalRewards.add(userFees[i][1]);\n        }\n\n        // And convert totalFees to sUSD\n        // Return totalRewards as is in SNX amount\n        return (totalFees, totalRewards);\n    }\n\n    /**\n     * @notice Check if a particular address is able to claim fees right now\n     * @param account The address you want to query for\n     */\n    function isFeesClaimable(address account) public view returns (bool) {\n        // Threshold is calculated from ratio % above the target ratio (issuanceRatio).\n        //  0  <  10%:   Claimable\n        // 10% > above:  Unable to claim\n        uint ratio = synthetix().collateralisationRatio(account);\n        uint targetRatio = synthetixState().issuanceRatio();\n\n        // Claimable if collateral ratio below target ratio\n        if (ratio < targetRatio) {\n            return true;\n        }\n\n        // Calculate the threshold for collateral ratio before fees can't be claimed.\n        uint ratio_threshold = targetRatio.multiplyDecimal(SafeDecimalMath.unit().add(targetThreshold));\n\n        // Not claimable if collateral ratio above threshold\n        if (ratio > ratio_threshold) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Calculates fees by period for an account, priced in sUSD\n     * @param account The address you want to query the fees for\n     */\n    function feesByPeriod(address account) public view returns (uint[2][FEE_PERIOD_LENGTH] memory results) {\n        // What's the user's debt entry index and the debt they owe to the system at current feePeriod\n        uint userOwnershipPercentage;\n        uint debtEntryIndex;\n        FeePoolState _feePoolState = feePoolState();\n\n        (userOwnershipPercentage, debtEntryIndex) = _feePoolState.getAccountsDebtEntry(account, 0);\n\n        // If they don't have any debt ownership and they never minted, they don't have any fees.\n        // User ownership can reduce to 0 if user burns all synths,\n        // however they could have fees applicable for periods they had minted in before so we check debtEntryIndex.\n        if (debtEntryIndex == 0 && userOwnershipPercentage == 0) {\n            uint[2][FEE_PERIOD_LENGTH] memory nullResults;\n            return nullResults;\n        }\n\n        // The [0] fee period is not yet ready to claim, but it is a fee period that they can have\n        // fees owing for, so we need to report on it anyway.\n        uint feesFromPeriod;\n        uint rewardsFromPeriod;\n        (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(0, userOwnershipPercentage, debtEntryIndex);\n\n        results[0][0] = feesFromPeriod;\n        results[0][1] = rewardsFromPeriod;\n\n        // Retrieve user's last fee claim by periodId\n        uint lastFeeWithdrawal = getLastFeeWithdrawal(account);\n\n        // Go through our fee periods from the oldest feePeriod[FEE_PERIOD_LENGTH - 1] and figure out what we owe them.\n        // Condition checks for periods > 0\n        for (uint i = FEE_PERIOD_LENGTH - 1; i > 0; i--) {\n            uint next = i - 1;\n            uint nextPeriodStartingDebtIndex = _recentFeePeriodsStorage(next).startingDebtIndex;\n\n            // We can skip the period, as no debt minted during period (next period's startingDebtIndex is still 0)\n            if (nextPeriodStartingDebtIndex > 0 && lastFeeWithdrawal < _recentFeePeriodsStorage(i).feePeriodId) {\n                // We calculate a feePeriod's closingDebtIndex by looking at the next feePeriod's startingDebtIndex\n                // we can use the most recent issuanceData[0] for the current feePeriod\n                // else find the applicableIssuanceData for the feePeriod based on the StartingDebtIndex of the period\n                uint closingDebtIndex = uint256(nextPeriodStartingDebtIndex).sub(1);\n\n                // Gas optimisation - to reuse debtEntryIndex if found new applicable one\n                // if applicable is 0,0 (none found) we keep most recent one from issuanceData[0]\n                // return if userOwnershipPercentage = 0)\n                (userOwnershipPercentage, debtEntryIndex) = _feePoolState.applicableIssuanceData(account, closingDebtIndex);\n\n                (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(i, userOwnershipPercentage, debtEntryIndex);\n\n                results[i][0] = feesFromPeriod;\n                results[i][1] = rewardsFromPeriod;\n            }\n        }\n    }\n\n    /**\n     * @notice ownershipPercentage is a high precision decimals uint based on\n     * wallet's debtPercentage. Gives a precise amount of the feesToDistribute\n     * for fees in the period. Precision factor is removed before results are\n     * returned.\n     * @dev The reported fees owing for the current period [0] are just a\n     * running balance until the fee period closes\n     */\n    function _feesAndRewardsFromPeriod(\n        uint period,\n        uint ownershipPercentage,\n        uint debtEntryIndex\n    ) internal view returns (uint, uint) {\n        // If it's zero, they haven't issued, and they have no fees OR rewards.\n        if (ownershipPercentage == 0) return (0, 0);\n\n        uint debtOwnershipForPeriod = ownershipPercentage;\n\n        // If period has closed we want to calculate debtPercentage for the period\n        if (period > 0) {\n            uint closingDebtIndex = uint256(_recentFeePeriodsStorage(period - 1).startingDebtIndex).sub(1);\n            debtOwnershipForPeriod = _effectiveDebtRatioForPeriod(closingDebtIndex, ownershipPercentage, debtEntryIndex);\n        }\n\n        // Calculate their percentage of the fees / rewards in this period\n        // This is a high precision integer.\n        uint feesFromPeriod = _recentFeePeriodsStorage(period).feesToDistribute.multiplyDecimal(debtOwnershipForPeriod);\n\n        uint rewardsFromPeriod = _recentFeePeriodsStorage(period).rewardsToDistribute.multiplyDecimal(\n            debtOwnershipForPeriod\n        );\n\n        return (feesFromPeriod.preciseDecimalToDecimal(), rewardsFromPeriod.preciseDecimalToDecimal());\n    }\n\n    function _effectiveDebtRatioForPeriod(\n        uint closingDebtIndex,\n        uint ownershipPercentage,\n        uint debtEntryIndex\n    ) internal view returns (uint) {\n        // Figure out their global debt percentage delta at end of fee Period.\n        // This is a high precision integer.\n        ISynthetixState _synthetixState = synthetixState();\n        uint feePeriodDebtOwnership = _synthetixState\n            .debtLedger(closingDebtIndex)\n            .divideDecimalRoundPrecise(_synthetixState.debtLedger(debtEntryIndex))\n            .multiplyDecimalRoundPrecise(ownershipPercentage);\n\n        return feePeriodDebtOwnership;\n    }\n\n    function effectiveDebtRatioForPeriod(address account, uint period) external view returns (uint) {\n        require(period != 0, \"Current period is not closed yet\");\n        require(period < FEE_PERIOD_LENGTH, \"Exceeds the FEE_PERIOD_LENGTH\");\n\n        // If the period being checked is uninitialised then return 0. This is only at the start of the system.\n        if (_recentFeePeriodsStorage(period - 1).startingDebtIndex == 0) return 0;\n\n        uint closingDebtIndex = uint256(_recentFeePeriodsStorage(period - 1).startingDebtIndex).sub(1);\n\n        uint ownershipPercentage;\n        uint debtEntryIndex;\n        (ownershipPercentage, debtEntryIndex) = feePoolState().applicableIssuanceData(account, closingDebtIndex);\n\n        // internal function will check closingDebtIndex has corresponding debtLedger entry\n        return _effectiveDebtRatioForPeriod(closingDebtIndex, ownershipPercentage, debtEntryIndex);\n    }\n\n    /**\n     * @notice Get the feePeriodID of the last claim this account made\n     * @param _claimingAddress account to check the last fee period ID claim for\n     * @return uint of the feePeriodID this account last claimed\n     */\n    function getLastFeeWithdrawal(address _claimingAddress) public view returns (uint) {\n        return feePoolEternalStorage().getUIntValue(keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, _claimingAddress)));\n    }\n\n    /**\n     * @notice Calculate the collateral ratio before user is blocked from claiming.\n     */\n    function getPenaltyThresholdRatio() public view returns (uint) {\n        uint targetRatio = synthetixState().issuanceRatio();\n\n        return targetRatio.multiplyDecimal(SafeDecimalMath.unit().add(targetThreshold));\n    }\n\n    /**\n     * @notice Set the feePeriodID of the last claim this account made\n     * @param _claimingAddress account to set the last feePeriodID claim for\n     * @param _feePeriodID the feePeriodID this account claimed fees for\n     */\n    function _setLastFeeWithdrawal(address _claimingAddress, uint _feePeriodID) internal {\n        feePoolEternalStorage().setUIntValue(\n            keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, _claimingAddress)),\n            _feePeriodID\n        );\n    }\n\n    /* ========== Modifiers ========== */\n    modifier onlyExchangerOrSynth {\n        bool isExchanger = msg.sender == address(exchanger());\n        bool isSynth = synthetix().synthsByAddress(msg.sender) != bytes32(0);\n\n        require(isExchanger || isSynth, \"Only Exchanger, Synths Authorised\");\n        _;\n    }\n\n    modifier onlyIssuer {\n        require(msg.sender == address(issuer()), \"FeePool: Only Issuer Authorised\");\n        _;\n    }\n\n    modifier notFeeAddress(address account) {\n        require(account != FEE_ADDRESS, \"Fee address not allowed\");\n        _;\n    }\n\n    /* ========== Proxy Events ========== */\n\n    event IssuanceDebtRatioEntry(\n        address indexed account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint feePeriodStartingDebtIndex\n    );\n    bytes32 private constant ISSUANCEDEBTRATIOENTRY_SIG = keccak256(\n        \"IssuanceDebtRatioEntry(address,uint256,uint256,uint256)\"\n    );\n\n    function emitIssuanceDebtRatioEntry(\n        address account,\n        uint debtRatio,\n        uint debtEntryIndex,\n        uint feePeriodStartingDebtIndex\n    ) internal {\n        proxy._emit(\n            abi.encode(debtRatio, debtEntryIndex, feePeriodStartingDebtIndex),\n            2,\n            ISSUANCEDEBTRATIOENTRY_SIG,\n            bytes32(uint256(uint160(account))),\n            0,\n            0\n        );\n    }\n\n    event SynthExchangeFeeUpdated(bytes32 synthKey, uint newExchangeFeeRate);\n    bytes32 private constant SYNTHEXCHANGEFEEUPDATED_SIG = keccak256(\"SynthExchangeFeeUpdated(bytes32,uint256)\");\n\n    function emitExchangeFeeUpdated(bytes32 synthKey, uint newExchangeFeeRate) internal {\n        proxy._emit(abi.encode(synthKey, newExchangeFeeRate), 1, SYNTHEXCHANGEFEEUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodDurationUpdated(uint newFeePeriodDuration);\n    bytes32 private constant FEEPERIODDURATIONUPDATED_SIG = keccak256(\"FeePeriodDurationUpdated(uint256)\");\n\n    function emitFeePeriodDurationUpdated(uint newFeePeriodDuration) internal {\n        proxy._emit(abi.encode(newFeePeriodDuration), 1, FEEPERIODDURATIONUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodClosed(uint feePeriodId);\n    bytes32 private constant FEEPERIODCLOSED_SIG = keccak256(\"FeePeriodClosed(uint256)\");\n\n    function emitFeePeriodClosed(uint feePeriodId) internal {\n        proxy._emit(abi.encode(feePeriodId), 1, FEEPERIODCLOSED_SIG, 0, 0, 0);\n    }\n\n    event FeesClaimed(address account, uint sUSDAmount, uint snxRewards);\n    bytes32 private constant FEESCLAIMED_SIG = keccak256(\"FeesClaimed(address,uint256,uint256)\");\n\n    function emitFeesClaimed(\n        address account,\n        uint sUSDAmount,\n        uint snxRewards\n    ) internal {\n        proxy._emit(abi.encode(account, sUSDAmount, snxRewards), 1, FEESCLAIMED_SIG, 0, 0, 0);\n    }\n}\n\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePeriodId\",\"type\":\"uint256\"}],\"name\":\"FeePeriodClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"FeePeriodDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snxRewards\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtEntryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePeriodStartingDebtIndex\",\"type\":\"uint256\"}],\"name\":\"IssuanceDebtRatioEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"SynthExchangeFeeUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADDRESSES_FROM_RESOLVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EXCHANGE_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtEntryIndex\",\"type\":\"uint256\"}],\"name\":\"appendAccountIssuanceRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"appendVestingEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimingForAddress\",\"type\":\"address\"}],\"name\":\"claimOnBehalf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCurrentFeePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"effectiveDebtRatioForPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesByPeriod\",\"outputs\":[{\"internalType\":\"uint256[2][2]\",\"name\":\"results\",\"type\":\"uint256[2][2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"}],\"name\":\"getExchangeFeeRateForSynth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeFeeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimingAddress\",\"type\":\"address\"}],\"name\":\"getLastFeeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPenaltyThresholdRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[24]\",\"name\":\"addressesRequired\",\"type\":\"bytes32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePeriodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDebtIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"name\":\"importFeePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeesClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"recentFeePeriods\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"feePeriodId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startingDebtIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"feesToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordFeePaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"synthKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exchangeFeeRates\",\"type\":\"uint256[]\"}],\"name\":\"setExchangeFeeRateForSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"setFeePeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolverAndSyncCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsToDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTargetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFeesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeePool","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"000000000000000000000000b440dd674e1243644791a4adfe3a2abb0a92d309000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe000000000000000000000000fbb6526ed92da8915d4843a86166020d0b7baad0","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}