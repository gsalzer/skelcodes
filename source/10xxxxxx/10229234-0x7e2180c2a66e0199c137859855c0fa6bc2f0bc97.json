{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\taddress public owner = msg.sender;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n  constructor () internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\tfunction setOwner(address _new)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t{\r\n\t\temit NewOwner(owner, _new);\r\n\t\towner = _new;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * @dev ERC20 token interface\r\n */\r\n contract ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\n contract Faucet is Ownable {\r\n     using SafeMath for uint256;\r\n\r\n     /* --- EVENTS --- */\r\n\r\n     event TokenExchanged(address receiver, uint etherReceived, uint tokenSent);\r\n\r\n     /* --- FIELDS / CONSTANTS --- */\r\n\r\n     address public tokenAddress;\r\n     uint16 public exchangeRate; // ETH -> token exchange rate\r\n     uint public exchangeLimit; // Max amount of ether allowed to exchange\r\n\r\n     /* --- PUBLIC/EXTERNAL FUNCTIONS --- */\r\n\r\n     constructor(address _tokenAddress, uint16 _exchangeRate, uint _exchangeLimit) public {\r\n         tokenAddress = _tokenAddress;\r\n         exchangeRate = _exchangeRate;\r\n         exchangeLimit = _exchangeLimit;\r\n     }\r\n\r\n     function() public payable {\r\n         require(msg.value <= exchangeLimit);\r\n\r\n         uint denomintator = 100000000000000; // 14 decimals\r\n         uint transferAmount = msg.value.mul(exchangeRate).div(denomintator);\r\n         require(transferAmount > 0);\r\n         require(ERC20(tokenAddress).transfer(msg.sender, transferAmount), \"insufficient erc20 token balance\");\r\n\r\n         emit TokenExchanged(msg.sender, msg.value, transferAmount);\r\n     }\r\n\r\n     function withdrawEther(uint amount) onlyOwner public {\r\n         owner.transfer(amount);\r\n     }\r\n\r\n     function withdrawToken(uint amount) onlyOwner public {\r\n         ERC20(tokenAddress).transfer(owner, amount);\r\n     }\r\n\r\n     function getTokenBalance() public view returns (uint) {\r\n         return ERC20(tokenAddress).balanceOf(this);\r\n     }\r\n\r\n     function getEtherBalance() public view returns (uint) {\r\n         return address(this).balance;\r\n     }\r\n\r\n     function updateExchangeRate(uint16 newExchangeRate) onlyOwner public {\r\n         exchangeRate = newExchangeRate;\r\n     }\r\n\r\n     function updateExchangeLimit(uint newExchangeLimit) onlyOwner public {\r\n         exchangeLimit = newExchangeLimit;\r\n     }\r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeLimit\",\"type\":\"uint256\"}],\"name\":\"updateExchangeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint16\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_exchangeRate\",\"type\":\"uint16\"},{\"name\":\"_exchangeLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSent\",\"type\":\"uint256\"}],\"name\":\"TokenExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"Faucet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e0000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000056bc75e2d63100000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c93357fed859bc191f3bc37b5925110d89b4d601106fa8e96ec80e1e8b2af74a"}]}