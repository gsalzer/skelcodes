{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title NEST and NToken lock-up contract\r\n * @dev NEST and NToken deposit and withdrawal\r\n */\r\ncontract Nest_3_TokenSave {\r\n    using SafeMath for uint256;\r\n    \r\n    Nest_3_VoteFactory _voteFactory;                                 //  Voting contract\r\n    mapping(address => mapping(address => uint256))  _baseMapping;   //  Ledger token=>user=>amount\r\n    \r\n    /**\r\n    * @dev initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor(address voteFactory) public {\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory); \r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory); \r\n    }\r\n    \r\n    /**\r\n    * @dev Withdrawing\r\n    * @param num Withdrawing amount\r\n    * @param token Lock-up token address\r\n    * @param target Transfer target\r\n    */\r\n    function takeOut(uint256 num, address token, address target) public onlyContract {\r\n        require(num <= _baseMapping[token][address(target)], \"Insufficient storage balance\");\r\n        _baseMapping[token][address(target)] = _baseMapping[token][address(target)].sub(num);\r\n        ERC20(token).transfer(address(target), num);\r\n    }\r\n    \r\n    /**\r\n    * @dev Depositing\r\n    * @param num Depositing amount\r\n    * @param token Lock-up token address\r\n    * @param target Depositing target\r\n    */\r\n    function depositIn(uint256 num, address token, address target) public onlyContract {\r\n        require(ERC20(token).transferFrom(address(target),address(this),num), \"Authorization transfer failed\");  \r\n        _baseMapping[token][address(target)] = _baseMapping[token][address(target)].add(num);\r\n    }\r\n    \r\n    /**\r\n    * @dev Check the amount\r\n    * @param sender Check address\r\n    * @param token Lock-up token address\r\n    * @return uint256 Check address corresponding lock-up limit \r\n    */\r\n    function checkAmount(address sender, address token) public view returns(uint256) {\r\n        return _baseMapping[token][address(sender)];\r\n    }\r\n    \r\n    // Administrators only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(address(msg.sender)), \"No authority\");\r\n        _;\r\n    }\r\n    \r\n    // Only for bonus logic contract\r\n    modifier onlyContract(){\r\n        require(_voteFactory.checkAddress(\"nest.v3.tokenAbonus\") == address(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// ERC20 contract\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Voting factory\r\ninterface Nest_3_VoteFactory {\r\n    // Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t// Check whether the administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"depositIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"takeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nest_3_TokenSave","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3159e3967ddd9e1ee8f4107afc8406131c544652247581fdfa309b108d47ab67"}]}