{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract DeadManSwitch {\r\n    \r\n    uint256 public expirationTime = 1589481422;\r\n    address[] public Benificiaries;\r\n    address payable owner;\r\n    uint256 public lastPing;\r\n    \r\n    constructor() public{\r\n        owner = msg.sender;\r\n        lastPing = block.timestamp;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You need to be the owner of the contract to execute this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier afterExpiration() {\r\n        require(block.timestamp > expirationTime, \"Operation is not allowed yet.\");\r\n        _;\r\n    }\r\n    \r\n    function withdraw() public onlyOwner afterExpiration {\r\n        uint256 currentBalance = address(this).balance; \r\n        ping();\r\n        owner.transfer(currentBalance);\r\n    }\r\n    \r\n    function diposite() public payable onlyOwner {\r\n        require(msg.value > 0, \"Diposite has to be more than 0\");\r\n        ping();\r\n    }\r\n    \r\n    function ping() public onlyOwner {\r\n        lastPing = block.timestamp;\r\n    }\r\n    \r\n    function isOwnerAlive() public view returns(bool) {\r\n        if (block.timestamp - lastPing > 3 days) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function becomeSoleBeneficiary() public {\r\n        require(!isOwnerAlive(), \"Owener is not dead yet.\");\r\n        uint256 currentBalance = address(this).balance; \r\n        address payable soleBeneficiary = msg.sender;\r\n        soleBeneficiary.transfer(currentBalance);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Benificiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeSoleBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diposite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnerAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeadManSwitch","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://023d72094c0a81dd6f13cb17df69e1ff1708899271cd216e8a9c19b4e24a56ce"}]}