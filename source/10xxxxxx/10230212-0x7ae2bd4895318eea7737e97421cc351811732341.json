{"status":"1","message":"OK","result":[{"SourceCode":"// File: canonical-weth/contracts/WETH9.sol\r\n\r\n// Copyright (C) 2015, 2016, 2017 Dapphub\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.4.22;\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n                    GNU GENERAL PUBLIC LICENSE\r\n                       Version 3, 29 June 2007\r\n\r\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\r\n Everyone is permitted to copy and distribute verbatim copies\r\n of this license document, but changing it is not allowed.\r\n\r\n                            Preamble\r\n\r\n  The GNU General Public License is a free, copyleft license for\r\nsoftware and other kinds of works.\r\n\r\n  The licenses for most software and other practical works are designed\r\nto take away your freedom to share and change the works.  By contrast,\r\nthe GNU General Public License is intended to guarantee your freedom to\r\nshare and change all versions of a program--to make sure it remains free\r\nsoftware for all its users.  We, the Free Software Foundation, use the\r\nGNU General Public License for most of our software; it applies also to\r\nany other work released this way by its authors.  You can apply it to\r\nyour programs, too.\r\n\r\n  When we speak of free software, we are referring to freedom, not\r\nprice.  Our General Public Licenses are designed to make sure that you\r\nhave the freedom to distribute copies of free software (and charge for\r\nthem if you wish), that you receive source code or can get it if you\r\nwant it, that you can change the software or use pieces of it in new\r\nfree programs, and that you know you can do these things.\r\n\r\n  To protect your rights, we need to prevent others from denying you\r\nthese rights or asking you to surrender the rights.  Therefore, you have\r\ncertain responsibilities if you distribute copies of the software, or if\r\nyou modify it: responsibilities to respect the freedom of others.\r\n\r\n  For example, if you distribute copies of such a program, whether\r\ngratis or for a fee, you must pass on to the recipients the same\r\nfreedoms that you received.  You must make sure that they, too, receive\r\nor can get the source code.  And you must show them these terms so they\r\nknow their rights.\r\n\r\n  Developers that use the GNU GPL protect your rights with two steps:\r\n(1) assert copyright on the software, and (2) offer you this License\r\ngiving you legal permission to copy, distribute and/or modify it.\r\n\r\n  For the developers' and authors' protection, the GPL clearly explains\r\nthat there is no warranty for this free software.  For both users' and\r\nauthors' sake, the GPL requires that modified versions be marked as\r\nchanged, so that their problems will not be attributed erroneously to\r\nauthors of previous versions.\r\n\r\n  Some devices are designed to deny users access to install or run\r\nmodified versions of the software inside them, although the manufacturer\r\ncan do so.  This is fundamentally incompatible with the aim of\r\nprotecting users' freedom to change the software.  The systematic\r\npattern of such abuse occurs in the area of products for individuals to\r\nuse, which is precisely where it is most unacceptable.  Therefore, we\r\nhave designed this version of the GPL to prohibit the practice for those\r\nproducts.  If such problems arise substantially in other domains, we\r\nstand ready to extend this provision to those domains in future versions\r\nof the GPL, as needed to protect the freedom of users.\r\n\r\n  Finally, every program is threatened constantly by software patents.\r\nStates should not allow patents to restrict development and use of\r\nsoftware on general-purpose computers, but in those that do, we wish to\r\navoid the special danger that patents applied to a free program could\r\nmake it effectively proprietary.  To prevent this, the GPL assures that\r\npatents cannot be used to render the program non-free.\r\n\r\n  The precise terms and conditions for copying, distribution and\r\nmodification follow.\r\n\r\n                       TERMS AND CONDITIONS\r\n\r\n  0. Definitions.\r\n\r\n  \"This License\" refers to version 3 of the GNU General Public License.\r\n\r\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\r\nworks, such as semiconductor masks.\r\n\r\n  \"The Program\" refers to any copyrightable work licensed under this\r\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\r\n\"recipients\" may be individuals or organizations.\r\n\r\n  To \"modify\" a work means to copy from or adapt all or part of the work\r\nin a fashion requiring copyright permission, other than the making of an\r\nexact copy.  The resulting work is called a \"modified version\" of the\r\nearlier work or a work \"based on\" the earlier work.\r\n\r\n  A \"covered work\" means either the unmodified Program or a work based\r\non the Program.\r\n\r\n  To \"propagate\" a work means to do anything with it that, without\r\npermission, would make you directly or secondarily liable for\r\ninfringement under applicable copyright law, except executing it on a\r\ncomputer or modifying a private copy.  Propagation includes copying,\r\ndistribution (with or without modification), making available to the\r\npublic, and in some countries other activities as well.\r\n\r\n  To \"convey\" a work means any kind of propagation that enables other\r\nparties to make or receive copies.  Mere interaction with a user through\r\na computer network, with no transfer of a copy, is not conveying.\r\n\r\n  An interactive user interface displays \"Appropriate Legal Notices\"\r\nto the extent that it includes a convenient and prominently visible\r\nfeature that (1) displays an appropriate copyright notice, and (2)\r\ntells the user that there is no warranty for the work (except to the\r\nextent that warranties are provided), that licensees may convey the\r\nwork under this License, and how to view a copy of this License.  If\r\nthe interface presents a list of user commands or options, such as a\r\nmenu, a prominent item in the list meets this criterion.\r\n\r\n  1. Source Code.\r\n\r\n  The \"source code\" for a work means the preferred form of the work\r\nfor making modifications to it.  \"Object code\" means any non-source\r\nform of a work.\r\n\r\n  A \"Standard Interface\" means an interface that either is an official\r\nstandard defined by a recognized standards body, or, in the case of\r\ninterfaces specified for a particular programming language, one that\r\nis widely used among developers working in that language.\r\n\r\n  The \"System Libraries\" of an executable work include anything, other\r\nthan the work as a whole, that (a) is included in the normal form of\r\npackaging a Major Component, but which is not part of that Major\r\nComponent, and (b) serves only to enable use of the work with that\r\nMajor Component, or to implement a Standard Interface for which an\r\nimplementation is available to the public in source code form.  A\r\n\"Major Component\", in this context, means a major essential component\r\n(kernel, window system, and so on) of the specific operating system\r\n(if any) on which the executable work runs, or a compiler used to\r\nproduce the work, or an object code interpreter used to run it.\r\n\r\n  The \"Corresponding Source\" for a work in object code form means all\r\nthe source code needed to generate, install, and (for an executable\r\nwork) run the object code and to modify the work, including scripts to\r\ncontrol those activities.  However, it does not include the work's\r\nSystem Libraries, or general-purpose tools or generally available free\r\nprograms which are used unmodified in performing those activities but\r\nwhich are not part of the work.  For example, Corresponding Source\r\nincludes interface definition files associated with source files for\r\nthe work, and the source code for shared libraries and dynamically\r\nlinked subprograms that the work is specifically designed to require,\r\nsuch as by intimate data communication or control flow between those\r\nsubprograms and other parts of the work.\r\n\r\n  The Corresponding Source need not include anything that users\r\ncan regenerate automatically from other parts of the Corresponding\r\nSource.\r\n\r\n  The Corresponding Source for a work in source code form is that\r\nsame work.\r\n\r\n  2. Basic Permissions.\r\n\r\n  All rights granted under this License are granted for the term of\r\ncopyright on the Program, and are irrevocable provided the stated\r\nconditions are met.  This License explicitly affirms your unlimited\r\npermission to run the unmodified Program.  The output from running a\r\ncovered work is covered by this License only if the output, given its\r\ncontent, constitutes a covered work.  This License acknowledges your\r\nrights of fair use or other equivalent, as provided by copyright law.\r\n\r\n  You may make, run and propagate covered works that you do not\r\nconvey, without conditions so long as your license otherwise remains\r\nin force.  You may convey covered works to others for the sole purpose\r\nof having them make modifications exclusively for you, or provide you\r\nwith facilities for running those works, provided that you comply with\r\nthe terms of this License in conveying all material for which you do\r\nnot control copyright.  Those thus making or running the covered works\r\nfor you must do so exclusively on your behalf, under your direction\r\nand control, on terms that prohibit them from making any copies of\r\nyour copyrighted material outside their relationship with you.\r\n\r\n  Conveying under any other circumstances is permitted solely under\r\nthe conditions stated below.  Sublicensing is not allowed; section 10\r\nmakes it unnecessary.\r\n\r\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\r\n\r\n  No covered work shall be deemed part of an effective technological\r\nmeasure under any applicable law fulfilling obligations under article\r\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\r\nsimilar laws prohibiting or restricting circumvention of such\r\nmeasures.\r\n\r\n  When you convey a covered work, you waive any legal power to forbid\r\ncircumvention of technological measures to the extent such circumvention\r\nis effected by exercising rights under this License with respect to\r\nthe covered work, and you disclaim any intention to limit operation or\r\nmodification of the work as a means of enforcing, against the work's\r\nusers, your or third parties' legal rights to forbid circumvention of\r\ntechnological measures.\r\n\r\n  4. Conveying Verbatim Copies.\r\n\r\n  You may convey verbatim copies of the Program's source code as you\r\nreceive it, in any medium, provided that you conspicuously and\r\nappropriately publish on each copy an appropriate copyright notice;\r\nkeep intact all notices stating that this License and any\r\nnon-permissive terms added in accord with section 7 apply to the code;\r\nkeep intact all notices of the absence of any warranty; and give all\r\nrecipients a copy of this License along with the Program.\r\n\r\n  You may charge any price or no price for each copy that you convey,\r\nand you may offer support or warranty protection for a fee.\r\n\r\n  5. Conveying Modified Source Versions.\r\n\r\n  You may convey a work based on the Program, or the modifications to\r\nproduce it from the Program, in the form of source code under the\r\nterms of section 4, provided that you also meet all of these conditions:\r\n\r\n    a) The work must carry prominent notices stating that you modified\r\n    it, and giving a relevant date.\r\n\r\n    b) The work must carry prominent notices stating that it is\r\n    released under this License and any conditions added under section\r\n    7.  This requirement modifies the requirement in section 4 to\r\n    \"keep intact all notices\".\r\n\r\n    c) You must license the entire work, as a whole, under this\r\n    License to anyone who comes into possession of a copy.  This\r\n    License will therefore apply, along with any applicable section 7\r\n    additional terms, to the whole of the work, and all its parts,\r\n    regardless of how they are packaged.  This License gives no\r\n    permission to license the work in any other way, but it does not\r\n    invalidate such permission if you have separately received it.\r\n\r\n    d) If the work has interactive user interfaces, each must display\r\n    Appropriate Legal Notices; however, if the Program has interactive\r\n    interfaces that do not display Appropriate Legal Notices, your\r\n    work need not make them do so.\r\n\r\n  A compilation of a covered work with other separate and independent\r\nworks, which are not by their nature extensions of the covered work,\r\nand which are not combined with it such as to form a larger program,\r\nin or on a volume of a storage or distribution medium, is called an\r\n\"aggregate\" if the compilation and its resulting copyright are not\r\nused to limit the access or legal rights of the compilation's users\r\nbeyond what the individual works permit.  Inclusion of a covered work\r\nin an aggregate does not cause this License to apply to the other\r\nparts of the aggregate.\r\n\r\n  6. Conveying Non-Source Forms.\r\n\r\n  You may convey a covered work in object code form under the terms\r\nof sections 4 and 5, provided that you also convey the\r\nmachine-readable Corresponding Source under the terms of this License,\r\nin one of these ways:\r\n\r\n    a) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by the\r\n    Corresponding Source fixed on a durable physical medium\r\n    customarily used for software interchange.\r\n\r\n    b) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by a\r\n    written offer, valid for at least three years and valid for as\r\n    long as you offer spare parts or customer support for that product\r\n    model, to give anyone who possesses the object code either (1) a\r\n    copy of the Corresponding Source for all the software in the\r\n    product that is covered by this License, on a durable physical\r\n    medium customarily used for software interchange, for a price no\r\n    more than your reasonable cost of physically performing this\r\n    conveying of source, or (2) access to copy the\r\n    Corresponding Source from a network server at no charge.\r\n\r\n    c) Convey individual copies of the object code with a copy of the\r\n    written offer to provide the Corresponding Source.  This\r\n    alternative is allowed only occasionally and noncommercially, and\r\n    only if you received the object code with such an offer, in accord\r\n    with subsection 6b.\r\n\r\n    d) Convey the object code by offering access from a designated\r\n    place (gratis or for a charge), and offer equivalent access to the\r\n    Corresponding Source in the same way through the same place at no\r\n    further charge.  You need not require recipients to copy the\r\n    Corresponding Source along with the object code.  If the place to\r\n    copy the object code is a network server, the Corresponding Source\r\n    may be on a different server (operated by you or a third party)\r\n    that supports equivalent copying facilities, provided you maintain\r\n    clear directions next to the object code saying where to find the\r\n    Corresponding Source.  Regardless of what server hosts the\r\n    Corresponding Source, you remain obligated to ensure that it is\r\n    available for as long as needed to satisfy these requirements.\r\n\r\n    e) Convey the object code using peer-to-peer transmission, provided\r\n    you inform other peers where the object code and Corresponding\r\n    Source of the work are being offered to the general public at no\r\n    charge under subsection 6d.\r\n\r\n  A separable portion of the object code, whose source code is excluded\r\nfrom the Corresponding Source as a System Library, need not be\r\nincluded in conveying the object code work.\r\n\r\n  A \"User Product\" is either (1) a \"consumer product\", which means any\r\ntangible personal property which is normally used for personal, family,\r\nor household purposes, or (2) anything designed or sold for incorporation\r\ninto a dwelling.  In determining whether a product is a consumer product,\r\ndoubtful cases shall be resolved in favor of coverage.  For a particular\r\nproduct received by a particular user, \"normally used\" refers to a\r\ntypical or common use of that class of product, regardless of the status\r\nof the particular user or of the way in which the particular user\r\nactually uses, or expects or is expected to use, the product.  A product\r\nis a consumer product regardless of whether the product has substantial\r\ncommercial, industrial or non-consumer uses, unless such uses represent\r\nthe only significant mode of use of the product.\r\n\r\n  \"Installation Information\" for a User Product means any methods,\r\nprocedures, authorization keys, or other information required to install\r\nand execute modified versions of a covered work in that User Product from\r\na modified version of its Corresponding Source.  The information must\r\nsuffice to ensure that the continued functioning of the modified object\r\ncode is in no case prevented or interfered with solely because\r\nmodification has been made.\r\n\r\n  If you convey an object code work under this section in, or with, or\r\nspecifically for use in, a User Product, and the conveying occurs as\r\npart of a transaction in which the right of possession and use of the\r\nUser Product is transferred to the recipient in perpetuity or for a\r\nfixed term (regardless of how the transaction is characterized), the\r\nCorresponding Source conveyed under this section must be accompanied\r\nby the Installation Information.  But this requirement does not apply\r\nif neither you nor any third party retains the ability to install\r\nmodified object code on the User Product (for example, the work has\r\nbeen installed in ROM).\r\n\r\n  The requirement to provide Installation Information does not include a\r\nrequirement to continue to provide support service, warranty, or updates\r\nfor a work that has been modified or installed by the recipient, or for\r\nthe User Product in which it has been modified or installed.  Access to a\r\nnetwork may be denied when the modification itself materially and\r\nadversely affects the operation of the network or violates the rules and\r\nprotocols for communication across the network.\r\n\r\n  Corresponding Source conveyed, and Installation Information provided,\r\nin accord with this section must be in a format that is publicly\r\ndocumented (and with an implementation available to the public in\r\nsource code form), and must require no special password or key for\r\nunpacking, reading or copying.\r\n\r\n  7. Additional Terms.\r\n\r\n  \"Additional permissions\" are terms that supplement the terms of this\r\nLicense by making exceptions from one or more of its conditions.\r\nAdditional permissions that are applicable to the entire Program shall\r\nbe treated as though they were included in this License, to the extent\r\nthat they are valid under applicable law.  If additional permissions\r\napply only to part of the Program, that part may be used separately\r\nunder those permissions, but the entire Program remains governed by\r\nthis License without regard to the additional permissions.\r\n\r\n  When you convey a copy of a covered work, you may at your option\r\nremove any additional permissions from that copy, or from any part of\r\nit.  (Additional permissions may be written to require their own\r\nremoval in certain cases when you modify the work.)  You may place\r\nadditional permissions on material, added by you to a covered work,\r\nfor which you have or can give appropriate copyright permission.\r\n\r\n  Notwithstanding any other provision of this License, for material you\r\nadd to a covered work, you may (if authorized by the copyright holders of\r\nthat material) supplement the terms of this License with terms:\r\n\r\n    a) Disclaiming warranty or limiting liability differently from the\r\n    terms of sections 15 and 16 of this License; or\r\n\r\n    b) Requiring preservation of specified reasonable legal notices or\r\n    author attributions in that material or in the Appropriate Legal\r\n    Notices displayed by works containing it; or\r\n\r\n    c) Prohibiting misrepresentation of the origin of that material, or\r\n    requiring that modified versions of such material be marked in\r\n    reasonable ways as different from the original version; or\r\n\r\n    d) Limiting the use for publicity purposes of names of licensors or\r\n    authors of the material; or\r\n\r\n    e) Declining to grant rights under trademark law for use of some\r\n    trade names, trademarks, or service marks; or\r\n\r\n    f) Requiring indemnification of licensors and authors of that\r\n    material by anyone who conveys the material (or modified versions of\r\n    it) with contractual assumptions of liability to the recipient, for\r\n    any liability that these contractual assumptions directly impose on\r\n    those licensors and authors.\r\n\r\n  All other non-permissive additional terms are considered \"further\r\nrestrictions\" within the meaning of section 10.  If the Program as you\r\nreceived it, or any part of it, contains a notice stating that it is\r\ngoverned by this License along with a term that is a further\r\nrestriction, you may remove that term.  If a license document contains\r\na further restriction but permits relicensing or conveying under this\r\nLicense, you may add to a covered work material governed by the terms\r\nof that license document, provided that the further restriction does\r\nnot survive such relicensing or conveying.\r\n\r\n  If you add terms to a covered work in accord with this section, you\r\nmust place, in the relevant source files, a statement of the\r\nadditional terms that apply to those files, or a notice indicating\r\nwhere to find the applicable terms.\r\n\r\n  Additional terms, permissive or non-permissive, may be stated in the\r\nform of a separately written license, or stated as exceptions;\r\nthe above requirements apply either way.\r\n\r\n  8. Termination.\r\n\r\n  You may not propagate or modify a covered work except as expressly\r\nprovided under this License.  Any attempt otherwise to propagate or\r\nmodify it is void, and will automatically terminate your rights under\r\nthis License (including any patent licenses granted under the third\r\nparagraph of section 11).\r\n\r\n  However, if you cease all violation of this License, then your\r\nlicense from a particular copyright holder is reinstated (a)\r\nprovisionally, unless and until the copyright holder explicitly and\r\nfinally terminates your license, and (b) permanently, if the copyright\r\nholder fails to notify you of the violation by some reasonable means\r\nprior to 60 days after the cessation.\r\n\r\n  Moreover, your license from a particular copyright holder is\r\nreinstated permanently if the copyright holder notifies you of the\r\nviolation by some reasonable means, this is the first time you have\r\nreceived notice of violation of this License (for any work) from that\r\ncopyright holder, and you cure the violation prior to 30 days after\r\nyour receipt of the notice.\r\n\r\n  Termination of your rights under this section does not terminate the\r\nlicenses of parties who have received copies or rights from you under\r\nthis License.  If your rights have been terminated and not permanently\r\nreinstated, you do not qualify to receive new licenses for the same\r\nmaterial under section 10.\r\n\r\n  9. Acceptance Not Required for Having Copies.\r\n\r\n  You are not required to accept this License in order to receive or\r\nrun a copy of the Program.  Ancillary propagation of a covered work\r\noccurring solely as a consequence of using peer-to-peer transmission\r\nto receive a copy likewise does not require acceptance.  However,\r\nnothing other than this License grants you permission to propagate or\r\nmodify any covered work.  These actions infringe copyright if you do\r\nnot accept this License.  Therefore, by modifying or propagating a\r\ncovered work, you indicate your acceptance of this License to do so.\r\n\r\n  10. Automatic Licensing of Downstream Recipients.\r\n\r\n  Each time you convey a covered work, the recipient automatically\r\nreceives a license from the original licensors, to run, modify and\r\npropagate that work, subject to this License.  You are not responsible\r\nfor enforcing compliance by third parties with this License.\r\n\r\n  An \"entity transaction\" is a transaction transferring control of an\r\norganization, or substantially all assets of one, or subdividing an\r\norganization, or merging organizations.  If propagation of a covered\r\nwork results from an entity transaction, each party to that\r\ntransaction who receives a copy of the work also receives whatever\r\nlicenses to the work the party's predecessor in interest had or could\r\ngive under the previous paragraph, plus a right to possession of the\r\nCorresponding Source of the work from the predecessor in interest, if\r\nthe predecessor has it or can get it with reasonable efforts.\r\n\r\n  You may not impose any further restrictions on the exercise of the\r\nrights granted or affirmed under this License.  For example, you may\r\nnot impose a license fee, royalty, or other charge for exercise of\r\nrights granted under this License, and you may not initiate litigation\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that\r\nany patent claim is infringed by making, using, selling, offering for\r\nsale, or importing the Program or any portion of it.\r\n\r\n  11. Patents.\r\n\r\n  A \"contributor\" is a copyright holder who authorizes use under this\r\nLicense of the Program or a work on which the Program is based.  The\r\nwork thus licensed is called the contributor's \"contributor version\".\r\n\r\n  A contributor's \"essential patent claims\" are all patent claims\r\nowned or controlled by the contributor, whether already acquired or\r\nhereafter acquired, that would be infringed by some manner, permitted\r\nby this License, of making, using, or selling its contributor version,\r\nbut do not include claims that would be infringed only as a\r\nconsequence of further modification of the contributor version.  For\r\npurposes of this definition, \"control\" includes the right to grant\r\npatent sublicenses in a manner consistent with the requirements of\r\nthis License.\r\n\r\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\r\npatent license under the contributor's essential patent claims, to\r\nmake, use, sell, offer for sale, import and otherwise run, modify and\r\npropagate the contents of its contributor version.\r\n\r\n  In the following three paragraphs, a \"patent license\" is any express\r\nagreement or commitment, however denominated, not to enforce a patent\r\n(such as an express permission to practice a patent or covenant not to\r\nsue for patent infringement).  To \"grant\" such a patent license to a\r\nparty means to make such an agreement or commitment not to enforce a\r\npatent against the party.\r\n\r\n  If you convey a covered work, knowingly relying on a patent license,\r\nand the Corresponding Source of the work is not available for anyone\r\nto copy, free of charge and under the terms of this License, through a\r\npublicly available network server or other readily accessible means,\r\nthen you must either (1) cause the Corresponding Source to be so\r\navailable, or (2) arrange to deprive yourself of the benefit of the\r\npatent license for this particular work, or (3) arrange, in a manner\r\nconsistent with the requirements of this License, to extend the patent\r\nlicense to downstream recipients.  \"Knowingly relying\" means you have\r\nactual knowledge that, but for the patent license, your conveying the\r\ncovered work in a country, or your recipient's use of the covered work\r\nin a country, would infringe one or more identifiable patents in that\r\ncountry that you have reason to believe are valid.\r\n\r\n  If, pursuant to or in connection with a single transaction or\r\narrangement, you convey, or propagate by procuring conveyance of, a\r\ncovered work, and grant a patent license to some of the parties\r\nreceiving the covered work authorizing them to use, propagate, modify\r\nor convey a specific copy of the covered work, then the patent license\r\nyou grant is automatically extended to all recipients of the covered\r\nwork and works based on it.\r\n\r\n  A patent license is \"discriminatory\" if it does not include within\r\nthe scope of its coverage, prohibits the exercise of, or is\r\nconditioned on the non-exercise of one or more of the rights that are\r\nspecifically granted under this License.  You may not convey a covered\r\nwork if you are a party to an arrangement with a third party that is\r\nin the business of distributing software, under which you make payment\r\nto the third party based on the extent of your activity of conveying\r\nthe work, and under which the third party grants, to any of the\r\nparties who would receive the covered work from you, a discriminatory\r\npatent license (a) in connection with copies of the covered work\r\nconveyed by you (or copies made from those copies), or (b) primarily\r\nfor and in connection with specific products or compilations that\r\ncontain the covered work, unless you entered into that arrangement,\r\nor that patent license was granted, prior to 28 March 2007.\r\n\r\n  Nothing in this License shall be construed as excluding or limiting\r\nany implied license or other defenses to infringement that may\r\notherwise be available to you under applicable patent law.\r\n\r\n  12. No Surrender of Others' Freedom.\r\n\r\n  If conditions are imposed on you (whether by court order, agreement or\r\notherwise) that contradict the conditions of this License, they do not\r\nexcuse you from the conditions of this License.  If you cannot convey a\r\ncovered work so as to satisfy simultaneously your obligations under this\r\nLicense and any other pertinent obligations, then as a consequence you may\r\nnot convey it at all.  For example, if you agree to terms that obligate you\r\nto collect a royalty for further conveying from those to whom you convey\r\nthe Program, the only way you could satisfy both those terms and this\r\nLicense would be to refrain entirely from conveying the Program.\r\n\r\n  13. Use with the GNU Affero General Public License.\r\n\r\n  Notwithstanding any other provision of this License, you have\r\npermission to link or combine any covered work with a work licensed\r\nunder version 3 of the GNU Affero General Public License into a single\r\ncombined work, and to convey the resulting work.  The terms of this\r\nLicense will continue to apply to the part which is the covered work,\r\nbut the special requirements of the GNU Affero General Public License,\r\nsection 13, concerning interaction through a network will apply to the\r\ncombination as such.\r\n\r\n  14. Revised Versions of this License.\r\n\r\n  The Free Software Foundation may publish revised and/or new versions of\r\nthe GNU General Public License from time to time.  Such new versions will\r\nbe similar in spirit to the present version, but may differ in detail to\r\naddress new problems or concerns.\r\n\r\n  Each version is given a distinguishing version number.  If the\r\nProgram specifies that a certain numbered version of the GNU General\r\nPublic License \"or any later version\" applies to it, you have the\r\noption of following the terms and conditions either of that numbered\r\nversion or of any later version published by the Free Software\r\nFoundation.  If the Program does not specify a version number of the\r\nGNU General Public License, you may choose any version ever published\r\nby the Free Software Foundation.\r\n\r\n  If the Program specifies that a proxy can decide which future\r\nversions of the GNU General Public License can be used, that proxy's\r\npublic statement of acceptance of a version permanently authorizes you\r\nto choose that version for the Program.\r\n\r\n  Later license versions may give you additional or different\r\npermissions.  However, no additional obligations are imposed on any\r\nauthor or copyright holder as a result of your choosing to follow a\r\nlater version.\r\n\r\n  15. Disclaimer of Warranty.\r\n\r\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\r\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\r\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\r\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\r\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\r\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\r\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n\r\n  16. Limitation of Liability.\r\n\r\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\r\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\r\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\r\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\r\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\r\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\r\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\r\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\r\nSUCH DAMAGES.\r\n\r\n  17. Interpretation of Sections 15 and 16.\r\n\r\n  If the disclaimer of warranty and limitation of liability provided\r\nabove cannot be given local legal effect according to their terms,\r\nreviewing courts shall apply local law that most closely approximates\r\nan absolute waiver of all civil liability in connection with the\r\nProgram, unless a warranty or assumption of liability accompanies a\r\ncopy of the Program in return for a fee.\r\n\r\n                     END OF TERMS AND CONDITIONS\r\n\r\n            How to Apply These Terms to Your New Programs\r\n\r\n  If you develop a new program, and you want it to be of the greatest\r\npossible use to the public, the best way to achieve this is to make it\r\nfree software which everyone can redistribute and change under these terms.\r\n\r\n  To do so, attach the following notices to the program.  It is safest\r\nto attach them to the start of each source file to most effectively\r\nstate the exclusion of warranty; and each file should have at least\r\nthe \"copyright\" line and a pointer to where the full notice is found.\r\n\r\n    <one line to give the program's name and a brief idea of what it does.>\r\n    Copyright (C) <year>  <name of author>\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nAlso add information on how to contact you by electronic and paper mail.\r\n\r\n  If the program does terminal interaction, make it output a short\r\nnotice like this when it starts in an interactive mode:\r\n\r\n    <program>  Copyright (C) <year>  <name of author>\r\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\r\n    This is free software, and you are welcome to redistribute it\r\n    under certain conditions; type `show c' for details.\r\n\r\nThe hypothetical commands `show w' and `show c' should show the appropriate\r\nparts of the General Public License.  Of course, your program's commands\r\nmight be different; for a GUI interface, you would use an \"about box\".\r\n\r\n  You should also get your employer (if you work as a programmer) or school,\r\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\r\nFor more information on this, and how to apply and follow the GNU GPL, see\r\n<http://www.gnu.org/licenses/>.\r\n\r\n  The GNU General Public License does not permit incorporating your program\r\ninto proprietary programs.  If your program is a subroutine library, you\r\nmay consider it more useful to permit linking proprietary applications with\r\nthe library.  If this is what you want to do, use the GNU Lesser General\r\nPublic License instead of this License.  But first, please read\r\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\r\n\r\n*/\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Storage.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n//import { SafeMath } from \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n//import { Account } from \"./Account.sol\";\r\n//import { Cache } from \"./Cache.sol\";\r\n//import { Decimal } from \"./Decimal.sol\";\r\n//import { Interest } from \"./Interest.sol\";\r\n//import { Math } from \"./Math.sol\";\r\n//import { Monetary } from \"./Monetary.sol\";\r\n//import { Require } from \"./Require.sol\";\r\n//import { Time } from \"./Time.sol\";\r\n//import { Token } from \"./Token.sol\";\r\n//import { Types } from \"./Types.sol\";\r\n//import { IInterestSetter } from \"../interfaces/IInterestSetter.sol\";\r\n//import { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";\r\n\r\n\r\n/**\r\n * @title Storage\r\n * @author dYdX\r\n *\r\n * Functions for reading, writing, and verifying state in Solo\r\n */\r\nlibrary Storage {\r\n    using Cache for Cache.MarketCache;\r\n    using Storage for Storage.State;\r\n    using Math for uint256;\r\n    using Types for Types.Par;\r\n    using Types for Types.Wei;\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Storage\";\r\n\r\n    // ============ Structs ============\r\n\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n\r\n        // Contract address of the price oracle for this market\r\n        IPriceOracle priceOracle;\r\n\r\n        // Contract address of the interest setter for this market\r\n        IInterestSetter interestSetter;\r\n\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n\r\n        // marketId => Market\r\n        mapping (uint256 => Market) markets;\r\n\r\n        // owner => account number => Account\r\n        mapping (address => mapping (uint256 => Account.Storage)) accounts;\r\n\r\n        // Addresses that can control other users accounts\r\n        mapping (address => mapping (address => bool)) operators;\r\n\r\n        // Addresses that can control all users accounts\r\n        mapping (address => bool) globalOperators;\r\n\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function getToken(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return state.markets[marketId].token;\r\n    }\r\n\r\n    function getTotalPar(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.TotalPar memory)\r\n    {\r\n        return state.markets[marketId].totalPar;\r\n    }\r\n\r\n    function getIndex(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Interest.Index memory)\r\n    {\r\n        return state.markets[marketId].index;\r\n    }\r\n\r\n    function getNumExcessTokens(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Wei memory)\r\n    {\r\n        Interest.Index memory index = state.getIndex(marketId);\r\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\r\n\r\n        address token = state.getToken(marketId);\r\n\r\n        Types.Wei memory balanceWei = Types.Wei({\r\n            sign: true,\r\n            value: Token.balanceOf(token, address(this))\r\n        });\r\n\r\n        (\r\n            Types.Wei memory supplyWei,\r\n            Types.Wei memory borrowWei\r\n        ) = Interest.totalParToWei(totalPar, index);\r\n\r\n        // borrowWei is negative, so subtracting it makes the value more positive\r\n        return balanceWei.sub(borrowWei).sub(supplyWei);\r\n    }\r\n\r\n    function getStatus(\r\n        Storage.State storage state,\r\n        Account.Info memory account\r\n    )\r\n        internal\r\n        view\r\n        returns (Account.Status)\r\n    {\r\n        return state.accounts[account.owner][account.number].status;\r\n    }\r\n\r\n    function getPar(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Par memory)\r\n    {\r\n        return state.accounts[account.owner][account.number].balances[marketId];\r\n    }\r\n\r\n    function getWei(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Wei memory)\r\n    {\r\n        Types.Par memory par = state.getPar(account, marketId);\r\n\r\n        if (par.isZero()) {\r\n            return Types.zeroWei();\r\n        }\r\n\r\n        Interest.Index memory index = state.getIndex(marketId);\r\n        return Interest.parToWei(par, index);\r\n    }\r\n\r\n    function getLiquidationSpreadForPair(\r\n        Storage.State storage state,\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        uint256 result = state.riskParams.liquidationSpread.value;\r\n        result = Decimal.mul(result, Decimal.onePlus(state.markets[heldMarketId].spreadPremium));\r\n        result = Decimal.mul(result, Decimal.onePlus(state.markets[owedMarketId].spreadPremium));\r\n        return Decimal.D256({\r\n            value: result\r\n        });\r\n    }\r\n\r\n    function fetchNewIndex(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Interest.Index memory index\r\n    )\r\n        internal\r\n        view\r\n        returns (Interest.Index memory)\r\n    {\r\n        Interest.Rate memory rate = state.fetchInterestRate(marketId, index);\r\n\r\n        return Interest.calculateNewIndex(\r\n            index,\r\n            rate,\r\n            state.getTotalPar(marketId),\r\n            state.riskParams.earningsRate\r\n        );\r\n    }\r\n\r\n    function fetchInterestRate(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Interest.Index memory index\r\n    )\r\n        internal\r\n        view\r\n        returns (Interest.Rate memory)\r\n    {\r\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\r\n        (\r\n            Types.Wei memory supplyWei,\r\n            Types.Wei memory borrowWei\r\n        ) = Interest.totalParToWei(totalPar, index);\r\n\r\n        Interest.Rate memory rate = state.markets[marketId].interestSetter.getInterestRate(\r\n            state.getToken(marketId),\r\n            borrowWei.value,\r\n            supplyWei.value\r\n        );\r\n\r\n        return rate;\r\n    }\r\n\r\n    function fetchPrice(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (Monetary.Price memory)\r\n    {\r\n        IPriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle);\r\n        Monetary.Price memory price = oracle.getPrice(state.getToken(marketId));\r\n        Require.that(\r\n            price.value != 0,\r\n            FILE,\r\n            \"Price cannot be zero\",\r\n            marketId\r\n        );\r\n        return price;\r\n    }\r\n\r\n    function getAccountValues(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        Cache.MarketCache memory cache,\r\n        bool adjustForLiquidity\r\n    )\r\n        internal\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory)\r\n    {\r\n        Monetary.Value memory supplyValue;\r\n        Monetary.Value memory borrowValue;\r\n\r\n        uint256 numMarkets = cache.getNumMarkets();\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (!cache.hasMarket(m)) {\r\n                continue;\r\n            }\r\n\r\n            Types.Wei memory userWei = state.getWei(account, m);\r\n\r\n            if (userWei.isZero()) {\r\n                continue;\r\n            }\r\n\r\n            uint256 assetValue = userWei.value.mul(cache.getPrice(m).value);\r\n            Decimal.D256 memory adjust = Decimal.one();\r\n            if (adjustForLiquidity) {\r\n                adjust = Decimal.onePlus(state.markets[m].marginPremium);\r\n            }\r\n\r\n            if (userWei.sign) {\r\n                supplyValue.value = supplyValue.value.add(Decimal.div(assetValue, adjust));\r\n            } else {\r\n                borrowValue.value = borrowValue.value.add(Decimal.mul(assetValue, adjust));\r\n            }\r\n        }\r\n\r\n        return (supplyValue, borrowValue);\r\n    }\r\n\r\n    function isCollateralized(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        Cache.MarketCache memory cache,\r\n        bool requireMinBorrow\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // get account values (adjusted for liquidity)\r\n        (\r\n            Monetary.Value memory supplyValue,\r\n            Monetary.Value memory borrowValue\r\n        ) = state.getAccountValues(account, cache, /* adjustForLiquidity = */ true);\r\n\r\n        if (borrowValue.value == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (requireMinBorrow) {\r\n            Require.that(\r\n                borrowValue.value >= state.riskParams.minBorrowedValue.value,\r\n                FILE,\r\n                \"Borrow value too low\",\r\n                account.owner,\r\n                account.number,\r\n                borrowValue.value\r\n            );\r\n        }\r\n\r\n        uint256 requiredMargin = Decimal.mul(borrowValue.value, state.riskParams.marginRatio);\r\n\r\n        return supplyValue.value >= borrowValue.value.add(requiredMargin);\r\n    }\r\n\r\n    function isGlobalOperator(\r\n        Storage.State storage state,\r\n        address operator\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return state.globalOperators[operator];\r\n    }\r\n\r\n    function isLocalOperator(\r\n        Storage.State storage state,\r\n        address owner,\r\n        address operator\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return state.operators[owner][operator];\r\n    }\r\n\r\n    function requireIsGlobalOperator(\r\n        Storage.State storage state,\r\n        address operator\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        bool isValidOperator = state.isGlobalOperator(operator);\r\n\r\n        Require.that(\r\n            isValidOperator,\r\n            FILE,\r\n            \"Unpermissioned global operator\",\r\n            operator\r\n        );\r\n    }\r\n\r\n    function requireIsOperator(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        address operator\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        bool isValidOperator =\r\n            operator == account.owner\r\n            || state.isGlobalOperator(operator)\r\n            || state.isLocalOperator(account.owner, operator);\r\n\r\n        Require.that(\r\n            isValidOperator,\r\n            FILE,\r\n            \"Unpermissioned operator\",\r\n            operator\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Determine and set an account's balance based on the intended balance change. Return the\r\n     * equivalent amount in wei\r\n     */\r\n    function getNewParAndDeltaWei(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId,\r\n        Types.AssetAmount memory amount\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Par memory, Types.Wei memory)\r\n    {\r\n        Types.Par memory oldPar = state.getPar(account, marketId);\r\n\r\n        if (amount.value == 0 && amount.ref == Types.AssetReference.Delta) {\r\n            return (oldPar, Types.zeroWei());\r\n        }\r\n\r\n        Interest.Index memory index = state.getIndex(marketId);\r\n        Types.Wei memory oldWei = Interest.parToWei(oldPar, index);\r\n        Types.Par memory newPar;\r\n        Types.Wei memory deltaWei;\r\n\r\n        if (amount.denomination == Types.AssetDenomination.Wei) {\r\n            deltaWei = Types.Wei({\r\n                sign: amount.sign,\r\n                value: amount.value\r\n            });\r\n            if (amount.ref == Types.AssetReference.Target) {\r\n                deltaWei = deltaWei.sub(oldWei);\r\n            }\r\n            newPar = Interest.weiToPar(oldWei.add(deltaWei), index);\r\n        } else { // AssetDenomination.Par\r\n            newPar = Types.Par({\r\n                sign: amount.sign,\r\n                value: amount.value.to128()\r\n            });\r\n            if (amount.ref == Types.AssetReference.Delta) {\r\n                newPar = oldPar.add(newPar);\r\n            }\r\n            deltaWei = Interest.parToWei(newPar, index).sub(oldWei);\r\n        }\r\n\r\n        return (newPar, deltaWei);\r\n    }\r\n\r\n    function getNewParAndDeltaWeiForLiquidation(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId,\r\n        Types.AssetAmount memory amount\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Par memory, Types.Wei memory)\r\n    {\r\n        Types.Par memory oldPar = state.getPar(account, marketId);\r\n\r\n        Require.that(\r\n            !oldPar.isPositive(),\r\n            FILE,\r\n            \"Owed balance cannot be positive\",\r\n            account.owner,\r\n            account.number,\r\n            marketId\r\n        );\r\n\r\n        (\r\n            Types.Par memory newPar,\r\n            Types.Wei memory deltaWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            account,\r\n            marketId,\r\n            amount\r\n        );\r\n\r\n        // if attempting to over-repay the owed asset, bound it by the maximum\r\n        if (newPar.isPositive()) {\r\n            newPar = Types.zeroPar();\r\n            deltaWei = state.getWei(account, marketId).negative();\r\n        }\r\n\r\n        Require.that(\r\n            !deltaWei.isNegative() && oldPar.value >= newPar.value,\r\n            FILE,\r\n            \"Owed balance cannot increase\",\r\n            account.owner,\r\n            account.number,\r\n            marketId\r\n        );\r\n\r\n        // if not paying back enough wei to repay any par, then bound wei to zero\r\n        if (oldPar.equals(newPar)) {\r\n            deltaWei = Types.zeroWei();\r\n        }\r\n\r\n        return (newPar, deltaWei);\r\n    }\r\n\r\n    function isVaporizable(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        Cache.MarketCache memory cache\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool hasNegative = false;\r\n        uint256 numMarkets = cache.getNumMarkets();\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (!cache.hasMarket(m)) {\r\n                continue;\r\n            }\r\n            Types.Par memory par = state.getPar(account, m);\r\n            if (par.isZero()) {\r\n                continue;\r\n            } else if (par.sign) {\r\n                return false;\r\n            } else {\r\n                hasNegative = true;\r\n            }\r\n        }\r\n        return hasNegative;\r\n    }\r\n\r\n    // =============== Setter Functions ===============\r\n\r\n    function updateIndex(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        returns (Interest.Index memory)\r\n    {\r\n        Interest.Index memory index = state.getIndex(marketId);\r\n        if (index.lastUpdate == Time.currentTime()) {\r\n            return index;\r\n        }\r\n        return state.markets[marketId].index = state.fetchNewIndex(marketId, index);\r\n    }\r\n\r\n    function setStatus(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        Account.Status status\r\n    )\r\n        internal\r\n    {\r\n        state.accounts[account.owner][account.number].status = status;\r\n    }\r\n\r\n    function setPar(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId,\r\n        Types.Par memory newPar\r\n    )\r\n        internal\r\n    {\r\n        Types.Par memory oldPar = state.getPar(account, marketId);\r\n\r\n        if (Types.equals(oldPar, newPar)) {\r\n            return;\r\n        }\r\n\r\n        // updateTotalPar\r\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\r\n\r\n        // roll-back oldPar\r\n        if (oldPar.sign) {\r\n            totalPar.supply = uint256(totalPar.supply).sub(oldPar.value).to128();\r\n        } else {\r\n            totalPar.borrow = uint256(totalPar.borrow).sub(oldPar.value).to128();\r\n        }\r\n\r\n        // roll-forward newPar\r\n        if (newPar.sign) {\r\n            totalPar.supply = uint256(totalPar.supply).add(newPar.value).to128();\r\n        } else {\r\n            totalPar.borrow = uint256(totalPar.borrow).add(newPar.value).to128();\r\n        }\r\n\r\n        state.markets[marketId].totalPar = totalPar;\r\n        state.accounts[account.owner][account.number].balances[marketId] = newPar;\r\n    }\r\n\r\n    /**\r\n     * Determine and set an account's balance based on a change in wei\r\n     */\r\n    function setParFromDeltaWei(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 marketId,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        if (deltaWei.isZero()) {\r\n            return;\r\n        }\r\n        Interest.Index memory index = state.getIndex(marketId);\r\n        Types.Wei memory oldWei = state.getWei(account, marketId);\r\n        Types.Wei memory newWei = oldWei.add(deltaWei);\r\n        Types.Par memory newPar = Interest.weiToPar(newWei, index);\r\n        state.setPar(\r\n            account,\r\n            marketId,\r\n            newPar\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/State.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title State\r\n * @author dYdX\r\n *\r\n * Base-level contract that holds the state of Solo\r\n */\r\ncontract State\r\n{\r\n    Storage.State g_state;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Require.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title Require\r\n * @author dYdX\r\n *\r\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\r\n */\r\nlibrary Require {\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant ASCII_ZERO = 48; // '0'\r\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\r\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\r\n    bytes2 constant COLON = 0x3a20; // ': '\r\n    bytes2 constant COMMA = 0x2c20; // ', '\r\n    bytes2 constant LPAREN = 0x203c; // ' <'\r\n    byte constant RPAREN = 0x3e; // '>'\r\n    uint256 constant FOUR_BIT_MASK = 0xf;\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA,\r\n        uint256 payloadB\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB,\r\n        uint256 payloadC\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        COMMA,\r\n                        stringify(payloadC),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        bytes32 payloadA\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        bytes32 payloadA,\r\n        uint256 payloadB,\r\n        uint256 payloadC\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringifyTruncated(file),\r\n                        COLON,\r\n                        stringifyTruncated(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        COMMA,\r\n                        stringify(payloadC),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    function stringifyTruncated(\r\n        bytes32 input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        // put the input bytes into the result\r\n        bytes memory result = abi.encodePacked(input);\r\n\r\n        // determine the length of the input by finding the location of the last non-zero byte\r\n        for (uint256 i = 32; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // find the last non-zero byte in order to determine the length\r\n            if (result[i] != 0) {\r\n                uint256 length = i + 1;\r\n\r\n                /* solium-disable-next-line security/no-inline-assembly */\r\n                assembly {\r\n                    mstore(result, length) // r.length = length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // all bytes are zero\r\n        return new bytes(0);\r\n    }\r\n\r\n    function stringify(\r\n        uint256 input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        if (input == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        // get the final string length\r\n        uint256 j = input;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n\r\n        // allocate the string\r\n        bytes memory bstr = new bytes(length);\r\n\r\n        // populate the string starting with the least-significant character\r\n        j = input;\r\n        for (uint256 i = length; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // take last decimal digit\r\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\r\n\r\n            // remove the last decimal digit\r\n            j /= 10;\r\n        }\r\n\r\n        return bstr;\r\n    }\r\n\r\n    function stringify(\r\n        address input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 z = uint256(input);\r\n\r\n        // addresses are \"0x\" followed by 20 bytes of data which take up 2 characters each\r\n        bytes memory result = new bytes(42);\r\n\r\n        // populate the result with \"0x\"\r\n        result[0] = byte(uint8(ASCII_ZERO));\r\n        result[1] = byte(uint8(ASCII_LOWER_EX));\r\n\r\n        // for each byte (starting from the lowest byte), populate the result with two characters\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            // each byte takes two characters\r\n            uint256 shift = i * 2;\r\n\r\n            // populate the least-significant character\r\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n\r\n            // populate the most-significant character\r\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function stringify(\r\n        bytes32 input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 z = uint256(input);\r\n\r\n        // bytes32 are \"0x\" followed by 32 bytes of data which take up 2 characters each\r\n        bytes memory result = new bytes(66);\r\n\r\n        // populate the result with \"0x\"\r\n        result[0] = byte(uint8(ASCII_ZERO));\r\n        result[1] = byte(uint8(ASCII_LOWER_EX));\r\n\r\n        // for each byte (starting from the lowest byte), populate the result with two characters\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            // each byte takes two characters\r\n            uint256 shift = i * 2;\r\n\r\n            // populate the least-significant character\r\n            result[65 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n\r\n            // populate the most-significant character\r\n            result[64 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function char(\r\n        uint256 input\r\n    )\r\n        private\r\n        pure\r\n        returns (byte)\r\n    {\r\n        // return ASCII digit (0-9)\r\n        if (input < 10) {\r\n            return byte(uint8(input + ASCII_ZERO));\r\n        }\r\n\r\n        // return ASCII letter (a-f)\r\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Math.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Math\r\n * @author dYdX\r\n *\r\n * Library for non-standard Math functions\r\n */\r\nlibrary Math {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Math\";\r\n\r\n    // ============ Library Functions ============\r\n\r\n    /*\r\n     * Return target * (numerator / denominator).\r\n     */\r\n    function getPartial(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(numerator).div(denominator);\r\n    }\r\n\r\n    /*\r\n     * Return target * (numerator / denominator), but rounded up.\r\n     */\r\n    function getPartialRoundUp(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (target == 0 || numerator == 0) {\r\n            // SafeMath will check for zero denominator\r\n            return SafeMath.div(0, denominator);\r\n        }\r\n        return target.mul(numerator).sub(1).div(denominator).add(1);\r\n    }\r\n\r\n    function to128(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        uint128 result = uint128(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint128\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to96(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        uint96 result = uint96(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint96\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to32(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        uint32 result = uint32(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint32\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function min(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Decimal.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Decimal\r\n * @author dYdX\r\n *\r\n * Library that defines a fixed-point number with 18 decimal places.\r\n */\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function one()\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: BASE });\r\n    }\r\n\r\n    function onePlus(\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: d.value.add(BASE) });\r\n    }\r\n\r\n    function mul(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, d.value, BASE);\r\n    }\r\n\r\n    function div(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, BASE, d.value);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Time.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title Time\r\n * @author dYdX\r\n *\r\n * Library for dealing with time, assuming timestamps fit within 32 bits (valid until year 2106)\r\n */\r\nlibrary Time {\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function currentTime()\r\n        internal\r\n        view\r\n        returns (uint32)\r\n    {\r\n        return Math.to32(block.timestamp);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Types.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Types\r\n * @author dYdX\r\n *\r\n * Library for interacting with the basic structs used in Solo\r\n */\r\nlibrary Types {\r\n    using Math for uint256;\r\n\r\n    // ============ AssetAmount ============\r\n\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par  // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Par (Principal Amount) ============\r\n\r\n    // Total borrow and supply values for a market\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    // Individual principal amount for an account\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    function zeroPar()\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: false,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function sub(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return add(a, negative(b));\r\n    }\r\n\r\n    function add(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        Par memory result;\r\n        if (a.sign == b.sign) {\r\n            result.sign = a.sign;\r\n            result.value = SafeMath.add(a.value, b.value).to128();\r\n        } else {\r\n            if (a.value >= b.value) {\r\n                result.sign = a.sign;\r\n                result.value = SafeMath.sub(a.value, b.value).to128();\r\n            } else {\r\n                result.sign = b.sign;\r\n                result.value = SafeMath.sub(b.value, a.value).to128();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function equals(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (a.value == b.value) {\r\n            if (a.value == 0) {\r\n                return true;\r\n            }\r\n            return a.sign == b.sign;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function negative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: !a.sign,\r\n            value: a.value\r\n        });\r\n    }\r\n\r\n    function isNegative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return !a.sign && a.value > 0;\r\n    }\r\n\r\n    function isPositive(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.sign && a.value > 0;\r\n    }\r\n\r\n    function isZero(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.value == 0;\r\n    }\r\n\r\n    // ============ Wei (Token Amount) ============\r\n\r\n    // Individual token amount for an account\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n\r\n    function zeroWei()\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return Wei({\r\n            sign: false,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function sub(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return add(a, negative(b));\r\n    }\r\n\r\n    function add(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        Wei memory result;\r\n        if (a.sign == b.sign) {\r\n            result.sign = a.sign;\r\n            result.value = SafeMath.add(a.value, b.value);\r\n        } else {\r\n            if (a.value >= b.value) {\r\n                result.sign = a.sign;\r\n                result.value = SafeMath.sub(a.value, b.value);\r\n            } else {\r\n                result.sign = b.sign;\r\n                result.value = SafeMath.sub(b.value, a.value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function equals(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (a.value == b.value) {\r\n            if (a.value == 0) {\r\n                return true;\r\n            }\r\n            return a.sign == b.sign;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function negative(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return Wei({\r\n            sign: !a.sign,\r\n            value: a.value\r\n        });\r\n    }\r\n\r\n    function isNegative(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return !a.sign && a.value > 0;\r\n    }\r\n\r\n    function isPositive(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.sign && a.value > 0;\r\n    }\r\n\r\n    function isZero(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.value == 0;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Interest.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Interest\r\n * @author dYdX\r\n *\r\n * Library for managing the interest rate and interest indexes of Solo\r\n */\r\nlibrary Interest {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Interest\";\r\n    uint64 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n\r\n    // ============ Library Functions ============\r\n\r\n    /**\r\n     * Get a new market Index based on the old index and market interest rate.\r\n     * Calculate interest for borrowers by using the formula rate * time. Approximates\r\n     * continuously-compounded interest when called frequently, but is much more\r\n     * gas-efficient to calculate. For suppliers, the interest rate is adjusted by the earningsRate,\r\n     * then prorated the across all suppliers.\r\n     *\r\n     * @param  index         The old index for a market\r\n     * @param  rate          The current interest rate of the market\r\n     * @param  totalPar      The total supply and borrow par values of the market\r\n     * @param  earningsRate  The portion of the interest that is forwarded to the suppliers\r\n     * @return               The updated index for a market\r\n     */\r\n    function calculateNewIndex(\r\n        Index memory index,\r\n        Rate memory rate,\r\n        Types.TotalPar memory totalPar,\r\n        Decimal.D256 memory earningsRate\r\n    )\r\n        internal\r\n        view\r\n        returns (Index memory)\r\n    {\r\n        (\r\n            Types.Wei memory supplyWei,\r\n            Types.Wei memory borrowWei\r\n        ) = totalParToWei(totalPar, index);\r\n\r\n        // get interest increase for borrowers\r\n        uint32 currentTime = Time.currentTime();\r\n        uint256 borrowInterest = rate.value.mul(uint256(currentTime).sub(index.lastUpdate));\r\n\r\n        // get interest increase for suppliers\r\n        uint256 supplyInterest;\r\n        if (Types.isZero(supplyWei)) {\r\n            supplyInterest = 0;\r\n        } else {\r\n            supplyInterest = Decimal.mul(borrowInterest, earningsRate);\r\n            if (borrowWei.value < supplyWei.value) {\r\n                supplyInterest = Math.getPartial(supplyInterest, borrowWei.value, supplyWei.value);\r\n            }\r\n        }\r\n        assert(supplyInterest <= borrowInterest);\r\n\r\n        return Index({\r\n            borrow: Math.getPartial(index.borrow, borrowInterest, BASE).add(index.borrow).to96(),\r\n            supply: Math.getPartial(index.supply, supplyInterest, BASE).add(index.supply).to96(),\r\n            lastUpdate: currentTime\r\n        });\r\n    }\r\n\r\n    function newIndex()\r\n        internal\r\n        view\r\n        returns (Index memory)\r\n    {\r\n        return Index({\r\n            borrow: BASE,\r\n            supply: BASE,\r\n            lastUpdate: Time.currentTime()\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Convert a principal amount to a token amount given an index.\r\n     */\r\n    function parToWei(\r\n        Types.Par memory input,\r\n        Index memory index\r\n    )\r\n        internal\r\n        pure\r\n        returns (Types.Wei memory)\r\n    {\r\n        uint256 inputValue = uint256(input.value);\r\n        if (input.sign) {\r\n            return Types.Wei({\r\n                sign: true,\r\n                value: inputValue.getPartial(index.supply, BASE)\r\n            });\r\n        } else {\r\n            return Types.Wei({\r\n                sign: false,\r\n                value: inputValue.getPartialRoundUp(index.borrow, BASE)\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Convert a token amount to a principal amount given an index.\r\n     */\r\n    function weiToPar(\r\n        Types.Wei memory input,\r\n        Index memory index\r\n    )\r\n        internal\r\n        pure\r\n        returns (Types.Par memory)\r\n    {\r\n        if (input.sign) {\r\n            return Types.Par({\r\n                sign: true,\r\n                value: input.value.getPartial(BASE, index.supply).to128()\r\n            });\r\n        } else {\r\n            return Types.Par({\r\n                sign: false,\r\n                value: input.value.getPartialRoundUp(BASE, index.borrow).to128()\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Convert the total supply and borrow principal amounts of a market to total supply and borrow\r\n     * token amounts.\r\n     */\r\n    function totalParToWei(\r\n        Types.TotalPar memory totalPar,\r\n        Index memory index\r\n    )\r\n        internal\r\n        pure\r\n        returns (Types.Wei memory, Types.Wei memory)\r\n    {\r\n        Types.Par memory supplyPar = Types.Par({\r\n            sign: true,\r\n            value: totalPar.supply\r\n        });\r\n        Types.Par memory borrowPar = Types.Par({\r\n            sign: false,\r\n            value: totalPar.borrow\r\n        });\r\n        Types.Wei memory supplyWei = parToWei(supplyPar, index);\r\n        Types.Wei memory borrowWei = parToWei(borrowPar, index);\r\n        return (supplyWei, borrowWei);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IInterestSetter.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title IInterestSetter\r\n * @author dYdX\r\n *\r\n * Interface that Interest Setters for Solo must implement in order to report interest rates.\r\n */\r\ninterface IInterestSetter {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Get the interest rate of a token given some borrowed and supplied amounts\r\n     *\r\n     * @param  token        The address of the ERC20 token for the market\r\n     * @param  borrowWei    The total borrowed token amount for the market\r\n     * @param  supplyWei    The total supplied token amount for the market\r\n     * @return              The interest rate per second\r\n     */\r\n    function getInterestRate(\r\n        address token,\r\n        uint256 borrowWei,\r\n        uint256 supplyWei\r\n    )\r\n        external\r\n        view\r\n        returns (Interest.Rate memory);\r\n}\r\n\r\n// File: contracts/protocol/lib/Monetary.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title Monetary\r\n * @author dYdX\r\n *\r\n * Library for types involving money\r\n */\r\nlibrary Monetary {\r\n\r\n    /*\r\n     * The price of a base-unit of an asset.\r\n     */\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n\r\n    /*\r\n     * Total value of an some amount of an asset. Equal to (price * amount).\r\n     */\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IPriceOracle.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author dYdX\r\n *\r\n * Interface that Price Oracles for Solo must implement in order to report prices.\r\n */\r\ncontract IPriceOracle {\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 public constant ONE_DOLLAR = 10 ** 36;\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Get the price of a token\r\n     *\r\n     * @param  token  The ERC20 token address of the market\r\n     * @return        The USD price of a base unit of the token, then multiplied by 10^36.\r\n     *                So a USD-stable coin with 18 decimal places would return 10^18.\r\n     *                This is the price of the base unit rather than the price of a \"human-readable\"\r\n     *                token amount. Every ERC20 may have a different number of decimals.\r\n     */\r\n    function getPrice(\r\n        address token\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Price memory);\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IERC20.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title IERC20\r\n * @author dYdX\r\n *\r\n * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\r\n * that we don't automatically revert when calling non-compliant tokens that have no return value for\r\n * transfer(), transferFrom(), or approve().\r\n */\r\ninterface IERC20 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply(\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function balanceOf(\r\n        address who\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (bool);\r\n\r\n    function name()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    function symbol()\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    function decimals()\r\n    external\r\n    view\r\n    returns (uint8);\r\n}\r\n\r\n// File: contracts/protocol/lib/Token.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Token\r\n * @author dYdX\r\n *\r\n * This library contains basic functions for interacting with ERC20 tokens. Modified to work with\r\n * tokens that don't adhere strictly to the ERC20 standard (for example tokens that don't return a\r\n * boolean value on success).\r\n */\r\nlibrary Token {\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Token\";\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function balanceOf(\r\n        address token,\r\n        address owner\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(token).balanceOf(owner);\r\n    }\r\n\r\n    function allowance(\r\n        address token,\r\n        address owner,\r\n        address spender\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(token).allowance(owner, spender);\r\n    }\r\n\r\n    function approve(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        IERC20(token).approve(spender, amount);\r\n\r\n        Require.that(\r\n            checkSuccess(),\r\n            FILE,\r\n            \"Approve failed\"\r\n        );\r\n    }\r\n\r\n    function approveMax(\r\n        address token,\r\n        address spender\r\n    )\r\n        internal\r\n    {\r\n        approve(\r\n            token,\r\n            spender,\r\n            uint256(-1)\r\n        );\r\n    }\r\n\r\n    function transfer(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        if (amount == 0 || to == address(this)) {\r\n            return;\r\n        }\r\n\r\n        IERC20(token).transfer(to, amount);\r\n\r\n        Require.that(\r\n            checkSuccess(),\r\n            FILE,\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        if (amount == 0 || to == from) {\r\n            return;\r\n        }\r\n\r\n        IERC20(token).transferFrom(from, to, amount);\r\n\r\n        Require.that(\r\n            checkSuccess(),\r\n            FILE,\r\n            \"TransferFrom failed\"\r\n        );\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Check the return value of the previous function up to 32 bytes. Return true if the previous\r\n     * function returned 0 bytes or 32 bytes that are not all-zero.\r\n     */\r\n    function checkSuccess(\r\n    )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 returnValue = 0;\r\n\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n\r\n            // no bytes returned: assume success\r\n            case 0x0 {\r\n                returnValue := 1\r\n            }\r\n\r\n            // 32 bytes returned: check if non-zero\r\n            case 0x20 {\r\n                // copy 32 bytes into scratch space\r\n                returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                // load those bytes into returnValue\r\n                returnValue := mload(0x0)\r\n            }\r\n\r\n            // not sure what was returned: don't mark as success\r\n            default { }\r\n        }\r\n\r\n        return returnValue != 0;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/impl/AdminImpl.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AdminImpl\r\n * @author dYdX\r\n *\r\n * Administrative functions to keep the protocol updated\r\n */\r\nlibrary AdminImpl {\r\n    using Storage for Storage.State;\r\n    using Token for address;\r\n    using Types for Types.Wei;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"AdminImpl\";\r\n\r\n    // ============ Events ============\r\n\r\n    event LogWithdrawExcessTokens(\r\n        address token,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogAddMarket(\r\n        uint256 marketId,\r\n        address token\r\n    );\r\n\r\n    event LogSetIsClosing(\r\n        uint256 marketId,\r\n        bool isClosing\r\n    );\r\n\r\n    event LogSetPriceOracle(\r\n        uint256 marketId,\r\n        address priceOracle\r\n    );\r\n\r\n    event LogSetInterestSetter(\r\n        uint256 marketId,\r\n        address interestSetter\r\n    );\r\n\r\n    event LogSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 marginPremium\r\n    );\r\n\r\n    event LogSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 spreadPremium\r\n    );\r\n\r\n    event LogSetMarginRatio(\r\n        Decimal.D256 marginRatio\r\n    );\r\n\r\n    event LogSetLiquidationSpread(\r\n        Decimal.D256 liquidationSpread\r\n    );\r\n\r\n    event LogSetEarningsRate(\r\n        Decimal.D256 earningsRate\r\n    );\r\n\r\n    event LogSetMinBorrowedValue(\r\n        Monetary.Value minBorrowedValue\r\n    );\r\n\r\n    event LogSetGlobalOperator(\r\n        address operator,\r\n        bool approved\r\n    );\r\n\r\n    // ============ Token Functions ============\r\n\r\n    function ownerWithdrawExcessTokens(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        address recipient\r\n    )\r\n    public\r\n    returns (uint256)\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        Types.Wei memory excessWei = state.getNumExcessTokens(marketId);\r\n\r\n        Require.that(\r\n            !excessWei.isNegative(),\r\n            FILE,\r\n            \"Negative excess\"\r\n        );\r\n\r\n        address token = state.getToken(marketId);\r\n\r\n        uint256 actualBalance = token.balanceOf(address(this));\r\n        if (excessWei.value > actualBalance) {\r\n            excessWei.value = actualBalance;\r\n        }\r\n\r\n        token.transfer(recipient, excessWei.value);\r\n\r\n        emit LogWithdrawExcessTokens(token, excessWei.value);\r\n\r\n        return excessWei.value;\r\n    }\r\n\r\n    function ownerWithdrawUnsupportedTokens(\r\n        Storage.State storage state,\r\n        address token,\r\n        address recipient\r\n    )\r\n    public\r\n    returns (uint256)\r\n    {\r\n        _requireNoMarket(state, token);\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(recipient, balance);\r\n\r\n        emit LogWithdrawExcessTokens(token, balance);\r\n\r\n        return balance;\r\n    }\r\n\r\n    // ============ Market Functions ============\r\n\r\n    function ownerAddMarket(\r\n        Storage.State storage state,\r\n        address token,\r\n        IPriceOracle priceOracle,\r\n        IInterestSetter interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium,\r\n        bool isClosing\r\n    )\r\n    public\r\n    {\r\n        _requireNoMarket(state, token);\r\n\r\n        uint256 marketId = state.numMarkets;\r\n\r\n        state.numMarkets++;\r\n        state.markets[marketId].token = token;\r\n        state.markets[marketId].index = Interest.newIndex();\r\n        state.markets[marketId].isClosing = isClosing;\r\n\r\n        emit LogAddMarket(marketId, token);\r\n        if (isClosing) {\r\n            emit LogSetIsClosing(marketId, isClosing);\r\n        }\r\n\r\n        _setPriceOracle(state, marketId, priceOracle);\r\n        _setInterestSetter(state, marketId, interestSetter);\r\n        _setMarginPremium(state, marketId, marginPremium);\r\n        _setSpreadPremium(state, marketId, spreadPremium);\r\n    }\r\n\r\n    function ownerSetIsClosing(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        bool isClosing\r\n    )\r\n    public\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        state.markets[marketId].isClosing = isClosing;\r\n        emit LogSetIsClosing(marketId, isClosing);\r\n    }\r\n\r\n    function ownerSetPriceOracle(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        IPriceOracle priceOracle\r\n    )\r\n    public\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        _setPriceOracle(state, marketId, priceOracle);\r\n    }\r\n\r\n    function ownerSetInterestSetter(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        IInterestSetter interestSetter\r\n    )\r\n    public\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        _setInterestSetter(state, marketId, interestSetter);\r\n    }\r\n\r\n    function ownerSetMarginPremium(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    )\r\n    public\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        _setMarginPremium(state, marketId, marginPremium);\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    )\r\n    public\r\n    {\r\n        _validateMarketId(state, marketId);\r\n        _setSpreadPremium(state, marketId, spreadPremium);\r\n    }\r\n\r\n    // ============ Risk Functions ============\r\n\r\n    function ownerSetMarginRatio(\r\n        Storage.State storage state,\r\n        Decimal.D256 memory ratio\r\n    )\r\n    public\r\n    {\r\n        Require.that(\r\n            ratio.value <= state.riskLimits.marginRatioMax,\r\n            FILE,\r\n            \"Ratio too high\"\r\n        );\r\n        Require.that(\r\n            ratio.value > state.riskParams.liquidationSpread.value,\r\n            FILE,\r\n            \"Ratio cannot be <= spread\"\r\n        );\r\n        state.riskParams.marginRatio = ratio;\r\n        emit LogSetMarginRatio(ratio);\r\n    }\r\n\r\n    function ownerSetLiquidationSpread(\r\n        Storage.State storage state,\r\n        Decimal.D256 memory spread\r\n    )\r\n    public\r\n    {\r\n        Require.that(\r\n            spread.value <= state.riskLimits.liquidationSpreadMax,\r\n            FILE,\r\n            \"Spread too high\"\r\n        );\r\n        Require.that(\r\n            spread.value < state.riskParams.marginRatio.value,\r\n            FILE,\r\n            \"Spread cannot be >= ratio\"\r\n        );\r\n        state.riskParams.liquidationSpread = spread;\r\n        emit LogSetLiquidationSpread(spread);\r\n    }\r\n\r\n    function ownerSetEarningsRate(\r\n        Storage.State storage state,\r\n        Decimal.D256 memory earningsRate\r\n    )\r\n    public\r\n    {\r\n        Require.that(\r\n            earningsRate.value <= state.riskLimits.earningsRateMax,\r\n            FILE,\r\n            \"Rate too high\"\r\n        );\r\n        state.riskParams.earningsRate = earningsRate;\r\n        emit LogSetEarningsRate(earningsRate);\r\n    }\r\n\r\n    function ownerSetMinBorrowedValue(\r\n        Storage.State storage state,\r\n        Monetary.Value memory minBorrowedValue\r\n    )\r\n    public\r\n    {\r\n        Require.that(\r\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\r\n            FILE,\r\n            \"Value too high\"\r\n        );\r\n        state.riskParams.minBorrowedValue = minBorrowedValue;\r\n        emit LogSetMinBorrowedValue(minBorrowedValue);\r\n    }\r\n\r\n    // ============ Global Operator Functions ============\r\n\r\n    function ownerSetGlobalOperator(\r\n        Storage.State storage state,\r\n        address operator,\r\n        bool approved\r\n    )\r\n    public\r\n    {\r\n        state.globalOperators[operator] = approved;\r\n\r\n        emit LogSetGlobalOperator(operator, approved);\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    function _setPriceOracle(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        IPriceOracle priceOracle\r\n    )\r\n    private\r\n    {\r\n        // require oracle can return non-zero price\r\n        address token = state.markets[marketId].token;\r\n\r\n        Require.that(\r\n            priceOracle.getPrice(token).value != 0,\r\n            FILE,\r\n            \"Invalid oracle price\"\r\n        );\r\n\r\n        state.markets[marketId].priceOracle = priceOracle;\r\n\r\n        emit LogSetPriceOracle(marketId, address(priceOracle));\r\n    }\r\n\r\n    function _setInterestSetter(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        IInterestSetter interestSetter\r\n    )\r\n    private\r\n    {\r\n        // ensure interestSetter can return a value without reverting\r\n        address token = state.markets[marketId].token;\r\n        interestSetter.getInterestRate(token, 0, 0);\r\n\r\n        state.markets[marketId].interestSetter = interestSetter;\r\n\r\n        emit LogSetInterestSetter(marketId, address(interestSetter));\r\n    }\r\n\r\n    function _setMarginPremium(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    )\r\n    private\r\n    {\r\n        Require.that(\r\n            marginPremium.value <= state.riskLimits.marginPremiumMax,\r\n            FILE,\r\n            \"Margin premium too high\"\r\n        );\r\n        state.markets[marketId].marginPremium = marginPremium;\r\n\r\n        emit LogSetMarginPremium(marketId, marginPremium);\r\n    }\r\n\r\n    function _setSpreadPremium(\r\n        Storage.State storage state,\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    )\r\n    private\r\n    {\r\n        Require.that(\r\n            spreadPremium.value <= state.riskLimits.spreadPremiumMax,\r\n            FILE,\r\n            \"Spread premium too high\"\r\n        );\r\n        state.markets[marketId].spreadPremium = spreadPremium;\r\n\r\n        emit LogSetSpreadPremium(marketId, spreadPremium);\r\n    }\r\n\r\n    function _requireNoMarket(\r\n        Storage.State storage state,\r\n        address token\r\n    )\r\n    private\r\n    view\r\n    {\r\n        uint256 numMarkets = state.numMarkets;\r\n\r\n        bool marketExists = false;\r\n\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (state.markets[m].token == token) {\r\n                marketExists = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        Require.that(\r\n            !marketExists,\r\n            FILE,\r\n            \"Market exists\"\r\n        );\r\n    }\r\n\r\n    function _validateMarketId(\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n    private\r\n    view\r\n    {\r\n        Require.that(\r\n            marketId < state.numMarkets,\r\n            FILE,\r\n            \"Market OOB\",\r\n            marketId\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/Admin.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Admin\r\n * @author dYdX\r\n *\r\n * Public functions that allow the privileged owner address to manage Solo\r\n */\r\ncontract Admin is\r\n    State,\r\n    Ownable,\r\n    ReentrancyGuard\r\n{\r\n    // ============ Token Functions ============\r\n\r\n    /**\r\n     * Withdraw an ERC20 token for which there is an associated market. Only excess tokens can be\r\n     * withdrawn. The number of excess tokens is calculated by taking the current number of tokens\r\n     * held in Solo, adding the number of tokens owed to Solo by borrowers, and subtracting the\r\n     * number of tokens owed to suppliers by Solo.\r\n     */\r\n    function ownerWithdrawExcessTokens(\r\n        uint256 marketId,\r\n        address recipient\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        return AdminImpl.ownerWithdrawExcessTokens(\r\n            g_state,\r\n            marketId,\r\n            recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Withdraw an ERC20 token for which there is no associated market.\r\n     */\r\n    function ownerWithdrawUnsupportedTokens(\r\n        address token,\r\n        address recipient\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        return AdminImpl.ownerWithdrawUnsupportedTokens(\r\n            g_state,\r\n            token,\r\n            recipient\r\n        );\r\n    }\r\n\r\n    // ============ Market Functions ============\r\n\r\n    /**\r\n     * Add a new market to Solo. Must be for a previously-unsupported ERC20 token.\r\n     */\r\n    function ownerAddMarket(\r\n        address token,\r\n        IPriceOracle priceOracle,\r\n        IInterestSetter interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium,\r\n        bool isClosing\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerAddMarket(\r\n            g_state,\r\n            token,\r\n            priceOracle,\r\n            interestSetter,\r\n            marginPremium,\r\n            spreadPremium,\r\n            isClosing\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set (or unset) the status of a market to \"closing\". The borrowedValue of a market cannot\r\n     * increase while its status is \"closing\".\r\n     */\r\n    function ownerSetIsClosing(\r\n        uint256 marketId,\r\n        bool isClosing\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetIsClosing(\r\n            g_state,\r\n            marketId,\r\n            isClosing\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the price oracle for a market.\r\n     */\r\n    function ownerSetPriceOracle(\r\n        uint256 marketId,\r\n        IPriceOracle priceOracle\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetPriceOracle(\r\n            g_state,\r\n            marketId,\r\n            priceOracle\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the interest-setter for a market.\r\n     */\r\n    function ownerSetInterestSetter(\r\n        uint256 marketId,\r\n        IInterestSetter interestSetter\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetInterestSetter(\r\n            g_state,\r\n            marketId,\r\n            interestSetter\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set a premium on the minimum margin-ratio for a market. This makes it so that any positions\r\n     * that include this market require a higher collateralization to avoid being liquidated.\r\n     */\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetMarginPremium(\r\n            g_state,\r\n            marketId,\r\n            marginPremium\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set a premium on the liquidation spread for a market. This makes it so that any liquidations\r\n     * that include this market have a higher spread than the global default.\r\n     */\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetSpreadPremium(\r\n            g_state,\r\n            marketId,\r\n            spreadPremium\r\n        );\r\n    }\r\n\r\n    // ============ Risk Functions ============\r\n\r\n    /**\r\n     * Set the global minimum margin-ratio that every position must maintain to prevent being\r\n     * liquidated.\r\n     */\r\n    function ownerSetMarginRatio(\r\n        Decimal.D256 memory ratio\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetMarginRatio(\r\n            g_state,\r\n            ratio\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the global liquidation spread. This is the spread between oracle prices that incentivizes\r\n     * the liquidation of risky positions.\r\n     */\r\n    function ownerSetLiquidationSpread(\r\n        Decimal.D256 memory spread\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetLiquidationSpread(\r\n            g_state,\r\n            spread\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the global earnings-rate variable that determines what percentage of the interest paid\r\n     * by borrowers gets passed-on to suppliers.\r\n     */\r\n    function ownerSetEarningsRate(\r\n        Decimal.D256 memory earningsRate\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetEarningsRate(\r\n            g_state,\r\n            earningsRate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the global minimum-borrow value which is the minimum value of any new borrow on Solo.\r\n     */\r\n    function ownerSetMinBorrowedValue(\r\n        Monetary.Value memory minBorrowedValue\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetMinBorrowedValue(\r\n            g_state,\r\n            minBorrowedValue\r\n        );\r\n    }\r\n\r\n    // ============ Global Operator Functions ============\r\n\r\n    /**\r\n     * Approve (or disapprove) an address that is permissioned to be an operator for all accounts in\r\n     * Solo. Intended only to approve smart-contracts.\r\n     */\r\n    function ownerSetGlobalOperator(\r\n        address operator,\r\n        bool approved\r\n    )\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        AdminImpl.ownerSetGlobalOperator(\r\n            g_state,\r\n            operator,\r\n            approved\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Account.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title Account\r\n * @author dYdX\r\n *\r\n * Library of structs and functions that represent an account\r\n */\r\nlibrary Account {\r\n    // ============ Enums ============\r\n\r\n    /*\r\n     * Most-recently-cached account status.\r\n     *\r\n     * Normal: Can only be liquidated if the account values are violating the global margin-ratio.\r\n     * Liquid: Can be liquidated no matter the account values.\r\n     *         Can be vaporized if there are no more positive account values.\r\n     * Vapor:  Has only negative (or zeroed) account values. Can be vaporized.\r\n     *\r\n     */\r\n    enum Status {\r\n        Normal,\r\n        Liquid,\r\n        Vapor\r\n    }\r\n\r\n    // ============ Structs ============\r\n\r\n    // Represents the unique key that specifies an account\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    // The complete storage for any account\r\n    struct Storage {\r\n        mapping (uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function equals(\r\n        Info memory a,\r\n        Info memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.owner == b.owner && a.number == b.number;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Cache.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Cache\r\n * @author dYdX\r\n *\r\n * Library for caching information about markets\r\n */\r\nlibrary Cache {\r\n    using Cache for MarketCache;\r\n    using Storage for Storage.State;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct MarketInfo {\r\n        bool isClosing;\r\n        uint128 borrowPar;\r\n        Monetary.Price price;\r\n    }\r\n\r\n    struct MarketCache {\r\n        MarketInfo[] markets;\r\n    }\r\n\r\n    // ============ Setter Functions ============\r\n\r\n    /**\r\n     * Initialize an empty cache for some given number of total markets.\r\n     */\r\n    function create(\r\n        uint256 numMarkets\r\n    )\r\n        internal\r\n        pure\r\n        returns (MarketCache memory)\r\n    {\r\n        return MarketCache({\r\n            markets: new MarketInfo[](numMarkets)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add market information (price and total borrowed par if the market is closing) to the cache.\r\n     * Return true if the market information did not previously exist in the cache.\r\n     */\r\n    function addMarket(\r\n        MarketCache memory cache,\r\n        Storage.State storage state,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (cache.hasMarket(marketId)) {\r\n            return false;\r\n        }\r\n        cache.markets[marketId].price = state.fetchPrice(marketId);\r\n        if (state.markets[marketId].isClosing) {\r\n            cache.markets[marketId].isClosing = true;\r\n            cache.markets[marketId].borrowPar = state.getTotalPar(marketId).borrow;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ============ Getter Functions ============\r\n\r\n    function getNumMarkets(\r\n        MarketCache memory cache\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return cache.markets.length;\r\n    }\r\n\r\n    function hasMarket(\r\n        MarketCache memory cache,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return cache.markets[marketId].price.value != 0;\r\n    }\r\n\r\n    function getIsClosing(\r\n        MarketCache memory cache,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return cache.markets[marketId].isClosing;\r\n    }\r\n\r\n    function getPrice(\r\n        MarketCache memory cache,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        pure\r\n        returns (Monetary.Price memory)\r\n    {\r\n        return cache.markets[marketId].price;\r\n    }\r\n\r\n    function getBorrowPar(\r\n        MarketCache memory cache,\r\n        uint256 marketId\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        return cache.markets[marketId].borrowPar;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/Getters.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Getters\r\n * @author dYdX\r\n *\r\n * Public read-only functions that allow transparency into the state of Solo\r\n */\r\ncontract Getters is\r\n    State\r\n{\r\n    using Cache for Cache.MarketCache;\r\n    using Storage for Storage.State;\r\n    using Types for Types.Par;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 FILE = \"Getters\";\r\n\r\n    // ============ Getters for Risk ============\r\n\r\n    /**\r\n     * Get the global minimum margin-ratio that every position must maintain to prevent being\r\n     * liquidated.\r\n     *\r\n     * @return  The global margin-ratio\r\n     */\r\n    function getMarginRatio()\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        return g_state.riskParams.marginRatio;\r\n    }\r\n\r\n    /**\r\n     * Get the global liquidation spread. This is the spread between oracle prices that incentivizes\r\n     * the liquidation of risky positions.\r\n     *\r\n     * @return  The global liquidation spread\r\n     */\r\n    function getLiquidationSpread()\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        return g_state.riskParams.liquidationSpread;\r\n    }\r\n\r\n    /**\r\n     * Get the global earnings-rate variable that determines what percentage of the interest paid\r\n     * by borrowers gets passed-on to suppliers.\r\n     *\r\n     * @return  The global earnings rate\r\n     */\r\n    function getEarningsRate()\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        return g_state.riskParams.earningsRate;\r\n    }\r\n\r\n    /**\r\n     * Get the global minimum-borrow value which is the minimum value of any new borrow on Solo.\r\n     *\r\n     * @return  The global minimum borrow value\r\n     */\r\n    function getMinBorrowedValue()\r\n        public\r\n        view\r\n        returns (Monetary.Value memory)\r\n    {\r\n        return g_state.riskParams.minBorrowedValue;\r\n    }\r\n\r\n    /**\r\n     * Get all risk parameters in a single struct.\r\n     *\r\n     * @return  All global risk parameters\r\n     */\r\n    function getRiskParams()\r\n        public\r\n        view\r\n        returns (Storage.RiskParams memory)\r\n    {\r\n        return g_state.riskParams;\r\n    }\r\n\r\n    /**\r\n     * Get all risk parameter limits in a single struct. These are the maximum limits at which the\r\n     * risk parameters can be set by the admin of Solo.\r\n     *\r\n     * @return  All global risk parameter limnits\r\n     */\r\n    function getRiskLimits()\r\n        public\r\n        view\r\n        returns (Storage.RiskLimits memory)\r\n    {\r\n        return g_state.riskLimits;\r\n    }\r\n\r\n    // ============ Getters for Markets ============\r\n\r\n    /**\r\n     * Get the total number of markets.\r\n     *\r\n     * @return  The number of markets\r\n     */\r\n    function getNumMarkets()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return g_state.numMarkets;\r\n    }\r\n\r\n    /**\r\n     * Get the ERC20 token address for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The token address\r\n     */\r\n    function getMarketTokenAddress(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.getToken(marketId);\r\n    }\r\n\r\n    /**\r\n     * Get the total principal amounts (borrowed and supplied) for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The total principal amounts\r\n     */\r\n    function getMarketTotalPar(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.TotalPar memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.getTotalPar(marketId);\r\n    }\r\n\r\n    /**\r\n     * Get the most recently cached interest index for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The most recent index\r\n     */\r\n    function getMarketCachedIndex(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Interest.Index memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.getIndex(marketId);\r\n    }\r\n\r\n    /**\r\n     * Get the interest index for a market if it were to be updated right now.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The estimated current index\r\n     */\r\n    function getMarketCurrentIndex(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Interest.Index memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.fetchNewIndex(marketId, g_state.getIndex(marketId));\r\n    }\r\n\r\n    /**\r\n     * Get the price oracle address for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The price oracle address\r\n     */\r\n    function getMarketPriceOracle(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (IPriceOracle)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId].priceOracle;\r\n    }\r\n\r\n    /**\r\n     * Get the interest-setter address for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The interest-setter address\r\n     */\r\n    function getMarketInterestSetter(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (IInterestSetter)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId].interestSetter;\r\n    }\r\n\r\n    /**\r\n     * Get the margin premium for a market. A margin premium makes it so that any positions that\r\n     * include the market require a higher collateralization to avoid being liquidated.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The market's margin premium\r\n     */\r\n    function getMarketMarginPremium(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId].marginPremium;\r\n    }\r\n\r\n    /**\r\n     * Get the spread premium for a market. A spread premium makes it so that any liquidations\r\n     * that include the market have a higher spread than the global default.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The market's spread premium\r\n     */\r\n    function getMarketSpreadPremium(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId].spreadPremium;\r\n    }\r\n\r\n    /**\r\n     * Return true if a particular market is in closing mode. Additional borrows cannot be taken\r\n     * from a market that is closing.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           True if the market is closing\r\n     */\r\n    function getMarketIsClosing(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId].isClosing;\r\n    }\r\n\r\n    /**\r\n     * Get the price of the token for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The price of each atomic unit of the token\r\n     */\r\n    function getMarketPrice(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Price memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.fetchPrice(marketId);\r\n    }\r\n\r\n    /**\r\n     * Get the current borrower interest rate for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The current interest rate\r\n     */\r\n    function getMarketInterestRate(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Interest.Rate memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.fetchInterestRate(\r\n            marketId,\r\n            g_state.getIndex(marketId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the adjusted liquidation spread for some market pair. This is equal to the global\r\n     * liquidation spread multiplied by (1 + spreadPremium) for each of the two markets.\r\n     *\r\n     * @param  heldMarketId  The market for which the account has collateral\r\n     * @param  owedMarketId  The market for which the account has borrowed tokens\r\n     * @return               The adjusted liquidation spread\r\n     */\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        _requireValidMarket(heldMarketId);\r\n        _requireValidMarket(owedMarketId);\r\n        return g_state.getLiquidationSpreadForPair(heldMarketId, owedMarketId);\r\n    }\r\n\r\n    /**\r\n     * Get basic information about a particular market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           A Storage.Market struct with the current state of the market\r\n     */\r\n    function getMarket(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Storage.Market memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.markets[marketId];\r\n    }\r\n\r\n    /**\r\n     * Get comprehensive information about a particular market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           A tuple containing the values:\r\n     *                    - A Storage.Market struct with the current state of the market\r\n     *                    - The current estimated interest index\r\n     *                    - The current token price\r\n     *                    - The current market interest rate\r\n     */\r\n    function getMarketWithInfo(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        )\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return (\r\n            getMarket(marketId),\r\n            getMarketCurrentIndex(marketId),\r\n            getMarketPrice(marketId),\r\n            getMarketInterestRate(marketId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the number of excess tokens for a market. The number of excess tokens is calculated\r\n     * by taking the current number of tokens held in Solo, adding the number of tokens owed to Solo\r\n     * by borrowers, and subtracting the number of tokens owed to suppliers by Solo.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The number of excess tokens\r\n     */\r\n    function getNumExcessTokens(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Wei memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.getNumExcessTokens(marketId);\r\n    }\r\n\r\n    // ============ Getters for Accounts ============\r\n\r\n    /**\r\n     * Get the principal value for a particular account and market.\r\n     *\r\n     * @param  account   The account to query\r\n     * @param  marketId  The market to query\r\n     * @return           The principal value\r\n     */\r\n    function getAccountPar(\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Par memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return g_state.getPar(account, marketId);\r\n    }\r\n\r\n    /**\r\n     * Get the token balance for a particular account and market.\r\n     *\r\n     * @param  account   The account to query\r\n     * @param  marketId  The market to query\r\n     * @return           The token amount\r\n     */\r\n    function getAccountWei(\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Wei memory)\r\n    {\r\n        _requireValidMarket(marketId);\r\n        return Interest.parToWei(\r\n            g_state.getPar(account, marketId),\r\n            g_state.fetchNewIndex(marketId, g_state.getIndex(marketId))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the status of an account (Normal, Liquidating, or Vaporizing).\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The account's status\r\n     */\r\n    function getAccountStatus(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Account.Status)\r\n    {\r\n        return g_state.getStatus(account);\r\n    }\r\n\r\n    /**\r\n     * Get the total supplied and total borrowed value of an account.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The supplied value of the account\r\n     *                   - The borrowed value of the account\r\n     */\r\n    function getAccountValues(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory)\r\n    {\r\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ false);\r\n    }\r\n\r\n    /**\r\n     * Get the total supplied and total borrowed values of an account adjusted by the marginPremium\r\n     * of each market. Supplied values are divided by (1 + marginPremium) for each market and\r\n     * borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\r\n     * adjusted values gives the margin-ratio of the account which will be compared to the global\r\n     * margin-ratio when determining if the account can be liquidated.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The supplied value of the account (adjusted for marginPremium)\r\n     *                   - The borrowed value of the account (adjusted for marginPremium)\r\n     */\r\n    function getAdjustedAccountValues(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory)\r\n    {\r\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ true);\r\n    }\r\n\r\n    /**\r\n     * Get an account's summary for each market.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The ERC20 token address for each market\r\n     *                   - The account's principal value for each market\r\n     *                   - The account's (supplied or borrowed) number of tokens for each market\r\n     */\r\n    function getAccountBalances(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            Types.Par[] memory,\r\n            Types.Wei[] memory\r\n        )\r\n    {\r\n        uint256 numMarkets = g_state.numMarkets;\r\n        address[] memory tokens = new address[](numMarkets);\r\n        Types.Par[] memory pars = new Types.Par[](numMarkets);\r\n        Types.Wei[] memory weis = new Types.Wei[](numMarkets);\r\n\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            tokens[m] = getMarketTokenAddress(m);\r\n            pars[m] = getAccountPar(account, m);\r\n            weis[m] = getAccountWei(account, m);\r\n        }\r\n\r\n        return (\r\n            tokens,\r\n            pars,\r\n            weis\r\n        );\r\n    }\r\n\r\n    // ============ Getters for Permissions ============\r\n\r\n    /**\r\n     * Return true if a particular address is approved as an operator for an owner's accounts.\r\n     * Approved operators can act on the accounts of the owner as if it were the operator's own.\r\n     *\r\n     * @param  owner     The owner of the accounts\r\n     * @param  operator  The possible operator\r\n     * @return           True if operator is approved for owner's accounts\r\n     */\r\n    function getIsLocalOperator(\r\n        address owner,\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return g_state.isLocalOperator(owner, operator);\r\n    }\r\n\r\n    /**\r\n     * Return true if a particular address is approved as a global operator. Such an address can\r\n     * act on any account as if it were the operator's own.\r\n     *\r\n     * @param  operator  The address to query\r\n     * @return           True if operator is a global operator\r\n     */\r\n    function getIsGlobalOperator(\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return g_state.isGlobalOperator(operator);\r\n    }\r\n\r\n    // ============ Private Helper Functions ============\r\n\r\n    /**\r\n     * Revert if marketId is invalid.\r\n     */\r\n    function _requireValidMarket(\r\n        uint256 marketId\r\n    )\r\n        private\r\n        view\r\n    {\r\n        Require.that(\r\n            marketId < g_state.numMarkets,\r\n            FILE,\r\n            \"Market OOB\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Private helper for getting the monetary values of an account.\r\n     */\r\n    function getAccountValuesInternal(\r\n        Account.Info memory account,\r\n        bool adjustForLiquidity\r\n    )\r\n        private\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory)\r\n    {\r\n        uint256 numMarkets = g_state.numMarkets;\r\n\r\n        // populate cache\r\n        Cache.MarketCache memory cache = Cache.create(numMarkets);\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (!g_state.getPar(account, m).isZero()) {\r\n                cache.addMarket(g_state, m);\r\n            }\r\n        }\r\n\r\n        return g_state.getAccountValues(account, cache, adjustForLiquidity);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IAutoTrader.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IAutoTrader\r\n * @author dYdX\r\n *\r\n * Interface that Auto-Traders for Solo must implement in order to approve trades.\r\n */\r\ncontract IAutoTrader {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows traders to make trades approved by this smart contract. The active trader's account is\r\n     * the takerAccount and the passive account (for which this contract approves trades\r\n     * on-behalf-of) is the makerAccount.\r\n     *\r\n     * @param  inputMarketId   The market for which the trader specified the original amount\r\n     * @param  outputMarketId  The market for which the trader wants the resulting amount specified\r\n     * @param  makerAccount    The account for which this contract is making trades\r\n     * @param  takerAccount    The account requesting the trade\r\n     * @param  oldInputPar     The old principal amount for the makerAccount for the inputMarketId\r\n     * @param  newInputPar     The new principal amount for the makerAccount for the inputMarketId\r\n     * @param  inputWei        The change in token amount for the makerAccount for the inputMarketId\r\n     * @param  data            Arbitrary data passed in by the trader\r\n     * @return                 The AssetAmount for the makerAccount for the outputMarketId\r\n     */\r\n    function getTradeCost(\r\n        uint256 inputMarketId,\r\n        uint256 outputMarketId,\r\n        Account.Info memory makerAccount,\r\n        Account.Info memory takerAccount,\r\n        Types.Par memory oldInputPar,\r\n        Types.Par memory newInputPar,\r\n        Types.Wei memory inputWei,\r\n        bytes memory data\r\n    )\r\n        public\r\n        returns (Types.AssetAmount memory);\r\n}\r\n\r\n// File: contracts/protocol/interfaces/ICallee.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ncontract ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    )\r\n        public;\r\n}\r\n\r\n// File: contracts/protocol/lib/Actions.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Actions\r\n * @author dYdX\r\n *\r\n * Library that defines and parses valid Actions\r\n */\r\nlibrary Actions {\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Actions\";\r\n\r\n    // ============ Enums ============\r\n\r\n    enum ActionType {\r\n        Deposit,   // supply tokens\r\n        Withdraw,  // borrow tokens\r\n        Transfer,  // transfer balance between accounts\r\n        Buy,       // buy an amount of some token (externally)\r\n        Sell,      // sell an amount of some token (externally)\r\n        Trade,     // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize,  // use excess tokens to zero-out a completely negative account\r\n        Call       // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {\r\n        OnePrimary,\r\n        TwoPrimary,\r\n        PrimaryAndSecondary\r\n    }\r\n\r\n    enum MarketLayout {\r\n        ZeroMarkets,\r\n        OneMarket,\r\n        TwoMarkets\r\n    }\r\n\r\n    // ============ Structs ============\r\n\r\n    /*\r\n     * Arguments that are passed to Solo in an ordered list as part of a single operation.\r\n     * Each ActionArgs has an actionType which specifies which action struct that this data will be\r\n     * parsed into before being processed.\r\n     */\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    // ============ Action Types ============\r\n\r\n    /*\r\n     * Moves tokens from an address to Solo. Can either repay a borrow or provide additional supply.\r\n     */\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    /*\r\n     * Moves tokens from Solo to another address. Can either borrow tokens or reduce the amount\r\n     * previously supplied.\r\n     */\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    /*\r\n     * Transfers balance between two accounts. The msg.sender must be an operator for both accounts.\r\n     * The amount field applies to accountOne.\r\n     * This action does not require any token movement since the trade is done internally to Solo.\r\n     */\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    /*\r\n     * Acquires a certain amount of tokens by spending other tokens. Sends takerMarket tokens to the\r\n     * specified exchangeWrapper contract and expects makerMarket tokens in return. The amount field\r\n     * applies to the makerMarket.\r\n     */\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    /*\r\n     * Spends a certain amount of tokens to acquire other tokens. Sends takerMarket tokens to the\r\n     * specified exchangeWrapper and expects makerMarket tokens in return. The amount field applies\r\n     * to the takerMarket.\r\n     */\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    /*\r\n     * Trades balances between two accounts using any external contract that implements the\r\n     * AutoTrader interface. The AutoTrader contract must be an operator for the makerAccount (for\r\n     * which it is trading on-behalf-of). The amount field applies to the makerAccount and the\r\n     * inputMarket. This proposed change to the makerAccount is passed to the AutoTrader which will\r\n     * quote a change for the makerAccount in the outputMarket (or will disallow the trade).\r\n     * This action does not require any token movement since the trade is done internally to Solo.\r\n     */\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    /*\r\n     * Each account must maintain a certain margin-ratio (specified globally). If the account falls\r\n     * below this margin-ratio, it can be liquidated by any other account. This allows anyone else\r\n     * (arbitrageurs) to repay any borrowed asset (owedMarket) of the liquidating account in\r\n     * exchange for any collateral asset (heldMarket) of the liquidAccount. The ratio is determined\r\n     * by the price ratio (given by the oracles) plus a spread (specified globally). Liquidating an\r\n     * account also sets a flag on the account that the account is being liquidated. This allows\r\n     * anyone to continue liquidating the account until there are no more borrows being taken by the\r\n     * liquidating account. Liquidators do not have to liquidate the entire account all at once but\r\n     * can liquidate as much as they choose. The liquidating flag allows liquidators to continue\r\n     * liquidating the account even if it becomes collateralized through partial liquidation or\r\n     * price movement.\r\n     */\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    /*\r\n     * Similar to liquidate, but vaporAccounts are accounts that have only negative balances\r\n     * remaining. The arbitrageur pays back the negative asset (owedMarket) of the vaporAccount in\r\n     * exchange for a collateral asset (heldMarket) at a favorable spread. However, since the\r\n     * liquidAccount has no collateral assets, the collateral must come from Solo's excess tokens.\r\n     */\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    /*\r\n     * Passes arbitrary bytes of data to an external contract that implements the Callee interface.\r\n     * Does not change any asset amounts. This function may be useful for setting certain variables\r\n     * on layer-two contracts for certain accounts without having to make a separate Ethereum\r\n     * transaction for doing so. Also, the second-layer contracts can ensure that the call is coming\r\n     * from an operator of the particular account.\r\n     */\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function getMarketLayout(\r\n        ActionType actionType\r\n    )\r\n        internal\r\n        pure\r\n        returns (MarketLayout)\r\n    {\r\n        if (\r\n            actionType == Actions.ActionType.Deposit\r\n            || actionType == Actions.ActionType.Withdraw\r\n            || actionType == Actions.ActionType.Transfer\r\n        ) {\r\n            return MarketLayout.OneMarket;\r\n        }\r\n        else if (actionType == Actions.ActionType.Call) {\r\n            return MarketLayout.ZeroMarkets;\r\n        }\r\n        return MarketLayout.TwoMarkets;\r\n    }\r\n\r\n    function getAccountLayout(\r\n        ActionType actionType\r\n    )\r\n        internal\r\n        pure\r\n        returns (AccountLayout)\r\n    {\r\n        if (\r\n            actionType == Actions.ActionType.Transfer\r\n            || actionType == Actions.ActionType.Trade\r\n        ) {\r\n            return AccountLayout.TwoPrimary;\r\n        } else if (\r\n            actionType == Actions.ActionType.Liquidate\r\n            || actionType == Actions.ActionType.Vaporize\r\n        ) {\r\n            return AccountLayout.PrimaryAndSecondary;\r\n        }\r\n        return AccountLayout.OnePrimary;\r\n    }\r\n\r\n    // ============ Parsing Functions ============\r\n\r\n    function parseDepositArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (DepositArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Deposit);\r\n        return DepositArgs({\r\n            amount: args.amount,\r\n            account: accounts[args.accountId],\r\n            market: args.primaryMarketId,\r\n            from: args.otherAddress\r\n        });\r\n    }\r\n\r\n    function parseWithdrawArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (WithdrawArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Withdraw);\r\n        return WithdrawArgs({\r\n            amount: args.amount,\r\n            account: accounts[args.accountId],\r\n            market: args.primaryMarketId,\r\n            to: args.otherAddress\r\n        });\r\n    }\r\n\r\n    function parseTransferArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (TransferArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Transfer);\r\n        return TransferArgs({\r\n            amount: args.amount,\r\n            accountOne: accounts[args.accountId],\r\n            accountTwo: accounts[args.otherAccountId],\r\n            market: args.primaryMarketId\r\n        });\r\n    }\r\n\r\n    function parseBuyArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (BuyArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Buy);\r\n        return BuyArgs({\r\n            amount: args.amount,\r\n            account: accounts[args.accountId],\r\n            makerMarket: args.primaryMarketId,\r\n            takerMarket: args.secondaryMarketId,\r\n            exchangeWrapper: args.otherAddress,\r\n            orderData: args.data\r\n        });\r\n    }\r\n\r\n    function parseSellArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (SellArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Sell);\r\n        return SellArgs({\r\n            amount: args.amount,\r\n            account: accounts[args.accountId],\r\n            takerMarket: args.primaryMarketId,\r\n            makerMarket: args.secondaryMarketId,\r\n            exchangeWrapper: args.otherAddress,\r\n            orderData: args.data\r\n        });\r\n    }\r\n\r\n    function parseTradeArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (TradeArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Trade);\r\n        return TradeArgs({\r\n            amount: args.amount,\r\n            takerAccount: accounts[args.accountId],\r\n            makerAccount: accounts[args.otherAccountId],\r\n            inputMarket: args.primaryMarketId,\r\n            outputMarket: args.secondaryMarketId,\r\n            autoTrader: args.otherAddress,\r\n            tradeData: args.data\r\n        });\r\n    }\r\n\r\n    function parseLiquidateArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (LiquidateArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Liquidate);\r\n        return LiquidateArgs({\r\n            amount: args.amount,\r\n            solidAccount: accounts[args.accountId],\r\n            liquidAccount: accounts[args.otherAccountId],\r\n            owedMarket: args.primaryMarketId,\r\n            heldMarket: args.secondaryMarketId\r\n        });\r\n    }\r\n\r\n    function parseVaporizeArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (VaporizeArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Vaporize);\r\n        return VaporizeArgs({\r\n            amount: args.amount,\r\n            solidAccount: accounts[args.accountId],\r\n            vaporAccount: accounts[args.otherAccountId],\r\n            owedMarket: args.primaryMarketId,\r\n            heldMarket: args.secondaryMarketId\r\n        });\r\n    }\r\n\r\n    function parseCallArgs(\r\n        Account.Info[] memory accounts,\r\n        ActionArgs memory args\r\n    )\r\n        internal\r\n        pure\r\n        returns (CallArgs memory)\r\n    {\r\n        assert(args.actionType == ActionType.Call);\r\n        return CallArgs({\r\n            account: accounts[args.accountId],\r\n            callee: args.otherAddress,\r\n            data: args.data\r\n        });\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Events.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Events\r\n * @author dYdX\r\n *\r\n * Library to parse and emit logs from which the state of all accounts and indexes can be followed\r\n */\r\nlibrary Events {\r\n    using Types for Types.Wei;\r\n    using Storage for Storage.State;\r\n\r\n    // ============ Events ============\r\n\r\n    event LogIndexUpdate(\r\n        uint256 indexed market,\r\n        Interest.Index index\r\n    );\r\n\r\n    event LogOperation(\r\n        address sender\r\n    );\r\n\r\n    event LogDeposit(\r\n        address indexed accountOwner,\r\n        uint256 accountNumber,\r\n        uint256 market,\r\n        BalanceUpdate update,\r\n        address from\r\n    );\r\n\r\n    event LogWithdraw(\r\n        address indexed accountOwner,\r\n        uint256 accountNumber,\r\n        uint256 market,\r\n        BalanceUpdate update,\r\n        address to\r\n    );\r\n\r\n    event LogTransfer(\r\n        address indexed accountOneOwner,\r\n        uint256 accountOneNumber,\r\n        address indexed accountTwoOwner,\r\n        uint256 accountTwoNumber,\r\n        uint256 market,\r\n        BalanceUpdate updateOne,\r\n        BalanceUpdate updateTwo\r\n    );\r\n\r\n    event LogBuy(\r\n        address indexed accountOwner,\r\n        uint256 accountNumber,\r\n        uint256 takerMarket,\r\n        uint256 makerMarket,\r\n        BalanceUpdate takerUpdate,\r\n        BalanceUpdate makerUpdate,\r\n        address exchangeWrapper\r\n    );\r\n\r\n    event LogSell(\r\n        address indexed accountOwner,\r\n        uint256 accountNumber,\r\n        uint256 takerMarket,\r\n        uint256 makerMarket,\r\n        BalanceUpdate takerUpdate,\r\n        BalanceUpdate makerUpdate,\r\n        address exchangeWrapper\r\n    );\r\n\r\n    event LogTrade(\r\n        address indexed takerAccountOwner,\r\n        uint256 takerAccountNumber,\r\n        address indexed makerAccountOwner,\r\n        uint256 makerAccountNumber,\r\n        uint256 inputMarket,\r\n        uint256 outputMarket,\r\n        BalanceUpdate takerInputUpdate,\r\n        BalanceUpdate takerOutputUpdate,\r\n        BalanceUpdate makerInputUpdate,\r\n        BalanceUpdate makerOutputUpdate,\r\n        address autoTrader\r\n    );\r\n\r\n    event LogCall(\r\n        address indexed accountOwner,\r\n        uint256 accountNumber,\r\n        address callee\r\n    );\r\n\r\n    event LogLiquidate(\r\n        address indexed solidAccountOwner,\r\n        uint256 solidAccountNumber,\r\n        address indexed liquidAccountOwner,\r\n        uint256 liquidAccountNumber,\r\n        uint256 heldMarket,\r\n        uint256 owedMarket,\r\n        BalanceUpdate solidHeldUpdate,\r\n        BalanceUpdate solidOwedUpdate,\r\n        BalanceUpdate liquidHeldUpdate,\r\n        BalanceUpdate liquidOwedUpdate\r\n    );\r\n\r\n    event LogVaporize(\r\n        address indexed solidAccountOwner,\r\n        uint256 solidAccountNumber,\r\n        address indexed vaporAccountOwner,\r\n        uint256 vaporAccountNumber,\r\n        uint256 heldMarket,\r\n        uint256 owedMarket,\r\n        BalanceUpdate solidHeldUpdate,\r\n        BalanceUpdate solidOwedUpdate,\r\n        BalanceUpdate vaporOwedUpdate\r\n    );\r\n\r\n    // ============ Structs ============\r\n\r\n    struct BalanceUpdate {\r\n        Types.Wei deltaWei;\r\n        Types.Par newPar;\r\n    }\r\n\r\n    // ============ Internal Functions ============\r\n\r\n    function logIndexUpdate(\r\n        uint256 marketId,\r\n        Interest.Index memory index\r\n    )\r\n        internal\r\n    {\r\n        emit LogIndexUpdate(\r\n            marketId,\r\n            index\r\n        );\r\n    }\r\n\r\n    function logOperation()\r\n        internal\r\n    {\r\n        emit LogOperation(msg.sender);\r\n    }\r\n\r\n    function logDeposit(\r\n        Storage.State storage state,\r\n        Actions.DepositArgs memory args,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        emit LogDeposit(\r\n            args.account.owner,\r\n            args.account.number,\r\n            args.market,\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.market,\r\n                deltaWei\r\n            ),\r\n            args.from\r\n        );\r\n    }\r\n\r\n    function logWithdraw(\r\n        Storage.State storage state,\r\n        Actions.WithdrawArgs memory args,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        emit LogWithdraw(\r\n            args.account.owner,\r\n            args.account.number,\r\n            args.market,\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.market,\r\n                deltaWei\r\n            ),\r\n            args.to\r\n        );\r\n    }\r\n\r\n    function logTransfer(\r\n        Storage.State storage state,\r\n        Actions.TransferArgs memory args,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        emit LogTransfer(\r\n            args.accountOne.owner,\r\n            args.accountOne.number,\r\n            args.accountTwo.owner,\r\n            args.accountTwo.number,\r\n            args.market,\r\n            getBalanceUpdate(\r\n                state,\r\n                args.accountOne,\r\n                args.market,\r\n                deltaWei\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.accountTwo,\r\n                args.market,\r\n                deltaWei.negative()\r\n            )\r\n        );\r\n    }\r\n\r\n    function logBuy(\r\n        Storage.State storage state,\r\n        Actions.BuyArgs memory args,\r\n        Types.Wei memory takerWei,\r\n        Types.Wei memory makerWei\r\n    )\r\n        internal\r\n    {\r\n        emit LogBuy(\r\n            args.account.owner,\r\n            args.account.number,\r\n            args.takerMarket,\r\n            args.makerMarket,\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.takerMarket,\r\n                takerWei\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.makerMarket,\r\n                makerWei\r\n            ),\r\n            args.exchangeWrapper\r\n        );\r\n    }\r\n\r\n    function logSell(\r\n        Storage.State storage state,\r\n        Actions.SellArgs memory args,\r\n        Types.Wei memory takerWei,\r\n        Types.Wei memory makerWei\r\n    )\r\n        internal\r\n    {\r\n        emit LogSell(\r\n            args.account.owner,\r\n            args.account.number,\r\n            args.takerMarket,\r\n            args.makerMarket,\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.takerMarket,\r\n                takerWei\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.account,\r\n                args.makerMarket,\r\n                makerWei\r\n            ),\r\n            args.exchangeWrapper\r\n        );\r\n    }\r\n\r\n    function logTrade(\r\n        Storage.State storage state,\r\n        Actions.TradeArgs memory args,\r\n        Types.Wei memory inputWei,\r\n        Types.Wei memory outputWei\r\n    )\r\n        internal\r\n    {\r\n        BalanceUpdate[4] memory updates = [\r\n            getBalanceUpdate(\r\n                state,\r\n                args.takerAccount,\r\n                args.inputMarket,\r\n                inputWei.negative()\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.takerAccount,\r\n                args.outputMarket,\r\n                outputWei.negative()\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.makerAccount,\r\n                args.inputMarket,\r\n                inputWei\r\n            ),\r\n            getBalanceUpdate(\r\n                state,\r\n                args.makerAccount,\r\n                args.outputMarket,\r\n                outputWei\r\n            )\r\n        ];\r\n\r\n        emit LogTrade(\r\n            args.takerAccount.owner,\r\n            args.takerAccount.number,\r\n            args.makerAccount.owner,\r\n            args.makerAccount.number,\r\n            args.inputMarket,\r\n            args.outputMarket,\r\n            updates[0],\r\n            updates[1],\r\n            updates[2],\r\n            updates[3],\r\n            args.autoTrader\r\n        );\r\n    }\r\n\r\n    function logCall(\r\n        Actions.CallArgs memory args\r\n    )\r\n        internal\r\n    {\r\n        emit LogCall(\r\n            args.account.owner,\r\n            args.account.number,\r\n            args.callee\r\n        );\r\n    }\r\n\r\n    function logLiquidate(\r\n        Storage.State storage state,\r\n        Actions.LiquidateArgs memory args,\r\n        Types.Wei memory heldWei,\r\n        Types.Wei memory owedWei\r\n    )\r\n        internal\r\n    {\r\n        BalanceUpdate memory solidHeldUpdate = getBalanceUpdate(\r\n            state,\r\n            args.solidAccount,\r\n            args.heldMarket,\r\n            heldWei.negative()\r\n        );\r\n        BalanceUpdate memory solidOwedUpdate = getBalanceUpdate(\r\n            state,\r\n            args.solidAccount,\r\n            args.owedMarket,\r\n            owedWei.negative()\r\n        );\r\n        BalanceUpdate memory liquidHeldUpdate = getBalanceUpdate(\r\n            state,\r\n            args.liquidAccount,\r\n            args.heldMarket,\r\n            heldWei\r\n        );\r\n        BalanceUpdate memory liquidOwedUpdate = getBalanceUpdate(\r\n            state,\r\n            args.liquidAccount,\r\n            args.owedMarket,\r\n            owedWei\r\n        );\r\n\r\n        emit LogLiquidate(\r\n            args.solidAccount.owner,\r\n            args.solidAccount.number,\r\n            args.liquidAccount.owner,\r\n            args.liquidAccount.number,\r\n            args.heldMarket,\r\n            args.owedMarket,\r\n            solidHeldUpdate,\r\n            solidOwedUpdate,\r\n            liquidHeldUpdate,\r\n            liquidOwedUpdate\r\n        );\r\n    }\r\n\r\n    function logVaporize(\r\n        Storage.State storage state,\r\n        Actions.VaporizeArgs memory args,\r\n        Types.Wei memory heldWei,\r\n        Types.Wei memory owedWei,\r\n        Types.Wei memory excessWei\r\n    )\r\n        internal\r\n    {\r\n        BalanceUpdate memory solidHeldUpdate = getBalanceUpdate(\r\n            state,\r\n            args.solidAccount,\r\n            args.heldMarket,\r\n            heldWei.negative()\r\n        );\r\n        BalanceUpdate memory solidOwedUpdate = getBalanceUpdate(\r\n            state,\r\n            args.solidAccount,\r\n            args.owedMarket,\r\n            owedWei.negative()\r\n        );\r\n        BalanceUpdate memory vaporOwedUpdate = getBalanceUpdate(\r\n            state,\r\n            args.vaporAccount,\r\n            args.owedMarket,\r\n            owedWei.add(excessWei)\r\n        );\r\n\r\n        emit LogVaporize(\r\n            args.solidAccount.owner,\r\n            args.solidAccount.number,\r\n            args.vaporAccount.owner,\r\n            args.vaporAccount.number,\r\n            args.heldMarket,\r\n            args.owedMarket,\r\n            solidHeldUpdate,\r\n            solidOwedUpdate,\r\n            vaporOwedUpdate\r\n        );\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    function getBalanceUpdate(\r\n        Storage.State storage state,\r\n        Account.Info memory account,\r\n        uint256 market,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        private\r\n        view\r\n        returns (BalanceUpdate memory)\r\n    {\r\n        return BalanceUpdate({\r\n            deltaWei: deltaWei,\r\n            newPar: state.getPar(account, market)\r\n        });\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IExchangeWrapper.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title IExchangeWrapper\r\n * @author dYdX\r\n *\r\n * Interface that Exchange Wrappers for Solo must implement in order to trade ERC20 tokens.\r\n */\r\ninterface IExchangeWrapper {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Exchange some amount of takerToken for makerToken.\r\n     *\r\n     * @param  tradeOriginator      Address of the initiator of the trade (however, this value\r\n     *                              cannot always be trusted as it is set at the discretion of the\r\n     *                              msg.sender)\r\n     * @param  receiver             Address to set allowance on once the trade has completed\r\n     * @param  makerToken           Address of makerToken, the token to receive\r\n     * @param  takerToken           Address of takerToken, the token to pay\r\n     * @param  requestedFillAmount  Amount of takerToken being paid\r\n     * @param  orderData            Arbitrary bytes data for any information to pass to the exchange\r\n     * @return                      The amount of makerToken received\r\n     */\r\n    function exchange(\r\n        address tradeOriginator,\r\n        address receiver,\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 requestedFillAmount,\r\n        bytes calldata orderData\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Get amount of takerToken required to buy a certain amount of makerToken for a given trade.\r\n     * Should match the takerToken amount used in exchangeForAmount. If the order cannot provide\r\n     * exactly desiredMakerToken, then it must return the price to buy the minimum amount greater\r\n     * than desiredMakerToken\r\n     *\r\n     * @param  makerToken         Address of makerToken, the token to receive\r\n     * @param  takerToken         Address of takerToken, the token to pay\r\n     * @param  desiredMakerToken  Amount of makerToken requested\r\n     * @param  orderData          Arbitrary bytes data for any information to pass to the exchange\r\n     * @return                    Amount of takerToken the needed to complete the exchange\r\n     */\r\n    function getExchangeCost(\r\n        address makerToken,\r\n        address takerToken,\r\n        uint256 desiredMakerToken,\r\n        bytes calldata orderData\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/protocol/lib/Exchange.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Exchange\r\n * @author dYdX\r\n *\r\n * Library for transferring tokens and interacting with ExchangeWrappers by using the Wei struct\r\n */\r\nlibrary Exchange {\r\n    using Types for Types.Wei;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Exchange\";\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function transferOut(\r\n        address token,\r\n        address to,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        Require.that(\r\n            !deltaWei.isPositive(),\r\n            FILE,\r\n            \"Cannot transferOut positive\",\r\n            deltaWei.value\r\n        );\r\n\r\n        Token.transfer(\r\n            token,\r\n            to,\r\n            deltaWei.value\r\n        );\r\n    }\r\n\r\n    function transferIn(\r\n        address token,\r\n        address from,\r\n        Types.Wei memory deltaWei\r\n    )\r\n        internal\r\n    {\r\n        Require.that(\r\n            !deltaWei.isNegative(),\r\n            FILE,\r\n            \"Cannot transferIn negative\",\r\n            deltaWei.value\r\n        );\r\n\r\n        Token.transferFrom(\r\n            token,\r\n            from,\r\n            address(this),\r\n            deltaWei.value\r\n        );\r\n    }\r\n\r\n    function getCost(\r\n        address exchangeWrapper,\r\n        address supplyToken,\r\n        address borrowToken,\r\n        Types.Wei memory desiredAmount,\r\n        bytes memory orderData\r\n    )\r\n        internal\r\n        view\r\n        returns (Types.Wei memory)\r\n    {\r\n        Require.that(\r\n            !desiredAmount.isNegative(),\r\n            FILE,\r\n            \"Cannot getCost negative\",\r\n            desiredAmount.value\r\n        );\r\n\r\n        Types.Wei memory result;\r\n        result.sign = false;\r\n        result.value = IExchangeWrapper(exchangeWrapper).getExchangeCost(\r\n            supplyToken,\r\n            borrowToken,\r\n            desiredAmount.value,\r\n            orderData\r\n        );\r\n\r\n        return result;\r\n    }\r\n\r\n    function exchange(\r\n        address exchangeWrapper,\r\n        address accountOwner,\r\n        address supplyToken,\r\n        address borrowToken,\r\n        Types.Wei memory requestedFillAmount,\r\n        bytes memory orderData\r\n    )\r\n        internal\r\n        returns (Types.Wei memory)\r\n    {\r\n        Require.that(\r\n            !requestedFillAmount.isPositive(),\r\n            FILE,\r\n            \"Cannot exchange positive\",\r\n            requestedFillAmount.value\r\n        );\r\n\r\n        transferOut(borrowToken, exchangeWrapper, requestedFillAmount);\r\n\r\n        Types.Wei memory result;\r\n        result.sign = true;\r\n        result.value = IExchangeWrapper(exchangeWrapper).exchange(\r\n            accountOwner,\r\n            address(this),\r\n            supplyToken,\r\n            borrowToken,\r\n            requestedFillAmount.value,\r\n            orderData\r\n        );\r\n\r\n        transferIn(supplyToken, exchangeWrapper, result);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/impl/OperationImpl.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OperationImpl\r\n * @author dYdX\r\n *\r\n * Logic for processing actions\r\n */\r\nlibrary OperationImpl {\r\n    using Cache for Cache.MarketCache;\r\n    using SafeMath for uint256;\r\n    using Storage for Storage.State;\r\n    using Types for Types.Par;\r\n    using Types for Types.Wei;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"OperationImpl\";\r\n\r\n    // ============ Public Functions ============\r\n\r\n    function operate(\r\n        Storage.State storage state,\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    )\r\n        public\r\n    {\r\n        Events.logOperation();\r\n\r\n        _verifyInputs(accounts, actions);\r\n\r\n        (\r\n            bool[] memory primaryAccounts,\r\n            Cache.MarketCache memory cache\r\n        ) = _runPreprocessing(\r\n            state,\r\n            accounts,\r\n            actions\r\n        );\r\n\r\n        _runActions(\r\n            state,\r\n            accounts,\r\n            actions,\r\n            cache\r\n        );\r\n\r\n        _verifyFinalState(\r\n            state,\r\n            accounts,\r\n            primaryAccounts,\r\n            cache\r\n        );\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function _verifyInputs(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        Require.that(\r\n            actions.length != 0,\r\n            FILE,\r\n            \"Cannot have zero actions\"\r\n        );\r\n\r\n        Require.that(\r\n            accounts.length != 0,\r\n            FILE,\r\n            \"Cannot have zero accounts\"\r\n        );\r\n\r\n        for (uint256 a = 0; a < accounts.length; a++) {\r\n            for (uint256 b = a + 1; b < accounts.length; b++) {\r\n                Require.that(\r\n                    !Account.equals(accounts[a], accounts[b]),\r\n                    FILE,\r\n                    \"Cannot duplicate accounts\",\r\n                    a,\r\n                    b\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _runPreprocessing(\r\n        Storage.State storage state,\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    )\r\n        private\r\n        returns (\r\n            bool[] memory,\r\n            Cache.MarketCache memory\r\n        )\r\n    {\r\n        uint256 numMarkets = state.numMarkets;\r\n        bool[] memory primaryAccounts = new bool[](accounts.length);\r\n        Cache.MarketCache memory cache = Cache.create(numMarkets);\r\n\r\n        // keep track of primary accounts and indexes that need updating\r\n        for (uint256 i = 0; i < actions.length; i++) {\r\n            Actions.ActionArgs memory arg = actions[i];\r\n            Actions.ActionType actionType = arg.actionType;\r\n            Actions.MarketLayout marketLayout = Actions.getMarketLayout(actionType);\r\n            Actions.AccountLayout accountLayout = Actions.getAccountLayout(actionType);\r\n\r\n            // parse out primary accounts\r\n            if (accountLayout != Actions.AccountLayout.OnePrimary) {\r\n                Require.that(\r\n                    arg.accountId != arg.otherAccountId,\r\n                    FILE,\r\n                    \"Duplicate accounts in action\",\r\n                    i\r\n                );\r\n                if (accountLayout == Actions.AccountLayout.TwoPrimary) {\r\n                    primaryAccounts[arg.otherAccountId] = true;\r\n                } else {\r\n                    assert(accountLayout == Actions.AccountLayout.PrimaryAndSecondary);\r\n                    Require.that(\r\n                        !primaryAccounts[arg.otherAccountId],\r\n                        FILE,\r\n                        \"Requires non-primary account\",\r\n                        arg.otherAccountId\r\n                    );\r\n                }\r\n            }\r\n            primaryAccounts[arg.accountId] = true;\r\n\r\n            // keep track of indexes to update\r\n            if (marketLayout == Actions.MarketLayout.OneMarket) {\r\n                _updateMarket(state, cache, arg.primaryMarketId);\r\n            } else if (marketLayout == Actions.MarketLayout.TwoMarkets) {\r\n                Require.that(\r\n                    arg.primaryMarketId != arg.secondaryMarketId,\r\n                    FILE,\r\n                    \"Duplicate markets in action\",\r\n                    i\r\n                );\r\n                _updateMarket(state, cache, arg.primaryMarketId);\r\n                _updateMarket(state, cache, arg.secondaryMarketId);\r\n            } else {\r\n                assert(marketLayout == Actions.MarketLayout.ZeroMarkets);\r\n            }\r\n        }\r\n\r\n        // get any other markets for which an account has a balance\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (cache.hasMarket(m)) {\r\n                continue;\r\n            }\r\n            for (uint256 a = 0; a < accounts.length; a++) {\r\n                if (!state.getPar(accounts[a], m).isZero()) {\r\n                    _updateMarket(state, cache, m);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (primaryAccounts, cache);\r\n    }\r\n\r\n    function _updateMarket(\r\n        Storage.State storage state,\r\n        Cache.MarketCache memory cache,\r\n        uint256 marketId\r\n    )\r\n        private\r\n    {\r\n        bool updated = cache.addMarket(state, marketId);\r\n        if (updated) {\r\n            Events.logIndexUpdate(marketId, state.updateIndex(marketId));\r\n        }\r\n    }\r\n\r\n    function _runActions(\r\n        Storage.State storage state,\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions,\r\n        Cache.MarketCache memory cache\r\n    )\r\n        private\r\n    {\r\n        for (uint256 i = 0; i < actions.length; i++) {\r\n            Actions.ActionArgs memory action = actions[i];\r\n            Actions.ActionType actionType = action.actionType;\r\n\r\n            if (actionType == Actions.ActionType.Deposit) {\r\n                _deposit(state, Actions.parseDepositArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Withdraw) {\r\n                _withdraw(state, Actions.parseWithdrawArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Transfer) {\r\n                _transfer(state, Actions.parseTransferArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Buy) {\r\n                _buy(state, Actions.parseBuyArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Sell) {\r\n                _sell(state, Actions.parseSellArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Trade) {\r\n                _trade(state, Actions.parseTradeArgs(accounts, action));\r\n            }\r\n            else if (actionType == Actions.ActionType.Liquidate) {\r\n                _liquidate(state, Actions.parseLiquidateArgs(accounts, action), cache);\r\n            }\r\n            else if (actionType == Actions.ActionType.Vaporize) {\r\n                _vaporize(state, Actions.parseVaporizeArgs(accounts, action), cache);\r\n            }\r\n            else  {\r\n                assert(actionType == Actions.ActionType.Call);\r\n                _call(state, Actions.parseCallArgs(accounts, action));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyFinalState(\r\n        Storage.State storage state,\r\n        Account.Info[] memory accounts,\r\n        bool[] memory primaryAccounts,\r\n        Cache.MarketCache memory cache\r\n    )\r\n        private\r\n    {\r\n        // verify no increase in borrowPar for closing markets\r\n        uint256 numMarkets = cache.getNumMarkets();\r\n        for (uint256 m = 0; m < numMarkets; m++) {\r\n            if (cache.getIsClosing(m)) {\r\n                Require.that(\r\n                    state.getTotalPar(m).borrow <= cache.getBorrowPar(m),\r\n                    FILE,\r\n                    \"Market is closing\",\r\n                    m\r\n                );\r\n            }\r\n        }\r\n\r\n        // verify account collateralization\r\n        for (uint256 a = 0; a < accounts.length; a++) {\r\n            Account.Info memory account = accounts[a];\r\n\r\n            // validate minBorrowedValue\r\n            bool collateralized = state.isCollateralized(account, cache, true);\r\n\r\n            // don't check collateralization for non-primary accounts\r\n            if (!primaryAccounts[a]) {\r\n                continue;\r\n            }\r\n\r\n            // check collateralization for primary accounts\r\n            Require.that(\r\n                collateralized,\r\n                FILE,\r\n                \"Undercollateralized account\",\r\n                account.owner,\r\n                account.number\r\n            );\r\n\r\n            // ensure status is normal for primary accounts\r\n            if (state.getStatus(account) != Account.Status.Normal) {\r\n                state.setStatus(account, Account.Status.Normal);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============ Action Functions ============\r\n\r\n    function _deposit(\r\n        Storage.State storage state,\r\n        Actions.DepositArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.account, msg.sender);\r\n\r\n        Require.that(\r\n            args.from == msg.sender || args.from == args.account.owner,\r\n            FILE,\r\n            \"Invalid deposit source\",\r\n            args.from\r\n        );\r\n\r\n        (\r\n            Types.Par memory newPar,\r\n            Types.Wei memory deltaWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.account,\r\n            args.market,\r\n            args.amount\r\n        );\r\n\r\n        state.setPar(\r\n            args.account,\r\n            args.market,\r\n            newPar\r\n        );\r\n\r\n        // requires a positive deltaWei\r\n        Exchange.transferIn(\r\n            state.getToken(args.market),\r\n            args.from,\r\n            deltaWei\r\n        );\r\n\r\n        Events.logDeposit(\r\n            state,\r\n            args,\r\n            deltaWei\r\n        );\r\n    }\r\n\r\n    function _withdraw(\r\n        Storage.State storage state,\r\n        Actions.WithdrawArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.account, msg.sender);\r\n\r\n        (\r\n            Types.Par memory newPar,\r\n            Types.Wei memory deltaWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.account,\r\n            args.market,\r\n            args.amount\r\n        );\r\n\r\n        state.setPar(\r\n            args.account,\r\n            args.market,\r\n            newPar\r\n        );\r\n\r\n        // requires a negative deltaWei\r\n        Exchange.transferOut(\r\n            state.getToken(args.market),\r\n            args.to,\r\n            deltaWei\r\n        );\r\n\r\n        Events.logWithdraw(\r\n            state,\r\n            args,\r\n            deltaWei\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        Storage.State storage state,\r\n        Actions.TransferArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.accountOne, msg.sender);\r\n        state.requireIsOperator(args.accountTwo, msg.sender);\r\n\r\n        (\r\n            Types.Par memory newPar,\r\n            Types.Wei memory deltaWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.accountOne,\r\n            args.market,\r\n            args.amount\r\n        );\r\n\r\n        state.setPar(\r\n            args.accountOne,\r\n            args.market,\r\n            newPar\r\n        );\r\n\r\n        state.setParFromDeltaWei(\r\n            args.accountTwo,\r\n            args.market,\r\n            deltaWei.negative()\r\n        );\r\n\r\n        Events.logTransfer(\r\n            state,\r\n            args,\r\n            deltaWei\r\n        );\r\n    }\r\n\r\n    function _buy(\r\n        Storage.State storage state,\r\n        Actions.BuyArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.account, msg.sender);\r\n\r\n        address takerToken = state.getToken(args.takerMarket);\r\n        address makerToken = state.getToken(args.makerMarket);\r\n\r\n        (\r\n            Types.Par memory makerPar,\r\n            Types.Wei memory makerWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.account,\r\n            args.makerMarket,\r\n            args.amount\r\n        );\r\n\r\n        Types.Wei memory takerWei = Exchange.getCost(\r\n            args.exchangeWrapper,\r\n            makerToken,\r\n            takerToken,\r\n            makerWei,\r\n            args.orderData\r\n        );\r\n\r\n        Types.Wei memory tokensReceived = Exchange.exchange(\r\n            args.exchangeWrapper,\r\n            args.account.owner,\r\n            makerToken,\r\n            takerToken,\r\n            takerWei,\r\n            args.orderData\r\n        );\r\n\r\n        Require.that(\r\n            tokensReceived.value >= makerWei.value,\r\n            FILE,\r\n            \"Buy amount less than promised\",\r\n            tokensReceived.value,\r\n            makerWei.value\r\n        );\r\n\r\n        state.setPar(\r\n            args.account,\r\n            args.makerMarket,\r\n            makerPar\r\n        );\r\n\r\n        state.setParFromDeltaWei(\r\n            args.account,\r\n            args.takerMarket,\r\n            takerWei\r\n        );\r\n\r\n        Events.logBuy(\r\n            state,\r\n            args,\r\n            takerWei,\r\n            makerWei\r\n        );\r\n    }\r\n\r\n    function _sell(\r\n        Storage.State storage state,\r\n        Actions.SellArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.account, msg.sender);\r\n\r\n        address takerToken = state.getToken(args.takerMarket);\r\n        address makerToken = state.getToken(args.makerMarket);\r\n\r\n        (\r\n            Types.Par memory takerPar,\r\n            Types.Wei memory takerWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.account,\r\n            args.takerMarket,\r\n            args.amount\r\n        );\r\n\r\n        Types.Wei memory makerWei = Exchange.exchange(\r\n            args.exchangeWrapper,\r\n            args.account.owner,\r\n            makerToken,\r\n            takerToken,\r\n            takerWei,\r\n            args.orderData\r\n        );\r\n\r\n        state.setPar(\r\n            args.account,\r\n            args.takerMarket,\r\n            takerPar\r\n        );\r\n\r\n        state.setParFromDeltaWei(\r\n            args.account,\r\n            args.makerMarket,\r\n            makerWei\r\n        );\r\n\r\n        Events.logSell(\r\n            state,\r\n            args,\r\n            takerWei,\r\n            makerWei\r\n        );\r\n    }\r\n\r\n    function _trade(\r\n        Storage.State storage state,\r\n        Actions.TradeArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.takerAccount, msg.sender);\r\n        state.requireIsOperator(args.makerAccount, args.autoTrader);\r\n\r\n        Types.Par memory oldInputPar = state.getPar(\r\n            args.makerAccount,\r\n            args.inputMarket\r\n        );\r\n        (\r\n            Types.Par memory newInputPar,\r\n            Types.Wei memory inputWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.makerAccount,\r\n            args.inputMarket,\r\n            args.amount\r\n        );\r\n\r\n        Types.AssetAmount memory outputAmount = IAutoTrader(args.autoTrader).getTradeCost(\r\n            args.inputMarket,\r\n            args.outputMarket,\r\n            args.makerAccount,\r\n            args.takerAccount,\r\n            oldInputPar,\r\n            newInputPar,\r\n            inputWei,\r\n            args.tradeData\r\n        );\r\n\r\n        (\r\n            Types.Par memory newOutputPar,\r\n            Types.Wei memory outputWei\r\n        ) = state.getNewParAndDeltaWei(\r\n            args.makerAccount,\r\n            args.outputMarket,\r\n            outputAmount\r\n        );\r\n\r\n        Require.that(\r\n            outputWei.isZero() || inputWei.isZero() || outputWei.sign != inputWei.sign,\r\n            FILE,\r\n            \"Trades cannot be one-sided\"\r\n        );\r\n\r\n        // set the balance for the maker\r\n        state.setPar(\r\n            args.makerAccount,\r\n            args.inputMarket,\r\n            newInputPar\r\n        );\r\n        state.setPar(\r\n            args.makerAccount,\r\n            args.outputMarket,\r\n            newOutputPar\r\n        );\r\n\r\n        // set the balance for the taker\r\n        state.setParFromDeltaWei(\r\n            args.takerAccount,\r\n            args.inputMarket,\r\n            inputWei.negative()\r\n        );\r\n        state.setParFromDeltaWei(\r\n            args.takerAccount,\r\n            args.outputMarket,\r\n            outputWei.negative()\r\n        );\r\n\r\n        Events.logTrade(\r\n            state,\r\n            args,\r\n            inputWei,\r\n            outputWei\r\n        );\r\n    }\r\n\r\n    function _liquidate(\r\n        Storage.State storage state,\r\n        Actions.LiquidateArgs memory args,\r\n        Cache.MarketCache memory cache\r\n    )\r\n        private\r\n    {\r\n        state.requireIsGlobalOperator(msg.sender);\r\n\r\n        // verify liquidatable\r\n        if (Account.Status.Liquid != state.getStatus(args.liquidAccount)) {\r\n            Require.that(\r\n                !state.isCollateralized(args.liquidAccount, cache, /* requireMinBorrow = */ false),\r\n                FILE,\r\n                \"Unliquidatable account\",\r\n                args.liquidAccount.owner,\r\n                args.liquidAccount.number\r\n            );\r\n            state.setStatus(args.liquidAccount, Account.Status.Liquid);\r\n        }\r\n\r\n        Types.Wei memory maxHeldWei = state.getWei(\r\n            args.liquidAccount,\r\n            args.heldMarket\r\n        );\r\n\r\n        Require.that(\r\n            !maxHeldWei.isNegative(),\r\n            FILE,\r\n            \"Collateral cannot be negative\",\r\n            args.liquidAccount.owner,\r\n            args.liquidAccount.number,\r\n            args.heldMarket\r\n        );\r\n\r\n        (\r\n            Types.Par memory owedPar,\r\n            Types.Wei memory owedWei\r\n        ) = state.getNewParAndDeltaWeiForLiquidation(\r\n            args.liquidAccount,\r\n            args.owedMarket,\r\n            args.amount\r\n        );\r\n\r\n        (\r\n            Monetary.Price memory heldPrice,\r\n            Monetary.Price memory owedPrice\r\n        ) = _getLiquidationPrices(\r\n            state,\r\n            cache,\r\n            args.heldMarket,\r\n            args.owedMarket\r\n        );\r\n\r\n        Types.Wei memory heldWei = _owedWeiToHeldWei(owedWei, heldPrice, owedPrice);\r\n\r\n        // if attempting to over-borrow the held asset, bound it by the maximum\r\n        if (heldWei.value > maxHeldWei.value) {\r\n            heldWei = maxHeldWei.negative();\r\n            owedWei = _heldWeiToOwedWei(heldWei, heldPrice, owedPrice);\r\n\r\n            state.setPar(\r\n                args.liquidAccount,\r\n                args.heldMarket,\r\n                Types.zeroPar()\r\n            );\r\n            state.setParFromDeltaWei(\r\n                args.liquidAccount,\r\n                args.owedMarket,\r\n                owedWei\r\n            );\r\n        } else {\r\n            state.setPar(\r\n                args.liquidAccount,\r\n                args.owedMarket,\r\n                owedPar\r\n            );\r\n            state.setParFromDeltaWei(\r\n                args.liquidAccount,\r\n                args.heldMarket,\r\n                heldWei\r\n            );\r\n        }\r\n\r\n        // set the balances for the solid account\r\n        state.setParFromDeltaWei(\r\n            args.solidAccount,\r\n            args.owedMarket,\r\n            owedWei.negative()\r\n        );\r\n        state.setParFromDeltaWei(\r\n            args.solidAccount,\r\n            args.heldMarket,\r\n            heldWei.negative()\r\n        );\r\n\r\n        Events.logLiquidate(\r\n            state,\r\n            args,\r\n            heldWei,\r\n            owedWei\r\n        );\r\n    }\r\n\r\n    function _vaporize(\r\n        Storage.State storage state,\r\n        Actions.VaporizeArgs memory args,\r\n        Cache.MarketCache memory cache\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.solidAccount, msg.sender);\r\n\r\n        // verify vaporizable\r\n        if (Account.Status.Vapor != state.getStatus(args.vaporAccount)) {\r\n            Require.that(\r\n                state.isVaporizable(args.vaporAccount, cache),\r\n                FILE,\r\n                \"Unvaporizable account\",\r\n                args.vaporAccount.owner,\r\n                args.vaporAccount.number\r\n            );\r\n            state.setStatus(args.vaporAccount, Account.Status.Vapor);\r\n        }\r\n\r\n        // First, attempt to refund using the same token\r\n        (\r\n            bool fullyRepaid,\r\n            Types.Wei memory excessWei\r\n        ) = _vaporizeUsingExcess(state, args);\r\n        if (fullyRepaid) {\r\n            Events.logVaporize(\r\n                state,\r\n                args,\r\n                Types.zeroWei(),\r\n                Types.zeroWei(),\r\n                excessWei\r\n            );\r\n            return;\r\n        }\r\n\r\n        Types.Wei memory maxHeldWei = state.getNumExcessTokens(args.heldMarket);\r\n\r\n        Require.that(\r\n            !maxHeldWei.isNegative(),\r\n            FILE,\r\n            \"Excess cannot be negative\",\r\n            args.heldMarket\r\n        );\r\n\r\n        (\r\n            Types.Par memory owedPar,\r\n            Types.Wei memory owedWei\r\n        ) = state.getNewParAndDeltaWeiForLiquidation(\r\n            args.vaporAccount,\r\n            args.owedMarket,\r\n            args.amount\r\n        );\r\n\r\n        (\r\n            Monetary.Price memory heldPrice,\r\n            Monetary.Price memory owedPrice\r\n        ) = _getLiquidationPrices(\r\n            state,\r\n            cache,\r\n            args.heldMarket,\r\n            args.owedMarket\r\n        );\r\n\r\n        Types.Wei memory heldWei = _owedWeiToHeldWei(owedWei, heldPrice, owedPrice);\r\n\r\n        // if attempting to over-borrow the held asset, bound it by the maximum\r\n        if (heldWei.value > maxHeldWei.value) {\r\n            heldWei = maxHeldWei.negative();\r\n            owedWei = _heldWeiToOwedWei(heldWei, heldPrice, owedPrice);\r\n\r\n            state.setParFromDeltaWei(\r\n                args.vaporAccount,\r\n                args.owedMarket,\r\n                owedWei\r\n            );\r\n        } else {\r\n            state.setPar(\r\n                args.vaporAccount,\r\n                args.owedMarket,\r\n                owedPar\r\n            );\r\n        }\r\n\r\n        // set the balances for the solid account\r\n        state.setParFromDeltaWei(\r\n            args.solidAccount,\r\n            args.owedMarket,\r\n            owedWei.negative()\r\n        );\r\n        state.setParFromDeltaWei(\r\n            args.solidAccount,\r\n            args.heldMarket,\r\n            heldWei.negative()\r\n        );\r\n\r\n        Events.logVaporize(\r\n            state,\r\n            args,\r\n            heldWei,\r\n            owedWei,\r\n            excessWei\r\n        );\r\n    }\r\n\r\n    function _call(\r\n        Storage.State storage state,\r\n        Actions.CallArgs memory args\r\n    )\r\n        private\r\n    {\r\n        state.requireIsOperator(args.account, msg.sender);\r\n\r\n        ICallee(args.callee).callFunction(\r\n            msg.sender,\r\n            args.account,\r\n            args.data\r\n        );\r\n\r\n        Events.logCall(args);\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * For the purposes of liquidation or vaporization, get the value-equivalent amount of heldWei\r\n     * given owedWei and the (spread-adjusted) prices of each asset.\r\n     */\r\n    function _owedWeiToHeldWei(\r\n        Types.Wei memory owedWei,\r\n        Monetary.Price memory heldPrice,\r\n        Monetary.Price memory owedPrice\r\n    )\r\n        private\r\n        pure\r\n        returns (Types.Wei memory)\r\n    {\r\n        return Types.Wei({\r\n            sign: false,\r\n            value: Math.getPartial(owedWei.value, owedPrice.value, heldPrice.value)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * For the purposes of liquidation or vaporization, get the value-equivalent amount of owedWei\r\n     * given heldWei and the (spread-adjusted) prices of each asset.\r\n     */\r\n    function _heldWeiToOwedWei(\r\n        Types.Wei memory heldWei,\r\n        Monetary.Price memory heldPrice,\r\n        Monetary.Price memory owedPrice\r\n    )\r\n        private\r\n        pure\r\n        returns (Types.Wei memory)\r\n    {\r\n        return Types.Wei({\r\n            sign: true,\r\n            value: Math.getPartialRoundUp(heldWei.value, heldPrice.value, owedPrice.value)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempt to vaporize an account's balance using the excess tokens in the protocol. Return a\r\n     * bool and a wei value. The boolean is true if and only if the balance was fully vaporized. The\r\n     * Wei value is how many excess tokens were used to partially or fully vaporize the account's\r\n     * negative balance.\r\n     */\r\n    function _vaporizeUsingExcess(\r\n        Storage.State storage state,\r\n        Actions.VaporizeArgs memory args\r\n    )\r\n        internal\r\n        returns (bool, Types.Wei memory)\r\n    {\r\n        Types.Wei memory excessWei = state.getNumExcessTokens(args.owedMarket);\r\n\r\n        // There are no excess funds, return zero\r\n        if (!excessWei.isPositive()) {\r\n            return (false, Types.zeroWei());\r\n        }\r\n\r\n        Types.Wei memory maxRefundWei = state.getWei(args.vaporAccount, args.owedMarket);\r\n        maxRefundWei.sign = true;\r\n\r\n        // The account is fully vaporizable using excess funds\r\n        if (excessWei.value >= maxRefundWei.value) {\r\n            state.setPar(\r\n                args.vaporAccount,\r\n                args.owedMarket,\r\n                Types.zeroPar()\r\n            );\r\n            return (true, maxRefundWei);\r\n        }\r\n\r\n        // The account is only partially vaporizable using excess funds\r\n        else {\r\n            state.setParFromDeltaWei(\r\n                args.vaporAccount,\r\n                args.owedMarket,\r\n                excessWei\r\n            );\r\n            return (false, excessWei);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the (spread-adjusted) prices of two assets for the purposes of liquidation or\r\n     * vaporization.\r\n     */\r\n    function _getLiquidationPrices(\r\n        Storage.State storage state,\r\n        Cache.MarketCache memory cache,\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            Monetary.Price memory,\r\n            Monetary.Price memory\r\n        )\r\n    {\r\n        uint256 originalPrice = cache.getPrice(owedMarketId).value;\r\n        Decimal.D256 memory spread = state.getLiquidationSpreadForPair(\r\n            heldMarketId,\r\n            owedMarketId\r\n        );\r\n\r\n        Monetary.Price memory owedPrice = Monetary.Price({\r\n            value: originalPrice.add(Decimal.mul(originalPrice, spread))\r\n        });\r\n\r\n        return (cache.getPrice(heldMarketId), owedPrice);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/Operation.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Operation\r\n * @author dYdX\r\n *\r\n * Primary public function for allowing users and contracts to manage accounts within Solo\r\n */\r\ncontract Operation is\r\n    State,\r\n    ReentrancyGuard\r\n{\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * The main entry-point to Solo that allows users and contracts to manage accounts.\r\n     * Take one or more actions on one or more accounts. The msg.sender must be the owner or\r\n     * operator of all accounts except for those being liquidated, vaporized, or traded with.\r\n     * One call to operate() is considered a singular \"operation\". Account collateralization is\r\n     * ensured only after the completion of the entire operation.\r\n     *\r\n     * @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\r\n     *                   duplicates. In each action, the relevant account will be referred-to by its\r\n     *                   index in the list.\r\n     * @param  actions   An ordered list of all actions that will be taken in this operation. The\r\n     *                   actions will be processed in order.\r\n     */\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    )\r\n        public\r\n        nonReentrant\r\n    {\r\n        OperationImpl.operate(\r\n            g_state,\r\n            accounts,\r\n            actions\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/Permission.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title Permission\r\n * @author dYdX\r\n *\r\n * Public function that allows other addresses to manage accounts\r\n */\r\ncontract Permission is\r\n    State\r\n{\r\n    // ============ Events ============\r\n\r\n    event LogOperatorSet(\r\n        address indexed owner,\r\n        address operator,\r\n        bool trusted\r\n    );\r\n\r\n    // ============ Structs ============\r\n\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Approves/disapproves any number of operators. An operator is an external address that has the\r\n     * same permissions to manipulate an account as the owner of the account. Operators are simply\r\n     * addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\r\n     *\r\n     * Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\r\n     * operator is a smart contract and implements the IAutoTrader interface.\r\n     *\r\n     * @param  args  A list of OperatorArgs which have an address and a boolean. The boolean value\r\n     *               denotes whether to approve (true) or revoke approval (false) for that address.\r\n     */\r\n    function setOperators(\r\n        OperatorArg[] memory args\r\n    )\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < args.length; i++) {\r\n            address operator = args[i].operator;\r\n            bool trusted = args[i].trusted;\r\n            g_state.operators[msg.sender][operator] = trusted;\r\n            emit LogOperatorSet(msg.sender, operator, trusted);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/SoloMargin.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SoloMargin\r\n * @author dYdX\r\n *\r\n * Main contract that inherits from other contracts\r\n */\r\ncontract SoloMargin is\r\n    State,\r\n    Admin,\r\n    Getters,\r\n    Operation,\r\n    Permission\r\n{\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        Storage.RiskParams memory riskParams,\r\n        Storage.RiskLimits memory riskLimits\r\n    )\r\n        public\r\n    {\r\n        g_state.riskParams = riskParams;\r\n        g_state.riskLimits = riskLimits;\r\n    }\r\n}\r\n\r\n// File: contracts/external/helpers/OnlySolo.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OnlySolo\r\n * @author dYdX\r\n *\r\n * Inheritable contract that restricts the calling of certain functions to Solo only\r\n */\r\ncontract OnlySolo {\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"OnlySolo\";\r\n\r\n    // ============ Storage ============\r\n\r\n    SoloMargin public SOLO_MARGIN;\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor (\r\n        address soloMargin\r\n    )\r\n        public\r\n    {\r\n        SOLO_MARGIN = SoloMargin(soloMargin);\r\n    }\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlySolo(address from) {\r\n        Require.that(\r\n            from == address(SOLO_MARGIN),\r\n            FILE,\r\n            \"Only Solo can call function\",\r\n            from\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/external/proxies/PayableProxyForSoloMargin.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PayableProxyForSoloMargin\r\n * @author dYdX\r\n *\r\n * Contract for wrapping/unwrapping ETH before/after interacting with Solo\r\n */\r\ncontract PayableProxyForSoloMargin is\r\n    OnlySolo,\r\n    ReentrancyGuard\r\n{\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"PayableProxyForSoloMargin\";\r\n\r\n    // ============ Storage ============\r\n\r\n    WETH9 public WETH;\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor (\r\n        address soloMargin,\r\n        address payable weth\r\n    )\r\n        public\r\n        OnlySolo(soloMargin)\r\n    {\r\n        WETH = WETH9(weth);\r\n        WETH.approve(soloMargin, uint256(-1));\r\n    }\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Fallback function. Disallows ether to be sent to this contract without data except when\r\n     * unwrapping WETH.\r\n     */\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        require( // coverage-disable-line\r\n            msg.sender == address(WETH),\r\n            \"Cannot receive ETH\"\r\n        );\r\n    }\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions,\r\n        address payable sendEthTo\r\n    )\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        WETH9 weth = WETH;\r\n\r\n        // create WETH from ETH\r\n        if (msg.value != 0) {\r\n            weth.deposit.value(msg.value)();\r\n        }\r\n\r\n        // validate the input\r\n        for (uint256 i = 0; i < actions.length; i++) {\r\n            Actions.ActionArgs memory action = actions[i];\r\n\r\n            // Can only operate on accounts owned by msg.sender\r\n            address owner1 = accounts[action.accountId].owner;\r\n            Require.that(\r\n                owner1 == msg.sender,\r\n                FILE,\r\n                \"Sender must be primary account\",\r\n                owner1\r\n            );\r\n\r\n            // For a transfer both accounts must be owned by msg.sender\r\n            if (action.actionType == Actions.ActionType.Transfer) {\r\n                address owner2 = accounts[action.otherAccountId].owner;\r\n                Require.that(\r\n                    owner2 == msg.sender,\r\n                    FILE,\r\n                    \"Sender must be secondary account\",\r\n                    owner2\r\n                );\r\n            }\r\n        }\r\n\r\n        SOLO_MARGIN.operate(accounts, actions);\r\n\r\n        // return all remaining WETH to the sendEthTo as ETH\r\n        uint256 remainingWeth = weth.balanceOf(address(this));\r\n        if (remainingWeth != 0) {\r\n            Require.that(\r\n                sendEthTo != address(0),\r\n                FILE,\r\n                \"Must set sendEthTo\"\r\n            );\r\n\r\n            weth.withdraw(remainingWeth);\r\n            sendEthTo.transfer(remainingWeth);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"components\":[{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"denomination\",\"type\":\"uint8\"},{\"name\":\"ref\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amount\",\"type\":\"tuple\"},{\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"name\":\"otherAddress\",\"type\":\"address\"},{\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"actions\",\"type\":\"tuple[]\"},{\"name\":\"sendEthTo\",\"type\":\"address\"}],\"name\":\"operate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"soloMargin\",\"type\":\"address\"},{\"name\":\"weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PayableProxyForSoloMargin","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000002c57952e2e406a9a9af2dff2c280c59df9a8b8b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://efa33e2ac113936441fe2c30543d8a9ba7fa8bdbe117d874cf0e44b1128d00d6"}]}