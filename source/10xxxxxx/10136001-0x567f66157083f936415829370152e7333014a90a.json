{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary StringUtil {\r\n  struct slice {\r\n    uint _length;\r\n    uint _pointer;\r\n  }\r\n\r\n  function validateUserName(string memory _username)\r\n  internal\r\n  pure\r\n  returns (bool)\r\n  {\r\n    uint8 len = uint8(bytes(_username).length);\r\n    if ((len < 4) || (len > 18)) return false;\r\n\r\n    // only contain A-Z 0-9\r\n    for (uint8 i = 0; i < len; i++) {\r\n      if (\r\n        (uint8(bytes(_username)[i]) < 48) ||\r\n        (uint8(bytes(_username)[i]) > 57 && uint8(bytes(_username)[i]) < 65) ||\r\n        (uint8(bytes(_username)[i]) > 90)\r\n      ) return false;\r\n    }\r\n    // First char != '0'\r\n    return uint8(bytes(_username)[0]) != 48;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\nlibrary UnitConverter {\r\n  using SafeMath for uint256;\r\n\r\n  function stringToBytes24(string memory source)\r\n  internal\r\n  pure\r\n  returns (bytes24 result)\r\n  {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n      return 0x0;\r\n    }\r\n\r\n    assembly {\r\n      result := mload(add(source, 24))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract IUSDT {\r\n    function transfer(address to, uint256 value) public;\r\n\r\n    function approve(address spender, uint256 value) public;\r\n\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Auth {\r\n\r\n  address internal mainAdmin;\r\n  address internal backupAdmin;\r\n  address internal contractAdmin;\r\n\r\n  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n  constructor(\r\n    address _mainAdmin,\r\n    address _backupAdmin,\r\n    address _contractAdmin\r\n  ) internal {\r\n    mainAdmin = _mainAdmin;\r\n    backupAdmin = _backupAdmin;\r\n    contractAdmin = _contractAdmin;\r\n  }\r\n\r\n  modifier onlyMainAdmin() {\r\n    require(isMainAdmin(), 'onlyMainAdmin');\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n    require(isBackupAdmin(), 'onlyBackupAdmin');\r\n    _;\r\n  }\r\n\r\n  modifier onlyContractAdmin() {\r\n    require(isContractAdmin() || isMainAdmin(), 'onlyContractAdmin');\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) onlyBackupAdmin internal {\r\n    require(_newOwner != address(0x0));\r\n    mainAdmin = _newOwner;\r\n    emit OwnershipTransferred(msg.sender, _newOwner);\r\n  }\r\n\r\n  function isMainAdmin() public view returns (bool) {\r\n    return msg.sender == mainAdmin;\r\n  }\r\n\r\n  function isBackupAdmin() public view returns (bool) {\r\n    return msg.sender == backupAdmin;\r\n  }\r\n\r\n  function isContractAdmin() public view returns (bool) {\r\n    return msg.sender == contractAdmin;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Exchange is Auth {\r\n  using StringUtil for string;\r\n  using UnitConverter for string;\r\n\r\n  struct Order {\r\n    string id;\r\n    address maker;\r\n    address taker;\r\n    uint amount; // decimal 3\r\n    uint price; // decimal 3\r\n  }\r\n\r\n  mapping (string => Order) orders;\r\n  IUSDT usdtToken = IUSDT(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n  event OrderMade(string id, address indexed maker, uint amount, uint price, uint timestamp);\r\n  event OrderCanceled(string id, uint timestamp);\r\n  event OrderCanceledByAdmin(string id, uint timestamp);\r\n  event OrderTaken(string id, address indexed taker, uint timestamp);\r\n  event Withdrew(address indexed user, uint amount, uint timestamp);\r\n  event WithdrewCanceled(address indexed user, string id, uint timestamp);\r\n\r\n  constructor (\r\n    address _mainAdmin,\r\n    address _backupAdmin\r\n  )\r\n  Auth(_mainAdmin, _backupAdmin, msg.sender)\r\n  public {}\r\n\r\n  function updateMainAdmin(address _admin) public {\r\n    transferOwnership(_admin);\r\n  }\r\n\r\n  function updateBackupAdmin(address _backupAdmin) onlyBackupAdmin public {\r\n    require(_backupAdmin != address(0x0), 'Invalid address');\r\n    backupAdmin = _backupAdmin;\r\n  }\r\n\r\n  function updateContractAdmin(address _contractAdmin) onlyMainAdmin public {\r\n    require(_contractAdmin != address(0x0), 'Invalid address');\r\n    contractAdmin = _contractAdmin;\r\n  }\r\n\r\n  function adminCancelOrder(string _id) onlyContractAdmin public {\r\n    delete orders[_id];\r\n    emit OrderCanceledByAdmin(_id, now);\r\n  }\r\n\r\n  function makeOrder(string _id, uint _amount, uint _price) public {\r\n    require(orders[_id].maker == address(0x0), 'Duplicate id!!!');\r\n    require(bytes(_id).length > 0, 'Invalid id');\r\n    require(_price > 0 && _price < 10000, 'Invalid price!!!');\r\n    orders[_id] = Order (\r\n      _id,\r\n      msg.sender,\r\n      address(0x0),\r\n      _amount,\r\n      _price\r\n    );\r\n    emit OrderMade(_id, msg.sender, _amount, _price, now);\r\n  }\r\n\r\n  function cancelOrder(string _id) public {\r\n    require(orders[_id].maker == msg.sender, 'This order is not belong to you!!!');\r\n    require(orders[_id].taker == address(0x0), 'You can not cancel an taken order!!!');\r\n    delete orders[_id];\r\n    emit OrderCanceled(_id, now);\r\n  }\r\n\r\n  function takeOrder(string _id) public {\r\n    Order storage order = orders[_id];\r\n    require(order.maker != address(0x0), 'Order not found!!!');\r\n    require(order.taker == address(0x0), 'Order taken!!!');\r\n    require(order.maker != msg.sender, 'Can not buy your order!!!');\r\n    uint tokenAmount = order.amount * order.price;\r\n    usdtToken.transferFrom(msg.sender, order.maker, tokenAmount);\r\n    orders[_id].taker = msg.sender;\r\n    emit OrderTaken(_id, msg.sender, now);\r\n  }\r\n\r\n  function withdraw(uint amount) public {\r\n    emit Withdrew(msg.sender, amount, now);\r\n  }\r\n\r\n  function cancelWithdraw(string id) public {\r\n    emit WithdrewCanceled(msg.sender, id, now);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractAdmin\",\"type\":\"address\"}],\"name\":\"updateContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"adminCancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backupAdmin\",\"type\":\"address\"}],\"name\":\"updateBackupAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"takeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBackupAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateMainAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainAdmin\",\"type\":\"address\"},{\"name\":\"_backupAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderCanceledByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrewCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1db9994f5a2bd7b8162cd65338784d77e94f7b004068df122265282950710b71"}]}