{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ncontract IERC20 {\r\n    function balanceOf(address from) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n    function transfer(address to, uint tokens) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function burn(uint256 amount) public;\r\n}\r\n\r\n// File: contracts/interfaces/IERC721Collection.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ninterface IERC721Collection {\r\n    function issueToken(address _beneficiary, string calldata _wearableId) external;\r\n    function getWearableKey(string calldata _wearableId) external view returns (bytes32);\r\n    function issued(bytes32 _wearableKey) external view returns (uint256);\r\n    function maxIssuance(bytes32 _wearableKey) external view returns (uint256);\r\n    function issueTokens(address[] calldata _beneficiaries, bytes32[] calldata _wearableIds) external;\r\n    function owner() external view returns (address);\r\n    function wearables(uint256 _index) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/BurningStore.sol\r\n\r\npragma solidity ^0.5.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BurningStore is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct CollectionData {\r\n        mapping (uint256 => uint256) pricePerOptionId;\r\n        mapping (uint256 => uint256) availableQtyPerOptionId;\r\n    }\r\n\r\n    IERC20 public acceptedToken;\r\n\r\n    mapping (address => CollectionData) collectionsData;\r\n\r\n    event Bought(address indexed _collectionAddress, uint256[] _optionIds, address _beneficiary, uint256 _price);\r\n    event SetCollectionData(address indexed _collectionAddress, uint256[] _optionIds, uint256[] _availableQtys, uint256[] _prices);\r\n\r\n    /**\r\n    * @dev Constructor of the contract.\r\n    * @param _acceptedToken - Address of the ERC20 token accepted\r\n    * @param _collectionAddresses - collection addresses\r\n    * @param _collectionOptionIds - collection option ids\r\n    * @param _collectionAvailableQtys - collection available qtys for sale\r\n    * @param _collectionPrices - collection prices\r\n    */\r\n    constructor(\r\n        IERC20 _acceptedToken,\r\n        address[] memory _collectionAddresses,\r\n        uint256[][] memory _collectionOptionIds,\r\n        uint256[][] memory _collectionAvailableQtys,\r\n        uint256[][] memory _collectionPrices\r\n      )\r\n      public {\r\n        acceptedToken = _acceptedToken;\r\n\r\n        for (uint256 i = 0; i < _collectionAddresses.length; i++) {\r\n            _setCollectionData(_collectionAddresses[i], _collectionOptionIds[i], _collectionAvailableQtys[i], _collectionPrices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Donate in exchange for NFTs.\r\n    * @notice that there is a maximum amount of NFTs that can be issued per call.\r\n    * If the donation greater than `price * maxNFTsPerCall`, all the donation will be used and\r\n    * a maximum of `maxNFTsPerCall` will be issued.\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _optionIds - collection option id\r\n    * @param _beneficiary - beneficiary address\r\n    */\r\n    function buy(address _collectionAddress, uint256[] calldata _optionIds, address _beneficiary) external {\r\n        CollectionData storage collection = collectionsData[_collectionAddress];\r\n\r\n        uint256 amount = _optionIds.length;\r\n        uint256 finalPrice = 0;\r\n        address[] memory beneficiaries = new address[](amount);\r\n        bytes32[] memory items = new bytes32[](amount);\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            uint256 optionId = _optionIds[i];\r\n            require(collection.availableQtyPerOptionId[optionId] > 0, \"Sold out item\");\r\n\r\n            // Add price\r\n            uint256 itemPrice = collection.pricePerOptionId[optionId];\r\n            finalPrice = finalPrice.add(itemPrice);\r\n\r\n            // Add beneneficiary\r\n            beneficiaries[i] = _beneficiary;\r\n\r\n            // Add item\r\n            string memory item = itemByOptionId(_collectionAddress, optionId);\r\n            bytes32 itemAsBytes32;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                itemAsBytes32 := mload(add(item, 32))\r\n            }\r\n            items[i] = itemAsBytes32;\r\n            collection.availableQtyPerOptionId[optionId] = collection.availableQtyPerOptionId[optionId].sub(1);\r\n        }\r\n\r\n        // Check if the sender has at least `price` and the contract has allowance to use on its behalf\r\n        _requireBalance(msg.sender, finalPrice);\r\n\r\n        // Debit `price` from sender\r\n        require(\r\n            acceptedToken.transferFrom(msg.sender, address(this), finalPrice),\r\n            \"Transfering finalPrice to this contract failed\"\r\n        );\r\n\r\n        // Burn it\r\n        acceptedToken.burn(finalPrice);\r\n\r\n        // Mint NFT\r\n        IERC721Collection(_collectionAddress).issueTokens(beneficiaries, items);\r\n\r\n        emit Bought(_collectionAddress, _optionIds, _beneficiary, finalPrice);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the wearable can be minted.\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _optionId - item option id\r\n    * @return whether a wearable can be minted\r\n    */\r\n    function canMint(address _collectionAddress, uint256 _optionId, uint256 _amount) public view returns (bool) {\r\n        CollectionData storage collection = collectionsData[_collectionAddress];\r\n\r\n        return collection.availableQtyPerOptionId[_optionId] >= _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a wearable's available supply .\r\n     * Throws if the option ID does not exist. May return 0.\r\n     * @param _collectionAddress - collectionn address\r\n     * @param _optionId - item option id\r\n     * @return wearable's available supply\r\n     */\r\n    function balanceOf(address _collectionAddress, uint256 _optionId) public view returns (uint256) {\r\n        CollectionData storage collection = collectionsData[_collectionAddress];\r\n\r\n        return collection.availableQtyPerOptionId[_optionId];\r\n    }\r\n\r\n    /**\r\n    * @dev Get item id by option id\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _optionId - collection option id\r\n    * @return string of the item id\r\n    */\r\n    function itemByOptionId(address _collectionAddress, uint256 _optionId) public view returns (string memory) {\r\n       /* solium-disable-next-line */\r\n        (bool success, bytes memory data) = address(_collectionAddress).staticcall(\r\n            abi.encodeWithSelector(\r\n                IERC721Collection(_collectionAddress).wearables.selector,\r\n                _optionId\r\n            )\r\n        );\r\n\r\n        require(success, \"Invalid wearable\");\r\n\r\n        return abi.decode(data, (string));\r\n    }\r\n\r\n    /**\r\n    * @dev Get collection data by option id\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _optionId - collection option id\r\n    * @return availableQty - collection option id available qty\r\n    * @return price - collection option id price\r\n    */\r\n    function collectionData(address _collectionAddress, uint256 _optionId) external view returns (\r\n        uint256 availableQty, uint256 price\r\n    ) {\r\n        availableQty = collectionsData[_collectionAddress].availableQtyPerOptionId[_optionId];\r\n        price = collectionsData[_collectionAddress].pricePerOptionId[_optionId];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the beneficiary address where the sales amount\r\n    *  will be transferred on each sale for a collection\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _collectionOptionIds - collection option ids\r\n    * @param _collectionAvailableQtys - collection available qtys for sale\r\n    * @param _collectionPrices - collectionn prices\r\n    */\r\n    function setCollectionData(\r\n        address _collectionAddress,\r\n        uint256[] calldata _collectionOptionIds,\r\n        uint256[] calldata _collectionAvailableQtys,\r\n        uint256[] calldata _collectionPrices\r\n    ) external onlyOwner {\r\n        _setCollectionData(_collectionAddress, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the beneficiary address where the sales amount\r\n    *  will be transferred on each sale for a collection\r\n    * @param _collectionAddress - collectionn address\r\n    * @param _collectionOptionIds - collection option ids\r\n    * @param _collectionAvailableQtys - collection available qtys for sale\r\n    * @param _collectionPrices - collectionn prices\r\n    */\r\n    function _setCollectionData(\r\n        address _collectionAddress,\r\n        uint256[] memory _collectionOptionIds,\r\n        uint256[] memory _collectionAvailableQtys,\r\n        uint256[] memory _collectionPrices\r\n    ) internal {\r\n        // emit ChangedCollectionBeneficiary(_collectionAddress, collectionBeneficiaries[_collectionAddress], _beneficiary);\r\n        CollectionData storage collection = collectionsData[_collectionAddress];\r\n\r\n        for (uint256 i = 0; i < _collectionOptionIds.length; i++) {\r\n            collection.availableQtyPerOptionId[_collectionOptionIds[i]] = _collectionAvailableQtys[i];\r\n            collection.pricePerOptionId[_collectionOptionIds[i]] = _collectionPrices[i];\r\n        }\r\n\r\n        emit SetCollectionData(_collectionAddress, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);\r\n    }\r\n\r\n    /**\r\n    * @dev Validate if a user has balance and the contract has enough allowance\r\n    * to use user's accepted token on his belhalf\r\n    * @param _user - address of the user\r\n    */\r\n    function _requireBalance(address _user, uint256 _price) internal view {\r\n        require(\r\n            acceptedToken.balanceOf(_user) >= _price,\r\n            \"Insufficient funds\"\r\n        );\r\n        require(\r\n            acceptedToken.allowance(_user, address(this)) >= _price,\r\n            \"The contract is not authorized to use the accepted token on sender behalf\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionOptionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionAvailableQtys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collectionPrices\",\"type\":\"uint256[]\"}],\"name\":\"setCollectionData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"itemByOptionId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"collectionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionOptionIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionAvailableQtys\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_collectionPrices\",\"type\":\"uint256[][]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_availableQtys\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"SetCollectionData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BurningStore","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://67ae1db4ab07a20e00e3f004f02f9b6be1d3c31e67b659cd5c204944902f7a3b"}]}