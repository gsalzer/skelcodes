{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/// this contract is working with myetherstore deployed at 0xB4D69A7cb01Ef545C7bdf3c98dCa0ce4cE19402f (main net)\r\n/// requires that referral system contract is always fully funded by the owners to pay the referrers\r\n\r\ncontract ReferralSystem{\r\n    mapping(address => bytes32) users;\r\n    mapping(bytes32 => address payable) hashedIds;\r\n    event rewardPaid(address _wallet, uint256 amount);\r\n    \r\n    function() external payable{\r\n        // receives ethers from any account\r\n    }\r\n    function myReferralLink(address _wallet) public view returns(bytes32) {\r\n        return users[_wallet];\r\n    }\r\n    \r\n    function referralExist(address _wallet) public view returns(bool){\r\n        if(users[_wallet] != bytes32(0))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    \r\n    function generateReferral(address payable _wallet) public{\r\n        // generate new referral\r\n        // calculates the hash of the address and now time\r\n        bytes32 id = keccak256(abi.encode(_wallet, now));\r\n        users[_wallet] = id;\r\n        hashedIds[id] = _wallet;\r\n    }\r\n    \r\n    // send reward in wei to your referrer\r\n    function payReferralReward(bytes32 _code, uint256 reward) public payable{\r\n        if(msg.value >= reward){ // checks if there is sufficient balance\r\n            hashedIds[_code].transfer(reward); // send reward\r\n            emit rewardPaid(hashedIds[_code], reward);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardPaid\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"generateReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"myReferralLink\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"payReferralReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"referralExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReferralSystem","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a3858b2c0278b412984c3c5aaa638cb55ac6d0e2a9ca9834c771df799e516b6a"}]}