{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface Token { \r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n} \r\n\r\ninterface USDTToken {\r\n    function transfer(address _to, uint _value) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Restore();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function restore() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Restore();\r\n  }\r\n}\r\n\r\ncontract ResourceEscrow is Pausable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct TokenWapper {\r\n        Token token;\r\n        bool isValid;\r\n    }\r\n    \r\n    mapping (string => TokenWapper) private tokenMap;\r\n    \r\n    USDTToken private usdtToken;\r\n  \r\n    event Withdrawn(address indexed to, string symbol, uint256 amount);\r\n    \r\n    constructor () public {\r\n    }\r\n    \r\n    function addToken(string memory symbol, address tokenContract) public onlyOwner {\r\n        require(bytes(symbol).length != 0, \"symbol must not be blank.\");\r\n        require(tokenContract != address(0), \"tokenContract address must not be zero.\");\r\n        require(!tokenMap[symbol].isValid, \"There has existed token contract.\");\r\n        \r\n        tokenMap[symbol].token = Token(tokenContract);\r\n        tokenMap[symbol].isValid = true;\r\n        \r\n        if (hashCompareWithLengthCheck(symbol, \"USDT\")) {\r\n            usdtToken = USDTToken(tokenContract);\r\n        } \r\n    } \r\n    \r\n    function hashCompareWithLengthCheck(string memory a, string memory b) internal pure returns (bool) {\r\n        if (bytes(a).length != bytes(b).length) {\r\n            return false;\r\n        } else {\r\n            return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n        }\r\n    }\r\n    \r\n    function withdraw(string memory symbol, address payable to, uint256 amount, bool isCharge) public onlyOwner {\r\n        require(bytes(symbol).length != 0, \"symbol must not be blank.\");\r\n        require(to != address(0), \"Address must not be zero.\");\r\n        require(tokenMap[symbol].isValid, \"There is no token contract.\");\r\n        \r\n        uint256 balAmount = tokenMap[symbol].token.balanceOf(address(this));\r\n        \r\n        if (hashCompareWithLengthCheck(symbol, \"USDT\")) {\r\n            uint256 assertAmount = amount;\r\n            if (isCharge) { \r\n                assertAmount = amount.add(1000000);\r\n            }\r\n            require(assertAmount <= balAmount, \"There is no enough USDT balance.\");\r\n            usdtToken.transfer(to, amount);\r\n            if (isCharge) {\r\n                usdtToken.transfer(0x08a7CD504E2f380d89747A3a0cD42d40dDd428e6, 1000000);\r\n            }\r\n        } else if (hashCompareWithLengthCheck(symbol, \"ANKR\")) {\r\n            uint256 assertAmount = amount;\r\n            if (isCharge) {\r\n                assertAmount = amount.add(10000000000000000000);\r\n            }\r\n            require(assertAmount <= balAmount, \"There is no enough ANKR balance.\");\r\n            tokenMap[symbol].token.transfer(to, amount);\r\n            if (isCharge) {\r\n                tokenMap[symbol].token.transfer(0x08a7CD504E2f380d89747A3a0cD42d40dDd428e6, 10000000000000000000);\r\n            }\r\n        } else {\r\n            return; \r\n        }\r\n        \r\n        emit Withdrawn(to, symbol, amount);\r\n    }\r\n    \r\n    function availableBalance(string memory symbol) public view returns (uint256) {\r\n        require(bytes(symbol).length != 0, \"symbol must not be blank.\");\r\n        require(tokenMap[symbol].isValid, \"There is no token contract.\");\r\n        \r\n        return tokenMap[symbol].token.balanceOf(address(this));\r\n    }\r\n    \r\n    function isSupportTokens(string memory symbol) public view returns (bool) {\r\n        require(bytes(symbol).length != 0, \"symbol must not be blank.\");\r\n        \r\n        if (tokenMap[symbol].isValid) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function isStateNormal() public view returns (bool) {\r\n        return paused;\r\n    }\r\n    \r\n    \r\n    function destory() public onlyOwner{\r\n        selfdestruct(address(uint160(address(this)))); \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"restore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"availableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStateNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isCharge\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"isSupportTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Restore\",\"type\":\"event\"}]","ContractName":"ResourceEscrow","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e904d5d13a9a063188c96197146f0634a75e3ad67a3af317452b321328a5ff52"}]}