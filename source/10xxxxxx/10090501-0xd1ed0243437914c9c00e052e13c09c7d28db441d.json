{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Not_upgradable_done/MultiPoolZapV1_5_withCurve.sol\r\n\r\n// Copyright (C) 2019, 2020 dipeshsukhani, nodar, suhailg, apoorvlathey, seb, sumit\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\r\n\r\n\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface UniswapFactoryInterface {\r\n    function getExchange(address token)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n}\r\n\r\n\r\ninterface UniswapExchangeInterface {\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokens_sold)\r\n        external\r\n        view\r\n        returns (uint256 eth_bought);\r\n}\r\n\r\n\r\ninterface uniswapPoolZap {\r\n    function LetsInvest(address _TokenContractAddress, address _towhomtoissue)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n\r\ninterface ICurvePoolZapIn {\r\n    function ZapIn(\r\n        address _toWhomToIssue,\r\n        address _IncomingTokenAddress,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _IncomingTokenQty\r\n    ) external payable returns (uint256 crvTokensBought);\r\n}\r\n\r\n\r\n/**\r\n    @title Multiple Pool Zap\r\n    @author Zapper\r\n    @notice Use this contract to Add liquidity to Multiple Pools at once using ETH or ERC20\r\n*/\r\ncontract MultiPoolZapV1_5 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uniswapPoolZap public uniswapPoolZapAddress;\r\n    UniswapFactoryInterface public UniswapFactory;\r\n    ICurvePoolZapIn public CurvePoolZapIn;\r\n\r\n    uint16 public goodwill;\r\n    address payable public dzgoodwillAddress;\r\n    mapping(address => uint256) private userBalance;\r\n\r\n    constructor(\r\n        uint16 _goodwill,\r\n        address payable _dzgoodwillAddress,\r\n        address _curvePoolZapInAddress\r\n    ) public {\r\n        goodwill = _goodwill;\r\n        dzgoodwillAddress = _dzgoodwillAddress;\r\n        uniswapPoolZapAddress = uniswapPoolZap(\r\n            0x97402249515994Cc0D22092D3375033Ad0ea438A\r\n        );\r\n        UniswapFactory = UniswapFactoryInterface(\r\n            0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\r\n        );\r\n        CurvePoolZapIn = ICurvePoolZapIn(_curvePoolZapInAddress);\r\n    }\r\n\r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_new_dzgoodwillAddress(address payable _new_dzgoodwillAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dzgoodwillAddress = _new_dzgoodwillAddress;\r\n    }\r\n\r\n    function set_uniswapPoolZapAddress(address _uniswapPoolZapAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uniswapPoolZapAddress = uniswapPoolZap(_uniswapPoolZapAddress);\r\n    }\r\n\r\n    function set_UniswapFactory(address _UniswapFactory) public onlyOwner {\r\n        UniswapFactory = UniswapFactoryInterface(_UniswapFactory);\r\n    }\r\n\r\n    function set_curvePoolZapInAddress(address _curvePoolZapIn)\r\n        public\r\n        onlyOwner\r\n    {\r\n        CurvePoolZapIn = ICurvePoolZapIn(_curvePoolZapIn);\r\n    }\r\n\r\n    /**\r\n        @notice Add liquidity to Multiple Uniswap Pools at once using ETH or ERC20\r\n        @param _IncomingTokenContractAddress The token address for ERC20 being deposited. Input address(0) in case of ETH deposit.\r\n        @param _IncomingTokenQty Quantity of ERC20 being deposited. 0 in case of ETH deposit.\r\n        @param underlyingTokenAddresses Array of Token Addresses to which's Uniswap Pool to add liquidity to.\r\n        @param _curvePoolAddresses Array of CurvePool Exchange Addresses to Zap\r\n        @param respectiveWeightedValues Array of Relative Ratios (corresponding to underlyingTokenAddresses) to proportionally distribute received ETH or ERC20 into various pools.\r\n    */\r\n    function multipleZapIn(\r\n        address _IncomingTokenContractAddress,\r\n        uint256 _IncomingTokenQty,\r\n        address[] memory underlyingTokenAddresses,\r\n        address[] memory _curvePoolAddresses,\r\n        uint16[] memory respectiveWeightedValues\r\n    ) public payable {\r\n        uint256 totalWeights;\r\n        require(\r\n            underlyingTokenAddresses.length + _curvePoolAddresses.length ==\r\n                respectiveWeightedValues.length,\r\n            \"Input array lengths incorrect\"\r\n        );\r\n        for (uint256 i = 0; i < respectiveWeightedValues.length; i++) {\r\n            totalWeights = (totalWeights).add(respectiveWeightedValues[i]);\r\n        }\r\n\r\n        uint256 eth2Trade;\r\n\r\n        if (msg.value > 0) {\r\n            require(\r\n                _IncomingTokenContractAddress == address(0),\r\n                \"Incoming token address should be address(0)\"\r\n            );\r\n            eth2Trade = msg.value;\r\n        } else if (\r\n            _IncomingTokenContractAddress == address(0) && msg.value == 0\r\n        ) {\r\n            revert(\"Please send ETH along with function call\");\r\n        } else if (_IncomingTokenContractAddress != address(0)) {\r\n            require(\r\n                msg.value == 0,\r\n                \"Cannot send Tokens and ETH at the same time\"\r\n            );\r\n            require(\r\n                IERC20(_IncomingTokenContractAddress).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    _IncomingTokenQty\r\n                ),\r\n                \"Error in transferring ERC20\"\r\n            );\r\n            eth2Trade = _token2Eth(\r\n                _IncomingTokenContractAddress,\r\n                _IncomingTokenQty\r\n            );\r\n        }\r\n\r\n        uint256 goodwillPortion = ((eth2Trade).mul(goodwill)).div(10000);\r\n        uint256 totalInvestable = (eth2Trade).sub(goodwillPortion);\r\n        uint256 totalLeftToBeInvested = totalInvestable;\r\n\r\n        require(address(dzgoodwillAddress).send(goodwillPortion));\r\n\r\n        uint256 residualETH;\r\n        // ZapIn Uniswap Pools\r\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\r\n            uint256 LPT = uniswapPoolZapAddress.LetsInvest.value(\r\n                (((totalInvestable).mul(respectiveWeightedValues[i])).div(\r\n                    totalWeights\r\n                ) + residualETH)\r\n            )(underlyingTokenAddresses[i], address(this));\r\n            IERC20(\r\n                UniswapFactory.getExchange(address(underlyingTokenAddresses[i]))\r\n            )\r\n                .transfer(msg.sender, LPT);\r\n            totalLeftToBeInvested = (totalLeftToBeInvested).sub(\r\n                ((totalInvestable).mul(respectiveWeightedValues[i])).div(\r\n                    totalWeights\r\n                )\r\n            );\r\n            residualETH = (address(this).balance).sub(totalLeftToBeInvested);\r\n        }\r\n\r\n        //ZapIn to Curve Pools\r\n        uint256 uniswapPoolsCount = underlyingTokenAddresses.length;\r\n        for (uint256 i = 0; i < _curvePoolAddresses.length; i++) {\r\n            CurvePoolZapIn.ZapIn.value(\r\n                ((\r\n                    (totalInvestable).mul(\r\n                        respectiveWeightedValues[i + uniswapPoolsCount]\r\n                    )\r\n                )\r\n                    .div(totalWeights) + residualETH)\r\n            )(msg.sender, address(0), _curvePoolAddresses[i], 0);\r\n            residualETH = 0;\r\n        }\r\n        \r\n        if(address(this).balance > 0) {\r\n            userBalance[msg.sender] = address(this).balance;\r\n            require (send_out_eth(msg.sender));\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice This function swaps ERC20 to ETH via Uniswap\r\n        @param _FromTokenContractAddress Address of Token to swap\r\n        @param tokens2Trade The quantity of tokens to swaps\r\n        @return The amount of ETH Received.\r\n    */\r\n    function _token2Eth(address _FromTokenContractAddress, uint256 tokens2Trade)\r\n        internal\r\n        returns (uint256 ethBought)\r\n    {\r\n\r\n        UniswapExchangeInterface FromUniSwapExchangeContractAddress\r\n        = UniswapExchangeInterface(\r\n        UniswapFactory.getExchange(_FromTokenContractAddress)\r\n        );\r\n\r\n        IERC20(_FromTokenContractAddress).approve(\r\n            address(FromUniSwapExchangeContractAddress),\r\n            tokens2Trade\r\n        );\r\n\r\n        ethBought = FromUniSwapExchangeContractAddress.tokenToEthTransferInput(\r\n            tokens2Trade,\r\n            (\r\n                (\r\n                    FromUniSwapExchangeContractAddress.getTokenToEthInputPrice(\r\n                        tokens2Trade\r\n                    )\r\n                )\r\n                    .mul(99)\r\n                    .div(100)\r\n            ),\r\n            SafeMath.add(block.timestamp, 300),\r\n            address(this)\r\n        );\r\n        require(ethBought > 0, \"Error in swapping Eth: 1\");\r\n    }\r\n    \r\n    /**\r\n        @notice This function sends the user's remaining ETH back to them.\r\n        @param _towhomtosendtheETH The Address of the user\r\n        @return Boolean corresponding to successful execution.\r\n    */\r\n    function send_out_eth(address _towhomtosendtheETH) internal returns (bool) {\r\n        require(userBalance[_towhomtosendtheETH] > 0);\r\n        uint256 amount = userBalance[_towhomtosendtheETH];\r\n        userBalance[_towhomtosendtheETH] = 0;\r\n        (bool success, ) = _towhomtosendtheETH.call.value(amount)(\"\");\r\n        return success;\r\n    }\r\n\r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_dzgoodwillAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curvePoolZapInAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurvePoolZapIn\",\"outputs\":[{\"internalType\":\"contract ICurvePoolZapIn\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniswapFactory\",\"outputs\":[{\"internalType\":\"contract UniswapFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dzgoodwillAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_IncomingTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_curvePoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"respectiveWeightedValues\",\"type\":\"uint16[]\"}],\"name\":\"multipleZapIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UniswapFactory\",\"type\":\"address\"}],\"name\":\"set_UniswapFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curvePoolZapIn\",\"type\":\"address\"}],\"name\":\"set_curvePoolZapInAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_new_dzgoodwillAddress\",\"type\":\"address\"}],\"name\":\"set_new_dzgoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapPoolZapAddress\",\"type\":\"address\"}],\"name\":\"set_uniswapPoolZapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapPoolZapAddress\",\"outputs\":[{\"internalType\":\"contract uniswapPoolZap\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiPoolZapV1_5","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f79cabc4caca5eca8ee6a36651a0ad5a2190f04e000000000000000000000000924cc11fd506fce3dab461aa71a6bb823669ece3","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3cec5411bb940c1a03cc3064ae44abe7cdbc18df104611c90b04c5314348e8b3"}]}