{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n\r\ninterface WETHInterace {\r\n    function withdraw(uint256 wad) external;\r\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\r\n    function balanceOf(address src) external view returns (uint256 wad);\r\n}\r\n\r\n\r\ncontract DeWETHer {\r\n    WETHInterace private _WETH = WETHInterace(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    receive() external payable {}\r\n    \r\n    function unwrapAllWETHFor(address account) external {\r\n        uint256 wethBalance = _WETH.balanceOf(account);\r\n        if (wethBalance > 0) {\r\n            require(\r\n                _WETH.transferFrom(account, address(this), wethBalance),\r\n                \"WETH transfer in failed â€” has the allowance been set?\"\r\n            );\r\n            _WETH.withdraw(wethBalance);\r\n    \r\n            (bool ok, ) = account.call{value: address(this).balance}(\"\");\r\n            if (!ok) {\r\n                assembly {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n            } \r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unwrapAllWETHFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DeWETHer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0205ee81b138c1ef1055cf947c9ddaddd85b3268c4a54db8e4d3609b8e3dfd90"}]}