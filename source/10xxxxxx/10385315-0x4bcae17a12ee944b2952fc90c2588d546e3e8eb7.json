{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-05\r\n*/\r\n\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.5.15;\r\n\r\ncontract ADVTokenAbstract {\r\n    function mint(address account, uint256 amount) public;\r\n}\r\n\r\ncontract EasyMain {\r\n    ADVTokenAbstract  public advToken =\r\n        ADVTokenAbstract(0x19EA6aCd7604cF8e1271818143573B6Fc16EFd27);\r\n        \r\n    address[] public    whiteList;\r\n    \r\n    address payable public owner;\r\n    \r\n    event SEND_ADV(address indexed _account, uint _amount, bool _bSuccess);\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function sendADVToken(uint amount) public payable {\r\n        uint index;\r\n        uint length = whiteList.length;\r\n        for (index = 0; index < length; index++) {\r\n            if (whiteList[index] == msg.sender) {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (index < length) {\r\n            advToken.mint(msg.sender, amount);\r\n            if (index + 1 != length) {\r\n                whiteList[index] = whiteList[length-1];\r\n            }\r\n            delete whiteList[length-1];\r\n            whiteList.length--;\r\n            emit SEND_ADV(msg.sender, amount, true);\r\n        } else {\r\n            emit SEND_ADV(msg.sender, amount, false);\r\n            revert(\"Not Whitelisted Account\");    \r\n        }\r\n    }\r\n    \r\n    function withdrawBalance() public onlyOwner {\r\n        (owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    function addWhiteList(address[] memory accounts) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            whiteList.push(accounts[i]);\r\n        }\r\n    }\r\n    \r\n    function getWhilteListLength() public view returns(uint) {\r\n        return whiteList.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bSuccess\",\"type\":\"bool\"}],\"name\":\"SEND_ADV\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advToken\",\"outputs\":[{\"internalType\":\"contract ADVTokenAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhilteListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendADVToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EasyMain","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d9f676ecbf85b973faf09e6e4c97c0255e9671a6d4b6be08c3e394d5d92d5af"}]}