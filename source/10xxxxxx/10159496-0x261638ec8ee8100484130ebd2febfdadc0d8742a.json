{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  * @dev total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[msg.sender]);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"DetailedERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title DetailedERC20 token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract DetailedERC20 is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n  }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"Level01Token.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./DetailedERC20.sol\\\";\\nimport \\\"./PausableToken.sol\\\";\\n\\ncontract Level01Token is DetailedERC20, PausableToken {\\n\\n    uint256 public initialTotalSupply;\\n    uint256 constant INITIAL_WHOLE_TOKENS = 12 * 10e7;\\n\\n    constructor()\\n        public\\n        DetailedERC20(\\\"Level01 Token\\\", \\\"LVX\\\", 18)\\n    {\\n        initialTotalSupply = INITIAL_WHOLE_TOKENS * uint256(10) ** decimals;\\n        totalSupply_ = initialTotalSupply;\\n        balances[msg.sender] = initialTotalSupply;\\n        emit Transfer(address(0), msg.sender, initialTotalSupply);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\"},\"PausableToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./RBAC.sol\\\";\\n\\n\\ncontract PausableToken is StandardToken, Pausable, RBAC {\\n\\n    string public constant ROLE_ADMINISTRATOR = \\\"administrator\\\";\\n\\n    modifier whenNotPausedOrAuthorized() {\\n        require(!paused || hasRole(msg.sender, ROLE_ADMINISTRATOR));\\n        _;\\n    }\\n    /**\\n     * @dev Add an address that can administer the token even when paused.\\n     * @param _administrator Address of the given administrator.\\n     * @return True if the administrator has been added, false if the address was already an administrator.\\n     */\\n    function addAdministrator(address _administrator) onlyOwner public returns (bool) {\\n        if (isAdministrator(_administrator)) {\\n            return false;\\n        } else {\\n            addRole(_administrator, ROLE_ADMINISTRATOR);\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove an administrator.\\n     * @param _administrator Address of the administrator to be removed.\\n     * @return True if the administrator has been removed,\\n     *  false if the address wasn\\u0027t an administrator in the first place.\\n     */\\n    function removeAdministrator(address _administrator) onlyOwner public returns (bool) {\\n        if (isAdministrator(_administrator)) {\\n            removeRole(_administrator, ROLE_ADMINISTRATOR);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Determine if address is an administrator.\\n     * @param _administrator Address of the administrator to be checked.\\n     */\\n    function isAdministrator(address _administrator) public view returns (bool) {\\n        return hasRole(_administrator, ROLE_ADMINISTRATOR);\\n    }\\n\\n    /**\\n     * @dev Batch transfer tokens to investors\\n     * @param users Array of users addresses\\n     * @param amounts Array of token amounts for users\\n     */\\n    function transferBatch(address[] users, uint256[] amounts) public whenNotPausedOrAuthorized {\\n        require(users.length == amounts.length, \\\"users and amounts have different length\\\");\\n        for (uint256 i = 0; i \\u003c users.length; i++) {\\n            require(transfer(users[i], amounts[i]), \\\"batch token transfer failed\\\");\\n        }\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address with pause feature for administrator.\\n    * @dev Only applies when the transfer is allowed by the owner.\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\\n        return super.transfer(_to, _value);\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another with pause feature for administrator.\\n    * @dev Only applies when the transfer is allowed by the owner.\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint256 the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\\n        return super.transferFrom(_from, _to, _value);\\n    }\\n}\\n\"},\"RBAC.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n\\n/**\\n * @title RBAC (Role-Based Access Control)\\n * @author Matt Condon (@Shrugs)\\n * @dev Stores and provides setters and getters for roles and addresses.\\n * @dev Supports unlimited numbers of roles and addresses.\\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\\n * This RBAC method uses strings to key roles. It may be beneficial\\n *  for you to write your own implementation of this interface using Enums or similar.\\n * It\\u0027s also recommended that you define constants in the contract, like ROLE_ADMIN below,\\n *  to avoid typos.\\n */\\ncontract RBAC {\\n  using Roles for Roles.Role;\\n\\n  mapping (string =\\u003e Roles.Role) private roles;\\n\\n  event RoleAdded(address addr, string roleName);\\n  event RoleRemoved(address addr, string roleName);\\n\\n  /**\\n   * @dev reverts if addr does not have role\\n   * @param addr address\\n   * @param roleName the name of the role\\n   * // reverts\\n   */\\n  function checkRole(address addr, string roleName)\\n    view\\n    public\\n  {\\n    roles[roleName].check(addr);\\n  }\\n\\n  /**\\n   * @dev determine if addr has role\\n   * @param addr address\\n   * @param roleName the name of the role\\n   * @return bool\\n   */\\n  function hasRole(address addr, string roleName)\\n    view\\n    public\\n    returns (bool)\\n  {\\n    return roles[roleName].has(addr);\\n  }\\n\\n  /**\\n   * @dev add a role to an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function addRole(address addr, string roleName)\\n    internal\\n  {\\n    roles[roleName].add(addr);\\n    emit RoleAdded(addr, roleName);\\n  }\\n\\n  /**\\n   * @dev remove a role from an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function removeRole(address addr, string roleName)\\n    internal\\n  {\\n    roles[roleName].remove(addr);\\n    emit RoleRemoved(addr, roleName);\\n  }\\n\\n  /**\\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\\n   * @param roleName the name of the role\\n   * // reverts\\n   */\\n  modifier onlyRole(string roleName)\\n  {\\n    checkRole(msg.sender, roleName);\\n    _;\\n  }\\n\\n  /**\\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\\n   * @param roleNames the names of the roles to scope access to\\n   * // reverts\\n   *\\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\\n   *  see: https://github.com/ethereum/solidity/issues/2467\\n   */\\n  // modifier onlyRoles(string[] roleNames) {\\n  //     bool hasAnyRole = false;\\n  //     for (uint8 i = 0; i \\u003c roleNames.length; i++) {\\n  //         if (hasRole(msg.sender, roleNames[i])) {\\n  //             hasAnyRole = true;\\n  //             break;\\n  //         }\\n  //     }\\n\\n  //     require(hasAnyRole);\\n\\n  //     _;\\n  // }\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title Roles\\n * @author Francisco Giordano (@frangio)\\n * @dev Library for managing addresses assigned to a Role.\\n *      See RBAC.sol for example usage.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address =\\u003e bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an address access to this role\\n   */\\n  function add(Role storage role, address addr)\\n    internal\\n  {\\n    role.bearer[addr] = true;\\n  }\\n\\n  /**\\n   * @dev remove an address\\u0027 access to this role\\n   */\\n  function remove(Role storage role, address addr)\\n    internal\\n  {\\n    role.bearer[addr] = false;\\n  }\\n\\n  /**\\n   * @dev check if an address has this role\\n   * // reverts\\n   */\\n  function check(Role storage role, address addr)\\n    view\\n    internal\\n  {\\n    require(has(role, addr));\\n  }\\n\\n  /**\\n   * @dev check if an address has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address addr)\\n    view\\n    internal\\n    returns (bool)\\n  {\\n    return role.bearer[addr];\\n  }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\\n    require(token.transfer(to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    ERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    internal\\n  {\\n    require(token.transferFrom(from, to, value));\\n  }\\n\\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n    require(token.approve(spender, value));\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"isAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMINISTRATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Level01Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a9b70bfc76661145e874d227fb8de45775e2a0382cf696934a1abb9fea4e3a82"}]}