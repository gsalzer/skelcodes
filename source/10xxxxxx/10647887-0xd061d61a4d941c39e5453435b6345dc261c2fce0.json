{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.4\r\n\"\"\"\r\n@title Token Minter\r\n@author Curve Finance\r\n@license MIT\r\n\"\"\"\r\n\r\ninterface LiquidityGauge:\r\n    # Presumably, other gauges will provide the same interfaces\r\n    def integrate_fraction(addr: address) -> uint256: view\r\n    def user_checkpoint(addr: address) -> bool: nonpayable\r\n\r\ninterface MERC20:\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface GaugeController:\r\n    def gauge_types(addr: address) -> int128: view\r\n\r\n\r\nevent Minted:\r\n    recipient: indexed(address)\r\n    gauge: address\r\n    minted: uint256\r\n\r\n\r\ntoken: public(address)\r\ncontroller: public(address)\r\n\r\n# user -> gauge -> value\r\nminted: public(HashMap[address, HashMap[address, uint256]])\r\n\r\n# minter -> user -> can mint?\r\nallowed_to_mint_for: public(HashMap[address, HashMap[address, bool]])\r\n\r\n\r\n@external\r\ndef __init__(_token: address, _controller: address):\r\n    self.token = _token\r\n    self.controller = _controller\r\n\r\n\r\n@internal\r\ndef _mint_for(gauge_addr: address, _for: address):\r\n    assert GaugeController(self.controller).gauge_types(gauge_addr) >= 0  # dev: gauge is not added\r\n\r\n    LiquidityGauge(gauge_addr).user_checkpoint(_for)\r\n    total_mint: uint256 = LiquidityGauge(gauge_addr).integrate_fraction(_for)\r\n    to_mint: uint256 = total_mint - self.minted[_for][gauge_addr]\r\n\r\n    if to_mint != 0:\r\n        MERC20(self.token).mint(_for, to_mint)\r\n        self.minted[_for][gauge_addr] = total_mint\r\n\r\n        log Minted(_for, gauge_addr, total_mint)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef mint(gauge_addr: address):\r\n    \"\"\"\r\n    @notice Mint everything which belongs to `msg.sender` and send to them\r\n    @param gauge_addr `LiquidityGauge` address to get mintable amount from\r\n    \"\"\"\r\n    self._mint_for(gauge_addr, msg.sender)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef mint_many(gauge_addrs: address[8]):\r\n    \"\"\"\r\n    @notice Mint everything which belongs to `msg.sender` across multiple gauges\r\n    @param gauge_addrs List of `LiquidityGauge` addresses\r\n    \"\"\"\r\n    for i in range(8):\r\n        if gauge_addrs[i] == ZERO_ADDRESS:\r\n            break\r\n        self._mint_for(gauge_addrs[i], msg.sender)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef mint_for(gauge_addr: address, _for: address):\r\n    \"\"\"\r\n    @notice Mint tokens for `_for`\r\n    @dev Only possible when `msg.sender` has been approved via `toggle_approve_mint`\r\n    @param gauge_addr `LiquidityGauge` address to get mintable amount from\r\n    @param _for Address to mint to\r\n    \"\"\"\r\n    if self.allowed_to_mint_for[msg.sender][_for]:\r\n        self._mint_for(gauge_addr, _for)\r\n\r\n\r\n@external\r\ndef toggle_approve_mint(minting_user: address):\r\n    \"\"\"\r\n    @notice allow `minting_user` to mint for `msg.sender`\r\n    @param minting_user Address to toggle permission for\r\n    \"\"\"\r\n    self.allowed_to_mint_for[minting_user][msg.sender] = not self.allowed_to_mint_for[minting_user][msg.sender]","ABI":"[{\"name\":\"Minted\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":true},{\"type\":\"address\",\"name\":\"gauge\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"minted\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_controller\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"mint\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"gauge_addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":100038},{\"name\":\"mint_many\",\"outputs\":[],\"inputs\":[{\"type\":\"address[8]\",\"name\":\"gauge_addrs\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":408502},{\"name\":\"mint_for\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"gauge_addr\"},{\"type\":\"address\",\"name\":\"_for\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":101219},{\"name\":\"toggle_approve_mint\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"minting_user\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36726},{\"name\":\"token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"controller\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"minted\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1669},{\"name\":\"allowed_to_mint_for\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1699}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.4","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000002f50d538606fa9edd2b11e2446beb18c9d5846bb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}