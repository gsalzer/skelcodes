{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the value of any currencies that are residing off-chain, but are NOT yet allocated to a revenue-producing asset.\n */\ninterface IOffChainCurrencyValuatorV1 {\n\n    /**\n     * @return The value of the off-chain assets. The number returned uses 18 decimal places.\n     */\n    function getOffChainCurrenciesValue() external view returns (uint);\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the value of any currencies that are residing off-chain, but are NOT yet allocated to a revenue-producing asset.\n */\ninterface IOffChainCurrencyValuatorV2 {\n\n    function initialize(\n        address owner,\n        address guardian\n    ) external;\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @dev Gets the USD value of a currency with 8 decimals.\n */\ninterface IUsdAggregatorV2 {\n\n    /**\n     * @return The USD value of a currency, with 8 decimals.\n     */\n    function latestAnswer() external view returns (uint);\n\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\n *          UPGRADEABLE CONTRACTS.\n */\ncontract IOwnableOrGuardian is Initializable {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\n\n    modifier onlyOwnerOrGuardian {\n        require(\n            msg.sender == _owner || msg.sender == _guardian,\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\n        );\n        _;\n    }\n\n    modifier onlyOwner {\n        require(\n            msg.sender == _owner,\n            \"OwnableOrGuardian: UNAUTHORIZED\"\n        );\n        _;\n    }\n    // *********************************************\n    // ***** State Variables DO NOT CHANGE OR MOVE\n    // *********************************************\n\n    // ******************************\n    // ***** DO NOT CHANGE OR MOVE\n    // ******************************\n    address internal _owner;\n    address internal _guardian;\n    // ******************************\n    // ***** DO NOT CHANGE OR MOVE\n    // ******************************\n\n    // ******************************\n    // ***** Misc Functions\n    // ******************************\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    function guardian() external view returns (address) {\n        return _guardian;\n    }\n\n    // ******************************\n    // ***** Admin Functions\n    // ******************************\n\n    function initialize(\n        address owner,\n        address guardian\n    )\n    public\n    initializer {\n        _transferOwnership(owner);\n        _transferGuardian(guardian);\n    }\n\n    function transferOwnership(\n        address owner\n    )\n    public\n    onlyOwner {\n        require(\n            owner != address(0),\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\n        );\n        _transferOwnership(owner);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferGuardian(\n        address guardian\n    )\n    public\n    onlyOwner {\n        require(\n            guardian != address(0),\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\n        );\n        _transferGuardian(guardian);\n    }\n\n    function renounceGuardian() public onlyOwnerOrGuardian {\n        _transferGuardian(address(0));\n    }\n\n    // ******************************\n    // ***** Internal Functions\n    // ******************************\n\n    function _transferOwnership(\n        address owner\n    )\n    internal {\n        address previousOwner = _owner;\n        _owner = owner;\n        emit OwnershipTransferred(previousOwner, owner);\n    }\n\n    function _transferGuardian(\n        address guardian\n    )\n    internal {\n        address previousGuardian = _guardian;\n        _guardian = guardian;\n        emit GuardianTransferred(previousGuardian, guardian);\n    }\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ncontract OffChainCurrencyValuatorData is IOwnableOrGuardian {\n\n    // ============ State Values ============\n\n    // ============ Constants ============\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ncontract OffChainCurrencyValuatorImplV2 is IOffChainCurrencyValuatorV1, IOffChainCurrencyValuatorV2, OffChainCurrencyValuatorData {\n\n    function initialize(\n        address owner,\n        address guardian\n    ) public initializer {\n        super.initialize(owner, guardian);\n    }\n\n    function getOffChainCurrenciesValue() external view returns (uint) {\n        return 0;\n    }\n\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOffChainCurrenciesValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OffChainCurrencyValuatorImplV2","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}