{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n// File: contracts/interfaces/ICollateralAuction.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\ninterface ICollateralAuction {\r\n    function baseToken() external returns(IERC20);\r\n\r\n    function auctions(uint256 _auctionId) external view returns (\r\n        IERC20 fromToken,    // Token that we are intending to sell\r\n        uint64 startTime,    // Start time of the auction\r\n        uint32 limitDelta,   // Limit time until all collateral is offered\r\n        uint256 startOffer,  // Start offer of `fromToken` for the requested `amount`\r\n        uint256 amount,      // Amount that we need to receive of `baseToken`\r\n        uint256 limit        // Limit of how much are willing to spend of `fromToken`\r\n    );\r\n\r\n    function getAuctionsLength() external view returns (uint256);\r\n    function take(uint256 _id, bytes calldata _data, bool _callback) external;\r\n\r\n    // return How much is being requested and how much is being offered\r\n    function offer(uint256 _auctionId) external view returns (uint256 selling, uint256 requesting);\r\n}\r\n\r\n// File: contracts/test/WETH9.sol\r\n\r\npragma solidity ^0.6.1;\r\n\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad, \"The sender dont have balance\");\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad, \"The sender dont have balance\");\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad, \"The sender dont have allowance\");\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.6.1;\r\n\r\n\r\ncontract Ownable {\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    address internal _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"The owner should be the sender\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0x0), msg.sender);\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/AuctionTakeHelper.sol\r\n\r\npragma solidity ^0.6.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  @author Victor Fage <victorfage@gmail.com>\r\n*/\r\ncontract AuctionTakeHelper is Ownable {\r\n\tICollateralAuction public collateralAuction;\r\n\tIERC20 public baseToken;\r\n\r\n\tIUniswapV2Router02 public router;\r\n\tIERC20 public WETH;\r\n\r\n\tconstructor(ICollateralAuction _collateralAuction, IUniswapV2Router02 _router) public {\r\n\t\tcollateralAuction = _collateralAuction;\r\n\t\tbaseToken = collateralAuction.baseToken();\r\n\r\n\t\tsetRouter(_router);\r\n\t\treApprove();\r\n\t}\r\n\r\n\tfunction getProfitAmount(uint256 _auctionId) external view returns(uint256) {\r\n\t\t(IERC20 fromToken,,,,,) = collateralAuction.auctions(_auctionId);\r\n\r\n\t\tif (fromToken == baseToken)\r\n\t\t\treturn 0;\r\n\r\n\t\t(uint256 amountGet, uint256 amountReturn) = collateralAuction.offer(_auctionId);\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tuint256[] memory amounts;\r\n\r\n\t\tif (fromToken != WETH) {\r\n\t\t\t// Calculate amount get in WETH, converting fromToken to WETH\r\n\t\t\tpath[0] = address(fromToken);\r\n\t\t\tpath[1] = address(WETH);\r\n\t\t\tamounts = router.getAmountsIn(amountGet, path);\r\n\t\t\tamountGet = amounts[1];\r\n\t\t}\r\n\r\n\t\t// Calculate amount return in WETH, converting WETH to baseToken, to pay the auction\r\n\t\tpath[0] = address(WETH);\r\n\t\tpath[1] = address(baseToken);\r\n\t\tamounts = router.getAmountsOut(amountReturn, path);\r\n\t\tamountReturn = amounts[0];\r\n\r\n\t\treturn amountGet >= amountReturn ? amountGet - amountReturn : 0;\r\n\t}\r\n\r\n\tfunction take(uint256 _auctionId, bytes calldata _data, uint256 _profit) external {\r\n\t\tcollateralAuction.take(_auctionId, _data, true);\r\n\r\n\t\tuint256 wethBal = WETH.balanceOf(address(this));\r\n\t\trequire(wethBal >= _profit, \"take: dont get profit\");\r\n\r\n\t\tif (wethBal != 0) {\r\n\t\t\tWETH9(payable(address(WETH))).withdraw(wethBal);\r\n\t\t\tpayable(_owner).transfer(wethBal);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onTake(IERC20 _fromToken, uint256 _amountGet, uint256 _amountReturn) external {\r\n\t\trequire(msg.sender == address(collateralAuction), \"onTake: The sender should be the collateralAuction\");\r\n\r\n\t\tif (_fromToken == baseToken)\r\n\t\t\treturn;\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\r\n\t\tif (_fromToken != WETH) {\r\n\t\t\t_fromToken.approve(address(router), _amountGet);\r\n\r\n\t\t\t// Converting fromToken to WETH\r\n\t\t\tpath[0] = address(_fromToken);\r\n\t\t\tpath[1] = address(WETH);\r\n\t\t\tuint256[] memory amounts = router.swapExactTokensForTokens({\r\n\t\t\t\tamountIn:     _amountGet,\r\n\t\t\t\tamountOutMin: 0,\r\n\t\t\t\tpath: \t\t\t\tpath,\r\n\t\t\t\tto: \t\t\t\t\taddress(this),\r\n\t\t\t\tdeadline: \t\tuint(-1)\r\n\t\t\t});\r\n\t\t\t_amountGet = amounts[1];\r\n\t\t}\r\n\r\n\t\t// Converting WETH to baseToken, to pay the auction\r\n\t\tpath[0] = address(WETH);\r\n\t\tpath[1] = address(baseToken);\r\n\t\trouter.swapTokensForExactTokens({\r\n\t\t\tamountOut: \t _amountReturn,\r\n\t\t\tamountInMax: _amountGet,\r\n\t\t\tpath: \t\t\t path,\r\n\t\t\tto:\t\t\t\t   address(this),\r\n\t\t\tdeadline: \t uint(-1)\r\n\t\t});\r\n\t}\r\n\r\n\tfallback() external payable { }\r\n\r\n\treceive() external payable { }\r\n\r\n\tfunction withdrawERC20(IERC20 _token) external onlyOwner {\r\n\t\trequire(_token.transfer(_owner, _token.balanceOf(address(this))), \"withdraw: error transfer the tokens\");\r\n\t}\r\n\r\n\tfunction withdrawETH() external onlyOwner {\r\n\t\tpayable(_owner).transfer(address(this).balance);\r\n\t}\r\n\r\n\tfunction setRouter(IUniswapV2Router02 _router) public onlyOwner {\r\n\t\trouter = _router;\r\n\t\tWETH = IERC20(router.WETH());\r\n\t}\r\n\r\n\tfunction reApprove() public onlyOwner {\r\n\t\tWETH.approve(address(router), uint(-1));\r\n\t\tbaseToken.approve(address(collateralAuction), uint(-1));\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICollateralAuction\",\"name\":\"_collateralAuction\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAuction\",\"outputs\":[{\"internalType\":\"contract ICollateralAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getProfitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountReturn\",\"type\":\"uint256\"}],\"name\":\"onTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AuctionTakeHelper","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000060768ba67111d1534a8096e70e950aee559586cd0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://05259d68a6d850fdfca2c3a33ef908f83cab2b6bc75ffcb863b7583c6e68854a"}]}