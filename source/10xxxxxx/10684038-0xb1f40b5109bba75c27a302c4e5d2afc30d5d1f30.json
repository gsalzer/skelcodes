{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0; \r\npragma experimental ABIEncoderV2;\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n} abstract contract CompoundOracleInterface {\r\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\r\n} abstract contract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n\r\n    function claimComp(address holder) virtual public;\r\n\r\n    function oracle() public virtual view returns (address);\r\n} interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} abstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    // function mint() external virtual payable;\r\n\r\n    function accrueInterest() public virtual returns (uint);\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n} contract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b <= a) {\r\n            return (MathError.NO_ERROR, a - b);\r\n        } else {\r\n            return (MathError.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\r\n        (MathError err0, uint sum) = addUInt(a, b);\r\n\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return subUInt(sum, c);\r\n    }\r\n} contract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an exponential from numerator and denominator values.\r\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n     *            or if `denom` is zero.\r\n     */\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n  \r\n  \r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, returning a new Exp.\r\n     */\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n     */\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials, returning a new exponential.\r\n     */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n\r\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == MathError.NO_ERROR);\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n     */\r\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\r\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies three exponentials, returning a new exponential.\r\n     */\r\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\r\n        (MathError err, Exp memory ab) = mulExp(a, b);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, ab);\r\n        }\r\n        return mulExp(ab, c);\r\n    }\r\n\r\n  \r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n \r\n} contract CompoundSafetyRatio is Exponential, DSMath {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    ComptrollerInterface public constant comp = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    /// @notice Calcualted the ratio of debt / adjusted collateral\r\n    /// @param _user Address of the user\r\n    function getSafetyRatio(address _user) public view returns (uint) {\r\n        // For each asset the account is in\r\n        address[] memory assets = comp.getAssetsIn(_user);\r\n        address oracleAddr = comp.oracle();\r\n\r\n\r\n        uint sumCollateral = 0;\r\n        uint sumBorrow = 0;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address asset = assets[i];\r\n\r\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\r\n                                        = CTokenInterface(asset).getAccountSnapshot(_user);\r\n\r\n            Exp memory oraclePrice;\r\n\r\n            if (cTokenBalance != 0 || borrowBalance != 0) {\r\n                oraclePrice = Exp({mantissa: CompoundOracleInterface(oracleAddr).getUnderlyingPrice(asset)});\r\n            }\r\n\r\n            // Sum up collateral in Usd\r\n            if (cTokenBalance != 0) {\r\n\r\n                (, uint collFactorMantissa) = comp.markets(address(asset));\r\n\r\n                Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\r\n                Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\r\n\r\n                (, Exp memory tokensToUsd) = mulExp3(collateralFactor, exchangeRate, oraclePrice);\r\n\r\n                (, sumCollateral) = mulScalarTruncateAddUInt(tokensToUsd, cTokenBalance, sumCollateral);\r\n            }\r\n\r\n            // Sum up debt in Usd\r\n            if (borrowBalance != 0) {\r\n                (, sumBorrow) = mulScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrow);\r\n            }\r\n        }\r\n\r\n        if (sumBorrow == 0) return uint(-1);\r\n\r\n        uint borrowPowerUsed = (sumBorrow * 10**18) / sumCollateral;\r\n        return wdiv(1e18, borrowPowerUsed);\r\n    }\r\n} \r\n\r\nabstract contract CEtherInterface {\r\n    function mint() external virtual payable;\r\n    function repayBorrow() external virtual payable;\r\n} \r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n} abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} contract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n} abstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n} library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} /// @title Utlity functions for Compound contracts\r\ncontract CompoundSaverHelper is DSMath, Exponential {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\r\n\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    /// @param _cTokenAddress cToken address\r\n    /// @return Token address of the cToken specified\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of collateral available to withdraw\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cCollAddress Collateral we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. collateral amount in that token\r\n    function getMaxCollateral(address _cCollAddress, address _account) public returns (uint) {\r\n        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n        uint usersBalance = CTokenInterface(_cCollAddress).balanceOfUnderlying(_account);\r\n        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n        if (liquidityInUsd == 0) return usersBalance;\r\n\r\n        CTokenInterface(_cCollAddress).accrueInterest();\r\n\r\n        (, uint collFactorMantissa) = ComptrollerInterface(COMPTROLLER).markets(_cCollAddress);\r\n        Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\r\n\r\n        (, uint tokensToUsd) = divScalarByExpTruncate(liquidityInUsd, collateralFactor);\r\n\r\n        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cCollAddress);\r\n        uint liqInToken = wdiv(tokensToUsd, usdPrice);\r\n\r\n        if (liqInToken > usersBalance) return usersBalance;\r\n\r\n        return sub(liqInToken, (liqInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cBorrowAddress Borrow token we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. borrow amount in that token\r\n    function getMaxBorrow(address _cBorrowAddress, address _account) public returns (uint) {\r\n        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n        CTokenInterface(_cBorrowAddress).accrueInterest();\r\n\r\n        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cBorrowAddress);\r\n        uint liquidityInToken = wdiv(liquidityInUsd, usdPrice);\r\n\r\n        return sub(liquidityInToken, (liquidityInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Gets data about Compound positions\r\ncontract CompoundLoanInfo is CompoundSafetyRatio {\r\n\r\n    struct LoanData {\r\n        address user;\r\n        uint128 ratio;\r\n        address[] collAddr;\r\n        address[] borrowAddr;\r\n        uint[] collAmounts;\r\n        uint[] borrowAmounts;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        address cTokenAddress;\r\n        address underlyingTokenAddress;\r\n        uint collateralFactor;\r\n        uint price;\r\n    }\r\n\r\n    struct TokenInfoFull {\r\n        address underlyingTokenAddress;\r\n        uint supplyRate;\r\n        uint borrowRate;\r\n        uint exchangeRate;\r\n        uint marketLiquidity;\r\n        uint totalSupply;\r\n        uint totalBorrow;\r\n        uint collateralFactor;\r\n        uint price;\r\n    }\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n\r\n    /// @notice Calcualted the ratio of coll/debt for a compound user\r\n    /// @param _user Address of the user\r\n    function getRatio(address _user) public view returns (uint) {\r\n        // For each asset the account is in\r\n        return getSafetyRatio(_user);\r\n    }\r\n\r\n    /// @notice Fetches Compound prices for tokens\r\n    /// @param _cTokens Arr. of cTokens for which to get the prices\r\n    /// @return prices Array of prices\r\n    function getPrices(address[] memory _cTokens) public view returns (uint[] memory prices) {\r\n        prices = new uint[](_cTokens.length);\r\n        address oracleAddr = comp.oracle();\r\n\r\n        for (uint i = 0; i < _cTokens.length; ++i) {\r\n            prices[i] = CompoundOracleInterface(oracleAddr).getUnderlyingPrice(_cTokens[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Fetches Compound collateral factors for tokens\r\n    /// @param _cTokens Arr. of cTokens for which to get the coll. factors\r\n    /// @return collFactors Array of coll. factors\r\n    function getCollFactors(address[] memory _cTokens) public view returns (uint[] memory collFactors) {\r\n        collFactors = new uint[](_cTokens.length);\r\n\r\n        for (uint i = 0; i < _cTokens.length; ++i) {\r\n            (, collFactors[i]) = comp.markets(_cTokens[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Fetches all the collateral/debt address and amounts, denominated in usd\r\n    /// @param _user Address of the user\r\n    /// @return data LoanData information\r\n    function getLoanData(address _user) public view returns (LoanData memory data) {\r\n        address[] memory assets = comp.getAssetsIn(_user);\r\n        address oracleAddr = comp.oracle();\r\n\r\n        data = LoanData({\r\n            user: _user,\r\n            ratio: 0,\r\n            collAddr: new address[](assets.length),\r\n            borrowAddr: new address[](assets.length),\r\n            collAmounts: new uint[](assets.length),\r\n            borrowAmounts: new uint[](assets.length)\r\n        });\r\n\r\n        uint collPos = 0;\r\n        uint borrowPos = 0;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address asset = assets[i];\r\n\r\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\r\n                                        = CTokenInterface(asset).getAccountSnapshot(_user);\r\n\r\n            Exp memory oraclePrice;\r\n\r\n            if (cTokenBalance != 0 || borrowBalance != 0) {\r\n                oraclePrice = Exp({mantissa: CompoundOracleInterface(oracleAddr).getUnderlyingPrice(asset)});\r\n            }\r\n\r\n            // Sum up collateral in Usd\r\n            if (cTokenBalance != 0) {\r\n                Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\r\n                (, Exp memory tokensToUsd) = mulExp(exchangeRate, oraclePrice);\r\n\r\n                data.collAddr[collPos] = asset;\r\n                (, data.collAmounts[collPos]) = mulScalarTruncate(tokensToUsd, cTokenBalance);\r\n                collPos++;\r\n            }\r\n\r\n            // Sum up debt in Usd\r\n            if (borrowBalance != 0) {\r\n                data.borrowAddr[borrowPos] = asset;\r\n                (, data.borrowAmounts[borrowPos]) = mulScalarTruncate(oraclePrice, borrowBalance);\r\n                borrowPos++;\r\n            }\r\n        }\r\n\r\n        data.ratio = uint128(getSafetyRatio(_user));\r\n\r\n        return data;\r\n    }\r\n\r\n    function getTokenBalances(address _user, address[] memory _cTokens) public view returns (uint[] memory balances, uint[] memory borrows) {\r\n        balances = new uint[](_cTokens.length);\r\n        borrows = new uint[](_cTokens.length);\r\n\r\n        for (uint i = 0; i < _cTokens.length; i++) {\r\n            address asset = _cTokens[i];\r\n\r\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\r\n                                        = CTokenInterface(asset).getAccountSnapshot(_user);\r\n\r\n            Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\r\n            (, balances[i]) = mulScalarTruncate(exchangeRate, cTokenBalance);\r\n\r\n            borrows[i] = borrowBalance;\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice Fetches all the collateral/debt address and amounts, denominated in usd\r\n    /// @param _users Addresses of the user\r\n    /// @return loans Array of LoanData information\r\n    function getLoanDataArr(address[] memory _users) public view returns (LoanData[] memory loans) {\r\n        loans = new LoanData[](_users.length);\r\n\r\n        for (uint i = 0; i < _users.length; ++i) {\r\n            loans[i] = getLoanData(_users[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Calcualted the ratio of coll/debt for a compound user\r\n    /// @param _users Addresses of the user\r\n    /// @return ratios Array of ratios\r\n    function getRatios(address[] memory _users) public view returns (uint[] memory ratios) {\r\n        ratios = new uint[](_users.length);\r\n\r\n        for (uint i = 0; i < _users.length; ++i) {\r\n            ratios[i] = getSafetyRatio(_users[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Information about cTokens\r\n    /// @param _cTokenAddresses Array of cTokens addresses\r\n    /// @return tokens Array of cTokens infomartion\r\n    function getTokensInfo(address[] memory _cTokenAddresses) public returns(TokenInfo[] memory tokens) {\r\n        tokens = new TokenInfo[](_cTokenAddresses.length);\r\n        address oracleAddr = comp.oracle();\r\n\r\n        for (uint i = 0; i < _cTokenAddresses.length; ++i) {\r\n            (, uint collFactor) = comp.markets(_cTokenAddresses[i]);\r\n\r\n            tokens[i] = TokenInfo({\r\n                cTokenAddress: _cTokenAddresses[i],\r\n                underlyingTokenAddress: getUnderlyingAddr(_cTokenAddresses[i]),\r\n                collateralFactor: collFactor,\r\n                price: CompoundOracleInterface(oracleAddr).getUnderlyingPrice(_cTokenAddresses[i])\r\n            });\r\n        }\r\n    }\r\n\r\n    /// @notice Information about cTokens\r\n    /// @param _cTokenAddresses Array of cTokens addresses\r\n    /// @return tokens Array of cTokens infomartion\r\n    function getFullTokensInfo(address[] memory _cTokenAddresses) public returns(TokenInfoFull[] memory tokens) {\r\n        tokens = new TokenInfoFull[](_cTokenAddresses.length);\r\n        address oracleAddr = comp.oracle();\r\n\r\n        for (uint i = 0; i < _cTokenAddresses.length; ++i) {\r\n            (, uint collFactor) = comp.markets(_cTokenAddresses[i]);\r\n            CTokenInterface cToken = CTokenInterface(_cTokenAddresses[i]);\r\n\r\n            tokens[i] = TokenInfoFull({\r\n                underlyingTokenAddress: getUnderlyingAddr(_cTokenAddresses[i]),\r\n                supplyRate: cToken.supplyRatePerBlock(),\r\n                borrowRate: cToken.borrowRatePerBlock(),\r\n                exchangeRate: cToken.exchangeRateCurrent(),\r\n                marketLiquidity: cToken.getCash(),\r\n                totalSupply: cToken.totalSupply(),\r\n                totalBorrow: cToken.totalBorrowsCurrent(),\r\n                collateralFactor: collFactor,\r\n                price: CompoundOracleInterface(oracleAddr).getUnderlyingPrice(_cTokenAddresses[i])\r\n            });\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    /// @param _cTokenAddress cToken address\r\n    /// @return Token address of the cToken specified\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"getCollFactors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collFactors\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getFullTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLoanInfo.TokenInfoFull[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"ratio\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"collAddr\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CompoundLoanInfo.LoanData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"getLoanDataArr\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"ratio\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"collAddr\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CompoundLoanInfo.LoanData[]\",\"name\":\"loans\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"getRatios\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getSafetyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrows\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundLoanInfo.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundLoanInfo","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2bdc4548f12dd82cff97b05aa0b80f478bbfa10d77e4bed6307dd5bdbfbf800e"}]}