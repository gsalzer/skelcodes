{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: browser/IUnipumpDrain.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpDrain\r\n{\r\n    function drain(address token) external;\r\n}\r\n\r\n// File: browser/openzeppelin/Context.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract UnipumpErc20Helper\r\n{\r\n    function transferMax(address token, address from, address to) \r\n        internal\r\n        returns (uint256 amountTransferred)\r\n    {\r\n        uint256 balance = IERC20(token).balanceOf(from);\r\n        if (balance == 0) { return 0; }\r\n        uint256 allowed = IERC20(token).allowance(from, to);\r\n        amountTransferred = allowed > balance ? balance : allowed;\r\n        if (amountTransferred == 0) { return 0; }\r\n        require (IERC20(token).transferFrom(from, to, amountTransferred), \"Transfer failed\");\r\n    }\r\n}\r\n// File: browser/IUnipumpContest.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpContest\r\n{\r\n}\r\n// File: browser/IUnipump.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipump is IERC20 {\r\n    event Sale(bool indexed _saleActive);\r\n    event LiquidityCrisis();\r\n\r\n    function WETH() external view returns (address);\r\n    \r\n    function groupManager() external view returns (IUnipumpGroupManager);\r\n    function escrow() external view returns (IUnipumpEscrow);\r\n    function staking() external view returns (IUnipumpStaking);\r\n    function contest() external view returns (IUnipumpContest);\r\n\r\n    function init(\r\n        IUnipumpEscrow _escrow,\r\n        IUnipumpStaking _staking) external;\r\n    function startUnipumpSale(uint256 _tokensPerEth, uint256 _maxSoldEth) external;\r\n    function start(\r\n        IUnipumpGroupManager _groupManager,\r\n        IUnipumpContest _contest) external;\r\n\r\n    function isSaleActive() external view returns (bool);\r\n    function tokensPerEth() external view returns (uint256);\r\n    function maxSoldEth() external view returns (uint256);\r\n    function soldEth() external view returns (uint256);\r\n    \r\n    function buy() external payable;\r\n    \r\n    function minSecondsUntilLiquidityCrisis() external view returns (uint256);\r\n    function createLiquidityCrisis() external payable;\r\n}\r\n// File: browser/UnipumpDrain.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract UnipumpDrain is IUnipumpDrain\r\n{\r\n    address payable immutable drainTarget;\r\n\r\n    constructor()\r\n    {\r\n        drainTarget = msg.sender;\r\n    }\r\n\r\n    function drain(address token)\r\n        public\r\n        override\r\n    {\r\n        uint256 amount;\r\n        if (token == address(0))\r\n        {\r\n            require (address(this).balance > 0, \"Nothing to send\");\r\n            amount = _drainAmount(token, address(this).balance);\r\n            require (amount > 0, \"Nothing allowed to send\");\r\n            (bool success,) = drainTarget.call{ value: amount }(\"\");\r\n            require (success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        amount = IERC20(token).balanceOf(address(this));\r\n        require (amount > 0, \"Nothing to send\");\r\n        amount = _drainAmount(token, amount);\r\n        require (amount > 0, \"Nothing allowed to send\");\r\n        require (IERC20(token).transfer(drainTarget, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function _drainAmount(address token, uint256 available) internal virtual returns (uint256 amount);\r\n}\r\n// File: browser/IUnipumpStaking.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpStaking\r\n{\r\n    event Stake(address indexed _staker, uint256 _amount, uint256 _epochCount);\r\n    event Reward(address indexed _staker, uint256 _reward);\r\n    event RewardPotIncrease(uint256 _amount);\r\n\r\n    function stakingRewardPot() external view returns (uint256);\r\n    function currentEpoch() external view returns (uint256);\r\n    function nextEpochTimestamp() external view returns (uint256);\r\n    function isActivated() external view returns (bool);\r\n    function secondsUntilCanActivate() external view returns (uint256);\r\n    function totalStaked() external view returns (uint256);\r\n    \r\n    function increaseRewardsPot() external;\r\n    function activate() external;\r\n    function claimRewardsAt(uint256 index) external;\r\n    function claimRewards() external;\r\n    function updateEpoch() external returns (bool);\r\n    function stakeForProfit(uint256 epochCount) external;\r\n}\r\n// File: browser/IUnipumpEscrow.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpEscrow is IUnipumpDrain\r\n{\r\n    function start() external;\r\n    function available() external view returns (uint256);\r\n}\r\n// File: browser/IUnipumpTradingGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTradingGroup\r\n{\r\n    function leader() external view returns (address);\r\n    function close() external;\r\n    function closeWithNonzeroTokenBalances() external;\r\n    function anyNonzeroTokenBalances() external view returns (bool);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function maxSecondsRemaining() external view returns (uint256);\r\n    function group() external view returns (IUnipumpGroup);\r\n    function externalBalanceChanges(address token) external view returns (bool);\r\n\r\n    function startTime() external view returns (uint256);\r\n    function endTime() external view returns (uint256);\r\n    function maxEndTime() external view returns (uint256);\r\n\r\n    function startingWethBalance() external view returns (uint256);\r\n    function finalWethBalance() external view returns (uint256);\r\n    function leaderWethProfitPayout() external view returns (uint256);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n        \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external;\r\n\r\n    function withdraw(address token) external;\r\n}\r\n// File: browser/IUnipumpTokenList.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTokenList\r\n{\r\n    function parentList() external view returns (IUnipumpTokenList);\r\n    function isLocked() external view returns (bool);\r\n    function tokens(uint256 index) external view returns (address);\r\n    function exists(address token) external view returns (bool);\r\n    function tokenCount() external view returns (uint256);\r\n\r\n    function lock() external;\r\n    function add(address token) external;\r\n    function addMany(address[] calldata _tokens) external;\r\n    function remove(address token) external;    \r\n}\r\n// File: browser/IUnipumpGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroup \r\n{\r\n    function contribute() external payable;\r\n    function abort() external;\r\n    function startPumping() external;\r\n    function isActive() external view returns (bool);\r\n    function withdraw() external;\r\n    function leader() external view returns (address);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function leaderUppCollateral() external view returns (uint256);\r\n    function requiredMemberUppFee() external view returns (uint256);\r\n    function minEthToJoin() external view returns (uint256);\r\n    function minEthToStart() external view returns (uint256);\r\n    function maxEthAcceptable() external view returns (uint256);\r\n    function maxRunTimeSeconds() external view returns (uint256);\r\n    function leaderProfitShareOutOf10000() external view returns (uint256);\r\n    function memberCount() external view returns (uint256);\r\n    function members(uint256 at) external view returns (address);\r\n    function contributions(address member) external view returns (uint256);\r\n    function totalContributions() external view returns (uint256);\r\n    function aborted() external view returns (bool);\r\n    function tradingGroup() external view returns (IUnipumpTradingGroup);\r\n}\r\n// File: browser/IUnipumpGroupFactory.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupFactory \r\n{\r\n    function createGroup(\r\n        address leader,\r\n        IUnipumpTokenList unipumpTokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup unipumpGroup);\r\n}\r\n// File: browser/IUnipumpGroupManager.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupManager\r\n{\r\n    function groupLeaders(uint256 at) external view returns (address);\r\n    function groupLeaderCount() external view returns (uint256);\r\n    function groups(uint256 at) external view returns (IUnipumpGroup);\r\n    function groupCount() external view returns (uint256);\r\n    function groupCountByLeader(address leader) external view returns (uint256);\r\n    function groupsByLeader(address leader, uint256 at) external view returns (IUnipumpGroup);\r\n\r\n    function createGroup(\r\n        IUnipumpTokenList tokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup group);\r\n}\r\n// File: browser/uniswap/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: browser/uniswap/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: browser/uniswap/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: browser/uniswap/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: browser/uniswap/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: browser/openzeppelin/Address.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/openzeppelin/SafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: browser/openzeppelin/IERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: browser/openzeppelin/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: browser/Unipump.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Unipump is ERC20, UnipumpDrain, IUnipump, UnipumpErc20Helper\r\n{\r\n    address payable immutable owner;\r\n    IUniswapV2Factory immutable uniswapV2Factory;\r\n    IUniswapV2Router02 immutable uniswapV2Router;\r\n    address immutable public override WETH;\r\n    \r\n    IUniswapV2Pair public uniswapEthUppPair;\r\n\r\n    IUnipumpGroupManager public override groupManager;\r\n    IUnipumpEscrow public override escrow;\r\n    IUnipumpStaking public override staking;\r\n    IUnipumpContest public override contest;\r\n\r\n    uint256 public override tokensPerEth;\r\n    uint256 public override maxSoldEth;\r\n    uint256 public override soldEth;\r\n\r\n    uint256 initialLiquidityTokens;\r\n    uint256 minLiquidityCrisisTime;\r\n    \r\n    constructor(\r\n        IUniswapV2Factory _uniswapV2Factory,          // 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n        IUniswapV2Router02 _uniswapV2Router            // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    ) \r\n        ERC20(\"Unipump\", \"UPP\") \r\n    {\r\n        require (address(_uniswapV2Factory) != address(0));\r\n        require (address(_uniswapV2Router) != address(0));\r\n        owner = msg.sender;\r\n\r\n        uniswapV2Factory = _uniswapV2Factory;\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        address weth = _uniswapV2Router.WETH();\r\n        WETH = weth;\r\n    }\r\n\r\n    modifier ownerOnly() { require(msg.sender == owner, \"Owner only\"); _; }\r\n\r\n    function init(\r\n        IUnipumpEscrow _escrow,\r\n        IUnipumpStaking _staking\r\n    )\r\n        public \r\n        override\r\n        ownerOnly()\r\n    {\r\n        require (address(_escrow) != address(0));\r\n        require (address(_staking) != address(0));\r\n        if (address(uniswapEthUppPair) == address(0)) {\r\n            uniswapEthUppPair = IUniswapV2Pair(uniswapV2Factory.createPair(WETH, address(this)));\r\n        }\r\n        else {\r\n            require (address(this).balance == 0 && IERC20(WETH).balanceOf(address(this)) == 0, \"Already initialized\");\r\n        }\r\n        escrow = _escrow;\r\n        staking = _staking;\r\n    }\r\n\r\n    function startUnipumpSale(uint256 _tokensPerEth, uint256 _maxSoldEth)\r\n        public\r\n        override\r\n        ownerOnly()\r\n    {\r\n        require (address(groupManager) == address(0), \"Operations have already begun\");\r\n        require (tokensPerEth == 0 || _tokensPerEth <= tokensPerEth, \"The price can only be pumped higher\");\r\n        require (_tokensPerEth > 0 || _maxSoldEth == 0);\r\n        soldEth = 0;\r\n        maxSoldEth = _maxSoldEth;\r\n        if (_tokensPerEth > 0) { tokensPerEth = _tokensPerEth; }\r\n        emit Sale(true);\r\n    }\r\n\r\n    function isSaleActive()\r\n        public\r\n        override\r\n        view\r\n        returns (bool)\r\n    {\r\n        return tokensPerEth > 0 && soldEth < maxSoldEth;\r\n    }\r\n    \r\n    function start(\r\n        IUnipumpGroupManager _groupManager,\r\n        IUnipumpContest _contest)\r\n        public\r\n        override\r\n        ownerOnly()\r\n    {\r\n        require (address(_groupManager) != address(0));\r\n        require (address(groupManager) == address(0), \"Operations cannot be stopped after having been started\");\r\n        require (address(_contest) != address(0));\r\n                \r\n        maxSoldEth = 0;\r\n        groupManager = _groupManager;\r\n        contest = _contest;\r\n                \r\n        uint256 sold = totalSupply(); // 'sold' represents 40% of the total supply\r\n        require (sold > 0);\r\n\r\n        uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\r\n\r\n        uint256 totalLiquidityEth = address(this).balance / 2 + wethBalance / 2;\r\n        uint256 totalLiquidityUpp = totalLiquidityEth * tokensPerEth * 9 / 10; // pump price by 10% when uniswap is funded\r\n\r\n        _mint(address(escrow), sold / 2); // 20% for marketing, team\r\n        _mint(address(contest), sold / 4); // 10% for public pump contests\r\n        _mint(address(this), totalLiquidityUpp + sold / 4); // liquidity (~20%) for uniswap + 10%\r\n        _approve(address(this), address(staking), sold / 4); // 10%\r\n        _approve(address(this), address(uniswapV2Router), totalLiquidityUpp);\r\n\r\n        staking.increaseRewardsPot();\r\n        escrow.start();\r\n\r\n        if (wethBalance < totalLiquidityEth) {\r\n            IWETH(WETH).deposit{ value: totalLiquidityEth - wethBalance }();\r\n        }\r\n\r\n        IERC20(WETH).approve(address(uniswapV2Router), totalLiquidityEth);\r\n\r\n        (,,initialLiquidityTokens) = uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            WETH,\r\n            totalLiquidityUpp,\r\n            totalLiquidityEth,\r\n            totalLiquidityUpp,\r\n            totalLiquidityEth,\r\n            address(this),\r\n            block.timestamp);\r\n\r\n        minLiquidityCrisisTime = block.timestamp + 60 * 60 * 24 * 30; // Creating a liquidity crisis isn't available for the first month\r\n\r\n        emit Sale(false);\r\n    }\r\n\r\n    receive() \r\n        external\r\n        payable\r\n    {\r\n        uint256 tokens = tokensPerEth * msg.value;\r\n        uint256 sold = soldEth;\r\n        require (address(groupManager) == address(0) && tokens > 0 && sold < maxSoldEth, \"Tokens are not for sale or you did not send any ETH/WETH\");\r\n        _mint(msg.sender, tokens);\r\n        soldEth = sold + msg.value;\r\n    }\r\n\r\n    function buy()\r\n        public\r\n        payable\r\n        override\r\n    {       \r\n        uint256 wethAmount = transferMax(WETH, msg.sender, address(this));\r\n        uint256 totalAmount = wethAmount + msg.value;\r\n        uint256 tokens = tokensPerEth * totalAmount;\r\n        uint256 sold = soldEth;\r\n        require (address(groupManager) == address(0) && tokens > 0 && sold < maxSoldEth, \"Tokens are not for sale or you did not send any ETH/WETH\");\r\n        _mint(msg.sender, tokens);\r\n        soldEth = sold + totalAmount;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override { \r\n        require (from == address(0) || address(groupManager) != address(0), \"The contract has not yet become operational\");\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function minSecondsUntilLiquidityCrisis()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 min = minLiquidityCrisisTime;\r\n        if (min <= block.timestamp) { return 0; }\r\n        return min - block.timestamp;\r\n    }\r\n\r\n    // Reduce some liquidity - use to enhance pump effectiveness during bull run!\r\n    function createLiquidityCrisis()\r\n        external\r\n        payable\r\n        override\r\n    {\r\n        require (block.timestamp >= minLiquidityCrisisTime, \"It's too early to create a liquidity crisis\");\r\n        require (msg.sender == owner || msg.value >= 100 ether, \"This can only be called by paying 100 ETH\");\r\n\r\n        minLiquidityCrisisTime = block.timestamp + 60 * 60 * 24 * 90; // No more for 3 months;\r\n\r\n        uint256 liquidity = initialLiquidityTokens / 4;\r\n        uint256 balance = uniswapEthUppPair.balanceOf(address(this));\r\n        if (liquidity > balance) { liquidity = balance; }\r\n        if (liquidity == 0) { return; }\r\n\r\n        uniswapEthUppPair.approve(address(uniswapV2Router), liquidity);\r\n        (uint256 amountToken,) = uniswapV2Router.removeLiquidityETH(\r\n            address(this),\r\n            liquidity,\r\n            0,\r\n            0,\r\n            owner,\r\n            block.timestamp);\r\n\r\n        _transfer(owner, address(this), amountToken);\r\n        _approve(address(this), address(staking), amountToken);\r\n        staking.increaseRewardsPot();\r\n\r\n        emit LiquidityCrisis();\r\n    }\r\n\r\n    function _drainAmount(\r\n        address token, \r\n        uint256 available\r\n    ) \r\n        internal \r\n        override\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        amount = available;\r\n        \r\n        if (address(groupManager) == address(0) || // Don't allow any drainage until the contract is operational and liquidity funding has been provided\r\n            token == address(uniswapEthUppPair)) // Don't allow drainage of liquidity\r\n        {            \r\n            amount = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/UnipumpDefaults.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UnipumpDefaults is Unipump \r\n{\r\n    constructor() \r\n        Unipump(\r\n            IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f), // uniswap v2 factory on ethereum mainnet\r\n            IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) // uniswap v2 router on ethereum mainnet\r\n        ) \r\n    { }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiquidityCrisis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_saleActive\",\"type\":\"bool\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contest\",\"outputs\":[{\"internalType\":\"contract IUnipumpContest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLiquidityCrisis\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IUnipumpEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupManager\",\"outputs\":[{\"internalType\":\"contract IUnipumpGroupManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUnipumpEscrow\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"contract IUnipumpStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSoldEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSecondsUntilLiquidityCrisis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IUnipumpStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUnipumpGroupManager\",\"name\":\"_groupManager\",\"type\":\"address\"},{\"internalType\":\"contract IUnipumpContest\",\"name\":\"_contest\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensPerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSoldEth\",\"type\":\"uint256\"}],\"name\":\"startUnipumpSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapEthUppPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnipumpDefaults","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://525ef51f08395eefc8eaedc735fb085cc44533f623b1f1177897d9631076e1b6"}]}