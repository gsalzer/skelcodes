{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BSD-3-Clause\r\n\r\npragma solidity >=0.5.0 <0.6.10;\r\n\r\ncontract SpeederXContract {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeF1Levels;\r\n        mapping(uint8 => bool) activeF2Levels;\r\n        \r\n        mapping(uint8 => F1) f1Matrix;\r\n        mapping(uint8 => F2) f2Matrix;\r\n    }\r\n    \r\n    struct F1 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct F2 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 13;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public reinvestGlobalCount;\r\n    mapping(address => uint) public balances; \r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    \r\n    uint internal reentryStatus;\r\n    uint internal constant entryEnabled = 1;\r\n    uint internal constant entryDisabled = 2;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    event SentETH(address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n    modifier blockReEntry() {\r\n        require(reentryStatus != entryDisabled, \"Security Block\");\r\n        reentryStatus = entryDisabled;\r\n    \r\n        _;\r\n    \r\n        reentryStatus = entryEnabled;\r\n    }\r\n    \r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.02 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        reentryStatus = entryEnabled;\r\n        owner = ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeF1Levels[i] = true;\r\n            users[ownerAddress].activeF2Levels[i] = true;\r\n        }\r\n        \r\n        userIds[1] = ownerAddress;\r\n    }\r\n    \r\n    fallback() external payable blockReEntry(){\r\n        return registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n    receive() external payable blockReEntry() {\r\n        return registration(msg.sender, owner);\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable blockReEntry() {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 startLevel, uint8 endLevel) external payable blockReEntry() {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(startLevel >= 0 && startLevel < LAST_LEVEL, \"invalid startLevel\");\r\n        require(endLevel > 1 && endLevel <= LAST_LEVEL, \"invalid endLevel\");\r\n\r\n        if(startLevel == 0){\r\n            require(msg.value == levelPrice[endLevel], \"invalid price\");\r\n            buyNewEachLevel(matrix, endLevel);\r\n        } else {\r\n            uint amount;\r\n            for (uint8 i = startLevel; i <= endLevel; i++) {\r\n                amount += levelPrice[i] ;\r\n            }\r\n            require(msg.value == amount, \"invalid many level price\");\r\n\r\n            for (uint8 i = startLevel; i <= endLevel; i++) {\r\n                buyNewEachLevel(matrix, i);\r\n            }\r\n        }\r\n    } \r\n\r\n    function buyNewEachLevel(uint8 matrix, uint8 level) private {\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeF1Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].f1Matrix[level-1].blocked) {\r\n                users[msg.sender].f1Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeF1Referrer = findFreeF1Referrer(msg.sender, level);\r\n            users[msg.sender].f1Matrix[level].currentReferrer = freeF1Referrer;\r\n            users[msg.sender].activeF1Levels[level] = true;\r\n            updateF1Referrer(msg.sender, freeF1Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeF1Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeF2Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].f2Matrix[level-1].blocked) {\r\n                users[msg.sender].f2Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeF2Referrer = findFreeF2Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeF2Levels[level] = true;\r\n            updateF2Referrer(msg.sender, freeF2Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeF2Referrer, 2, level);\r\n        }\r\n    }  \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.04 ether, \"registration cost 0.04\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeF1Levels[1] = true; \r\n        users[userAddress].activeF2Levels[1] = true;\r\n        \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeF1Referrer = findFreeF1Referrer(userAddress, 1);\r\n        users[userAddress].f1Matrix[1].currentReferrer = freeF1Referrer;\r\n        updateF1Referrer(userAddress, freeF1Referrer, 1);\r\n\r\n        updateF2Referrer(userAddress, findFreeF2Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function updateF1Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].f1Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].f1Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].f1Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].f1Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeF1Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].f1Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeF1Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].f1Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].f1Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].f1Matrix[level].reinvestCount++;\r\n            reinvestGlobalCount[referrerAddress] = users[referrerAddress].f1Matrix[level].reinvestCount;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            updateF1Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].f1Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateF2Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeF2Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].f2Matrix[level].firstLevelReferrals.length < 2) {\r\n            \r\n            users[referrerAddress].f2Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].f2Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].f2Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].f2Matrix[level].currentReferrer;            \r\n            users[ref].f2Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].f2Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].f2Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].f2Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].f2Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].f2Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].f2Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].f2Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].f2Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateF2ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].f2Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].f2Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].f2Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].f2Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].f2Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].f2Matrix[level].closedPart)) {\r\n\r\n                updateF2(userAddress, referrerAddress, level, true);\r\n                return updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].f2Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].f2Matrix[level].closedPart) {\r\n                updateF2(userAddress, referrerAddress, level, true);\r\n                return updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateF2(userAddress, referrerAddress, level, false);\r\n                return updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].f2Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateF2(userAddress, referrerAddress, level, false);\r\n            return updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].f2Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateF2(userAddress, referrerAddress, level, true);\r\n            return updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[0]].f2Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[1]].f2Matrix[level].firstLevelReferrals.length) {\r\n            updateF2(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateF2(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateF2ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateF2(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[0]].f2Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].f2Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[0]].f2Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[0]].f2Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].f2Matrix[level].currentReferrer = users[referrerAddress].f2Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[1]].f2Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].f2Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[1]].f2Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].f2Matrix[level].firstLevelReferrals[1]].f2Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].f2Matrix[level].currentReferrer = users[referrerAddress].f2Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateF2ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].f2Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory f2 = users[users[referrerAddress].f2Matrix[level].currentReferrer].f2Matrix[level].firstLevelReferrals;\r\n        \r\n        if (f2.length == 2) {\r\n            if (f2[0] == referrerAddress ||\r\n                f2[1] == referrerAddress) {\r\n                users[users[referrerAddress].f2Matrix[level].currentReferrer].f2Matrix[level].closedPart = referrerAddress;\r\n            } else if (f2.length == 1) {\r\n                if (f2[0] == referrerAddress) {\r\n                    users[users[referrerAddress].f2Matrix[level].currentReferrer].f2Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].f2Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].f2Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].f2Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeF2Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].f2Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].f2Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeF2Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateF2Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeF1Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeF1Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeF2Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeF2Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveF1Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeF1Levels[level];\r\n    }\r\n\r\n    function usersActiveF2Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeF2Levels[level];\r\n    }\r\n\r\n    function usersF1Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].f1Matrix[level].currentReferrer,\r\n                users[userAddress].f1Matrix[level].referrals,\r\n                users[userAddress].f1Matrix[level].blocked);\r\n    }\r\n\r\n    function usersF2Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\r\n        return (users[userAddress].f2Matrix[level].currentReferrer,\r\n                users[userAddress].f2Matrix[level].firstLevelReferrals,\r\n                users[userAddress].f2Matrix[level].secondLevelReferrals,\r\n                users[userAddress].f2Matrix[level].blocked,\r\n                users[userAddress].f2Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].f1Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].f1Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].f2Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].f2Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n        \r\n        (bool success, ) = address(uint160(receiver)).call{ value: levelPrice[level], gas: 40000 }(\"\");\r\n\r\n        if (success == false) { \r\n          (success, ) = address(uint160(receiver)).call{ value: levelPrice[level], gas: 40000 }(\"\");\r\n          require(success, 'Transfer Failed');\r\n        }\r\n        \r\n        emit SentETH(receiver, matrix, level);\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"startLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endLevel\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeF1Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeF2Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reinvestGlobalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveF1Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveF2Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersF1Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersF2Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SpeederXContract","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d6bac805489cfc3b50d15234f54f7c0da84d2d93","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69572aa54d056c15b3a257a03e6306c68e3612ac03192ab3a9f04bb146dd1cf9"}]}