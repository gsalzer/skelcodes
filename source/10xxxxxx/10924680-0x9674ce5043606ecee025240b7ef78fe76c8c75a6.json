{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n  The contract determines which addresses are permitted\r\n*/\r\ncontract PermittedAddresses is Ownable {\r\n  event AddNewPermittedAddress(address newAddress, uint256 addressType);\r\n  event RemovePermittedAddress(address Address);\r\n\r\n  // Mapping to permitted addresses\r\n  mapping (address => bool) public permittedAddresses;\r\n  mapping (address => uint256) public addressesTypes;\r\n\r\n  enum Types { EMPTY, EXCHANGE_PORTAL, POOL_PORTAL, DEFI_PORTAL, STABLE_COIN }\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _exchangePortal      Exchange portal contract\r\n  * @param _poolPortal          Pool portal contract\r\n  * @param _stableCoin          Stable coins addresses to permitted\r\n  * @param _defiPortal          Defi portal\r\n  */\r\n  constructor(\r\n    address _exchangePortal,\r\n    address _poolPortal,\r\n    address _stableCoin,\r\n    address _defiPortal\r\n  ) public\r\n  {\r\n    _enableAddress(_exchangePortal, uint256(Types.EXCHANGE_PORTAL));\r\n    _enableAddress(_poolPortal, uint256(Types.POOL_PORTAL));\r\n    _enableAddress(_defiPortal, uint256(Types.DEFI_PORTAL));\r\n    _enableAddress(_stableCoin, uint256(Types.STABLE_COIN));\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev adding a new address to permittedAddresses\r\n  *\r\n  * @param _newAddress    The new address to permit\r\n  */\r\n  function addNewAddress(address _newAddress, uint256 addressType) public onlyOwner {\r\n    _enableAddress(_newAddress, addressType);\r\n  }\r\n\r\n  /**\r\n  * @dev update address type as owner for case if wrong address type was set\r\n  *\r\n  * @param _newAddress    The new address to permit\r\n  */\r\n  function updateAddressType(address _newAddress, uint256 addressType) public onlyOwner {\r\n    addressesTypes[_newAddress] = addressType;\r\n  }\r\n\r\n  /**\r\n  * @dev Disables an address, meaning SmartFunds will no longer be able to connect to them\r\n  * if they're not already connected\r\n  *\r\n  * @param _address    The address to disable\r\n  */\r\n  function disableAddress(address _address) public onlyOwner {\r\n    permittedAddresses[_address] = false;\r\n    emit RemovePermittedAddress(_address);\r\n  }\r\n\r\n  /**\r\n  * @dev Enables/disables an address\r\n  *\r\n  * @param _newAddress    The new address to set\r\n  * @param addressType    Address type\r\n  */\r\n  function _enableAddress(address _newAddress, uint256 addressType) private {\r\n    permittedAddresses[_newAddress] = true;\r\n    addressesTypes[_newAddress] = addressType;\r\n\r\n    emit AddNewPermittedAddress(_newAddress, addressType);\r\n  }\r\n\r\n  /**\r\n  * @dev check if input address has the same type as addressType\r\n  */\r\n  function isMatchTypes(address _address, uint256 addressType) public view returns(bool){\r\n    return addressesTypes[_address] == addressType;\r\n  }\r\n\r\n  /**\r\n  * @dev return address type\r\n  */\r\n  function getType(address _address) public view returns(uint256){\r\n    return addressesTypes[_address];\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangePortal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolPortal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defiPortal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addressType\",\"type\":\"uint256\"}],\"name\":\"AddNewPermittedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"RemovePermittedAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addressType\",\"type\":\"uint256\"}],\"name\":\"addNewAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addressType\",\"type\":\"uint256\"}],\"name\":\"isMatchTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addressType\",\"type\":\"uint256\"}],\"name\":\"updateAddressType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PermittedAddresses","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e3c06d526b38f67d7a897bba20906f36d2793a30000000000000000000000006f553184c04a4ad0b3551a4ff60fb73bb6e904080000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c8a2ba3e9ce03f78551d7de5706cc275d4d3130f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://39025dde5d1842846d87380f8db7674fff3f8e388a5a4b9001af3c133e46cad2"}]}