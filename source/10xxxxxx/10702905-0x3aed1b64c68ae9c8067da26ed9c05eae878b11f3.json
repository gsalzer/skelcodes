{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n/ _\\_ __ ___   __ _ _ __| |_/ / /\\ \\ \\___ | |_   _____  ___\r\n\\ \\| '_ ` _ \\ / _` | '__| __\\ \\/  \\/ / _ \\| \\ \\ / / _ \\/ __|\r\n_\\ \\ | | | | | (_| | |  | |_ \\  /\\  / (_) | |\\ V /  __/\\__ \\\r\n\\__/_| |_| |_|\\__,_|_|   \\__| \\/  \\/ \\___/|_| \\_/ \\___||___/\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity >= 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SmartWolves {\r\n    using SafeMath for uint;\r\n\r\n    uint status;\r\n\r\n    uint registrationFee;\r\n\r\n    address payable public companyAccount;\r\n\r\n    event Enrolled(\r\n        uint8 indexed pool,\r\n        address indexed payerAddress,\r\n        bytes32 indexed username,\r\n        uint amount\r\n    );\r\n\r\n    event PayoutSuccess(\r\n        address indexed payee,\r\n        bytes32 indexed username,\r\n        uint amount\r\n    );\r\n\r\n    event NewDeposit(\r\n        address indexed payer,\r\n        uint amount\r\n    );\r\n\r\n    event CompanyAccountChanged(\r\n        address indexed oldAccount,\r\n        address indexed newAccount\r\n    );\r\n\r\n    struct User {\r\n        uint8 pool;\r\n        address paymentAddress;\r\n        bytes32 userName;\r\n    }\r\n\r\n    mapping(uint8 => uint) public pools;\r\n\r\n    mapping(bytes32 => User) public users;\r\n\r\n    constructor(uint _registrationFee) public {\r\n        registrationFee = _registrationFee;\r\n        companyAccount = msg.sender;\r\n\r\n        pools[1] = 50000000000000000;\r\n        pools[2] = 200000000000000000;\r\n        pools[3] = 500000000000000000;\r\n        pools[4] = 1000000000000000000;\r\n        pools[5] = 2000000000000000000;\r\n        pools[6] = 5000000000000000000;\r\n        pools[7] = 10000000000000000000;\r\n        pools[8] = 20000000000000000000;\r\n        pools[9] = 30000000000000000000;\r\n        pools[10] = 50000000000000000000;\r\n        pools[11] = 100000000000000000000;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == companyAccount, 'Sorry this can be only by the admin account!');\r\n        _;\r\n    }\r\n\r\n    modifier noContract(address _address){\r\n        require(!isContract(_address), 'Payment to a contract is not allowed!');\r\n        _;\r\n    }\r\n\r\n    modifier notEnrolledAlready(bytes32 _username){\r\n        require(users[_username].userName != _username, 'You seems have enrolled already!');\r\n        _;\r\n    }\r\n\r\n    function enrol(bytes32 _username, uint8 _pool) external payable notEnrolledAlready(_username) {\r\n        require(msg.value >= pools[_pool].add(registrationFee), 'Please send the correct amount!');\r\n\r\n        depositAmount(companyAccount, msg.value);\r\n        // Enrol user\r\n        users[_username] = User(_pool, msg.sender, _username);\r\n        // Emit event telling that there is a new enrolment\r\n        emit Enrolled(_pool, msg.sender, _username, msg.value);\r\n    }\r\n\r\n    function withdrawToUserAccount(address _userAddress, bytes32 __userName, uint _amount) external payable onlyOwner noContract(_userAddress) {\r\n        depositAmount(_userAddress, _amount);\r\n        // Emit success payout event\r\n        emit PayoutSuccess(_userAddress, __userName, _amount);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    function depositAmount(address _user, uint256 _amount) internal {\r\n        require(address(this).balance >= _amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = _user.call{value : _amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function changeCompanyAccount() external onlyOwner {\r\n        address oldAccount = companyAccount;\r\n        companyAccount = msg.sender;\r\n        emit CompanyAccountChanged(oldAccount, msg.sender);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit NewDeposit(msg.sender, msg.value);\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit NewDeposit(msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"CompanyAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pool\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Enrolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutSuccess\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"changeCompanyAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyAccount\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_username\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"enrol\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"pool\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"userName\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"__userName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToUserAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SmartWolves","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000008a16f1a0dd850","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fb1641fdff76c70ecff281007e65ec7b43fe4166994d2ab7493c1f3cb29fd65"}]}