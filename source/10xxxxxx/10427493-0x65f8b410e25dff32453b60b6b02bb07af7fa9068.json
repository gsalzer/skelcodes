{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDeerfiV1FeedPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1FeedPair {\r\n    function factory() external view returns (address);\r\n    function tokenA() external view returns (address);\r\n    function tokenB() external view returns (address);\r\n    function decimalsA() external view returns (uint8);\r\n    function decimalsB() external view returns (uint8);\r\n    function aggregator0() external view returns (address);\r\n    function aggregator1() external view returns (address);\r\n    function decimals0() external view returns (uint8);\r\n    function decimals1() external view returns (uint8);\r\n    function isReverse0() external view returns (bool);\r\n    function isReverse1() external view returns (bool);\r\n    function initialize(address, address, uint8, uint8, address, address, uint8, uint8, bool, bool) external;\r\n    function getReserves() external view returns (uint reserveA, uint reserveB);\r\n}\r\n\r\n// File: contracts/interfaces/AggregatorInterface.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface AggregatorInterface {\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  // post-Historic\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function version() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/DeerfiV1FeedPair.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\ncontract DeerfiV1FeedPair is IDeerfiV1FeedPair {\r\n    using SafeMath for uint;\r\n\r\n    address public factory;\r\n    address public tokenA;\r\n    address public tokenB;\r\n    uint8 public decimalsA;\r\n    uint8 public decimalsB;\r\n    address public aggregator0;\r\n    address public aggregator1;\r\n    uint8 public decimals0;\r\n    uint8 public decimals1;\r\n    bool public isReverse0;\r\n    bool public isReverse1;\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function initialize(address _tokenA, address _tokenB, uint8 _decimalsA, uint8 _decimalsB,\r\n        address _aggregator0, address _aggregator1, uint8 _decimals0, uint8 _decimals1, bool _isReverse0, bool _isReverse1) external {\r\n        require(msg.sender == factory, 'DeerfiV1: FORBIDDEN'); // sufficient check\r\n        require(_tokenA != _tokenB, 'DeerfiV1: IDENTICAL_ADDRESSES');\r\n        (address token0,) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\r\n        require(token0 != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(_decimalsA > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_decimalsB > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_aggregator0 != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(_decimals0 > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_decimals1 > 0, 'DeerfiV1: FORBIDDEN');\r\n\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n        decimalsA = _decimalsA;\r\n        decimalsB = _decimalsB;\r\n        aggregator0 = _aggregator0;\r\n        aggregator1 = _aggregator1;\r\n        decimals0 = _decimals0;\r\n        decimals1 = _decimals1;\r\n        isReverse0 = _isReverse0;\r\n        isReverse1 = _isReverse1;\r\n    }\r\n\r\n    function getReserves0() internal view returns (uint reserveA, uint reserveB) {\r\n        AggregatorInterface _aggregator0 = AggregatorInterface(aggregator0);\r\n        if (isReverse0) {\r\n            reserveA = uint(_aggregator0.latestAnswer());\r\n            reserveB = 10 ** uint(decimals0);\r\n        } else {\r\n            reserveA = 10 ** uint(decimals0);\r\n            reserveB = uint(_aggregator0.latestAnswer());\r\n        }\r\n    }\r\n\r\n    function getReserves1() internal view returns (uint reserveA, uint reserveB) {\r\n        AggregatorInterface _aggregator1 = AggregatorInterface(aggregator1);\r\n        if (isReverse1) {\r\n            reserveA = uint(_aggregator1.latestAnswer());\r\n            reserveB = 10 ** uint(decimals1);\r\n        } else {\r\n            reserveA = 10 ** uint(decimals1);\r\n            reserveB = uint(_aggregator1.latestAnswer());\r\n        }\r\n    }\r\n\r\n    function getReserves() external view returns (uint reserveA, uint reserveB) {\r\n        uint8 _decimalsA = decimalsA;\r\n        uint8 _decimalsB = decimalsB;\r\n        uint8 _decimals0 = decimals0;\r\n        uint8 _decimals1 = decimals1;\r\n        if (aggregator1 == address(0)) {\r\n            (uint reserve0A, uint reserve0B) = getReserves0();\r\n            reserveA = reserve0A.mul(10 ** uint(_decimalsA)) / (10 ** uint(_decimals0));\r\n            reserveB = reserve0B.mul(10 ** uint(_decimalsB)) / (10 ** uint(_decimals0));\r\n        } else {\r\n            (uint reserve0A, uint reserve0B) = getReserves0();\r\n            (uint reserve1A, uint reserve1B) = getReserves1();\r\n            reserveA = reserve0A.mul(reserve1A).mul(10 ** uint(_decimalsA)) / (10 ** uint(_decimals0)) / (10 ** uint(_decimals1));\r\n            reserveB = reserve0B.mul(reserve1B).mul(10 ** uint(_decimalsB)) / (10 ** uint(_decimals0)) / (10 ** uint(_decimals1));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregator0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregator1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals0\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsB\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimalsA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimalsB\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_aggregator0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimals1\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isReverse0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isReverse1\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReverse0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReverse1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeerfiV1FeedPair","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://01dd8c206feaff52cabff45b0c3ae4be8d68f5b203c0c263016577ff08a9aeab"}]}