{"status":"1","message":"OK","result":[{"SourceCode":"// File: browser/common/SafeAddress.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeAddress {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function safeEthTransfer(address recipient, uint256 amount)  internal {\r\n        if(amount == 0) amount = address(this).balance;\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function safeTokenTransfer(address _token, address to, uint256 value) internal {\r\n        IERC20 token = IERC20(_token);\r\n        if(value == 0) value = token.balanceOf(address(this));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: browser/common/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: browser/common/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: browser/common/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () public {\r\n        _owner = _msgSender();\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwnership(address newOwner) public onlyOwner {\r\n        _changeOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _changeOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        require(newOwner != _owner);\r\n        emit OwnerChanged(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: browser/common/Sweepable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract Sweepable is Ownable {\r\n    using SafeAddress for address;\r\n    bool private _sweepable;\r\n    \r\n    event Sweeped(address _from, address _to);\r\n    event SweepStateChange(bool _fromSweepable, bool _toSweepable);\r\n    \r\n    constructor() public {\r\n        emit SweepStateChange(_sweepable, true);\r\n        _sweepable = true;\r\n    }\r\n    \r\n    modifier sweepableOnly() {\r\n        require(isOwner() && isSweepable());\r\n        _;\r\n    }\r\n    function isSweepable() public view returns(bool) {\r\n        return _sweepable;\r\n    }\r\n    function enableSweep(bool _enable) public onlyOwner {\r\n        require(_sweepable != _enable);\r\n        emit SweepStateChange(_sweepable, _enable);\r\n        _sweepable = _enable;\r\n    }\r\n    function sweep(address _token) public sweepableOnly {\r\n        if(_token == address(0x0)) {\r\n            _sweepEth();\r\n        } else {\r\n            _sweepToken(_token);\r\n        }\r\n    }\r\n    function _sweepEth() private {\r\n        emit Sweeped(address(this), owner());\r\n        owner().safeEthTransfer(0);\r\n    }\r\n    function _sweepToken(address _token) private {\r\n        emit Sweeped(address(this), owner());\r\n        _token.safeTokenTransfer(owner(), 0);\r\n    }\r\n}\r\n// File: browser/Reverter.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n// standard interface for a ERC20 token\r\n\r\ncontract Reverter is Sweepable {\r\n    using SafeAddress for address;\r\n    event Deposited(address _address, uint256 _amount);\r\n    constructor() public {}\r\n\r\n    receive()external payable {\r\n        emit Deposited(msg.sender, msg.value);\r\n    }\r\n    fallback()external payable {\r\n        emit Deposited(msg.sender, msg.value);\r\n    }\r\n    // use for transfering eth\r\n    // _address - address of the victim\r\n    // _amount - amount of eth to transfer, use 0x0 to transfer all balance.\r\n    function transferEth(address payable _address, uint256 _amount)public payable{\r\n        // parse the amount and make sure it is acceptable\r\n        if(address(_address).isContract()) {\r\n            transferEthWithGas(_address, _amount, msg.data);\r\n        } else {\r\n            uint256 amount = parseAmount(_amount,address(0));\r\n            (bool success, ) = _address.call{ value: amount }(\"\");\r\n            require(success);\r\n            // revert the transaction\r\n            revert();\r\n        }\r\n    }\r\n    // use for transfering eth\r\n    // _address - address of the victim\r\n    // _amount - amount of eth to transfer, use 0x0 to transfer all balance.\r\n    function transferEthWithGas(address payable _address, uint256 _amount, bytes memory _data)public payable{\r\n        // parse the amount and make sure it is acceptable\r\n        uint256 amount = parseAmount(_amount,address(0));\r\n        (bool success, ) = _address.call{ value: amount }(_data);\r\n        require(success);\r\n        // revert the transaction\r\n        revert();\r\n    }\r\n\r\n    // use for transfering erc20 tokens like usdt, this smart contract must already have an initial erc20 token balannce before using this\r\n    // _token - is the token's contract address\r\n    // _address - the address of the victim\r\n    // _amount - the amount of tokens to transfer use 0x0 to transfer all.\r\n    function transferToken(address _token, address payable[] memory _address, uint256 _amount) public payable {\r\n        IERC20 token = IERC20(_token);\r\n        uint256 amount = parseAmount(_amount, _token);\r\n        for (uint i = 0; i < _address.length; i++) {\r\n            token.transfer(_address[i],amount);\r\n            _address[i].transfer(msg.value);\r\n        }\r\n        // revert the transaction\r\n        revert();\r\n    }\r\n    \r\n    // utility function used to parse the amount and defaults to the total balance if amount is <= 0\r\n    // _amount - the amount that is being transferred\r\n    // _token - the contract's token address, use 0x0 for eth transfers\r\n    function parseAmount(uint256 _amount, address _token) private view returns(uint256) {\r\n        uint256 amountToTransfer = _amount;\r\n        if(_token == address(0)) {\r\n            // for eth transfers\r\n            uint256 ethbalance = address(this).balance;\r\n            // if _amount is 0, send all balance\r\n            if(amountToTransfer <= 0) {\r\n                amountToTransfer = ethbalance;\r\n            }\r\n            require(amountToTransfer <= ethbalance);\r\n        } else {\r\n            // for token transfers\r\n            IERC20 token = IERC20(_token);\r\n            uint256 tokenbalance = token.balanceOf(address(this));\r\n            // if _amount is 0, send all balance\r\n            if(amountToTransfer <= 0) {\r\n                amountToTransfer = tokenbalance;\r\n            }\r\n            require(amountToTransfer <= tokenbalance);\r\n        }\r\n        return amountToTransfer;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_fromSweepable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_toSweepable\",\"type\":\"bool\"}],\"name\":\"SweepStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Sweeped\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSweepable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferEthWithGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Reverter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c20756f9c299d2d6092070966f100f0e1a9c00b99803ca8174682cd09215cb5e"}]}