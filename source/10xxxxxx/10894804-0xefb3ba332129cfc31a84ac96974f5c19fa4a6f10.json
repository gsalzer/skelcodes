{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * SafeMath mul function\r\n     * @dev function for safe multiply, throws on overflow.\r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n  \t * SafeMath div function\r\n  \t * @dev function for safe devide, throws on overflow.\r\n  \t **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n  \t * SafeMath sub function\r\n  \t * @dev function for safe subtraction, throws on overflow.\r\n  \t **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n  \t * SafeMath add function\r\n  \t * @dev Adds two numbers, throws on overflow.\r\n  \t */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public isOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  event NotPausable();\r\n\r\n  bool public paused = false;\r\n  bool public canPause = true;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     **/\r\n    function pause() isOwner whenNotPaused public {\r\n        require(canPause == true);\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() isOwner whenPaused public {\r\n    require(paused == true);\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n  /**\r\n     * @dev Prevent the token from ever being paused again\r\n     **/\r\n    function notPausable() isOwner public{\r\n        paused = false;\r\n        canPause = false;\r\n        emit NotPausable();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract StandardToken is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n     * @dev Returns the total supply of the token\r\n     **/\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens when not paused\r\n     **/\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    /**\r\n     * @dev transferFrom function to tansfer tokens when token is not paused\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    /**\r\n     * @dev returns balance of the owner\r\n     **/\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev approve spender when not paused\r\n     **/\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface with the features of the above declared standard token\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract POFI is StandardToken  {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public version = '1.0';\r\n    uint8 public decimals;\r\n    uint16 public exchangeRate;\r\n    uint256 public lockedTime;\r\n    uint256 public othersLockedTime;\r\n    uint256 public marketingLockedTime;\r\n\r\n    event TokenNameChanged(string indexed previousName, string indexed newName);\r\n    event TokenSymbolChanged(string indexed previousSymbol, string indexed newSymbol);\r\n    event ExchangeRateChanged(uint16 indexed previousRate, uint16 indexed newRate);\r\n\r\n    /**\r\n   * ERC20 Token Constructor\r\n   * @dev Create and issue tokens to msg.sender.\r\n   */\r\n    constructor (address privatesale, address presale, address marketing) public {\r\n        decimals        = 18;\r\n        exchangeRate    = 12566;\r\n        lockedTime     = 1632031991; // 1 year locked\r\n        othersLockedTime = 1609528192; // 3 months locked\r\n        marketingLockedTime = 1614625792; // 6 months locked\r\n        symbol          = \"POFI\";\r\n        name            = \"PoFi Network\";\r\n\r\n        mint(privatesale, 15000000 * 10**uint256(decimals)); // Privatesale 15% of the tokens\r\n        mint(presale, 10000000 * 10**uint256(decimals)); // Presale 10% of the tokens\r\n        mint(marketing, 5000000 * 10**uint256(decimals)); // Marketing/partnership/uniswap liquidity (5% of the tokens, the other 5% is locked for 6 months)\r\n        mint(address(this), 70000000 * 10**uint256(decimals)); // Team 10% of tokens locked for 1 year, Others(Audit/Dev) 5% of tokens locked for 3 months, marketing 5% of tokens locked for 6 months, rewards 50% of the total token supply is locked for 3 months\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change token name.\r\n     * @return A boolean.\r\n     */\r\n    function changeTokenName(string newName) public isOwner returns (bool success) {\r\n        emit TokenNameChanged(name, newName);\r\n        name = newName;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change token symbol.\r\n     * @return A boolean.\r\n     */\r\n    function changeTokenSymbol(string newSymbol) public isOwner returns (bool success) {\r\n        emit TokenSymbolChanged(symbol, newSymbol);\r\n        symbol = newSymbol;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the exchangeRate.\r\n     * @return A boolean.\r\n     */\r\n    function changeExchangeRate(uint16 newRate) public isOwner returns (bool success) {\r\n        emit ExchangeRateChanged(exchangeRate, newRate);\r\n        exchangeRate = newRate;\r\n        return true;\r\n    }\r\n\r\n    function () public payable {\r\n        fundTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev Function to fund tokens\r\n     */\r\n    function fundTokens() public payable {\r\n        require(msg.value > 0);\r\n        uint256 tokens = msg.value.mul(exchangeRate);\r\n        require(balances[owner].sub(tokens) > 0);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        emit Transfer(msg.sender, owner, tokens);\r\n        forwardFunds();\r\n    }\r\n    /**\r\n     * @dev Function to forward funds internally.\r\n     */\r\n    function forwardFunds() internal {\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Release locked tokens of team.\r\n     */\r\n    function releaseTeamLockedPOFI() public isOwner returns(bool){\r\n        require(block.timestamp >= lockedTime, \"Tokens are locked in the smart contract until respective release Time \");\r\n\r\n        uint256 amount = balances[address(this)];\r\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n\r\n        emit Transfer(address(this), msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Release locked tokens of Others(Dev/Audit).\r\n     */\r\n    function releaseOthersLockedPOFI() public isOwner returns(bool){\r\n        require(block.timestamp >= othersLockedTime, \"Tokens are locked in the smart contract until respective release time\");\r\n\r\n        uint256 amount = 5000000; // 5M others locked tokens which will be released after 3 months\r\n\r\n        emit Transfer(address(this), msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Release locked tokens of Marketing.\r\n     */\r\n    function releaseMarketingLockedPOFI() public isOwner returns(bool){\r\n        require(block.timestamp >= marketingLockedTime, \"Tokens are locked in the smart contract until respective release time\");\r\n\r\n        uint256 amount = 5000000; // 5M others locked tokens which will be released after 3 months\r\n\r\n        emit Transfer(address(this), msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Release locked tokens of Rewards(Staking/Liqudity incentive mining).\r\n     */\r\n    function releaseRewardsLockedPOFI() public isOwner returns(bool){\r\n        require(block.timestamp >= othersLockedTime, \"Tokens are locked in the smart contract until respective release time\");\r\n\r\n        uint256 amount = 50000000; // 50M rewards locked tokens which will be released after 3 months\r\n\r\n        emit Transfer(address(this), msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    /**\r\n     * @dev User to perform {approve} of token and {transferFrom} in one function call.\r\n     *\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `spender' must have implemented {receiveApproval} function.\r\n     */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _extraData\r\n    ) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        if(!_spender.call(\r\n            bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))),\r\n            msg.sender,\r\n            _value,\r\n            this,\r\n            _extraData\r\n        )) { revert(); }\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"othersLockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMarketingLockedPOFI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamLockedPOFI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notPausable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingLockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseOthersLockedPOFI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeTokenName\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeTokenSymbol\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"changeExchangeRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseRewardsLockedPOFI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"privatesale\",\"type\":\"address\"},{\"name\":\"presale\",\"type\":\"address\"},{\"name\":\"marketing\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"TokenNameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousSymbol\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"TokenSymbolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRate\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NotPausable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"POFI","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000adac94c99dd1bb80cc590271e49c01538dd97c23000000000000000000000000e8849e87846b1501a9c74327d0f648e9b2fce8b40000000000000000000000004228d7c73c1d7d326105abb4ce779d4584c95472","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b3a33e9c68032bf5f10efdd5f22998ac975c6854abbf981f4b7d38f722dc329e"}]}