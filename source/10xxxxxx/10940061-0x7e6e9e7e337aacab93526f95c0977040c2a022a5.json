{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'ORNG' token contract\r\n\r\n// Symbol      : ORNG\r\n// Name        : Orange Protocol\r\n// Total supply: 1,000,000,000 (1 billion)\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"ORNG\";\r\n    string public  name = \"Orange Protocol\";\r\n    uint256 public decimals = 18;\r\n    uint256 _totalSupply = 1e9 * 10 ** decimals;\r\n    bool public _openTransfer = false;\r\n    address team = 0x0d69E8cecc87906ED08020C436256F608517297C;\r\n    address nodesReward = 0x2029673627358274e79a83d7bD9c2A5A8B9C4eEb;\r\n    address rangeFoundation = 0x2eDb23b4aFa0Eb0058cfF90caCC823B11fC2865f;\r\n    \r\n    address public earlyBird;\r\n    uint256 public preSaleAllocations;\r\n    uint256 public earlyBirdAllocations;\r\n    \r\n    address uniswap = 0x2029673627358274e79a83d7bD9c2A5A8B9C4eEb;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    struct LOCKING{\r\n        uint256 lockedTokens;\r\n        uint256 cliff;\r\n        bool earlyBird;\r\n    }\r\n    mapping(address => LOCKING) public walletsLocking;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(address _earlyBird) public {\r\n        owner = 0x2029673627358274e79a83d7bD9c2A5A8B9C4eEb;\r\n        earlyBird = _earlyBird;\r\n        balances[address(this)] = totalSupply();\r\n\r\n        emit Transfer(address(0),address(this), totalSupply());\r\n\r\n        balances[address(this)] = balances[address(this)].sub(80000000 * 10 ** decimals);\r\n        balances[team] = balances[team].add(80000000 * 10 ** decimals);\r\n        emit Transfer(address(this), team, 80000000 * 10 ** decimals);\r\n\r\n        balances[address(this)] = balances[address(this)].sub(450000000 * 10 ** decimals);\r\n        balances[nodesReward] = balances[nodesReward].add(450000000 * 10 ** decimals);\r\n        emit Transfer(address(this), nodesReward, 450000000 * 10 ** decimals);\r\n\r\n        balances[address(this)] = balances[address(this)].sub(200000000 * 10 ** decimals);\r\n        balances[rangeFoundation] = balances[rangeFoundation].add(200000000 * 10 ** decimals);\r\n        emit Transfer(address(this), rangeFoundation, 200000000 * 10 ** decimals);\r\n\r\n        balances[address(this)] = balances[address(this)].sub(50000000 * 10 ** decimals);\r\n        balances[earlyBird] = balances[earlyBird].add(50000000 * 10 ** decimals);\r\n        emit Transfer(address(this), earlyBird, 50000000 * 10 ** decimals);\r\n        earlyBirdAllocations = 50000000 * 10 ** decimals;\r\n        \r\n        balances[address(this)] = balances[address(this)].sub(190000000 * 10 ** decimals);\r\n        balances[owner] = balances[owner].add(190000000 * 10 ** decimals); // for presale\r\n        emit Transfer(address(this), owner, 190000000 * 10 ** decimals);\r\n        preSaleAllocations = 190000000 * 10 ** decimals;\r\n\r\n        balances[address(this)] = balances[address(this)].sub(30000000 * 10 ** decimals);\r\n        balances[uniswap] = balances[uniswap].add(30000000 * 10 ** decimals);\r\n        emit Transfer(address(this), uniswap, 30000000 * 10 ** decimals);\r\n\r\n        _setLocking();\r\n    }\r\n    \r\n    function _setLocking() private {\r\n        walletsLocking[team].lockedTokens = 80000000 * 10 ** (decimals);\r\n        walletsLocking[team].cliff = block.timestamp.add(730 days);\r\n        walletsLocking[team].earlyBird = false;\r\n        \r\n        walletsLocking[nodesReward].lockedTokens = 450000000 * 10 ** (decimals);\r\n        walletsLocking[nodesReward].cliff = 1609459199; // 31.12.2020 11:59:59\r\n        walletsLocking[nodesReward].earlyBird = false;\r\n        \r\n        walletsLocking[rangeFoundation].lockedTokens = 166000000 * 10 ** (decimals); // 17% already released, 83% locked\r\n        walletsLocking[rangeFoundation].cliff = 1609459199; // 31.12.2020 11:59:59\r\n        walletsLocking[rangeFoundation].earlyBird = false;\r\n    }\r\n\r\n    /** ERC20Interface function's implementation **/\r\n\r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] >= tokens);\r\n        require(balances[to] + tokens >= balances[to]);\r\n        \r\n        if(walletsLocking[msg.sender].earlyBird == false){\r\n            if (walletsLocking[msg.sender].lockedTokens > 0 ){\r\n                if(block.timestamp > walletsLocking[msg.sender].cliff){\r\n                    walletsLocking[msg.sender].lockedTokens = 0;\r\n                }\r\n            }\r\n        } else{\r\n            if(_openTransfer){\r\n                walletsLocking[msg.sender].lockedTokens = 0;\r\n            } \r\n        }\r\n        \r\n        require(balances[msg.sender].sub(tokens) >= walletsLocking[msg.sender].lockedTokens, \"Please wait for tokens to be released\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        require(balances[to] + tokens >= balances[to]);\r\n        \r\n        if(walletsLocking[from].earlyBird == false){\r\n            if (walletsLocking[from].lockedTokens > 0 ){\r\n                if(block.timestamp > walletsLocking[from].cliff){\r\n                    walletsLocking[from].lockedTokens = 0;\r\n                }\r\n            }\r\n        } else{\r\n            if(_openTransfer){\r\n                walletsLocking[from].lockedTokens = 0;\r\n            } \r\n        }\r\n        \r\n        require(balances[from].sub(tokens) >= walletsLocking[from].lockedTokens, \"Please wait for tokens to be released\");\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // @dev Public function that burns an amount of the token from a given account\r\n    // @param _amount The amount that will be burnt\r\n    // @param _account The tokens to burn from\r\n    // can be used from account owner or contract owner\r\n    // ------------------------------------------------------------------------\r\n    function burnTokens(uint256 _amount, address _account) public {\r\n        require(msg.sender == _account || msg.sender == owner, \"UnAuthorized\");\r\n        require(balances[_account] >= _amount, \"Insufficient account balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        balances[_account] = balances[_account].sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n    \r\n    function setTokenLock(uint256 lockedTokens, address purchaser) public {\r\n        require(msg.sender == earlyBird, \"UnAuthorized: Only early bird contract is allowed\");\r\n        walletsLocking[purchaser].lockedTokens += lockedTokens;\r\n        walletsLocking[purchaser].earlyBird = true;\r\n    }\r\n    \r\n    function enableOpenTransfer() external onlyOwner {\r\n        _openTransfer = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earlyBird\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_openTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBird\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBirdAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOpenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"setTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletsLocking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"earlyBird\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004063a76cac006a8ee6cfec865bc507aa80421cea","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee01fb06f13bb29b5be9f1e70a5bb06eb64a4059f11f5ce4d73a08f33e49b0bf"}]}