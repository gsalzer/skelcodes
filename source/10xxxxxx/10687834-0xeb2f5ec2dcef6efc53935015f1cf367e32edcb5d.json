{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.0;\r\n\r\n// SafeMath library provided by the OpenZeppelin Group on Github\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/* ERC20 Standards followed by OpenZeppelin Group libraries on Github */\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address who) external view returns (uint256);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    \r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/* Staking process is followed according to the ERC900: Simple Staking Interface #900 issue on Github */\r\n\r\ninterface Staking {\r\n    \r\n    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    \r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n    function stake(uint256 amount, bytes memory data) external returns (bool);\r\n    \r\n    function unstake(uint256 amount, bytes memory data) external returns (bool);\r\n    \r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n    \r\n    function totalStaked() external view returns (uint256);\r\n    \r\n    function supportsHistory() external pure returns (bool);\r\n\r\n}\r\n\r\n/*PARAMORE Protocol being created with the help of the above interfaces for compatibility*/\r\n\r\ncontract PARAMORE is IERC20, Staking {\r\n    \r\n    /* Constant variables created for the ERC20 requirements*/\r\n    \r\n    string public constant name = \"PARAMORE\";\r\n    string public constant symbol = \"PARA\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    //Burn address saved as constant for future burning processes\r\n    address public constant burnaddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    mapping(address => uint256) balances; //PARA balance for all network participants\r\n    \r\n    mapping(address => uint256) stakedbalances; //PARA stake balance to lock stakes\r\n    \r\n    mapping(address => uint) staketimestamps; //PARA stake timestamp to record updates on staking for multipliers, this involves the idea that multipliers will reset upon staking\r\n\r\n    mapping(address => mapping (address => uint256)) allowed; //Approval array to record delegation of thrid-party accounts to handle transaction per allowance\r\n    \r\n    /* Total variables created to record information */\r\n    uint256 totalSupply_;\r\n    uint256 totalstaked = 0;\r\n    address theowner; //Owner address saved to recognise on future processes\r\n    \r\n    using SafeMath for uint256; //Important*** as this library provides security to handle maths without overflow attacks\r\n    \r\n    constructor() public {\r\n        totalSupply_ = 1000000000000000000000000;\r\n        balances[msg.sender] = totalSupply_;\r\n        theowner = msg.sender;\r\n        emit Transfer(msg.sender, msg.sender, totalSupply_);\r\n   } //Constructor stating the total supply as well as saving owner address and sending supply to owner address\r\n   \r\n   //Function to report on totalsupply following ERC20 Standard\r\n   function totalSupply() public override view returns (uint256) {\r\n       return totalSupply_;\r\n   }\r\n   \r\n   //Function to report on account balance following ERC20 Standard\r\n   function balanceOf(address tokenOwner) public override view returns (uint) {\r\n       return balances[tokenOwner];\r\n   }\r\n   \r\n   //Burn process is just a funtion to calculate burn amount depending on an amount of Tokens\r\n   function cutForBurn(uint256 a) public pure returns (uint256) {\r\n       uint256 c = a.div(20);\r\n       return c;\r\n   }\r\n   \r\n   //Straight forward transfer following ERC20 Standard\r\n   function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n       require(numTokens <= balances[msg.sender], 'Amount exceeds balance.');\r\n       balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n       \r\n       balances[receiver] = balances[receiver].add(numTokens);\r\n       emit Transfer(msg.sender, receiver, numTokens);\r\n       return true;\r\n   }\r\n   \r\n   //Approve function following ERC20 Standard\r\n   function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n       require(numTokens <= balances[msg.sender], 'Amount exceeds balance.');\r\n       allowed[msg.sender][delegate] = numTokens;\r\n       emit Approval(msg.sender, delegate, numTokens);\r\n       return true;\r\n   }\r\n   \r\n   //Allowance function to verify allowance allowed on delegate address following ERC20 Standard\r\n   function allowance(address owner, address delegate) public override view returns (uint) {\r\n       return allowed[owner][delegate];\r\n   }\r\n   \r\n   //The following function is added to mitigate ERC20 API: An Attack Vector on Approve/TransferFrom Methods\r\n   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n       require(addedValue <= balances[msg.sender].sub(allowed[msg.sender][spender]), 'Amount exceeds balance.');\r\n       \r\n       allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\r\n       \r\n       emit Approval(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\r\n       return true;\r\n   }\r\n   \r\n   //The following function is added to mitigate ERC20 API: An Attack Vector on Approve/TransferFrom Methods\r\n   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n       require(subtractedValue <= allowed[msg.sender][spender], 'Amount exceeds balance.');\r\n       \r\n       allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\r\n       \r\n       emit Approval(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\r\n   }\r\n   \r\n   //Transfer For function for allowed accounts to allow tranfers\r\n   function transferFrom(address owner, address buyer, uint numTokens) public override returns (bool) {\r\n       require(numTokens <= balances[owner], 'Amount exceeds balance.');\r\n       require(numTokens <= allowed[owner][msg.sender], 'Amount exceeds allowance.');\r\n       \r\n       balances[owner] = balances[owner].sub(numTokens);\r\n       allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n       balances[buyer] = balances[buyer].add(numTokens);\r\n       return true;\r\n   }\r\n   \r\n   //Staking processes\r\n   \r\n   //Stake process created updating balances, stakebalances and also recording time on process run, the process will burn 5% of the amount\r\n   function stake(uint256 amount, bytes memory data) public override returns (bool) {\r\n       require(amount <= balances[msg.sender]);\r\n       require(amount < 20, \"Amount to low to process\");\r\n       balances[msg.sender] = balances[msg.sender].sub(amount);\r\n       \r\n       uint256 burned = cutForBurn(amount);\r\n       \r\n       totalSupply_ = totalSupply_.sub(burned);\r\n       \r\n       balances[burnaddress] = balances[burnaddress].add(burned);\r\n       \r\n       stakedbalances[msg.sender] = stakedbalances[msg.sender].add(amount.sub(burned));\r\n       totalstaked = totalstaked.add(amount.sub(burned));\r\n       \r\n       staketimestamps[msg.sender] = block.timestamp;\r\n       \r\n       emit Staked(msg.sender, amount.sub(burned), stakedbalances[msg.sender], data);\r\n       emit Transfer(msg.sender, msg.sender, amount.sub(burned));\r\n       emit Transfer(msg.sender, burnaddress, burned);\r\n       return true;\r\n   }\r\n   \r\n   //This function unstakes locked in amount and burns 5%, this also updates amounts on total supply\r\n   function unstake(uint256 amount, bytes memory data) public override returns (bool) {\r\n       require(amount <= stakedbalances[msg.sender]);\r\n       require(amount <= totalstaked);\r\n       require(amount < 20, \"Amount to low to process\");\r\n       stakedbalances[msg.sender] = stakedbalances[msg.sender].sub(amount);\r\n       totalstaked = totalstaked.sub(amount);\r\n       \r\n       uint256 burned = cutForBurn(amount);\r\n       \r\n       totalSupply_ = totalSupply_.sub(burned);\r\n       \r\n       balances[burnaddress] = balances[burnaddress].add(burned);\r\n       \r\n       balances[msg.sender] = balances[msg.sender].add(amount.sub(burned));\r\n       \r\n       emit Unstaked(msg.sender, amount.sub(burned), stakedbalances[msg.sender], data);\r\n       emit Transfer(msg.sender, msg.sender, amount.sub(burned));\r\n       emit Transfer(msg.sender, burnaddress, burned);\r\n       return true;\r\n   }\r\n   \r\n   //Function to return total staked on a single address\r\n   function totalStakedFor(address addr) public override view returns (uint256) {\r\n       return stakedbalances[addr];\r\n   }\r\n   \r\n   //Function to shows timestamp on stake processes\r\n   function stakeTimestampFor(address addr) public view returns (uint256) {\r\n       return staketimestamps[addr];\r\n   }\r\n   \r\n   //Function to find out time passed since last timestamp on address\r\n   function stakeTimeFor(address addr) public view returns (uint256) {\r\n       return block.timestamp.sub(staketimestamps[addr]);\r\n   }\r\n   \r\n   //Total staked on all addresses\r\n   function totalStaked() public override view returns (uint256) {\r\n       return totalstaked;\r\n   }\r\n   \r\n   //Support History variable to show support on optional stake details\r\n   function supportsHistory() public override pure returns (bool) {\r\n       return false;\r\n   }\r\n   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"cutForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stakeTimeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stakeTimestampFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PARAMORE","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5623ba3b851de0b5d2a221443623ddcfc959d60dafc297e5c0a0d313e93e099c"}]}