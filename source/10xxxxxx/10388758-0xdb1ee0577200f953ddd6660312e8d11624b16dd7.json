{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ninterface IUniswap {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) external returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\r\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) external returns(uint);\r\n}\r\n\r\n\r\n\r\ncontract R2D2 {\r\n  address kyberAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n  address uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function runTokenKyberUniswap(uint amount, address srcTokenAddress, address dstTokenAddress) onlyOwner() external {\r\n    //Kyber srcToken => dstToken \r\n    //Uniswap dstToken => srcToken \r\n    ERC20 srcToken = ERC20(srcTokenAddress);\r\n    ERC20 dstToken = ERC20(dstTokenAddress);\r\n    srcToken.transfer(address(this), amount);\r\n\r\n    //Kyber srcToken => dstToken \r\n    IKyberNetworkProxy kyber = IKyberNetworkProxy(kyberAddress);\r\n    srcToken.approve(address(kyber), amount);\r\n    (uint rate, ) = kyber.getExpectedRate(srcToken, dstToken, amount);\r\n    kyber.swapTokenToToken(srcToken, amount, dstToken, rate);\r\n\r\n    //Uniswap dstToken => srcToken \r\n    IUniswap uniswap = IUniswap(uniswapAddress);\r\n    uint balanceDstToken = dstToken.balanceOf(address(this));\r\n    dstToken.approve(address(uniswap), balanceDstToken);\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(dstToken);\r\n    path[1] = address(srcToken);\r\n    uint[] memory minOuts = uniswap.getAmountsOut(balanceDstToken, path); \r\n    uniswap.swapExactTokensForTokens(\r\n      balanceDstToken,\r\n      minOuts[0], \r\n      path, \r\n      address(this), \r\n      now\r\n    );\r\n  }\r\n\r\n  function runTokenUniswapKyber(uint amount, address srcTokenAddress, address dstTokenAddress) onlyOwner() external {\r\n    //Kyber srcToken => dstToken \r\n    //Uniswap dstToken => srcToken \r\n    ERC20 srcToken = ERC20(srcTokenAddress);\r\n    ERC20 dstToken = ERC20(dstTokenAddress);\r\n    srcToken.transfer(address(this), amount);\r\n\r\n    //Uniswap srcToken => dstToken \r\n    IUniswap uniswap = IUniswap(uniswapAddress);\r\n    srcToken.approve(address(uniswap), amount);\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(srcToken);\r\n    path[1] = address(dstToken);\r\n    uint[] memory minOuts = uniswap.getAmountsOut(amount, path); \r\n    uniswap.swapExactTokensForTokens(\r\n      amount,\r\n      minOuts[0], \r\n      path, \r\n      address(this), \r\n      now\r\n    );\r\n\r\n    //Kyber dstToken => srcToken\r\n    IKyberNetworkProxy kyber = IKyberNetworkProxy(kyberAddress);\r\n    uint balanceDstToken = dstToken.balanceOf(address(this));\r\n    srcToken.approve(address(kyber), balanceDstToken);\r\n    (uint rate, ) = kyber.getExpectedRate(dstToken, srcToken, balanceDstToken);\r\n    kyber.swapTokenToToken(dstToken, balanceDstToken, srcToken, rate);\r\n  }\r\n\r\n  function withdrawETHAndTokens(address tokenAddress) external onlyOwner() {\r\n    msg.sender.transfer(address(this).balance);\r\n    ERC20 token = ERC20(tokenAddress);\r\n    uint256 currentTokenBalance = token.balanceOf(address(this));\r\n    token.transfer(msg.sender, currentTokenBalance);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, 'only owner');\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstTokenAddress\",\"type\":\"address\"}],\"name\":\"runTokenKyberUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstTokenAddress\",\"type\":\"address\"}],\"name\":\"runTokenUniswapKyber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawETHAndTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"R2D2","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b0f03105586d8f4938f0970a947431dc2b8a7ce53b917db6c947cf579545ef19"}]}