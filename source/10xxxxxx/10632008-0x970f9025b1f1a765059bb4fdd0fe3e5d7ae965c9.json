{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*000000000000000      0000000               0000000    00000000000000                            \r\n*000000000000000      000000000         00000000    00000000000000                     \r\n*         00000                 0000000000     000000000    000000          000\r\n*         00000                 0000000  00   00  0000000    000000          000\r\n*         00000                 0000000   00 00   0000000    000000\r\n*         00000                 0000000    000     0000000    000000\r\n*         00000                 0000000               0000000    000000          000\r\n*         00000                 0000000               0000000    000000          000\r\n*000000000000000      0000000               0000000    00000000000000\r\n*000000000000000      0000000               0000000    00000000000000\r\n*\r\n*\r\n*\r\n* INTERNATIONAL MATRIX CONTRACT\r\n* https://internationalmatrixcontract.io/\r\n* POWERFUL GLOBAL MATRIX\r\n*\r\n*\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-08-08\r\n*/\r\n\r\npragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract InternationalMatrixContract {\r\n    \r\n\r\n    //User details\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeM1Levels;\r\n        mapping(uint8 => bool) activeM2Levels;\r\n        \r\n        mapping(uint8 => M1) m1Matrix;\r\n        mapping(uint8 => M2) m2Matrix;\r\n    }\r\n    \r\n    // X3 matrix\r\n    struct M1 {\r\n        address Senior;\r\n        address[] Juniors;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n\r\n    //X4 matrix\r\n    struct M2 {\r\n        address Senior;\r\n        address[] firstLevelJuniors;\r\n        address[] secondLevelJuniors;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 10;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public userIds; \r\n\r\n    uint public lastUserId = 4;\r\n    address public owner;\r\n    \r\n    //declare prices for each levels\r\n    mapping(uint8 => uint) public levelPrice;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed Senior, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n    \r\n    constructor(address ownerAddress, address ID2, address ID3) public {\r\n        //sets first level price\r\n        levelPrice[1] = 0.02 ether;\r\n\r\n        //sets all other levels price by doubling first level prive\r\n        levelPrice[2] = 0.04 ether ;\r\n        levelPrice[3] = 0.08 ether;\r\n        levelPrice[4] = 0.1 ether;\r\n        levelPrice[5] = 0.2 ether;\r\n        levelPrice[6] = 0.3 ether;\r\n        levelPrice[7] = 0.5 ether;\r\n        levelPrice[8] = 1 ether;\r\n        levelPrice[9] = 1.5 ether;\r\n        levelPrice[10] = 2 ether;\r\n        \r\n\r\n        //sets owner address \r\n        owner = ownerAddress;\r\n        \r\n\r\n        //Declare first user from struct\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: 2\r\n        });\r\n        \r\n        User memory two = User({\r\n            id: 2,\r\n            referrer: ownerAddress,\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        User memory three = User({\r\n            id: 3,\r\n            referrer: ownerAddress,\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        // add first user to users mapping (address to User struct mapping)\r\n        users[ownerAddress] = user;\r\n        users[ID2] = two;\r\n        users[ID3] = three;\r\n\r\n        \r\n        \r\n        users[ownerAddress].m1Matrix[1].Juniors.push(ID2);\r\n        users[ownerAddress].m1Matrix[1].Juniors.push(ID3);\r\n        \r\n        users[ownerAddress].m2Matrix[1].firstLevelJuniors.push(ID2);\r\n        users[ownerAddress].m2Matrix[1].firstLevelJuniors.push(ID3);\r\n        \r\n        users[ID2].m1Matrix[1].Senior = ownerAddress;\r\n        users[ID3].m1Matrix[1].Senior = ownerAddress;\r\n\r\n        // activeX3Levels is mapping in Users struct (integer to bool)  users is mapping (address to User struct)\r\n        // activate all the levels for x3 and x4 for first user\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeM1Levels[i] = true;\r\n            users[ownerAddress].activeM2Levels[i] = true;\r\n            \r\n            users[ID2].activeM1Levels[i] = true;\r\n            users[ID2].activeM2Levels[i] = true;\r\n            \r\n            users[ID3].activeM1Levels[i] = true;\r\n            users[ID3].activeM2Levels[i] = true;\r\n        }\r\n        \r\n        // userIds is mapping from integer to address\r\n        userIds[1] = ownerAddress;\r\n        userIds[2] = ID2;\r\n        userIds[3] = ID3;\r\n    }\r\n\r\n\r\n\r\n    //registration with referral address\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n\r\n    //buy level function payament\r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        //isUserExists is function at line 407 checks if user exists\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        // levelPrice is mapping from integer(level) to integer(price) at line 51\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeM1Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].m1Matrix[level-1].blocked) {\r\n                users[msg.sender].m1Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address m1referrer = findm1referrer(msg.sender, level);\r\n            //X3 matrix is mapping from integer to X3 struct\r\n            users[msg.sender].m1Matrix[level].Senior = m1referrer;\r\n            users[msg.sender].activeM1Levels[level] = true;\r\n            updateM1referrer(msg.sender, m1referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, m1referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeM2Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].m2Matrix[level-1].blocked) {\r\n                users[msg.sender].m2Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address m2referrer = findm2referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeM2Levels[level] = true;\r\n            updateM2referrer(msg.sender, m2referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, m2referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function findm1referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            // activeM1Levels is mapping integer to bool\r\n            // if referrer is already there for User return referrer address\r\n            if (users[users[userAddress].referrer].activeM1Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            // else set userAddress as referrer address in User struct\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findm2referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeM2Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveM1Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeM1Levels[level];\r\n    }\r\n\r\n    function usersActiveM2Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeM2Levels[level];\r\n    }\r\n\r\n    function usersM1Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool, uint) {\r\n        return (users[userAddress].m1Matrix[level].Senior,\r\n                users[userAddress].m1Matrix[level].Juniors,\r\n                users[userAddress].m1Matrix[level].blocked,\r\n                users[userAddress].m1Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function usersM2Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, uint) {\r\n        return (users[userAddress].m2Matrix[level].Senior,\r\n                users[userAddress].m2Matrix[level].firstLevelJuniors,\r\n                users[userAddress].m2Matrix[level].secondLevelJuniors,\r\n                users[userAddress].m2Matrix[level].blocked,\r\n                users[userAddress].m2Matrix[level].reinvestCount);\r\n    }\r\n    \r\n    // checks if user exists from users mapping(address to User struct) and id property of User struct\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.02 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeM1Levels[1] = true; \r\n        users[userAddress].activeM2Levels[1] = true;\r\n        \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address m1referrer = findm1referrer(userAddress, 1);\r\n        users[userAddress].m1Matrix[1].Senior = m1referrer;\r\n        updateM1referrer(userAddress, m1referrer, 1);\r\n\r\n        updateM2referrer(userAddress, findm2referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n\r\n    function updateM1referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].m1Matrix[level].Juniors.push(userAddress);\r\n\r\n        if (users[referrerAddress].m1Matrix[level].Juniors.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].m1Matrix[level].Juniors.length));\r\n            //sendETHDividends is function accepts arguments (useraddress, _from , matrix, level)\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].m1Matrix[level].Juniors = new address[](0);\r\n        if (!users[referrerAddress].activeM1Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].m1Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findm1referrer(referrerAddress, level);\r\n            if (users[referrerAddress].m1Matrix[level].Senior != freeReferrerAddress) {\r\n                users[referrerAddress].m1Matrix[level].Senior = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].m1Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            updateM1referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].m1Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateM2referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeM2Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].m2Matrix[level].firstLevelJuniors.length < 2) {\r\n            users[referrerAddress].m2Matrix[level].firstLevelJuniors.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].m2Matrix[level].firstLevelJuniors.length));\r\n            \r\n            //set current level\r\n            users[userAddress].m2Matrix[level].Senior = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].m2Matrix[level].Senior;            \r\n            users[ref].m2Matrix[level].secondLevelJuniors.push(userAddress); \r\n            \r\n            uint len = users[ref].m2Matrix[level].firstLevelJuniors.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].m2Matrix[level].firstLevelJuniors[0] == referrerAddress) &&\r\n                (users[ref].m2Matrix[level].firstLevelJuniors[1] == referrerAddress)) {\r\n                if (users[referrerAddress].m2Matrix[level].firstLevelJuniors.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].m2Matrix[level].firstLevelJuniors[0] == referrerAddress) {\r\n                if (users[referrerAddress].m2Matrix[level].firstLevelJuniors.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].m2Matrix[level].firstLevelJuniors[1] == referrerAddress) {\r\n                if (users[referrerAddress].m2Matrix[level].firstLevelJuniors.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateM2referrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].m2Matrix[level].secondLevelJuniors.push(userAddress);\r\n\r\n        if (users[referrerAddress].m2Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].m2Matrix[level].firstLevelJuniors[0] == \r\n                users[referrerAddress].m2Matrix[level].firstLevelJuniors[1]) &&\r\n                (users[referrerAddress].m2Matrix[level].firstLevelJuniors[0] ==\r\n                users[referrerAddress].m2Matrix[level].closedPart)) {\r\n\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].m2Matrix[level].firstLevelJuniors[0] == \r\n                users[referrerAddress].m2Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].m2Matrix[level].firstLevelJuniors[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].m2Matrix[level].firstLevelJuniors[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[0]].m2Matrix[level].firstLevelJuniors.length <= \r\n            users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[1]].m2Matrix[level].firstLevelJuniors.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateM2referrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[0]].m2Matrix[level].firstLevelJuniors.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].m2Matrix[level].firstLevelJuniors[0], 2, level, uint8(users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[0]].m2Matrix[level].firstLevelJuniors.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[0]].m2Matrix[level].firstLevelJuniors.length));\r\n            //set current level\r\n            users[userAddress].m2Matrix[level].Senior = users[referrerAddress].m2Matrix[level].firstLevelJuniors[0];\r\n        } else {\r\n            users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[1]].m2Matrix[level].firstLevelJuniors.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].m2Matrix[level].firstLevelJuniors[1], 2, level, uint8(users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[1]].m2Matrix[level].firstLevelJuniors.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].m2Matrix[level].firstLevelJuniors[1]].m2Matrix[level].firstLevelJuniors.length));\r\n            //set current level\r\n            users[userAddress].m2Matrix[level].Senior = users[referrerAddress].m2Matrix[level].firstLevelJuniors[1];\r\n        }\r\n    }\r\n    \r\n    function updateM2referrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].m2Matrix[level].secondLevelJuniors.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].m2Matrix[level].Senior].m2Matrix[level].firstLevelJuniors;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].m2Matrix[level].Senior].m2Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].m2Matrix[level].Senior].m2Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].m2Matrix[level].firstLevelJuniors = new address[](0);\r\n        users[referrerAddress].m2Matrix[level].secondLevelJuniors = new address[](0);\r\n        users[referrerAddress].m2Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeM2Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].m2Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].m2Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findm2referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateM2referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].m1Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].m1Matrix[level].Senior;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].m2Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].m2Matrix[level].Senior;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ID2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ID3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Senior\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findm1referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findm2referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveM1Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveM2Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersM1Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersM2Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InternationalMatrixContract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008c8764e1d114c255af096f95fa7c317f22fa5597000000000000000000000000c1fac27cbb6ad52a34151ae5450b46ad7f6c20d1000000000000000000000000b4dc79eff1fa87d77b704b59ea9a5ed3f4679f11","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c59a50a1f5f8e60f118d5dd1a9507bcb1aa51b562439a348a933b70a5d706d42"}]}