{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IMakerPriceFeed {\r\n  function read() external view returns (bytes32);\r\n}\r\n\r\ncontract EtherPrice {\r\n    \r\n    uint[22] public levelPrice;\r\n    uint public regAmount;\r\n    uint public ethPrice;\r\n    \r\n    function updateEtherPrices() public{\r\n        \r\n        ethPrice=getETHUSDPrice();\r\n        \r\n        regAmount=0.1 ether;\r\n        levelPrice[1] = SafeMath.div(uint(5 *  10000000000000000000000),ethPrice);\r\n        levelPrice[2] = SafeMath.div(uint(10 * 10000000000000000000000),ethPrice);\r\n        levelPrice[3] = SafeMath.div(uint(20 * 10000000000000000000000),ethPrice);\r\n        levelPrice[4] = SafeMath.div(uint(30 * 10000000000000000000000),ethPrice);\r\n        levelPrice[5] = SafeMath.div(uint(40 * 10000000000000000000000),ethPrice);\r\n        levelPrice[6] = SafeMath.div(uint(50 * 10000000000000000000000),ethPrice);\r\n        levelPrice[7] = SafeMath.div(uint(75 * 10000000000000000000000),ethPrice);\r\n        levelPrice[8] = SafeMath.div(uint(100 * 10000000000000000000000),ethPrice);\r\n        levelPrice[9] = SafeMath.div(uint(125 * 10000000000000000000000),ethPrice);\r\n        levelPrice[10] = SafeMath.div(uint(150* 10000000000000000000000),ethPrice);\r\n        levelPrice[11] = SafeMath.div(uint(200* 10000000000000000000000),ethPrice);\r\n        levelPrice[12] = SafeMath.div(uint(250* 10000000000000000000000),ethPrice);\r\n        levelPrice[13] = SafeMath.div(uint(300* 10000000000000000000000),ethPrice);\r\n        levelPrice[14] = SafeMath.div(uint(400* 10000000000000000000000),ethPrice);\r\n        levelPrice[15] = SafeMath.div(uint(500* 10000000000000000000000),ethPrice);\r\n        levelPrice[16] = SafeMath.div(uint(750* 10000000000000000000000),ethPrice);\r\n        levelPrice[17] = SafeMath.div(uint(1000*10000000000000000000000),ethPrice);\r\n        levelPrice[18] = SafeMath.div(uint(1250*10000000000000000000000),ethPrice);\r\n        levelPrice[19] = SafeMath.div(uint(1500*10000000000000000000000),ethPrice);\r\n        levelPrice[20] = SafeMath.div(uint(2000*10000000000000000000000),ethPrice);\r\n        levelPrice[21] = SafeMath.div(uint(3000*10000000000000000000000),ethPrice);\r\n    }\r\n    \r\n  function getETHUSDPrice() public view returns (uint) {\r\n    address ethUsdPriceFeed = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n    return uint(\r\n      IMakerPriceFeed(ethUsdPriceFeed).read()\r\n    );\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"updateEtherPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHUSDPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherPrice","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://acda766bd7fa9d5bc6dc0977d8933adcc55153b9d46a70dbe746e65b07d0ae06"}]}