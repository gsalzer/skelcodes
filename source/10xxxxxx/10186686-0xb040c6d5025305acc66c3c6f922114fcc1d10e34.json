{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/pricing/PricingStrategy.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/// @title PricingStrategy\r\n/// @author Applicature\r\n/// @notice Contract is responsible for calculating tokens amount depending on different criterias\r\n/// @dev Base class\r\ncontract PricingStrategy {\r\n\r\n    function isInitialized() public view returns (bool);\r\n\r\n    function getCurrencyAmount(uint256 _weiAmount)\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTokens(\r\n        address _contributor,\r\n        uint256 _tokensAvailable, uint256 _tokensSold,\r\n        uint256 _weiAmount, uint256 _collectedWei\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens,\r\n            uint256 tokensExludingBonus,\r\n            uint256 bonus\r\n        );\r\n\r\n    function getWeis(\r\n        uint256 _collectedWei,\r\n        uint256 _tokensSold,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 weiAmount,\r\n            uint256 tokensBonus\r\n        );\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/managment/Constants.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract Constants {\r\n    // Permissions bit constants\r\n    uint256 public constant CAN_MINT_TOKENS = 0;\r\n    uint256 public constant CAN_BURN_TOKENS = 1;\r\n    uint256 public constant CAN_UPDATE_STATE = 2;\r\n    uint256 public constant CAN_LOCK_TOKENS = 3;\r\n    uint256 public constant CAN_UPDATE_PRICE = 4;\r\n    uint256 public constant CAN_INTERACT_WITH_ALLOCATOR = 5;\r\n    uint256 public constant CAN_SET_ALLOCATOR_MAX_SUPPLY = 6;\r\n    uint256 public constant CAN_PAUSE_TOKENS = 7;\r\n    uint256 public constant ECLIUDED_ADDRESSES = 8;\r\n    uint256 public constant WHITELISTED = 9;\r\n    uint256 public constant SIGNERS = 10;\r\n    uint256 public constant EXTERNAL_CONTRIBUTORS = 11;\r\n    uint256 public constant CAN_SEE_BALANCE = 12;\r\n    uint256 public constant CAN_CANCEL_TRANSACTION = 13;\r\n    uint256 public constant CAN_ALLOCATE_REFERRAL_TOKENS = 14;\r\n    uint256 public constant CAN_SET_REFERRAL_MAX_SUPPLY = 15;\r\n    uint256 public constant MANUAL_TOKENS_ALLOCATION = 16;\r\n    uint256 public constant CAN_SET_WHITELISTED = 17;\r\n\r\n    // Contract Registry keys\r\n    uint256 public constant CONTRACT_TOKEN = 1;\r\n    uint256 public constant CONTRACT_PRICING = 2;\r\n    uint256 public constant CONTRACT_CROWDSALE = 3;\r\n    uint256 public constant CONTRACT_ALLOCATOR = 4;\r\n    uint256 public constant CONTRACT_AGENT = 5;\r\n    uint256 public constant CONTRACT_FORWARDER = 6;\r\n    uint256 public constant CONTRACT_REFERRAL = 7;\r\n    uint256 public constant CONTRACT_STATS = 8;\r\n    uint256 public constant CONTRACT_LOCKUP = 9;\r\n\r\n    uint256 public constant YEAR_IN_SECONDS = 31556952;\r\n    uint256 public constant SIX_MONTHS =  15778476;\r\n    uint256 public constant MONTH_IN_SECONDS = 2629746;\r\n\r\n    string public constant ERROR_ACCESS_DENIED = \"ERROR_ACCESS_DENIED\";\r\n    string public constant ERROR_WRONG_AMOUNT = \"ERROR_WRONG_AMOUNT\";\r\n    string public constant ERROR_NO_CONTRACT = \"ERROR_NO_CONTRACT\";\r\n    string public constant ERROR_NOT_AVAILABLE = \"ERROR_NOT_AVAILABLE\";\r\n}\r\n\r\n// File: contracts/managment/Management.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract Management is Ownable, Constants {\r\n\r\n    // Contract Registry\r\n    mapping (uint256 => address payable) public contractRegistry;\r\n\r\n    // Permissions\r\n    mapping (address => mapping(uint256 => bool)) public permissions;\r\n\r\n    event PermissionsSet(\r\n        address subject, \r\n        uint256 permission, \r\n        bool value\r\n    );\r\n\r\n    event ContractRegistered(\r\n        uint256 key,\r\n        address source,\r\n        address target\r\n    );\r\n\r\n    function setPermission(\r\n        address _address, \r\n        uint256 _permission, \r\n        bool _value\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        permissions[_address][_permission] = _value;\r\n        emit PermissionsSet(_address, _permission, _value);\r\n    }\r\n\r\n    function registerContract(\r\n        uint256 _key, \r\n        address payable _target\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        contractRegistry[_key] = _target;\r\n        emit ContractRegistered(_key, address(0), _target);\r\n    }\r\n\r\n    function setWhitelisted(\r\n        address _address,\r\n        bool _value\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            permissions[msg.sender][CAN_SET_WHITELISTED] == true,\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n\r\n        permissions[_address][WHITELISTED] = _value;\r\n\r\n        emit PermissionsSet(_address, WHITELISTED, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/managment/Managed.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Managed is Ownable, Constants {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Management public management;\r\n\r\n    modifier requirePermission(uint256 _permissionBit) {\r\n        require(\r\n            hasPermission(msg.sender, _permissionBit),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canCallOnlyRegisteredContract(uint256 _key) {\r\n        require(\r\n            msg.sender == management.contractRegistry(_key),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requireContractExistsInRegistry(uint256 _key) {\r\n        require(\r\n            management.contractRegistry(_key) != address(0),\r\n            ERROR_NO_CONTRACT\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _managementAddress) public {\r\n        management = Management(_managementAddress);\r\n    }\r\n\r\n    function setManagementContract(address _management) public onlyOwner {\r\n        require(address(0) != _management, ERROR_NO_CONTRACT);\r\n\r\n        management = Management(_management);\r\n    }\r\n\r\n    function hasPermission(address _subject, uint256 _permissionBit)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return management.permissions(_subject, _permissionBit);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/pricing/ExchangeContract.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract ExchangeContract is Managed {\r\n\r\n    uint256 public etherPriceInCurrency;\r\n    uint256 public currencyDecimals;\r\n    uint256 public priceUpdateAt;\r\n\r\n    event NewPriceTicker(string _price);\r\n\r\n    constructor(\r\n        address _management,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256 _currencyDecimals\r\n    )\r\n        public\r\n        Managed(_management)\r\n    {\r\n        require(_etherPriceInCurrency > 0, ERROR_WRONG_AMOUNT);\r\n        require(_currencyDecimals > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        etherPriceInCurrency = _etherPriceInCurrency;\r\n        currencyDecimals = _currencyDecimals;\r\n        priceUpdateAt = block.timestamp;\r\n    }\r\n\r\n    function setEtherInCurrency(string memory _price)\r\n        public\r\n        requirePermission(CAN_UPDATE_PRICE)\r\n    {\r\n        bytes memory bytePrice = bytes(_price);\r\n        uint256 dot = bytePrice.length.sub(uint256(currencyDecimals).add(1));\r\n\r\n        require(0x2e == uint(uint8(bytePrice[dot])), ERROR_WRONG_AMOUNT);\r\n\r\n        etherPriceInCurrency = parseInt(_price, currencyDecimals);\r\n\r\n        require(etherPriceInCurrency > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        priceUpdateAt = block.timestamp;\r\n\r\n        emit NewPriceTicker(_price);\r\n    }\r\n\r\n    function parseInt(\r\n        string memory _a,\r\n        uint _b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint(uint8(bresult[i])) >= 48) &&\r\n                (uint(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint(uint8(bresult[i])) - 48;\r\n            } else if (uint(uint8(bresult[i])) == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        if (_b > 0) {\r\n            mint *= 10 ** _b;\r\n        }\r\n        return mint;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/pricing/PricingStrategyImpl.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PricingStrategy\r\n * @author Applicature\r\n * @notice Contract is responsible for calculating tokens amount depending on price in USD\r\n * @dev implementation\r\n */\r\ncontract PricingStrategyImpl is PricingStrategy, ExchangeContract {\r\n\r\n    uint256 public constant TIER_ELEMENTS_AMOUNT = 9;\r\n\r\n    struct Tier {\r\n        uint256 tokenInCurrency;\r\n        uint256 maxTokensCollected;\r\n        uint256 bonusCap;\r\n        uint256 discountPercents;\r\n        uint256 bonusPercents;\r\n        uint256 minInvestInCurrency;\r\n        uint256 maxInvestInCurrency;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n\r\n    Tier[] public tiers;\r\n    uint256 public tokenDecimals;\r\n    uint256 public percentageAbsMax;\r\n    bool tiersChangingAllowed;\r\n    bool updateChangeRateAllowed;\r\n\r\n    constructor(\r\n        address _management,\r\n        bool _tiersChangingAllowed,\r\n        bool _updateChangeRateAllowed,\r\n        uint256[] memory _tiers,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256 _currencyDecimals,\r\n        uint256 _tokenDecimals,\r\n        uint256 _percentageAbsMax\r\n    )\r\n        public\r\n        ExchangeContract(_management, _etherPriceInCurrency, _currencyDecimals)\r\n    {\r\n        require(_tiers.length % TIER_ELEMENTS_AMOUNT == 0, ERROR_WRONG_AMOUNT);\r\n        require(_tokenDecimals > 0, ERROR_WRONG_AMOUNT);\r\n        require(_percentageAbsMax > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        tokenDecimals = _tokenDecimals;\r\n        percentageAbsMax = _percentageAbsMax;\r\n        tiersChangingAllowed = _tiersChangingAllowed;\r\n        updateChangeRateAllowed = _updateChangeRateAllowed;\r\n\r\n        uint256 length = _tiers.length.div(TIER_ELEMENTS_AMOUNT);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(1)] > 0 &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(3)] < _percentageAbsMax &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(4)] < _percentageAbsMax &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)] > 0 &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(8)] > _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)],\r\n                ERROR_WRONG_AMOUNT\r\n            );\r\n            require (\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)] == 0 ||\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)] >= _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(5)],\r\n                ERROR_WRONG_AMOUNT\r\n            );\r\n            tiers.push(\r\n                Tier(\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT)],//tokenInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(1)],//maxTokensCollected\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(2)],//bonusCap\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(3)],//discountPercents\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(4)],//bonusPercents\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(5)],//minInvestInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)],//maxInvestInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)],//startTime\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(8)]//endTime\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function updateDates(\r\n        uint8 _tierId,\r\n        uint256 _start,\r\n        uint256 _end\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require (\r\n            _start != 0 &&\r\n            _start < _end &&\r\n            _tierId < tiers.length,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        Tier storage tier = tiers[_tierId];\r\n        tier.startTime = _start;\r\n        tier.endTime = _end;\r\n    }\r\n\r\n    function updateTier(\r\n        uint256 _tierId,\r\n        uint256 _tokenInCurrency,\r\n        uint256 _maxTokensCollected,\r\n        uint256 _bonusCap,\r\n        uint256 _discountPercents,\r\n        uint256 _bonusPercents,\r\n        uint256 _minInvestInCurrency,\r\n        uint256 _maxInvestInCurrency,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            tiersChangingAllowed == true &&\r\n            _maxTokensCollected >= _bonusCap &&\r\n            _discountPercents < percentageAbsMax &&\r\n            _bonusPercents < percentageAbsMax &&\r\n            (_maxInvestInCurrency == 0 || _maxInvestInCurrency >= _minInvestInCurrency) &&\r\n            _startTime != 0 &&\r\n            _startTime < _endTime &&\r\n            _tierId < tiers.length,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n\r\n        Tier storage tier = tiers[_tierId];\r\n        tier.tokenInCurrency = _tokenInCurrency;\r\n        tier.maxTokensCollected = _maxTokensCollected;\r\n        tier.bonusCap = _bonusCap;\r\n        tier.discountPercents = _discountPercents;\r\n        tier.bonusPercents = _bonusPercents;\r\n        tier.minInvestInCurrency = _minInvestInCurrency;\r\n        tier.maxInvestInCurrency = _maxInvestInCurrency;\r\n        tier.startTime = _startTime;\r\n        tier.endTime = _endTime;\r\n    }\r\n\r\n    function setEtherInCurrency(string memory _price)\r\n        public\r\n        requirePermission(CAN_UPDATE_PRICE)\r\n    {\r\n        require(updateChangeRateAllowed == true, ERROR_NOT_AVAILABLE);\r\n        super.setEtherInCurrency(_price);\r\n    }\r\n\r\n    function isInitialized() \r\n        public \r\n        view \r\n        returns (bool) \r\n    {\r\n        return tiers.length > 0;\r\n    }\r\n\r\n    function getArrayOfTiers() \r\n        public \r\n        view \r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory tiersData = new uint256[](\r\n            getTiersAmount().mul(TIER_ELEMENTS_AMOUNT)\r\n        );\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tiersData[j++] = uint256(tiers[i].tokenInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].maxTokensCollected);\r\n            tiersData[j++] = uint256(tiers[i].bonusCap);\r\n            tiersData[j++] = uint256(tiers[i].discountPercents);\r\n            tiersData[j++] = uint256(tiers[i].bonusPercents);\r\n            tiersData[j++] = uint256(tiers[i].minInvestInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].maxInvestInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].startTime);\r\n            tiersData[j++] = uint256(tiers[i].endTime);\r\n        }\r\n\r\n        return tiersData;\r\n    }\r\n\r\n    function getTiersAmount()\r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return tiers.length;\r\n    }\r\n\r\n    function getTierIndex(uint256 _tokensSold) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            if (\r\n                block.timestamp >= tiers[i].startTime &&\r\n                block.timestamp < tiers[i].endTime &&\r\n                tiers[i].maxTokensCollected > _tokensSold\r\n            ) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return tiers.length;\r\n    }\r\n\r\n    function getActualTierIndex(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            if (\r\n                block.timestamp >= tiers[i].startTime &&\r\n                block.timestamp < tiers[i].endTime &&\r\n                tiers[i].maxTokensCollected > _tokensSold ||\r\n                block.timestamp < tiers[i].startTime\r\n            ) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return tiers.length.sub(1);\r\n    }\r\n\r\n    function getTierActualDates(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256 startTime, uint256 endTime)\r\n    {\r\n        uint256 tierIndex = getActualTierIndex(_tokensSold);\r\n        startTime = tiers[tierIndex].startTime;\r\n        endTime = tiers[tierIndex].endTime;\r\n    }\r\n\r\n    function getCurrencyAmount(uint256 _weiAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _weiAmount.mul(etherPriceInCurrency).div(1 ether);\r\n    }\r\n\r\n    function getTokenInCurrency(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_tierIndex < tiers.length) {\r\n            if (getDiscount(_tierIndex) > 0) {\r\n\r\n                return tiers[_tierIndex].tokenInCurrency.mul(\r\n                    percentageAbsMax.sub(getDiscount(_tierIndex))\r\n                ).div(percentageAbsMax);\r\n            }\r\n\r\n            return tiers[_tierIndex].tokenInCurrency;\r\n        }\r\n    }\r\n\r\n    function calculateTokensByCurrency(\r\n        uint256 _tierIndex,\r\n        uint256 _currencyAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currencyAmount.mul(uint256(10) ** tokenDecimals)\r\n            .div(getTokenInCurrency(_tierIndex));\r\n    }\r\n\r\n    function calculateCurrencyByTokens(\r\n        uint256 _tierIndex,\r\n        uint256 _tokenAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _tokenAmount.mul(getTokenInCurrency(_tierIndex))\r\n            .div(uint256(10) ** tokenDecimals);\r\n    }\r\n\r\n    function getDiscount(uint256 _tierIndex) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        if (_tierIndex < uint256(tiers.length)) {\r\n            return tiers[_tierIndex].discountPercents;\r\n        }\r\n    }\r\n\r\n    function getMinEtherInvest(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            _tierIndex < uint256(tiers.length) && \r\n            tiers[_tierIndex].minInvestInCurrency > 0\r\n        ) {\r\n            return tiers[_tierIndex].minInvestInCurrency\r\n                .mul(1 ether)\r\n                .div(etherPriceInCurrency);\r\n        }\r\n    }\r\n\r\n    function getMaxEtherInvest(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            _tierIndex < uint256(tiers.length) && \r\n            tiers[_tierIndex].maxInvestInCurrency > 0\r\n        ) {\r\n            return tiers[_tierIndex].maxInvestInCurrency\r\n                .mul(1 ether)\r\n                .div(etherPriceInCurrency);\r\n        }\r\n    }\r\n\r\n    function getRemainingTokens(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return tiers[tiers.length.sub(1)]\r\n            .maxTokensCollected\r\n            .sub(_tokensSold);\r\n    }\r\n\r\n    function getTierUnsoldTokens(uint256 _tokensSold) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {   \r\n        return tiers[getActualTierIndex(_tokensSold)]\r\n            .maxTokensCollected\r\n            .sub(_tokensSold);\r\n    }\r\n\r\n    function calculateBonusAmount(\r\n        uint256 _tierIndex, \r\n        uint256 _tokens, \r\n        uint256 _bonusProduced\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_bonusProduced.add(_tokens) <= tiers[_tierIndex].bonusCap) {\r\n            return _tokens\r\n                .mul(tiers[_tierIndex].bonusPercents)\r\n                .div(percentageAbsMax);\r\n        }\r\n\r\n        return tiers[_tierIndex]\r\n            .bonusCap\r\n            .sub(_bonusProduced)\r\n            .mul(tiers[_tierIndex].bonusPercents)\r\n            .div(percentageAbsMax);\r\n    }\r\n\r\n    function getTokensWithoutRestrictions(\r\n        uint256 _currencyAmount,\r\n        uint256 _tokensSold\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens, \r\n            uint256 tokensExcludingBonus, \r\n            uint256 bonus\r\n        )\r\n    {\r\n        if (_currencyAmount == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getActualTierIndex(_tokensSold);\r\n\r\n        tokensExcludingBonus = calculateTokensByCurrency(\r\n            tierIndex,\r\n            _currencyAmount\r\n        );\r\n        bonus = tokensExcludingBonus\r\n            .mul(tiers[tierIndex].bonusPercents)\r\n            .div(percentageAbsMax);\r\n        tokens = tokensExcludingBonus.add(bonus);\r\n    }\r\n\r\n    function getTokens(\r\n        address,\r\n        uint256 _tokensAvailable,\r\n        uint256 _tokensSold,\r\n        uint256 _currencyAmount,\r\n        uint256 _bonusProduced\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens,\r\n            uint256 tokensExcludingBonus,\r\n            uint256 bonus\r\n        )\r\n    {\r\n        if (_currencyAmount == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getTierIndex(_tokensSold);\r\n        if (tierIndex == tiers.length) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        if (\r\n            _currencyAmount < tiers[tierIndex].minInvestInCurrency ||\r\n            tiers[tierIndex].maxInvestInCurrency > 0 &&\r\n            _currencyAmount > tiers[tierIndex].maxInvestInCurrency\r\n        ) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 remainingCurrencyAmount = _currencyAmount;\r\n        uint256 newTokensSold = _tokensSold;\r\n        uint256 tierTokens;\r\n        uint256 diff;\r\n\r\n        for (uint256 i = tierIndex; i < tiers.length; i++) {\r\n            tierTokens = calculateTokensByCurrency(i, remainingCurrencyAmount);\r\n\r\n            if (\r\n                tiers[i].startTime < block.timestamp &&\r\n                tiers[i].endTime > block.timestamp\r\n            ) {\r\n                if (newTokensSold.add(tierTokens) > tiers[i].maxTokensCollected) {\r\n                    diff = tiers[i].maxTokensCollected.sub(newTokensSold);\r\n                    remainingCurrencyAmount = remainingCurrencyAmount.sub(\r\n                        calculateCurrencyByTokens(i, diff)\r\n                    );\r\n                } else {\r\n                    diff = tierTokens;\r\n                    remainingCurrencyAmount = 0;\r\n                }\r\n\r\n                tokensExcludingBonus = tokensExcludingBonus.add(diff);\r\n                bonus = bonus.add(calculateBonusAmount(i, diff, _bonusProduced));\r\n\r\n                if (remainingCurrencyAmount == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        tokens = tokens.add(tokensExcludingBonus.add(bonus));\r\n\r\n        if (remainingCurrencyAmount > 0 || tokens > _tokensAvailable) {\r\n            return (0, 0, 0);\r\n        }\r\n    }\r\n\r\n    function getWeis(\r\n        uint256 _bonusProduced,\r\n        uint256 _tokensSold,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalWeiAmount, \r\n            uint256 tokensBonus\r\n        )\r\n    {\r\n        if (_tokens == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getTierIndex(_tokensSold);\r\n        if (tierIndex == tiers.length) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 remainingTokens = _tokens;\r\n        uint256 newTokensSold = _tokensSold;\r\n        uint256 diff;\r\n\r\n        for (uint i = tierIndex; i < tiers.length; i++) {\r\n            if (\r\n                tiers[i].startTime < block.timestamp &&\r\n                tiers[i].endTime > block.timestamp\r\n            ) {\r\n                if (\r\n                    newTokensSold.add(remainingTokens) > \r\n                    tiers[i].maxTokensCollected\r\n                ) {\r\n                    diff = tiers[i].maxTokensCollected.sub(newTokensSold);\r\n                    remainingTokens = remainingTokens.sub(diff);\r\n                } else {\r\n                    diff = remainingTokens;\r\n                    remainingTokens = 0;\r\n                }\r\n\r\n                totalWeiAmount = totalWeiAmount.add(\r\n                    calculateCurrencyByTokens(i, diff).mul(1 ether).div(etherPriceInCurrency)\r\n                );\r\n                tokensBonus = tokensBonus\r\n                    .add(calculateBonusAmount(i, diff, _bonusProduced));\r\n\r\n                if (remainingTokens == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 currencyAmount = getCurrencyAmount(totalWeiAmount);\r\n        if (\r\n            currencyAmount < tiers[tierIndex].minInvestInCurrency ||\r\n            tiers[tierIndex].maxInvestInCurrency > 0 &&\r\n            currencyAmount > tiers[tierIndex].maxInvestInCurrency\r\n        ) {\r\n            return (0, 0);\r\n        }\r\n\r\n        if (remainingTokens > 0) {\r\n            return (0, 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/CLIPricingStrategy.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract CLIPricingStrategy is PricingStrategyImpl {\r\n\r\n    constructor(\r\n        address _management,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256[] memory _tiers\r\n    ) public PricingStrategyImpl(\r\n        _management,\r\n        true,\r\n        true,\r\n        _tiers,\r\n        _etherPriceInCurrency,\r\n        5,  // main currency decimals - 1$ = 100000\r\n        18, // token decimals\r\n        100 // absolute percent amount  - 100%\r\n    ) {\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_etherPriceInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"NewPriceTicker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ALLOCATE_REFERRAL_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_BURN_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_CANCEL_TRANSACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_INTERACT_WITH_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_LOCK_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_MINT_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_PAUSE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_ALLOCATOR_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_REFERRAL_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_STATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_AGENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CROWDSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FORWARDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_PRICING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_STATS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECLIUDED_ADDRESSES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_ACCESS_DENIED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_AVAILABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NO_CONTRACT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_WRONG_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_CONTRIBUTORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANUAL_TOKENS_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER_ELEMENTS_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusProduced\",\"type\":\"uint256\"}],\"name\":\"calculateBonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateCurrencyByTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokensByCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getActualTierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArrayOfTiers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getCurrencyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"getMaxEtherInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"getMinEtherInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getTierActualDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getTierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getTierUnsoldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTiersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenInCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusProduced\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensExcludingBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getTokensWithoutRestrictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensExcludingBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusProduced\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getWeis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWeiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract Management\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageAbsMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUpdateAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"setEtherInCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInvestInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tierId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"updateDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInvestInCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CLIPricingStrategy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005475379562cff40032733220128e8d58a917e0580000000000000000000000000000000000000000000000000000000001805a88000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000108b2a2c2802909400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ed64fce000000000000000000000000000000000000000000000000000000005fc7127a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://43101ae7d9cf646007b6b7ad4bb9470433cb0312be8cfbab278345dacd40498e"}]}