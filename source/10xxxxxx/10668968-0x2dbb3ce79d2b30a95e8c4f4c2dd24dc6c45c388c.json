{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract WhitelistAdminRole is Context {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(_msgSender());\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(_msgSender());\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\ncontract WhitelistedRole is Context, WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(_msgSender());\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\nlibrary MarketStateLib {\n    using SafeMath for uint256;\n\n    // Multiply by this to convert a number into a percentage.\n    uint256 private constant TO_PERCENTAGE = 10000;\n\n    struct MarketState {\n        uint256 totalSupplied;\n        uint256 totalRepaid;\n        uint256 totalBorrowed;\n    }\n\n    /**\n        @notice It increases the repayment amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseRepayment(MarketState storage self, uint256 amount) internal {\n        self.totalRepaid = self.totalRepaid.add(amount);\n    }\n\n    /**\n        @notice It increases the supply amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseSupply(MarketState storage self, uint256 amount) internal {\n        self.totalSupplied = self.totalSupplied.add(amount);\n    }\n\n    /**\n        @notice It decreases the supply amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function decreaseSupply(MarketState storage self, uint256 amount) internal {\n        self.totalSupplied = self.totalSupplied.sub(amount);\n    }\n\n    /**\n        @notice It increases the borrowed amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseBorrow(MarketState storage self, uint256 amount) internal {\n        self.totalBorrowed = self.totalBorrowed.add(amount);\n    }\n\n    /**\n        @notice It gets the current supply-to-debt (StD) ratio for a given market.\n        @notice The formula to calculate StD ratio is:\n            \n            StD = (SUM(total borrowed) - SUM(total repaid)) / SUM(total supplied)\n\n        @notice The value has 2 decimal places.\n            Example:\n                100 => 1%\n        @param self the current market state reference.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebt(MarketState storage self) internal view returns (uint256) {\n        if (self.totalSupplied == 0) {\n            return 0;\n        }\n        return\n            self.totalBorrowed.sub(self.totalRepaid).mul(TO_PERCENTAGE).div(\n                self.totalSupplied\n            );\n    }\n\n    /**\n        @notice It gets the supply-to-debt (StD) ratio for a given market, including a new loan amount.\n        @notice The formula to calculate StD ratio (including a new loan amount) is:\n            \n            StD = (SUM(total borrowed) - SUM(total repaid) + NewLoanAmount) / SUM(total supplied)\n\n        @param self the current market state reference.\n        @param loanAmount a new loan amount to consider in the ratio.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebtFor(MarketState storage self, uint256 loanAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        if (self.totalSupplied == 0) {\n            return 0;\n        }\n        return\n            self\n                .totalBorrowed\n                .sub(self.totalRepaid)\n                .add(loanAmount)\n                .mul(TO_PERCENTAGE)\n                .div(self.totalSupplied);\n    }\n}\n\ninterface MarketsStateInterface {\n    /**\n        @notice It increases the repayment amount for a given market.\n        @notice This function is called every new repayment is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseRepayment(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It increases the supply amount for a given market.\n        @notice This function is called every new deposit (Lenders) is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It decreases the supply amount for a given market.\n        @notice This function is called every new withdraw (Lenders) is done.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to decrease.\n     */\n    function decreaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It increases the borrowed amount for a given market.\n        @notice This function is called every new loan is taken out.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseBorrow(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It gets the current supply-to-debt (StD) ratio for a given market.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebt(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (uint256);\n\n    /**\n        @notice It gets the supply-to-debt (StD) ratio for a given market, including a new loan amount.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param loanAmount a new loan amount to consider in the ratio.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebtFor(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 loanAmount\n    ) external view returns (uint256);\n\n    /**\n        @notice It gets the current market state.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the current market state.\n     */\n    function getMarket(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (MarketStateLib.MarketState memory);\n}\n\ncontract MarketsState is MarketsStateInterface, WhitelistedRole {\n    using SafeMath for uint256;\n    using MarketStateLib for MarketStateLib.MarketState;\n\n    /** Constants */\n\n    /* State Variables */\n\n    /**\n        @notice It maps a lent token => collateral token => Market state.\n        Example:\n            address(DAI) => address(LINK) => MarketState\n            address(DAI) => address(ETH) => MarketState\n     */\n    mapping(address => mapping(address => MarketStateLib.MarketState)) public markets;\n\n    /**\n        @notice It increases the repayment amount for a given market.\n        @notice This function is called every new repayment is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseRepayment(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external onlyWhitelisted() {\n        markets[borrowedAsset][collateralAsset].increaseRepayment(amount);\n    }\n\n    /**\n        @notice It increases the supply amount for a given market.\n        @notice This function is called every new deposit (Lenders) is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external onlyWhitelisted() {\n        markets[borrowedAsset][collateralAsset].increaseSupply(amount);\n    }\n\n    /**\n        @notice It decreases the supply amount for a given market.\n        @notice This function is called every new withdraw (Lenders) is done.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to decrease.\n     */\n    function decreaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external onlyWhitelisted() {\n        markets[borrowedAsset][collateralAsset].decreaseSupply(amount);\n    }\n\n    /**\n        @notice It increases the borrowed amount for a given market.\n        @notice This function is called every new loan is taken out\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseBorrow(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external onlyWhitelisted() {\n        markets[borrowedAsset][collateralAsset].increaseBorrow(amount);\n    }\n\n    /**\n        @notice It gets the current supply-to-debt (StD) ratio for a given market.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebt(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (uint256)\n    {\n        return _getMarket(borrowedAsset, collateralAsset).getSupplyToDebt();\n    }\n\n    /**\n        @notice It gets the supply-to-debt (StD) ratio for a given market, including a new loan amount.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param loanAmount a new loan amount to consider in the ratio.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebtFor(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 loanAmount\n    ) external view returns (uint256) {\n        return _getMarket(borrowedAsset, collateralAsset).getSupplyToDebtFor(loanAmount);\n    }\n\n    /**\n        @notice It gets the current market state.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the current market state.\n     */\n    function getMarket(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (MarketStateLib.MarketState memory)\n    {\n        return _getMarket(borrowedAsset, collateralAsset);\n    }\n\n    /** Internal Functions */\n\n    /**\n        @notice It gets the current market state.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the current market state.\n     */\n    function _getMarket(address borrowedAsset, address collateralAsset)\n        internal\n        view\n        returns (MarketStateLib.MarketState storage)\n    {\n        return markets[borrowedAsset][collateralAsset];\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketStateLib.MarketState\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"getSupplyToDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"getSupplyToDebtFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBorrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseRepayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketsState","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}