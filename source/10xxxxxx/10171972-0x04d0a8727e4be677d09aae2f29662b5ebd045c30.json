{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Loopring Foundation (Loopring Project Ltd)\n*/\n\npragma solidity ^0.6.6;\n\n\nlibrary MathUint {\n    function mul(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a * b;\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\n    }\n\n    function sub(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint)\n    {\n        require(b <= a, \"SUB_UNDERFLOW\");\n        return a - b;\n    }\n\n    function add(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a + b;\n        require(c >= a, \"ADD_OVERFLOW\");\n    }\n}\n\ninterface Wallet {\n    function owner() external view returns (address);\n\n    \n    function setOwner(address newOwner) external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function setup(address _controller, address _owner, address _boostrapModule) external;\n\n    \n    \n    \n    \n    function addModule(address _module) external;\n\n    \n    \n    \n    function removeModule(address _module) external;\n\n    \n    \n    \n    function modules() external view returns (address[] memory _modules);\n\n    \n    \n    \n    function hasModule(address _module) external view returns (bool);\n\n    \n    \n    \n    \n    \n    \n    \n    function bindMethod(bytes4 _method, address _module) external;\n\n    \n    \n    \n    \n    function boundMethodModule(bytes4 _method) external view returns (address _module);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function transact(\n        uint8    mode,\n        address  to,\n        uint     value,\n        bytes    calldata data\n        )\n        external\n        returns (bytes memory returnData);\n}\n\ncontract DataStore {\n  modifier onlyWalletModule(address wallet)\n    {\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\n        _;\n    }\n}\n\ncontract QuotaStore is DataStore\n{\n    using MathUint for uint;\n\n    uint public defaultQuota;\n\n    struct Quota\n    {\n        uint    currentQuota; \n        uint    pendingQuota;\n        uint64  pendingUntil;\n        uint64  spentTimestamp;\n        uint    spentAmount;\n    }\n\n    mapping (address => Quota) public quotas;\n\n    event QuotaScheduled(\n        address indexed wallet,\n        uint            pendingQuota,\n        uint64          pendingUntil\n    );\n\n    constructor(uint _defaultQuota)\n        public\n        DataStore()\n    {\n        defaultQuota = _defaultQuota;\n    }\n\n    function changeQuota(\n        address wallet,\n        uint    newQuota,\n        uint    effectiveTime\n        )\n        public\n        onlyWalletModule(wallet)\n    {\n        quotas[wallet].currentQuota = currentQuota(wallet);\n        quotas[wallet].pendingQuota = newQuota;\n        quotas[wallet].pendingUntil = uint64(effectiveTime);\n\n        emit QuotaScheduled(\n            wallet,\n            newQuota,\n            quotas[wallet].pendingUntil\n        );\n    }\n\n    function checkAndAddToSpent(\n        address wallet,\n        uint    amount\n        )\n        public\n        onlyWalletModule(wallet)\n    {\n        require(hasEnoughQuota(wallet, amount), \"QUOTA_EXCEEDED\");\n        addToSpent(wallet, amount);\n    }\n\n    function addToSpent(\n        address wallet,\n        uint    amount\n        )\n        public\n        onlyWalletModule(wallet)\n    {\n        Quota storage q = quotas[wallet];\n        q.spentAmount = spentQuota(wallet).add(amount);\n        q.spentTimestamp = uint64(now);\n    }\n\n    function currentQuota(address wallet)\n        public\n        view\n        returns (uint)\n    {\n        Quota storage q = quotas[wallet];\n        uint value = q.pendingUntil <= now ?\n            q.pendingQuota : q.currentQuota;\n\n        return value == 0 ? defaultQuota : value;\n    }\n\n    function pendingQuota(address wallet)\n        public\n        view\n        returns (\n            uint _pendingQuota,\n            uint _pendingUntil\n        )\n    {\n        Quota storage q = quotas[wallet];\n        if (q.pendingUntil > 0 && q.pendingUntil > now) {\n            _pendingQuota = q.pendingQuota > 0 ? q.pendingQuota : defaultQuota;\n            _pendingUntil = q.pendingUntil;\n        }\n    }\n\n    function spentQuota(address wallet)\n        public\n        view\n        returns (uint)\n    {\n        Quota storage q = quotas[wallet];\n        uint timeSinceLastSpent = now.sub(q.spentTimestamp);\n        if (timeSinceLastSpent < 1 days) {\n            return q.spentAmount.sub(q.spentAmount.mul(timeSinceLastSpent) / 1 days);\n        } else {\n            return 0;\n        }\n    }\n\n    function availableQuota(address wallet)\n        public\n        view\n        returns (uint)\n    {\n        uint quota = currentQuota(wallet);\n        uint spent = spentQuota(wallet);\n        return quota > spent ? quota - spent : 0;\n    }\n\n    function hasEnoughQuota(\n        address wallet,\n        uint    requiredAmount\n        )\n        public\n        view\n        returns (bool)\n    {\n        return availableQuota(wallet) >= requiredAmount;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultQuota\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"pendingUntil\",\"type\":\"uint64\"}],\"name\":\"QuotaScheduled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"availableQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"changeQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkAndAddToSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"currentQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"hasEnoughQuota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"pendingQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pendingUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"quotas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"pendingUntil\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"spentTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"spentQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QuotaStore","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000008ac7230489e80000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}