{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Address\r\n * @dev Helper methods for Address type.\r\n */\r\nlibrary Address {\r\n    /**\r\n    * @dev Try to send native tokens to the address. If it fails, it will force the transfer by creating a selfdestruct contract\r\n    * @param _receiver address that will receive the native tokens\r\n    * @param _value the amount of native tokens to send\r\n    */\r\n    function safeSendValue(address _receiver, uint256 _value) internal {\r\n        if (!_receiver.send(_value)) {\r\n            (new Sacrifice).value(_value)(_receiver);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract Claimable {\r\n    bytes4 internal constant TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function claimValues(address _token, address _to) internal {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        Address.safeSendValue(_to, value);\r\n    }\r\n\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        safeTransfer(_token, _to, balance);\r\n    }\r\n\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        bytes memory returnData;\r\n        bool returnDataResult;\r\n        bytes memory callData = abi.encodeWithSelector(TRANSFER, _to, _value);\r\n        assembly {\r\n            let result := call(gas, _token, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n            returnData := mload(0)\r\n            returnDataResult := mload(0)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n\r\n        // Return data is optional\r\n        if (returnData.length > 0) {\r\n            require(returnDataResult);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract VersionableBridge {\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (5, 0, 0);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function getBridgeMode() external pure returns (bytes4);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IAMB {\r\n    function messageSender() external view returns (address);\r\n    function maxGasPerTx() external view returns (uint256);\r\n    function transactionHash() external view returns (bytes32);\r\n    function messageId() external view returns (bytes32);\r\n    function messageSourceChainId() external view returns (bytes32);\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\r\n    function requireToPassMessage(address _contract, bytes _data, uint256 _gas) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/libraries/Bytes.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Bytes\r\n * @dev Helper methods to transform bytes to other solidity types.\r\n */\r\nlibrary Bytes {\r\n    /**\r\n    * @dev Converts bytes array to bytes32.\r\n    * Truncates bytes array if its size is more than 32 bytes.\r\n    * NOTE: This function does not perform any checks on the received parameter.\r\n    * Make sure that the _bytes argument has a correct length, not less than 32 bytes.\r\n    * A case when _bytes has length less than 32 will lead to the undefined behaviour,\r\n    * since assembly will read data from memory that is not related to the _bytes argument.\r\n    * @param _bytes to be converted to bytes32 type\r\n    * @return bytes32 type of the firsts 32 bytes array in parameter.\r\n    */\r\n    function bytesToBytes32(bytes _bytes) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_bytes, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Truncate bytes array if its size is more than 20 bytes.\r\n    * NOTE: Similar to the bytesToBytes32 function, make sure that _bytes is not shorter than 20 bytes.\r\n    * @param _bytes to be converted to address type\r\n    * @return address included in the firsts 20 bytes of the bytes array in parameter.\r\n    */\r\n    function bytesToAddress(bytes _bytes) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(_bytes, 20))\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicAMBMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title BasicAMBMediator\r\n* @dev Basic storage and methods needed by mediators to interact with AMB bridge.\r\n*/\r\ncontract BasicAMBMediator is Ownable {\r\n    bytes32 internal constant BRIDGE_CONTRACT = 0x811bbb11e8899da471f0e69a3ed55090fc90215227fc5fb1cb0d6e962ea7b74f; // keccak256(abi.encodePacked(\"bridgeContract\"))\r\n    bytes32 internal constant MEDIATOR_CONTRACT = 0x98aa806e31e94a687a31c65769cb99670064dd7f5a87526da075c5fb4eab9880; // keccak256(abi.encodePacked(\"mediatorContract\"))\r\n    bytes32 internal constant REQUEST_GAS_LIMIT = 0x2dfd6c9f781bb6bbb5369c114e949b69ebb440ef3d4dd6b2836225eb1dc3a2be; // keccak256(abi.encodePacked(\"requestGasLimit\"))\r\n\r\n    /**\r\n    * @dev Sets the AMB bridge contract address. Only the owner can call this method.\r\n    * @param _bridgeContract the address of the bridge contract.\r\n    */\r\n    function setBridgeContract(address _bridgeContract) external onlyOwner {\r\n        _setBridgeContract(_bridgeContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the mediator contract address from the other network. Only the owner can call this method.\r\n    * @param _mediatorContract the address of the mediator contract.\r\n    */\r\n    function setMediatorContractOnOtherSide(address _mediatorContract) external onlyOwner {\r\n        _setMediatorContractOnOtherSide(_mediatorContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the gas limit to be used in the message execution by the AMB bridge on the other network.\r\n    * This value can't exceed the parameter maxGasPerTx defined on the AMB bridge.\r\n    * Only the owner can call this method.\r\n    * @param _requestGasLimit the gas limit for the message execution.\r\n    */\r\n    function setRequestGasLimit(uint256 _requestGasLimit) external onlyOwner {\r\n        _setRequestGasLimit(_requestGasLimit);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the AMB interface for the bridge contract address\r\n    * @return AMB interface for the bridge contract address\r\n    */\r\n    function bridgeContract() public view returns (IAMB) {\r\n        return IAMB(addressStorage[BRIDGE_CONTRACT]);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the mediator contract address from the other network.\r\n    * @return the address of the mediator contract.\r\n    */\r\n    function mediatorContractOnOtherSide() public view returns (address) {\r\n        return addressStorage[MEDIATOR_CONTRACT];\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the gas limit to be used in the message execution by the AMB bridge on the other network.\r\n    * @return the gas limit for the message execution.\r\n    */\r\n    function requestGasLimit() public view returns (uint256) {\r\n        return uintStorage[REQUEST_GAS_LIMIT];\r\n    }\r\n\r\n    /**\r\n    * @dev Stores a valid AMB bridge contract address.\r\n    * @param _bridgeContract the address of the bridge contract.\r\n    */\r\n    function _setBridgeContract(address _bridgeContract) internal {\r\n        require(AddressUtils.isContract(_bridgeContract));\r\n        addressStorage[BRIDGE_CONTRACT] = _bridgeContract;\r\n    }\r\n\r\n    /**\r\n    * @dev Stores the mediator contract address from the other network.\r\n    * @param _mediatorContract the address of the mediator contract.\r\n    */\r\n    function _setMediatorContractOnOtherSide(address _mediatorContract) internal {\r\n        addressStorage[MEDIATOR_CONTRACT] = _mediatorContract;\r\n    }\r\n\r\n    /**\r\n    * @dev Stores the gas limit to be used in the message execution by the AMB bridge on the other network.\r\n    * @param _requestGasLimit the gas limit for the message execution.\r\n    */\r\n    function _setRequestGasLimit(uint256 _requestGasLimit) internal {\r\n        require(_requestGasLimit <= maxGasPerTx());\r\n        uintStorage[REQUEST_GAS_LIMIT] = _requestGasLimit;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address that generated the message on the other network that is currently being executed by\r\n    * the AMB bridge.\r\n    * @return the address of the message sender.\r\n    */\r\n    function messageSender() internal view returns (address) {\r\n        return bridgeContract().messageSender();\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the id of the message originated on the other network.\r\n    * @return the id of the message originated on the other network.\r\n    */\r\n    function messageId() internal view returns (bytes32) {\r\n        return bridgeContract().messageId();\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the maximum gas limit that a message can use on its execution by the AMB bridge on the other network.\r\n    * @return the maximum gas limit value.\r\n    */\r\n    function maxGasPerTx() internal view returns (uint256) {\r\n        return bridgeContract().maxGasPerTx();\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicTokenBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract BasicTokenBridge is EternalStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event DailyLimitChanged(uint256 newLimit);\r\n    event ExecutionDailyLimitChanged(uint256 newLimit);\r\n\r\n    bytes32 internal constant MIN_PER_TX = 0xbbb088c505d18e049d114c7c91f11724e69c55ad6c5397e2b929e68b41fa05d1; // keccak256(abi.encodePacked(\"minPerTx\"))\r\n    bytes32 internal constant MAX_PER_TX = 0x0f8803acad17c63ee38bf2de71e1888bc7a079a6f73658e274b08018bea4e29c; // keccak256(abi.encodePacked(\"maxPerTx\"))\r\n    bytes32 internal constant DAILY_LIMIT = 0x4a6a899679f26b73530d8cf1001e83b6f7702e04b6fdb98f3c62dc7e47e041a5; // keccak256(abi.encodePacked(\"dailyLimit\"))\r\n    bytes32 internal constant EXECUTION_MAX_PER_TX = 0xc0ed44c192c86d1cc1ba51340b032c2766b4a2b0041031de13c46dd7104888d5; // keccak256(abi.encodePacked(\"executionMaxPerTx\"))\r\n    bytes32 internal constant EXECUTION_DAILY_LIMIT = 0x21dbcab260e413c20dc13c28b7db95e2b423d1135f42bb8b7d5214a92270d237; // keccak256(abi.encodePacked(\"executionDailyLimit\"))\r\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\r\n    }\r\n\r\n    function dailyLimit() public view returns (uint256) {\r\n        return uintStorage[DAILY_LIMIT];\r\n    }\r\n\r\n    function executionDailyLimit() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_DAILY_LIMIT];\r\n    }\r\n\r\n    function maxPerTx() public view returns (uint256) {\r\n        return uintStorage[MAX_PER_TX];\r\n    }\r\n\r\n    function executionMaxPerTx() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_MAX_PER_TX];\r\n    }\r\n\r\n    function minPerTx() public view returns (uint256) {\r\n        return uintStorage[MIN_PER_TX];\r\n    }\r\n\r\n    function decimalShift() public view returns (uint256) {\r\n        return uintStorage[DECIMAL_SHIFT];\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinExecutionLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > maxPerTx() || _dailyLimit == 0);\r\n        uintStorage[DAILY_LIMIT] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > executionMaxPerTx() || _dailyLimit == 0);\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _dailyLimit;\r\n        emit ExecutionDailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < executionDailyLimit());\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx == 0 || (_maxPerTx > minPerTx() && _maxPerTx < dailyLimit()));\r\n        uintStorage[MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx > 0 && _minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[MIN_PER_TX] = _minPerTx;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/TokenBridgeMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n* @title TokenBridgeMediator\r\n* @dev Common mediator functionality to handle operations related to token bridge messages sent to AMB bridge.\r\n*/\r\ncontract TokenBridgeMediator is BasicAMBMediator, BasicTokenBridge {\r\n    event FailedMessageFixed(bytes32 indexed messageId, address recipient, uint256 value);\r\n    event TokensBridged(address indexed recipient, uint256 value, bytes32 indexed messageId);\r\n\r\n    /**\r\n    * @dev Stores the value of a message sent to the AMB bridge.\r\n    * @param _messageId of the message sent to the bridge.\r\n    * @param _value amount of tokens bridged.\r\n    */\r\n    function setMessageValue(bytes32 _messageId, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"messageValue\", _messageId))] = _value;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the amount of tokens of a message sent to the AMB bridge.\r\n    * @return value representing amount of tokens.\r\n    */\r\n    function messageValue(bytes32 _messageId) internal view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"messageValue\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Stores the receiver of a message sent to the AMB bridge.\r\n    * @param _messageId of the message sent to the bridge.\r\n    * @param _recipient receiver of the tokens bridged.\r\n    */\r\n    function setMessageRecipient(bytes32 _messageId, address _recipient) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"messageRecipient\", _messageId))] = _recipient;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the receiver of a message sent to the AMB bridge.\r\n    * @return address of the receiver.\r\n    */\r\n    function messageRecipient(bytes32 _messageId) internal view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"messageRecipient\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets that the message sent to the AMB bridge has been fixed.\r\n    * @param _messageId of the message sent to the bridge.\r\n    */\r\n    function setMessageFixed(bytes32 _messageId) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"messageFixed\", _messageId))] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells if a message sent to the AMB bridge has been fixed.\r\n    * @return bool indicating the status of the message.\r\n    */\r\n    function messageFixed(bytes32 _messageId) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"messageFixed\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Call AMB bridge to require the invocation of handleBridgedTokens method of the mediator on the other network.\r\n    * Store information related to the bridged tokens in case the message execution fails on the other network\r\n    * and the action needs to be fixed/rolled back.\r\n    * @param _from address of sender, if bridge operation fails, tokens will be returned to this address\r\n    * @param _receiver address of receiver on the other side, will eventually receive bridged tokens\r\n    * @param _value bridged amount of tokens\r\n    */\r\n    function passMessage(address _from, address _receiver, uint256 _value) internal {\r\n        bytes4 methodSelector = this.handleBridgedTokens.selector;\r\n        bytes memory data = abi.encodeWithSelector(methodSelector, _receiver, _value);\r\n\r\n        bytes32 _messageId = bridgeContract().requireToPassMessage(\r\n            mediatorContractOnOtherSide(),\r\n            data,\r\n            requestGasLimit()\r\n        );\r\n\r\n        setMessageValue(_messageId, _value);\r\n        setMessageRecipient(_messageId, _from);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles the bridged tokens. Checks that the value is inside the execution limits and invokes the method\r\n    * to execute the Mint or Unlock accordingly.\r\n    * @param _recipient address that will receive the tokens\r\n    * @param _value amount of tokens to be received\r\n    */\r\n    function handleBridgedTokens(address _recipient, uint256 _value) external {\r\n        require(msg.sender == address(bridgeContract()));\r\n        require(messageSender() == mediatorContractOnOtherSide());\r\n        if (withinExecutionLimit(_value)) {\r\n            setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(_value));\r\n            executeActionOnBridgedTokens(_recipient, _value);\r\n        } else {\r\n            executeActionOnBridgedTokensOutOfLimit(_recipient, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Method to be called when a bridged message execution failed. It will generate a new message requesting to\r\n    * fix/roll back the transferred assets on the other network.\r\n    * @param _messageId id of the message which execution failed.\r\n    */\r\n    function requestFailedMessageFix(bytes32 _messageId) external {\r\n        require(!bridgeContract().messageCallStatus(_messageId));\r\n        require(bridgeContract().failedMessageReceiver(_messageId) == address(this));\r\n        require(bridgeContract().failedMessageSender(_messageId) == mediatorContractOnOtherSide());\r\n\r\n        bytes4 methodSelector = this.fixFailedMessage.selector;\r\n        bytes memory data = abi.encodeWithSelector(methodSelector, _messageId);\r\n        bridgeContract().requireToPassMessage(mediatorContractOnOtherSide(), data, requestGasLimit());\r\n    }\r\n\r\n    /**\r\n    * @dev Handles the request to fix transferred assets which bridged message execution failed on the other network.\r\n    * It uses the information stored by passMessage method when the assets were initially transferred\r\n    * @param _messageId id of the message which execution failed on the other network.\r\n    */\r\n    function fixFailedMessage(bytes32 _messageId) external {\r\n        require(msg.sender == address(bridgeContract()));\r\n        require(messageSender() == mediatorContractOnOtherSide());\r\n        require(!messageFixed(_messageId));\r\n\r\n        address recipient = messageRecipient(_messageId);\r\n        uint256 value = messageValue(_messageId);\r\n        setMessageFixed(_messageId);\r\n        executeActionOnFixedTokens(recipient, value);\r\n        emit FailedMessageFixed(_messageId, recipient, value);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function executeActionOnBridgedTokensOutOfLimit(address _recipient, uint256 _value) internal;\r\n\r\n    /* solcov ignore next */\r\n    function executeActionOnBridgedTokens(address _recipient, uint256 _value) internal;\r\n\r\n    /* solcov ignore next */\r\n    function executeActionOnFixedTokens(address _recipient, uint256 _value) internal;\r\n}\r\n\r\n// File: contracts/interfaces/IMediatorFeeManager.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IMediatorFeeManager {\r\n    function calculateFee(uint256) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/RewardableMediator.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n* @title RewardableMediator\r\n* @dev Common functionality to interact with mediator fee manager contract methods.\r\n*/\r\ncontract RewardableMediator is Ownable {\r\n    event FeeDistributed(uint256 feeAmount, bytes32 indexed messageId);\r\n\r\n    bytes32 internal constant FEE_MANAGER_CONTRACT = 0x779a349c5bee7817f04c960f525ee3e2f2516078c38c68a3149787976ee837e5; // keccak256(abi.encodePacked(\"feeManagerContract\"))\r\n    bytes4 internal constant ON_TOKEN_TRANSFER = 0xa4c0ed36; // onTokenTransfer(address,uint256,bytes)\r\n\r\n    /**\r\n    * @dev Sets the fee manager contract address. Only the owner can call this method.\r\n    * @param _feeManager the address of the fee manager contract.\r\n    */\r\n    function setFeeManagerContract(address _feeManager) external onlyOwner {\r\n        require(_feeManager == address(0) || AddressUtils.isContract(_feeManager));\r\n        addressStorage[FEE_MANAGER_CONTRACT] = _feeManager;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the fee manager contract address\r\n    * @return the address of the fee manager contract.\r\n    */\r\n    function feeManagerContract() public view returns (IMediatorFeeManager) {\r\n        return IMediatorFeeManager(addressStorage[FEE_MANAGER_CONTRACT]);\r\n    }\r\n\r\n    /**\r\n    * @dev Distributes the provided amount of fees.\r\n    * @param _feeManager address of the fee manager contract\r\n    * @param _fee total amount to be distributed to the list of reward accounts.\r\n    * @param _messageId id of the message that generated fee distribution\r\n    */\r\n    function distributeFee(IMediatorFeeManager _feeManager, uint256 _fee, bytes32 _messageId) internal {\r\n        onFeeDistribution(_feeManager, _fee);\r\n        _feeManager.call(abi.encodeWithSelector(ON_TOKEN_TRANSFER, address(this), _fee, \"\"));\r\n        emit FeeDistributed(_fee, _messageId);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function onFeeDistribution(address _feeManager, uint256 _fee) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/amb_native_to_erc20/BasicAMBNativeToErc20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title BasicAMBNativeToErc20\r\n* @dev Common mediator functionality for native-to-erc20 bridge intended to work on top of AMB bridge.\r\n*/\r\ncontract BasicAMBNativeToErc20 is\r\n    Initializable,\r\n    Upgradeable,\r\n    Claimable,\r\n    VersionableBridge,\r\n    TokenBridgeMediator,\r\n    RewardableMediator\r\n{\r\n    /**\r\n    * @dev Stores the initial parameters of the mediator.\r\n    * @param _bridgeContract the address of the AMB bridge contract.\r\n    * @param _mediatorContract the address of the mediator contract on the other network.\r\n    * @param _dailyLimitMaxPerTxMinPerTxArray array with limit values for the assets to be bridged to the other network.\r\n    *   [ 0 = dailyLimit, 1 = maxPerTx, 2 = minPerTx ]\r\n    * @param _executionDailyLimitExecutionMaxPerTxArray array with limit values for the assets bridged from the other network.\r\n    *   [ 0 = executionDailyLimit, 1 = executionMaxPerTx ]\r\n    * @param _requestGasLimit the gas limit for the message execution.\r\n    * @param _decimalShift number of decimals shift required to adjust the amount of tokens bridged.\r\n    * @param _owner address of the owner of the mediator contract\r\n    * @param _feeManager address of the fee manager contract\r\n    */\r\n    function _initialize(\r\n        address _bridgeContract,\r\n        address _mediatorContract,\r\n        uint256[] _dailyLimitMaxPerTxMinPerTxArray,\r\n        uint256[] _executionDailyLimitExecutionMaxPerTxArray,\r\n        uint256 _requestGasLimit,\r\n        uint256 _decimalShift,\r\n        address _owner,\r\n        address _feeManager\r\n    ) internal {\r\n        require(!isInitialized());\r\n        require(\r\n            _dailyLimitMaxPerTxMinPerTxArray[2] > 0 && // minPerTx > 0\r\n                _dailyLimitMaxPerTxMinPerTxArray[1] > _dailyLimitMaxPerTxMinPerTxArray[2] && // maxPerTx > minPerTx\r\n                _dailyLimitMaxPerTxMinPerTxArray[0] > _dailyLimitMaxPerTxMinPerTxArray[1] // dailyLimit > maxPerTx\r\n        );\r\n        require(_executionDailyLimitExecutionMaxPerTxArray[1] < _executionDailyLimitExecutionMaxPerTxArray[0]); // foreignMaxPerTx < foreignDailyLimit\r\n        require(_owner != address(0));\r\n        require(_feeManager == address(0) || AddressUtils.isContract(_feeManager));\r\n\r\n        _setBridgeContract(_bridgeContract);\r\n        _setMediatorContractOnOtherSide(_mediatorContract);\r\n        _setRequestGasLimit(_requestGasLimit);\r\n        uintStorage[DAILY_LIMIT] = _dailyLimitMaxPerTxMinPerTxArray[0];\r\n        uintStorage[MAX_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[1];\r\n        uintStorage[MIN_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[2];\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _executionDailyLimitExecutionMaxPerTxArray[0];\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _executionDailyLimitExecutionMaxPerTxArray[1];\r\n        uintStorage[DECIMAL_SHIFT] = _decimalShift;\r\n        addressStorage[FEE_MANAGER_CONTRACT] = _feeManager;\r\n        setOwner(_owner);\r\n\r\n        emit DailyLimitChanged(_dailyLimitMaxPerTxMinPerTxArray[0]);\r\n        emit ExecutionDailyLimitChanged(_executionDailyLimitExecutionMaxPerTxArray[0]);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the bridge interface version that this contract supports.\r\n    * @return major value of the version\r\n    * @return minor value of the version\r\n    * @return patch value of the version\r\n    */\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (1, 0, 1);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the bridge mode that this contract supports.\r\n    * @return _data 4 bytes representing the bridge mode\r\n    */\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return 0x582ed8fd; // bytes4(keccak256(abi.encodePacked(\"native-to-erc-amb\")))\r\n    }\r\n\r\n    /**\r\n    * @dev Execute the action to be performed when the bridge tokens are out of execution limits.\r\n    */\r\n    function executeActionOnBridgedTokensOutOfLimit(\r\n        address, /* _recipient */\r\n        uint256 /* _value */\r\n    ) internal {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to transfer any locked token on this contract that is not part of the bridge operations.\r\n    * @param _token address of the token, if it is not provided, native tokens will be transferred.\r\n    * @param _to address that will receive the locked tokens on this contract.\r\n    */\r\n    function claimTokens(address _token, address _to) public onlyIfUpgradeabilityOwner validAddress(_to) {\r\n        claimValues(_token, _to);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ERC677.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(address, uint256, bytes) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ERC677Receiver.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ERC677Receiver {\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ERC677Storage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ERC677Storage {\r\n    bytes32 internal constant ERC677_TOKEN = 0xa8b0ade3e2b734f043ce298aca4cc8d19d74270223f34531d0988b7d00cba21d; // keccak256(abi.encodePacked(\"erc677token\"))\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BaseERC677Bridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseERC677Bridge is BasicTokenBridge, ERC677Receiver, ERC677Storage {\r\n    function erc677token() public view returns (ERC677) {\r\n        return ERC677(addressStorage[ERC677_TOKEN]);\r\n    }\r\n\r\n    function setErc677token(address _token) internal {\r\n        require(AddressUtils.isContract(_token));\r\n        addressStorage[ERC677_TOKEN] = _token;\r\n    }\r\n\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool) {\r\n        ERC677 token = erc677token();\r\n        require(msg.sender == address(token));\r\n        require(withinLimit(_value));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_value));\r\n        bridgeSpecificActionsOnTokenTransfer(token, _from, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function chooseReceiver(address _from, bytes _data) internal view returns (address recipient) {\r\n        recipient = _from;\r\n        if (_data.length > 0) {\r\n            require(_data.length == 20);\r\n            recipient = Bytes.bytesToAddress(_data);\r\n            require(recipient != address(0));\r\n            require(recipient != bridgeContractOnOtherSide());\r\n        }\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function bridgeSpecificActionsOnTokenTransfer(ERC677 _token, address _from, uint256 _value, bytes _data) internal;\r\n\r\n    /* solcov ignore next */\r\n    function bridgeContractOnOtherSide() internal view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IBurnableMintableERC677Token.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract IBurnableMintableERC677Token is ERC677 {\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function burn(uint256 _value) public;\r\n    function claimTokens(address _token, address _to) public;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ReentrancyGuard.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ReentrancyGuard is EternalStorage {\r\n    bytes32 internal constant LOCK = 0x6168652c307c1e813ca11cfb3a601f1cf3b22452021a5052d8b05f1f1f8a3e92; // keccak256(abi.encodePacked(\"lock\"))\r\n\r\n    function lock() internal returns (bool) {\r\n        return boolStorage[LOCK];\r\n    }\r\n\r\n    function setLock(bool _lock) internal {\r\n        boolStorage[LOCK] = _lock;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/MediatorMessagesGuard.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n* @title MediatorMessagesGuard\r\n* @dev AMB bridge supports one message per transaction. This contract provides functionality to limit the number of\r\n* messages that a mediator can send to the bridge on a single transaction.\r\n*/\r\ncontract MediatorMessagesGuard is EternalStorage {\r\n    bytes32 private constant MESSAGES_CONTROL_BITMAP = 0x3caea4a73ee3aee2c0babf273b625b68b12a4f38d694d7cb051cb4b944e5e802; // keccak256(abi.encodePacked(\"messagesControlBitmap\"))\r\n\r\n    /**\r\n    * @dev Tells the status of the lock.\r\n    * @return the status of the lock.\r\n    */\r\n    function getMessagesControlBitmap() private view returns (uint256) {\r\n        return uintStorage[MESSAGES_CONTROL_BITMAP];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the status of the lock.\r\n    * @param _bitmap the new status for the lock\r\n    */\r\n    function setMessagesControlBitmap(uint256 _bitmap) private {\r\n        uintStorage[MESSAGES_CONTROL_BITMAP] = _bitmap;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells if messages are restricted and the limit was reached.\r\n    * @param _bitmap the status of the lock\r\n    */\r\n    function messagesRestrictedAndLimitReached(uint256 _bitmap) private pure returns (bool) {\r\n        return (_bitmap == ((2**255) | 1));\r\n    }\r\n\r\n    /**\r\n    * @dev Tells if messages are restricted.\r\n    * @param _bitmap the status of the lock\r\n    */\r\n    function messagesRestricted(uint256 _bitmap) private pure returns (bool) {\r\n        return (_bitmap == 2**255);\r\n    }\r\n\r\n    /**\r\n    * @dev Enable the lock to limit the number of messages to send to the AMB bridge\r\n    */\r\n    function enableMessagesRestriction() internal {\r\n        setMessagesControlBitmap(2**255);\r\n    }\r\n\r\n    /**\r\n    * @dev Disable the lock to limit the number of messages to send to the AMB bridge\r\n    */\r\n    function disableMessagesRestriction() internal {\r\n        setMessagesControlBitmap(0);\r\n    }\r\n\r\n    modifier bridgeMessageAllowed {\r\n        uint256 bm = getMessagesControlBitmap();\r\n        require(!messagesRestrictedAndLimitReached(bm));\r\n        if (messagesRestricted(bm)) {\r\n            setMessagesControlBitmap(bm | 1);\r\n        }\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/amb_native_to_erc20/ForeignAMBNativeToErc20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ForeignAMBNativeToErc20\r\n* @dev Foreign mediator implementation for native-to-erc20 bridge intended to work on top of AMB bridge.\r\n* It is design to be used as implementation contract of EternalStorageProxy contract.\r\n*/\r\ncontract ForeignAMBNativeToErc20 is BasicAMBNativeToErc20, ReentrancyGuard, BaseERC677Bridge, MediatorMessagesGuard {\r\n    /**\r\n    * @dev Stores the initial parameters of the mediator.\r\n    * @param _bridgeContract the address of the AMB bridge contract.\r\n    * @param _mediatorContract the address of the mediator contract on the other network.\r\n    * @param _dailyLimitMaxPerTxMinPerTxArray array with limit values for the assets to be bridged to the other network.\r\n    *   [ 0 = dailyLimit, 1 = maxPerTx, 2 = minPerTx ]\r\n    * @param _executionDailyLimitExecutionMaxPerTxArray array with limit values for the assets bridged from the other network.\r\n    *   [ 0 = executionDailyLimit, 1 = executionMaxPerTx ]\r\n    * @param _requestGasLimit the gas limit for the message execution.\r\n    * @param _decimalShift number of decimals shift required to adjust the amount of tokens bridged.\r\n    * @param _owner address of the owner of the mediator contract\r\n    * @param _erc677token address of the erc677 token contract\r\n    * @param _feeManager address of the fee manager contract\r\n    */\r\n    function initialize(\r\n        address _bridgeContract,\r\n        address _mediatorContract,\r\n        uint256[] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = dailyLimit, 1 = maxPerTx, 2 = minPerTx ]\r\n        uint256[] _executionDailyLimitExecutionMaxPerTxArray, // [ 0 = executionDailyLimit, 1 = executionMaxPerTx ]\r\n        uint256 _requestGasLimit,\r\n        uint256 _decimalShift,\r\n        address _owner,\r\n        address _erc677token,\r\n        address _feeManager\r\n    ) external onlyRelevantSender returns (bool) {\r\n        _initialize(\r\n            _bridgeContract,\r\n            _mediatorContract,\r\n            _dailyLimitMaxPerTxMinPerTxArray,\r\n            _executionDailyLimitExecutionMaxPerTxArray,\r\n            _requestGasLimit,\r\n            _decimalShift,\r\n            _owner,\r\n            _feeManager\r\n        );\r\n        setErc677token(_erc677token);\r\n        setInitialize();\r\n        return isInitialized();\r\n    }\r\n\r\n    /**\r\n    * @dev Mint the amount of tokens that were bridged from the other network.\r\n    * If configured, it calculates, subtract and distribute the fees among the reward accounts.\r\n    * @param _receiver address that will receive the tokens\r\n    * @param _value amount of tokens to be received\r\n    */\r\n    function executeActionOnBridgedTokens(address _receiver, uint256 _value) internal {\r\n        uint256 valueToMint = _value.div(10**decimalShift());\r\n\r\n        bytes32 _messageId = messageId();\r\n        IMediatorFeeManager feeManager = feeManagerContract();\r\n        if (feeManager != address(0)) {\r\n            uint256 fee = feeManager.calculateFee(valueToMint);\r\n            if (fee != 0) {\r\n                distributeFee(feeManager, fee, _messageId);\r\n                valueToMint = valueToMint.sub(fee);\r\n            }\r\n        }\r\n\r\n        IBurnableMintableERC677Token(erc677token()).mint(_receiver, valueToMint);\r\n        emit TokensBridged(_receiver, valueToMint, _messageId);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint back the amount of tokens that were bridged to the other network but failed.\r\n    * @param _receiver address that will receive the tokens\r\n    * @param _value amount of tokens to be received\r\n    */\r\n    function executeActionOnFixedTokens(address _receiver, uint256 _value) internal {\r\n        IBurnableMintableERC677Token(erc677token()).mint(_receiver, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev It will initiate the bridge operation that will burn the amount of tokens transferred and unlock the native tokens on\r\n    * the other network. The user should first call Approve method of the ERC677 token.\r\n    * @param _from address that will transfer the tokens to be burned.\r\n    * @param _receiver address that will receive the native tokens on the other network.\r\n    * @param _value amount of tokens to be transferred to the other network.\r\n    */\r\n    function relayTokens(address _from, address _receiver, uint256 _value) external {\r\n        require(_from == msg.sender || _from == _receiver);\r\n        _relayTokens(_from, _receiver, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Validates that the token amount is inside the limits, calls transferFrom to transfer the tokens to the contract\r\n    * and invokes the method to burn the tokens and unlock the native tokens on the other network.\r\n    * The user should first call Approve method of the ERC677 token.\r\n    * @param _from address that will transfer the tokens to be burned.\r\n    * @param _receiver address that will receive the native tokens on the other network.\r\n    * @param _value amount of tokens to be transferred to the other network.\r\n    */\r\n    function _relayTokens(address _from, address _receiver, uint256 _value) internal {\r\n        // This lock is to prevent calling passMessage twice.\r\n        // When transferFrom is called, after the transfer, the ERC677 token will call onTokenTransfer from this contract\r\n        // which will call passMessage.\r\n        require(!lock());\r\n        ERC677 token = erc677token();\r\n        address to = address(this);\r\n        require(withinLimit(_value));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_value));\r\n\r\n        setLock(true);\r\n        token.transferFrom(_from, to, _value);\r\n        setLock(false);\r\n        bridgeSpecificActionsOnTokenTransfer(token, _from, _value, abi.encodePacked(_receiver));\r\n    }\r\n\r\n    /**\r\n    * @dev It will initiate the bridge operation that will burn the amount of tokens transferred and unlock the native tokens on\r\n    * the other network. The user should first call Approve method of the ERC677 token.\r\n    * @param _receiver address that will receive the native tokens on the other network.\r\n    * @param _value amount of tokens to be transferred to the other network.\r\n    */\r\n    function relayTokens(address _receiver, uint256 _value) external {\r\n        _relayTokens(msg.sender, _receiver, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev This method is called when transferAndCall is used from ERC677 to transfer the tokens to this contract.\r\n    * It will initiate the bridge operation that will burn the amount of tokens transferred and unlock the native tokens on\r\n    * the other network.\r\n    * @param _from address that transferred the tokens.\r\n    * @param _value amount of tokens transferred.\r\n    * @param _data this parameter could contain the address of an alternative receiver of the tokens on the other network,\r\n    * otherwise it will be empty.\r\n    */\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external bridgeMessageAllowed returns (bool) {\r\n        ERC677 token = erc677token();\r\n        require(msg.sender == address(token));\r\n        if (!lock()) {\r\n            require(withinLimit(_value));\r\n            setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_value));\r\n        }\r\n        bridgeSpecificActionsOnTokenTransfer(token, _from, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns the amount of tokens and makes the request to unlock the native tokens on the other network.\r\n    * @param _token address of the ERC677 token.\r\n    * @param _from address that transferred the tokens.\r\n    * @param _value amount of tokens transferred.\r\n    * @param _data this parameter could contain the address of an alternative receiver of the native tokens on the other\r\n    * network, otherwise it will be empty.\r\n    */\r\n    function bridgeSpecificActionsOnTokenTransfer(ERC677 _token, address _from, uint256 _value, bytes _data) internal {\r\n        if (!lock()) {\r\n            IBurnableMintableERC677Token(_token).burn(_value);\r\n            passMessage(_from, chooseReceiver(_from, _data), _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Mint the fee amount of tokens to the fee manager contract.\r\n    * @param _feeManager address that will receive the minted tokens.\r\n    * @param _fee amount of tokens to be minted.\r\n    */\r\n    function onFeeDistribution(address _feeManager, uint256 _fee) internal {\r\n        IBurnableMintableERC677Token(erc677token()).mint(_feeManager, _fee);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to transfer any locked token on the ERC677 token contract.\r\n    * @param _token address of the token, if it is not provided, native tokens will be transferred.\r\n    * @param _to address that will receive the locked tokens on this contract.\r\n    */\r\n    function claimTokensFromErc677(address _token, address _to) external onlyIfUpgradeabilityOwner {\r\n        IBurnableMintableERC677Token(erc677token()).claimTokens(_token, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the mediator contract on the other side, used by chooseReceiver method\r\n    * to avoid sending the native tokens to that address.\r\n    * @return address of the mediator contract con the other side\r\n    */\r\n    function bridgeContractOnOtherSide() internal view returns (address) {\r\n        return mediatorContractOnOtherSide();\r\n    }\r\n\r\n    /**\r\n    * @dev Distributes the provided amount of fees.\r\n    * @param _feeManager address of the fee manager contract\r\n    * @param _fee total amount to be distributed to the list of reward accounts.\r\n    * @param _messageId id of the message that generated fee distribution\r\n    */\r\n    function distributeFee(IMediatorFeeManager _feeManager, uint256 _fee, bytes32 _messageId) internal {\r\n        // Right now, AMB bridge supports only one message per transaction.\r\n        // The receivers of the fee could try to send back the fees through the mediator,\r\n        // so here we add a lock to limit the number of messages that the mediator can send to the bridge,\r\n        // allowing a maximum of 1 message\r\n        enableMessagesRestriction();\r\n        super.distributeFee(_feeManager, _fee, _messageId);\r\n        // remove the lock\r\n        disableMessagesRestriction();\r\n    }\r\n\r\n    /**\r\n    * @dev Method to migrate foreign WETC native-to-erc bridge to a\r\n    * mediator implementation on top of AMB\r\n    * \r\n    * Selector: 0x798e9289\r\n    */\r\n    function migrateToMediator() external {\r\n        bytes32 REQUIRED_BLOCK_CONFIRMATIONS = 0x916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071; // keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))\r\n        bytes32 GAS_PRICE = 0x55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b; // keccak256(abi.encodePacked(\"gasPrice\"))\r\n        bytes32 DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n        bytes32 HOME_FEE_STORAGE_KEY = 0xc3781f3cec62d28f56efe98358f59c2105504b194242dbcb2cc0806850c306e7; // keccak256(abi.encodePacked(\"homeFee\"))\r\n        bytes32 FOREIGN_FEE_STORAGE_KEY = 0x68c305f6c823f4d2fa4140f9cf28d32a1faccf9b8081ff1c2de11cf32c733efc; // keccak256(abi.encodePacked(\"foreignFee\"))\r\n        bytes32 VALIDATOR_CONTRACT = 0x5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe; // keccak256(abi.encodePacked(\"validatorContract\"))\r\n\r\n        bytes32 migrationToMediatorStorage = 0x131ab4848a6da904c5c205972a9dfe59f6d2afb8c9c3acd56915f89558369213; // keccak256(abi.encodePacked(\"migrationToMediator\"))\r\n        require(!boolStorage[migrationToMediatorStorage]);\r\n\r\n        // Assign new AMB parameters\r\n        _setBridgeContract(0x5a91B345244d3A285b30287b4c63c154eCBD2b7e); // TODO set AMB bridge address when deployed on ETH\r\n        _setMediatorContractOnOtherSide(0x0cB781EE62F815bdD9CD4c2210aE8600d43e7040);\r\n        _setRequestGasLimit(500000); // TODO define gas limit amount for home handleBridgedTokens method\r\n\r\n        // Update fee manager\r\n        addressStorage[FEE_MANAGER_CONTRACT] = 0x1F96a42cDFe3c3e90d1B58561D8731de63223BDA; // TODO set new fee manager address\r\n\r\n        // Free old storage\r\n        delete addressStorage[VALIDATOR_CONTRACT];\r\n        delete uintStorage[GAS_PRICE];\r\n        delete uintStorage[DEPLOYED_AT_BLOCK];\r\n        delete uintStorage[REQUIRED_BLOCK_CONFIRMATIONS];\r\n        delete uintStorage[HOME_FEE_STORAGE_KEY];\r\n        delete uintStorage[FOREIGN_FEE_STORAGE_KEY];\r\n\r\n        boolStorage[migrationToMediatorStorage] = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"fixFailedMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc677token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"messageFixed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManagerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mediatorContract\",\"type\":\"address\"}],\"name\":\"setMediatorContractOnOtherSide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateToMediator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediatorContractOnOtherSide\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"handleBridgedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokensFromErc677\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"requestFailedMessageFix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestGasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeManagerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"name\":\"_mediatorContract\",\"type\":\"address\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_executionDailyLimitExecutionMaxPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"},{\"name\":\"_decimalShift\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_erc677token\",\"type\":\"address\"},{\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"}],\"name\":\"setRequestGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedMessageFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignAMBNativeToErc20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d40cfef57fbf2ea21d585eaa66579c482a76b8410105f3099390bf14cc32deda"}]}