{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n    contract IMigrationContract {\r\n        function migrate(address addr, uint256 nas) returns (bool success);\r\n    }\r\n    contract SafeMath {\r\n    \r\n     \r\n        function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n            uint256 z = x + y;\r\n            assert((z >= x) && (z >= y));\r\n            return z;\r\n        }\r\n     \r\n        function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n            assert(x >= y);\r\n            uint256 z = x - y;\r\n            return z;\r\n        }\r\n     \r\n        function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n            uint256 z = x * y;\r\n            assert((x == 0)||(z/x == y));\r\n            return z;\r\n        }\r\n     \r\n    }\r\n\t\r\ncontract Token {\r\n        uint256 public totalSupply;\r\n        function balanceOf(address _owner) public constant returns (uint256 balance);\r\n        function transfer(address _to, uint256 _value)  public returns (bool success);\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n        function approve(address _spender, uint256 _value) public returns (bool success);\r\n        function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    }\r\n\t\r\ncontract StandardToken is Token {\r\n     \r\n        function transfer(address _to, uint256 _value) public returns (bool success) {\r\n            require(_to != address(0));\r\n            require(!frozenAccount[msg.sender]);\r\n\t\t\trequire(balances[ _to] + _value >= balances[ _to]); \r\n\t\t\tif (balances[msg.sender] >= _value && _value > 0) {\r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                emit Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n     \r\n        function  transferFrom(address _from, address _to, uint256 _value) public returns (bool success)  {\r\n            \r\n\t\t\trequire(_to != address(0));\r\n\t\t\trequire(!frozenAccount[_from]);\r\n\t\t\trequire(balances[ _to] + _value >= balances[ _to]);\r\n\t\t\tif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n                balances[_to] += _value;\r\n                balances[_from] -= _value;\r\n                allowed[_from][msg.sender] -= _value;\r\n               emit Transfer(_from, _to, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n     \r\n        function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n     \r\n        function approve(address _spender, uint256 _value) public returns (bool success) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n     \r\n        function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n            return allowed[_owner][_spender];\r\n        }\r\n     \r\n        mapping (address => uint256) balances;\r\n        mapping (address => mapping (address => uint256)) allowed;\r\n        mapping (address => bool) public frozenAccount;\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnerShip(address newOwer) public onlyOwner {\r\n        owner = newOwer;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LBToken is StandardToken, SafeMath ,owned {\r\n     \r\n        // metadata\r\n        string  public constant name = \"lb\";\r\n        string  public constant symbol = \"LB\";\r\n        uint256 public constant decimals = 18;\r\n        string  public version = \"1.0\";\r\n     \r\n        // contracts\r\n        address public ethFundDeposit;          // ETH存放地址\r\n        address public newContractAddr;         // token更新地址\r\n     \r\n        // crowdsale parameters\r\n        bool    public isFunding;                \r\n        uint256 public fundingStartBlock;\r\n        uint256 public fundingStopBlock;\r\n     \r\n        uint256 public currentSupply;           \r\n        uint256 public tokenRaised = 0;         \r\n        uint256 public tokenMigrated = 0;     \r\n        uint256 public tokenExchangeRate = 625;             \r\n     \r\n        // events\r\n        \r\n        event AllocateToken(address indexed _to, uint256 _value);   \r\n        event IssueToken(address indexed _to, uint256 _value);      \r\n        event IncreaseSupply(uint256 _value);\r\n        event DecreaseSupply(uint256 _value);\r\n        event Migrate(address indexed _to, uint256 _value);\r\n        event AddSupply(uint amount);\r\n     \r\n        // 转换\r\n        function formatDecimals(uint256 _value) internal returns (uint256 ) {\r\n            return _value * 10 ** decimals;\r\n        }\r\n     \r\n        // constructor\r\n        constructor (\r\n            address _ethFundDeposit,\r\n            uint256 _currentSupply) public\r\n        {\r\n            ethFundDeposit = _ethFundDeposit;\r\n     \r\n            isFunding = false;                           \r\n            fundingStartBlock = 0;\r\n            fundingStopBlock = 0;\r\n     \r\n            currentSupply = formatDecimals(_currentSupply);\r\n            totalSupply = formatDecimals(20000000000);\r\n            balances[msg.sender] = totalSupply;\r\n            require(currentSupply <= totalSupply);\r\n        }\r\n     \r\n        modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\r\n     \r\n        \r\n        function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\r\n            if (_tokenExchangeRate == 0) throw;\r\n            if (_tokenExchangeRate == tokenExchangeRate) throw;\r\n     \r\n            tokenExchangeRate = _tokenExchangeRate;\r\n        }\r\n     \r\n        \r\n        function increaseSupply (uint256 _value) isOwner external {\r\n            uint256 value = formatDecimals(_value);\r\n            if (value + currentSupply > totalSupply) throw;\r\n            currentSupply = safeAdd(currentSupply, value);\r\n            IncreaseSupply(value);\r\n        }\r\n\t\t\r\n        function mine(address target, uint amount) public onlyOwner {\r\n        totalSupply += amount;\r\n        balances[target] += amount;\r\n        emit AddSupply(amount);\r\n        emit Transfer(address(0), target, amount);\r\n        }\r\n        /// \r\n        function decreaseSupply (uint256 _value) isOwner external {\r\n            uint256 value = formatDecimals(_value);\r\n            if (value + tokenRaised > currentSupply) throw;\r\n     \r\n            currentSupply = safeSubtract(currentSupply, value);\r\n            DecreaseSupply(value);\r\n        }\r\n     \r\n        \r\n        function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\r\n            if (isFunding) throw;\r\n            if (_fundingStartBlock >= _fundingStopBlock) throw;\r\n            if (block.number >= _fundingStartBlock) throw;\r\n     \r\n            fundingStartBlock = _fundingStartBlock;\r\n            fundingStopBlock = _fundingStopBlock;\r\n            isFunding = true;\r\n        }\r\n     \r\n        \r\n        function stopFunding() isOwner external {\r\n            if (!isFunding) throw;\r\n            isFunding = false;\r\n        }\r\n     \r\n        \r\n        function setMigrateContract(address _newContractAddr) isOwner external {\r\n            if (_newContractAddr == newContractAddr) throw;\r\n            newContractAddr = _newContractAddr;\r\n        }\r\n     \r\n    \r\n        function changeOwner(address _newFundDeposit) isOwner() external {\r\n            require(_newFundDeposit != address(0));\r\n            ethFundDeposit = _newFundDeposit;\r\n        }\r\n     \r\n   \r\n        function migrate() external {\r\n            if(isFunding) throw;\r\n            if(newContractAddr == address(0x0)) throw;\r\n     \r\n            uint256 tokens = balances[msg.sender];\r\n            if (tokens == 0) throw;\r\n     \r\n            balances[msg.sender] = 0;\r\n            tokenMigrated = safeAdd(tokenMigrated, tokens);\r\n     \r\n            IMigrationContract newContract = IMigrationContract(newContractAddr);\r\n            if (!newContract.migrate(msg.sender, tokens)) throw;\r\n     \r\n            Migrate(msg.sender, tokens);               \r\n        }\r\n     \r\n \r\n        function transferETH() isOwner external {\r\n            if (this.balance == 0) throw;\r\n            if (!ethFundDeposit.send(this.balance)) throw;\r\n        }\r\n     \r\n        ///  将数字货币 token分配到预处理地址。\r\n        function allocateToken (address _addr, uint256 _eth) isOwner external {\r\n            if (_eth == 0) throw;\r\n            \r\n            if (_addr == address(0x0)) throw;\r\n     \r\n            uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\r\n            if (tokens + tokenRaised > currentSupply) throw;\r\n     \r\n            tokenRaised = safeAdd(tokenRaised, tokens);\r\n            balances[_addr] += tokens;\r\n     \r\n            AllocateToken(_addr, tokens); \r\n        }\r\n     \r\n        /// 购买token\r\n        function () payable {\r\n            if (!isFunding) throw;\r\n            if (msg.value == 0) throw;\r\n     \r\n            if (block.number < fundingStartBlock) throw;\r\n            if (block.number > fundingStopBlock) throw;\r\n     \r\n            uint256 tokens = safeMult(msg.value, tokenExchangeRate);\r\n            if (tokens + tokenRaised > currentSupply) throw;\r\n     \r\n            tokenRaised = safeAdd(tokenRaised, tokens);\r\n            balances[msg.sender] += tokens;\r\n     \r\n            IssueToken(msg.sender, tokens);  \r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"allocateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContractAddr\",\"type\":\"address\"}],\"name\":\"setMigrateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingStopBlock\",\"type\":\"uint256\"}],\"name\":\"startFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwer\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFundDeposit\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setTokenExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStopBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_currentSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllocateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IncreaseSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DecreaseSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LBToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f19a01bd51420e55f2ed68efd7212dba560f52800000000000000000000000000000000000000000000000000000002540be400","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8b2ad4c408df77ec97135911fd07df57b3367c9612239f649dbed3002823bbc9"}]}