{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/compliance/ICompliance.sol\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\r\n *\r\n *     Copyright (C) 2019, Tokeny s√†rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface ICompliance {\r\n\r\n    /**\r\n    *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\r\n    *  the event is emitted by the Compliance constructor and by the addTokenAgent function\r\n    *  `_agentAddress` is the address of the Agent to add\r\n    */\r\n    event TokenAgentAdded(address _agentAddress);\r\n\r\n    /**\r\n    *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\r\n    *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\r\n    *  `_agentAddress` is the address of the Agent to remove\r\n    */\r\n    event TokenAgentRemoved(address _agentAddress);\r\n\r\n    /**\r\n    *  this event is emitted when a token has been bound to the compliance contract\r\n    *  the event is emitted by the bindToken function\r\n    *  `_token` is the address of the token to bind\r\n    */\r\n    event TokenBound(address _token);\r\n\r\n    /**\r\n    *  this event is emitted when a token has been unbound from the compliance contract\r\n    *  the event is emitted by the unbindToken function\r\n    *  `_token` is the address of the token to unbind\r\n    */\r\n    event TokenUnbound(address _token);\r\n\r\n    /**\r\n    *  @dev Returns true if the Address is in the list of token agents\r\n    *  @param _agentAddress address of this agent\r\n    */\r\n    function isTokenAgent(address _agentAddress) external view returns (bool);\r\n\r\n    /**\r\n    *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\r\n    *  @param _token address of the token\r\n    */\r\n    function isTokenBound(address _token) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev adds an agent to the list of token agents\r\n     *  @param _agentAddress address of the agent to be added\r\n     *  Emits a TokenAgentAdded event\r\n     */\r\n    function addTokenAgent(address _agentAddress) external;\r\n\r\n    /**\r\n    *  @dev remove Agent from the list of token agents\r\n    *  @param _agentAddress address of the agent to be removed (must be added first)\r\n    *  Emits a TokenAgentRemoved event\r\n    */\r\n    function removeTokenAgent(address _agentAddress) external;\r\n\r\n    /**\r\n     *  @dev binds a token to the compliance contract\r\n     *  @param _token address of the token to bind\r\n     *  Emits a TokenBound event\r\n     */\r\n    function bindToken(address _token) external;\r\n\r\n    /**\r\n    *  @dev unbinds a token from the compliance contract\r\n    *  @param _token address of the token to unbind\r\n    *  Emits a TokenUnbound event\r\n    */\r\n    function unbindToken(address _token) external;\r\n\r\n\r\n   /**\r\n    *  @dev checks that the transfer is compliant.\r\n    *  default compliance always returns true\r\n    *  READ ONLY FUNCTION, this function cannot be used to increment\r\n    *  counters, emit events, ...\r\n    *  @param _from The address of the sender\r\n    *  @param _to The address of the receiver\r\n    *  @param _amount The amount of tokens involved in the transfer\r\n    */\r\n    function canTransfer(address _from, address _to, uint256 _amount) external view returns (bool);\r\n\r\n   /**\r\n    *  @dev function called whenever tokens are transferred\r\n    *  from one wallet to another\r\n    *  this function can update state variables in the compliance contract\r\n    *  these state variables being used by `canTransfer` to decide if a transfer\r\n    *  is compliant or not depending on the values stored in these state variables and on\r\n    *  the parameters of the compliance smart contract\r\n    *  @param _from The address of the sender\r\n    *  @param _to The address of the receiver\r\n    *  @param _amount The amount of tokens involved in the transfer\r\n    */\r\n    function transferred(address _from, address _to, uint256 _amount) external;\r\n\r\n   /**\r\n    *  @dev function called whenever tokens are created\r\n    *  on a wallet\r\n    *  this function can update state variables in the compliance contract\r\n    *  these state variables being used by `canTransfer` to decide if a transfer\r\n    *  is compliant or not depending on the values stored in these state variables and on\r\n    *  the parameters of the compliance smart contract\r\n    *  @param _to The address of the receiver\r\n    *  @param _amount The amount of tokens involved in the transfer\r\n    */\r\n    function created(address _to, uint256 _amount) external;\r\n\r\n   /**\r\n    *  @dev function called whenever tokens are destroyed\r\n    *  this function can update state variables in the compliance contract\r\n    *  these state variables being used by `canTransfer` to decide if a transfer\r\n    *  is compliant or not depending on the values stored in these state variables and on\r\n    *  the parameters of the compliance smart contract\r\n    *  @param _from The address of the receiver\r\n    *  @param _amount The amount of tokens involved in the transfer\r\n    */\r\n    function destroyed(address _from, uint256 _amount) external;\r\n\r\n   /**\r\n    *  @dev function used to transfer the ownership of the compliance contract\r\n    *  to a new owner, giving him access to the `OnlyOwner` functions implemented on the contract\r\n    *  @param newOwner The address of the new owner of the compliance contract\r\n    *  This function can only be called by the owner of the compliance contract\r\n    *  emits an `OwnershipTransferred` event\r\n    */\r\n    function transferOwnershipOnComplianceContract(address newOwner) external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/roles/Ownable.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/compliance/DefaultCompliance.sol\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\r\n *\r\n *     Copyright (C) 2019, Tokeny s√†rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\ncontract DefaultCompliance is ICompliance, Ownable {\r\n\r\n    /// Mapping between agents and their statuses\r\n    mapping(address => bool) private _tokenAgentsList;\r\n\r\n    /// Mapping of tokens linked to the compliance contract\r\n    mapping(address => bool) private _tokensBound;\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenAgent}.\r\n    */\r\n    function isTokenAgent(address _agentAddress) public override view returns (bool) {\r\n        return (_tokenAgentsList[_agentAddress]);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenBound}.\r\n    */\r\n    function isTokenBound(address _token) public override view returns (bool) {\r\n        return (_tokensBound[_token]);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-addTokenAgent}.\r\n     */\r\n    function addTokenAgent(address _agentAddress) external override onlyOwner {\r\n        require(!_tokenAgentsList[_agentAddress], \"This Agent is already registered\");\r\n        _tokenAgentsList[_agentAddress] = true;\r\n        emit TokenAgentAdded(_agentAddress);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenAgent}.\r\n    */\r\n    function removeTokenAgent(address _agentAddress) external override onlyOwner {\r\n        require(_tokenAgentsList[_agentAddress], \"This Agent is not registered yet\");\r\n        _tokenAgentsList[_agentAddress] = false;\r\n        emit TokenAgentRemoved(_agentAddress);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-isTokenAgent}.\r\n     */\r\n    function bindToken(address _token) external override onlyOwner {\r\n        require(!_tokensBound[_token], \"This token is already bound\");\r\n        _tokensBound[_token] = true;\r\n        emit TokenBound(_token);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenAgent}.\r\n    */\r\n    function unbindToken(address _token) external override onlyOwner {\r\n        require(_tokensBound[_token], \"This token is not bound yet\");\r\n        _tokensBound[_token] = false;\r\n        emit TokenUnbound(_token);\r\n    }\r\n\r\n   /**\r\n    *  @dev See {ICompliance-canTransfer}.\r\n    */\r\n    function canTransfer(address _from, address _to, uint256 _value) external override view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *  @dev See {ICompliance-transferred}.\r\n    */\r\n    function transferred(address _from, address _to, uint256 _value) external override {\r\n\r\n    }\r\n\r\n   /**\r\n    *  @dev See {ICompliance-created}.\r\n    */\r\n    function created(address _to, uint256 _value) external override {\r\n\r\n    }\r\n\r\n   /**\r\n    *  @dev See {ICompliance-destroyed}.\r\n    */\r\n    function destroyed(address _from, uint256 _value) external override {\r\n\r\n    }\r\n\r\n   /**\r\n    *  @dev See {ICompliance-transferOwnershipOnComplianceContract}.\r\n    */\r\n    function transferOwnershipOnComplianceContract(address newOwner) external override onlyOwner {\r\n        transferOwnership(newOwner);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"TokenAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"TokenAgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"addTokenAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"isTokenAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"removeTokenAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOnComplianceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DefaultCompliance","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e23c056d409e2772016c83127d2be9da89a02d80c8fe880f6ca6da6f27172a0f"}]}