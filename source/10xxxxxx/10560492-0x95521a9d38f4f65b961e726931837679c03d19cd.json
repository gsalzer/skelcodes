{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper, dipeshsukhani, nodarjanashia, suhailg, sebaudet, sumitrajput, apoorvlathey\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice this contract adds liquidity to Balancer liquidity pools in one transaction\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface IBFactory {\r\n    function isBPool(address b) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IBPool {\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external payable returns (uint256 poolAmountOut);\r\n\r\n    function isBound(address t) external view returns (bool);\r\n\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getDenormalizedWeight(address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getSwapFee() external view returns (uint256);\r\n\r\n    function calcPoolOutGivenSingleIn(\r\n        uint256 tokenBalanceIn,\r\n        uint256 tokenWeightIn,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 tokenAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256 poolAmountOut);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IUniswapRouter02 {\r\n    //get estimated amountOut\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    //token 2 token\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    //eth 2 token\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    //token 2 eth\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract Balancer_ZapIn_General_V2_4 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    bool private stopped = false;\r\n    uint16 public goodwill;\r\n    address public dzgoodwillAddress;\r\n\r\n    IBFactory BalancerFactory = IBFactory(\r\n        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\r\n    );\r\n    IUniswapV2Factory private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    event Zapin(\r\n        address _toWhomToIssue,\r\n        address _toBalancerPoolAddress,\r\n        uint256 _OutgoingBPT\r\n    );\r\n\r\n    constructor(\r\n        uint16 _goodwill,\r\n        address _dzgoodwillAddress\r\n    ) public {\r\n        goodwill = _goodwill;\r\n        dzgoodwillAddress = _dzgoodwillAddress;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to invest in given balancer pool through ETH/ERC20 Tokens\r\n    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zapin\r\n    @param _amount The amount of ERC to invest\r\n    @param _minPoolTokens for slippage\r\n    @return success or failure\r\n     */\r\n    function EasyZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens\r\n    ) public payable nonReentrant stopInEmergency returns (uint256 tokensBought) {\r\n        require(\r\n            BalancerFactory.isBPool(_ToBalancerPoolAddress),\r\n            \"Invalid Balancer Pool\"\r\n        );\r\n\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            require(msg.value > 0, \"ERR: No ETH sent\");\r\n\r\n            address _ToTokenContractAddress = _getBestDeal(\r\n                _ToBalancerPoolAddress,\r\n                msg.value,\r\n                _FromTokenContractAddress\r\n            );\r\n\r\n            tokensBought = _performZapIn(\r\n                msg.sender,\r\n                _FromTokenContractAddress,\r\n                _ToBalancerPoolAddress,\r\n                msg.value,\r\n                _ToTokenContractAddress,\r\n                _minPoolTokens\r\n            );\r\n\r\n            return tokensBought;\r\n        }\r\n\r\n        require(_amount > 0, \"ERR: No ERC sent\");\r\n        require(msg.value == 0, \"ERR: ETH sent with tokens\");\r\n\r\n        //transfer tokens to contract\r\n        TransferHelper.safeTransferFrom(\r\n            _FromTokenContractAddress,\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        address _ToTokenContractAddress = _getBestDeal(\r\n            _ToBalancerPoolAddress,\r\n            _amount,\r\n            _FromTokenContractAddress\r\n        );\r\n\r\n        tokensBought = _performZapIn(\r\n            msg.sender,\r\n            _FromTokenContractAddress,\r\n            _ToBalancerPoolAddress,\r\n            _amount,\r\n            _ToTokenContractAddress,\r\n            _minPoolTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to invest in given balancer pool through ETH/ERC20 Tokens with interface\r\n    @param _toWhomToIssue The user address who want to invest\r\n    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zapin\r\n    @param _amount The amount of ERC to invest\r\n    @param _IntermediateToken The token for intermediate conversion before zapin\r\n    @param _minPoolTokens for slippage\r\n    @return The quantity of Balancer Pool tokens returned\r\n     */\r\n    function ZapIn(\r\n        address payable _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        address _IntermediateToken,\r\n        uint256 _minPoolTokens\r\n    ) public payable nonReentrant stopInEmergency returns (uint256 tokensBought) {\r\n\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            require(msg.value > 0, \"ERR: No ETH sent\");\r\n\r\n            tokensBought = _performZapIn(\r\n                _toWhomToIssue,\r\n                _FromTokenContractAddress,\r\n                _ToBalancerPoolAddress,\r\n                msg.value,\r\n                _IntermediateToken,\r\n                _minPoolTokens\r\n            );\r\n\r\n            return tokensBought;\r\n        }\r\n\r\n        require(_amount > 0, \"ERR: No ERC sent\");\r\n        require(msg.value == 0, \"ERR: ETH sent with tokens\");\r\n\r\n        //transfer tokens to contract\r\n        TransferHelper.safeTransferFrom(\r\n            _FromTokenContractAddress,\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        tokensBought = _performZapIn(\r\n            _toWhomToIssue,\r\n            _FromTokenContractAddress,\r\n            _ToBalancerPoolAddress,\r\n            _amount,\r\n            _IntermediateToken,\r\n            _minPoolTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice This function internally called by ZapIn() and EasyZapIn()\r\n    @param _toWhomToIssue The user address who want to invest\r\n    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zapin\r\n    @param _amount The amount of ETH/ERC to invest\r\n    @param _IntermediateToken The token for intermediate conversion before zapin\r\n    @param _minPoolTokens for slippage\r\n    @return The quantity of Balancer Pool tokens returned\r\n     */\r\n    function _performZapIn(\r\n        address _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        address _IntermediateToken,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256 tokensBought) {\r\n        // check if isBound()\r\n        bool isBound = IBPool(_ToBalancerPoolAddress)\r\n            .isBound(_FromTokenContractAddress);\r\n\r\n        uint256 balancerTokens;\r\n\r\n        if (isBound) {\r\n            balancerTokens = _enter2Balancer(\r\n                _ToBalancerPoolAddress,\r\n                _FromTokenContractAddress,\r\n                _amount,\r\n                _minPoolTokens\r\n            );\r\n        } else {\r\n            // swap tokens or eth\r\n            uint256 tokenBought;\r\n            if (_FromTokenContractAddress == address(0)) {\r\n                tokenBought = _eth2Token(_IntermediateToken);\r\n            } else {\r\n                tokenBought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    _IntermediateToken,\r\n                    _amount\r\n                );\r\n            }\r\n\r\n            //get BPT\r\n            balancerTokens = _enter2Balancer(\r\n                _ToBalancerPoolAddress,\r\n                _IntermediateToken,\r\n                tokenBought,\r\n                _minPoolTokens\r\n            );\r\n        }\r\n\r\n        //transfer goodwill\r\n        uint256 goodwillPortion = _transferGoodwill(\r\n            _ToBalancerPoolAddress,\r\n            balancerTokens\r\n        );\r\n\r\n        emit Zapin(\r\n            _toWhomToIssue,\r\n            _ToBalancerPoolAddress,\r\n            SafeMath.sub(balancerTokens, goodwillPortion)\r\n        );\r\n\r\n        //transfer tokens to user\r\n        TransferHelper.safeTransfer(\r\n            _ToBalancerPoolAddress,\r\n            _toWhomToIssue,\r\n            SafeMath.sub(balancerTokens, goodwillPortion)\r\n        );\r\n        return SafeMath.sub(balancerTokens, goodwillPortion);\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to zapin to balancer pool\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zap in\r\n    @param _FromTokenContractAddress The token used to zap in\r\n    @param tokens2Trade The amount of tokens to invest\r\n    @return The quantity of Balancer Pool tokens returned\r\n     */\r\n    function _enter2Balancer(\r\n        address _ToBalancerPoolAddress,\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256 poolTokensOut) {\r\n        require(\r\n            IBPool(_ToBalancerPoolAddress).isBound(\r\n                _FromTokenContractAddress\r\n            ),\r\n            \"Token not bound\"\r\n        );\r\n\r\n        uint256 allowance = IERC20(_FromTokenContractAddress).allowance(\r\n            address(this),\r\n            _ToBalancerPoolAddress\r\n        );\r\n\r\n        if (allowance < tokens2Trade) {\r\n            TransferHelper.safeApprove(\r\n                _FromTokenContractAddress,\r\n                _ToBalancerPoolAddress,\r\n                uint256(-1)\r\n            );\r\n        }\r\n\r\n        poolTokensOut = IBPool(_ToBalancerPoolAddress)\r\n            .joinswapExternAmountIn(_FromTokenContractAddress, tokens2Trade, _minPoolTokens);\r\n\r\n        require(poolTokensOut > 0, \"Error in entering balancer pool\");\r\n    }\r\n\r\n    /**\r\n    @notice This function finds best token from the final tokens of balancer pool\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zap in\r\n    @param _amount amount of eth/erc to invest\r\n    @param _FromTokenContractAddress the token address which is used to invest\r\n    @return The token address having max liquidity\r\n     */\r\n    function _getBestDeal(\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        address _FromTokenContractAddress\r\n    ) internal view returns (address _token) {\r\n        //get token list\r\n        address[] memory tokens = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).getFinalTokens();\r\n\r\n        uint256 amount = _amount;\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = _FromTokenContractAddress;\r\n        path[1] = wethTokenAddress;\r\n        \r\n        if (_FromTokenContractAddress != address(0) && _FromTokenContractAddress != wethTokenAddress) {\r\n            // check if isBound()\r\n            bool isBound = IBPool(\r\n                _ToBalancerPoolAddress\r\n            ).isBound(_FromTokenContractAddress);\r\n\r\n            if (isBound) return _FromTokenContractAddress;\r\n\r\n            //get eth value for given token\r\n            amount = uniswapRouter.getAmountsOut(\r\n                        _amount,\r\n                        path\r\n                    )[1];\r\n        } else {\r\n            bool isBound = IBPool(\r\n                _ToBalancerPoolAddress\r\n            ).isBound(wethTokenAddress);\r\n\r\n            if (isBound) return wethTokenAddress;   \r\n        }\r\n\r\n        uint256 maxBPT;\r\n        path[0] = wethTokenAddress;\r\n        \r\n        for (uint256 index = 0; index < tokens.length; index++) {\r\n            uint256 expectedBPT;\r\n            \r\n            if(tokens[index] != wethTokenAddress) {\r\n                if (UniSwapV2FactoryAddress.getPair(tokens[index],wethTokenAddress) == address(0)) {\r\n                    continue;\r\n                }\r\n    \r\n                //get qty of tokens\r\n                path[1] = tokens[index];\r\n                uint256 expectedTokens = uniswapRouter.getAmountsOut(\r\n                                            amount,\r\n                                            path\r\n                                        )[1];\r\n    \r\n                //get bpt for given tokens\r\n                expectedBPT = getToken2BPT(\r\n                    _ToBalancerPoolAddress,\r\n                    expectedTokens,\r\n                    tokens[index]\r\n                );\r\n    \r\n                //get token giving max BPT\r\n                if (maxBPT < expectedBPT) {\r\n                    maxBPT = expectedBPT;\r\n                    _token = tokens[index];\r\n                }\r\n            } else {\r\n                //get bpt for given weth tokens\r\n                expectedBPT = getToken2BPT(\r\n                    _ToBalancerPoolAddress,\r\n                    amount,\r\n                    tokens[index]\r\n                );\r\n            }\r\n            \r\n            //get token giving max BPT\r\n            if (maxBPT < expectedBPT) {\r\n                maxBPT = expectedBPT;\r\n                _token = tokens[index];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Function gives the expected amount of pool tokens on investing\r\n    @param _ToBalancerPoolAddress Address of balancer pool to zapin\r\n    @param _IncomingERC The amount of ERC to invest\r\n    @param _FromToken Address of token to zap in with\r\n    @return Amount of BPT token\r\n     */\r\n    function getToken2BPT(\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _IncomingERC,\r\n        address _FromToken\r\n    ) internal view returns (uint256 tokensReturned) {\r\n        uint256 totalSupply = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).totalSupply();\r\n        uint256 swapFee = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).getSwapFee();\r\n        uint256 totalWeight = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).getTotalDenormalizedWeight();\r\n        uint256 balance = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).getBalance(_FromToken);\r\n        uint256 denorm = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).getDenormalizedWeight(_FromToken);\r\n\r\n        tokensReturned = IBPool(\r\n            _ToBalancerPoolAddress\r\n        ).calcPoolOutGivenSingleIn(\r\n            balance,\r\n            denorm,\r\n            totalSupply,\r\n            totalWeight,\r\n            _IncomingERC,\r\n            swapFee\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to buy tokens from eth\r\n    @param _tokenContractAddress Token address which we want to buy\r\n    @return The quantity of token bought\r\n     */\r\n    function _eth2Token(address _tokenContractAddress)\r\n        internal\r\n        returns (uint256 tokenBought)\r\n    {\r\n        if(_tokenContractAddress == wethTokenAddress) {\r\n            IWETH(wethTokenAddress).deposit.value(msg.value)();\r\n            return msg.value;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = wethTokenAddress;\r\n        path[1] = _tokenContractAddress;\r\n        tokenBought = uniswapRouter.swapExactETHForTokens.value(msg.value)(\r\n                            1, \r\n                            path, \r\n                            address(this), \r\n                            now + 60\r\n                        )[path.length - 1];\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap tokens\r\n    @param _FromTokenContractAddress The token address to swap from\r\n    @param _ToTokenContractAddress The token address to swap to\r\n    @param tokens2Trade The amount of tokens to swap\r\n    @return The quantity of tokens bought\r\n     */\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) public returns (uint256 tokenBought) {\r\n\r\n        TransferHelper.safeApprove(\r\n            _FromTokenContractAddress,\r\n            address(uniswapRouter),\r\n            tokens2Trade\r\n        );\r\n        \r\n        if(_FromTokenContractAddress != wethTokenAddress) {\r\n            if(_ToTokenContractAddress != wethTokenAddress) {\r\n                address[] memory path = new address[](3);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n                path[2] = _ToTokenContractAddress;\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                                    tokens2Trade,\r\n                                    1,\r\n                                    path,\r\n                                    address(this),\r\n                                    now + 60\r\n                                )[path.length - 1]; \r\n            } else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                                    tokens2Trade,\r\n                                    1,\r\n                                    path,\r\n                                    address(this),\r\n                                    now + 60\r\n                                )[path.length - 1]; \r\n            }\r\n        } else {\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _ToTokenContractAddress;\r\n            tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                                tokens2Trade,\r\n                                1,\r\n                                path,\r\n                                address(this),\r\n                                now + 60\r\n                            )[path.length - 1];\r\n        }\r\n        \r\n        \r\n        require(tokenBought > 0, \"Error in swapping ERC: 1\");\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to calculate and transfer goodwill\r\n    @param _tokenContractAddress Token in which goodwill is deducted\r\n    @param tokens2Trade The total amount of tokens to be zapped in\r\n    @return The quantity of goodwill deducted\r\n     */\r\n    function _transferGoodwill(\r\n        address _tokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 goodwillPortion) {\r\n        goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(tokens2Trade, goodwill),\r\n            10000\r\n        );\r\n\r\n        if (goodwillPortion == 0) {\r\n            return 0;\r\n        }\r\n\r\n        TransferHelper.safeTransfer(\r\n            _tokenContractAddress,\r\n            dzgoodwillAddress,\r\n            goodwillPortion\r\n        );\r\n    }\r\n    \r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_new_dzgoodwillAddress(address _new_dzgoodwillAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dzgoodwillAddress = _new_dzgoodwillAddress;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        TransferHelper.safeTransfer(\r\n            address(_TokenAddress),\r\n            owner(),\r\n            qty\r\n        );\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dzgoodwillAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toBalancerPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_OutgoingBPT\",\"type\":\"uint256\"}],\"name\":\"Zapin\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToBalancerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"}],\"name\":\"EasyZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToBalancerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_IntermediateToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"}],\"name\":\"_token2Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dzgoodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_dzgoodwillAddress\",\"type\":\"address\"}],\"name\":\"set_new_dzgoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Balancer_ZapIn_General_V2_4","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e737b6afec2320f616297e59445b60a11e3ef75f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ace6eff4531870e2ddcc591fdbea71dc6c7200bd2b6329ded422c9c320709d2f"}]}