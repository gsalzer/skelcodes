{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice this contract swaps between two assets utilizing various liquidity pools.\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBFactory {\r\n    function isBPool(address b) external view returns (bool);\r\n}\r\n\r\ninterface IBpool {\r\n    function isPublicSwap() external view returns (bool);\r\n\r\n    function isBound(address t) external view returns (bool);\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        address tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint256 maxAmountIn,\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut)\r\n        external\r\n        view\r\n        returns (uint256 spotPrice);\r\n}\r\n\r\ninterface IUniswapRouter02 {\r\n    //get estimated amountOut\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    //token 2 token\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    //eth 2 token\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    //token 2 eth\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ICurve {\r\n    function underlying_coins(int128 index) external view returns (address);\r\n\r\n    function coins(int128 index) external view returns (address);\r\n\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface ICompound {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns (bool isListed, uint256 collateralFactorMantissa);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\ninterface ICompoundToken {\r\n    function underlying() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\ninterface ICompoundEther {\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\ninterface IIearn {\r\n    function token() external view returns (address);\r\n\r\n    function calcPoolValueInToken() external view returns (uint256);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\ninterface IAToken {\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function underlyingAssetAddress() external returns (address);\r\n}\r\n\r\ninterface IAaveLendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function getLendingPoolCore() external view returns (address payable);\r\n}\r\n\r\ninterface IAaveLendingPool {\r\n    function deposit(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint16 _referralCode\r\n    ) external payable;\r\n}\r\n\r\ncontract Zapper_Swap_General_V1_3 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    IAaveLendingPoolAddressesProvider\r\n        private constant lendingPoolAddressProvider = IAaveLendingPoolAddressesProvider(\r\n        0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\r\n    );\r\n\r\n    IBFactory private constant BalancerFactory = IBFactory(\r\n        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\r\n    );\r\n\r\n    address private constant renBTCCurveSwapContract = address(\r\n        0x93054188d876f558f4a66B2EF1d97d16eDf0895B\r\n    );\r\n\r\n    address private constant sBTCCurveSwapContract = address(\r\n        0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714\r\n    );\r\n\r\n    IWETH private constant wethContract = IWETH(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    address private constant ETHAddress = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    uint256\r\n        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    mapping(address => address) public cToken;\r\n    mapping(address => address) public yToken;\r\n    mapping(address => address) public aToken;\r\n\r\n    bool public stopped = false;\r\n\r\n    constructor() public {\r\n        //mapping for cETH\r\n        cToken[address(\r\n            0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5\r\n        )] = ETHAddress;\r\n    }\r\n\r\n    /**\r\n\t@notice This function adds c token addresses to a mapping\r\n\t@dev For cETH token, mapping is already added in constructor\r\n    @param _cToken token address of c-token for given underlying asset\r\n\t\t */\r\n    function addCToken(address[] memory _cToken) public onlyOwner {\r\n        for (uint256 i = 0; i < _cToken.length; i++) {\r\n            cToken[_cToken[i]] = ICompound(_cToken[i]).underlying();\r\n        }\r\n    }\r\n\r\n    /**\r\n\t@notice This function adds y token addresses to a mapping\r\n    @param _yToken token address of y-token\r\n\t\t*/\r\n    function addYToken(address[] memory _yToken) public onlyOwner {\r\n        for (uint256 i = 0; i < _yToken.length; i++) {\r\n            yToken[_yToken[i]] = IIearn(_yToken[i]).token();\r\n        }\r\n    }\r\n\r\n    /**\r\n\t@notice This function adds a token addresses to a mapping\r\n    @param _aToken token address of a-token for given underlying asset\r\n\t\t */\r\n    function addAToken(address[] memory _aToken) public onlyOwner {\r\n        for (uint256 i = 0; i < _aToken.length; i++) {\r\n            aToken[_aToken[i]] = IAToken(_aToken[i]).underlyingAssetAddress();\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used swap tokens using multiple exchanges\r\n    @param toWhomToIssue address to which tokens should be sent after swap\r\n\t@param path token addresses indicating the conversion path\r\n\t@param amountIn amount of tokens to swap\r\n    @param minTokenOut min amount of expected tokens\r\n    @param withPool indicates the exchange and its sequence we want to swap from\r\n    @param poolData pool or token addresses needed for swapping tokens according to the exchange\r\n\t@param starts indicates the index of path array for each swap\r\n    @return amount of tokens received after swap\r\n     */\r\n    function MultiExchangeSwap(\r\n        address payable toWhomToIssue,\r\n        address[] calldata path,\r\n        uint256 amountIn,\r\n        uint256 minTokenOut,\r\n        uint8[] calldata starts,\r\n        uint8[] calldata withPool,\r\n        address[] calldata poolData\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        stopInEmergency\r\n        returns (uint256 tokensBought)\r\n    {\r\n        require(toWhomToIssue != address(0), \"Invalid receiver address\");\r\n        require(path[0] != path[path.length - 1], \"Cannot swap same tokens\");\r\n\r\n        tokensBought = _swap(\r\n            path,\r\n            _getTokens(path[0], amountIn),\r\n            starts,\r\n            withPool,\r\n            poolData\r\n        );\r\n\r\n        require(tokensBought >= minTokenOut, \"High Slippage\");\r\n        _sendTokens(toWhomToIssue, path[path.length - 1], tokensBought);\r\n    }\r\n\r\n    //swap function\r\n    function _swap(\r\n        address[] memory path,\r\n        uint256 tokensToSwap,\r\n        uint8[] memory starts,\r\n        uint8[] memory withPool,\r\n        address[] memory poolData\r\n    ) internal returns (uint256) {\r\n        address _to;\r\n        uint8 poolIndex = 0;\r\n        address[] memory _poolData;\r\n        address _from = path[starts[0]];\r\n\r\n        for (uint256 index = 0; index < withPool.length; index++) {\r\n            uint256 endIndex = index == withPool.length.sub(1)\r\n                ? path.length - 1\r\n                : starts[index + 1];\r\n\r\n            _to = path[endIndex];\r\n\r\n            {\r\n                if (withPool[index] == 2) {\r\n                    _poolData = _getPath(path, starts[index], endIndex + 1);\r\n                } else {\r\n                    _poolData = new address[](1);\r\n                    _poolData[0] = poolData[poolIndex++];\r\n                }\r\n            }\r\n\r\n            tokensToSwap = _swapFromPool(\r\n                _from,\r\n                _to,\r\n                tokensToSwap,\r\n                withPool[index],\r\n                _poolData\r\n            );\r\n\r\n            _from = _to;\r\n        }\r\n        return tokensToSwap;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used swap tokens using multiple exchanges\r\n    @param fromToken token addresses to swap from\r\n\t@param toToken token addresses to swap into\r\n\t@param amountIn amount of tokens to swap\r\n    @param withPool indicates the exchange we want to swap from\r\n    @param poolData pool or token addresses needed for swapping tokens according to the exchange\r\n\t@return amount of tokens received after swap\r\n     */\r\n    function _swapFromPool(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn,\r\n        uint256 withPool,\r\n        address[] memory poolData\r\n    ) internal returns (uint256) {\r\n        require(fromToken != toToken, \"Cannot swap same tokens\");\r\n        require(withPool <= 3, \"Invalid Exchange\");\r\n\r\n        if (withPool == 1) {\r\n            return\r\n                _swapWithBalancer(poolData[0], fromToken, toToken, amountIn, 1);\r\n        } else if (withPool == 2) {\r\n            return\r\n                _swapWithUniswapV2(fromToken, toToken, poolData, amountIn, 1);\r\n        } else if (withPool == 3) {\r\n            return _swapWithCurve(poolData[0], fromToken, toToken, amountIn, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n\t@notice This function returns part of the given array \r\n    @param addresses address array to copy from\r\n\t@param _start start index\r\n\t@param _end end index\r\n    @return addressArray copied from given array\r\n\t\t */\r\n    function _getPath(\r\n        address[] memory addresses,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) internal pure returns (address[] memory addressArray) {\r\n        uint256 len = _end.sub(_start);\r\n        require(len > 1, \"ERR_UNIV2_PATH\");\r\n        addressArray = new address[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (\r\n                addresses[_start + i] == address(0) ||\r\n                addresses[_start + i] == ETHAddress\r\n            ) {\r\n                addressArray[i] = address(wethContract);\r\n            } else {\r\n                addressArray[i] = addresses[_start + i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _sendTokens(\r\n        address payable toWhomToIssue,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token == ETHAddress || token == address(0)) {\r\n            toWhomToIssue.transfer(amount);\r\n        } else {\r\n            IERC20(token).safeTransfer(toWhomToIssue, amount);\r\n        }\r\n    }\r\n\r\n    function _swapWithBalancer(\r\n        address bpoolAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn,\r\n        uint256 minTokenOut\r\n    ) internal returns (uint256 tokenBought) {\r\n        require(BalancerFactory.isBPool(bpoolAddress), \"Invalid balancer pool\");\r\n\r\n        IBpool bpool = IBpool(bpoolAddress);\r\n        require(bpool.isPublicSwap(), \"Swap not allowed for this pool\");\r\n\r\n        address _to = toToken;\r\n        if (fromToken == address(0)) {\r\n            wethContract.deposit.value(amountIn)();\r\n            fromToken = address(wethContract);\r\n        } else if (toToken == address(0)) {\r\n            _to = address(wethContract);\r\n        }\r\n        require(bpool.isBound(fromToken), \"From Token not bound\");\r\n        require(bpool.isBound(_to), \"To Token not bound\");\r\n\r\n        //approve it to exchange address\r\n        IERC20(fromToken).safeApprove(bpoolAddress, amountIn);\r\n\r\n        //swap tokens\r\n        (tokenBought, ) = bpool.swapExactAmountIn(\r\n            fromToken,\r\n            amountIn,\r\n            _to,\r\n            minTokenOut,\r\n            uint256(-1)\r\n        );\r\n\r\n        if (toToken == address(0)) {\r\n            wethContract.withdraw(tokenBought);\r\n        }\r\n    }\r\n\r\n    function _swapWithUniswapV2(\r\n        address fromToken,\r\n        address toToken,\r\n        address[] memory path,\r\n        uint256 amountIn,\r\n        uint256 minTokenOut\r\n    ) internal returns (uint256 tokenBought) {\r\n        //unwrap & approve it to router contract\r\n        uint256 tokensUnwrapped = amountIn;\r\n        address _fromToken = fromToken;\r\n        if (fromToken != address(0)) {\r\n            (tokensUnwrapped, _fromToken) = _unwrap(fromToken, amountIn);\r\n            IERC20(_fromToken).safeApprove(\r\n                address(uniswapRouter),\r\n                tokensUnwrapped\r\n            );\r\n        }\r\n\r\n        //swap and transfer tokens\r\n        if (fromToken == address(0)) {\r\n            tokenBought = uniswapRouter.swapExactETHForTokens.value(\r\n                tokensUnwrapped\r\n            )(minTokenOut, path, address(this), deadline)[path.length - 1];\r\n        } else if (toToken == address(0)) {\r\n            tokenBought = uniswapRouter.swapExactTokensForETH(\r\n                tokensUnwrapped,\r\n                minTokenOut,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[path.length - 1];\r\n        } else {\r\n            tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                tokensUnwrapped,\r\n                minTokenOut,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[path.length - 1];\r\n        }\r\n    }\r\n\r\n    function _swapWithCurve(\r\n        address curveExchangeAddress,\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn,\r\n        uint256 minTokenOut\r\n    ) internal returns (uint256 tokenBought) {\r\n        require(\r\n            curveExchangeAddress != address(0),\r\n            \"ERR_Invaid_curve_exchange\"\r\n        );\r\n        ICurve curveExchange = ICurve(curveExchangeAddress);\r\n\r\n        (uint256 tokensUnwrapped, address _fromToken) = _unwrap(\r\n            fromToken,\r\n            amountIn\r\n        );\r\n\r\n        //approve it to exchange address\r\n        IERC20(_fromToken).safeApprove(curveExchangeAddress, tokensUnwrapped);\r\n\r\n        int128 i;\r\n        int128 j;\r\n\r\n        //swap tokens\r\n        if (\r\n            curveExchangeAddress == renBTCCurveSwapContract ||\r\n            curveExchangeAddress == sBTCCurveSwapContract\r\n        ) {\r\n            int128 length = (curveExchangeAddress == renBTCCurveSwapContract)\r\n                ? 2\r\n                : 3;\r\n\r\n            for (int128 index = 0; index < length; index++) {\r\n                if (curveExchange.coins(index) == _fromToken) {\r\n                    i = index;\r\n                } else if (curveExchange.coins(index) == toToken) {\r\n                    j = index;\r\n                }\r\n            }\r\n\r\n            curveExchange.exchange(i, j, tokensUnwrapped, minTokenOut);\r\n        } else {\r\n            address compCurveSwapContract = address(\r\n                0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56\r\n            );\r\n            address usdtCurveSwapContract = address(\r\n                0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C\r\n            );\r\n\r\n            int128 length = 4;\r\n            if (curveExchangeAddress == compCurveSwapContract) {\r\n                length = 2;\r\n            } else if (curveExchangeAddress == usdtCurveSwapContract) {\r\n                length = 3;\r\n            }\r\n\r\n            for (int128 index = 0; index < length; index++) {\r\n                if (curveExchange.underlying_coins(index) == _fromToken) {\r\n                    i = index;\r\n                } else if (curveExchange.underlying_coins(index) == toToken) {\r\n                    j = index;\r\n                }\r\n            }\r\n\r\n            curveExchange.exchange_underlying(\r\n                i,\r\n                j,\r\n                tokensUnwrapped,\r\n                minTokenOut\r\n            );\r\n        }\r\n\r\n        if (toToken == ETHAddress || toToken == address(0)) {\r\n            tokenBought = address(this).balance;\r\n        } else {\r\n            tokenBought = IERC20(toToken).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function unwrapWeth(\r\n        address payable _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 minTokens\r\n    )\r\n        public\r\n        stopInEmergency\r\n        returns (uint256 tokensUnwrapped, address toToken)\r\n    {\r\n        require(_toWhomToIssue != address(0), \"Invalid receiver address\");\r\n        require(\r\n            _FromTokenContractAddress == address(wethContract),\r\n            \"Only unwraps WETH, use unwrap() for other tokens\"\r\n        );\r\n\r\n        uint256 initialEthbalance = address(this).balance;\r\n\r\n        uint256 tokensToSwap = _getTokens(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        wethContract.withdraw(tokensToSwap);\r\n        tokensUnwrapped = address(this).balance.sub(initialEthbalance);\r\n        toToken = address(0);\r\n\r\n        require(tokensUnwrapped >= minTokens, \"High Slippage\");\r\n\r\n        //transfer\r\n        _sendTokens(_toWhomToIssue, toToken, tokensUnwrapped);\r\n    }\r\n\r\n    function unwrap(\r\n        address payable _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 minTokens\r\n    )\r\n        public\r\n        stopInEmergency\r\n        returns (uint256 tokensUnwrapped, address toToken)\r\n    {\r\n        require(_toWhomToIssue != address(0), \"Invalid receiver address\");\r\n        uint256 tokensToSwap = _getTokens(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        (tokensUnwrapped, toToken) = _unwrap(\r\n            _FromTokenContractAddress,\r\n            tokensToSwap\r\n        );\r\n\r\n        require(tokensUnwrapped >= minTokens, \"High Slippage\");\r\n\r\n        //transfer\r\n        _sendTokens(_toWhomToIssue, toToken, tokensUnwrapped);\r\n    }\r\n\r\n    function _unwrap(address _FromTokenContractAddress, uint256 tokens2Trade)\r\n        internal\r\n        returns (uint256 tokensUnwrapped, address toToken)\r\n    {\r\n        uint256 initialEthbalance = address(this).balance;\r\n\r\n        if (cToken[_FromTokenContractAddress] != address(0)) {\r\n            require(\r\n                ICompoundToken(_FromTokenContractAddress).redeem(\r\n                    tokens2Trade\r\n                ) == 0,\r\n                \"Error in unwrapping\"\r\n            );\r\n            toToken = cToken[_FromTokenContractAddress];\r\n            if (toToken == ETHAddress) {\r\n                tokensUnwrapped = address(this).balance;\r\n                tokensUnwrapped = tokensUnwrapped.sub(initialEthbalance);\r\n            } else {\r\n                tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\r\n            }\r\n        } else if (yToken[_FromTokenContractAddress] != address(0)) {\r\n            IIearn(_FromTokenContractAddress).withdraw(tokens2Trade);\r\n            toToken = IIearn(_FromTokenContractAddress).token();\r\n            tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\r\n        } else if (aToken[_FromTokenContractAddress] != address(0)) {\r\n            IAToken(_FromTokenContractAddress).redeem(tokens2Trade);\r\n            toToken = IAToken(_FromTokenContractAddress)\r\n                .underlyingAssetAddress();\r\n            if (toToken == ETHAddress) {\r\n                tokensUnwrapped = address(this).balance;\r\n                tokensUnwrapped = tokensUnwrapped.sub(initialEthbalance);\r\n            } else {\r\n                tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\r\n            }\r\n        } else {\r\n            toToken = _FromTokenContractAddress;\r\n            tokensUnwrapped = tokens2Trade;\r\n        }\r\n    }\r\n\r\n    function wrap(\r\n        address payable _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 minTokens,\r\n        uint256 _wrapInto\r\n    ) public payable stopInEmergency returns (uint256 tokensWrapped) {\r\n        require(_toWhomToIssue != address(0), \"Invalid receiver address\");\r\n        require(_wrapInto <= 3, \"Invalid to Token\");\r\n        uint256 tokensToSwap = _getTokens(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        tokensWrapped = _wrap(\r\n            _FromTokenContractAddress,\r\n            _ToTokenContractAddress,\r\n            tokensToSwap,\r\n            _wrapInto\r\n        );\r\n\r\n        require(tokensWrapped >= minTokens, \"High Slippage\");\r\n\r\n        //transfer tokens\r\n        _sendTokens(_toWhomToIssue, _ToTokenContractAddress, tokensWrapped);\r\n    }\r\n\r\n    function _wrap(\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 _wrapInto\r\n    ) internal returns (uint256 tokensWrapped) {\r\n        //weth\r\n        if (_wrapInto == 0) {\r\n            require(\r\n                _FromTokenContractAddress == address(0),\r\n                \"Cannot wrap into WETH\"\r\n            );\r\n            require(\r\n                _ToTokenContractAddress == address(wethContract),\r\n                \"Invalid toToken\"\r\n            );\r\n\r\n            wethContract.deposit.value(tokens2Trade)();\r\n            return tokens2Trade;\r\n        } else if (_wrapInto == 1) {\r\n            //Compound\r\n            if (_FromTokenContractAddress == address(0)) {\r\n                ICompoundEther(_ToTokenContractAddress).mint.value(\r\n                    tokens2Trade\r\n                )();\r\n            } else {\r\n                IERC20(_FromTokenContractAddress).safeApprove(\r\n                    address(_ToTokenContractAddress),\r\n                    tokens2Trade\r\n                );\r\n                ICompoundToken(_ToTokenContractAddress).mint(tokens2Trade);\r\n            }\r\n        } else if (_wrapInto == 2) {\r\n            //IEarn\r\n            IERC20(_FromTokenContractAddress).safeApprove(\r\n                address(_ToTokenContractAddress),\r\n                tokens2Trade\r\n            );\r\n            IIearn(_ToTokenContractAddress).deposit(tokens2Trade);\r\n        } else {\r\n            // Aave\r\n            if (_FromTokenContractAddress == address(0)) {\r\n                IAaveLendingPool(lendingPoolAddressProvider.getLendingPool())\r\n                    .deposit\r\n                    .value(tokens2Trade)(ETHAddress, tokens2Trade, 0);\r\n            } else {\r\n                //approve lending pool core\r\n                IERC20(_FromTokenContractAddress).safeApprove(\r\n                    address(lendingPoolAddressProvider.getLendingPoolCore()),\r\n                    tokens2Trade\r\n                );\r\n\r\n                //get lending pool and call deposit\r\n                IAaveLendingPool(lendingPoolAddressProvider.getLendingPool())\r\n                    .deposit(_FromTokenContractAddress, tokens2Trade, 0);\r\n            }\r\n        }\r\n        tokensWrapped = IERC20(_ToTokenContractAddress).balanceOf(\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function _getTokens(address token, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        if (token == address(0)) {\r\n            require(msg.value > 0, \"No eth sent\");\r\n            return msg.value;\r\n        }\r\n        require(amount > 0, \"Invalid token amount\");\r\n        require(msg.value == 0, \"Eth sent with token\");\r\n\r\n        //transfer token\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        return amount;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.safeTransfer(owner(), qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"starts\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"withPool\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"poolData\",\"type\":\"address[]\"}],\"name\":\"MultiExchangeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_aToken\",\"type\":\"address[]\"}],\"name\":\"addAToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cToken\",\"type\":\"address[]\"}],\"name\":\"addCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yToken\",\"type\":\"address[]\"}],\"name\":\"addYToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensUnwrapped\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"unwrapWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensUnwrapped\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wrapInto\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensWrapped\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Zapper_Swap_General_V1_3","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bf8059556f649b915b797cbbcd86ed406eae09723a3e21105c3886b7f0aee50a"}]}