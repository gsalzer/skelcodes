{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IMatchingMarket.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ninterface IMatchingMarket {\r\n\r\n    struct OfferInfo {\r\n        uint      pay_amt;\r\n        IERC20    pay_gem;\r\n        uint      buy_amt;\r\n        IERC20    buy_gem;\r\n        address   owner;\r\n        uint64    timestamp;\r\n    }\r\n\r\n    function getBestOffer(IERC20 sell_gem, IERC20 buy_gem) external view returns(uint);\r\n    function getWorseOffer(uint id) external view returns(uint);\r\n    function offers(uint) external view returns(OfferInfo memory);\r\n    function getOfferCount(IERC20 sell_gem, IERC20 buy_gem) external view returns(uint);\r\n}\r\n\r\n// File: contracts/OasisOrderBookHelper.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract OasisOrderBookHelper {\r\n\r\n    IMatchingMarket constant oasisExchange = IMatchingMarket(0x794e6e91555438aFc3ccF1c5076A74F42133d08D);\r\n\r\n    struct Offer {\r\n        uint256   payAmount;\r\n        IERC20    payToken;\r\n        uint256   buyAmount;\r\n        IERC20    buyToken;\r\n    }\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function getOrderBookByPairs(\r\n        IERC20[] calldata tokens0,\r\n        IERC20[] calldata tokens1,\r\n        uint256 maxOrders\r\n    )\r\n        external\r\n        view\r\n        returns (Offer[][][] memory orders)\r\n    {\r\n        orders = new Offer[][][](tokens0.length);\r\n        for (uint i = 0; i < tokens0.length; i++) {\r\n            orders[i] = getOrderBookByPair(tokens0[i], tokens1[i], maxOrders);\r\n        }\r\n    }\r\n\r\n    function getOrderBookByPair(\r\n        IERC20 token0,\r\n        IERC20 token1,\r\n        uint256 maxOrders\r\n    )\r\n        public\r\n        view\r\n        returns (Offer[][] memory orders)\r\n    {\r\n        orders = new Offer[][](2);\r\n        orders[0] = getOrdersByPair(token0, token1, maxOrders); // bids\r\n        orders[1] = getOrdersByPair(token1, token0, maxOrders); // asks\r\n    }\r\n\r\n    function getOrdersByPair(\r\n        IERC20 sellToken,\r\n        IERC20 buyToken,\r\n        uint256 maxOrders\r\n    )\r\n        public\r\n        view\r\n        returns (Offer[] memory orders)\r\n    {\r\n\r\n        uint256 offersCount = oasisExchange.getOfferCount(sellToken, buyToken);\r\n        if (offersCount > maxOrders) {\r\n            offersCount = maxOrders;\r\n        }\r\n        uint256 offerId = oasisExchange.getBestOffer(sellToken, buyToken);\r\n        orders = new Offer[](offersCount);\r\n        for(uint i = 0; i < offersCount; i++) {\r\n            IMatchingMarket.OfferInfo memory info = oasisExchange.offers(offerId);\r\n            orders[i].payAmount =  info.pay_amt;\r\n            orders[i].payToken  =  info.pay_gem;\r\n            orders[i].buyAmount =  info.buy_amt;\r\n            orders[i].buyToken  =  info.buy_gem;\r\n            offerId = oasisExchange.getWorseOffer(offerId);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOrders\",\"type\":\"uint256\"}],\"name\":\"getOrderBookByPair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"}],\"internalType\":\"struct OasisOrderBookHelper.Offer[][]\",\"name\":\"orders\",\"type\":\"tuple[][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens0\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens1\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxOrders\",\"type\":\"uint256\"}],\"name\":\"getOrderBookByPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"}],\"internalType\":\"struct OasisOrderBookHelper.Offer[][][]\",\"name\":\"orders\",\"type\":\"tuple[][][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOrders\",\"type\":\"uint256\"}],\"name\":\"getOrdersByPair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"}],\"internalType\":\"struct OasisOrderBookHelper.Offer[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OasisOrderBookHelper","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://704ffb27936d578177ae9f790a50ee3b0a831283c1b2d8b69fec23b827f0d349"}]}