{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IOneRouterView.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ninterface IOneRouterView {\r\n    struct Swap {\r\n        IERC20 destToken;\r\n        uint256 flags;\r\n        uint256 destTokenEthPriceTimesGasPrice;\r\n        address[] disabledDexes;\r\n    }\r\n\r\n    struct Path {\r\n        Swap[] swaps;\r\n    }\r\n\r\n    struct SwapResult {\r\n        uint256[] returnAmounts;\r\n        uint256[] estimateGasAmounts;\r\n        uint256[][] distributions;\r\n        address[][] dexes;\r\n    }\r\n\r\n    struct PathResult {\r\n        SwapResult[] swaps;\r\n    }\r\n\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        uint256[] calldata amounts,\r\n        Swap calldata swap\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            Path[] memory paths,\r\n            PathResult[] memory pathResults,\r\n            SwapResult memory splitResult\r\n        );\r\n\r\n    function getSwapReturn(\r\n        IERC20 fromToken,\r\n        uint256[] calldata amounts,\r\n        Swap calldata swap\r\n    )\r\n        external\r\n        view\r\n        returns(SwapResult memory result);\r\n\r\n    function getPathReturn(\r\n        IERC20 fromToken,\r\n        uint256[] calldata amounts,\r\n        Path calldata path\r\n    )\r\n        external\r\n        view\r\n        returns(PathResult memory result);\r\n\r\n    function getMultiPathReturn(\r\n        IERC20 fromToken,\r\n        uint256[] calldata amounts,\r\n        Path[] calldata paths\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            PathResult[] memory pathResults,\r\n            SwapResult memory splitResult\r\n        );\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/UniERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 public constant ZERO_ADDRESS = IERC20(0);\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (token == ZERO_ADDRESS || token == ETH_ADDRESS);\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                to.transfer(amount);\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniTransferFromSender(IERC20 token, address payable target, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                require(msg.value >= amount, \"UniERC20: not enough value\");\r\n                target.transfer(amount);\r\n                if (msg.value > amount) {\r\n                    // Return remainder if exist\r\n                    msg.sender.transfer(msg.value.sub(amount));\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(msg.sender, target, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount == 0) {\r\n                token.safeApprove(to, 0);\r\n                return;\r\n            }\r\n\r\n            uint256 allowance = token.allowance(address(this), to);\r\n            if (allowance < amount) {\r\n                if (allowance > 0) {\r\n                    token.safeApprove(to, 0);\r\n                }\r\n                token.safeApprove(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniDecimals(IERC20 token) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{ gas: 20000 }(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return success ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\r\n            abi.encodeWithSignature(\"symbol()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{ gas: 20000 }(\r\n                abi.encodeWithSignature(\"SYMBOL()\")\r\n            );\r\n        }\r\n\r\n        if (success && data.length >= 96) {\r\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n            if (offset == 0x20 && len > 0 && len <= 256) {\r\n                return string(abi.decode(data, (bytes)));\r\n            }\r\n        }\r\n\r\n        if (success && data.length == 32) {\r\n            uint len = 0;\r\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\r\n                len++;\r\n            }\r\n\r\n            if (len > 0) {\r\n                bytes memory result = new bytes(len);\r\n                for (uint i = 0; i < len; i++) {\r\n                    result[i] = data[i];\r\n                }\r\n                return string(result);\r\n            }\r\n        }\r\n\r\n        return _toHex(address(token));\r\n    }\r\n\r\n    function _toHex(address account) private pure returns(string memory) {\r\n        return _toHex(abi.encodePacked(account));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        uint j = 2;\r\n        for (uint i = 0; i < data.length; i++) {\r\n            uint a = uint8(data[i]) >> 4;\r\n            uint b = uint8(data[i]) & 0x0f;\r\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\r\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\r\n        }\r\n\r\n        return string(str);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMooniswap.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface IMooniswapRegistry {\r\n    function pools(IERC20 token1, IERC20 token2) external view returns(IMooniswap);\r\n    function isPool(address addr) external view returns(bool);\r\n}\r\n\r\n\r\ninterface IMooniswap {\r\n    function fee() external view returns (uint256);\r\n    function tokens(uint256 i) external view returns (IERC20);\r\n    function getBalanceForAddition(IERC20 token) external view returns(uint256);\r\n    function getBalanceForRemoval(IERC20 token) external view returns(uint256);\r\n    function getReturn(IERC20 fromToken, IERC20 destToken, uint256 amount) external view returns(uint256 returnAmount);\r\n\r\n    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable returns(uint256 fairSupply);\r\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\r\n    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 returnAmount);\r\n}\r\n\r\n// File: contracts/ISource.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface ISource {\r\n    function calculate(IERC20 fromToken, uint256[] calldata amounts, IOneRouterView.Swap calldata swap)\r\n        external view returns(uint256[] memory rets, address dex, uint256 gas);\r\n\r\n    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 flags) external;\r\n}\r\n\r\n// File: contracts/sources/MooniswapSource.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary MooniswapHelper {\r\n    using SafeMath for uint256;\r\n    using UniERC20 for IERC20;\r\n\r\n    IMooniswapRegistry constant public REGISTRY = IMooniswapRegistry(0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303);\r\n\r\n    function getReturn(\r\n        IMooniswap mooniswap,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal view returns(uint256 ret) {\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = amount;\r\n        uint256[] memory rets = getReturns(mooniswap, fromToken, destToken, amounts);\r\n        if (rets.length > 0) {\r\n            return rets[0];\r\n        }\r\n    }\r\n\r\n    function getReturns(\r\n        IMooniswap mooniswap,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts\r\n    ) internal view returns(uint256[] memory rets) {\r\n        rets = new uint256[](amounts.length);\r\n\r\n        uint256 fee = mooniswap.fee();\r\n        uint256 fromBalance = mooniswap.getBalanceForAddition(fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken);\r\n        uint256 destBalance = mooniswap.getBalanceForRemoval(destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken);\r\n        if (fromBalance > 0 && destBalance > 0) {\r\n            for (uint i = 0; i < amounts.length; i++) {\r\n                uint256 amount = amounts[i].sub(amounts[i].mul(fee).div(1e18));\r\n                rets[i] = amount.mul(destBalance).div(\r\n                    fromBalance.add(amount)\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract MooniswapSourceView {\r\n    using SafeMath for uint256;\r\n    using UniERC20 for IERC20;\r\n    using MooniswapHelper for IMooniswap;\r\n\r\n    function _calculateMooniswap(IERC20 fromToken, uint256[] memory amounts, IOneRouterView.Swap memory swap) internal view returns(uint256[] memory rets, address dex, uint256 gas) {\r\n        IMooniswap mooniswap = MooniswapHelper.REGISTRY.pools(\r\n            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\r\n            swap.destToken.isETH() ? UniERC20.ZERO_ADDRESS : swap.destToken\r\n        );\r\n        if (mooniswap == IMooniswap(0)) {\r\n            return (new uint256[](0), address(0), 0);\r\n        }\r\n\r\n        for (uint t = 0; t < swap.disabledDexes.length; t++) {\r\n            if (swap.disabledDexes[t] == address(mooniswap)) {\r\n                return (new uint256[](0), address(0), 0);\r\n            }\r\n        }\r\n\r\n        rets = mooniswap.getReturns(fromToken, swap.destToken, amounts);\r\n        if (rets.length == 0 || rets[0] == 0) {\r\n            return (new uint256[](0), address(0), 0);\r\n        }\r\n\r\n        return (rets, address(mooniswap), (fromToken.isETH() || swap.destToken.isETH()) ? 80_000 : 110_000);\r\n    }\r\n}\r\n\r\n\r\ncontract MooniswapSourceSwap {\r\n    using UniERC20 for IERC20;\r\n\r\n    function _swapOnMooniswap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 /*flags*/) internal {\r\n        IMooniswap mooniswap = MooniswapHelper.REGISTRY.pools(\r\n            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\r\n            destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken\r\n        );\r\n\r\n        fromToken.uniApprove(address(mooniswap), amount);\r\n        mooniswap.swap{ value: fromToken.isETH() ? amount : 0 }(\r\n            fromToken.isETH() ? UniERC20.ZERO_ADDRESS : fromToken,\r\n            destToken.isETH() ? UniERC20.ZERO_ADDRESS : destToken,\r\n            amount,\r\n            0,\r\n            0x68a17B587CAF4f9329f0e372e3A78D23A46De6b5\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract MooniswapSourcePublic is ISource, MooniswapSourceView, MooniswapSourceSwap {\r\n    receive() external payable {\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        require(msg.sender != tx.origin, \"ETH deposit rejected\");\r\n    }\r\n\r\n    function calculate(IERC20 fromToken, uint256[] memory amounts, IOneRouterView.Swap memory swap) public view override returns(uint256[] memory rets, address dex, uint256 gas) {\r\n        return _calculateMooniswap(fromToken, amounts, swap);\r\n    }\r\n\r\n    function swap(IERC20 fromToken, IERC20 destToken, uint256 amount, uint256 flags) public override {\r\n        return _swapOnMooniswap(fromToken, destToken, amount, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/KyberMooniswapReserve.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IKyberReserve {\r\n    function getConversionRate(\r\n        IERC20 src,\r\n        IERC20 dst,\r\n        uint256 srcQty,\r\n        uint256 blockNumber\r\n    ) external view returns(uint);\r\n\r\n    function trade(\r\n        IERC20 srcToken,\r\n        uint256 srcAmount,\r\n        IERC20 dstToken,\r\n        address payable destAddress,\r\n        uint256 conversionRate,\r\n        bool validate\r\n    ) external payable returns(bool);\r\n}\r\n\r\n\r\ncontract KyberMooniswapReserve is IKyberReserve, MooniswapSourceView, MooniswapSourceSwap {\r\n    using UniERC20 for IERC20;\r\n\r\n    address public constant KYBER_NETWORK = 0x7C66550C9c730B6fdd4C03bc2e73c5462c5F7ACC;\r\n\r\n    function getConversionRate(\r\n        IERC20 src,\r\n        IERC20 dst,\r\n        uint256 srcQty,\r\n        uint256 /*blockNumber*/\r\n    ) external view override returns(uint256) {\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = srcQty;\r\n        (uint256[] memory results,,) = _calculateMooniswap(src, amounts, IOneRouterView.Swap({\r\n            destToken: dst,\r\n            flags: 0,\r\n            destTokenEthPriceTimesGasPrice: 0,\r\n            disabledDexes: new address[](0)\r\n        }));\r\n        if (results.length == 0 || results[0] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _convertAmountToRate(src, dst, results[0]);\r\n    }\r\n\r\n    function trade(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dst,\r\n        address payable destAddress,\r\n        uint256 conversionRate,\r\n        bool validate\r\n    ) external payable override returns(bool) {\r\n        require(msg.sender == KYBER_NETWORK, \"Access denied\");\r\n\r\n        src.uniTransferFromSender(payable(address(this)), srcAmount);\r\n        if (validate) {\r\n            require(conversionRate > 0, \"Wrong conversionRate\");\r\n            if (src.isETH()) {\r\n                require(msg.value == srcAmount, \"Wrong msg.value or srcAmount\");\r\n            } else {\r\n                require(msg.value == 0, \"Wrong non zero msg.value\");\r\n            }\r\n        }\r\n\r\n        _swapOnMooniswap(src, dst, srcAmount, 0);\r\n\r\n        uint256 returnAmount = dst.uniBalanceOf(address(this));\r\n        uint256 actualRate = _convertAmountToRate(src, dst, returnAmount);\r\n        require(actualRate <= conversionRate, \"Rate exceeded conversionRate\");\r\n\r\n        dst.uniTransfer(destAddress, returnAmount);\r\n        return true;\r\n    }\r\n\r\n    function _convertAmountToRate(IERC20 src, IERC20 dst, uint256 amount) private view returns(uint256) {\r\n        return amount.mul(1e18)\r\n            .mul(10 ** src.uniDecimals())\r\n            .div(10 ** dst.uniDecimals());\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"KYBER_NETWORK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"validate\",\"type\":\"bool\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"KyberMooniswapReserve","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3cdb49332c0e06117da600ef8c7259bb1ad133d4cf49212729487eda4acf34f8"}]}