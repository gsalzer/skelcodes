{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/IConversionPathFinder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/*\r\n    Conversion Path Finder interface\r\n*/\r\ncontract IConversionPathFinder {\r\n    function findPath(address _sourceToken, address _targetToken) public view returns (address[] memory);\r\n}\r\n\r\n// File: contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/utility/ContractRegistryClient.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\r\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\r\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        _only(_contractName);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _only(bytes32 _contractName) internal view {\r\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      *\r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(_registry) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\r\n\r\n        // get the new contract-registry\r\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != address(registry) && newRegistry != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = newRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      *\r\n      * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\r\n    */\r\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\r\n        // change the permission to update the contract-registry\r\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n      *\r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/ITokenHolder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterAnchor.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Converter Anchor interface\r\n*/\r\ncontract IConverterAnchor is IOwned, ITokenHolder {\r\n}\r\n\r\n// File: contracts/utility/interfaces/IWhitelist.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverter.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter interface\r\n*/\r\ncontract IConverter is IOwned {\r\n    function converterType() public pure returns (uint16);\r\n    function anchor() public view returns (IConverterAnchor) {this;}\r\n    function isActive() public view returns (bool);\r\n\r\n    function rateAndFee(IERC20Token _sourceToken, IERC20Token _targetToken, uint256 _amount) public view returns (uint256, uint256);\r\n    function convert(IERC20Token _sourceToken,\r\n                     IERC20Token _targetToken,\r\n                     uint256 _amount,\r\n                     address _trader,\r\n                     address _beneficiary) public payable returns (uint256);\r\n\r\n    function conversionWhitelist() public view returns (IWhitelist) {this;}\r\n    function conversionFee() public view returns (uint32) {this;}\r\n    function maxConversionFee() public view returns (uint32) {this;}\r\n    function reserveBalance(IERC20Token _reserveToken) public view returns (uint256);\r\n    function() external payable;\r\n\r\n    function transferAnchorOwnership(address _newOwner) public;\r\n    function acceptAnchorOwnership() public;\r\n    function setConversionFee(uint32 _conversionFee) public;\r\n    function setConversionWhitelist(IWhitelist _whitelist) public;\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n    function withdrawETH(address _to) public;\r\n    function addReserve(IERC20Token _token, uint32 _ratio) public;\r\n\r\n    // deprecated, backward compatibility\r\n    function token() public view returns (IConverterAnchor);\r\n    function transferTokenOwnership(address _newOwner) public;\r\n    function acceptTokenOwnership() public;\r\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\r\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\r\n    function connectorTokens(uint256 _index) public view returns (IERC20Token);\r\n    function connectorTokenCount() public view returns (uint16);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\ncontract IConverterRegistry {\r\n    function getAnchorCount() public view returns (uint256);\r\n    function getAnchors() public view returns (address[]);\r\n    function getAnchor(uint256 _index) public view returns (address);\r\n    function isAnchor(address _value) public view returns (bool);\r\n    function getLiquidityPoolCount() public view returns (uint256);\r\n    function getLiquidityPools() public view returns (address[]);\r\n    function getLiquidityPool(uint256 _index) public view returns (address);\r\n    function isLiquidityPool(address _value) public view returns (bool);\r\n    function getConvertibleTokenCount() public view returns (uint256);\r\n    function getConvertibleTokens() public view returns (address[]);\r\n    function getConvertibleToken(uint256 _index) public view returns (address);\r\n    function isConvertibleToken(address _value) public view returns (bool);\r\n    function getConvertibleTokenAnchorCount(address _convertibleToken) public view returns (uint256);\r\n    function getConvertibleTokenAnchors(address _convertibleToken) public view returns (address[]);\r\n    function getConvertibleTokenAnchor(address _convertibleToken, uint256 _index) public view returns (address);\r\n    function isConvertibleTokenAnchor(address _convertibleToken, address _value) public view returns (bool);\r\n}\r\n\r\n// File: contracts/ConversionPathFinder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev The ConversionPathFinder contract allows generating a conversion path between any token pair in the Bancor Network.\r\n  * The path can then be used in various functions in the BancorNetwork contract.\r\n  *\r\n  * See the BancorNetwork contract for conversion path format.\r\n*/\r\ncontract ConversionPathFinder is IConversionPathFinder, ContractRegistryClient {\r\n    address public anchorToken;\r\n\r\n    /**\r\n      * @dev initializes a new ConversionPathFinder instance\r\n      *\r\n      * @param _registry address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) ContractRegistryClient(_registry) public {\r\n    }\r\n\r\n    /**\r\n      * @dev updates the anchor token\r\n      *\r\n      * @param _anchorToken address of the anchor token\r\n    */\r\n    function setAnchorToken(address _anchorToken) public ownerOnly {\r\n        anchorToken = _anchorToken;\r\n    }\r\n\r\n    /**\r\n      * @dev generates a conversion path between a given pair of tokens in the Bancor Network\r\n      *\r\n      * @param _sourceToken address of the source token\r\n      * @param _targetToken address of the target token\r\n      *\r\n      * @return a path from the source token to the target token\r\n    */\r\n    function findPath(address _sourceToken, address _targetToken) public view returns (address[] memory) {\r\n        IConverterRegistry converterRegistry = IConverterRegistry(addressOf(CONVERTER_REGISTRY));\r\n        address[] memory sourcePath = getPath(_sourceToken, converterRegistry);\r\n        address[] memory targetPath = getPath(_targetToken, converterRegistry);\r\n        return getShortestPath(sourcePath, targetPath);\r\n    }\r\n\r\n    /**\r\n      * @dev generates a conversion path between a given token and the anchor token\r\n      *\r\n      * @param _token               address of the token\r\n      * @param _converterRegistry   address of the converter registry\r\n      *\r\n      * @return a path from the input token to the anchor token\r\n    */\r\n    function getPath(address _token, IConverterRegistry _converterRegistry) private view returns (address[] memory) {\r\n        if (_token == anchorToken)\r\n            return getInitialArray(_token);\r\n\r\n        address[] memory anchors;\r\n        if (_converterRegistry.isAnchor(_token))\r\n            anchors = getInitialArray(_token);\r\n        else\r\n            anchors = _converterRegistry.getConvertibleTokenAnchors(_token);\r\n\r\n        for (uint256 n = 0; n < anchors.length; n++) {\r\n            IConverter converter = IConverter(IConverterAnchor(anchors[n]).owner());\r\n            uint256 connectorTokenCount = converter.connectorTokenCount();\r\n            for (uint256 i = 0; i < connectorTokenCount; i++) {\r\n                address connectorToken = converter.connectorTokens(i);\r\n                if (connectorToken != _token) {\r\n                    address[] memory path = getPath(connectorToken, _converterRegistry);\r\n                    if (path.length > 0)\r\n                        return getExtendedArray(_token, anchors[n], path);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new address[](0);\r\n    }\r\n\r\n    /**\r\n      * @dev merges two paths with a common suffix into one\r\n      *\r\n      * @param _sourcePath address of the source path\r\n      * @param _targetPath address of the target path\r\n      *\r\n      * @return merged path\r\n    */\r\n    function getShortestPath(address[] memory _sourcePath, address[] memory _targetPath) private pure returns (address[] memory) {\r\n        if (_sourcePath.length > 0 && _targetPath.length > 0) {\r\n            uint256 i = _sourcePath.length;\r\n            uint256 j = _targetPath.length;\r\n            while (i > 0 && j > 0 && _sourcePath[i - 1] == _targetPath[j - 1]) {\r\n                i--;\r\n                j--;\r\n            }\r\n\r\n            address[] memory path = new address[](i + j + 1);\r\n            for (uint256 m = 0; m <= i; m++)\r\n                path[m] = _sourcePath[m];\r\n            for (uint256 n = j; n > 0; n--)\r\n                path[path.length - n] = _targetPath[n - 1];\r\n\r\n            uint256 length = 0;\r\n            for (uint256 p = 0; p < path.length; p += 1) {\r\n                for (uint256 q = p + 2; q < path.length - p % 2; q += 2) {\r\n                    if (path[p] == path[q])\r\n                        p = q;\r\n                }\r\n                path[length++] = path[p];\r\n            }\r\n\r\n            return getPartialArray(path, length);\r\n        }\r\n\r\n        return new address[](0);\r\n    }\r\n\r\n    /**\r\n      * @dev creates a new array containing a single item\r\n      *\r\n      * @param _item item\r\n      *\r\n      * @return initial array\r\n    */\r\n    function getInitialArray(address _item) private pure returns (address[] memory) {\r\n        address[] memory array = new address[](1);\r\n        array[0] = _item;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n      * @dev prepends two items to the beginning of an array\r\n      *\r\n      * @param _item0 first item\r\n      * @param _item1 second item\r\n      * @param _array initial array\r\n      *\r\n      * @return extended array\r\n    */\r\n    function getExtendedArray(address _item0, address _item1, address[] memory _array) private pure returns (address[] memory) {\r\n        address[] memory array = new address[](2 + _array.length);\r\n        array[0] = _item0;\r\n        array[1] = _item1;\r\n        for (uint256 i = 0; i < _array.length; i++)\r\n            array[2 + i] = _array[i];\r\n        return array;\r\n    }\r\n\r\n    /**\r\n      * @dev extracts the prefix of a given array\r\n      *\r\n      * @param _array given array\r\n      * @param _length prefix length\r\n      *\r\n      * @return partial array\r\n    */\r\n    function getPartialArray(address[] memory _array, uint256 _length) private pure returns (address[] memory) {\r\n        address[] memory array = new address[](_length);\r\n        for (uint256 i = 0; i < _length; i++)\r\n            array[i] = _array[i];\r\n        return array;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_anchorToken\",\"type\":\"address\"}],\"name\":\"setAnchorToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sourceToken\",\"type\":\"address\"},{\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"findPath\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anchorToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"ConversionPathFinder","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://885a0a9d44a452822a235ca723b4151e4cd6c7f64c509983877abe31eb646c82"}]}