{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.12 <0.7.0;\r\n\r\ncontract way2eth {\r\n\r\n    struct User {\r\n        uint id;\r\n        uint referrerCount;\r\n        uint referrerId;\r\n        uint earnedFromPool;\r\n        uint earnedFromRef;\r\n        uint earnedFromGlobal;\r\n        address[] referrals;\r\n    }\r\n   \r\n    struct UsersPool {\r\n        uint id;\r\n        uint referrerId;\r\n        uint reinvestCount;\r\n    }\r\n   \r\n    struct PoolSlots {\r\n        uint id;\r\n        address userAddress;\r\n        uint referrerId;\r\n        uint8 eventsCount;\r\n    }\r\n       \r\n    modifier validReferrerId(uint _referrerId) {\r\n        require((_referrerId > 0) && (_referrerId < newUserId), \"Invalid referrer ID\");\r\n        _;\r\n    }\r\n   \r\n    event RegisterUserEvent(uint _userid, address indexed _user, address indexed _referrerAddress, uint8 indexed _autopool, uint _amount, uint _time);\r\n    event ReinvestEvent(uint _userid, address indexed _user, address indexed _referrerAddress, uint8 indexed _autopool, uint _amount, uint _time);\r\n    event DistributeUplineEvent(uint amount, address indexed _sponsorAddress, address indexed _fromAddress, uint _level, uint8 _fromPool, uint _time);\r\n    event ReferralPaymentEvent(uint amount, address indexed _from, address indexed _to, uint8 indexed _fromPool, uint _time);\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => UsersPool) public users_2;\r\n    mapping(uint => PoolSlots) public pool_slots_2;\r\n    mapping(address => UsersPool) public users_3;\r\n    mapping(uint => PoolSlots) public pool_slots_3;\r\n    mapping(address => UsersPool) public users_4;\r\n    mapping(uint => PoolSlots) public pool_slots_4;\r\n    mapping(address => UsersPool) public users_5;\r\n    mapping(uint => PoolSlots) public pool_slots_5;\r\n    mapping(address => UsersPool) public users_6;\r\n    mapping(uint => PoolSlots) public pool_slots_6;\r\n    mapping(address => UsersPool) public users_7;\r\n    mapping(uint => PoolSlots) public pool_slots_7;\r\n    mapping(address => UsersPool) public users_8;\r\n    mapping(uint => PoolSlots) public pool_slots_8;\r\n\r\n    mapping(uint => address) public idToAddress;\r\n    mapping (uint => uint) public uplineAmount;\r\n   \r\n    uint public newUserId = 1;\r\n    uint public newUserId_ap2 = 1;\r\n    uint public newUserId_ap3 = 1;\r\n    uint public newUserId_ap4 = 1;\r\n    uint public newUserId_ap5 = 1;\r\n    uint public newUserId_ap6 = 1;\r\n    uint public newUserId_ap7 = 1;\r\n    uint public newUserId_ap8 = 1;\r\n\r\n    uint public newSlotId_ap2 = 1;\r\n    uint public activeSlot_ap2 = 1;\r\n    uint public newSlotId_ap3 = 1;\r\n    uint public activeSlot_ap3 = 1;\r\n    uint public newSlotId_ap4 = 1;\r\n    uint public activeSlot_ap4 = 1;\r\n    uint public newSlotId_ap5 = 1;\r\n    uint public activeSlot_ap5 = 1;\r\n    uint public newSlotId_ap6 = 1;\r\n    uint public activeSlot_ap6 = 1;\r\n    uint public newSlotId_ap7 = 1;\r\n    uint public activeSlot_ap7 = 1;\r\n    uint public newSlotId_ap8 = 1;\r\n    uint public activeSlot_ap8 = 1;\r\n   \r\n    address public owner;\r\n   \r\n    constructor(address _ownerAddress) public {\r\n       \r\n        //uplineAmount[1] = 50;\r\n        uplineAmount[1] = 0.025 ether;\r\n       \r\n        owner = _ownerAddress;\r\n       \r\n        User memory user = User({\r\n            id: newUserId,\r\n            referrerCount: uint(0),\r\n            referrerId: uint(0),\r\n            earnedFromPool: uint(0),\r\n            earnedFromRef: uint(0),\r\n            earnedFromGlobal: uint(0),\r\n            referrals: new address[](0)\r\n        });\r\n       \r\n        users[_ownerAddress] = user;\r\n        idToAddress[newUserId] = _ownerAddress;\r\n        newUserId++;\r\n       \r\n        //////\r\n       \r\n        UsersPool memory user2 = UsersPool({\r\n            id: newSlotId_ap2,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_2[_ownerAddress] = user2;\r\n       \r\n        PoolSlots memory _newSlot2 = PoolSlots({\r\n            id: newSlotId_ap2,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_2[newSlotId_ap2] = _newSlot2;\r\n        newUserId_ap2++;\r\n        newSlotId_ap2++;\r\n       \r\n        ///////\r\n       \r\n        UsersPool memory user3 = UsersPool({\r\n            id: newSlotId_ap3,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_3[_ownerAddress] = user3;\r\n       \r\n        PoolSlots memory _newSlot3 = PoolSlots({\r\n            id: newSlotId_ap3,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_3[newSlotId_ap3] = _newSlot3;\r\n        newUserId_ap3++;\r\n        newSlotId_ap3++;\r\n       \r\n        ///////\r\n       \r\n        UsersPool memory user4 = UsersPool({\r\n            id: newSlotId_ap4,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_4[_ownerAddress] = user4;\r\n       \r\n        PoolSlots memory _newSlot4 = PoolSlots({\r\n            id: newSlotId_ap4,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_4[newSlotId_ap4] = _newSlot4;\r\n        newUserId_ap4++;\r\n        newSlotId_ap4++;\r\n       \r\n        ///////\r\n       \r\n        UsersPool memory user5 = UsersPool({\r\n            id: newSlotId_ap5,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_5[_ownerAddress] = user5;\r\n       \r\n        PoolSlots memory _newSlot5 = PoolSlots({\r\n            id: newSlotId_ap5,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_5[newSlotId_ap5] = _newSlot5;\r\n        newUserId_ap5++;\r\n        newSlotId_ap5++;\r\n       \r\n        ///////\r\n       \r\n        UsersPool memory user6 = UsersPool({\r\n            id: newSlotId_ap6,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_6[_ownerAddress] = user6;\r\n       \r\n        PoolSlots memory _newSlot6 = PoolSlots({\r\n            id: newSlotId_ap6,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_6[newSlotId_ap6] = _newSlot6;\r\n        newUserId_ap6++;\r\n        newSlotId_ap6++;\r\n       \r\n        ///////\r\n       \r\n        UsersPool memory user7 = UsersPool({\r\n            id: newSlotId_ap7,\r\n            referrerId: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n       \r\n        users_7[_ownerAddress] = user7;\r\n       \r\n        PoolSlots memory _newSlot7 = PoolSlots({\r\n            id: newSlotId_ap7,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint(0),\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_7[newSlotId_ap7] = _newSlot7;\r\n        newUserId_ap7++;\r\n        newSlotId_ap7++;\r\n        \r\n        \r\n       \r\n \r\n        \r\n        \r\n    }\r\n   \r\n    function participatePool1(uint _referrerId)\r\n      public\r\n      payable\r\n      validReferrerId(_referrerId)\r\n    {\r\n       \r\n        require(msg.value == 0.1 ether, \"Participation fee is 0.1 ETH\");\r\n        require(!isUserExists(msg.sender, 1), \"User already registered\");\r\n\r\n        address _userAddress = msg.sender;\r\n        address _referrerAddress = idToAddress[_referrerId];\r\n       \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n       \r\n        users[_userAddress] = User({\r\n            id: newUserId,\r\n            referrerCount: uint(0),\r\n            referrerId: _referrerId,\r\n            earnedFromPool: uint(0),\r\n            earnedFromRef: uint(0),\r\n            earnedFromGlobal: uint(0),\r\n            referrals: new address[](0)\r\n        });\r\n        idToAddress[newUserId] = _userAddress;\r\n\r\n        emit RegisterUserEvent(newUserId, msg.sender, _referrerAddress, 1, msg.value, now);\r\n       \r\n        newUserId++;\r\n       \r\n        users[_referrerAddress].referrals.push(_userAddress);\r\n        users[_referrerAddress].referrerCount++;\r\n       \r\n        uint amountToDistribute = msg.value;\r\n        address sponsorAddress = idToAddress[_referrerId];        \r\n       \r\n        for (uint8 i = 1; i <= 1; i++) {\r\n           \r\n            if ( isUserExists(sponsorAddress, 1) ) {\r\n                uint paid = payUpline(sponsorAddress, i, 1);\r\n                amountToDistribute -= paid;\r\n                users[sponsorAddress].earnedFromPool += paid;\r\n                address _nextSponsorAddress = idToAddress[users[sponsorAddress].referrerId];\r\n                sponsorAddress = _nextSponsorAddress;\r\n            }\r\n           \r\n        }\r\n       \r\n        if (amountToDistribute > 0) {\r\n            payFirstLine(idToAddress[1], amountToDistribute, 1);\r\n            users[idToAddress[1]].earnedFromPool += amountToDistribute;\r\n        }\r\n       \r\n    }\r\n   \r\n    function participatePool2(uint8 _fromPool)\r\n      public\r\n      payable\r\n    {\r\n        if(_fromPool == 2 || _fromPool == 3 || _fromPool == 4 || _fromPool == 5 || _fromPool == 6 || _fromPool == 7){\r\n            require(isUserExists(msg.sender, 1), \"User not present in AP1\");\r\n            require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        }\r\n       \r\n        if(_fromPool == 2){\r\n            require(msg.value == 0.2 ether, \"Participation fee in Autopool is 0.2 ETH\");\r\n            require(!isUserExists(msg.sender, 2), \"User already registered in AP2\");\r\n           \r\n        uint eventCount = pool_slots_2[activeSlot_ap2].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_2[activeSlot_ap2].userAddress,\r\n                pool_slots_2[activeSlot_ap2].id,\r\n                idToAddress[users[pool_slots_2[activeSlot_ap2].userAddress].referrerId],\r\n                2\r\n            ));\r\n            pool_slots_2[activeSlot_ap2].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n\r\n        UsersPool memory user2 = UsersPool({\r\n            id: newSlotId_ap2,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_2[msg.sender] = user2;\r\n       \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap2,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_2[newSlotId_ap2] = _newSlot;\r\n        newUserId_ap2++;\r\n        emit RegisterUserEvent(newSlotId_ap2, msg.sender, idToAddress[_referrerId], 2, msg.value, now);\r\n       \r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 2);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 2);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n        newSlotId_ap2++;\r\n        if (eventCount < 2) {\r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_2[activeSlot_ap2].userAddress, 1, 2);\r\n                users[pool_slots_2[activeSlot_ap2].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_2[activeSlot_ap2].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_2[activeSlot_ap2].referrerId], 1, 2);\r\n                    users[idToAddress[pool_slots_2[activeSlot_ap2].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 2);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_2[activeSlot_ap2].eventsCount++;\r\n        }\r\n        }else if(_fromPool == 3){\r\n            require(msg.value == 0.3 ether, \"Participation fee in Autopool is 0.3 ETH\");\r\n            require(!isUserExists(msg.sender, 3), \"User already registered in AP3\");\r\n           \r\n        uint eventCount = pool_slots_3[activeSlot_ap3].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_3[activeSlot_ap3].userAddress,\r\n                pool_slots_3[activeSlot_ap3].id,\r\n                idToAddress[users[pool_slots_3[activeSlot_ap3].userAddress].referrerId],\r\n                3\r\n            ));\r\n            pool_slots_3[activeSlot_ap3].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n\r\n        UsersPool memory user3 = UsersPool({\r\n            id: newSlotId_ap3,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_3[msg.sender] = user3;\r\n       \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap3,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_3[newSlotId_ap3] = _newSlot;\r\n        newUserId_ap3++;\r\n        emit RegisterUserEvent(newSlotId_ap3, msg.sender, idToAddress[_referrerId], 3, msg.value, now);\r\n       \r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 3);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 3);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n\r\n        newSlotId_ap3++;\r\n        if (eventCount < 2) {\r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_3[activeSlot_ap3].userAddress, 1, 3);\r\n                users[pool_slots_3[activeSlot_ap3].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_3[activeSlot_ap3].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_3[activeSlot_ap3].referrerId], 1, 3);\r\n                    users[idToAddress[pool_slots_3[activeSlot_ap3].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 3);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_3[activeSlot_ap3].eventsCount++;\r\n        }\r\n        }\r\n        else if(_fromPool == 4){\r\n            require(msg.value == 0.4 ether, \"Participation fee in Autopool is 0.4 ETH\");\r\n            require(!isUserExists(msg.sender, 4), \"User already registered in AP4\");\r\n           \r\n        uint eventCount = pool_slots_4[activeSlot_ap4].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_4[activeSlot_ap4].userAddress,\r\n                pool_slots_4[activeSlot_ap4].id,\r\n                idToAddress[users[pool_slots_4[activeSlot_ap4].userAddress].referrerId],\r\n                4\r\n            ));\r\n            pool_slots_4[activeSlot_ap4].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n        UsersPool memory user4 = UsersPool({\r\n            id: newSlotId_ap4,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_4[msg.sender] = user4;\r\n       \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap4,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_4[newSlotId_ap4] = _newSlot;\r\n        newUserId_ap4++;\r\n        emit RegisterUserEvent(newSlotId_ap4, msg.sender, idToAddress[_referrerId], 4, msg.value, now);\r\n       \r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 4);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 4);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n\r\n        newSlotId_ap4++;\r\n        if (eventCount < 2) {\r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_4[activeSlot_ap4].userAddress, 1, 4);\r\n                users[pool_slots_4[activeSlot_ap4].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_4[activeSlot_ap4].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_4[activeSlot_ap4].referrerId], 1, 4);\r\n                    users[idToAddress[pool_slots_4[activeSlot_ap4].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 4);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_4[activeSlot_ap4].eventsCount++;\r\n        }\r\n        }\r\n        else if(_fromPool == 5){\r\n            require(msg.value == 0.5 ether, \"Participation fee in Autopool is 0.5 ETH\");\r\n            require(!isUserExists(msg.sender, 5), \"User already registered in AP5\");\r\n           \r\n            uint eventCount = pool_slots_5[activeSlot_ap5].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_5[activeSlot_ap5].userAddress,\r\n                pool_slots_5[activeSlot_ap5].id,\r\n                idToAddress[users[pool_slots_5[activeSlot_ap5].userAddress].referrerId],\r\n                5\r\n            ));\r\n            pool_slots_5[activeSlot_ap5].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n        UsersPool memory user5 = UsersPool({\r\n            id: newSlotId_ap5,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_5[msg.sender] = user5;\r\n       \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap5,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_5[newSlotId_ap5] = _newSlot;\r\n        newUserId_ap5++;\r\n        emit RegisterUserEvent(newSlotId_ap5, msg.sender, idToAddress[_referrerId], 5, msg.value, now);\r\n       \r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 5);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 5);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n\r\n        newSlotId_ap5++;\r\n        if (eventCount < 2) {\r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_5[activeSlot_ap5].userAddress, 1, 5);\r\n                users[pool_slots_5[activeSlot_ap5].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_5[activeSlot_ap5].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_5[activeSlot_ap5].referrerId], 1, 5);\r\n                    users[idToAddress[pool_slots_5[activeSlot_ap5].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 5);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_5[activeSlot_ap5].eventsCount++;    \r\n        }\r\n           \r\n        }\r\n        else if(_fromPool == 6){\r\n            require(msg.value == 0.7 ether, \"Participation fee in Autopool is 0.7 ETH\");\r\n            require(!isUserExists(msg.sender, 6), \"User already registered in AP6\");\r\n           \r\n        uint eventCount = pool_slots_6[activeSlot_ap6].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_6[activeSlot_ap6].userAddress,\r\n                pool_slots_6[activeSlot_ap6].id,\r\n                idToAddress[users[pool_slots_6[activeSlot_ap6].userAddress].referrerId],\r\n                6\r\n            ));\r\n            pool_slots_6[activeSlot_ap6].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n        UsersPool memory user6 = UsersPool({\r\n            id: newSlotId_ap6,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_6[msg.sender] = user6;\r\n       \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap6,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_6[newSlotId_ap6] = _newSlot;\r\n        newUserId_ap6++;\r\n        emit RegisterUserEvent(newSlotId_ap6, msg.sender, idToAddress[_referrerId], 6, msg.value, now);\r\n       \r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 6);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 6);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n\r\n        newSlotId_ap6++;\r\n        if (eventCount < 2) {            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_6[activeSlot_ap6].userAddress, 1, 6);\r\n                users[pool_slots_6[activeSlot_ap6].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_6[activeSlot_ap6].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_6[activeSlot_ap6].referrerId], 1, 6);\r\n                    users[idToAddress[pool_slots_6[activeSlot_ap6].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 6);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_6[activeSlot_ap6].eventsCount++;          \r\n        }\r\n           \r\n        }else{\r\n            require(msg.value == 1 ether, \"Participation fee in Autopool is 1 ETH\");\r\n            require(!isUserExists(msg.sender, 7), \"User already registered in AP7\");\r\n           \r\n            uint eventCount = pool_slots_7[activeSlot_ap7].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                pool_slots_7[activeSlot_ap7].userAddress,\r\n                pool_slots_7[activeSlot_ap7].id,\r\n                idToAddress[users[pool_slots_7[activeSlot_ap7].userAddress].referrerId],\r\n                7\r\n            ));\r\n            pool_slots_7[activeSlot_ap7].eventsCount++;\r\n        }\r\n       \r\n        uint _referrerId = users[msg.sender].referrerId;\r\n\r\n        UsersPool memory user7 = UsersPool({\r\n            id: newSlotId_ap7,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_7[msg.sender] = user7;        \r\n        PoolSlots memory _newSlot = PoolSlots({\r\n            id: newSlotId_ap7,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        pool_slots_7[newSlotId_ap7] = _newSlot;\r\n        newUserId_ap7++;\r\n        emit RegisterUserEvent(newSlotId_ap7, msg.sender, idToAddress[_referrerId], 7, msg.value, now);\r\n\r\n        if (_referrerId > 0) {\r\n            payUpline(idToAddress[_referrerId], 1, 7);\r\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\r\n        }\r\n        else{\r\n            payUpline(idToAddress[1], 1, 7);\r\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n        }\r\n       \r\n        newSlotId_ap7++;\r\n        if (eventCount < 2) {          \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_7[activeSlot_ap7].userAddress, 1, 7);\r\n                users[pool_slots_7[activeSlot_ap7].userAddress].earnedFromGlobal += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (pool_slots_7[activeSlot_ap7].referrerId > 0) {\r\n                    payUpline(idToAddress[pool_slots_7[activeSlot_ap7].referrerId], 1, 7);\r\n                    users[idToAddress[pool_slots_7[activeSlot_ap7].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1], 1, 7);\r\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n            pool_slots_7[activeSlot_ap7].eventsCount++;\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n    function reinvestSlot(address _userAddress, uint _userId, address _sponsorAddress, uint8 _fromPool) private returns (bool _isReinvested) {\r\n\r\n        uint _referrerId = users[_userAddress].referrerId;\r\n\r\n        PoolSlots memory _reinvestslot = PoolSlots({\r\n            id: _userId,\r\n            userAddress: _userAddress,\r\n            referrerId: _referrerId,\r\n            eventsCount: uint8(0)\r\n        });\r\n       \r\n        if (_fromPool == 2) {\r\n            users_2[pool_slots_2[activeSlot_ap2].userAddress].reinvestCount++;        \r\n            pool_slots_2[newSlotId_ap2] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap2, _userAddress, _sponsorAddress, 2, msg.value, now);\r\n            newSlotId_ap2++;\r\n        }\r\n        if (_fromPool == 3) {\r\n            users_3[pool_slots_3[activeSlot_ap3].userAddress].reinvestCount++;        \r\n            pool_slots_3[newSlotId_ap3] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap3, _userAddress, _sponsorAddress, 3, msg.value, now);\r\n            newSlotId_ap3++;\r\n        }\r\n        if (_fromPool == 4) {\r\n            users_4[pool_slots_4[activeSlot_ap4].userAddress].reinvestCount++;        \r\n            pool_slots_4[newSlotId_ap4] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap4, _userAddress, _sponsorAddress, 4, msg.value, now);\r\n            newSlotId_ap4++;\r\n        }\r\n        if (_fromPool == 5) {\r\n            users_5[pool_slots_5[activeSlot_ap5].userAddress].reinvestCount++;        \r\n            pool_slots_5[newSlotId_ap5] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap5, _userAddress, _sponsorAddress, 5, msg.value, now);\r\n            newSlotId_ap5++;\r\n        }\r\n        if (_fromPool == 6) {\r\n            users_6[pool_slots_6[activeSlot_ap6].userAddress].reinvestCount++;        \r\n            pool_slots_6[newSlotId_ap6] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap6, _userAddress, _sponsorAddress, 6, msg.value, now);\r\n            newSlotId_ap6++;\r\n        }\r\n        if (_fromPool == 7) {\r\n            users_7[pool_slots_7[activeSlot_ap7].userAddress].reinvestCount++;        \r\n            pool_slots_7[newSlotId_ap7] = _reinvestslot;\r\n            emit ReinvestEvent(newSlotId_ap7, _userAddress, _sponsorAddress, 7, msg.value, now);\r\n            newSlotId_ap7++;\r\n        }\r\n       \r\n        if (_fromPool == 2) {\r\n            pool_slots_2[activeSlot_ap2].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap2+1;\r\n\r\n            payUpline(pool_slots_2[_nextActiveSlot].userAddress, 1, 2);\r\n            users[pool_slots_2[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap2++;\r\n        }\r\n        if (_fromPool == 3) {\r\n            pool_slots_3[activeSlot_ap3].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap3+1;\r\n\r\n            payUpline(pool_slots_3[_nextActiveSlot].userAddress, 1, 3);\r\n            users[pool_slots_3[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap3++;\r\n        }\r\n        if (_fromPool == 4) {\r\n            pool_slots_4[activeSlot_ap4].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap4+1;\r\n\r\n            payUpline(pool_slots_4[_nextActiveSlot].userAddress, 1, 4);\r\n            users[pool_slots_4[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap4++;\r\n        }\r\n        if (_fromPool == 5) {\r\n            pool_slots_5[activeSlot_ap5].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap5+1;\r\n\r\n            payUpline(pool_slots_5[_nextActiveSlot].userAddress, 1, 5);\r\n            users[pool_slots_5[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap5++;\r\n        }\r\n        if (_fromPool == 6) {\r\n            pool_slots_6[activeSlot_ap6].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap6+1;\r\n\r\n            payUpline(pool_slots_6[_nextActiveSlot].userAddress, 1, 6);\r\n            users[pool_slots_6[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap6++;\r\n        }\r\n        if (_fromPool == 7) {\r\n            pool_slots_7[activeSlot_ap7].eventsCount = 3;\r\n            uint _nextActiveSlot = activeSlot_ap7+1;\r\n\r\n            payUpline(pool_slots_7[_nextActiveSlot].userAddress, 1, 7);\r\n            users[pool_slots_7[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\r\n            activeSlot_ap7++;\r\n        }\r\n\r\n        _isReinvested = true;\r\n\r\n        return _isReinvested;\r\n\r\n    }\r\n   \r\n    function payUpline(address _sponsorAddress, uint8 _refLevel, uint8 _fromPool) private returns (uint distributeAmount) {        \r\n        require( _refLevel <= 4);\r\n       \r\n         if(users[_sponsorAddress].referrerCount % 4 == 0){\r\n             \r\n            uplineAmount[1] = 0.025 ether * 2;\r\n            distributeAmount = msg.value / 100 * uplineAmount[_refLevel];\r\n            if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            if (_fromPool > 1) {\r\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\r\n            } else\r\n                emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, _refLevel, _fromPool, now);\r\n        }\r\n        } else {\r\n             distributeAmount = msg.value / 100 * uplineAmount[_refLevel];\r\n            if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            if (_fromPool > 1) {\r\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\r\n            } else\r\n                emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, _refLevel, _fromPool, now);\r\n        }\r\n        }    \r\n        return distributeAmount;\r\n    }\r\n   \r\n    function payFirstLine(address _sponsorAddress, uint payAmount, uint8 _fromPool) private returns (uint distributeAmount) {        \r\n        distributeAmount = payAmount;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            if (_fromPool > 1) {\r\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\r\n            } else emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, 1, _fromPool, now);\r\n        }        \r\n        return distributeAmount;        \r\n    }\r\n   \r\n    function isUserQualified(address _userAddress) public view returns (bool) {\r\n        return (users[_userAddress].referrerCount > 0);\r\n    }\r\n   \r\n    function isUserExists(address _userAddress, uint8 _autopool) public view returns (bool) {\r\n        require((_autopool > 0) && (_autopool <= 7));\r\n        if (_autopool == 1) return (users[_userAddress].id != 0);\r\n        if (_autopool == 2) return (users_2[_userAddress].id != 0);\r\n        if (_autopool == 3) return (users_3[_userAddress].id != 0);\r\n        if (_autopool == 4) return (users_4[_userAddress].id != 0);\r\n        if (_autopool == 5) return (users_5[_userAddress].id != 0);\r\n        if (_autopool == 6) return (users_6[_userAddress].id != 0);\r\n        if (_autopool == 7) return (users_7[_userAddress].id != 0);\r\n    }\r\n   \r\n    function getUserReferrals(address _userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n      {\r\n        return users[_userAddress].referrals;\r\n      }\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_fromPool\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DistributeUplineEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_fromPool\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ReferralPaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_autopool\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_autopool\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ReinvestEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeSlot_ap2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_autopool\",\"type\":\"uint8\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId_ap8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"participatePool1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fromPool\",\"type\":\"uint8\"}],\"name\":\"participatePool2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uplineAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromGlobal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"way2eth","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006253d2467a0489ea2bb6bae1059ad03460347cf9","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://821410d7f7d940b6f44b44b79c60bc026ce54d0ce0bee96eb64fadcf30dc4ce1"}]}