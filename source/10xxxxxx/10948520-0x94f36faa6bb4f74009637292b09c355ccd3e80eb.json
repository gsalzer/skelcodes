{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title Price contract\r\n * @dev Price check and call\r\n */\r\ncontract Nest_3_OfferPrice{\r\n    using SafeMath for uint256;\r\n    using address_make_payable for address;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    Nest_3_VoteFactory _voteFactory;                                //  Voting contract\r\n    ERC20 _nestToken;                                               //  NestToken\r\n    Nest_NToken_TokenMapping _tokenMapping;                         //  NToken mapping\r\n    Nest_3_OfferMain _offerMain;                                    //  Offering main contract\r\n    Nest_3_Abonus _abonus;                                          //  Bonus pool\r\n    address _nTokeOfferMain;                                        //  NToken offering main contract\r\n    address _destructionAddress;                                    //  Destruction contract address\r\n    address _nTokenAuction;                                         //  NToken auction contract address\r\n    struct PriceInfo {                                              //  Block price\r\n        uint256 ethAmount;                                          //  ETH amount\r\n        uint256 erc20Amount;                                        //  Erc20 amount\r\n        uint256 frontBlock;                                         //  Last effective block\r\n        address offerOwner;                                         //  Offering address\r\n    }\r\n    struct TokenInfo {                                              //  Token offer information\r\n        mapping(uint256 => PriceInfo) priceInfoList;                //  Block price list, block number => block price\r\n        uint256 latestOffer;                                        //  Latest effective block\r\n    }\r\n    uint256 destructionAmount = 0 ether;                            //  Amount of NEST to destroy to call prices\r\n    uint256 effectTime = 0 days;                                    //  Waiting time to start calling prices\r\n    mapping(address => TokenInfo) _tokenInfo;                       //  Token offer information\r\n    mapping(address => bool) _blocklist;                            //  Block list\r\n    mapping(address => uint256) _addressEffect;                     //  Effective time of address to call prices \r\n    mapping(address => bool) _offerMainMapping;                     //  Offering contract mapping\r\n    uint256 _priceCost = 0.01 ether;                                //  Call price fee\r\n\r\n    //  Real-time price  token, ETH amount, erc20 amount\r\n    event NowTokenPrice(address a, uint256 b, uint256 c);\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor (address voteFactory) public {\r\n        Nest_3_VoteFactory voteFactoryMap = Nest_3_VoteFactory(address(voteFactory));\r\n        _voteFactory = voteFactoryMap;\r\n        _offerMain = Nest_3_OfferMain(address(voteFactoryMap.checkAddress(\"nest.v3.offerMain\")));\r\n        _nTokeOfferMain = address(voteFactoryMap.checkAddress(\"nest.nToken.offerMain\"));\r\n        _abonus = Nest_3_Abonus(address(voteFactoryMap.checkAddress(\"nest.v3.abonus\")));\r\n        _destructionAddress = address(voteFactoryMap.checkAddress(\"nest.v3.destruction\"));\r\n        _nestToken = ERC20(address(voteFactoryMap.checkAddress(\"nest\")));\r\n        _tokenMapping = Nest_NToken_TokenMapping(address(voteFactoryMap.checkAddress(\"nest.nToken.tokenMapping\")));\r\n        _nTokenAuction = address(voteFactoryMap.checkAddress(\"nest.nToken.tokenAuction\"));\r\n        _offerMainMapping[address(_offerMain)] = true;\r\n        _offerMainMapping[address(_nTokeOfferMain)] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Modify voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n        Nest_3_VoteFactory voteFactoryMap = Nest_3_VoteFactory(address(voteFactory));\r\n        _voteFactory = voteFactoryMap;                                   \r\n        _offerMain = Nest_3_OfferMain(address(voteFactoryMap.checkAddress(\"nest.v3.offerMain\")));\r\n        _nTokeOfferMain = address(voteFactoryMap.checkAddress(\"nest.nToken.offerMain\"));\r\n        _abonus = Nest_3_Abonus(address(voteFactoryMap.checkAddress(\"nest.v3.abonus\")));\r\n        _destructionAddress = address(voteFactoryMap.checkAddress(\"nest.v3.destruction\"));\r\n        _nestToken = ERC20(address(voteFactoryMap.checkAddress(\"nest\")));\r\n        _tokenMapping = Nest_NToken_TokenMapping(address(voteFactoryMap.checkAddress(\"nest.nToken.tokenMapping\")));\r\n        _nTokenAuction = address(voteFactoryMap.checkAddress(\"nest.nToken.tokenAuction\"));\r\n        _offerMainMapping[address(_offerMain)] = true;\r\n        _offerMainMapping[address(_nTokeOfferMain)] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Initialize token price charge parameters\r\n    * @param tokenAddress Token address\r\n    */\r\n    function addPriceCost(address tokenAddress) public {\r\n       \r\n    }\r\n    \r\n    /**\r\n    * @dev Add price\r\n    * @param ethAmount ETH amount\r\n    * @param tokenAmount Erc20 amount\r\n    * @param endBlock Effective price block\r\n    * @param tokenAddress Erc20 address\r\n    * @param offerOwner Offering address\r\n    */\r\n    function addPrice(uint256 ethAmount, uint256 tokenAmount, uint256 endBlock, address tokenAddress, address offerOwner) public onlyOfferMain{\r\n        // Add effective block price information\r\n        TokenInfo storage tokenInfo = _tokenInfo[tokenAddress];\r\n        PriceInfo storage priceInfo = tokenInfo.priceInfoList[endBlock];\r\n        priceInfo.ethAmount = priceInfo.ethAmount.add(ethAmount);\r\n        priceInfo.erc20Amount = priceInfo.erc20Amount.add(tokenAmount);\r\n        if (endBlock != tokenInfo.latestOffer) {\r\n            // If different block offer\r\n            priceInfo.frontBlock = tokenInfo.latestOffer;\r\n            tokenInfo.latestOffer = endBlock;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Price modification in taker orders\r\n    * @param ethAmount ETH amount\r\n    * @param tokenAmount Erc20 amount\r\n    * @param tokenAddress Token address \r\n    * @param endBlock Block of effective price\r\n    */\r\n    function changePrice(uint256 ethAmount, uint256 tokenAmount, address tokenAddress, uint256 endBlock) public onlyOfferMain {\r\n        TokenInfo storage tokenInfo = _tokenInfo[tokenAddress];\r\n        PriceInfo storage priceInfo = tokenInfo.priceInfoList[endBlock];\r\n        priceInfo.ethAmount = priceInfo.ethAmount.sub(ethAmount);\r\n        priceInfo.erc20Amount = priceInfo.erc20Amount.sub(tokenAmount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Update and check the latest price\r\n    * @param tokenAddress Token address\r\n    * @return ethAmount ETH amount\r\n    * @return erc20Amount Erc20 amount\r\n    * @return blockNum Price block\r\n    */\r\n    function updateAndCheckPriceNow(address tokenAddress) public payable returns(uint256 ethAmount, uint256 erc20Amount, uint256 blockNum) {\r\n        require(checkUseNestPrice(address(msg.sender)));\r\n        mapping(uint256 => PriceInfo) storage priceInfoList = _tokenInfo[tokenAddress].priceInfoList;\r\n        uint256 checkBlock = _tokenInfo[tokenAddress].latestOffer;\r\n        while(checkBlock > 0 && (checkBlock >= block.number || priceInfoList[checkBlock].ethAmount == 0)) {\r\n            checkBlock = priceInfoList[checkBlock].frontBlock;\r\n        }\r\n        require(checkBlock != 0);\r\n        PriceInfo memory priceInfo = priceInfoList[checkBlock];\r\n        address nToken = _tokenMapping.checkTokenMapping(tokenAddress);\r\n        if (nToken == address(0x0)) {\r\n            _abonus.switchToEth.value(_priceCost)(address(_nestToken));\r\n        } else {\r\n            _abonus.switchToEth.value(_priceCost)(address(nToken));\r\n        }\r\n        if (msg.value > _priceCost) {\r\n            repayEth(address(msg.sender), msg.value.sub(_priceCost));\r\n        }\r\n        emit NowTokenPrice(tokenAddress,priceInfo.ethAmount, priceInfo.erc20Amount);\r\n        return (priceInfo.ethAmount,priceInfo.erc20Amount, checkBlock);\r\n    }\r\n    \r\n    /**\r\n    * @dev Update and check the latest price-internal use\r\n    * @param tokenAddress Token address\r\n    * @return ethAmount ETH amount\r\n    * @return erc20Amount Erc20 amount\r\n    */\r\n    function updateAndCheckPricePrivate(address tokenAddress) public view onlyOfferMain returns(uint256 ethAmount, uint256 erc20Amount) {\r\n        mapping(uint256 => PriceInfo) storage priceInfoList = _tokenInfo[tokenAddress].priceInfoList;\r\n        uint256 checkBlock = _tokenInfo[tokenAddress].latestOffer;\r\n        while(checkBlock > 0 && (checkBlock >= block.number || priceInfoList[checkBlock].ethAmount == 0)) {\r\n            checkBlock = priceInfoList[checkBlock].frontBlock;\r\n        }\r\n        if (checkBlock == 0) {\r\n            return (0,0);\r\n        }\r\n        PriceInfo memory priceInfo = priceInfoList[checkBlock];\r\n        return (priceInfo.ethAmount,priceInfo.erc20Amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Update and check the effective price list\r\n    * @param tokenAddress Token address\r\n    * @param num Number of prices to check\r\n    * @return uint256[] price list\r\n    */\r\n    function updateAndCheckPriceList(address tokenAddress, uint256 num) public payable returns (uint256[] memory) {\r\n        require(checkUseNestPrice(address(msg.sender)));\r\n        mapping(uint256 => PriceInfo) storage priceInfoList = _tokenInfo[tokenAddress].priceInfoList;\r\n        // Extract data\r\n        uint256 length = num.mul(3);\r\n        uint256 index = 0;\r\n        uint256[] memory data = new uint256[](length);\r\n        uint256 checkBlock = _tokenInfo[tokenAddress].latestOffer;\r\n        while(index < length && checkBlock > 0){\r\n            if (checkBlock < block.number && priceInfoList[checkBlock].ethAmount != 0) {\r\n                // Add return data\r\n                data[index++] = priceInfoList[checkBlock].ethAmount;\r\n                data[index++] = priceInfoList[checkBlock].erc20Amount;\r\n                data[index++] = checkBlock;\r\n            }\r\n            checkBlock = priceInfoList[checkBlock].frontBlock;\r\n        }\r\n        require(length == data.length);\r\n        // Allocation\r\n        address nToken = _tokenMapping.checkTokenMapping(tokenAddress);\r\n        if (nToken == address(0x0)) {\r\n            _abonus.switchToEth.value(_priceCost)(address(_nestToken));\r\n        } else {\r\n            _abonus.switchToEth.value(_priceCost)(address(nToken));\r\n        }\r\n        if (msg.value > _priceCost) {\r\n            repayEth(address(msg.sender), msg.value.sub(_priceCost));\r\n        }\r\n        return data;\r\n    }\r\n    \r\n    // Activate the price checking function\r\n    function activation() public {\r\n        _nestToken.safeTransferFrom(address(msg.sender), _destructionAddress, destructionAmount);\r\n        _addressEffect[address(msg.sender)] = now.add(effectTime);\r\n    }\r\n    \r\n    // Transfer ETH\r\n    function repayEth(address accountAddress, uint256 asset) private {\r\n        address payable addr = accountAddress.make_payable();\r\n        addr.transfer(asset);\r\n    }\r\n    \r\n    // Check block price - user account only\r\n    function checkPriceForBlock(address tokenAddress, uint256 blockNum) public view returns (uint256 ethAmount, uint256 erc20Amount) {\r\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\r\n        TokenInfo storage tokenInfo = _tokenInfo[tokenAddress];\r\n        return (tokenInfo.priceInfoList[blockNum].ethAmount, tokenInfo.priceInfoList[blockNum].erc20Amount);\r\n    }    \r\n    \r\n    // Check real-time price - user account only\r\n    function checkPriceNow(address tokenAddress) public view returns (uint256 ethAmount, uint256 erc20Amount, uint256 blockNum) {\r\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\r\n        mapping(uint256 => PriceInfo) storage priceInfoList = _tokenInfo[tokenAddress].priceInfoList;\r\n        uint256 checkBlock = _tokenInfo[tokenAddress].latestOffer;\r\n        while(checkBlock > 0 && (checkBlock >= block.number || priceInfoList[checkBlock].ethAmount == 0)) {\r\n            checkBlock = priceInfoList[checkBlock].frontBlock;\r\n        }\r\n        if (checkBlock == 0) {\r\n            return (0,0,0);\r\n        }\r\n        PriceInfo storage priceInfo = priceInfoList[checkBlock];\r\n        return (priceInfo.ethAmount,priceInfo.erc20Amount, checkBlock);\r\n    }\r\n    \r\n    // Check whether the price-checking functions can be called\r\n    function checkUseNestPrice(address target) public view returns (bool) {\r\n        if (!_blocklist[target] && _addressEffect[target] < now && _addressEffect[target] != 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Check whether the address is in the blocklist\r\n    function checkBlocklist(address add) public view returns(bool) {\r\n        return _blocklist[add];\r\n    }\r\n    \r\n    // Check the amount of NEST to destroy to call prices\r\n    function checkDestructionAmount() public view returns(uint256) {\r\n        return destructionAmount;\r\n    }\r\n    \r\n    // Check the waiting time to start calling prices\r\n    function checkEffectTime() public view returns (uint256) {\r\n        return effectTime;\r\n    }\r\n    \r\n    // Check call price fee\r\n    function checkPriceCost() public view returns (uint256) {\r\n        return _priceCost;\r\n    }\r\n    \r\n    // Modify the blocklist \r\n    function changeBlocklist(address add, bool isBlock) public onlyOwner {\r\n        _blocklist[add] = isBlock;\r\n    }\r\n    \r\n    // Amount of NEST to destroy to call price-checking functions\r\n    function changeDestructionAmount(uint256 amount) public onlyOwner {\r\n        destructionAmount = amount;\r\n    }\r\n    \r\n    // Modify the waiting time to start calling prices\r\n    function changeEffectTime(uint256 num) public onlyOwner {\r\n        effectTime = num;\r\n    }\r\n    \r\n    // Modify call price fee\r\n    function changePriceCost(uint256 num) public onlyOwner {\r\n        _priceCost = num;\r\n    }\r\n\r\n    // Offering contract only\r\n    modifier onlyOfferMain(){\r\n        require(_offerMainMapping[address(msg.sender)], \"No authority\");\r\n        _;\r\n    }\r\n    \r\n    // Vote administrators only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Voting contract\r\ninterface Nest_3_VoteFactory {\r\n    // Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t// Check whether administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\n// NToken mapping contract\r\ninterface Nest_NToken_TokenMapping {\r\n    function checkTokenMapping(address token) external view returns (address);\r\n}\r\n\r\n// NEST offer main contract\r\ninterface Nest_3_OfferMain {\r\n    function checkTokenAllow(address token) external view returns(bool);\r\n}\r\n\r\n// Bonus pool contract\r\ninterface Nest_3_Abonus {\r\n    function switchToEth(address token) external payable;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"NowTokenPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offerOwner\",\"type\":\"address\"}],\"name\":\"addPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addPriceCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlock\",\"type\":\"bool\"}],\"name\":\"changeBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeDestructionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeEffectTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changePriceCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"checkBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDestructionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEffectTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPriceCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"checkPriceForBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"checkPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"checkUseNestPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"updateAndCheckPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"updateAndCheckPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"updateAndCheckPricePrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Nest_3_OfferPrice","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006cd5698e8854fb6879d6b1c694223b389b465dea","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://efe4c444c74dfda4308c61b98115929498b5ada90bdfd9ba7e3785ea80eb9c1b"}]}