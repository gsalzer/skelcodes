{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\r\n*  HHHHHHHHH     HHHHHHHHHPPPPPPPPPPPPPPPPP        UUUUUUUU     UUUUUUUUPPPPPPPPPPPPPPPPP\r\n*  H:::::::H     H:::::::HP::::::::::::::::P       U::::::U     U::::::UP::::::::::::::::P\r\n*  H:::::::H     H:::::::HP::::::PPPPPP:::::P      U::::::U     U::::::UP::::::PPPPPP:::::P\r\n*  HH::::::H     H::::::HHPP:::::P     P:::::P     UU:::::U     U:::::UUPP:::::P     P:::::P\r\n*    H:::::H     H:::::H    P::::P     P:::::P      U:::::U     U:::::U   P::::P     P:::::P\r\n*    H:::::H     H:::::H    P::::P     P:::::P      U:::::D     D:::::U   P::::P     P:::::P\r\n*    H::::::HHHHH::::::H    P::::PPPPPP:::::P       U:::::D     D:::::U   P::::PPPPPP:::::P\r\n*    H:::::::::::::::::H    P:::::::::::::PP        U:::::D     D:::::U   P:::::::::::::PP\r\n*    H:::::::::::::::::H    P::::PPPPPPPPP          U:::::D     D:::::U   P::::PPPPPPPPP\r\n*    H::::::HHHHH::::::H    P::::P                  U:::::D     D:::::U   P::::P\r\n*    H:::::H     H:::::H    P::::P                  U:::::D     D:::::U   P::::P\r\n*    H:::::H     H:::::H    P::::P                  U::::::U   U::::::U   P::::P\r\n*  HH::::::H     H::::::HHPP::::::PP                U:::::::UUU:::::::U PP::::::PP\r\n*  H:::::::H     H:::::::HP::::::::P                 UU:::::::::::::UU  P::::::::P\r\n*  H:::::::H     H:::::::HP::::::::P                   UU:::::::::UU    P::::::::P\r\n*  HHHHHHHHH     HHHHHHHHHPPPPPPPPPP                     UUUUUUUUU      PPPPPPPPPP\r\n*\r\n*/\r\n\r\npragma solidity >=0.4.24;\r\n\r\ncontract HPUP {\r\n    struct Matrix {\r\n        uint id;\r\n        address owner;\r\n        uint referrals_cnt;\r\n        mapping(uint => uint) referrals;\r\n        uint matrix_referrer;\r\n        address direct_referrer;\r\n        uint from_hp;\r\n        uint cycles;\r\n    }\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint matrices_cnt;\r\n        uint current_matrix;\r\n        uint lastMatrix;\r\n        uint hp_cooldown_time;\r\n        uint hp_cooldown_num;\r\n        uint direct_referrals;\r\n    }\r\n\r\n    struct HPLine {\r\n        address owner;\r\n        uint matrix_id;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public usersById;\r\n    mapping(uint => mapping(uint => uint)) public usersMatrices;\r\n    mapping(uint => Matrix) public matrices;\r\n    mapping(uint => HPLine) public HP;\r\n\r\n    address public owner;\r\n    uint public lastUserId = 1;\r\n    uint public lastHPId = 1;\r\n    uint public lastMatrixId = 1;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Transfer(address indexed user, uint indexed userId, uint indexed amount);\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    constructor(address ownerAddress) public {\r\n        owner = ownerAddress;\r\n\r\n        users[owner] = User({\r\n            id: lastUserId,\r\n            referrer: address(0),\r\n            matrices_cnt: 0,\r\n            current_matrix: 0,\r\n            lastMatrix: 0,\r\n            hp_cooldown_time: 0,\r\n            hp_cooldown_num: 0,\r\n            direct_referrals: 0\r\n            });\r\n\r\n        usersById[lastUserId] = owner;\r\n\r\n        matrices[lastMatrixId] = Matrix({\r\n            id: lastUserId,\r\n            owner: owner,\r\n            referrals_cnt: 0,\r\n            matrix_referrer: 0,\r\n            direct_referrer: address(0),\r\n            from_hp: 0,\r\n            cycles: 0\r\n            });\r\n\r\n        usersMatrices[users[owner].id][users[owner].matrices_cnt] = lastMatrixId;\r\n        users[owner].matrices_cnt++;\r\n        users[owner].current_matrix = 0;\r\n\r\n        HP[lastHPId] = HPLine({\r\n            matrix_id: lastMatrixId,\r\n            owner: owner\r\n            });\r\n\r\n        lastHPId++;\r\n        lastMatrixId++;\r\n        lastUserId++;\r\n\r\n\r\n    }\r\n\r\n    function reg(address referrer) public payable {\r\n        registration(msg.sender, referrer);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.15 ether, \"registration cost 0.15\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        users[userAddress] = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            matrices_cnt: 0,\r\n            current_matrix: 0,\r\n            lastMatrix: 0,\r\n            hp_cooldown_time: 0,\r\n            hp_cooldown_num: 0,\r\n            direct_referrals: 0\r\n            });\r\n\r\n        usersById[lastUserId] = userAddress;\r\n\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].direct_referrals++;\r\n\r\n        payUser(referrerAddress, 0.025 ether);\r\n        joinHP(lastMatrixId, userAddress);\r\n        fillMatrix(userAddress, referrerAddress, 0);\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function purchaseHPPosition() public payable {\r\n        require(msg.value == 0.125 ether, \"purchase cost 0.125\");\r\n        require(isUserExists(msg.sender), \"user not exists\");\r\n        require(users[msg.sender].matrices_cnt < 150, \"max 150 hp allowed\");\r\n\r\n        if (users[msg.sender].hp_cooldown_time < now - 86400) {\r\n            users[msg.sender].hp_cooldown_time = now;\r\n            users[msg.sender].hp_cooldown_num = 1;\r\n        } else {\r\n            if (users[msg.sender].hp_cooldown_num < 3) {\r\n                users[msg.sender].hp_cooldown_num++;\r\n            } else {\r\n                revert(\"24h purchase limit\");\r\n            }\r\n        }\r\n\r\n        joinHP(lastMatrixId, msg.sender);\r\n        fillMatrix(msg.sender, users[msg.sender].referrer, 1);\r\n    }\r\n\r\n    function payUser(address user, uint amount) private {\r\n        emit Transfer(user, users[user].id, amount);\r\n        address(uint160(user)).transfer(amount);\r\n    }\r\n\r\n    function payHP(address user) private {\r\n        emit Transfer(user, users[user].id, 0.05 ether);\r\n        address(uint160(user)).transfer(0.05 ether);\r\n    }\r\n\r\n    function payAdmin(uint amount) private {\r\n        emit Transfer(owner, 0, amount);\r\n        address(uint160(owner)).transfer(amount);\r\n    }\r\n\r\n    function joinHP(uint matrixId, address matrixOwner) private {\r\n        HP[lastHPId] = HPLine({\r\n            matrix_id: matrixId,\r\n            owner: matrixOwner\r\n            });\r\n        lastHPId++;\r\n\r\n        if (matrices[matrixId].id != 0) {\r\n            matrices[matrixId].cycles++;\r\n        }\r\n\r\n        if (lastHPId % 2 == 0) {\r\n            if (lastHPId <= 2) {\r\n                payHP(owner);\r\n            } else {\r\n                payHP(HP[lastHPId / 2 - 1].owner);\r\n                joinHP(HP[lastHPId / 2 - 1].matrix_id, HP[lastHPId / 2 - 1].owner);\r\n                payForMatrix(matrices[HP[lastHPId / 2 - 1].matrix_id].matrix_referrer);\r\n            }\r\n        }\r\n    }\r\n\r\n    function payForMatrix(uint slotId) private {\r\n        if (slotId == 0) {\r\n            payAdmin(0.0375 ether);\r\n            return;\r\n        }\r\n\r\n        uint level1 = slotId;\r\n\r\n        while (users[matrices[level1].owner].direct_referrals < 4) {\r\n            if (level1 == 0) {\r\n                payAdmin(0.0375 ether);\r\n                return;\r\n            }\r\n\r\n            level1 = matrices[level1].matrix_referrer;\r\n        }\r\n\r\n        payUser(matrices[level1].owner, 0.1 * 0.0375 ether);\r\n\r\n        uint level2 = matrices[level1].matrix_referrer;\r\n\r\n        while (users[matrices[level2].owner].direct_referrals < 4) {\r\n            if (level2 == 0) {\r\n                payAdmin(0.9 * 0.0375 ether);\r\n                return;\r\n            }\r\n\r\n            level2 = matrices[level2].matrix_referrer;\r\n        }\r\n\r\n        payUser(matrices[level2].owner, 0.2 * 0.0375 ether);\r\n\r\n        uint level3 = matrices[level2].matrix_referrer;\r\n\r\n        while (users[matrices[level3].owner].direct_referrals < 4) {\r\n            if (level3 == 0) {\r\n                payAdmin(0.7 * 0.0375 ether);\r\n                return;\r\n            }\r\n\r\n            level3 = matrices[level3].matrix_referrer;\r\n        }\r\n\r\n        payUser(matrices[level3].owner, 0.3 * 0.0375 ether);\r\n\r\n        uint level4 = matrices[level3].matrix_referrer;\r\n\r\n        while (users[matrices[level4].owner].direct_referrals < 4) {\r\n            if (level4 == 0) {\r\n                payAdmin(0.4 * 0.0375 ether);\r\n                return;\r\n            }\r\n            level4 = matrices[level4].matrix_referrer;\r\n        }\r\n\r\n        payUser(matrices[level4].owner, 0.4 * 0.0375 ether);\r\n    }\r\n\r\n    function fillMatrix(address user, address referrer, uint from_hp) private {\r\n        if (referrer == address(0)) {\r\n            referrer = usersById[1];\r\n        }\r\n\r\n        uint slotId = findSlot(usersMatrices[users[referrer].id][users[referrer].current_matrix], 1, 4);\r\n\r\n        if (slotId == 0) {\r\n            if (users[referrer].current_matrix == users[referrer].matrices_cnt-1) {\r\n                revert(\"all matrices are full\");\r\n            }\r\n\r\n            users[referrer].current_matrix++;\r\n            slotId = findSlot(usersMatrices[users[referrer].id][users[referrer].current_matrix], 1, 4);\r\n        }\r\n\r\n        payForMatrix(slotId);\r\n\r\n        matrices[lastMatrixId] = Matrix({\r\n            id: lastMatrixId,\r\n            owner: user,\r\n            referrals_cnt: 0,\r\n            matrix_referrer: slotId,\r\n            from_hp: from_hp,\r\n            direct_referrer: referrer,\r\n            cycles: 0\r\n            });\r\n\r\n        usersMatrices[users[user].id][users[user].matrices_cnt] = lastMatrixId;\r\n        users[user].matrices_cnt++;\r\n        users[user].lastMatrix = lastMatrixId;\r\n\r\n        matrices[lastMatrixId].matrix_referrer = slotId;\r\n\r\n        lastMatrixId++;\r\n\r\n        matrices[slotId].referrals[matrices[slotId].referrals_cnt] = lastMatrixId-1;\r\n        matrices[slotId].referrals_cnt++;\r\n    }\r\n\r\n    function findSlot(uint matrix, uint level, uint maxLevel) private returns (uint) {\r\n        if (level > maxLevel) {\r\n            return(0);\r\n        }\r\n\r\n        if (matrices[matrix].referrals_cnt < 4) {\r\n            return(matrix);\r\n        }\r\n\r\n        uint tmpMaxLevel = level+1;\r\n\r\n        while (tmpMaxLevel <= maxLevel) {\r\n            uint i=0;\r\n\r\n            do {\r\n                uint slot = findSlot(matrices[matrix].referrals[i], level+1, tmpMaxLevel);\r\n                if (slot != 0) {\r\n                    return(slot);\r\n                }\r\n\r\n                i++;\r\n            } while (i<4);\r\n\r\n            tmpMaxLevel++;\r\n        }\r\n\r\n        return(0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HP\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"matrix_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseHPPosition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastHPId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMatrixId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"reg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersMatrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrices\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"referrals_cnt\",\"type\":\"uint256\"},{\"name\":\"matrix_referrer\",\"type\":\"uint256\"},{\"name\":\"direct_referrer\",\"type\":\"address\"},{\"name\":\"from_hp\",\"type\":\"uint256\"},{\"name\":\"cycles\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"matrices_cnt\",\"type\":\"uint256\"},{\"name\":\"current_matrix\",\"type\":\"uint256\"},{\"name\":\"lastMatrix\",\"type\":\"uint256\"},{\"name\":\"hp_cooldown_time\",\"type\":\"uint256\"},{\"name\":\"hp_cooldown_num\",\"type\":\"uint256\"},{\"name\":\"direct_referrals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HPUP","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d7a1438a4dc81f4583a58d7102a28aa708f1bef3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0086b2799049533d66c72452869b763fb9f8a74a2f084cf617f9a81c3584dfda"}]}