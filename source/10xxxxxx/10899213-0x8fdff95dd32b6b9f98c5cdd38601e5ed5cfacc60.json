{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n *  HappyGraph by HappyFarm\r\n *  VERSION: 1.12\r\n *  ropsten 0xd2523438645a559e97b961ea40891c22e1fda0ec\r\n */\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract HappyGraph {\r\n\r\n    mapping( address => address[]) public friend_requests;\r\n    mapping( address => address[]) public friends;\r\n    mapping( address =>  mapping( address => bool)) public friends_check;\r\n    mapping( address =>  mapping( address => bool)) public friends_requesting;\r\n    \r\n    event friending_now(address friender);\r\n    \r\n    function send_friend_request(address guy) public returns(bool){\r\n        if(guy==msg.sender)revert();\r\n        friend_requests[guy].push(msg.sender);\r\n        friends_requesting[guy][msg.sender]=true;\r\n        emit friending_now(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    function accept_friend_request(address guy) public returns(bool){\r\n        if(!friends_requesting[msg.sender][guy])revert();\r\n        friends[msg.sender].push(guy);\r\n        friends_check[guy][msg.sender]=true;\r\n        friends[guy].push(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    function list_friend_request(address guy) public view returns(string memory){\r\n        string memory list;\r\n        string memory list_temp;\r\n        string memory temp;\r\n        bool prev=false;\r\n        uint counter=0;\r\n        for(uint i=0;i<friend_requests[guy].length;i++){\r\n            \r\n\r\n            list_temp=list;\r\n            if(prev&&(i>0)&&(!isFriend(guy,friend_requests[guy][i])))list=append(list_temp,\",\",\"\");\r\n\r\n            if(!isFriend(guy,friend_requests[guy][i])){\r\n                prev=true;\r\n                list_temp=list;\r\n                temp=append(\"\\\"\",toString(friend_requests[guy][i]),\"\\\"\");\r\n                list=append(list_temp,temp,\"\");\r\n                counter++;\r\n            }\r\n           \r\n        }\r\n        temp=append(\"{\\\"requests\\\":\\\"\",toString(counter),\"\\\",\\\"list\\\":[\");\r\n        list_temp=append(temp,list,\"]}\");\r\n        return list_temp;\r\n    }\r\n    \r\n    function list_friends(address guy) public view returns(string memory){\r\n        string memory list;\r\n        string memory list_temp;\r\n        string memory temp;\r\n        uint8 counter=0;\r\n        for(uint i=0;i<friends[guy].length;i++){\r\n            temp=append(\"\\\"\",toString(friends[guy][i]),\"\\\"\");\r\n            list_temp=list;\r\n            if(i<friends[guy].length-1){\r\n                list=append(list_temp,temp,\",\");\r\n            }else{\r\n                list=append(list_temp,temp,\"\");\r\n            }\r\n            counter++;\r\n        }\r\n        temp=append(\"{\\\"friends\\\":\\\"\",toString(counter),\"\\\",\\\"list\\\":[\");\r\n        list_temp=append(temp,list,\"]}\");\r\n        return list_temp;\r\n    }\r\n\r\n    \r\n    function isFriend(address guy,address friend) public view returns (bool) {\r\n        return (friends_check[guy][friend]||friends_check[friend][guy]);\r\n    } \r\n    \r\n    \r\n     function countFriends(address guy) public view returns (uint256) {\r\n        return friends[guy].length;\r\n    } \r\n    \r\n    function countRequests(address guy) public view returns (uint256) {\r\n        return friend_requests[guy].length; \r\n    } \r\n    \r\n    function isRequested(address guy,address friend) public view returns (bool) {\r\n        return friends_requesting[guy][friend];\r\n    }\r\n    \r\n    ///////////////////////////////////////////////////////////////////////////\r\n       \r\n    function append(string memory a, string memory b, string memory c) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c));\r\n    }\r\n    \r\n    function toString(address account) internal pure returns(string memory) {\r\n    return toString(abi.encodePacked(account));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns(string memory) {\r\n    return toString(abi.encodePacked(value));\r\n    }\r\n\r\n    function toString(bytes32 value) internal pure returns(string memory) {\r\n    return toString(abi.encodePacked(value));\r\n    }\r\n\r\n    function toString(bytes memory data) internal pure returns(string memory) {\r\n    bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n    bytes memory str = new bytes(2 + data.length * 2);\r\n    str[0] = '0';\r\n    str[1] = 'x';\r\n    for (uint i = 0; i < data.length; i++) {\r\n        str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\r\n        str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\r\n    }\r\n    return string(str);\r\n}\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"friender\",\"type\":\"address\"}],\"name\":\"friending_now\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"accept_friend_request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"countFriends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"countRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"friend_requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"friends\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"friends_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"friends_requesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"}],\"name\":\"isFriend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"}],\"name\":\"isRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"list_friend_request\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"list_friends\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"send_friend_request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HappyGraph","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fdc9f16b03bfee8fa22cfc9be1c5e4095b41d16b1daaa2ba816ed591b020f56"}]}