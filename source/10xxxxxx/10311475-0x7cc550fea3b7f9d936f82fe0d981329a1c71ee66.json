{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* ==========================================================\r\n*\r\n* The Friends Tree Feeder\r\n* \r\n* Website  : https://feeder.frndstree.io\r\n* Telegram : https://t.me/thefriendstree_official\r\n*\r\n* ==========================================================\r\n**/\r\n\r\npragma solidity >=0.5.12 <0.7.0;\r\n\r\ncontract TheFeeder {\r\n    \r\n    struct Matrix {\r\n        uint256 id;\r\n        uint256 referrerId;\r\n        uint256 earnedFromMatrix;\r\n        uint256 earnedFromRef;\r\n        uint256 reinvestCount;\r\n        uint256 slotLastBuyTime;\r\n        uint256 referrerCount;\r\n        address[] referrals;\r\n    }\r\n    \r\n    struct Slots {\r\n        uint256 userId;\r\n        address userAddress;\r\n        uint256 referrerId;\r\n        uint256 slottime;\r\n        uint8 eventsCount;\r\n    }\r\n           \r\n    modifier isEligibleBuy {\r\n        require((now - feeder[msg.sender].slotLastBuyTime) > 300, \"Allowed to buy slot once per 5 minutes!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == payableOwner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event RegisterMatrixEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n    event ReinvestSlotEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n    event BuySlotEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n\r\n    event PaySponsorBonusEvent(uint256 amount, address indexed _sponsorAddress, address indexed _fromAddress, uint256 _time);    \r\n    event MatrixRefPaymentEvent(uint256 amount, address indexed _from, address indexed _to, uint256 _time);\r\n\r\n    mapping(address => Matrix) public feeder;\r\n    mapping(uint256 => Slots) public slots;\r\n    mapping(address => uint256[]) public userSlots;\r\n    mapping(uint256 => address) private idToAddress;\r\n\r\n    uint256 public newIdfeeder = 1;\r\n    uint256 public newSlotId = 1;\r\n    uint256 public activeSlot = 1;    \r\n    \r\n    address public owner;\r\n    address payable payableOwner;\r\n    \r\n    constructor(address _ownerAddress) public {\r\n        \r\n        owner = msg.sender;\r\n        payableOwner = msg.sender;\r\n                \r\n        Matrix memory MatrixUser = Matrix({\r\n            id: newIdfeeder,\r\n            referrerId: uint256(1),\r\n            earnedFromMatrix: uint256(0),\r\n            earnedFromRef: uint256(0),\r\n            reinvestCount: uint256(0),\r\n            slotLastBuyTime: now,\r\n            referrerCount: uint256(0),\r\n            referrals: new address[](0)\r\n        });\r\n        \r\n        emit RegisterMatrixEvent(newIdfeeder, _ownerAddress, _ownerAddress, 0.05 ether, now);\r\n        \r\n        feeder[_ownerAddress] = MatrixUser;\r\n        idToAddress[newIdfeeder] = _ownerAddress;\r\n        \r\n        Slots memory newSlot = Slots({\r\n            userId: newIdfeeder,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint256(1),\r\n            slottime: now,\r\n            eventsCount: uint8(0)\r\n        });\r\n        \r\n        emit BuySlotEvent(newSlotId, _ownerAddress, _ownerAddress, 0.05 ether, now);\r\n        \r\n        slots[newSlotId] = newSlot;\r\n        userSlots[_ownerAddress].push(newSlotId);\r\n        newIdfeeder++;\r\n        newSlotId++;\r\n        \r\n    }\r\n    \r\n    function JoinMatrix(uint256 _referrerId) \r\n      public \r\n      payable \r\n      isEligibleBuy()\r\n    {\r\n        require(msg.value == 0.05 ether, \"Participation fee in a feeder is 0.05 ETH\");\r\n\r\n        address _userAddress = msg.sender;        \r\n\r\n        if ((_referrerId > 0) && (!isAddressExists(_userAddress))) {\r\n\r\n            // Main checks\r\n            uint32 size;\r\n            assembly {\r\n                size := extcodesize(_userAddress)\r\n            }\r\n            require(size == 0, \"cannot be a contract\");\r\n            require(_referrerId < newIdfeeder, \"Invalid referrer ID\");\r\n            require(feeder[_userAddress].id == 0, \"Already registered\");\r\n            // Main check end\r\n\r\n            address _sponsorAddress = idToAddress[_referrerId];\r\n\r\n            // Register in Matrix\r\n            Matrix memory MatrixUser = Matrix({\r\n                id: newIdfeeder,\r\n                referrerId: _referrerId,\r\n                earnedFromMatrix: uint256(0),\r\n                earnedFromRef: uint256(0),\r\n                reinvestCount: uint256(0),\r\n                slotLastBuyTime: now,\r\n                referrerCount: uint256(0),\r\n                referrals: new address[](0)\r\n            });\r\n            \r\n            feeder[_userAddress] = MatrixUser;\r\n            idToAddress[newIdfeeder] = _userAddress;\r\n            newIdfeeder++;\r\n\r\n            if (_referrerId > 0) {\r\n                paySponsorBonus(_sponsorAddress);\r\n                feeder[_sponsorAddress].earnedFromRef += 0.025 ether;\r\n            }\r\n            else{\r\n                paySponsorBonus(idToAddress[1]);\r\n                feeder[idToAddress[1]].earnedFromRef += 0.025 ether;\r\n            }\r\n\r\n            emit RegisterMatrixEvent(newIdfeeder, _userAddress, _sponsorAddress, msg.value, now);\r\n\r\n            // Push referral to sponsor\r\n            feeder[_sponsorAddress].referrals.push(_userAddress);\r\n            feeder[_sponsorAddress].referrerCount++;\r\n\r\n            // Buy Slot\r\n            Slots memory newSlot = Slots({\r\n                userId: feeder[_userAddress].id,\r\n                userAddress: _userAddress,\r\n                referrerId: _referrerId,\r\n                slottime: now,\r\n                eventsCount: uint8(0)\r\n            });\r\n\r\n            emit BuySlotEvent(newSlotId, _userAddress, _sponsorAddress, msg.value, now);\r\n            \r\n            slots[newSlotId] = newSlot;\r\n            userSlots[_userAddress].push(newSlotId);\r\n            newSlotId++;\r\n\r\n        } else {\r\n            \r\n            require(feeder[_userAddress].id > 0, \"You must be registered, enter sponsor code to register!\");\r\n\r\n            _referrerId = feeder[_userAddress].referrerId;\r\n\r\n            // Buy Slot\r\n            Slots memory newSlot = Slots({\r\n                userId: feeder[_userAddress].id,\r\n                userAddress: _userAddress,\r\n                referrerId: _referrerId,\r\n                slottime: now,\r\n                eventsCount: uint8(0)\r\n            });\r\n\r\n            address _sponsorAddress = idToAddress[_referrerId];    \r\n            emit BuySlotEvent(newSlotId, _userAddress, _sponsorAddress, msg.value, now);\r\n\r\n            paySponsorBonus(_sponsorAddress);\r\n            feeder[_sponsorAddress].earnedFromRef += 0.025 ether;\r\n            \r\n            slots[newSlotId] = newSlot;\r\n            userSlots[_userAddress].push(newSlotId);\r\n            feeder[_userAddress].slotLastBuyTime = now;\r\n            newSlotId++;\r\n\r\n        }\r\n\r\n        // PUSH SLOT\r\n       \r\n        uint256 eventCount = slots[activeSlot].eventsCount;\r\n        uint256 newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                slots[activeSlot].userAddress, \r\n                slots[activeSlot].userId, \r\n                idToAddress[feeder[slots[activeSlot].userAddress].referrerId]\r\n            ));\r\n            slots[activeSlot].eventsCount++;\r\n        }\r\n\r\n        if (eventCount < 2) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(slots[activeSlot].userAddress);\r\n                feeder[slots[activeSlot].userAddress].earnedFromMatrix += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (slots[activeSlot].referrerId > 0) {\r\n                    payUpline(idToAddress[slots[activeSlot].referrerId]);\r\n                    feeder[idToAddress[slots[activeSlot].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1]);\r\n                    feeder[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n\r\n            slots[activeSlot].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    function reinvestSlot(address _userAddress, uint256 _userId, address _sponsorAddress) private returns (bool _isReinvested) {\r\n\r\n        uint256 _referrerId = feeder[_userAddress].referrerId;\r\n\r\n        Slots memory _reinvestslot = Slots({\r\n            userId: _userId,\r\n            userAddress: _userAddress,\r\n            referrerId: _referrerId,\r\n            slottime: now,\r\n            eventsCount: uint8(0)\r\n        });\r\n        \r\n        feeder[slots[activeSlot].userAddress].reinvestCount++;        \r\n        slots[newSlotId] = _reinvestslot;\r\n        userSlots[_userAddress].push(newSlotId);\r\n        emit ReinvestSlotEvent(newSlotId, _userAddress, _sponsorAddress, msg.value, now);\r\n        newSlotId++;\r\n\r\n        slots[activeSlot].eventsCount = 3;\r\n        uint256 _nextActiveSlot = activeSlot+1;\r\n\r\n        payUpline(slots[_nextActiveSlot].userAddress);\r\n        feeder[slots[_nextActiveSlot].userAddress].earnedFromMatrix += msg.value/2;\r\n        activeSlot++;\r\n\r\n        _isReinvested = true;\r\n\r\n        return _isReinvested;\r\n\r\n    }\r\n\r\n    function payUpline(address _sponsorAddress) private returns (uint distributeAmount) {        \r\n        distributeAmount = 0.025 ether;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit MatrixRefPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, now);\r\n        }        \r\n        return distributeAmount;\r\n    }    \r\n\r\n    function paySponsorBonus(address _sponsorAddress) private {\r\n        uint256 distributeAmount = 0.025 ether;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit PaySponsorBonusEvent(distributeAmount, _sponsorAddress, msg.sender, now);\r\n        }\r\n    }\r\n\r\n    function isAddressExists(address _userAddress) public view returns (bool) {\r\n        return (feeder[_userAddress].id != 0);\r\n    }\r\n    \r\n    function getTreeReferrals(address _userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n      { \r\n        return feeder[_userAddress].referrals;\r\n      }\r\n\r\n    function withdraw() public onlyOwner returns(bool) {\r\n        uint256 amount = address(this).balance;\r\n        payableOwner.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"BuySlotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"MatrixRefPaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PaySponsorBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RegisterMatrixEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ReinvestSlotEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"JoinMatrix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromMatrix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotLastBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTreeReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isAddressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newIdfeeder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slottime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TheFeeder","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e25e333154964f1088751ca1f7a21fbf8cc6a153","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84a15c6ab21045dc705a921cb64ebc97e386a732c02574ae74b527aa583fa11b"}]}