{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract DaoStakeContract is Ownable, Pausable {\r\n    // Library for safely handling uint256\r\n    using SafeMath for uint256;\r\n\r\n    uint256 ONE_DAY;\r\n    uint256 public stakeDays;\r\n    uint256 public maxStakedQuantity;\r\n    address public phnxContractAddress;\r\n    uint256 public ratio;\r\n    uint256 public totalStakedTokens;\r\n\r\n    mapping(address => uint256) public stakerBalance;\r\n    mapping(uint256 => StakerData) public stakerData;\r\n\r\n    struct StakerData {\r\n        uint256 altQuantity;\r\n        uint256 initiationTimestamp;\r\n        uint256 durationTimestamp;\r\n        uint256 rewardAmount;\r\n        address staker;\r\n    }\r\n    event StakeCompleted(\r\n        uint256 altQuantity,\r\n        uint256 initiationTimestamp,\r\n        uint256 durationTimestamp,\r\n        uint256 rewardAmount,\r\n        address staker,\r\n        address phnxContractAddress,\r\n        address portalAddress\r\n    );\r\n\r\n    event Unstake(\r\n        address staker,\r\n        address stakedToken,\r\n        address portalAddress,\r\n        uint256 altQuantity,\r\n        uint256 durationTimestamp\r\n    ); // When ERC20s are withdrawn\r\n    event BaseInterestUpdated(uint256 _newRate, uint256 _oldRate);\r\n\r\n    constructor() public {\r\n        ratio = 821917808219178;\r\n        phnxContractAddress = 0x38A2fDc11f526Ddd5a607C1F251C065f40fBF2f7;\r\n        maxStakedQuantity = 10000000000000000000000;\r\n        stakeDays = 365;\r\n        ONE_DAY = 60;\r\n    }\r\n\r\n    /* @dev stake function which enable the user to stake PHNX Tokens.\r\n     *  @param _altQuantity, PHNX amount to be staked.\r\n     *  @param _days, how many days PHNX tokens are staked for (in days)\r\n     */\r\n    function stakeALT(uint256 _altQuantity, uint256 _days)\r\n        public\r\n        whenNotPaused\r\n        returns (uint256 rewardAmount)\r\n    {\r\n        require(_days <= stakeDays && _days > 0, \"Invalid Days\"); // To check days\r\n        require(\r\n            _altQuantity <= maxStakedQuantity && _altQuantity > 0,\r\n            \"Invalid PHNX quantity\"\r\n        ); // To verify PHNX quantity\r\n\r\n        IERC20(phnxContractAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _altQuantity\r\n        );\r\n\r\n        rewardAmount = _calculateReward(_altQuantity, ratio, _days);\r\n\r\n        uint256 _timestamp = block.timestamp;\r\n\r\n        if (stakerData[_timestamp].staker != address(0)) {\r\n            _timestamp = _timestamp.add(1);\r\n        }\r\n\r\n        stakerData[_timestamp] = StakerData(\r\n            _altQuantity,\r\n            _timestamp,\r\n            _days.mul(ONE_DAY),\r\n            rewardAmount,\r\n            msg.sender\r\n        );\r\n\r\n        stakerBalance[msg.sender] = stakerBalance[msg.sender].add(_altQuantity);\r\n\r\n        totalStakedTokens = totalStakedTokens.add(_altQuantity);\r\n\r\n        IERC20(phnxContractAddress).transfer(msg.sender, rewardAmount);\r\n\r\n        emit StakeCompleted(\r\n            _altQuantity,\r\n            _timestamp,\r\n            _days.mul(ONE_DAY),\r\n            rewardAmount,\r\n            msg.sender,\r\n            phnxContractAddress,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /*  @dev unStake function which enable the user to withdraw his PHNX Tokens.\r\n     *  @param _expiredTimestamps, time when PHNX tokens are unlocked.\r\n     *  @param _amount, amount to be withdrawn by the user.\r\n     */\r\n    function unstakeALT(uint256[] calldata _expiredTimestamps, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        require(_amount > 0, \"Amount should be greater than 0\");\r\n        uint256 withdrawAmount = 0;\r\n        uint256 burnAmount = 0;\r\n        for (uint256 i = 0; i < _expiredTimestamps.length; i = i.add(1)) {\r\n            require(\r\n                stakerData[_expiredTimestamps[i]].durationTimestamp != 0,\r\n                \"Nothing staked\"\r\n            );\r\n            if (\r\n                _expiredTimestamps[i].add(\r\n                    stakerData[_expiredTimestamps[i]].durationTimestamp //if timestamp is not expired\r\n                ) >= block.timestamp\r\n            ) {\r\n                uint256 _remainingDays = (\r\n                    stakerData[_expiredTimestamps[i]]\r\n                        .durationTimestamp\r\n                        .add(_expiredTimestamps[i])\r\n                        .sub(block.timestamp)\r\n                )\r\n                    .div(ONE_DAY);\r\n                uint256 _totalDays = stakerData[_expiredTimestamps[i]]\r\n                    .durationTimestamp\r\n                    .div(ONE_DAY);\r\n                if (_amount >= stakerData[_expiredTimestamps[i]].altQuantity) {\r\n                    uint256 stakeBurn = _calculateBurn(\r\n                        stakerData[_expiredTimestamps[i]].altQuantity,\r\n                        _remainingDays,\r\n                        _totalDays\r\n                    );\r\n                    burnAmount = burnAmount.add(stakeBurn);\r\n                    withdrawAmount = withdrawAmount.add(\r\n                        stakerData[_expiredTimestamps[i]].altQuantity.sub(\r\n                            stakeBurn\r\n                        )\r\n                    );\r\n                    _amount = _amount.sub(\r\n                        stakerData[_expiredTimestamps[i]].altQuantity\r\n                    );\r\n                    emit Unstake(\r\n                        msg.sender,\r\n                        phnxContractAddress,\r\n                        address(this),\r\n                        stakerData[_expiredTimestamps[i]].altQuantity,\r\n                        _expiredTimestamps[i]\r\n                    );\r\n                    stakerData[_expiredTimestamps[i]].altQuantity = 0;\r\n                } else if (\r\n                    (_amount < stakerData[_expiredTimestamps[i]].altQuantity) &&\r\n                    _amount > 0 // if timestamp is expired\r\n                ) {\r\n                    stakerData[_expiredTimestamps[i]]\r\n                        .altQuantity = stakerData[_expiredTimestamps[i]]\r\n                        .altQuantity\r\n                        .sub(_amount);\r\n                    uint256 stakeBurn = _calculateBurn(\r\n                        _amount,\r\n                        _remainingDays,\r\n                        _totalDays\r\n                    );\r\n                    burnAmount = burnAmount.add(stakeBurn);\r\n                    withdrawAmount = withdrawAmount.add(_amount.sub(stakeBurn));\r\n                    emit Unstake(\r\n                        msg.sender,\r\n                        phnxContractAddress,\r\n                        address(this),\r\n                        _amount,\r\n                        _expiredTimestamps[i]\r\n                    );\r\n                    _amount = 0;\r\n                }\r\n            } else {\r\n                if (_amount >= stakerData[_expiredTimestamps[i]].altQuantity) {\r\n                    _amount = _amount.sub(\r\n                        stakerData[_expiredTimestamps[i]].altQuantity\r\n                    );\r\n                    withdrawAmount = withdrawAmount.add(\r\n                        stakerData[_expiredTimestamps[i]].altQuantity\r\n                    );\r\n                    emit Unstake(\r\n                        msg.sender,\r\n                        phnxContractAddress,\r\n                        address(this),\r\n                        stakerData[_expiredTimestamps[i]].altQuantity,\r\n                        _expiredTimestamps[i]\r\n                    );\r\n                    stakerData[_expiredTimestamps[i]].altQuantity = 0;\r\n                } else if (\r\n                    (_amount < stakerData[_expiredTimestamps[i]].altQuantity) &&\r\n                    _amount > 0\r\n                ) {\r\n                    stakerData[_expiredTimestamps[i]]\r\n                        .altQuantity = stakerData[_expiredTimestamps[i]]\r\n                        .altQuantity\r\n                        .sub(_amount);\r\n                    withdrawAmount = withdrawAmount.add(_amount);\r\n                    emit Unstake(\r\n                        msg.sender,\r\n                        phnxContractAddress,\r\n                        address(this),\r\n                        _amount,\r\n                        _expiredTimestamps[i]\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        require(withdrawAmount != 0, \"Not Transferred\");\r\n\r\n        if (burnAmount > 0) {\r\n            IERC20(phnxContractAddress).transfer(\r\n                0x0000000000000000000000000000000000000001,\r\n                burnAmount\r\n            );\r\n        }\r\n\r\n        stakerBalance[msg.sender] = stakerBalance[msg.sender].sub(\r\n            withdrawAmount\r\n        );\r\n\r\n        totalStakedTokens = totalStakedTokens.sub(withdrawAmount);\r\n\r\n        IERC20(phnxContractAddress).transfer(msg.sender, withdrawAmount);\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /* @dev to calculate reward Amount\r\n     *  @param _altQuantity , amount of ALT tokens staked.\r\n     *@param _baseInterest rate\r\n     */\r\n    function _calculateReward(\r\n        uint256 _altQuantity,\r\n        uint256 _ratio,\r\n        uint256 _days\r\n    ) internal pure returns (uint256 rewardAmount) {\r\n        rewardAmount = (_altQuantity.mul(_ratio).mul(_days)).div(\r\n            1000000000000000000\r\n        );\r\n    }\r\n\r\n    /* @dev function to calculate the amount of PHNX token burned incase of early unstake.\r\n     *@param _amount, The amount of Tokens user is unstaking.\r\n     *@param _remainingDays, remaining time before the tokens will be unlocked.\r\n     *@param _totalDays, total days tokens were staked for.\r\n     */\r\n    function _calculateBurn(\r\n        uint256 _amount,\r\n        uint256 _remainingDays,\r\n        uint256 _totalDays\r\n    ) internal pure returns (uint256 burnAmount) {\r\n        burnAmount = ((_amount * _remainingDays) / _totalDays);\r\n    }\r\n\r\n    /* @dev to set base interest rate. Can only be called by owner\r\n     *  @param _rate, interest rate (in wei)\r\n     */\r\n    function updateRatio(uint256 _rate) public onlyOwner whenNotPaused {\r\n        ratio = _rate;\r\n    }\r\n\r\n    function updateTime(uint256 _time) public onlyOwner whenNotPaused {\r\n        ONE_DAY = _time;\r\n    }\r\n\r\n    function updateQuantity(uint256 _quantity) public onlyOwner whenNotPaused {\r\n        maxStakedQuantity = _quantity;\r\n    }\r\n\r\n    /* @dev function to update stakeDays.\r\n     *@param _stakeDays, updated Days .\r\n     */\r\n    function updatestakeDays(uint256 _stakeDays) public onlyOwner {\r\n        stakeDays = _stakeDays;\r\n    }\r\n\r\n    /* @dev Funtion to withdraw all PHNX from contract incase of emergency, can only be called by owner.*/\r\n    function withdrawTokens() public onlyOwner {\r\n        IERC20(phnxContractAddress).transfer(\r\n            owner(),\r\n            IERC20(phnxContractAddress).balanceOf(address(this))\r\n        );\r\n        pause();\r\n    }\r\n\r\n    function getTotalrewardTokens() external view returns(uint256){\r\n        return IERC20(phnxContractAddress).balanceOf(address(this)).sub(totalStakedTokens);\r\n    }\r\n\r\n    /* @dev function to update Phoenix contract address.\r\n     *@param _address, new address of the contract.\r\n     */\r\n    function setPheonixContractAddress(address _address) public onlyOwner {\r\n        phnxContractAddress = _address;\r\n    }\r\n\r\n    /* @dev function which restricts the user from stakng PHNX tokens. */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /* @dev function which disables the Pause function. */\r\n    function unPause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldRate\",\"type\":\"uint256\"}],\"name\":\"BaseInterestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"altQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"phnxContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portalAddress\",\"type\":\"address\"}],\"name\":\"StakeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"altQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTotalrewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakedQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phnxContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPheonixContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_altQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stakeALT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"altQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initiationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_expiredTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeALT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"updateQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeDays\",\"type\":\"uint256\"}],\"name\":\"updatestakeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaoStakeContract","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://41720497da10ce9c1eefdc4a690cfa74bf3287ea726d3e4881cfcb176c4742ed"}]}