{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n\r\ncontract Ownable {\r\n\r\n\r\n  address newOwner;\r\n  mapping (address=>bool) owners;\r\n  address owner;\r\n\r\n// all events will be saved as log files\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner,string name);\r\n  event RemoveOwner(address owner);\r\n\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  \r\n  function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{\r\n    require(owners[_newOwner] == false);\r\n    require(newOwner != msg.sender);\r\n    owners[_newOwner] = true;\r\n    emit AddOwner(_newOwner,newOwnerName);\r\n  }\r\n\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender);  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n\r\n}\r\n\r\n contract ERC20 {\r\n\r\n  \t  function totalSupply() public view returns (uint256);\r\n      function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n      function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n      function approve(address spender, uint256 tokens) public returns (bool success);\r\n      function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n      function decimals() public view returns(uint256);\r\n      \r\n      function createKYCData(bytes32 _KycData1, bytes32 _kycData2,address  _wallet) public returns(uint256);\r\n\t  function haveKYC(address _addr) public view returns(bool);\r\n\t  function getKYCData(address _wallet) public view returns(bytes32 _data1,bytes32 _data2);\r\n }\r\n\r\n\r\ncontract POOLS{\r\n    function totalInterest() public view returns(uint256);\r\n    function totalClaimInterest() public view returns(uint256);\r\n    // uint256 public supplyInterest;\r\n    function totalSupply() public view returns(uint256);\r\n    function totalBorrow() public view returns(uint256);\r\n    function startPools() public view returns(uint256);\r\n    function borrowInterest() public view returns(uint256);\r\n    \r\n    function getMaxDepositContract(address _addr) public view returns(uint256 _max);\r\n    function getAllDepositIdx(address _addr) public view returns(uint256[] memory _idx);\r\n    function getDepositDataIdx(uint256 idx) public view returns(uint256[] memory _data);\r\n    \r\n}\r\n\r\n\r\n\r\ncontract SZORewardPools is Ownable{\r\n    \r\n    mapping (address => uint256) public lastTimeClaim;\r\n    mapping (address => uint256) public poolsRewardIdx;\r\n    mapping (address => bool) public poolsRewardActive;\r\n    \r\n    address[] public pools; \r\n    \r\n    ERC20 szoToken;\r\n    uint256  public  maxPerDay = 10000 ether;\r\n    uint256  public  amountPerToken;\r\n    uint256  public  specialBonus; // percent\r\n    \r\n    uint256  public  rewardPerSec;\r\n    bool  public  pauseReward;\r\n    address public newPools;\r\n    bytes32 data1;\r\n    bytes32 data2;\r\n\r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n             bytes memory tempEmptyStringTest = bytes(source);\r\n            if (tempEmptyStringTest.length == 0) {\r\n                return 0x0;\r\n             }\r\n\r\n            assembly {\r\n                 result := mload(add(source, 32))\r\n            }\r\n    }\r\n    \r\n    constructor() public{\r\n        szoToken = ERC20(0x6086b52Cab4522b4B0E8aF9C3b2c5b8994C36ba6); \r\n        amountPerToken = 50 ether;\r\n        specialBonus = 60 days;\r\n        rewardPerSec = 1 ether;// / 2592000; // 30 day\r\n        rewardPerSec /= 2592000;\r\n        \r\n        setPoolRewardAddr(0xE29659A35260B87264eBf1155dD03B7DE17d9B26); // DAI\r\n        setPoolRewardAddr(0x9028c4B1d36C8D72217902bD4c2c4E2bf38668FC); // USDT\r\n        setPoolRewardAddr(0x4d2Be030cef4f9A51CC81AB92CdA12C5a90e4338); // USDC\r\n        \r\n        data1 = stringToBytes32(\"GOT REWARD POOL\");\r\n        data2 = stringToBytes32(\"NO ENCODE\");\r\n    }\r\n    \r\n    function setPauseReward() public onlyOwners{\r\n        pauseReward = true;\r\n    }\r\n    \r\n    function moveToNewRewardPools(address _newAddr) public onlyOwners{\r\n        require(pauseReward == true,\"Please Pause before move to new pools\");\r\n        bytes32 _data1;\r\n        bytes32 _data2;\r\n        (_data1,_data2) = szoToken.getKYCData(address(this));\r\n        \r\n        if(szoToken.haveKYC(_newAddr)  == false){\r\n          szoToken.createKYCData(_data1,_data2,_newAddr);    \r\n        }\r\n        \r\n        uint256 amount = szoToken.balanceOf(address(this));\r\n        newPools = _newAddr;\r\n        szoToken.transfer(_newAddr,amount);\r\n        \r\n    }\r\n    \r\n    function setSZOAddr(address _addr) public onlyOwners{\r\n        szoToken = ERC20(_addr);\r\n    }\r\n    \r\n    function setRewardRatio(uint256 _amount) public onlyOwners{\r\n        amountPerToken = _amount;\r\n    }\r\n    \r\n    function setSpecialBonus(uint256 _time) public onlyOwners{\r\n        specialBonus = _time;\r\n    }\r\n    \r\n    function setPoolRewardAddr(address _addr)public onlyOwners{\r\n            if(poolsRewardIdx[_addr] == 0){\r\n                uint256 idx = pools.push(_addr);\r\n                poolsRewardIdx[_addr] = idx;\r\n                poolsRewardActive[_addr] = true;\r\n            }    \r\n    }\r\n    \r\n    function setActivePools(address _addr,bool _act) public onlyOwners{\r\n        poolsRewardActive[_addr] =  _act;\r\n    }\r\n    \r\n    \r\n    function getReward(address _contract,address _wallet) public view returns(uint256){\r\n        if(poolsRewardActive[_contract] == false) return 0;\r\n        \r\n        POOLS  pool = POOLS(_contract);\r\n        uint256 maxIdx = pool.getMaxDepositContract(_wallet);\r\n        uint256[] memory idxs = new uint256[](maxIdx);\r\n        idxs = pool.getAllDepositIdx(_wallet);\r\n        uint256 totalReward;\r\n        uint256 lastClaim = lastTimeClaim[_wallet];\r\n        uint256[] memory _data = new uint256[](2);\r\n        uint256 _reward;\r\n        \r\n        for(uint256 i=0;i<maxIdx;i++){\r\n            _data = pool.getDepositDataIdx(idxs[i]-1);\r\n            if(_data[0] > 0){\r\n                if(_data[1] > lastClaim){\r\n                    _reward = (_data[0] / amountPerToken) * ((now - _data[1]) * rewardPerSec);  \r\n                }\r\n                else\r\n                {\r\n                    _reward = (_data[0] / amountPerToken) * ((now - lastClaim) * rewardPerSec);  \r\n                }\r\n                totalReward += _reward;\r\n            }\r\n        }\r\n        \r\n        return totalReward;\r\n    }\r\n    \r\n    \r\n    \r\n    function claimReward(address _contract,address _wallet) public  returns(uint256){\r\n        if(poolsRewardActive[_contract] == false) return 0;\r\n        require(msg.sender == _wallet || owners[msg.sender] == true,\"No permission to claim reward\");\r\n        require(pauseReward == false,\"REWARD PAUSE TO CLAIM\");\r\n        \r\n        uint256 reward = getReward(_contract,_wallet);\r\n        lastTimeClaim[_wallet] = now;\r\n        szoToken.transfer(_wallet,reward);\r\n        if(szoToken.haveKYC(_wallet) == false){\r\n            szoToken.createKYCData(data1,data2,_wallet);\r\n        }\r\n        \r\n        \r\n        return reward;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"moveToNewRewardPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsRewardActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsRewardIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_act\",\"type\":\"bool\"}],\"name\":\"setActivePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPauseReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPoolRewardAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSZOAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSpecialBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"specialBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SZORewardPools","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://63724bb269f19fa2472eda49cf27806331176856db077be84c2ccf64a170db8c"}]}