{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\ninterface Rewards {\r\n    function withdraw(uint) external;\r\n    function getReward() external;\r\n    function stake(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function exit() external;\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\ninterface ICurveFi {\r\n\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[4] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[4] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n}\r\n\r\ninterface Synthetix {\r\n    function issueMaxSynths() external;\r\n    function burnSynths(uint) external;\r\n    function debtBalanceOf(address account, bytes32 currencyKey) external view returns (uint);\r\n    function transferableSynthetix(address account) external view returns (uint transferable);\r\n    function burnSynthsToTarget() external;\r\n    function maxIssuableSynths(address) external view returns (uint);\r\n}\r\n\r\ninterface SynthetixEscrow {\r\n    function vest() external;\r\n}\r\n\r\ninterface SynthetixFees {\r\n    function claimFees() external;\r\n    function feesAvailable(address) external view returns (uint totalFees,uint totalRewards);\r\n    function isFeesClaimable(address) external view returns (bool);\r\n}\r\n\r\ninterface SynthetixExchange {\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint rate);\r\n}\r\n\r\ninterface SynthetixAddress {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n}\r\n\r\ncontract StrategySNXSUSD {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address constant public want = address(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\r\n    address constant public curve = address(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD);\r\n    address constant public scrv = address(0xC25a3A3b969415c80451098fa907EC722572917F);\r\n    address constant public rewards = address(0xDCB6A51eA3CA5d3Fd898Fd6564757c7aAeC3ca92);\r\n    address constant public susd = address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    address constant public escrow = address(0xb671F2210B1F6621A2607EA63E6B2DC3e2464d1F);\r\n    address constant public exchange = address(0xba727c69636491ecdfE3E6F64cBE9428aD371e48);\r\n    address constant public registry = address(0x61166014E3f04E40C953fe4EAb9D9E40863C83AE);\r\n    \r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    \r\n    uint constant public fee = 50;\r\n    uint constant public max = 10000;\r\n    \r\n    address public governance;\r\n    address public controller;\r\n    \r\n    constructor(address _controller) public {\r\n        governance = msg.sender;\r\n        controller = _controller;\r\n    }\r\n    \r\n    function snx() public view returns (Synthetix) {\r\n        return Synthetix(SynthetixAddress(registry).getAddress(\"Synthetix\"));\r\n    }\r\n    function fees() public view returns (SynthetixFees) {\r\n        return SynthetixFees(SynthetixAddress(registry).getAddress(\"FeePool\"));\r\n    }\r\n    \r\n    function maxIssuableSynths() public view returns (uint) {\r\n        return snx().maxIssuableSynths(address(this));\r\n    }\r\n    \r\n    function deposit() public {\r\n        // Mint sUSD\r\n        uint _issuable = maxIssuableSynths();\r\n        if (_issuable > 0) {\r\n            snx().issueMaxSynths();\r\n        }\r\n        \r\n        // Mint sCRV\r\n        uint _susd = IERC20(susd).balanceOf(address(this));\r\n        if (_susd > 0) {\r\n            IERC20(susd).safeApprove(curve, 0);\r\n            IERC20(susd).safeApprove(curve, _susd);\r\n            ICurveFi(curve).add_liquidity([0,0,0,_susd],0);\r\n        }\r\n        \r\n        // Stake sCRV\r\n        uint _scrv = IERC20(scrv).balanceOf(address(this));\r\n        if (_scrv > 0) {\r\n            IERC20(scrv).safeApprove(rewards, 0);\r\n            IERC20(scrv).safeApprove(rewards, _scrv);\r\n            Rewards(rewards).stake(_scrv);\r\n        }\r\n    }\r\n    \r\n    function harvestAndCompound() public {\r\n        harvest();\r\n        deposit();\r\n    }\r\n    \r\n    function harvest() public {\r\n        uint _before = balanceOfWant();\r\n        burnSynthsToTarget();\r\n        claimRewards();\r\n        // Claim SNX rewards from Rewards pool\r\n        claimFees();\r\n        // Claim escrow (if available ~ 12 months)\r\n        vest();\r\n        uint _after = balanceOfWant();\r\n        uint _fee = (_after.sub(_before)).mul(fee).div(max);\r\n        //IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\r\n    }\r\n    \r\n    function debt() public view returns (uint) {\r\n        snx().debtBalanceOf(address(this), \"sUSD\");\r\n    }\r\n    \r\n    function burnSynthsToTarget() public {\r\n        uint _issuable = maxIssuableSynths();\r\n        uint _debt = debt();\r\n        // check to avoid the sub revert in burnSynthsToTarget() use deposit instead to increase\r\n        if (_debt > _issuable) {\r\n            uint _susd = _debt.sub(_issuable);\r\n            uint _ratio = balanceOfRewards().mul(_susd).div(_debt);\r\n            withdrawSUSD(_ratio);\r\n            snx().burnSynthsToTarget();\r\n        }\r\n    }\r\n    \r\n    function claimRewards() public {\r\n        Rewards(rewards).getReward();\r\n    }\r\n    \r\n    function vest() public {\r\n        SynthetixEscrow(escrow).vest();\r\n    }\r\n    \r\n    function isFeesClaimable() public view returns (bool) {\r\n        return fees().isFeesClaimable(address(this));\r\n    }\r\n    \r\n    function claimFees() public {\r\n        // Claim weekly fees (if available)\r\n        if (isFeesClaimable()) {\r\n            (uint availableFees, uint availableRewards) = fees().feesAvailable(address(this));\r\n            if (availableFees > 0 || availableRewards > 0) {\r\n                fees().claimFees();   \r\n            }\r\n        }\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = snx().transferableSynthetix(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n        \r\n        //address _vault = Controller(controller).vaults(address(want));\r\n        //require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        //uint _fee = _amount.mul(fee).div(max);\r\n        //IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\r\n        //IERC20(want).safeTransfer(controller, _amount.sub(_fee));\r\n        IERC20(want).safeTransfer(controller, _amount);\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n        balance = snx().transferableSynthetix(address(this));\r\n        \r\n        //address _vault = Controller(controller).vaults(address(want));\r\n        //require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(controller, balance);\r\n    }\r\n    \r\n    function withdrawSUSD(uint _amount) internal returns (uint) {\r\n        uint _before = IERC20(susd).balanceOf(address(this));\r\n        \r\n        IERC20(scrv).safeApprove(curve, 0);\r\n        IERC20(scrv).safeApprove(curve, _amount);\r\n        ICurveFi(curve).remove_liquidity(_amount, [uint256(0),0,0,0]);\r\n        \r\n        uint256 _dai = IERC20(dai).balanceOf(address(this));\r\n        uint256 _usdc = IERC20(usdc).balanceOf(address(this));\r\n        uint256 _usdt = IERC20(usdt).balanceOf(address(this));\r\n        \r\n        if (_dai > 0) {\r\n            IERC20(dai).safeApprove(curve, 0);\r\n            IERC20(dai).safeApprove(curve, _dai);\r\n            ICurveFi(curve).exchange(0, 3, _dai, 0);\r\n        }\r\n        if (_usdc > 0) {\r\n            IERC20(usdc).safeApprove(curve, 0);\r\n            IERC20(usdc).safeApprove(curve, _usdc);\r\n            ICurveFi(curve).exchange(1, 3, _usdc, 0);\r\n        }\r\n        if (_usdt > 0) {\r\n            IERC20(usdt).safeApprove(curve, 0);\r\n            IERC20(usdt).safeApprove(curve, _usdt);\r\n            ICurveFi(curve).exchange(2, 3, _usdt, 0);\r\n        }\r\n        \r\n        uint _after = IERC20(susd).balanceOf(address(this));\r\n        return _after.sub(_before);\r\n    }\r\n    \r\n    function _withdrawAll() internal {\r\n        Rewards(rewards).exit();\r\n        withdrawSUSD(IERC20(scrv).balanceOf(address(this)));\r\n        uint _debt = snx().debtBalanceOf(address(this), \"sUSD\");\r\n        if (IERC20(susd).balanceOf(address(this))<_debt) {\r\n            _debt = IERC20(susd).balanceOf(address(this));\r\n        }\r\n        if (_debt > 0) {\r\n            snx().burnSynths(_debt);\r\n        }\r\n    }\r\n    \r\n    function _withdrawSome(uint _amount) internal returns (uint) {\r\n        uint _ratio = balanceOfRewards().mul(_amount).div(balanceOfLocked());\r\n        uint _withdrew = withdrawSUSD(_ratio);\r\n        uint _before = snx().transferableSynthetix(address(this));\r\n        snx().burnSynths(_withdrew);\r\n        uint _after = snx().transferableSynthetix(address(this));\r\n        uint _diff = _after.sub(_before);\r\n        if (_diff < _amount) {\r\n            _amount = _diff;\r\n        }\r\n        return _amount;\r\n    }\r\n    \r\n    function balanceOfLocked() public view returns (uint) {\r\n        return balanceOfWant().sub(snx().transferableSynthetix(address(this)));\r\n    }\r\n    \r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfRewards() public view returns (uint) {\r\n        return Rewards(rewards).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant();\r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnSynthsToTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"contract SynthetixFees\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvestAndCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFeesClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIssuableSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snx\",\"outputs\":[{\"internalType\":\"contract Synthetix\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategySNXSUSD","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d407ddb06311396fe14d4b49da5f0471447d45c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b50ab418f29a36a2f5d9c4adfe4b850f877fb5b292615a7f8b1c33e20a4be250"}]}