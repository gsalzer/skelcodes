{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n╔═══╗╔═╗╔═╗╔═══╗╔═══╗╔════╗╔══╗─╔══╗╔════╗╔═══╗╔═══╗╔══╗╔═╗─╔╗╔════╗\r\n║╔═╗║║║╚╝║║║╔═╗║║╔═╗║║╔╗╔╗║║╔╗║─╚╣─╝║╔╗╔╗║║╔═╗║║╔═╗║╚╣─╝║║╚╗║║║╔╗╔╗║\r\n║╚══╗║╔╗╔╗║║║─║║║╚═╝║╚╝║║╚╝║╚╝╚╗─║║─╚╝║║╚╝║╚═╝║║║─║║─║║─║╔╗╚╝║╚╝║║╚╝\r\n╚══╗║║║║║║║║╚═╝║║╔╗╔╝──║║──║╔═╗║─║║───║║──║╔══╝║║─║║─║║─║║╚╗║║──║║──\r\n║╚═╝║║║║║║║║╔═╗║║║║╚╗──║║──║╚═╝║╔╣─╗──║║──║║───║╚═╝║╔╣─╗║║─║║║──║║──\r\n╚═══╝╚╝╚╝╚╝╚╝─╚╝╚╝╚═╝──╚╝──╚═══╝╚══╝──╚╝──╚╝───╚═══╝╚══╝╚╝─╚═╝──╚╝──\r\ninternational telegram channel: @smartbitpoint\r\ninternational telegram group: @smartbitpoint_com\r\ninternational telegram bot: @smartbitpoint_bot\r\nhashtag: #smartbitpoint\r\n*/\r\npragma solidity >=0.5.17 <0.7.0;\r\n\r\ncontract SmartBitPoint {\r\n    uint public currUserID;\r\n    address private lastUser;\r\n    address private owner; address private manager;\r\n    uint START_PRICE;\r\n    mapping (uint => uint) public StatsLevel;\r\n    struct User {\r\n        uint id;\r\n        uint currentLevel;\r\n        bool unlimited;\r\n        uint referrerB; uint referrerT; uint referrerL;\r\n        address[] referralsB; address[] referralsT; address[] referralsL;\r\n        mapping (uint => uint) countGetMoney; mapping (uint => uint) countLostMoney;\r\n    }\r\n    mapping (address => User) public mapusers;\r\n    mapping (uint => address) public usersAddress;\r\n    bool private ContractInit;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint indexed _type, uint _id, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint indexed _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint indexed _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint indexed _level, uint _time);\r\n\r\n    modifier onlyOwner { require(msg.sender == owner, \"Only owner can call this function.\"); _; }\r\n    modifier onlyOwnerOrManager { require(msg.sender == owner || msg.sender == manager, \"Only owner or manager can call this function.\"); _; }\r\n    modifier userRegistered(address _user) { require(mapusers[_user].id != 0, 'User does not exist'); _; }\r\n    modifier validPrice(uint _price) { require(_price > 0 && _price % 3 == 0, 'Invalid price'); _; }\r\n    modifier validAddress(address _user) { require(_user != address(0), \"Zero address\"); _; }\r\n\r\n    constructor() public {\r\n        require(!ContractInit,\"This contract inited\"); owner = msg.sender; manager = msg.sender;\r\n        address u1 = 0x9FE5F739D3df1BEf612bbB8a06952D233C5474E3; address u2 = 0x93fD13DD91236269cBDce8859521A0121E4A437E;\r\n        address u3 = 0x4a664BBBFE84ddbC3186e9f164E7186D00a10648; address u4 = 0xeba8BD49249De044810701e10e8481DDEd858882;\r\n        address u5 = 0x83cb295315f20453CAd48549ec5248bB7FB4633E; address u6 = 0xAB3870229CBCBe5C4BE1547B66181dFF58F4C5bc;\r\n        address u7 = 0xaC77396F01Dd706108930CA1E375f4F400d39121; address u8 = 0xcF8AFeEdF9446ec79C3A3433F102E56A51fF90c0;\r\n        lastUser = u8;\r\n        START_PRICE = 0.03 ether;\r\n        currUserID = 8;\r\n\r\n        mapusers[u1] = User({ id: 1, currentLevel: 0, unlimited: true, referrerB: 0, referrerT: 0, referrerL: 0, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[1] = u1;\r\n        mapusers[u2] = User({ id: 2, currentLevel: 0, unlimited: true, referrerB: 1, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[2] = u2;\r\n        mapusers[u3] = User({ id: 3, currentLevel: 0, unlimited: true, referrerB: 2, referrerT: 2, referrerL: 2, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[3] = u3;\r\n        mapusers[u4] = User({ id: 4, currentLevel: 5, unlimited: false, referrerB: 3, referrerT: 3, referrerL: 3, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[4] = u4;\r\n        mapusers[u5] = User({ id: 5, currentLevel: 0, unlimited: true, referrerB: 2, referrerT: 2, referrerL: 2, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[5] = u5;\r\n        mapusers[u6] = User({ id: 6, currentLevel: 0, unlimited: true, referrerB: 5, referrerT: 2, referrerL: 2, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[6] = u6;\r\n        mapusers[u7] = User({ id: 7, currentLevel: 0, unlimited: true, referrerB: 1, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[7] = u7;\r\n        mapusers[u8] = User({ id: 8, currentLevel: 0, unlimited: true, referrerB: 7, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[8] = u8;\r\n\r\n        mapusers[u1].referralsB.push(u2);mapusers[u1].referralsB.push(u7);\r\n        mapusers[u1].referralsT.push(u2);mapusers[u1].referralsT.push(u7);mapusers[u1].referralsT.push(u8);\r\n        mapusers[u1].referralsL.push(u2);mapusers[u1].referralsL.push(u7);mapusers[u1].referralsL.push(u8);\r\n        mapusers[u2].referralsB.push(u3);mapusers[u2].referralsB.push(u5);\r\n        mapusers[u2].referralsT.push(u3);mapusers[u2].referralsT.push(u5);mapusers[u2].referralsT.push(u6);\r\n        mapusers[u2].referralsL.push(u3);mapusers[u2].referralsL.push(u5);mapusers[u2].referralsL.push(u6);\r\n        mapusers[u3].referralsB.push(u4);mapusers[u3].referralsT.push(u4);mapusers[u3].referralsL.push(u4);\r\n        mapusers[u5].referralsB.push(u6);mapusers[u7].referralsB.push(u8);\r\n        ContractInit = true;\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n        if(msg.value == START_PRICE){\r\n            level = 1;\r\n        } else if(msg.value % 3 == 0){\r\n            level = msg.value/START_PRICE;\r\n        }\r\n        require(level > 0, 'Invalid sum');\r\n\r\n        uint32 size = _sGetA(msg.sender);\r\n        require(size == 0, \"Cannot be a contract\");\r\n\r\n        if(mapusers[msg.sender].id != 0){\r\n\r\n            require(mapusers[msg.sender].unlimited == false, 'You have unlimited levels');\r\n            if(mapusers[msg.sender].currentLevel >= level) revert('Level is already activated');\r\n            if(mapusers[msg.sender].currentLevel+1 != level) revert('Buy previous level');\r\n            mapusers[msg.sender].currentLevel = level;\r\n            StatsLevel[level]++;\r\n            payForLevel(level, msg.sender);\r\n            emit buyLevelEvent(msg.sender, level, now);\r\n        } else if(level == 1){\r\n            address referrer = _bToA(msg.data);\r\n            require(mapusers[referrer].id != 0, 'Incorrect referrer');\r\n\r\n            uint bone = mapusers[referrer].id;\r\n            uint two = mapusers[referrer].id;\r\n            if(mapusers[referrer].referralsB.length >= 2)\r\n                bone = mapusers[findFreeReferrerB(referrer)].id;\r\n            if(mapusers[referrer].referralsT.length >= 3)\r\n                two = mapusers[findFreeReferrerT(referrer)].id;\r\n            currUserID++;\r\n            mapusers[msg.sender] = User({ id: currUserID, currentLevel: 1, unlimited: false, referrerB: bone, referrerT: two, referrerL: mapusers[referrer].id, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n            usersAddress[currUserID] = msg.sender;\r\n            mapusers[usersAddress[bone]].referralsB.push(msg.sender);\r\n            mapusers[usersAddress[two]].referralsT.push(msg.sender);\r\n            mapusers[referrer].referralsL.push(msg.sender);\r\n            StatsLevel[1]++;\r\n            payForLevel(1, msg.sender);\r\n            lastUser = msg.sender;\r\n            emit regLevelEvent(msg.sender, usersAddress[bone], 1, currUserID, now);\r\n            emit regLevelEvent(msg.sender, usersAddress[two], 2, currUserID, now);\r\n            emit regLevelEvent(msg.sender, referrer, 3, currUserID, now);\r\n        } else {\r\n            revert('Buy first level');\r\n        }\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        uint height;\r\n        address referrer;\r\n\r\n        height = _level;\r\n        referrer = _user;\r\n        while (true) {\r\n            referrer = usersAddress[mapusers[referrer].referrerB];\r\n            if(referrer == address(0)) { referrer = owner; break; }\r\n            height--;\r\n            if(height == 0){\r\n                if(mapusers[referrer].currentLevel >= _level || mapusers[referrer].unlimited) break;\r\n                emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n                mapusers[referrer].countLostMoney[_level]++;\r\n                height = _level;\r\n            }\r\n        }\r\n        if(_aToP(referrer).send(msg.value/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n\r\n        height = _level;\r\n        referrer = _user;\r\n        while (true) {\r\n            referrer = usersAddress[mapusers[referrer].referrerT];\r\n            if(referrer == address(0)) { referrer = owner; break; }\r\n            height--;\r\n            if(height == 0){\r\n                if(mapusers[referrer].currentLevel >= _level || mapusers[referrer].unlimited) break;\r\n                emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n                mapusers[referrer].countLostMoney[_level]++;\r\n                height = _level;\r\n            }\r\n        }\r\n        if(_aToP(referrer).send(msg.value/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n\r\n        referrer = _user;\r\n        while (true) {\r\n            referrer = usersAddress[mapusers[referrer].referrerL];\r\n            if(referrer == address(0)) { referrer = owner; break; }\r\n            if(mapusers[referrer].currentLevel >= _level || mapusers[referrer].unlimited) break;\r\n            emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countLostMoney[_level]++;\r\n        }\r\n        if(_aToP(referrer).send(msg.value/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n    }\r\n\r\n    function findFreeReferrerB(address _user) public view returns(address) {\r\n        if(mapusers[_user].referralsB.length < 2) return _user;\r\n        address[] memory referrals = new address[](1022);\r\n        referrals[0] = mapusers[_user].referralsB[0];\r\n        referrals[1] = mapusers[_user].referralsB[1];\r\n        for(uint i=0; i<1022;i++){\r\n            if(mapusers[referrals[i]].referralsB.length < 2) return referrals[i];\r\n            if(i > 509) continue;\r\n            referrals[(i + 1) * 2] = mapusers[referrals[i]].referralsB[0];\r\n            referrals[(i + 1) * 2 + 1] = mapusers[referrals[i]].referralsB[1];\r\n        }\r\n        return lastUser;\r\n    }\r\n    function findFreeReferrerT(address _user) public view returns(address) {\r\n        if(mapusers[_user].referralsT.length < 3) return _user;\r\n        address[] memory referrals = new address[](1092);\r\n        referrals[0] = mapusers[_user].referralsT[0];\r\n        referrals[1] = mapusers[_user].referralsT[1];\r\n        referrals[2] = mapusers[_user].referralsT[2];\r\n        for(uint i=0; i<1092;i++){\r\n            if(mapusers[referrals[i]].referralsT.length < 3) return referrals[i];\r\n            if(i > 362) continue;\r\n            referrals[(i + 1) * 3] = mapusers[referrals[i]].referralsT[0];\r\n            referrals[(i + 1) * 3 + 1] = mapusers[referrals[i]].referralsT[1];\r\n            referrals[(i + 1) * 3 + 2] = mapusers[referrals[i]].referralsT[2];\r\n        }\r\n        return lastUser;\r\n    }\r\n\r\n    function viewUserReferralsB(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsB;\r\n    }\r\n    function viewUserReferralsT(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsT;\r\n    }\r\n    function viewUserReferralsL(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsL;\r\n    }\r\n\r\n    function getCountGetMoney(address _user, uint _level) public view returns(uint) {\r\n        return mapusers[_user].countGetMoney[_level];\r\n    }\r\n    function getCountLostMoney(address _user, uint _level) public view returns(uint) {\r\n        return mapusers[_user].countLostMoney[_level];\r\n    }\r\n\r\n    function getUserInfo(address _user) public view returns(uint,uint,bool,uint[3] memory,address[3] memory){\r\n        return (mapusers[_user].id,mapusers[_user].currentLevel,mapusers[_user].unlimited,\r\n        [mapusers[_user].referrerB,mapusers[_user].referrerT,mapusers[_user].referrerL],\r\n        [usersAddress[mapusers[_user].referrerB], usersAddress[mapusers[_user].referrerT],usersAddress[mapusers[_user].referrerL]]);\r\n    }\r\n\r\n    function setStartPrice(uint _price) public onlyOwnerOrManager validPrice(_price) {\r\n        START_PRICE = _price * 0.01 ether;\r\n    }\r\n    function setUserUnlimited(address _user) public onlyOwnerOrManager userRegistered(_user) {\r\n        mapusers[_user].unlimited = true;\r\n    }\r\n    function delUserUnlimited(address _user) public onlyOwnerOrManager userRegistered(_user) {\r\n        mapusers[_user].unlimited = false;\r\n    }\r\n\r\n    function setOwner(address _user) public onlyOwner validAddress(_user) { owner = _user; }\r\n    function setManager(address _user) public onlyOwnerOrManager validAddress(_user) { manager = _user; }\r\n    function getOwner() external view returns (address) { return owner; }\r\n    function getManager() external view returns (address) { return manager; }\r\n    function _bToA(bytes memory _bys) internal pure returns(address addr) { assembly { addr := mload(add(_bys, 20)) } }\r\n    function _aToP(address _addr) internal pure returns(address payable) { return address(uint160(_addr)); }\r\n    function _sGetA(address _addr) internal view returns(uint32 size) { assembly { size := extcodesize(_addr) } }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StatsLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delUserUnlimited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrerB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrerT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getCountGetMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getCountLostMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlimited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"referrerB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerL\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStartPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setUserUnlimited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsB\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsL\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsT\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartBitPoint","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d3b09fb7d678c694e761895e602f2fcfb3dbd4293a6ab0542a0294ac186fc47d"}]}