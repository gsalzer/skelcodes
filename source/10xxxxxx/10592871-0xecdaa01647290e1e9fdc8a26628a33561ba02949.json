{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\nlibrary ExtendedMath {\r\n    /**\r\n     * @return The given number raised to the power of 2\r\n     */\r\n    function pow2(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * a;\r\n        require(c / a == a, \"ExtendedMath: squaring overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @return The square root of the given number\r\n     */\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Sacrifice {\r\n    constructor(address payable _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20Mintable {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function mint(address _to, uint256 _value) external returns (bool);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Sigmoid {\r\n    using SafeMath for uint256;\r\n    using ExtendedMath for uint256;\r\n\r\n    // The period after which the new value of the parameter is set\r\n    uint256 public constant PARAM_UPDATE_DELAY = 7 days;\r\n\r\n    struct Params {\r\n        uint256 a;\r\n        int256 b;\r\n        uint256 c;\r\n    }\r\n\r\n    struct State {\r\n        Params oldParams;\r\n        Params newParams;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets sigmoid parameters\r\n     * @param _a Sigmoid parameter A.\r\n     * @param _b Sigmoid parameter B.\r\n     * @param _c Sigmoid parameter C.\r\n     */\r\n    function setParameters(State storage self, uint256 _a, int256 _b, uint256 _c) internal {\r\n        require(_c != 0, \"should be greater than 0\"); // prevent division by zero\r\n        uint256 currentTimestamp = _now();\r\n        if (self.timestamp == 0) {\r\n            self.oldParams = Params(_a, _b, _c);\r\n        } else if (currentTimestamp > self.timestamp.add(PARAM_UPDATE_DELAY)) {\r\n            self.oldParams = self.newParams;\r\n        }\r\n        self.newParams = Params(_a, _b, _c);\r\n        self.timestamp = currentTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @return Sigmoid parameters\r\n     */\r\n    function getParameters(State storage self) internal view returns (uint256, int256, uint256) {\r\n        bool isUpdated = _now() > self.timestamp.add(PARAM_UPDATE_DELAY);\r\n        return isUpdated ?\r\n            (self.newParams.a, self.newParams.b, self.newParams.c) :\r\n            (self.oldParams.a, self.oldParams.b, self.oldParams.c);\r\n    }\r\n\r\n    /**\r\n     * @return The corresponding Y value for a given X value\r\n     */\r\n    function calculate(State storage self, int256 _x) internal view returns (uint256) {\r\n        (uint256 a, int256 b, uint256 c) = getParameters(self);\r\n        int256 k = _x - b;\r\n        if (k < 0) return 0;\r\n        uint256 uk = uint256(k);\r\n        return a.mul(uk).div(uk.pow2().add(c).sqrt());\r\n    }\r\n\r\n    /**\r\n     * @return Returns current timestamp.\r\n     */\r\n    function _now() internal view returns (uint256) {\r\n        // Note that the timestamp can have a 900-second error:\r\n        // https://github.com/ethereum/wiki/blob/c02254611f218f43cbb07517ca8e5d00fd6d6d75/Block-Protocol-2.0.md\r\n        return now; // solium-disable-line security/no-block-members\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title EasyStaking\r\n *\r\n * Note: all percentage values are between 0 (0%) and 1 (100%)\r\n * and represented as fixed point numbers containing 18 decimals like with Ether\r\n * 100% == 1 ether\r\n */\r\ncontract EasyStaking is Ownable, ReentrancyGuard {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Sigmoid for Sigmoid.State;\r\n\r\n    /**\r\n     * @dev Emitted when a user deposits tokens.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     * @param amount The amount of deposited tokens.\r\n     * @param balance Current user balance.\r\n     * @param accruedEmission User's accrued emission.\r\n     * @param prevDepositDuration Duration of the previous deposit in seconds.\r\n     */\r\n    event Deposited(\r\n        address indexed sender,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 balance,\r\n        uint256 accruedEmission,\r\n        uint256 prevDepositDuration\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a user requests withdrawal.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     */\r\n    event WithdrawalRequested(address indexed sender, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Emitted when a user withdraws tokens.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     * @param amount The amount of withdrawn tokens.\r\n     * @param fee The withdrawal fee.\r\n     * @param balance Current user balance.\r\n     * @param accruedEmission User's accrued emission.\r\n     * @param lastDepositDuration Duration of the last deposit in seconds.\r\n     */\r\n    event Withdrawn(\r\n        address indexed sender,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 balance,\r\n        uint256 accruedEmission,\r\n        uint256 lastDepositDuration\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a new fee value is set.\r\n     * @param value A new fee value.\r\n     * @param sender The owner address at the moment of fee changing.\r\n     */\r\n    event FeeSet(uint256 value, address sender);\r\n\r\n    /**\r\n     * @dev Emitted when a new withdrawal lock duration value is set.\r\n     * @param value A new withdrawal lock duration value.\r\n     * @param sender The owner address at the moment of value changing.\r\n     */\r\n    event WithdrawalLockDurationSet(uint256 value, address sender);\r\n\r\n    /**\r\n     * @dev Emitted when a new withdrawal unlock duration value is set.\r\n     * @param value A new withdrawal unlock duration value.\r\n     * @param sender The owner address at the moment of value changing.\r\n     */\r\n    event WithdrawalUnlockDurationSet(uint256 value, address sender);\r\n\r\n    /**\r\n     * @dev Emitted when a new total supply factor value is set.\r\n     * @param value A new total supply factor value.\r\n     * @param sender The owner address at the moment of value changing.\r\n     */\r\n    event TotalSupplyFactorSet(uint256 value, address sender);\r\n\r\n    /**\r\n     * @dev Emitted when new sigmoid parameters values are set.\r\n     * @param a A new parameter A value.\r\n     * @param b A new parameter B value.\r\n     * @param c A new parameter C value.\r\n     * @param sender The owner address at the moment of value changing.\r\n     */\r\n    event SigmoidParametersSet(uint256 a, int256 b, uint256 c, address sender);\r\n\r\n    /**\r\n     * @dev Emitted when a new Liquidity Providers Reward address value is set.\r\n     * @param value A new address value.\r\n     * @param sender The owner address at the moment of address changing.\r\n     */\r\n    event LiquidityProvidersRewardAddressSet(address value, address sender);\r\n\r\n    uint256 private constant YEAR = 365 days;\r\n    // The maximum emission rate (in percentage)\r\n    uint256 public constant MAX_EMISSION_RATE = 150 finney; // 15%, 0.15 ether\r\n    // The period after which the new value of the parameter is set\r\n    uint256 public constant PARAM_UPDATE_DELAY = 7 days;\r\n\r\n    // STAKE token\r\n    IERC20Mintable public token;\r\n\r\n    struct UintParam {\r\n        uint256 oldValue;\r\n        uint256 newValue;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct AddressParam {\r\n        address oldValue;\r\n        address newValue;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // The address for the Liquidity Providers reward\r\n    AddressParam public liquidityProvidersRewardAddressParam;\r\n    // The fee of the forced withdrawal (in percentage)\r\n    UintParam public feeParam;\r\n    // The time from the request after which the withdrawal will be available (in seconds)\r\n    UintParam public withdrawalLockDurationParam;\r\n    // The time during which the withdrawal will be available from the moment of unlocking (in seconds)\r\n    UintParam public withdrawalUnlockDurationParam;\r\n    // Total supply factor for calculating emission rate (in percentage)\r\n    UintParam public totalSupplyFactorParam;\r\n\r\n    // The deposit balances of users\r\n    mapping (address => mapping (uint256 => uint256)) public balances;\r\n    // The dates of users' deposits\r\n    mapping (address => mapping (uint256 => uint256)) public depositDates;\r\n    // The dates of users' withdrawal requests\r\n    mapping (address => mapping (uint256 => uint256)) public withdrawalRequestsDates;\r\n    // The last deposit id\r\n    mapping (address => uint256) public lastDepositIds;\r\n    // The total staked amount\r\n    uint256 public totalStaked;\r\n\r\n    // Variable that prevents _deposit method from being called 2 times\r\n    bool private locked;\r\n    // The library that is used to calculate user's current emission rate\r\n    Sigmoid.State private sigmoid;\r\n\r\n    /**\r\n     * @dev Initializes the contract.\r\n     * @param _owner The owner of the contract.\r\n     * @param _tokenAddress The address of the STAKE token contract.\r\n     * @param _liquidityProvidersRewardAddress The address for the Liquidity Providers reward.\r\n     * @param _fee The fee of the forced withdrawal (in percentage).\r\n     * @param _withdrawalLockDuration The time from the request after which the withdrawal will be available (in seconds).\r\n     * @param _withdrawalUnlockDuration The time during which the withdrawal will be available from the moment of unlocking (in seconds).\r\n     * @param _totalSupplyFactor Total supply factor for calculating emission rate (in percentage).\r\n     * @param _sigmoidParamA Sigmoid parameter A.\r\n     * @param _sigmoidParamB Sigmoid parameter B.\r\n     * @param _sigmoidParamC Sigmoid parameter C.\r\n     */\r\n    function initialize(\r\n        address _owner,\r\n        address _tokenAddress,\r\n        address _liquidityProvidersRewardAddress,\r\n        uint256 _fee,\r\n        uint256 _withdrawalLockDuration,\r\n        uint256 _withdrawalUnlockDuration,\r\n        uint256 _totalSupplyFactor,\r\n        uint256 _sigmoidParamA,\r\n        int256 _sigmoidParamB,\r\n        uint256 _sigmoidParamC\r\n    ) external initializer {\r\n        require(_owner != address(0), \"zero address\");\r\n        require(_tokenAddress.isContract(), \"not a contract address\");\r\n        Ownable.initialize(msg.sender);\r\n        ReentrancyGuard.initialize();\r\n        token = IERC20Mintable(_tokenAddress);\r\n        setFee(_fee);\r\n        setWithdrawalLockDuration(_withdrawalLockDuration);\r\n        setWithdrawalUnlockDuration(_withdrawalUnlockDuration);\r\n        setTotalSupplyFactor(_totalSupplyFactor);\r\n        setSigmoidParameters(_sigmoidParamA, _sigmoidParamB, _sigmoidParamC);\r\n        setLiquidityProvidersRewardAddress(_liquidityProvidersRewardAddress);\r\n        Ownable.transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to deposit tokens to a new deposit.\r\n     * It generates a new deposit ID and calls another public \"deposit\" method. See its description.\r\n     * @param _amount The amount to deposit.\r\n     */\r\n    function deposit(uint256 _amount) external {\r\n        deposit(++lastDepositIds[msg.sender], _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to deposit tokens to the deposit opened before.\r\n     * It calls the internal \"_deposit\" method and transfers tokens from sender to contract.\r\n     * Sender must approve tokens first.\r\n     *\r\n     * Instead this, user can use the simple \"transfer\" method of STAKE token contract to make a deposit.\r\n     * Sender's approval is not needed in this case.\r\n     *\r\n     * Note: each call updates the deposit date so be careful if you want to make a long staking.\r\n     *\r\n     * @param _depositId User's unique deposit ID.\r\n     * @param _amount The amount to deposit.\r\n     */\r\n    function deposit(uint256 _depositId, uint256 _amount) public {\r\n        require(_depositId > 0 && _depositId <= lastDepositIds[msg.sender], \"wrong deposit id\");\r\n        _deposit(msg.sender, _depositId, _amount);\r\n        _setLocked(true);\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"transfer failed\");\r\n        _setLocked(false);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is called when STAKE tokens are transferred to this contract.\r\n     * using \"transfer\", \"transferFrom\", or \"transferAndCall\" method of STAKE token contract.\r\n     * It generates a new deposit ID and calls the internal \"_deposit\" method.\r\n     * @param _sender The sender of tokens.\r\n     * @param _amount The transferred amount.\r\n     * @return true if successful\r\n     */\r\n    function onTokenTransfer(address _sender, uint256 _amount, bytes calldata) external returns (bool) {\r\n        require(msg.sender == address(token), \"only token contract is allowed\");\r\n        if (!locked) {\r\n            _deposit(_sender, ++lastDepositIds[_sender], _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to make a forced withdrawal with a fee.\r\n     * It calls the internal \"_withdraw\" method.\r\n     * @param _depositId User's unique deposit ID.\r\n     * @param _amount The amount to withdraw (0 - to withdraw all).\r\n     */\r\n    function makeForcedWithdrawal(uint256 _depositId, uint256 _amount) external {\r\n        _withdraw(msg.sender, _depositId, _amount, true);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to request a withdrawal without a fee.\r\n     * It sets the date of the request.\r\n     *\r\n     * Note: each call updates the date of the request so don't call this method twice during the lock.\r\n     *\r\n     * @param _depositId User's unique deposit ID.\r\n     */\r\n    function requestWithdrawal(uint256 _depositId) external {\r\n        require(_depositId > 0 && _depositId <= lastDepositIds[msg.sender], \"wrong deposit id\");\r\n        withdrawalRequestsDates[msg.sender][_depositId] = _now();\r\n        emit WithdrawalRequested(msg.sender, _depositId);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to make a requested withdrawal.\r\n     * It calls the internal \"_withdraw\" method and resets the date of the request.\r\n     *\r\n     * If sender didn't call this method during the unlock period (if timestamp >= lockEnd + withdrawalUnlockDuration)\r\n     * they have to call \"requestWithdrawal\" one more time.\r\n     *\r\n     * @param _depositId User's unique deposit ID.\r\n     * @param _amount The amount to withdraw (0 - to withdraw all).\r\n     */\r\n    function makeRequestedWithdrawal(uint256 _depositId, uint256 _amount) external {\r\n        uint256 requestDate = withdrawalRequestsDates[msg.sender][_depositId];\r\n        require(requestDate > 0, \"withdrawal wasn't requested\");\r\n        uint256 timestamp = _now();\r\n        uint256 lockEnd = requestDate.add(withdrawalLockDuration());\r\n        require(timestamp >= lockEnd, \"too early\");\r\n        require(timestamp < lockEnd.add(withdrawalUnlockDuration()), \"too late\");\r\n        withdrawalRequestsDates[msg.sender][_depositId] = 0;\r\n        _withdraw(msg.sender, _depositId, _amount, false);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to claim unsupported tokens accidentally sent to the contract.\r\n     * It can only be called by the owner.\r\n     * @param _token The address of the token contract (zero address for claiming native coins).\r\n     * @param _to The address of the tokens/coins receiver.\r\n     * @param _amount Amount to claim.\r\n     */\r\n    function claimTokens(address _token, address payable _to, uint256 _amount) external onlyOwner {\r\n        require(_to != address(0) && _to != address(this), \"not a valid recipient\");\r\n        require(_amount > 0, \"amount should be greater than 0\");\r\n        if (_token == address(0)) {\r\n            if (!_to.send(_amount)) { // solium-disable-line security/no-send\r\n                (new Sacrifice).value(_amount)(_to);\r\n            }\r\n        } else if (_token == address(token)) {\r\n            uint256 availableAmount = token.balanceOf(address(this)).sub(totalStaked);\r\n            require(availableAmount >= _amount, \"insufficient funds\");\r\n            require(token.transfer(_to, _amount), \"transfer failed\");\r\n        } else {\r\n            IERC20 customToken = IERC20(_token);\r\n            customToken.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the fee for forced withdrawals. Can only be called by owner.\r\n     * @param _value The new fee value (in percentage).\r\n     */\r\n    function setFee(uint256 _value) public onlyOwner {\r\n        require(_value <= 1 ether, \"should be less than or equal to 1 ether\");\r\n        _updateUintParam(feeParam, _value);\r\n        emit FeeSet(_value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the time from the request after which the withdrawal will be available.\r\n     * Can only be called by owner.\r\n     * @param _value The new duration value (in seconds).\r\n     */\r\n    function setWithdrawalLockDuration(uint256 _value) public onlyOwner {\r\n        require(_value <= 30 days, \"shouldn't be greater than 30 days\");\r\n        _updateUintParam(withdrawalLockDurationParam, _value);\r\n        emit WithdrawalLockDurationSet(_value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the time during which the withdrawal will be available from the moment of unlocking.\r\n     * Can only be called by owner.\r\n     * @param _value The new duration value (in seconds).\r\n     */\r\n    function setWithdrawalUnlockDuration(uint256 _value) public onlyOwner {\r\n        require(_value >= 1 hours, \"shouldn't be less than 1 hour\");\r\n        _updateUintParam(withdrawalUnlockDurationParam, _value);\r\n        emit WithdrawalUnlockDurationSet(_value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets total supply factor for calculating emission rate.\r\n     * Can only be called by owner.\r\n     * @param _value The new factor value (in percentage).\r\n     */\r\n    function setTotalSupplyFactor(uint256 _value) public onlyOwner {\r\n        require(_value <= 1 ether, \"should be less than or equal to 1 ether\");\r\n        _updateUintParam(totalSupplyFactorParam, _value);\r\n        emit TotalSupplyFactorSet(_value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets parameters of the sigmoid that is used to calculate the user's current emission rate.\r\n     * Can only be called by owner.\r\n     * @param _a Sigmoid parameter A. Unsigned integer.\r\n     * @param _b Sigmoid parameter B. Signed integer.\r\n     * @param _c Sigmoid parameter C. Unsigned integer. Cannot be zero.\r\n     */\r\n    function setSigmoidParameters(uint256 _a, int256 _b, uint256 _c) public onlyOwner {\r\n        require(_a <= MAX_EMISSION_RATE.div(2), \"should be less than or equal to a half of the maximum emission rate\");\r\n        sigmoid.setParameters(_a, _b, _c);\r\n        emit SigmoidParametersSet(_a, _b, _c, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address for the Liquidity Providers reward.\r\n     * Can only be called by owner.\r\n     * @param _address The new address.\r\n     */\r\n    function setLiquidityProvidersRewardAddress(address _address) public onlyOwner {\r\n        require(_address != address(0), \"zero address\");\r\n        require(_address != address(this), \"wrong address\");\r\n        AddressParam memory param = liquidityProvidersRewardAddressParam;\r\n        if (param.timestamp == 0) {\r\n            param.oldValue = _address;\r\n        } else if (_paramUpdateDelayElapsed(param.timestamp)) {\r\n            param.oldValue = param.newValue;\r\n        }\r\n        param.newValue = _address;\r\n        param.timestamp = _now();\r\n        liquidityProvidersRewardAddressParam = param;\r\n        emit LiquidityProvidersRewardAddressSet(_address, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return Returns current fee.\r\n     */\r\n    function fee() public view returns (uint256) {\r\n        return _getUintParamValue(feeParam);\r\n    }\r\n\r\n    /**\r\n     * @return Returns current withdrawal lock duration.\r\n     */\r\n    function withdrawalLockDuration() public view returns (uint256) {\r\n        return _getUintParamValue(withdrawalLockDurationParam);\r\n    }\r\n\r\n    /**\r\n     * @return Returns current withdrawal unlock duration.\r\n     */\r\n    function withdrawalUnlockDuration() public view returns (uint256) {\r\n        return _getUintParamValue(withdrawalUnlockDurationParam);\r\n    }\r\n\r\n    /**\r\n     * @return Returns current total supply factor.\r\n     */\r\n    function totalSupplyFactor() public view returns (uint256) {\r\n        return _getUintParamValue(totalSupplyFactorParam);\r\n    }\r\n\r\n    /**\r\n     * @return Returns current liquidity providers reward address.\r\n     */\r\n    function liquidityProvidersRewardAddress() public view returns (address) {\r\n        AddressParam memory param = liquidityProvidersRewardAddressParam;\r\n        return _paramUpdateDelayElapsed(param.timestamp) ? param.newValue : param.oldValue;\r\n    }\r\n\r\n    /**\r\n     * @return Emission rate based on the ratio of total staked to total supply.\r\n     */\r\n    function getSupplyBasedEmissionRate() public view returns (uint256) {\r\n        uint256 totalSupply = token.totalSupply();\r\n        uint256 factor = totalSupplyFactor();\r\n        if (factor == 0) return 0;\r\n        uint256 target = totalSupply.mul(factor).div(1 ether);\r\n        uint256 maxSupplyBasedEmissionRate = MAX_EMISSION_RATE.div(2); // 7.5%\r\n        if (totalStaked >= target) {\r\n            return maxSupplyBasedEmissionRate;\r\n        }\r\n        return maxSupplyBasedEmissionRate.mul(totalStaked).div(target);\r\n    }\r\n\r\n    /**\r\n     * @param _depositDate Deposit date.\r\n     * @param _amount Amount based on which emission is calculated and accrued.\r\n     * @return Total accrued emission (for the user and Liquidity Providers), user share, and seconds passed since the previous deposit started.\r\n     */\r\n    function getAccruedEmission(\r\n        uint256 _depositDate,\r\n        uint256 _amount\r\n    ) public view returns (uint256 total, uint256 userShare, uint256 timePassed) {\r\n        if (_amount == 0 || _depositDate == 0) return (0, 0, 0);\r\n        timePassed = _now().sub(_depositDate);\r\n        if (timePassed == 0) return (0, 0, 0);\r\n        uint256 userEmissionRate = sigmoid.calculate(int256(timePassed));\r\n        userEmissionRate = userEmissionRate.add(getSupplyBasedEmissionRate());\r\n        if (userEmissionRate == 0) return (0, 0, timePassed);\r\n        assert(userEmissionRate <= MAX_EMISSION_RATE);\r\n        total = _amount.mul(MAX_EMISSION_RATE).mul(timePassed).div(YEAR * 1 ether);\r\n        userShare = _amount.mul(userEmissionRate).mul(timePassed).div(YEAR * 1 ether);\r\n    }\r\n\r\n    /**\r\n     * @return Sigmoid parameters.\r\n     */\r\n    function getSigmoidParameters() public view returns (uint256 a, int256 b, uint256 c) {\r\n        return sigmoid.getParameters();\r\n    }\r\n\r\n    /**\r\n     * @dev Calls internal \"_mint\" method, increases the user balance, and updates the deposit date.\r\n     * @param _sender The address of the sender.\r\n     * @param _id User's unique deposit ID.\r\n     * @param _amount The amount to deposit.\r\n     */\r\n    function _deposit(address _sender, uint256 _id, uint256 _amount) internal nonReentrant {\r\n        require(_amount > 0, \"deposit amount should be more than 0\");\r\n        (uint256 sigmoidParamA,,) = getSigmoidParameters();\r\n        if (sigmoidParamA == 0 && totalSupplyFactor() == 0) revert(\"emission stopped\");\r\n        (uint256 userShare, uint256 timePassed) = _mint(_sender, _id, 0);\r\n        uint256 newBalance = balances[_sender][_id].add(_amount);\r\n        balances[_sender][_id] = newBalance;\r\n        totalStaked = totalStaked.add(_amount);\r\n        depositDates[_sender][_id] = _now();\r\n        emit Deposited(_sender, _id, _amount, newBalance, userShare, timePassed);\r\n    }\r\n\r\n    /**\r\n     * @dev Calls internal \"_mint\" method and then transfers tokens to the sender.\r\n     * @param _sender The address of the sender.\r\n     * @param _id User's unique deposit ID.\r\n     * @param _amount The amount to withdraw (0 - to withdraw all).\r\n     * @param _forced Defines whether to apply fee (true), or not (false).\r\n     */\r\n    function _withdraw(address _sender, uint256 _id, uint256 _amount, bool _forced) internal nonReentrant {\r\n        require(_id > 0 && _id <= lastDepositIds[_sender], \"wrong deposit id\");\r\n        require(balances[_sender][_id] > 0 && balances[_sender][_id] >= _amount, \"insufficient funds\");\r\n        (uint256 accruedEmission, uint256 timePassed) = _mint(_sender, _id, _amount);\r\n        uint256 amount = _amount == 0 ? balances[_sender][_id] : _amount.add(accruedEmission);\r\n        balances[_sender][_id] = balances[_sender][_id].sub(amount);\r\n        totalStaked = totalStaked.sub(amount);\r\n        if (balances[_sender][_id] == 0) {\r\n            depositDates[_sender][_id] = 0;\r\n        }\r\n        uint256 feeValue = 0;\r\n        if (_forced) {\r\n            feeValue = amount.mul(fee()).div(1 ether);\r\n            amount = amount.sub(feeValue);\r\n            require(token.transfer(liquidityProvidersRewardAddress(), feeValue), \"transfer failed\");\r\n        }\r\n        require(token.transfer(_sender, amount), \"transfer failed\");\r\n        emit Withdrawn(_sender, _id, amount, feeValue, balances[_sender][_id], accruedEmission, timePassed);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints MAX_EMISSION_RATE per annum and distributes the emission between the user and Liquidity Providers in proportion.\r\n     * @param _user User's address.\r\n     * @param _id User's unique deposit ID.\r\n     * @param _amount Amount based on which emission is calculated and accrued. When 0, current deposit balance is used.\r\n     */\r\n    function _mint(address _user, uint256 _id, uint256 _amount) internal returns (uint256, uint256) {\r\n        uint256 currentBalance = balances[_user][_id];\r\n        uint256 amount = _amount == 0 ? currentBalance : _amount;\r\n        (uint256 total, uint256 userShare, uint256 timePassed) = getAccruedEmission(depositDates[_user][_id], amount);\r\n        if (total > 0) {\r\n            require(token.mint(address(this), total), \"minting failed\");\r\n            balances[_user][_id] = currentBalance.add(userShare);\r\n            totalStaked = totalStaked.add(userShare);\r\n            require(token.transfer(liquidityProvidersRewardAddress(), total.sub(userShare)), \"transfer failed\");\r\n        }\r\n        return (userShare, timePassed);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the next value of the parameter and the timestamp of this setting.\r\n     */\r\n    function _updateUintParam(UintParam storage _param, uint256 _newValue) internal {\r\n        if (_param.timestamp == 0) {\r\n            _param.oldValue = _newValue;\r\n        } else if (_paramUpdateDelayElapsed(_param.timestamp)) {\r\n            _param.oldValue = _param.newValue;\r\n        }\r\n        _param.newValue = _newValue;\r\n        _param.timestamp = _now();\r\n    }\r\n\r\n    /**\r\n     * @return Returns the current value of the parameter.\r\n     */\r\n    function _getUintParamValue(UintParam memory _param) internal view returns (uint256) {\r\n        return _paramUpdateDelayElapsed(_param.timestamp) ? _param.newValue : _param.oldValue;\r\n    }\r\n\r\n    /**\r\n     * @return Returns true if param update delay elapsed.\r\n     */\r\n    function _paramUpdateDelayElapsed(uint256 _paramTimestamp) internal view returns (bool) {\r\n        return _now() > _paramTimestamp.add(PARAM_UPDATE_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets lock to prevent reentrance.\r\n     */\r\n    function _setLocked(bool _locked) internal {\r\n        locked = _locked;\r\n    }\r\n\r\n    /**\r\n     * @return Returns current timestamp.\r\n     */\r\n    function _now() internal view returns (uint256) {\r\n        // Note that the timestamp can have a 900-second error:\r\n        // https://github.com/ethereum/wiki/blob/c02254611f218f43cbb07517ca8e5d00fd6d6d75/Block-Protocol-2.0.md\r\n        return now; // solium-disable-line security/no-block-members\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevDepositDuration\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityProvidersRewardAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SigmoidParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TotalSupplyFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawalLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawalUnlockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositDuration\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARAM_UPDATE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAccruedEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePassed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSigmoidParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupplyBasedEmissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvidersRewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalUnlockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sigmoidParamA\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_sigmoidParamB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_sigmoidParamC\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityProvidersRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityProvidersRewardAddressParam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeForcedWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeRequestedWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityProvidersRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_b\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"setSigmoidParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalUnlockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyFactorParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalLockDurationParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequestsDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalUnlockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalUnlockDurationParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EasyStaking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a804559cde042b4f71d8d54f5b8311d3a5d7e4c6e39b57e7756638151e90c160"}]}