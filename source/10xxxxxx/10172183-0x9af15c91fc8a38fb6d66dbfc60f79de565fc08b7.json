{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c)\r\n    {\r\n        if (a == 0) { return 0; }\r\n        c = a * b;\r\n        require(c / a == b);\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\ncontract owned\r\n{\r\n    address payable internal owner;\r\n    address payable internal newOwner;\r\n    address payable public signer;\r\n\r\n    event OwnershipTransferred(address payable _from, address payable _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        signer = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(msg.sender == signer, 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address payable _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n interface paxInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n }\r\n\r\n\r\ncontract divDistribution is owned\r\n{\r\n    using SafeMath for uint256;\r\n    address paxContractAddress;\r\n    uint256[] public distributionAmount;\r\n\r\n    mapping(address => bool) public eligibleUser;\r\n    mapping(address => uint) public eligibleFrom;\r\n    mapping(address => mapping(uint => bool)) public paidIndex;\r\n    uint totalEligible;\r\n\r\n    function setPaxAddress(address paxAddress) public onlyOwner returns(bool)\r\n    {\r\n        paxContractAddress = paxAddress;\r\n        return true;\r\n    }\r\n\r\n    function setDistributionAmount(uint _distributionAmount) public onlyOwner returns(bool)\r\n    {\r\n        distributionAmount.push(_distributionAmount);\r\n        return true;\r\n    }\r\n\r\n    constructor() public {\r\n        distributionAmount.push(0);\r\n    }\r\n\r\n    function addNewAddress(address[] memory users) public onlySigner returns(bool)\r\n    {\r\n        for(uint i =0;i<users.length;i++)\r\n        {\r\n            eligibleUser[users[i]] = true;\r\n            eligibleFrom[users[i]] = distributionAmount.length;\r\n            totalEligible++;\r\n        }\r\n    }\r\n\r\n    event getDividendEv(address user, uint amount);\r\n    function getDividend() public returns (bool)\r\n    {\r\n        require(eligibleUser[msg.sender],\"not eligible\");\r\n        uint totalAmount=0;\r\n        for(uint i = eligibleFrom[msg.sender];i<distributionAmount.length;i++)\r\n        {\r\n            if(!paidIndex[msg.sender][i])\r\n            {\r\n                totalAmount += distributionAmount[i].div(totalEligible);\r\n                paidIndex[msg.sender][i] = true;\r\n            } \r\n        }\r\n        if(totalAmount > 0 ) require(paxInterface(paxContractAddress).transfer(msg.sender, totalAmount ),\"token transfer failed\");\r\n        emit getDividendEv(msg.sender, totalAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function viewMyDividend(address user) public view returns (uint)\r\n    {\r\n        uint totalAmount=0;\r\n        for(uint i = eligibleFrom[user];i<distributionAmount.length;i++)\r\n        {\r\n            if(!paidIndex[user][i])\r\n            {\r\n                totalAmount += distributionAmount[i].div(totalEligible);\r\n            } \r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n\r\n\r\n    function withdrawExtraFund(uint amount) public onlyOwner returns(bool)\r\n    {\r\n        require(paxInterface(paxContractAddress).transfer(msg.sender, amount ),\"token transfer failed\");\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDividendEv\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addNewAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibleFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibleUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributionAmount\",\"type\":\"uint256\"}],\"name\":\"setDistributionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"paxAddress\",\"type\":\"address\"}],\"name\":\"setPaxAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewMyDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawExtraFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"divDistribution","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7f04132cf2fe96c2285d9de3ee33cd64d13d8ab8d3131a877616f2bf9ab4abe5"}]}