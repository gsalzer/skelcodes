{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title ETH bonus pool\r\n * @dev ETH collection and inquiry\r\n */\r\ncontract Nest_3_Abonus {\r\n    using address_make_payable for address;\r\n    using SafeMath for uint256;\r\n    \r\n    Nest_3_VoteFactory _voteFactory;                                //  Voting contract\r\n    address _nestAddress;                                           //  NEST contract address\r\n    mapping (address => uint256) ethMapping;                        //  ETH bonus ledger of corresponding tokens\r\n    uint256 _mostDistribution = 40;                                 //  The highest allocation ratio of NEST bonus pool\r\n    uint256 _leastDistribution = 20;                                //  The lowest allocation ratio of NEST bonus pool\r\n    uint256 _distributionTime = 1200000;                            //  The decay time interval of NEST bonus pool allocation ratio \r\n    uint256 _distributionSpan = 5;                                  //  The decay degree of NEST bonus pool allocation ratio\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor(address voteFactory) public {\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory);\r\n        _nestAddress = address(_voteFactory.checkAddress(\"nest\"));\r\n    }\r\n \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner{\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory);\r\n        _nestAddress = address(_voteFactory.checkAddress(\"nest\"));\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer in bonus\r\n    * @param token Corresponding to lock-up Token\r\n    */\r\n    function switchToEth(address token) public payable {\r\n        ethMapping[token] = ethMapping[token].add(msg.value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Transferin bonus - NToken offering fee\r\n    * @param token Corresponding to lock-up NToken\r\n    */\r\n    function switchToEthForNTokenOffer(address token) public payable {\r\n        Nest_NToken nToken = Nest_NToken(token);\r\n        (uint256 createBlock,) = nToken.checkBlockInfo();\r\n        uint256 subBlock = block.number.sub(createBlock);\r\n        uint256 times = subBlock.div(_distributionTime);\r\n        uint256 distributionValue = times.mul(_distributionSpan);\r\n        uint256 distribution = _mostDistribution;\r\n        if (_leastDistribution.add(distributionValue) > _mostDistribution) {\r\n            distribution = _leastDistribution;\r\n        } else {\r\n            distribution = _mostDistribution.sub(distributionValue);\r\n        }\r\n        uint256 nestEth = msg.value.mul(distribution).div(100);\r\n        ethMapping[_nestAddress] = ethMapping[_nestAddress].add(nestEth);\r\n        ethMapping[token] = ethMapping[token].add(msg.value.sub(nestEth));\r\n    }\r\n    \r\n    /**\r\n    * @dev Receive ETH\r\n    * @param num Receive amount \r\n    * @param token Correspond to locked Token\r\n    * @param target Transfer target\r\n    */\r\n    function getETH(uint256 num, address token, address target) public onlyContract {\r\n        require(num <= ethMapping[token], \"Insufficient storage balance\");\r\n        ethMapping[token] = ethMapping[token].sub(num);\r\n        address payable addr = target.make_payable();\r\n        addr.transfer(num);\r\n    }\r\n    \r\n    /**\r\n    * @dev Get bonus pool balance\r\n    * @param token Corresponded locked Token\r\n    * @return uint256 Bonus pool balance\r\n    */\r\n    function getETHNum(address token) public view returns (uint256) {\r\n        return ethMapping[token];\r\n    }\r\n    \r\n    // View NEST address\r\n    function checkNestAddress() public view returns(address) {\r\n        return _nestAddress;\r\n    }\r\n    \r\n    // View the highest NEST bonus pool allocation ratio\r\n    function checkMostDistribution() public view returns(uint256) {\r\n        return _mostDistribution;\r\n    }\r\n    \r\n    // View the lowest NEST bonus pool allocation ratio\r\n    function checkLeastDistribution() public view returns(uint256) {\r\n        return _leastDistribution;\r\n    }\r\n    \r\n    // View the decay time interval of NEST bonus pool allocation ratio \r\n    function checkDistributionTime() public view returns(uint256) {\r\n        return _distributionTime;\r\n    }\r\n    \r\n    // View the decay degree of NEST bonus pool allocation ratio\r\n    function checkDistributionSpan() public view returns(uint256) {\r\n        return _distributionSpan;\r\n    }\r\n    \r\n    // Modify the highest NEST bonus pool allocation ratio\r\n    function changeMostDistribution(uint256 num) public onlyOwner  {\r\n        _mostDistribution = num;\r\n    }\r\n    \r\n    // Modify the lowest NEST bonus pool allocation ratio\r\n    function changeLeastDistribution(uint256 num) public onlyOwner  {\r\n        _leastDistribution = num;\r\n    }\r\n    \r\n    // Modify the decay time interval of NEST bonus pool allocation ratio \r\n    function changeDistributionTime(uint256 num) public onlyOwner  {\r\n        _distributionTime = num;\r\n    }\r\n    \r\n    // Modify the decay degree of NEST bonus pool allocation ratio\r\n    function changeDistributionSpan(uint256 num) public onlyOwner  {\r\n        _distributionSpan = num;\r\n    }\r\n    \r\n    // Withdraw ETH\r\n    function turnOutAllEth(uint256 amount, address target) public onlyOwner {\r\n        address payable addr = target.make_payable();\r\n        addr.transfer(amount);  \r\n    }\r\n    \r\n    // Only bonus logic contract\r\n    modifier onlyContract(){\r\n        require(_voteFactory.checkAddress(\"nest.v3.tokenAbonus\") == address(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n    \r\n    // Administrator only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(address(msg.sender)), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Voting factory\r\ninterface Nest_3_VoteFactory {\r\n    // Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t// Check whether the administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\n// NToken\r\ninterface Nest_NToken {\r\n    // Increase token\r\n    function increaseTotal(uint256 value) external;\r\n    // Query mining information\r\n    function checkBlockInfo() external view returns(uint256 createBlock, uint256 recentlyUsedBlock);\r\n    // Query creator\r\n    function checkOwner() external view returns(address);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeDistributionSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeDistributionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeLeastDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeMostDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDistributionSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDistributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLeastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMostDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkNestAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getETHNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"switchToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"switchToEthForNTokenOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"turnOutAllEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nest_3_Abonus","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4e4a034194b14bf9af394c0871b455a6a1065a205d8ca712ec9323cde7b108af"}]}