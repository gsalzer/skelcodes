{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.10; // optimization runs: 200, evm version: istanbul\r\n\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address) external view returns (uint256);\r\n  function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ncontract TradeReserveEtherReceiver {\r\n  address payable internal constant _TRADE_RESERVE = (\r\n    0x0eFb068354c10c070ddD64a0E8EaF8f054DF7E26\r\n  );\r\n    \r\n  receive() external payable {}\r\n  \r\n  function settleEther() external {\r\n    (bool ok,) = _TRADE_RESERVE.call{\r\n      value: address(this).balance\r\n    }(\"\");\r\n\r\n    if (!ok) {\r\n      assembly {\r\n        returndatacopy(0, 0, returndatasize())\r\n        revert(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n  \r\n  function settleERC20(IERC20 token) external {\r\n    bool ok = token.transfer(\r\n      _TRADE_RESERVE, token.balanceOf(address(this))\r\n    );\r\n    \r\n    require(ok, \"Token transfer failed.\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"settleERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TradeReserveEtherReceiver","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d528482b1b89605c3a062e6a0c49ee07c78fa62a7206b5f4b95fc379ad1ae054"}]}