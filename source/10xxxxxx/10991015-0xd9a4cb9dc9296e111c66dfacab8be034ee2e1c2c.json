{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ninterface ISupplyController {\r\n\tfunction mint(address token, address owner, uint amount) external;\r\n}\r\n\r\ninterface IADXToken {\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address spender) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction supplyController() external view returns (ISupplyController);\r\n}\r\n\r\ncontract ADXLoyaltyPoolToken {\r\n\tusing SafeMath for uint;\r\n\r\n\t// ERC20 stuff\r\n\t// Constants\r\n\tstring public constant name = \"AdEx Loyalty\";\r\n\tuint8 public constant decimals = 18;\r\n\tstring public symbol = \"ADX-LOYALTY\";\r\n\r\n\t// Mutable variables\r\n\tuint public totalSupply;\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\t// EIP 2612\r\n\tbytes32 public DOMAIN_SEPARATOR;\r\n\t// keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\tmapping(address => uint) public nonces;\r\n\r\n\t// ERC20 events\r\n\tevent Approval(address indexed owner, address indexed spender, uint amount);\r\n\tevent Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint balance) {\r\n\t\treturn balances[owner];\r\n\t}\r\n\r\n\tfunction transfer(address to, uint amount) external returns (bool success) {\r\n\t\trequire(to != address(this), 'BAD_ADDRESS');\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\temit Transfer(msg.sender, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint amount) external returns (bool success) {\r\n\t\tbalances[from] = balances[from].sub(amount);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\temit Transfer(from, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint amount) external returns (bool success) {\r\n\t\tallowed[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint remaining) {\r\n\t\treturn allowed[owner][spender];\r\n\t}\r\n\r\n\t// EIP 2612\r\n\tfunction permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\trequire(deadline >= block.timestamp, 'DEADLINE_EXPIRED');\r\n\t\tbytes32 digest = keccak256(abi.encodePacked(\r\n\t\t\t'\\x19\\x01',\r\n\t\t\tDOMAIN_SEPARATOR,\r\n\t\t\tkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))\r\n\t\t));\r\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\r\n\t\trequire(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');\r\n\t\tallowed[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t// Inner\r\n\tfunction innerMint(address owner, uint amount) internal {\r\n\t\ttotalSupply = totalSupply.add(amount);\r\n\t\tbalances[owner] = balances[owner].add(amount);\r\n\t\t// Because of https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n\t\temit Transfer(address(0), owner, amount);\r\n\t}\r\n\tfunction innerBurn(address owner, uint amount) internal {\r\n\t\ttotalSupply = totalSupply.sub(amount);\r\n\t\tbalances[owner] = balances[owner].sub(amount);\r\n\t\temit Transfer(owner, address(0), amount);\r\n\t}\r\n\r\n\r\n\t// Pool functionality\r\n\tevent LogSetGovernance(address indexed addr, bool hasGovt, uint time);\r\n\tevent LogSetIncentive(uint incentive, uint time);\r\n\r\n\tIADXToken public ADXToken;\r\n\tuint public incentivePerTokenPerAnnum;\r\n\tuint public lastMintTime;\r\n\tuint public maxTotalADX;\r\n\tmapping (address => bool) public governance;\r\n\tconstructor(IADXToken token, uint incentive, uint cap) public {\r\n\t\tADXToken = token;\r\n\t\tincentivePerTokenPerAnnum = incentive;\r\n\t\tmaxTotalADX = cap;\r\n\t\tgovernance[msg.sender] = true;\r\n\t\tlastMintTime = block.timestamp;\r\n\t\t// EIP 2612\r\n\t\tuint chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid()\r\n\t\t}\r\n\t\tDOMAIN_SEPARATOR = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n\t\t\t\tkeccak256(bytes(name)),\r\n\t\t\t\tkeccak256(bytes('1')),\r\n\t\t\t\tchainId,\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\temit LogSetGovernance(msg.sender, true, block.timestamp);\r\n\t\temit LogSetIncentive(incentive, block.timestamp);\r\n\t}\r\n\r\n\t// Governance functions\r\n\tfunction setGovernance(address addr, bool hasGovt) external {\r\n\t\trequire(governance[msg.sender], 'NOT_GOVERNANCE');\r\n\t\tgovernance[addr] = hasGovt;\r\n\t\temit LogSetGovernance(addr, hasGovt, block.timestamp);\r\n\t}\r\n\t// This doesn't trigger a mint because otherwise we risk of being unable to setIncentive to 0\r\n\t// if minting is impossible\r\n\t// It's the better tradeoff to make - and the issue of front-running mintIncnetive with setIncentive(0) can\r\n\t// be solved by timelocking the governance\r\n\tfunction setIncentive(uint newIncentive) external {\r\n\t\trequire(governance[msg.sender], 'NOT_GOVERNANCE');\r\n\t\tincentivePerTokenPerAnnum = newIncentive;\r\n\t\tlastMintTime = block.timestamp;\r\n\t\temit LogSetIncentive(newIncentive, block.timestamp);\r\n\t}\r\n\tfunction setSymbol(string calldata newSymbol) external {\r\n\t\trequire(governance[msg.sender], 'NOT_GOVERNANCE');\r\n\t\tsymbol = newSymbol;\r\n\t}\r\n\tfunction setMaxTotalADX(uint newMaxTotalADX) external {\r\n\t\trequire(governance[msg.sender], 'NOT_GOVERNANCE');\r\n\t\tmaxTotalADX = newMaxTotalADX;\r\n\t}\r\n\r\n\r\n\t// Pool stuff\r\n\t// There are a few notable items in how minting works\r\n\t// 1) if ADX is sent to the LoyaltyPool in-between mints, it will calculate the incentive as if this amount\r\n\t// has been there the whole time since the last mint\r\n\t// 2) Compounding is happening when mint is called, so essentially when entities enter/leave/trigger it manually\r\n\tfunction toMint() external view returns (uint) {\r\n\t\tif (block.timestamp <= lastMintTime) return 0;\r\n\t\tuint totalADX = ADXToken.balanceOf(address(this));\r\n\t\treturn (block.timestamp - lastMintTime)\r\n\t\t\t.mul(totalADX)\r\n\t\t\t.mul(incentivePerTokenPerAnnum)\r\n\t\t\t.div(365 days * 10e17);\r\n\t}\r\n\r\n\tfunction shareValue() external view returns (uint) {\r\n\t\tif (totalSupply == 0) return 0;\r\n\t\treturn ADXToken.balanceOf(address(this))\r\n\t\t\t.add(this.toMint())\r\n\t\t\t.mul(10e17)\r\n\t\t\t.div(totalSupply);\r\n\t}\r\n\r\n\tfunction mintIncentive() public {\r\n\t\tif (incentivePerTokenPerAnnum == 0) return;\r\n\t\tuint amountToMint = this.toMint();\r\n\t\tif (amountToMint == 0) return;\r\n\t\tlastMintTime = block.timestamp;\r\n\t\tADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);\r\n\t}\r\n\r\n\tfunction enter(uint256 amount) external {\r\n\t\t// Please note that minting has to be in the beginning so that we take it into account\r\n\t\t// when using ADXToken.balanceOf()\r\n\t\t// Minting makes an external call but it's to a trusted contract (ADXToken)\r\n\t\tmintIncentive();\r\n\r\n\t\tuint totalADX = ADXToken.balanceOf(address(this));\r\n\t\trequire(totalADX.add(amount) <= maxTotalADX, 'REACHED_MAX_TOTAL_ADX');\r\n\r\n\t\t// The totalADX == 0 check here should be redudnant; the only way to get totalSupply to a nonzero val is by adding ADX\r\n\t\tif (totalSupply == 0 || totalADX == 0) {\r\n\t\t\tinnerMint(msg.sender, amount);\r\n\t\t} else {\r\n\t\t\tuint256 newShares = amount.mul(totalSupply).div(totalADX);\r\n\t\t\tinnerMint(msg.sender, newShares);\r\n\t\t}\r\n\t\trequire(ADXToken.transferFrom(msg.sender, address(this), amount));\r\n\t}\r\n\r\n\tfunction leaveInner(uint256 shares) internal {\r\n\t\tuint256 totalADX = ADXToken.balanceOf(address(this));\r\n\t\tuint256 adxAmount = shares.mul(totalADX).div(totalSupply);\r\n\t\tinnerBurn(msg.sender, shares);\r\n\t\trequire(ADXToken.transfer(msg.sender, adxAmount));\r\n\t}\r\n\r\n\tfunction leave(uint256 shares) external {\r\n\t\tmintIncentive();\r\n\t\tleaveInner(shares);\r\n\t}\r\n\r\n\t// Guarantees ADX can be taken out even if minting is failing\r\n\tfunction emergencyLeave(uint256 shares) external {\r\n\t\tleaveInner(shares);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IADXToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"incentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasGovt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogSetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogSetIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADXToken\",\"outputs\":[{\"internalType\":\"contract IADXToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"emergencyLeave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivePerTokenPerAnnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalADX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasGovt\",\"type\":\"bool\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIncentive\",\"type\":\"uint256\"}],\"name\":\"setIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalADX\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalADX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ADXLoyaltyPoolToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ade00c28244d5ce17d72e40330b1c318cd12b7c30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108b2a2c28029094000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13103ad6ef487211bbd1d9115f80d2383a57a99425ea65fdabd993d1ede43df1"}]}