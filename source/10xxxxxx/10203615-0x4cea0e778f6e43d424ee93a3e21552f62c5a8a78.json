{"status":"1","message":"OK","result":[{"SourceCode":"// Proxy contract, which allows owner to redeem funds after they use this contract to call another that may or may not send fund to this contract.\r\n//Additionally deploys saved gas to get rebate if gas token is present\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ERC20GasToken {\r\n    function name (  ) external view returns ( string memory);\r\n  function freeFromUpTo ( address from, uint256 value ) external returns ( uint256 freed );\r\n  function approve ( address spender, uint256 value ) external returns ( bool success );\r\n  function totalSupply (  ) external view returns ( uint256 supply );\r\n  function transferFrom ( address from, address to, uint256 value ) external returns ( bool success );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function freeFrom ( address from, uint256 value ) external returns ( bool success );\r\n  function freeUpTo ( uint256 value ) external returns ( uint256 freed );\r\n  function balanceOf ( address owner ) external view returns ( uint256 balance );\r\n  function symbol (  ) external view returns ( string memory);\r\n  function mint ( uint256 value ) external;\r\n  function transfer ( address to, uint256 value ) external returns ( bool success );\r\n  function free ( uint256 value ) external returns ( bool success );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 remaining );\r\n}\r\n\r\n\r\n\r\ncontract EfficientProxy{\r\n    \r\n    address owner = msg.sender;\r\n    address public logic_contract;\r\n    ERC20GasToken gasToken = ERC20GasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n     \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner of the contract\");\r\n        _;\r\n    }\r\n    \r\n    function setLogicContract(address _c) public onlyOwner returns (bool success){\r\n        logic_contract = _c;\r\n        return true;\r\n    }\r\n\r\n    function  () payable public {\r\n\r\n        address target = logic_contract;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, target, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            case 1 { return(ptr, size) }\r\n        }\r\n        \r\n        if(gasToken.balanceOf(this) >0){\r\n            gasToken.freeFromUpTo(address(this), gasToken.balanceOf(this));\r\n        }\r\n        \r\n    }\r\n    \r\n    function withdrawOwnerETH() onlyOwner returns(bool) {\r\n        uint amount = this.balance;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawOwnerTokens(address tokenAddress) onlyOwner{\r\n        ERC20 token = ERC20(tokenAddress);\r\n        uint256 currentTokenBalance = token.balanceOf(this);\r\n        token.transfer(msg.sender, currentTokenBalance);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawOwnerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logic_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_c\",\"type\":\"address\"}],\"name\":\"setLogicContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EfficientProxy","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9e1630e8c5224ad78a8f89bd4799d1012be11d0f5b92cf5235eb24b3253e5bac"}]}