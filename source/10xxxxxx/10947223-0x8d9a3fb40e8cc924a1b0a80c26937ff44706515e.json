{"status":"1","message":"OK","result":[{"SourceCode":"// File: zeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20Basic.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\BasicToken.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\StandardToken.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken, Ownable {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  \r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// File: contracts\\OdinalaToken.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * Final token\r\n */\r\ncontract OdinalaToken is StandardToken {\r\n\r\n    string public constant name = \"Odinala Token\";\r\n    string public constant symbol = \"ODN\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function OdinalaToken()\r\n        public\r\n         { }\r\n}\r\n\r\n\r\n// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\Crowdsale.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  StandardToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (StandardToken) {\r\n    return new StandardToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.approve(this,tokens);\r\n    token.transferFrom(this,beneficiary,tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\crowdsale\\CappedCrowdsale.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n  bool private circuitBreaker;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n    circuitBreaker = false;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap && !circuitBreaker;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached || circuitBreaker;\r\n  }\r\n  \r\n  function triggerCircuitBreaker() internal{\r\n      require(circuitBreaker == false);\r\n      circuitBreaker = true;\r\n  }\r\n\r\n}\r\n\r\n\r\n// File: contracts\\ExternalTokenCrowdsale.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title ExternalTokenCrowdsale\r\n * @dev Extension of Crowdsale with an externally provided token\r\n * with implicit ownership grant over it\r\n */\r\ncontract ExternalTokenCrowdsale is Crowdsale {\r\n    function ExternalTokenCrowdsale(StandardToken _token) public {\r\n        require(_token != address(0));\r\n        // Modify underlying token variable \r\n        // (createTokenContract has already been called)\r\n        token = _token;\r\n    }\r\n\r\n    function createTokenContract() internal returns (StandardToken) {\r\n        return StandardToken(0x0); // Placeholder\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract DevTimeLock is Ownable{\r\n    \r\n    uint256 private _count1 = 0;\r\n    uint256 private _count2 = 0;\r\n    uint256 private _count3 = 0;\r\n    \r\n    uint256 private _releaseTime1;\r\n    uint256 private _releaseTime2;\r\n    uint256 private _releaseTime3;\r\n    \r\n     StandardToken _token;\r\n    address private _wallet;\r\n    \r\n    function DevTimeLock(\r\n        address wallet,\r\n        StandardToken token,\r\n        uint256 releaseTime1,\r\n        uint256 releaseTime2,\r\n        uint256 releaseTime3 ){\r\n            \r\n        _wallet = wallet;\r\n        _token = token;\r\n        _releaseTime1 = releaseTime1;\r\n        _releaseTime2 = releaseTime2;\r\n        _releaseTime3 = releaseTime3;\r\n        \r\n    }\r\n    \r\n     function release1() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime1);\r\n        require(_count1 == 0);\r\n        uint256 amount = 400000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count1 = 1;\r\n    }\r\n    \r\n     function release2() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime2);\r\n        require(_count2 == 0);\r\n        uint256 amount = 400000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count2 = 1;\r\n    }\r\n    \r\n    function release3() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime3);\r\n        require(_count3 == 0);\r\n        uint256 amount = 400000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count3 = 1;\r\n    }\r\n}\r\n\r\ncontract StakingTimeLock is Ownable{\r\n    \r\n    uint256 private _count1 = 0;\r\n\r\n    \r\n    uint256 private _releaseTime1;\r\n\r\n    \r\n     StandardToken _token;\r\n    address private _wallet;\r\n    \r\n    function StakingTimeLock(\r\n        address wallet,\r\n        StandardToken token,\r\n        uint256 releaseTime1 ){\r\n            \r\n        _wallet = wallet;\r\n        _token = token;\r\n        _releaseTime1 = releaseTime1;\r\n        \r\n    }\r\n    \r\n     function release1() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime1);\r\n        require(_count1 == 0);\r\n        uint256 amount = 1500000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count1 = 1;\r\n    }\r\n    \r\n}\r\n\r\ncontract DexTimeLock is Ownable{\r\n    \r\n    uint256 private _count1 = 0;\r\n\r\n    \r\n    uint256 private _releaseTime1;\r\n\r\n    \r\n     StandardToken _token;\r\n    address private _wallet;\r\n    \r\n    function DexTimeLock(\r\n        address wallet,\r\n        StandardToken token,\r\n        uint256 releaseTime1 ){\r\n            \r\n        _wallet = wallet;\r\n        _token = token;\r\n        _releaseTime1 = releaseTime1;\r\n        \r\n    }\r\n    \r\n     function release1() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime1);\r\n        require(_count1 == 0);\r\n        uint256 amount = 1000000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count1 = 1;\r\n    }\r\n    \r\n}\r\n\r\ncontract UniswapTimeLock is Ownable{\r\n    \r\n    uint256 private _count1 = 0;\r\n\r\n    \r\n    uint256 private _releaseTime1;\r\n\r\n    \r\n     StandardToken _token;\r\n    address private _wallet;\r\n    \r\n    function UniswapTimeLock(\r\n        address wallet,\r\n        StandardToken token,\r\n        uint256 releaseTime1 ){\r\n            \r\n        _wallet = wallet;\r\n        _token = token;\r\n        _releaseTime1 = releaseTime1;\r\n        \r\n    }\r\n    \r\n     function release1() onlyOwner public  {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime1);\r\n        require(_count1 == 0);\r\n        uint256 amount = 1000000000000000000000000;\r\n        _token.approve(this,amount);\r\n        _token.transferFrom(this,_wallet,amount);\r\n        _count1 = 1;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts\\PreICOCrowdsale.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * Crowdsale with injected token, permissions have to be ensured by creator\r\n */\r\ncontract PreICOCrowdsale is Ownable, CappedCrowdsale, ExternalTokenCrowdsale {\r\n\r\n\r\n    \r\n    function PreICOCrowdsale(\r\n        address _wallet,\r\n        StandardToken _token,\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 rate,\r\n        uint256 cap\r\n    )\r\n        public\r\n        CappedCrowdsale(cap) // Cap\r\n        Crowdsale(\r\n            start, \r\n            end, \r\n            rate, \r\n            _wallet\r\n        )\r\n        ExternalTokenCrowdsale(_token)\r\n    { \r\n      \r\n    }\r\n    \r\n     function stopSale() onlyOwner public{\r\n       triggerCircuitBreaker();\r\n    }\r\n    \r\n}\r\n\r\n\r\n// File: contracts\\TwoStageCrowdsale.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title TwoStageCrowdsale\r\n * @dev Dual crowdsale deployment contract\r\n * Finalization functions are separated due to potentially different requirements\r\n */\r\ncontract MultiStageCrowdsale is Ownable {\r\n    PreICOCrowdsale public _preICOCrowdsale1;\r\n    PreICOCrowdsale public _preICOCrowdsale2;\r\n    PreICOCrowdsale public _preICOCrowdsale3;\r\n    StandardToken public _token;\r\n    DevTimeLock public  _devTimeLock;\r\n    StakingTimeLock public _stakingTimeLock;\r\n    UniswapTimeLock public _uniswapTimeLock;\r\n    DexTimeLock public _dexTimeLock;\r\n\r\n    function MultiStageCrowdsale(address wallet) public {\r\n\r\n        //wallet = 0xc34C80406aAE250B53edba7C183377CD0bcb8949\r\n        \r\n        _token = createTokenContract();\r\n        \r\n        _stakingTimeLock = new StakingTimeLock(wallet, _token, 1609459200); //jan 1st 2021\r\n        \r\n        _uniswapTimeLock = new UniswapTimeLock(wallet, _token, 1601769600000); //4th October\r\n        \r\n        _dexTimeLock = new DexTimeLock(wallet, _token, 1612137600); // 1 Feb 2021\r\n        \r\n        _preICOCrowdsale1 = new PreICOCrowdsale(wallet, _token, 1599430994, 1614556800, 4053, 370 ether);\r\n        \r\n        _preICOCrowdsale2 = new PreICOCrowdsale(wallet, _token, 1599430994, 1614556800, 3695, 135 ether);\r\n        \r\n        _preICOCrowdsale3 = new PreICOCrowdsale(wallet, _token, 1599430994, 1614556800, 3359, 140 ether);\r\n        \r\n        _devTimeLock = new DevTimeLock(wallet, _token, 1630454400, 1661990400, 1696118399);\r\n        \r\n        _token.mint(wallet, 800000000000000000000000);\r\n        _token.mint(_preICOCrowdsale1, 1500000000000000000000000);\r\n        _token.mint(_preICOCrowdsale2, 500000000000000000000000);\r\n        _token.mint(_preICOCrowdsale3, 500000000000000000000000);\r\n        _token.mint(_devTimeLock, 1200000000000000000000000);\r\n        _token.mint(_stakingTimeLock, 1500000000000000000000000);\r\n        _token.mint(_uniswapTimeLock, 1000000000000000000000000);\r\n        _token.mint(_dexTimeLock, 1000000000000000000000000);\r\n        \r\n        _token.finishMinting();\r\n    }\r\n    \r\n\r\n    function createTokenContract() internal returns (StandardToken) {\r\n        return new OdinalaToken();\r\n    }\r\n    \r\n    function devRelease1() onlyOwner public{\r\n        _devTimeLock.release1();\r\n    }\r\n    \r\n    function devRelease2() onlyOwner public{\r\n        _devTimeLock.release2();\r\n    }\r\n    \r\n    function devRelease3() onlyOwner public{\r\n        _devTimeLock.release3();\r\n    }\r\n    \r\n     function stakingRelease() onlyOwner public{\r\n        _stakingTimeLock.release1();\r\n    }\r\n    \r\n     function uniswapRelease() onlyOwner public{\r\n        _uniswapTimeLock.release1();\r\n    }\r\n    \r\n    function dexRelease() onlyOwner public{\r\n        _dexTimeLock.release1();\r\n    }\r\n    \r\n    function stopPreSale1() onlyOwner public{\r\n       _preICOCrowdsale1.stopSale();\r\n    }\r\n    \r\n    function stopPreSale2() onlyOwner public{\r\n       _preICOCrowdsale2.stopSale();\r\n    }\r\n    \r\n    function stopPreSale3() onlyOwner public{\r\n       _preICOCrowdsale3.stopSale();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"devRelease2\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPreSale3\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_stakingTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPreSale2\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_preICOCrowdsale1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dexTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"uniswapRelease\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dexRelease\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_uniswapTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_devTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devRelease1\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPreSale1\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakingRelease\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_preICOCrowdsale2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devRelease3\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_preICOCrowdsale3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiStageCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c34c80406aae250b53edba7c183377cd0bcb8949","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0726696536702aee8a2784a79a28fd37669ee7217de696fa729e7e51b3401973"}]}