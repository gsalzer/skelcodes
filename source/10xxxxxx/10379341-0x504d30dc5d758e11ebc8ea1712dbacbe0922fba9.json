{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface Aave {\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateModel, uint16 _referralCode) external;\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n}\r\n\r\ninterface Oracle {\r\n    function getAssetPrice(address reserve) external view returns (uint256);\r\n    function latestAnswer() external view returns (uint256);\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ncontract iCollateralVault is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public constant aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    \r\n    address private _owner;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    // LP deposit, anyone can deposit/topup\r\n    function activate(address reserve) external {\r\n        Aave(getAave()).setUserUseReserveAsCollateral(reserve, true);\r\n    }\r\n    \r\n    // No logic, logic handled underneath by Aave\r\n    function withdraw(address reserve, uint256 amount, address to) external onlyOwner {\r\n        IERC20(reserve).safeTransfer(to, amount);\r\n    }\r\n    \r\n    function getAave() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPool();\r\n    }\r\n    \r\n    function getAaveCore() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPoolCore();\r\n    }\r\n    \r\n    // amount needs to be normalized\r\n    function borrow(address reserve, uint256 amount, address to) external nonReentrant onlyOwner {\r\n        // LTV logic handled by underlying\r\n        Aave(getAave()).borrow(reserve, amount, 2, 7);\r\n        IERC20(reserve).safeTransfer(to, amount);\r\n    }\r\n    \r\n    function repay(address reserve, uint256 amount) public {\r\n        // Required for certain stable coins (USDT for example)\r\n        IERC20(reserve).approve(address(getAaveCore()), 0);\r\n        IERC20(reserve).approve(address(getAaveCore()), amount);\r\n        Aave(getAave()).repay(reserve, amount, address(uint160(address(this))));\r\n    }\r\n}\r\n\r\ncontract iCollateralVaultProxy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => address[]) private _ownedVaults;\r\n    mapping (address => address) private _vaults;\r\n    // Spending limits per user measured in dollars 1e8\r\n    mapping (address => mapping (address => uint256)) private _limits;\r\n    \r\n    address public constant aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    address public constant link = address(0xF79D6aFBb6dA890132F9D7c355e3015f15F3406F);\r\n    \r\n    constructor() public {\r\n        deployVault();\r\n    }\r\n    \r\n    function limit(address vault, address spender) public view returns (uint256) {\r\n        return _limits[vault][spender];\r\n    }\r\n    \r\n    function increaseLimit(address vault, address spender, uint256 addedValue) public {\r\n        require(isVaultOwner(address(vault), msg.sender), \"not vault owner\");\r\n        _approve(vault, spender, _limits[vault][spender].add(addedValue));\r\n    }\r\n    \r\n    function decreaseLimit(address vault, address spender, uint256 subtractedValue) public {\r\n        require(isVaultOwner(address(vault), msg.sender), \"not vault owner\");\r\n        _approve(vault, spender, _limits[vault][spender].sub(subtractedValue, \"decreased limit below zero\"));\r\n    }\r\n    \r\n    function _approve(address vault, address spender, uint256 amount) internal {\r\n        require(spender != address(0), \"approve to the zero address\");\r\n        _limits[vault][spender] = amount;\r\n    }\r\n    \r\n    function isVaultOwner(address vault, address owner) public view returns (bool) {\r\n        return _vaults[vault] == owner;\r\n    }\r\n    function isVault(address vault) public view returns (bool) {\r\n        return _vaults[vault] != address(0);\r\n    }\r\n    \r\n    // LP deposit, anyone can deposit/topup\r\n    function deposit(iCollateralVault vault, address reserve, uint256 amount) external {\r\n        IERC20(reserve).safeTransferFrom(msg.sender, address(this), amount);\r\n        IERC20(reserve).safeTransfer(address(vault), amount);\r\n        vault.activate(reserve);\r\n    }\r\n    \r\n    // No logic, handled underneath by Aave\r\n    function withdraw(iCollateralVault vault, address reserve, uint256 amount) external {\r\n        require(isVaultOwner(address(vault), msg.sender), \"not vault owner\");\r\n        vault.withdraw(reserve, amount, msg.sender);\r\n    }\r\n    \r\n    // amount needs to be normalized\r\n    function borrow(iCollateralVault vault, address reserve, uint256 amount) external {\r\n        uint256 _borrow = getReservePriceUSD(reserve).mul(amount);\r\n        _approve(address(vault), msg.sender, _limits[address(vault)][msg.sender].sub(_borrow, \"borrow amount exceeds allowance\"));\r\n        vault.borrow(reserve, amount, msg.sender);\r\n    }\r\n    \r\n    function repay(iCollateralVault vault, address reserve, uint256 amount) public {\r\n        IERC20(reserve).safeTransferFrom(msg.sender, address(this), amount);\r\n        IERC20(reserve).safeTransfer(address(vault), amount);\r\n        vault.repay(reserve, amount);\r\n    }\r\n    \r\n    function getVaults(address owner) external view returns (address[] memory) {\r\n        return _ownedVaults[owner];\r\n    }\r\n    \r\n    function deployVault() public returns (address) {\r\n        address vault = address(new iCollateralVault());\r\n        \r\n        // Mark address as vault\r\n        _vaults[vault] = msg.sender;\r\n        \r\n        // Set vault owner\r\n        address[] storage owned = _ownedVaults[msg.sender];\r\n        owned.push(vault);\r\n        _ownedVaults[msg.sender] = owned;\r\n        return vault;\r\n    }\r\n    \r\n    function getAave() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPool();\r\n    }\r\n    \r\n    function getAaveCore() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPoolCore();\r\n    }\r\n    \r\n    function getAaveOracle() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getPriceOracle();\r\n    }\r\n    \r\n    function getReservePriceETH(address reserve) public view returns (uint256) {\r\n        return Oracle(getAaveOracle()).getAssetPrice(reserve);\r\n    }\r\n    \r\n    function getReservePriceUSD(address reserve) public view returns (uint256) {\r\n        return getReservePriceETH(reserve).mul(Oracle(link).latestAnswer());\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"iCollateralVault","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://23064eeaa37a653b7be624fd2c5211f216580f6e9aee80462053b1a22f4c72c0"}]}