{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string public constant MODULE_ACCESS            = \"access\";\r\n    string public constant MODULE_PTOKEN            = \"ptoken\";\r\n    string public constant MODULE_CURVE             = \"curve\";\r\n    string public constant MODULE_FUNDS             = \"funds\";\r\n    string public constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string public constant MODULE_LOAN              = \"loan\";\r\n    string public constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string public constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string public constant MODULE_LTOKEN            = \"ltoken\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isMinter(sender)) {\r\n            _addMinter(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\r\n    function initialize(address sender) public initializer {\r\n        MinterRole.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Initializable, Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title PToken Interface\r\n */\r\ninterface IPToken {\r\n    /* solhint-disable func-order */\r\n    //Standart ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    //Mintable & Burnable\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    //Distributions\r\n    function distribute(uint256 amount) external;\r\n    function claimDistributions(address account) external returns(uint256);\r\n    function claimDistributions(address account, uint256 lastDistribution) external returns(uint256);\r\n    function claimDistributions(address[] calldata accounts) external;\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external;\r\n    function fullBalanceOf(address account) external view returns(uint256);\r\n    function calculateDistributedAmount(uint256 startDistribution, uint256 nextDistribution, uint256 initialBalance) external view returns(uint256);\r\n    function nextDistribution() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for token transfers, provides info about current liquidity/debts and pool token price.\r\n */\r\ninterface IFundsModule {\r\n    event Status(uint256 lBalance, uint256 lDebts, uint256 lProposals, uint256 pEnterPrice, uint256 pExitPrice);\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) external;\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) external;\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens and distribute the to other PToken holders\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function distributePTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) external;\r\n\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external;\r\n\r\n    function mintAndLockPTokens(uint256 amount) external;\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) external;\r\n\r\n    function burnLockedPTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n    \r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) external view returns(uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Current pool liquidity\r\n     * @return available liquidity\r\n     */\r\n    function lBalance() external view returns(uint256);\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) external view returns(uint256);\r\n\r\n}\r\n\r\ncontract DistributionToken is ERC20, ERC20Mintable {\r\n    using SafeMath for uint256;\r\n    uint256 public constant DISTRIBUTION_AGGREGATION_PERIOD = 24*60*60;\r\n\r\n    event DistributionCreated(uint256 amount, uint256 totalSupply);\r\n    event DistributionsClaimed(address account, uint256 amount, uint256 fromDistribution, uint256 toDistribution);\r\n    event DistributionAccumulatorIncreased(uint256 amount);\r\n\r\n    struct Distribution {\r\n        uint256 amount;         // Amount of tokens being distributed during the event\r\n        uint256 totalSupply;    // Total supply before distribution\r\n    }\r\n\r\n    Distribution[] public distributions;                   // Array of all distributions\r\n    mapping(address => uint256) public nextDistributions;  // Map account to first distribution not yet processed\r\n\r\n    uint256 public nextDistributionTimestamp;      //Timestamp when next distribuition should be fired regardles of accumulated tokens\r\n    uint256 public distributionAccumulator;        //Tokens accumulated for next distribution\r\n\r\n    function distribute(uint256 amount) external onlyMinter {\r\n        distributionAccumulator = distributionAccumulator.add(amount);\r\n        emit DistributionAccumulatorIncreased(amount);\r\n        _createDistributionIfReady();\r\n    }\r\n\r\n    function createDistribution() external onlyMinter {\r\n        require(distributionAccumulator > 0, \"DistributionToken: nothing to distribute\");\r\n        _createDistribution();\r\n    }\r\n\r\n    function claimDistributions(address account) external returns(uint256) {\r\n        _createDistributionIfReady();\r\n        uint256 amount = _updateUserBalance(account, distributions.length);\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n     * @notice Claims distributions and allows to specify how many distributions to process.\r\n     * This allows limit gas usage.\r\n     * One can do this for others\r\n     */\r\n    function claimDistributions(address account, uint256 toDistribution) external returns(uint256) {\r\n        require(toDistribution < distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        require(nextDistributions[account] < toDistribution, \"DistributionToken: no distributions to claim\");\r\n        uint256 amount = _updateUserBalance(account, toDistribution+1); //+1 is safe because we've already checked toDistribution < distributions.length\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts) external {\r\n        _createDistributionIfReady();\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], distributions.length);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external {\r\n        require(toDistribution < distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], toDistribution+1);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Full balance of account includes:\r\n     * - balance of tokens account holds himself (0 for addresses of locking contracts)\r\n     * - balance of tokens locked in contracts\r\n     * - tokens not yet claimed from distributions\r\n     */\r\n    function fullBalanceOf(address account) public view returns(uint256){\r\n        if (account == address(this)) return 0;  //Token itself only holds tokens for others\r\n        uint256 distributionBalance = distributionBalanceOf(account);\r\n        uint256 unclaimed = calculateClaimAmount(account);\r\n        return distributionBalance.add(unclaimed);\r\n    }\r\n\r\n    /**\r\n     * @notice How many tokens are not yet claimed from distributions\r\n     * @param account Account to check\r\n     * @return Amount of tokens available to claim\r\n     */\r\n    function calculateUnclaimedDistributions(address account) public view returns(uint256) {\r\n        return calculateClaimAmount(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of tokens distributed to inital amount between startDistribution and nextDistribution\r\n     * @param fromDistribution index of first Distribution to start calculations\r\n     * @param toDistribution index of distribuition next to the last processed\r\n     * @param initialBalance amount of tokens before startDistribution\r\n     * @return amount of tokens distributed\r\n     */\r\n    function calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) public view returns(uint256) {\r\n        require(fromDistribution < toDistribution, \"DistributionToken: startDistribution is too high\");\r\n        require(toDistribution <= distributions.length, \"DistributionToken: nextDistribution is too high\");\r\n        return _calculateDistributedAmount(fromDistribution, toDistribution, initialBalance);\r\n    }\r\n\r\n    function nextDistribution() public view returns(uint256){\r\n        return distributions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Balance of account, which is counted for distributions\r\n     * It only represents already distributed balance.\r\n     * @dev This function should be overloaded to include balance of tokens stored in proposals\r\n     */\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        return balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Total supply which is counted for distributions\r\n     * It only represents already distributed tokens\r\n     * @dev This function should be overloaded to exclude tokens locked in loans\r\n     */\r\n    function distributionTotalSupply() public view returns(uint256){\r\n        return totalSupply();\r\n    }\r\n\r\n    // Override functions that change user balance\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(sender);\r\n        _updateUserBalance(recipient);\r\n        super._transfer(sender, recipient, amount);\r\n        userBalanceChanged(sender);\r\n        userBalanceChanged(recipient);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._mint(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._burn(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n\r\n    function _updateUserBalance(address account) internal returns(uint256) {\r\n        return _updateUserBalance(account, distributions.length);\r\n    }\r\n\r\n    function _updateUserBalance(address account, uint256 toDistribution) internal returns(uint256) {\r\n        uint256 fromDistribution = nextDistributions[account];\r\n        if (fromDistribution >= toDistribution) return 0;\r\n        uint256 distributionAmount = calculateClaimAmount(account, toDistribution);\r\n        nextDistributions[account] = toDistribution;\r\n        if (distributionAmount == 0) return 0;\r\n        super._transfer(address(this), account, distributionAmount);\r\n        emit DistributionsClaimed(account, distributionAmount, fromDistribution, toDistribution);\r\n        return distributionAmount;\r\n    }\r\n\r\n    function _createDistributionIfReady() internal {\r\n        if (!isReadyForDistribution()) return;\r\n        _createDistribution();\r\n    }\r\n    \r\n    function _createDistribution() internal {\r\n        uint256 currentTotalSupply = distributionTotalSupply();\r\n        distributions.push(Distribution({\r\n            amount:distributionAccumulator,\r\n            totalSupply: currentTotalSupply\r\n        }));\r\n        super._mint(address(this), distributionAccumulator); //Use super because we overloaded _mint in this contract and need old behaviour\r\n        emit DistributionCreated(distributionAccumulator, currentTotalSupply);\r\n\r\n        // Clear data for next distribution\r\n        distributionAccumulator = 0;\r\n        nextDistributionTimestamp = now.sub(now % DISTRIBUTION_AGGREGATION_PERIOD).add(DISTRIBUTION_AGGREGATION_PERIOD);\r\n    }\r\n\r\n    /**\r\n     * @dev This is a placeholder, which may be overrided to notify other contracts of PTK balance change\r\n     */\r\n    function userBalanceChanged(address /*account*/) internal {\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of account's tokens to be claimed from distributions\r\n     */\r\n    function calculateClaimAmount(address account) internal view returns(uint256) {\r\n        if (nextDistributions[account] >= distributions.length) return 0;\r\n        return calculateClaimAmount(account, distributions.length);\r\n    }\r\n\r\n    function calculateClaimAmount(address account, uint256 toDistribution) internal view returns(uint256) {\r\n        assert(toDistribution <= distributions.length);\r\n        return _calculateDistributedAmount(nextDistributions[account], toDistribution, distributionBalanceOf(account));\r\n    }\r\n\r\n    function _calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) internal view returns(uint256) {\r\n        uint256 next = fromDistribution;\r\n        uint256 balance = initialBalance;\r\n        if (initialBalance == 0) return 0;\r\n        while (next < toDistribution) {\r\n            uint256 da = balance.mul(distributions[next].amount).div(distributions[next].totalSupply);\r\n            balance = balance.add(da);\r\n            next++;\r\n        }\r\n        return balance.sub(initialBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates if conditions for creating new distribution are met\r\n     */\r\n    function isReadyForDistribution() internal view returns(bool) {\r\n        return (distributionAccumulator > 0) && (now >= nextDistributionTimestamp);\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Implementation of Akropolis Pool Token\r\n */\r\ncontract PToken is Module, IPToken, ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable, DistributionToken {\r\n\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        ERC20Detailed.initialize(\"Akropolis Pool Token\", \"PTK\", 18);\r\n        ERC20Mintable.initialize(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20 transfer to add check  for allowed parties\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        address funds = getModuleAddress(MODULE_FUNDS);\r\n        requireAllowedParties(_msgSender(), to, funds);\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20 transfer to add check  for allowed parties\r\n     * and make calls from FundsModule work without approval\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        address funds = getModuleAddress(MODULE_FUNDS);\r\n        if (_msgSender() == funds) {\r\n            _transfer(from, to, value);\r\n            return true;\r\n        } else {\r\n            requireAllowedParties(from, to, funds);\r\n            return super.transferFrom(from, to, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20Burnable burnFrom to allow calls from FundsModule work without approval\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        address funds = getModuleAddress(MODULE_FUNDS);\r\n        if (_msgSender() == funds) {\r\n            _burn(account, amount);\r\n        } else {\r\n            super.burnFrom(account, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides DistributionToken.distributionBalanceOf() to handle FundsModule\r\n     */\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        IFundsModule funds = fundsModule();\r\n        if (account == address(funds)) {\r\n            return 0; //FundsModule itself does not receive distributions\r\n        }\r\n        uint256 fundsBalance = funds.pBalanceOf(account);\r\n        return super.distributionBalanceOf(account).add(fundsBalance);\r\n    }\r\n\r\n    function distributionTotalSupply() public view returns(uint256){\r\n        IFundsModule funds = fundsModule();\r\n        uint256 fullSupply = super.distributionTotalSupply();\r\n        uint256 locked = funds.pBalanceOf(address(funds));\r\n        return fullSupply.sub(locked);\r\n    }\r\n\r\n    function fundsModule() internal view returns(IFundsModule) {\r\n        return IFundsModule(getModuleAddress(MODULE_FUNDS));\r\n    }\r\n\r\n    /**\r\n     * @dev Check that sender/receipient of transfer are allowed\r\n     */\r\n    function requireAllowedParties(address from, address to, address funds) private pure{\r\n        require(funds == from || funds == to, \"PToken: only transfers to/from FundsModule allowed\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Bonding Curve Interface\r\n * @dev A bonding curve is a method for continous token minting / burning.\r\n */\r\n/* solhint-disable func-order */\r\ninterface ICurveModule {\r\n    /**\r\n     * @notice Calculates amount of pTokens to mint\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param debtCommitments Debt commitments\r\n     * @param lAmount Amount of liquidTokens to deposit\r\n     * @return Amount of pTokens to mint/unlock\r\n     */\r\n    function calculateEnter(uint256 liquidAssets, uint256 debtCommitments, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens to withdraw (full: sum of withdrawU and withdrawP)\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExit(uint256 liquidAssets, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee = withdrawU\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExitWithFee(uint256 liquidAssets, uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of liquid tokens one can withdraw from the pool when pTokens are burned/locked\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     * @return Amount of liquid tokens to withdraw: total, for user, for pool\r\n     */\r\n    function calculateExitInverseWithFee(uint256 liquidAssets, uint256 pAmount) external view returns (uint256 withdraw, uint256 withdrawU, uint256 withdrawP);\r\n\r\n    /**\r\n     * @notice Calculates lAmount to be taken as fee upon withdraw\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee\r\n     * @return Amount of liquid tokens which will be additionally taken as a pool fee\r\n     */\r\n    function calculateExitFee(uint256 lAmount) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title Integer Square Root calculation for solidity\r\n */\r\nlibrary ISQRT {\r\n\r\n    /**\r\n     * @notice Calculate Square Root\r\n     * @param n Operand of sqrt() function\r\n     * @return greatest integer less than or equal to the square root of n\r\n     */\r\n    function sqrt(uint256 n) internal pure returns(uint256){\r\n        return sqrtBabylonian(n);\r\n    }\r\n\r\n    /**\r\n     * Based on Martin Guy implementation\r\n     * http://freaknet.org/martin/tape/gos/misc/personal/msc/sqrt/sqrt.c\r\n     */\r\n    function isqrtBitByBit(uint256 x) internal pure returns (uint256){\r\n        uint256 op = x;\r\n        uint256 res = 0;\r\n        /* \"one\" starts at the highest power of four <= than the argument. */\r\n        uint256 one = 1 << 254; /* second-to-top bit set */\r\n        while (one > op) {\r\n            one = one >> 2;\r\n        }\r\n        while (one != 0) {\r\n            if (op >= res + one) {\r\n                op = op - (res + one);\r\n                res = res + (one << 1);\r\n            }\r\n            res = res >> 1;\r\n            one = one >> 2;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Babylonian method implemented in dapp-bin library\r\n     * https://github.com/ethereum/dapp-bin/pull/50\r\n     */\r\n    function sqrtBabylonian(uint256 x) internal pure returns (uint256) {\r\n        // x == MAX_UINT256 makes this method fail, so in this case return value calculated separately\r\n        if (x == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        uint256 z = (x + 1) / 2;\r\n        uint256 y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2; //No overflow possible here, because greatest possible z = MAX_UINT256/2\r\n        }\r\n        return y;\r\n    }\r\n}\r\n\r\ncontract BondingCurve is Initializable  {\r\n    using ISQRT for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    // Original curve formula uses float numbers to represent amounts. \r\n    // In Solidity we convert them to integers, using ether to wei conversion. \r\n    // While we use sqrt() operation we should convert formula accordingly.\r\n    // For this purpose curveA and curveB stored multiplied to FIX\r\n    uint256 internal constant FIX = 10**18; \r\n    uint256 public curveA;\r\n    uint256 public curveB;\r\n\r\n    /**\r\n     * @notice Initialize curve parameters\r\n     * @param _curveA Constabt A of a curve\r\n     * @param _curveB Constant B of a curve\r\n     */\r\n    function initialize(uint256 _curveA, uint256 _curveB) public initializer {\r\n        _setCurveParams(_curveA, _curveB);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be minted/unlocked when liquidity added to pool\r\n     * dx = f(A + Deposit) - f(A)\r\n     * A - A is the volume of  total assets (liquid assets in Pool + debt commitments, taken with their weight coefficients)\r\n     * Deposit is the size of the deposit, \r\n     * dx is the number of pTokens tokens received.\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param debtCommitments Debt commitments\r\n     * @param lAmount Amount of liquidTokens to deposit\r\n     * @return Amount of pTokens to mint/unlock\r\n     */\r\n    function calculateEnter(\r\n        uint256 liquidAssets,\r\n        uint256 debtCommitments,\r\n        uint256 lAmount\r\n    ) public view returns (uint256) {\r\n        uint256 fullLiquidity = liquidAssets.add(debtCommitments);\r\n        // sub(1) fixes rounding issue: imagine\r\n        // - curveFunction(fullLiquidity.add(lAmount)) has exacly correct value\r\n        // - curveFunction(fullLiquidity) - rounded 1 wei down\r\n        // In this case user may receive 1 wei more, so we need to remove this 1 wei\r\n        // which overwise causes troubles on Exit\r\n        return curveFunction(fullLiquidity.add(lAmount)).sub(curveFunction(fullLiquidity)).sub(1);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * dx = f(L) - f(L - Whidraw)\r\n     * L - L is the volume of liquid assets in Pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens to withdraw (full: sum of withdrawU and withdrawP)\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExit(\r\n        uint256 liquidAssets,\r\n        uint256 lAmount\r\n    ) public view returns (uint256) {\r\n        uint256 fL = curveFunction(liquidAssets);\r\n        uint256 fLW = curveFunction(liquidAssets.sub(lAmount));\r\n        return fL.sub(fLW);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of liquid tokens one can withdraw from the pool when pTokens are burned/locked\r\n     * Withdraw = L-g(x-dx)\r\n     * x = f(L)\r\n     * L - L is the volume of liquid assets in Pool\r\n     * dx - amount of pTokens taken from user\r\n     * Withdraw - amount of liquid token which should be sent to user\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     * @return Amount of liquid tokens to withdraw\r\n     */\r\n    function calculateExitInverse(\r\n        uint256 liquidAssets,\r\n        uint256 pAmount\r\n    ) public view returns (uint256) {\r\n        uint256 x = curveFunction(liquidAssets);\r\n        uint256 pdiff = x.sub(pAmount);\r\n        uint256 ldiff = inverseCurveFunction(pdiff);\r\n        assert(liquidAssets >= ldiff);\r\n        return liquidAssets.sub(ldiff);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates value of Bonding Curve at a point s\r\n     * @param s Point to calculate curve\r\n     * @return Value of curve at s\r\n     */\r\n    function curveFunction(uint256 s) public view returns(uint256){\r\n        return curve(curveA, curveB, s);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates inversed value of Bonding Curve at a point x\r\n     * @param x Point to calculate curve\r\n     * @return Value of curve at s\r\n     */\r\n    function inverseCurveFunction(uint256 x) public view returns(uint256){\r\n        return inverseCurve(curveA, curveB, x);\r\n    }\r\n    \r\n    /**\r\n     * @notice Set bonding curve params\r\n     * @dev param values should be multiplied to FIX\r\n     */\r\n    function _setCurveParams(uint256 _curveA, uint256 _curveB) internal {\r\n        require(_curveB != 0, \"BondingCurve: _curveB should not be 0\");\r\n        curveA = _curveA;\r\n        curveB = _curveB;\r\n    }\r\n\r\n   /**\r\n     * @notice Bonding Curve function\r\n     * Defined as: f(S) = [-a+sqrt(a^2+4bS)]/2, a>0, b>0\r\n     * Fixed for Solidity as: curve(S) = (-(10^18) * a + sqrt((10^36) * (a^2) + 4 * (10^18) * b * S)) / 2\r\n     * @param a Constant which defines curve\r\n     * @param b Constant which defines curve\r\n     * @param s Point used to calculate curve\r\n     * @return Value of curve at point s\r\n     */\r\n    function curve(uint256 a, uint256 b, uint256 s) private pure returns(uint256){\r\n        //uint256 d = FIX2 * (a*a) + 4 * FIX * b * s;\r\n        //return (d.sqrt() - FIX*a)/2;\r\n        // uint256 d = FIX2.mul(a).mul(a).add(FIX.mul(4).mul(b).mul(s));\r\n        // return d.sqrt().sub(FIX.mul(a)).div(2);\r\n        uint256 d = a.mul(a).add(b.mul(4).mul(s));\r\n        return d.sqrt().sub(a).div(2);\r\n    }\r\n\r\n    /**\r\n     * @notice Bonding Curve function\r\n     * S = g(x)=(x^2+ax)/b\r\n     */\r\n    function inverseCurve(uint256 a, uint256 b, uint256 x) private pure returns(uint256){\r\n        //return (x*x + FIX*a*x)/FIX*b;\r\n        //return x.mul(x).add(FIX.mul(a).mul(x)).div(FIX.mul(b));\r\n        return x.mul(x).add(a.mul(x)).div(b);\r\n    }\r\n\r\n}\r\n\r\ncontract CurveModule is Module, ICurveModule, BondingCurve {\r\n    uint256 private constant DEFAULT_CURVE_A = 1*FIX;\r\n    uint256 private constant DEFAULT_CURVE_B = 1*FIX;\r\n\r\n    uint256 private constant DEFAULT_WITHDRAW_FEE_PERCENT = 0; //0 used for start, normal will be 5\r\n    uint256 public constant PERCENT_DIVIDER = 100;\r\n\r\n    uint256 public withdrawFeePercent;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        BondingCurve.initialize(DEFAULT_CURVE_A, DEFAULT_CURVE_B);\r\n        setWithdrawFee(DEFAULT_WITHDRAW_FEE_PERCENT);\r\n    }\r\n\r\n    /**\r\n     * @notice Set withdraw fee\r\n     * @param _withdrawFeePercent Withdraw fee, stored as a percent (multiplied by PERCENT_DIVIDER)\r\n     */\r\n    function setWithdrawFee(uint256 _withdrawFeePercent) public onlyOwner {\r\n        require(_withdrawFeePercent <= PERCENT_DIVIDER, \"CurveModule: _withdrawFeePercent is too high\");\r\n        withdrawFeePercent = _withdrawFeePercent;\r\n    }\r\n\r\n    function setCurveParams(uint256 _curveA, uint256 _curveB) public onlyOwner {\r\n        _setCurveParams(_curveA, _curveB);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of liquid tokens one can withdraw from the pool when pTokens are burned/locked\r\n     * Withdraw = L-g(x-dx)\r\n     * x = f(L)\r\n     * dx - amount of pTokens taken from user\r\n     * Withdraw: total amount of liquid tokens to withdraw.\r\n     * WithdrawU = Withdraw*(1-d) : amount of liquid tokens which should be sent to user\r\n     * WithdrawP = Withdraw*d     : amount of liquid tokens which should be sent to the pool owners.\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     * @return Amount of liquid tokens to withdraw: total, for user, for pool owners\r\n     */\r\n    function calculateExitInverseWithFee(\r\n        uint256 liquidAssets,\r\n        uint256 pAmount\r\n    ) public view returns (uint256 withdraw, uint256 withdrawU, uint256 withdrawP) {\r\n        withdraw = BondingCurve.calculateExitInverse(liquidAssets, pAmount);\r\n        //withdrawU = withdraw*(1*PERCENT_DIVIDER-withdrawFeePercent)/PERCENT_DIVIDER;\r\n        //withdrawP = withdraw*withdrawFeePercent/PERCENT_DIVIDER;\r\n        withdrawP = withdraw.mul(withdrawFeePercent).div(PERCENT_DIVIDER);\r\n        withdrawU = withdraw.sub(withdrawP);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee = withdrawU\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExitWithFee(uint256 liquidAssets, uint256 lAmount) public view returns(uint256){\r\n        uint256 withdraw = lAmount.mul(PERCENT_DIVIDER).div(PERCENT_DIVIDER.sub(withdrawFeePercent));\r\n        return calculateExit(liquidAssets, withdraw);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates lAmount to be taken as fee upon withdraw\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee\r\n     * @return Amount of liquid tokens which will be additionally taken as a pool fee\r\n     */\r\n    function calculateExitFee(uint256 lAmount) public view returns(uint256){\r\n        return lAmount.mul(withdrawFeePercent).div(PERCENT_DIVIDER.sub(withdrawFeePercent));        \r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_ACCESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_CURVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_FUNDS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LIQUIDITY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_LIMTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_PROPOSALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_PTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCommitments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculateEnter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculateExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculateExitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"calculateExitInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"calculateExitInverseWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawU\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawP\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculateExitWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"curveFunction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curveB\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"inverseCurveFunction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curveB\",\"type\":\"uint256\"}],\"name\":\"setCurveParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePercent\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://679a2f9a8fadac07fa10f934aa476c4d207e3c7f6fba5b871280c70b74338a79"}]}