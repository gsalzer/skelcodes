{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * \r\n * Adapted from UniPower's Liquidity Vault for European Coin Alliance ECA \r\n * http://www.ecacoin.net\r\n * \r\n * Simple smart contract to decentralize the uniswap liquidity, providing proof of liquidity for a minimum of 180 days.\r\n * For more info visit: https://unipower.network\r\n * \r\n */\r\ncontract LiquidityVault {\r\n   //dual Vault\r\n   \r\n    //eca token. this vault holds team and excess supply. Starts with 300K and releases 1% per week for a minimum of 6 months \r\n    ERC20 constant ecaToken = ERC20(0xfab25D4469444f28023075Db5932497D70094601);\r\n\t//uniswap\r\n    ERC20 constant liquidityToken = ERC20(0x240c7C1E5bB1F9BD9DEE988BB1611E56872dc7d9);\r\n    \r\n    //address blobby = msg.sender; thank you mr blobby :)\r\n    \r\n    address owner = msg.sender;\r\n    //uniswap\r\n    uint256 public lastTradingFeeDistribution;\r\n    uint256 public sixMonthLock;\r\n    address public tokenRecipient;\r\n    \r\n    \r\n \r\n    function distributeWeekly(address recipient) external {\r\n        //liquidityBalance\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        //ecaBalance\r\n        uint256 ecaBalance = liquidityToken.balanceOf(address(this));\r\n        require(lastTradingFeeDistribution + 7 days < now); // Max once a week\r\n        require(msg.sender == owner);\r\n        //1% of liquidity\r\n        liquidityToken.transfer(recipient, (liquidityBalance / 100));\r\n        //1% of eca\r\n        ecaToken.transfer(recipient, (ecaBalance / 100));\r\n        \r\n        lastTradingFeeDistribution = now;\r\n    } \r\n    \r\n    \r\n \r\n //start the lock for six months minimum\r\n    function startLiquiditySixMonthLock(address recipient) external {\r\n        require(msg.sender == owner);\r\n        //lock for 6 months, only 1% withdrawal per week\r\n        sixMonthLock = now + 180 days;\r\n        tokenRecipient = recipient;\r\n    }\r\n    \r\n    \r\n    //six months passed? can withdraw remaining balances \r\n    function sendRemainingTokensIfSixMonthsPassed() external {\r\n        require(msg.sender == owner);\r\n        require(tokenRecipient != address(0));\r\n        require(now > sixMonthLock);\r\n        \r\n        //liquidity\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(tokenRecipient, liquidityBalance);\r\n        \r\n        //eca\r\n        uint256 ecaBalance = ecaToken.balanceOf(address(this));\r\n        ecaToken.transfer(tokenRecipient, ecaBalance);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function getOwner() public view returns (address){\r\n        return owner;\r\n    }\r\n    function getLiquidityBalance() public view returns (uint256){\r\n        return liquidityToken.balanceOf(address(this));\r\n    }\r\n    function getEcaBalance() public view returns (uint256){\r\n        return ecaToken.balanceOf(address(this));\r\n    }\r\n    \r\n}\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"distributeWeekly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEcaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRemainingTokensIfSixMonthsPassed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sixMonthLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquiditySixMonthLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquidityVault","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://278f34e618b88d4f467e79ebd47de68e9637f19843140a8fcbfeebe018b4fdeb"}]}