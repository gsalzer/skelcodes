{"status":"1","message":"OK","result":[{"SourceCode":"// Winding Tree\r\n// Web:     https://windingtree.com/\r\n// Discord: https://discord.gg/5Q3qde6Gr9\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165Checker.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function _supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return _supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!_supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with the `supportsERC165` method in this library.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // success determines whether the staticcall succeeded and result determines\r\n        // whether the contract at account indicates support of _interfaceId\r\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\r\n\r\n        return (success && result);\r\n    }\r\n\r\n    /**\r\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return success true if the STATICCALL succeeded, false otherwise\r\n     * @return result true if the STATICCALL succeeded and the contract at account\r\n     * indicates support of the interface with identifier interfaceId, false otherwise\r\n     */\r\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n        private\r\n        view\r\n        returns (bool, bool)\r\n    {\r\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall.gas(30000)(encodedParams);\r\n        if (result.length < 32) return (false, false);\r\n        return (success, abi.decode(result, (bool)));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @windingtree/org.id/contracts/OrgIdInterface.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n/**\r\n * @title ORGiD Registry Smart Contract Interface\r\n */\r\ncontract OrgIdInterface {\r\n\r\n    /**\r\n     * @dev Create organization\r\n     * @param solt Unique hash required for identifier creation\r\n     * @param orgJsonHash ORG.JSON's keccak256 hash\r\n     * @param orgJsonUri ORG.JSON URI (stored off-chain)\r\n     * @param orgJsonUriBackup1 ORG.JSON URI backup (stored off-chain)\r\n     * @param orgJsonUriBackup2 ORG.JSON URI backup (stored off-chain)\r\n     * @return {\r\n         \"id\": \"ORGiD byte32 hash\"\r\n     }\r\n     */\r\n    function createOrganization(\r\n        bytes32 solt,\r\n        bytes32 orgJsonHash,\r\n        string calldata orgJsonUri,\r\n        string calldata orgJsonUriBackup1,\r\n        string calldata orgJsonUriBackup2\r\n    ) external returns (bytes32 id);\r\n\r\n    /**\r\n     * @dev Create organizational unit\r\n     * @param solt Unique hash required for identifier creation\r\n     * @param parentOrgId Parent ORGiD hash\r\n     * @param director Unit director address\r\n     * @param orgJsonHash ORG.JSON keccak256 hash\r\n     * @param orgJsonUri Unit ORG.JSON URI\r\n     * @param orgJsonUriBackup1 Unit ORG.JSON URI backup\r\n     * @param orgJsonUriBackup2 Unit ORG.JSON URI backup\r\n     */\r\n    function createUnit(\r\n        bytes32 solt,\r\n        bytes32 parentOrgId,\r\n        address director,\r\n        bytes32 orgJsonHash,\r\n        string calldata orgJsonUri,\r\n        string calldata orgJsonUriBackup1,\r\n        string calldata orgJsonUriBackup2\r\n    )\r\n        external\r\n        returns (bytes32 newUnitOrgId);\r\n\r\n    /**\r\n     * @dev Toggle ORGiD's active/inactive state\r\n     * @param orgId ORGiD hash\r\n     */\r\n    function toggleActiveState(bytes32 orgId) external;\r\n\r\n    /**\r\n     * @dev Accept director role\r\n     * @param orgId Unit's ORGiD hash\r\n     */\r\n    function acceptDirectorship(bytes32 orgId) external;\r\n\r\n    /**\r\n     * @dev Transfer director role\r\n     * @param orgId Unit's ORGiD hash\r\n     * @param newDirector New director's address\r\n     */\r\n    function transferDirectorship(\r\n        bytes32 orgId,\r\n        address newDirector\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Unit directorship renounce\r\n     * @param orgId Unit's ORGiD hash\r\n     */\r\n    function renounceDirectorship(bytes32 orgId)\r\n        external;\r\n\r\n    /**\r\n     * @dev Ownership transfer\r\n     * @param orgId ORGiD hash\r\n     * @param newOwner New owner's address\r\n     */\r\n    function transferOrganizationOwnership(\r\n        bytes32 orgId,\r\n        address newOwner\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Shorthand method to change ORG.JSON URI and hash at once\r\n     * @param orgId ORGiD hash\r\n     * @param orgJsonHash New ORG.JSON's keccak256 hash\r\n     * @param orgJsonUri New ORG.JSON URI\r\n     * @param orgJsonUriBackup1 New ORG.JSON URI backup\r\n     * @param orgJsonUriBackup2 New ORG.JSON URI backup\r\n     */\r\n    function setOrgJson(\r\n        bytes32 orgId,\r\n        bytes32 orgJsonHash,\r\n        string calldata orgJsonUri,\r\n        string calldata orgJsonUriBackup1,\r\n        string calldata orgJsonUriBackup2\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Get all active organizations' ORGiD hashes\r\n     * @param includeInactive Includes not active units into response\r\n     * @return {\r\n         \"organizationsList\": \"Array of all active organizations' ORGiD hashes\"\r\n     }\r\n     */\r\n    function getOrganizations(bool includeInactive)\r\n        external\r\n        view\r\n        returns (bytes32[] memory organizationsList);\r\n\r\n    /**\r\n     * @dev Get organization or unit's info by ORGiD hash\r\n     * @param _orgId ORGiD hash\r\n     * @dev Return parameters marked by (*) are only applicable to units\r\n     * @return {\r\n         \"exists\": \"Returns `false` if ORGiD doesn't exist\",\r\n         \"orgId\": \"ORGiD hash\",\r\n         \"orgJsonHash\": \"ORG.JSON keccak256 hash\",\r\n         \"orgJsonUri\": \"ORG.JSON URI\",\r\n         \"orgJsonUriBackup1\": \"ORG.JSON URI backup\",\r\n         \"orgJsonUriBackup2\": \"ORG.JSON URI backup\",\r\n         \"parentOrgId\": \"Parent ORGiD (*)\",\r\n         \"owner\": \"Owner's address\",\r\n         \"director\": \"Unit director's address (*)\",\r\n         \"isActive\": \"Indicates whether ORGiD is active\",\r\n         \"isDirectorshipAccepted\": \"Indicates whether director accepted the role (*)\"\r\n     }\r\n     */\r\n    function getOrganization(bytes32 _orgId)\r\n        external\r\n        view\r\n        returns (\r\n            bool exists,\r\n            bytes32 orgId,\r\n            bytes32 orgJsonHash,\r\n            string memory orgJsonUri,\r\n            string memory orgJsonUriBackup1,\r\n            string memory orgJsonUriBackup2,\r\n            bytes32 parentOrgId,\r\n            address owner,\r\n            address director,\r\n            bool isActive,\r\n            bool isDirectorshipAccepted\r\n        );\r\n\r\n    /**\r\n     * @dev Get all active organizational units of a particular ORGiD\r\n     * @param parentOrgId Parent ORGiD hash\r\n     * @param includeInactive Includes not active units into response\r\n     * @return {\r\n         \"organizationsList\": \"Array of ORGiD hashes of active organizational units\"\r\n     }\r\n     */\r\n    function getUnits(bytes32 parentOrgId, bool includeInactive)\r\n        external\r\n        view\r\n        returns (bytes32[] memory);\r\n}\r\n\r\n// File: contracts/LifDepositInterface.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n/**\r\n * @title LifDeposit contract interface\r\n * @dev A contract that manages deposits in Lif tokens \r\n */\r\ncontract LifDepositInterface {\r\n\r\n    /**\r\n     * @dev Returns Lif token address\r\n     * @return {\r\n         \"lifToken\": \"Address of the Lif token\"\r\n     }\r\n     */\r\n    function getLifTokenAddress() external view returns (address lifToken);\r\n\r\n    /**\r\n     * @dev Returns withdrawDelay value\r\n     * @return {\r\n         \"delay\": \"Delay time in seconds before the requested withdrawal will be possible\"\r\n     }\r\n     */\r\n    function getWithdrawDelay() external view returns (uint256 delay);\r\n\r\n    /**\r\n     * @dev Changing withdrawDelay value\r\n     * @param _withdrawDelay New withdrawDelay value in seconds\r\n     */\r\n    function setWithdrawDelay(uint256 _withdrawDelay) external;\r\n\r\n    /**\r\n     * @dev Makes deposit of Lif tokens\r\n     * @param organization The organization Id\r\n     * @param value The value to be deposited\r\n     */\r\n    function addDeposit(\r\n        bytes32 organization,\r\n        uint256 value\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Submits withdrawal request\r\n     * @param organization The organization Id\r\n     * @param value The value to withdraw\r\n     */\r\n    function submitWithdrawalRequest(\r\n        bytes32 organization,\r\n        uint256 value\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns information about deposit withdrawal request\r\n     * @param organization The organization Id\r\n     * @return {\r\n         \"exists\": \"The request existence flag\",\r\n         \"value\": \"Deposit withdrawal value\",\r\n         \"withdrawTime\": \"Withraw time on seconds\"\r\n     }\r\n     */\r\n    function getWithdrawalRequest(bytes32 organization)\r\n        external\r\n        view \r\n        returns (\r\n            bool exists,\r\n            uint256 value,\r\n            uint256 withdrawTime\r\n        );\r\n\r\n    /**\r\n     * @dev Trunsfers deposited tokens to the sender\r\n     * @param organization The organization OrgId\r\n     */\r\n    function withdrawDeposit(\r\n        bytes32 organization\r\n    ) external;\r\n}\r\n\r\n// File: contracts/LifDeposit.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title LifDeposit contract\r\n * @dev A contract that manages deposits in Lif tokens\r\n */\r\ncontract LifDeposit is LifDepositInterface, Ownable, ERC165, Initializable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev Withdrawal request structure\r\n    struct WithdrawalRequest {\r\n        uint256 value;\r\n        uint256 withdrawTime;\r\n    }\r\n\r\n    /// @dev OrgId instance\r\n    OrgIdInterface internal orgId;\r\n\r\n    /// @dev Lif token instance\r\n    IERC20 internal lif;\r\n\r\n    /// @dev Delay in seconds between withdrawal request and withdrawal\r\n    uint256 internal withdrawDelay;\r\n\r\n    /// @dev Mapped list of deposits\r\n    mapping (bytes32 => uint256) internal deposits;\r\n\r\n    /// @dev Deposits wiwdrawal requests\r\n    mapping (bytes32 => WithdrawalRequest) internal withdrawalRequests;\r\n\r\n    /**\r\n     * @dev Event emitted when Lif deposit has been added\r\n     */\r\n    event LifDepositAdded(\r\n        bytes32 indexed organization,\r\n        address indexed sender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted when withdrawDelay has been changed\r\n     */\r\n    event WithdrawDelayChanged(\r\n        uint256 previousWithdrawDelay,\r\n        uint256 newWithdrawDelay\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted when withdrawal requested has been sent\r\n     */\r\n    event WithdrawalRequested(\r\n        bytes32 indexed organization,\r\n        address indexed sender,\r\n        uint256 value,\r\n        uint256 withdrawTime\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted when deposit has been withdrawn\r\n     */\r\n    event DepositWithdrawn(\r\n        bytes32 indexed organization,\r\n        address indexed sender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner or entity director.\r\n     */\r\n    modifier onlyOrganizationOwnerOrDirector(bytes32 organization) {\r\n        (\r\n            bool exists,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            address organizationOwner,\r\n            address organizationDirector,\r\n            ,\r\n            \r\n        ) = orgId.getOrganization(organization);\r\n        require(exists, \"LifDeposit: Organization not found\");\r\n        require(\r\n            organizationOwner == msg.sender || \r\n            organizationDirector == msg.sender, \r\n            \"LifDeposit: action not authorized (must be owner or director)\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializer for upgradeable contracts\r\n     * @param __owner The address of the contract owner\r\n     * @param _orgId Address of the OrgId contract\r\n     * @param _lif Address of the Lif token\r\n     */\r\n    function initialize(\r\n        address payable __owner,\r\n        address _orgId,\r\n        address _lif\r\n    ) public initializer {\r\n        _transferOwnership(__owner);\r\n        require(\r\n            ERC165Checker._supportsInterface(_orgId, 0x0f4893ef),\r\n            \"LifDeposit: OrgId contract must support ORGiD interface\"\r\n        );\r\n        orgId = OrgIdInterface(_orgId);\r\n        lif = IERC20(_lif);\r\n        setInterfaces(); \r\n    }\r\n\r\n    /**\r\n     * @dev Returns Lif token address\r\n     * @return {\r\n         \"lifToken\": \"Address of the Lif token\"\r\n     }\r\n     */\r\n    function getLifTokenAddress() external view returns (address lifToken) {\r\n        lifToken = address(lif);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns withdrawDelay value\r\n     * @return {\r\n         \"delay\": \"Delay time in seconds before the requested withdrawal will be possible\"\r\n     }\r\n     */\r\n    function getWithdrawDelay() external view returns (uint256 delay) {\r\n        delay = withdrawDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Changing withdrawDelay value\r\n     * @param _withdrawDelay New withdrawDelay value in seconds\r\n     */\r\n    function setWithdrawDelay(uint256 _withdrawDelay) external onlyOwner {\r\n        emit WithdrawDelayChanged(withdrawDelay, _withdrawDelay);\r\n        withdrawDelay = _withdrawDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Makes deposit of Lif tokens\r\n     * @param organization The organization OrgId\r\n     * @param value The value to be deposited\r\n     */\r\n    function addDeposit(\r\n        bytes32 organization,\r\n        uint256 value\r\n    )\r\n        external \r\n        onlyOrganizationOwnerOrDirector(organization)\r\n    {\r\n        require(value > 0, \"LifDeposit: Invalid deposit value\");\r\n        lif.safeTransferFrom(msg.sender, address(this), value);\r\n        deposits[organization] = deposits[organization].add(value);\r\n        emit LifDepositAdded(organization, msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Submits withdrawal request\r\n     * @param organization The organization OrgId\r\n     * @param value The value to withdraw\r\n     */\r\n    function submitWithdrawalRequest(\r\n        bytes32 organization,\r\n        uint256 value\r\n    )\r\n        external \r\n        onlyOrganizationOwnerOrDirector(organization)\r\n    {\r\n        require(value > 0, \"LifDeposit: Invalid withdrawal value\");\r\n        require(\r\n            value <= deposits[organization],\r\n            \"LifDeposit: Insufficient balance\"\r\n        );\r\n        uint256 withdrawTime = time().add(withdrawDelay);\r\n        withdrawalRequests[organization] = WithdrawalRequest(value, withdrawTime);\r\n        emit WithdrawalRequested(organization, msg.sender, value, withdrawTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns information about deposit withdrawal request\r\n     * @param organization The organization Id\r\n     * @return {\r\n         \"exists\": \"The request existence flag\",\r\n         \"value\": \"Deposit withdrawal value\",\r\n         \"withdrawTime\": \"Withraw time on seconds\"\r\n     }\r\n     */\r\n    function getWithdrawalRequest(bytes32 organization)\r\n        external\r\n        view \r\n        returns (\r\n            bool exists,\r\n            uint256 value,\r\n            uint256 withdrawTime\r\n        )\r\n    {\r\n        exists = \r\n            organization != bytes32(0) &&\r\n            deposits[organization] > 0 &&\r\n            withdrawalRequests[organization].value != 0;\r\n        value = withdrawalRequests[organization].value;\r\n        withdrawTime = withdrawalRequests[organization].withdrawTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns deposit value of the organization\r\n     * @param organization The organization Id\r\n     * @return {\r\n         \"balance\": \"Deposit value\"\r\n     }\r\n     */\r\n    function balanceOf(bytes32 organization)\r\n        external\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        balance = deposits[organization];\r\n    }\r\n\r\n    /**\r\n     * @dev Trunsfers deposited tokens to the sender\r\n     * @param organization The organization OrgId\r\n     */\r\n    function withdrawDeposit(\r\n        bytes32 organization\r\n    )\r\n        external \r\n        onlyOrganizationOwnerOrDirector(organization)\r\n    {\r\n        require(\r\n            withdrawalRequests[organization].value != 0,\r\n            \"LifDeposit: Withdrawal request not found\"\r\n        );\r\n        require(\r\n            withdrawalRequests[organization].withdrawTime <= time(),\r\n            \"LifDeposit: Withdrawal request delay period not passed\"\r\n        );\r\n        uint256 withdrawalValue = withdrawalRequests[organization].value;\r\n        deposits[organization] = deposits[organization].sub(withdrawalValue);\r\n        delete withdrawalRequests[organization];\r\n        lif.safeTransfer(msg.sender, withdrawalValue);\r\n        emit DepositWithdrawn(organization, msg.sender, withdrawalValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the list of contract interfaces supported\r\n     */\r\n    function setInterfaces() public {\r\n        LifDepositInterface ldp;\r\n        Ownable own;\r\n        bytes4[3] memory interfaceIds = [\r\n            // ERC165 interface: 0x01ffc9a7\r\n            bytes4(0x01ffc9a7),\r\n\r\n            // ownable interface: 0x7f5828d0\r\n            own.owner.selector ^ \r\n            own.transferOwnership.selector, \r\n\r\n            // Lif deposit interface: 0xe936be58\r\n            ldp.getLifTokenAddress.selector ^\r\n            ldp.getWithdrawDelay.selector ^\r\n            ldp.setWithdrawDelay.selector ^\r\n            ldp.addDeposit.selector ^\r\n            ldp.submitWithdrawalRequest.selector ^\r\n            ldp.getWithdrawalRequest.selector ^\r\n            ldp.withdrawDeposit.selector\r\n        ];\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            _registerInterface(interfaceIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get current time\r\n     * This function can be overriden for testing purposes\r\n     * @return uint256 Current block time\r\n     */\r\n    function time() internal view returns (uint256) {\r\n        return now;// solhint-disable-line not-rely-on-time\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LifDepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousWithdrawDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawDelay\",\"type\":\"uint256\"}],\"name\":\"WithdrawDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLifTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lifToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawalRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orgId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lif\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setInterfaces\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawDelay\",\"type\":\"uint256\"}],\"name\":\"setWithdrawDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawalRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"organization\",\"type\":\"bytes32\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LifDeposit","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"constantinople","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ef9d992eee7a48b9fcbb6e1bf245e40267d02b3057ac533d62f9e13acdfeaaa0"}]}