{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/DemaxConvert.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n// import 'contracts/libraries/TransferHelper.sol';\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ncontract DemaxConvert {\r\n    event ConvertETHForBNB(address indexed user, uint amount);\r\n    event ConvertTokenForBNB(address indexed user, address token, uint amount);\r\n    event CollectETH(uint amount);\r\n    event CollectToken(address token, uint amount);\r\n    \r\n    address public owner;\r\n    address public wallet;\r\n    \r\n    address[] public allTokens;\r\n    \r\n    mapping (address => bool) public users;\r\n    \r\n    mapping (address => uint) public tokenLimits;\r\n    \r\n    constructor (address _wallet) public {\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n    }\r\n    \r\n    function changeWallet(address _wallet) external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        wallet = _wallet;\r\n    }\r\n    \r\n    function enableToken(address _token, uint _limit) external{\r\n        require(msg.sender == owner, \"FORBIDDEN\");    \r\n        tokenLimits[_token] = _limit;\r\n        \r\n        bool isAdd = false;\r\n        for(uint i = 0;i < allTokens.length;i++) {\r\n            if(allTokens[i] == _token) {\r\n                isAdd = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(!isAdd) {\r\n            allTokens.push(_token);\r\n        }\r\n    }\r\n    \r\n    function validTokens() external view returns (address[] memory) {\r\n        uint count;\r\n        for (uint i; i < allTokens.length; i++) {\r\n            if (tokenLimits[allTokens[i]] > 0) {\r\n                count++;\r\n            }\r\n        }\r\n        address[] memory res = new address[](count);\r\n        uint index = 0;\r\n        for (uint i; i < allTokens.length; i++) {\r\n            if (tokenLimits[allTokens[i]] > 0) {\r\n                res[index] = allTokens[i];\r\n                index++;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    \r\n    function convertETHForBNB() payable external {\r\n        require(msg.value > 0 && msg.value <= tokenLimits[address(0)], \"INVALID_AMOUNT\");\r\n        require(users[msg.sender] == false, \"ALREADY_CONVERT\");\r\n        users[msg.sender] = true;\r\n        emit ConvertETHForBNB(msg.sender, msg.value);\r\n    }\r\n    \r\n    function convertTokenForBNB(address _token, uint _amount) external {\r\n        require(_amount > 0 && _amount <= tokenLimits[_token], \"INVALID_AMOUNT\");\r\n        require(users[msg.sender] == false, \"ALREADY_CONVERT\");\r\n        users[msg.sender] = true;\r\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\r\n        emit ConvertTokenForBNB(msg.sender, _token, _amount);\r\n    }\r\n    \r\n    function collect() external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        for(uint i = 0;i < allTokens.length;i++) {\r\n            uint balance = IERC20(allTokens[i]).balanceOf(address(this));\r\n            if(balance > 0) {\r\n                TransferHelper.safeTransfer(allTokens[i], wallet, balance);\r\n                emit CollectToken(allTokens[i], balance);\r\n            }\r\n        }\r\n        \r\n        if(address(this).balance > 0) {\r\n            emit CollectETH(address(this).balance);\r\n            TransferHelper.safeTransferETH(wallet, address(this).balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConvertETHForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConvertTokenForBNB\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertETHForBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTokenForBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DemaxConvert","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000038047d9eb4717c5821896853c5af28d04f190094","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70bcb348e4d185a06ae8f2c340f22bdac2c8826ef493e09d904fe1f3ab051682"}]}