{"status":"1","message":"OK","result":[{"SourceCode":"interface ITokensTypeStorage {\r\n  function isRegistred(address _address) external view returns(bool);\r\n\r\n  function getType(address _address) external view returns(bytes32);\r\n\r\n  function isPermittedAddress(address _address) external view returns(bool);\r\n\r\n  function owner() external view returns(address);\r\n\r\n  function addNewTokenType(address _token, string calldata _type) external;\r\n\r\n  function setTokenTypeAsOwner(address _token, string calldata _type) external;\r\n}\r\ninterface IYearnToken {\r\n  function token() external view returns(address);\r\n  function deposit(uint _amount) external;\r\n  function withdraw(uint _shares) external;\r\n  function getPricePerFullShare() external view returns (uint);\r\n}\r\n// For support new Defi protocols\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DefiPortal {\r\n  using SafeMath for uint256;\r\n\r\n  uint public version = 4;\r\n  address constant private ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  // Contract for handle tokens types\r\n  ITokensTypeStorage public tokensTypes;\r\n\r\n  // Enum\r\n  // NOTE: You can add a new type at the end, but DO NOT CHANGE this order\r\n  enum DefiActions { YearnDeposit, YearnWithdraw }\r\n\r\n  constructor(address _tokensTypes) public {\r\n    tokensTypes = ITokensTypeStorage(_tokensTypes);\r\n  }\r\n\r\n  /**\r\n  *\r\n  * if need paybale protocol, in new version of this portal can be added such function\r\n  *\r\n  function callNonPayableProtocol(\r\n    address[] memory tokensToSend,\r\n    uint256[] memory amountsToSend,\r\n    bytes memory _additionalData,\r\n    bytes32[] memory _additionalArgs\r\n  )\r\n   external\r\n   returns(\r\n     string memory eventType,\r\n     address[] memory tokensToReceive,\r\n     uint256[] memory amountsToReceive\r\n  );\r\n  */\r\n\r\n\r\n  // param _additionalArgs[0] require DefiActions type\r\n  function callNonPayableProtocol(\r\n    address[] memory tokensToSend,\r\n    uint256[] memory amountsToSend,\r\n    bytes memory _additionalData,\r\n    bytes32[] memory _additionalArgs\r\n  )\r\n    external\r\n    returns(\r\n      string memory eventType,\r\n      address[] memory tokensToReceive,\r\n      uint256[] memory amountsToReceive\r\n    )\r\n  {\r\n    if(uint(_additionalArgs[0]) == uint(DefiActions.YearnDeposit)){\r\n      (tokensToReceive, amountsToReceive) = _YearnDeposit(\r\n        tokensToSend[0],\r\n        amountsToSend[0],\r\n        _additionalData\r\n      );\r\n      eventType = \"YEARN_DEPOSIT\";\r\n    }\r\n    else if(uint(_additionalArgs[0]) == uint(DefiActions.YearnWithdraw)){\r\n       (tokensToReceive, amountsToReceive) = _YearnWithdraw(\r\n         tokensToSend[0],\r\n         amountsToSend[0],\r\n         _additionalData\r\n        );\r\n       eventType = \"YEARN_WITHDRAW\";\r\n    }\r\n    else{\r\n      revert(\"Unknown DEFI action\");\r\n    }\r\n  }\r\n\r\n  // for new DEFI protocols Exchange portal get value here\r\n  function getValue(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n   public\r\n   view\r\n   returns(uint256)\r\n  {\r\n    return 0;\r\n  }\r\n\r\n\r\n  // param _additionalData require address yTokenAddress, uint256 minReturn\r\n  function _YearnDeposit(\r\n    address tokenAddress,\r\n    uint256 tokenAmount,\r\n    bytes memory _additionalData\r\n  )\r\n    private\r\n    returns(\r\n    address[] memory tokensToReceive,\r\n    uint256[] memory amountsToReceive\r\n  )\r\n  {\r\n    // get yToken instance\r\n    (address yTokenAddress, uint256 minReturn) = abi.decode(_additionalData, (address, uint256));\r\n    IYearnToken yToken = IYearnToken(yTokenAddress);\r\n    // transfer underlying from sender\r\n    _transferFromSenderAndApproveTo(IERC20(tokenAddress), tokenAmount, yTokenAddress);\r\n    // mint yToken\r\n    yToken.deposit(tokenAmount);\r\n    // get received tokens\r\n    uint256 receivedYToken = IERC20(yTokenAddress).balanceOf(address(this));\r\n    // min return check\r\n    require(receivedYToken >= minReturn, \"MIN_RETURN_FAIL\");\r\n    // send yToken to sender\r\n    IERC20(yTokenAddress).transfer(msg.sender, receivedYToken);\r\n    // send remains if there is some remains\r\n    _sendRemains(IERC20(tokenAddress), msg.sender);\r\n    // Update type\r\n    // DEV NOTE don't need mark this tokens as YEARN assets, we can use 1inch ratio\r\n    // for this token as for CRYPTOCURRENCY\r\n    tokensTypes.addNewTokenType(yTokenAddress, \"CRYPTOCURRENCY\");\r\n    // return data\r\n    tokensToReceive = new address[](1);\r\n    tokensToReceive[0] = yTokenAddress;\r\n    amountsToReceive = new uint256[](1);\r\n    amountsToReceive[0] = receivedYToken;\r\n  }\r\n\r\n\r\n  // param _additionalData require  uint256 minReturn\r\n  function _YearnWithdraw(\r\n    address yTokenAddress,\r\n    uint256 sharesAmount,\r\n    bytes memory _additionalData\r\n  )\r\n    private\r\n    returns(\r\n    address[] memory tokensToReceive,\r\n    uint256[] memory amountsToReceive\r\n    )\r\n  {\r\n    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\r\n    IYearnToken yToken = IYearnToken(yTokenAddress);\r\n    // transfer underlying from sender\r\n    _transferFromSenderAndApproveTo(IERC20(yTokenAddress), sharesAmount, yTokenAddress);\r\n    // mint yToken\r\n    yToken.withdraw(sharesAmount);\r\n    // get underlying address\r\n    address underlyingToken = yToken.token();\r\n    // get received tokens\r\n    uint256 received = IERC20(underlyingToken).balanceOf(address(this));\r\n    // min return check\r\n    require(received >= minReturn, \"MIN_RETURN_FAIL\");\r\n    // send underlying to sender\r\n    IERC20(underlyingToken).transfer(msg.sender, received);\r\n    // send remains if there is some remains\r\n    _sendRemains(IERC20(yTokenAddress), msg.sender);\r\n    // return data\r\n    tokensToReceive = new address[](1);\r\n    tokensToReceive[0] = underlyingToken;\r\n    amountsToReceive = new uint256[](1);\r\n    amountsToReceive[0] = received;\r\n  }\r\n\r\n\r\n  // Facilitates for send source remains\r\n  function _sendRemains(IERC20 _source, address _receiver) private {\r\n    // After the trade, any _source that exchangePortal holds will be sent back to msg.sender\r\n    uint256 endAmount = (_source == IERC20(ETH_TOKEN_ADDRESS))\r\n    ? address(this).balance\r\n    : _source.balanceOf(address(this));\r\n\r\n    // Check if we hold a positive amount of _source\r\n    if (endAmount > 0) {\r\n      if (_source == IERC20(ETH_TOKEN_ADDRESS)) {\r\n        payable(_receiver).transfer(endAmount);\r\n      } else {\r\n        _source.transfer(_receiver, endAmount);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Transfers tokens to this contract and approves them to another address\r\n  *\r\n  * @param _source          Token to transfer and approve\r\n  * @param _sourceAmount    The amount to transfer and approve (in _source token)\r\n  * @param _to              Address to approve to\r\n  */\r\n  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\r\n    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\r\n    // reset previos approve because some tokens require allowance 0\r\n    _source.approve(_to, 0);\r\n    // approve\r\n    _source.approve(_to, _sourceAmount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokensTypes\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToSend\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToSend\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_additionalArgs\",\"type\":\"bytes32[]\"}],\"name\":\"callNonPayableProtocol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"eventType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"tokensToReceive\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToReceive\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTypes\",\"outputs\":[{\"internalType\":\"contract ITokensTypeStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DefiPortal","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000037ff4bc9a425f37d3af95662c9d88a88d05f3417","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85f2a7e7750fa2d0bb1762ce41908c7f20b6d46c2b424f4690912171acab14ba"}]}