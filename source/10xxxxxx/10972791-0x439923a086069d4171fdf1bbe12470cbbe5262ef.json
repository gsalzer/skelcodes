{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface USDT {\r\n    function approve(address guy, uint256 wad) external;\r\n\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router2.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Router2 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n// File: contracts/PickleJar.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// PickleJAR contract helps you swap your UNIV2 LP tokens around,\r\n// using uniswap's permit functionality, so only 1 tx is needed\r\n// e.g. from ETH/USDC LP tokens to ETH/USDT LP tokens\r\ncontract PickleJar {\r\n    IUniswapV2Router2 router = IUniswapV2Router2(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    function convertWETHPair(\r\n        address fromLP,\r\n        address toLP,\r\n        uint256 value\r\n    ) public {\r\n        IUniswapV2Pair fromPair = IUniswapV2Pair(fromLP);\r\n        IUniswapV2Pair toPair = IUniswapV2Pair(toLP);\r\n\r\n        address weth = router.WETH();\r\n\r\n        // Only for WETH/<TOKEN> pairs\r\n        if (!(fromPair.token0() == weth || fromPair.token1() == weth)) {\r\n            revert(\"!eth-from\");\r\n        }\r\n        if (!(toPair.token0() == weth || toPair.token1() == weth)) {\r\n            revert(\"!eth-to\");\r\n        }\r\n\r\n        // Get non-eth token from pairs\r\n        address _from = fromPair.token0() != weth\r\n            ? fromPair.token0()\r\n            : fromPair.token1();\r\n\r\n        address _to = toPair.token0() != weth\r\n            ? toPair.token0()\r\n            : toPair.token1();\r\n\r\n        // Transfer\r\n        IUniswapV2ERC20(fromLP).transferFrom(msg.sender, address(this), value);\r\n\r\n        // Remove liquidity\r\n        IUniswapV2ERC20(fromLP).approve(address(router), value);\r\n        router.removeLiquidity(\r\n            fromPair.token0(),\r\n            fromPair.token1(),\r\n            value,\r\n            0,\r\n            0,\r\n            address(this),\r\n            now + 60\r\n        );\r\n\r\n        // Convert to target token\r\n        address[] memory path = new address[](3);\r\n        path[0] = _from;\r\n        path[1] = weth;\r\n        path[2] = _to;\r\n\r\n        if (_from == usdt) {\r\n            USDT(_from).approve(address(router), uint256(-1));\r\n        } else {\r\n            IUniswapV2ERC20(_from).approve(address(router), uint256(-1));\r\n        }\r\n        router.swapExactTokensForTokens(\r\n            IUniswapV2ERC20(_from).balanceOf(address(this)),\r\n            0,\r\n            path,\r\n            address(this),\r\n            now + 60\r\n        );\r\n\r\n        // Supply liquidity\r\n        IUniswapV2ERC20(weth).approve(address(router), uint256(-1));\r\n\r\n        if (_to == usdt) {\r\n            USDT(_to).approve(address(router), uint256(-1));\r\n        } else {\r\n            IUniswapV2ERC20(_to).approve(address(router), uint256(-1));\r\n        }\r\n        router.addLiquidity(\r\n            weth,\r\n            _to,\r\n            IUniswapV2ERC20(weth).balanceOf(address(this)),\r\n            IUniswapV2ERC20(_to).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            now + 60\r\n        );\r\n\r\n        // Refund sender any remaining tokens\r\n        IUniswapV2ERC20(weth).transfer(\r\n            msg.sender,\r\n            IUniswapV2ERC20(weth).balanceOf(address(this))\r\n        );\r\n\r\n        if (_to == usdt) {\r\n            USDT(_to).transfer(\r\n                msg.sender,\r\n                IUniswapV2ERC20(_to).balanceOf(address(this))\r\n            );\r\n        } else {\r\n            IUniswapV2ERC20(_to).transfer(\r\n                msg.sender,\r\n                IUniswapV2ERC20(_to).balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    function convertWETHPairWithPermit(\r\n        address fromLP,\r\n        address toLP,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        // Permit\r\n        IUniswapV2ERC20(fromLP).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        convertWETHPair(fromLP, toLP, value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"convertWETHPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"convertWETHPairWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PickleJar","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://360c5a7b12b0d9c9ab10dafd250254356896c2ae32ec372d13f78de06aa6ced7"}]}