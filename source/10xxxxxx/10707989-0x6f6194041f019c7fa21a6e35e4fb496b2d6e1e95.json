{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface yVault {\r\n    function balance() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function depositAll() external;\r\n    function withdraw(uint _shares) external;\r\n    function withdrawAll() external;\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function strategies(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\ninterface Strategy {\r\n    function withdrawalFee() external view returns (uint);\r\n}\r\n\r\n/* MakerDao interfaces */\r\n\r\ninterface GemLike {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(address, uint, address, uint) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface GNTJoinLike {\r\n    function bags(address) external view returns (address);\r\n    function make(address) external returns (address);\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (GemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface HopeLike {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface EndLike {\r\n    function fix(bytes32) external view returns (uint);\r\n    function cash(bytes32, uint) external;\r\n    function free(bytes32) external;\r\n    function pack(uint) external;\r\n    function skim(bytes32, address) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (address, uint);\r\n}\r\n\r\ninterface Medianizer {\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\ninterface Uni {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ncontract Structs {\r\n    struct Val {\r\n        uint256 value;\r\n    }\r\n\r\n    enum ActionType {\r\n        Deposit,   // supply tokens\r\n        Withdraw,  // borrow tokens\r\n        Transfer,  // transfer balance between accounts\r\n        Buy,       // buy an amount of some token (externally)\r\n        Sell,      // sell an amount of some token (externally)\r\n        Trade,     // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize,  // use excess tokens to zero-out a completely negative account\r\n        Call       // send arbitrary data to an address\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei // the amount is denominated in wei\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta // the amount is given as a delta from the current value\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\ncontract DyDx is Structs {\r\n    function operate(Info[] memory, ActionArgs[] memory) public;\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\n\r\ncontract StrategyMKRVaultDAIDelegate is Structs {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address constant public token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    address public cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n    address public vat = address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    address public mcd_join_eth_a = address(0x2F0b23f53734252Bda2277357e97e1517d6B042A);\r\n    address public mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\r\n    address public mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n    address public jug = address(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\r\n\r\n    address constant public eth_price_oracle = address(0x729D19f657BD0614b4985Cf1D82531c67569197B);\r\n    address constant public yVaultDAI = address(0xACd43E627e64355f1861cEC6d3a6688B31a6F952);\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public dydx = address(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n\r\n    uint public c = 20000;\r\n    uint public c_safe = 40000;\r\n    uint constant public c_base = 10000;\r\n\r\n    uint public performanceFee = 5000;\r\n    uint constant public performanceMax = 10000;\r\n\r\n    uint public withdrawalFee = 50;\r\n    uint constant public withdrawalMax = 10000;\r\n\r\n    bytes32 constant public ilk = \"ETH-A\";\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public harvester;\r\n\r\n    uint public cdpId;\r\n\r\n    constructor(address _controller, address _governance) public {\r\n        governance = _governance;\r\n        strategist = msg.sender;\r\n        controller = _controller;\r\n        cdpId = ManagerLike(cdp_manager).open(ilk, address(this));\r\n        _approveAll();\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyMKRVaultDAIDelegate\";\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setHarvester(address _harvester) external {\r\n        require(msg.sender == harvester || msg.sender == governance, \"!allowed\");\r\n        harvester = _harvester;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint _performanceFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setBorrowCollateralizationRatio(uint _c) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        c = _c;\r\n    }\r\n\r\n    function setWithdrawCollateralizationRatio(uint _c_safe) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        c_safe = _c_safe;\r\n    }\r\n\r\n    // optional\r\n    function setMCDValue(\r\n        address _manager,\r\n        address _ethAdapter,\r\n        address _daiAdapter,\r\n        address _spot,\r\n        address _jug\r\n    ) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        cdp_manager = _manager;\r\n        vat = ManagerLike(_manager).vat();\r\n        mcd_join_eth_a = _ethAdapter;\r\n        mcd_join_dai = _daiAdapter;\r\n        mcd_spot = _spot;\r\n        jug = _jug;\r\n    }\r\n\r\n    function _approveAll() internal {\r\n        IERC20(token).approve(mcd_join_eth_a, uint(-1));\r\n        IERC20(dai).approve(mcd_join_dai, uint(-1));\r\n        IERC20(dai).approve(yVaultDAI, uint(-1));\r\n        IERC20(dai).approve(unirouter, uint(-1));\r\n        IERC20(dai).approve(dydx, uint(-1));\r\n    }\r\n\r\n    function deposit() public {\r\n        uint _token = IERC20(token).balanceOf(address(this));\r\n        if (_token > 0) {\r\n            uint p = uint(Medianizer(eth_price_oracle).read());\r\n            uint _draw = _token.mul(p).mul(c_base).div(c).div(1e18);\r\n            //// approve adapter to use token amount\r\n            _lockWETHAndDrawDAI(_token, _draw);\r\n\r\n            //// approve yVaultDAI use DAI\r\n            yVault(yVaultDAI).depositAll();\r\n        }\r\n    }\r\n\r\n    function _lockWETHAndDrawDAI(uint wad, uint wadD) internal {\r\n        address urn = ManagerLike(cdp_manager).urns(cdpId);\r\n\r\n        //// GemJoinLike(mcd_join_eth_a).gem().approve(mcd_join_eth_a, wad);\r\n        GemJoinLike(mcd_join_eth_a).join(urn, wad);\r\n        ManagerLike(cdp_manager).frob(cdpId, toInt(wad), _getDrawDart(urn, wadD));\r\n        ManagerLike(cdp_manager).move(cdpId, address(this), wadD.mul(1e27));\r\n        if (VatLike(vat).can(address(this), address(mcd_join_dai)) == 0) {\r\n            VatLike(vat).hope(mcd_join_dai);\r\n        }\r\n        DaiJoinLike(mcd_join_dai).exit(address(this), wadD);\r\n    }\r\n\r\n    function _getDrawDart(address urn, uint wad) internal returns (int dart) {\r\n        uint rate = JugLike(jug).drip(ilk);\r\n        uint _dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (_dai < wad.mul(1e27)) {\r\n            dart = toInt(wad.mul(1e27).sub(_dai).div(rate));\r\n            dart = uint(dart).mul(rate) < wad.mul(1e27) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(dai != address(_asset), \"dai\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        uint _fee = _amount.mul(withdrawalFee).div(withdrawalMax);\r\n\r\n        IERC20(want).safeTransfer(strategist, _fee);\r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        // _amount in want\r\n        _freeWETH(_amount);\r\n\r\n        if (getmVaultRatio() < c_safe.mul(1e2)) {\r\n            uint p = uint(Medianizer(eth_price_oracle).read());\r\n            _wipe(_withdrawDai(_amount.mul(p).div(1e18)));\r\n        }\r\n        \r\n        return _amount;\r\n    }\r\n\r\n    function _freeWETH(uint wad) internal {\r\n        ManagerLike(cdp_manager).frob(cdpId, -toInt(wad), 0);\r\n        ManagerLike(cdp_manager).flux(cdpId, address(this), wad);\r\n        GemJoinLike(mcd_join_eth_a).exit(address(this), wad);\r\n    }\r\n\r\n    function _wipe(uint wad) internal {\r\n        // wad in DAI\r\n        address urn = ManagerLike(cdp_manager).urns(cdpId);\r\n\r\n        DaiJoinLike(mcd_join_dai).join(urn, wad);\r\n        ManagerLike(cdp_manager).frob(cdpId, 0, _getWipeDart(VatLike(vat).dai(urn), urn));\r\n    }\r\n\r\n    function _getWipeDart(\r\n        uint _dai,\r\n        address urn\r\n    ) internal view returns (int dart) {\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        dart = toInt(_dai / rate);\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        _swap(IERC20(dai).balanceOf(address(this)));\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        yVault(yVaultDAI).withdrawAll(); // get Dai\r\n        _wipe(getTotalDebtAmount().add(1));\r\n        _freeWETH(balanceOfmVault());\r\n    }\r\n\r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant()\r\n               .add(balanceOfmVault());\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfmVault() public view returns (uint) {\r\n        uint ink;\r\n        address urnHandler = ManagerLike(cdp_manager).urns(cdpId);\r\n        (ink,) = VatLike(vat).urns(ilk, urnHandler);\r\n        return ink;\r\n    }\r\n\r\n    function harvest() public {\r\n        require(msg.sender == strategist || msg.sender == harvester || msg.sender == governance, \"!authorized\");\r\n        \r\n        uint v = getUnderlyingDai(yVault(yVaultDAI).balanceOf(address(this)));\r\n        uint d = getTotalDebtAmount();\r\n        require(v > d, \"profit is not realized yet!\");\r\n        uint profit = v.sub(d);\r\n\r\n        initFlashLoan(dai, 3, profit);\r\n    }\r\n\r\n    function initFlashLoan(\r\n        address _token,\r\n        uint256 _marketId,\r\n        uint256 _amount\r\n    ) internal {\r\n        uint256 _flash_amount = IERC20(_token).balanceOf(dydx);\r\n        require(_amount <= _flash_amount, \"flash amount is not enough\");\r\n\r\n        Info[] memory infos = new Info[](1);\r\n        infos[0] = Info(address(this), 0);\r\n\r\n        ActionArgs[] memory args = new ActionArgs[](3);\r\n\r\n        ActionArgs memory _wtoken;\r\n\r\n        _wtoken.actionType = ActionType.Withdraw;\r\n        _wtoken.accountId = 0;\r\n        _wtoken.amount = AssetAmount(\r\n            false,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            _amount\r\n        );\r\n        _wtoken.primaryMarketId = _marketId;\r\n        _wtoken.secondaryMarketId = 0;\r\n        _wtoken.otherAddress = address(this);\r\n\r\n        args[0] = _wtoken;\r\n\r\n        ActionArgs memory call;\r\n\r\n        call.actionType = ActionType.Call;\r\n        call.accountId = 0;\r\n        call.otherAddress = address(this);\r\n\r\n        args[1] = call;\r\n\r\n        ActionArgs memory _dtoken;\r\n\r\n        _dtoken.actionType = ActionType.Deposit;\r\n        _dtoken.accountId = 0;\r\n        _dtoken.amount = AssetAmount(\r\n            true,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            _amount.add(1)\r\n        );\r\n        _dtoken.primaryMarketId = _marketId;\r\n        _dtoken.secondaryMarketId = 0;\r\n        _dtoken.otherAddress = address(this);\r\n\r\n        args[2] = _dtoken;\r\n\r\n        DyDx(dydx).operate(infos, args);\r\n    }\r\n\r\n    function callFunction(\r\n        address sender,\r\n        Info memory accountInfo,\r\n        bytes memory data\r\n    ) public {\r\n        require(sender == dydx, \"need to be dydx!\");\r\n        uint _borrow = IERC20(dai).balanceOf(address(this));\r\n        _swap(_borrow.sub(1));\r\n\r\n        uint _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            uint _fee = _want.mul(performanceFee).div(performanceMax);\r\n            IERC20(want).safeTransfer(strategist, _fee);\r\n            _want = _want.sub(_fee);\r\n        }\r\n\r\n        uint p = uint(Medianizer(eth_price_oracle).read());\r\n        uint _draw = _want.mul(p).mul(c_base).div(c).div(1e18);\r\n        //// approve adapter to use token amount\r\n        _lockWETHAndDrawDAI(_want, _draw);\r\n        _withdrawDai(_borrow.sub(_draw));\r\n    }\r\n\r\n    function payback(uint _amount) public {\r\n        // _amount in Dai\r\n        _wipe(_withdrawDai(_amount));\r\n    }\r\n\r\n    function getTotalDebtAmount() public view returns (uint) {\r\n        uint art;\r\n        uint rate;\r\n        address urnHandler = ManagerLike(cdp_manager).urns(cdpId);\r\n        (,art) = VatLike(vat).urns(ilk, urnHandler);\r\n        (,rate,,,) = VatLike(vat).ilks(ilk);\r\n        return art.mul(rate).div(1e27);\r\n    }\r\n\r\n    function getmVaultRatio() public view returns (uint) {\r\n        uint spot; // ray\r\n        uint liquidationRatio; // ray\r\n        uint denominator = getTotalDebtAmount();\r\n        (,,spot,,) = VatLike(vat).ilks(ilk);\r\n        (,liquidationRatio) = SpotLike(mcd_spot).ilks(ilk);\r\n        uint delayedCPrice = spot.mul(liquidationRatio).div(1e27); // ray\r\n        uint numerator = balanceOfmVault().mul(delayedCPrice).div(1e18); // ray\r\n        return numerator.div(denominator).div(1e3);\r\n    }\r\n\r\n    function getUnderlyingWithdrawalFee() public view returns (uint) {\r\n        address _strategy = Controller(controller).strategies(dai);\r\n        return Strategy(_strategy).withdrawalFee();\r\n    }\r\n\r\n    function getUnderlyingDai(uint _shares) public view returns (uint) {\r\n        return (yVault(yVaultDAI).balance())\r\n                .mul(_shares).div(yVault(yVaultDAI).totalSupply())\r\n                .mul(withdrawalMax.sub(getUnderlyingWithdrawalFee()))\r\n                .div(withdrawalMax);\r\n    }\r\n\r\n    function _withdrawDai(uint _amount) internal returns (uint) {\r\n        uint _shares = _amount\r\n                        .mul(yVault(yVaultDAI).totalSupply())\r\n                        .div(yVault(yVaultDAI).balance())\r\n                        .mul(withdrawalMax)\r\n                        .div(withdrawalMax.sub(getUnderlyingWithdrawalFee()));\r\n        yVault(yVaultDAI).withdraw(_shares);\r\n        return IERC20(dai).balanceOf(address(this));\r\n    }\r\n\r\n    function _swap(uint _amountIn) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(dai);\r\n        path[1] = address(want);\r\n\r\n        //// approve unirouter to use dai\r\n        Uni(unirouter).swapExactTokensForTokens(_amountIn, 0, path, address(this), now.add(1 days));\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfmVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_safe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdp_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dydx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_price_oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnderlyingWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getmVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcd_join_dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcd_join_eth_a\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcd_spot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"setBorrowCollateralizationRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jug\",\"type\":\"address\"}],\"name\":\"setMCDValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c_safe\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCollateralizationRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yVaultDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyMKRVaultDAIDelegate","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009e65ad11b299ca0abefc2799ddb6314ef2d910800000000000000000000000002d407ddb06311396fe14d4b49da5f0471447d45c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://11b4f209bad34f0166d73a744c3bbc3919f14d1586aa71a0a6373bb000bedf79"}]}