{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract PoolInterface {\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) public pure returns (uint);\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n    function getBalance(address) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n}\r\n\r\ncontract TokenInterface {\r\n    function balanceOf(address) public view returns (uint);\r\n    function allowance(address, address) public view returns (uint);\r\n    function approve(address, uint) public returns (bool);\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract ExchangeProxy {\r\n\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint    maxPrice;\r\n    }\r\n\r\n    TokenInterface weth;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    constructor(address _weth) public {\r\n        weth = TokenInterface(_weth);\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function transferFromAll(TokenInterface token, uint256 amount) internal returns(bool) {\r\n        if (isETH(token)) {\r\n            weth.deposit.value(msg.value)();\r\n        } else {\r\n            require(token.transferFrom(msg.sender, address(this), amount), \"ERR_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function getBalance(TokenInterface token) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return address(this).balance;\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function transferAll(TokenInterface token, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            weth.withdraw(amount);\r\n            (bool xfer,) = msg.sender.call.value(amount)(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n            require(token.transfer(msg.sender, amount), \"ERR_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function isETH(TokenInterface token) internal pure returns(bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n    public payable\r\n    returns (uint totalAmountOut)\r\n    {\r\n\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountOut;\r\n            for (uint k = 0; k < swapSequences[i].length; k++) {\r\n                Swap memory swap = swapSequences[i][k];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n                if (k == 1) {\r\n                    // Makes sure that on the second swap the output of the first was used\r\n                    // so there is not intermediate token leftover\r\n                    swap.swapAmount = tokenAmountOut;\r\n                }\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.approve(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\r\n                (tokenAmountOut,) = pool.swapExactAmountIn(\r\n                    swap.tokenIn,\r\n                    swap.swapAmount,\r\n                    swap.tokenOut,\r\n                    swap.limitReturnAmount,\r\n                    swap.maxPrice\r\n                );\r\n            }\r\n            // This takes the amountOut of the last swap\r\n            totalAmountOut = add(tokenAmountOut, totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n    public payable\r\n    returns (uint totalAmountIn)\r\n    {\r\n\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountInFirstSwap;\r\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\r\n            if (swapSequences[i].length == 1) {\r\n                Swap memory swap = swapSequences[i][0];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.approve(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\r\n\r\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\r\n                    swap.tokenIn,\r\n                    swap.limitReturnAmount,\r\n                    swap.tokenOut,\r\n                    swap.swapAmount,\r\n                    swap.maxPrice\r\n                );\r\n            } else {\r\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\r\n                // of token C. But first we need to buy B with A so we can then buy C with B\r\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\r\n                uint intermediateTokenAmount; // This would be token B as described above\r\n                Swap memory secondSwap = swapSequences[i][1];\r\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\r\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\r\n                    poolSecondSwap.getBalance(secondSwap.tokenIn),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\r\n                    poolSecondSwap.getBalance(secondSwap.tokenOut),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\r\n                    secondSwap.swapAmount,\r\n                    poolSecondSwap.getSwapFee()\r\n                );\r\n\r\n                //// Buy intermediateTokenAmount of token B with A in the first pool\r\n                Swap memory firstSwap = swapSequences[i][0];\r\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\r\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\r\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\r\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\r\n                }\r\n\r\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\r\n                    firstSwap.tokenIn,\r\n                    firstSwap.limitReturnAmount,\r\n                    firstSwap.tokenOut,\r\n                    intermediateTokenAmount, // This is the amount of token B we need\r\n                    firstSwap.maxPrice\r\n                );\r\n\r\n                //// Buy the final amount of token C desired\r\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\r\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\r\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\r\n                }\r\n\r\n                poolSecondSwap.swapExactAmountOut(\r\n                    secondSwap.tokenIn,\r\n                    secondSwap.limitReturnAmount,\r\n                    secondSwap.tokenOut,\r\n                    secondSwap.swapAmount,\r\n                    secondSwap.maxPrice\r\n                );\r\n            }\r\n            totalAmountIn = add(tokenAmountInFirstSwap, totalAmountIn);\r\n        }\r\n\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ExchangeProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://aae9c502cb81d9e94f400eb83973ec3c01cabdda8a252a2161dcf66c27709ffe"}]}