{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ILendingPoolAddressesProviderRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title ILendingPoolAddressesProvider interface\r\n* @notice provides the interface to fetch the LendingPoolCore address\r\n**/\r\n\r\ncontract ILendingPoolAddressesProviderRegistry {\r\n\r\n    function getAddressesProvidersList() external view returns (address[] memory);\r\n    function isAddressesProviderRegistered(address _provider) external view returns (uint256);\r\n\r\n    function registerAddressesProvider(address _provider, uint256 _id) external;\r\n    function unregisterAddressesProvider(address _provider) external;\r\n}\r\n\r\n// File: contracts/configuration/LendingPoolAddressesProviderRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title LendingPoolAddressesProviderRegistry contract\r\n* @notice contains the list of active addresses providers\r\n* @author Aave\r\n**/\r\n\r\ncontract LendingPoolAddressesProviderRegistry is Ownable, ILendingPoolAddressesProviderRegistry {\r\n    //events\r\n    event AddressesProviderRegistered(address indexed newAddress);\r\n    event AddressesProviderUnregistered(address indexed newAddress);\r\n\r\n    mapping(address => uint256) addressesProviders;\r\n    address[] addressesProvidersList;\r\n\r\n    /**\r\n    * @dev returns if an addressesProvider is registered or not\r\n    * @param _provider the addresses provider\r\n    * @return true if the addressesProvider is registered, false otherwise\r\n    **/\r\n    function isAddressesProviderRegistered(address _provider) external view returns(uint256) {\r\n        return addressesProviders[_provider];\r\n    }\r\n\r\n    /**\r\n    * @dev returns the list of active addressesProviders\r\n    * @return the list of addressesProviders\r\n    **/\r\n    function getAddressesProvidersList() external view returns(address[] memory) {\r\n\r\n        uint256 maxLength = addressesProvidersList.length;\r\n\r\n        address[] memory activeProviders = new address[](maxLength);\r\n\r\n        for(uint256 i = 0; i<addressesProvidersList.length; i++){\r\n            if(addressesProviders[addressesProvidersList[i]] > 0){\r\n                activeProviders[i] = addressesProvidersList[i];\r\n            }\r\n        }\r\n\r\n        return activeProviders;\r\n    }\r\n\r\n    /**\r\n    * @dev adds a lending pool to the list of registered lending pools\r\n    * @param _provider the pool address to be registered\r\n    **/\r\n    function registerAddressesProvider(address _provider, uint256 _id) public onlyOwner {\r\n        addressesProviders[_provider] = _id;\r\n        addToAddressesProvidersListInternal(_provider);\r\n        emit AddressesProviderRegistered(_provider);\r\n    }\r\n\r\n    /**\r\n    * @dev removes a lending pool from the list of registered lending pools\r\n    * @param _provider the pool address to be unregistered\r\n    **/\r\n    function unregisterAddressesProvider(address _provider) public onlyOwner {\r\n        require(addressesProviders[_provider] > 0, \"Provider is not registered\");\r\n        addressesProviders[_provider] = 0;\r\n        emit AddressesProviderUnregistered(_provider);\r\n    }\r\n\r\n    /**\r\n    * @dev adds to the list of the addresses providers, if it wasn't already added before\r\n    * @param _provider the pool address to be added\r\n    **/\r\n    function addToAddressesProvidersListInternal(address _provider) internal {\r\n\r\n        for(uint256 i = 0; i < addressesProvidersList.length; i++) {\r\n\r\n            if(addressesProvidersList[i] == _provider){\r\n                return;\r\n            }\r\n        }\r\n\r\n        addressesProvidersList.push(_provider);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressesProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isAddressesProviderRegistered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"registerAddressesProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressesProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LendingPoolAddressesProviderRegistry","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50c079d8ecb463591f65a316138d2494170158bf3aa9c56c9f7f919f3f0be378"}]}