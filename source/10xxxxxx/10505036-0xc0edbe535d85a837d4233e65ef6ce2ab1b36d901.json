{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC223_receiving_contract.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n /**\\n * @title Contract that will work with ERC223 tokens.\\n */\\n \\ncontract ERC223ReceivingContract {\\n/**\\n * @dev Standard ERC223 function that will handle incoming token transfers.\\n *\\n * @param _from  Token sender address.\\n * @param _value Amount of tokens.\\n * @param _data  Transaction metadata.\\n */\\n    //function tokenFallback(address _from, uint _value, bytes _data); // orig\\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address who) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external view returns (uint256);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function approve(address spender, uint256 value)\\n    external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    external returns (bool);\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\n/*\\n * Ownable\\n *\\n * Base contract with an owner.\\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\\n * Provides onlyOwnerOrApi modifier, which prevents function from running if it is called by other than above OR from one API code.\\n * Provides onlyOwnerOrApiOrContract modifier, which prevents function from running if it is called by other than above OR one smart contract code.\\n */\\ncontract Ownable {\\n    address public superOwnerAddr;\\n    address public ownerAddr;\\n    mapping(address =\\u003e bool) public ApiAddr; // list of allowed apis\\n    mapping(address =\\u003e bool) public ContractAddr; // list of allowed contracts\\n\\n    constructor() public {\\n        superOwnerAddr = 0xb4e3734A221ebA3137E0F4eA6f49d0c366d03dDa;\\n        ownerAddr = msg.sender;\\n        ApiAddr[0x82F5500c79065a768f1D86Cd8bf74b4c34681afE] = true;\\n    }\\n\\n    modifier onlySuperOwner() {\\n        require(msg.sender == superOwnerAddr, \\\"Access denied for this address [0].\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == ownerAddr, \\\"Access denied for this address [1].\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrApi() {\\n        require(msg.sender == ownerAddr || ApiAddr[msg.sender] == true, \\\"Access denied for this address [2].\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrApiOrContract() {\\n        require(msg.sender == ownerAddr || ApiAddr[msg.sender] == true || ContractAddr[msg.sender] == true, \\\"Access denied for this address [3].\\\");\\n        _;\\n    }\\n\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003e 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003c= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\"},\"Selfmaker_ERC2xx_Token.sol\":{\"content\":\"pragma solidity ^0.4.25;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC223_receiving_contract.sol\\\";\\n\\n/**\\n * @title Standard ERC20 token + Detailed + Capped + Burnable with Dexaran\\u0027s ERC223 extension\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract SelfmakerERC2xxToken is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 private _totalSupply;\\n    uint256 private _maxSupply;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data); // ERC223\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n\\n    constructor() public {\\n        _name = \\\"SelfMaker\\\";\\n        _symbol = \\\"SELF\\\";\\n        _decimals = 0;\\n        _totalSupply = 25000000 * (10 ** uint256(_decimals));\\n\\t    _maxSupply = 35000000 * (10 ** uint256(_decimals));\\n        if (_totalSupply \\u003e 0) {\\n\\t\\t\\t_balances[msg.sender] = _totalSupply;\\n\\t\\t\\tbytes memory empty;\\n\\t\\t\\temit Transfer(address(0), msg.sender, _totalSupply);\\n\\t\\t\\temit Transfer(address(0), msg.sender, _totalSupply, empty);\\n    \\t}\\n    }\\n\\n    /**\\n    * @return the name of the token.\\n    */\\n    function name() public view returns(string) {\\n        return _name;\\n    }\\n\\n    /**\\n    * @return the symbol of the token.\\n    */\\n    function symbol() public view returns(string) {\\n        return _symbol;\\n    }\\n\\n    /**\\n    * @return the number of decimals of the token.\\n    */\\n    function decimals() public view returns(uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @return the maximum supply of the token.\\n    */\\n    function maxSupply() public view returns(uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param owner The address to query the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n    * @param owner address The address which owns the funds.\\n    * @param spender address The address which will spend the funds.\\n    * @return A uint256 specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address owner, address spender) public view returns (uint256)\\n    {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address (ERC223)\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    * @param data Transaction metadata.\\n    */\\n    function transfer(address to, uint256 value, bytes data) public returns (bool) { // ERC223\\n        _transfer223(msg.sender, to, value, data);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n    * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    * @param spender The address which will spend the funds.\\n    * @param value The amount of tokens to be spent.\\n    */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        require(spender != address(0), \\\"Spender address must be set.\\\");\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param from address The address which you want to send tokens from\\n    * @param to address The address which you want to transfer to\\n    * @param value uint256 the amount of tokens to be transferred\\n    */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool)\\n    {\\n        require(value \\u003c= _allowed[from][msg.sender], \\\"Value must not be higher than allowed.\\\");\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\\n    * approve should be called when allowed_[_spender] == 0. To increment\\n    * allowed value is better to use this function to avoid 2 calls (and wait until\\n    * the first transaction is mined)\\n    * From MonolithDAO Token.sol\\n    * @param spender The address which will spend the funds.\\n    * @param addedValue The amount of tokens to increase the allowance by.\\n    */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool)\\n    {\\n        require(spender != address(0), \\\"Spender address must be set.\\\");\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n    * approve should be called when allowed_[_spender] == 0. To decrement\\n    * allowed value is better to use this function to avoid 2 calls (and wait until\\n    * the first transaction is mined)\\n    * From MonolithDAO Token.sol\\n    * @param spender The address which will spend the funds.\\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\\n    */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool)\\n    {\\n        require(spender != address(0), \\\"Spender address must be set.\\\");\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified addresses\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(value \\u003c= _balances[from], \\\"Value must not be higher than sender\\u0027s balance.\\\");\\n        require(to != address(0), \\\"Receiver address must be set.\\\");\\n\\n        uint256 codeLength;\\n        assembly {\\n             codeLength := extcodesize(to)\\n        }\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n\\n        if(codeLength\\u003e0) { // odbiorca jest kontraktem, nie walletem\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\\n            bytes memory empty;\\n            receiver.tokenFallback(msg.sender, value, empty);\\n        }\\n\\n        emit Transfer(from, to, value);\\n        emit Transfer(from, to, value, empty);\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified addresses\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    * @param data Transaction metadata to be forwarded to the receiving smart contract.\\n    */\\n    function _transfer223(address from, address to, uint256 value, bytes data) internal { // ERC223\\n        require(value \\u003c= _balances[from], \\\"Value must not be higher than sender\\u0027s balance.\\\");\\n        require(to != address(0), \\\"Receiver address must be set.\\\");\\n\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(to)\\n        }\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n\\n        if(codeLength\\u003e0) { // receiver is a contract address\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\\n            receiver.tokenFallback(msg.sender, value, data);\\n        }\\n\\n        emit Transfer(from, to, value);\\n        emit Transfer(from, to, value, data);\\n    }\\n\\n    /* change owner address for allowing execution for the new owner */\\n    function setOwnerAddr(address _address) public onlySuperOwner {\\n        ownerAddr = _address;\\n    }\\n\\n    /* add API address for allowing execution from the API */\\n    function addApiAddr(address _address) public onlyOwner {\\n        ApiAddr[_address] = true;\\n    }\\n    /* remove API address from allowing execution from the API */\\n    function removeApiAddr(address _address) public onlyOwner {\\n        ApiAddr[_address] = false;\\n    }\\n\\n    /* add Contract address for allowing execution from the Contract */\\n    function addContractAddr(address _address) public onlyOwner {\\n        ContractAddr[_address] = true;\\n    }\\n    /* remove Contract address from allowing execution from the Contract */\\n    function removeContractAddr(address _address) public onlyOwner {\\n        ContractAddr[_address] = false;\\n    }\\n\\n    /**\\n    * @dev Internal function that mints an amount of the token and assigns it to\\n    * an account. This encapsulates the modification of balances such that the\\n    * proper events are emitted.\\n    * @param account The account that will receive the created tokens.\\n    * @param value The amount that will be created.\\n    */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != 0, \\\"Receiver address must be set.\\\");\\n        require(totalSupply().add(value) \\u003c= _maxSupply, \\\"Maximum token supply exceeded.\\\");\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        bytes memory empty;\\n        emit Transfer(address(0), account, value);\\n        emit Transfer(address(0), account, value, empty);\\n    }\\n\\n    /**\\n    * @dev Function to mint tokens\\n    * @param to The address that will receive the minted tokens.\\n    * @param value The amount of tokens to mint.\\n    * @return A boolean that indicates if the operation was successful.\\n    */\\n    function mint(address to, uint256 value) public onlyOwnerOrApiOrContract returns (bool)\\n    {\\n        _mint(to, value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Internal function that burns an amount of the token of a given\\n    * account.\\n    * @param account The account whose tokens will be burnt.\\n    * @param value The amount that will be burnt.\\n    */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != 0, \\\"Target address must be set.\\\");\\n        require(value \\u003c= _balances[account], \\\"Amount must not be higher than balance.\\\");\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        bytes memory empty;\\n        emit Transfer(account, address(0), value);\\n        emit Transfer(account, address(0), value, empty);\\n    }\\n\\n    /**\\n    * @dev Burns a specific amount of tokens.\\n    * @param value The amount of token to be burned.\\n    */\\n    function burn(uint256 value) public onlyOwnerOrApiOrContract {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n    * @dev Internal function that burns an amount of the token of a given\\n    * account, deducting from the sender\\u0027s allowance for said account. Uses the\\n    * internal burn function.\\n    * @param account The account whose tokens will be burnt.\\n    * @param value The amount that will be burnt.\\n    */\\n    function _burnFrom(address account, uint256 value) internal {\\n        require(value \\u003c= _allowed[account][msg.sender], \\\"Amount must not be higher than allowed balance.\\\");\\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\\n        // this function needs to emit an event with the updated approval.\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n        _burn(account, value);\\n    }\\n\\n    /**\\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n    * @param from address The address which you want to send tokens from\\n    * @param value uint256 The amount of token to be burned\\n    */\\n    function burnFrom(address from, uint256 value) public onlyOwnerOrApiOrContract {\\n        _burnFrom(from, value);\\n    }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ApiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwnerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeContractAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addApiAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeApiAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwnerAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SelfmakerERC2xxToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4f38bed1a3909d47ed55698f2c053838d40d4713a28ca69c866f796e387a5ceb"}]}