{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface DSPauseAbstract {\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface JugAbstract {\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface MedianAbstract {\r\n    function kiss(address) external;\r\n    function kiss(address[] calldata) external;\r\n}\r\n\r\ninterface OsmAbstract {\r\n    function kiss(address) external;\r\n}\r\n\r\ninterface VatAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n}\r\n\r\ninterface MedianizerV1Abstract {\r\n    function setAuthority(address) external;\r\n    function setOwner(address) external;\r\n    function setMin(uint96) external;\r\n    function setNext(bytes12) external;\r\n    function set(bytes12, address) external;\r\n}\r\n\r\ncontract SpellAction {\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    // against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.1.1/contracts.json\r\n    address constant MCD_JUG  = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant MCD_VAT  = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n\r\n    address constant ETHUSD   = 0x64DE91F5A373Cd4c28de3600cB34C7C6cE410C85;\r\n    address constant BTCUSD   = 0xe0F30cb149fAADC7247E953746Be9BbBB6B5751f;\r\n    address constant PIP_WBTC = 0xf185d0682d50819263941e5f4EacC763CC5C6C42;\r\n\r\n    address constant KYBER    = 0xe1BDEb1F71b1CD855b95D4Ec2d1BFdc092E00E4F;\r\n    address constant DDEX     = 0x4935B1188EB940C39e22172cc5fe595E267706a1;\r\n    address constant ETHUSDv1 = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n    address constant YEARN    = 0x82c93333e4E295AA17a05B15092159597e823e8a;\r\n\r\n    // Decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant TWO_TWENTYFIVE_PCT_RATE    = 1000000000705562181084137268;\r\n    uint256 constant FOUR_TWENTYFIVE_PCT_RATE   = 1000000001319814647332759691;\r\n    uint256 constant EIGHT_TWENTYFIVE_PCT_RATE  = 1000000002513736079215619839;\r\n    uint256 constant TWELVE_TWENTYFIVE_PCT_RATE = 1000000003664330950215446102;\r\n    uint256 constant FIFTY_TWENTYFIVE_PCT_RATE  = 1000000012910019978921115695;\r\n\r\n    function execute() external {\r\n        /*** Risk Parameter Adjustments ***/\r\n\r\n        // Set the global debt ceiling to 1,401,000,000\r\n        // 1,196 (current DC) + 85 (USDC-A increase) + 85 (TUSD-A increase) + 30 (PAXUSD-A increase) + 5 (BAT-A increase)\r\n        VatAbstract(MCD_VAT).file(\"Line\", 1401 * MILLION * RAD);\r\n\r\n        // Set the BAT-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 5 million\r\n        // New debt ceiling: 10 million\r\n        VatAbstract(MCD_VAT).file(\"BAT-A\", \"line\", 10 * MILLION * RAD);\r\n\r\n        // Set the USDC-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 400 million\r\n        // New debt ceiling: 485 million\r\n        VatAbstract(MCD_VAT).file(\"USDC-A\", \"line\", 485 * MILLION * RAD);\r\n\r\n        // Set the TUSD-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 50 million\r\n        // New debt ceiling: 135 million\r\n        VatAbstract(MCD_VAT).file(\"TUSD-A\", \"line\", 135 * MILLION * RAD);\r\n\r\n        // Set the PAXUSD-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 30 million\r\n        // New debt ceiling: 60 million\r\n        VatAbstract(MCD_VAT).file(\"PAXUSD-A\", \"line\", 60 * MILLION * RAD);\r\n\r\n\r\n        // Set the ETH-A stability fee\r\n        //\r\n        // Previous: 0%\r\n        // New: 2.25%\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", TWO_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the BAT-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the USDC-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the USDC-B stability fee\r\n        //\r\n        // Previous: 50%\r\n        // New: 50.25%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-B\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-B\", \"duty\", FIFTY_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the WBTC-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"WBTC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"WBTC-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the TUSD-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"TUSD-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"TUSD-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the KNC-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"KNC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"KNC-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the ZRX-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"ZRX-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"ZRX-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the MANA-A stability fee\r\n        //\r\n        // Previous: 12%\r\n        // New: 12.25%\r\n        JugAbstract(MCD_JUG).drip(\"MANA-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"MANA-A\", \"duty\", TWELVE_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the USDT-A stability fee\r\n        //\r\n        // Previous: 8%\r\n        // New: 8.25%\r\n        JugAbstract(MCD_JUG).drip(\"USDT-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDT-A\", \"duty\", EIGHT_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Set the PAXUSD-A stability fee\r\n        //\r\n        // Previous: 4%\r\n        // New: 4.25%\r\n        JugAbstract(MCD_JUG).drip(\"PAXUSD-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"PAXUSD-A\", \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n\r\n        // Whitelisting:\r\n\r\n        // https://forum.makerdao.com/t/mip10c9-sp11-whitelist-kybers-promo-token-pricing-contract-on-ethusd-oracle/4193\r\n        // https://forum.makerdao.com/t/mip10c9-sp7-whitelist-opyn-on-ethusd-oracle/4061\r\n        address[] memory addrs = new address[](2);\r\n        addrs[0] = KYBER;\r\n        addrs[1] = ETHUSDv1;\r\n        MedianAbstract(ETHUSD).kiss(addrs);\r\n\r\n        // Add the new median as the only src of the old medianizer\r\n        MedianizerV1Abstract(ETHUSDv1).setMin(1);\r\n        MedianizerV1Abstract(ETHUSDv1).setNext(0x000000000000000000000002);\r\n        MedianizerV1Abstract(ETHUSDv1).set(0x000000000000000000000001, ETHUSD);\r\n\r\n        // https://forum.makerdao.com/t/mip10c9-sp8-whitelist-ddex-on-wbtcusd-oracle/4094\r\n        MedianAbstract(BTCUSD).kiss(DDEX);\r\n\r\n        // https://forum.makerdao.com/t/mip10c9-sp10-whitelist-yearn-finance-on-btcusd-oracle/4192\r\n        OsmAbstract(PIP_WBTC).kiss(YEARN);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    DSPauseAbstract public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address         public action;\r\n    bytes32         public tag;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    uint256         public expiration;\r\n    bool            public done;\r\n\r\n    address constant ETHUSDv1 = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/9ba21e7f4106b184124a2f94a7ab2591c3446c64/governance/votes/Executive%20vote%20-%20September%2025%2C%202020.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-09-25 MakerDAO Executive Spell | Hash: 0x86cac34c2d63bd581cc36f7688f57c6005a6de0382903fe30179953d025c3450\";\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    // modifier officeHours {\r\n    //     uint day = (now / 1 days + 3) % 7;\r\n    //     require(day < 5, \"Can only be cast on a weekday\");\r\n    //     uint hour = now / 1 hours % 24;\r\n    //     require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n    //     _;\r\n    // }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // Set the ownership of the medianizer v1 to the pause proxy and remove the direct\r\n        // access from the chief (this way it will need to pass via governance delay) and\r\n        // can be executed during cast (coded in the SpellAction)\r\n        MedianizerV1Abstract(ETHUSDv1).setOwner(pause.proxy());\r\n        MedianizerV1Abstract(ETHUSDv1).setAuthority(address(0));\r\n    }\r\n\r\n    function cast() public /*officeHours*/ {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4450c9e7706937454e2a8f6c0bbc8b8e86151c6582204b9d6dc7904839f58691"}]}