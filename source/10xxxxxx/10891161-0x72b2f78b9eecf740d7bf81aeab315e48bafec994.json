{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Lend/ProtocolInterface.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\nabstract contract ProtocolInterface {\r\n    function deposit(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public virtual;\r\n\r\n    function withdraw(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public virtual;\r\n}\r\n\r\n// File: contracts/interfaces/LendingPoolAddressesProviderInterface.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\nabstract contract LendingPoolAddressesProviderInterface {\r\n    function getLendingPool() external virtual returns (address);\r\n\r\n    function getLendingPoolCore() external virtual returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/LendingPool.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\nabstract contract LendingPool {\r\n    function deposit(\r\n        address,\r\n        uint256,\r\n        uint16\r\n    ) external virtual;\r\n\r\n    function redeemUnderlying(\r\n        address _reserve,\r\n        address payable _user,\r\n        uint256 _amount,\r\n        uint256 _aTokenBalanceAfterRedeem\r\n    ) external virtual;\r\n\r\n    function borrow(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode\r\n    ) external virtual;\r\n\r\n    function repay(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        address payable _onBehalfOf\r\n    ) external virtual payable;\r\n\r\n    function swapBorrowRateMode(address _reserve) external virtual;\r\n\r\n    function rebalanceStableBorrowRate(address _reserve, address _user) external virtual;\r\n\r\n    function setUserUseReserveAsCollateral(address, bool) external virtual;\r\n\r\n    function liquidationCall(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveAToken\r\n    ) external virtual payable;\r\n\r\n    function flashLoan(\r\n        address _receiver,\r\n        address _reserve,\r\n        uint256 _amount,\r\n        bytes memory _params\r\n    ) public virtual;\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external\r\n        virtual\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address interestRateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n        );\r\n\r\n    function getReserveData(address _reserve)\r\n        external\r\n        virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,\r\n            uint256 availableLiquidity,\r\n            uint256 totalBorrowsStable,\r\n            uint256 totalBorrowsVariable,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 utilizationRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            address aTokenAddress,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        virtual\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentBorrowBalance,\r\n            uint256 principalBorrowBalance,\r\n            uint256 borrowRateMode,\r\n            uint256 borrowRate,\r\n            uint256 liquidityRate,\r\n            uint256 originationFee,\r\n            uint256 variableBorrowIndex,\r\n            uint256 lastUpdateTimestamp,\r\n            bool usageAsCollateralEnabled\r\n        );\r\n\r\n    function getReserves() external virtual view returns (address[] memory);\r\n}\r\n\r\n// File: contracts/interfaces/ERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\ninterface ERC20 {\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _src, address indexed _dst, uint256 _amount);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    // function decimals() external view returns (uint256 digits);\r\n\r\n   \r\n}\r\n\r\n// File: contracts/interfaces/ATokenInterface.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\n\r\nabstract contract ATokenInterface is ERC20 {\r\n    function principalBalanceOf(address _user) external virtual view returns (uint256 balance);\r\n\r\n    function UINT_MAX_VALUE() external virtual returns (uint256);\r\n\r\n    function underlyingAssetAddress() external virtual view returns (address);\r\n\r\n    function getUserIndex(address _user) external virtual view returns (uint256);\r\n\r\n    function getInterestRedirectionAddress(address _user) external virtual view returns (address);\r\n\r\n    function getRedirectedBalance(address _user) external virtual view returns (uint256);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool);\r\n\r\n    function redirectInterestStream(address _to) external virtual;\r\n\r\n    function redirectInterestStreamOf(address _from, address _to) external virtual;\r\n\r\n    function allowInterestRedirectionTo(address _to) external virtual;\r\n\r\n    function redeem(uint256 _amount) external virtual;\r\n\r\n    function mintOnDeposit(address _account, uint256 _amount) external virtual;\r\n\r\n    function burnOnLiquidation(address _account, uint256 _value) external virtual;\r\n\r\n    function transferOnLiquidation(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external virtual;\r\n\r\n    function isTransferAllowed(address _user, uint256 _amount) external virtual view returns (bool);\r\n}\r\n\r\n// File: contracts/Lend/aave/AaveProtocol.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice AaveProtocol\r\n * @author Solidefi\r\n */\r\ncontract AaveProtocol is ProtocolInterface {\r\n    address public constant LENDING_PROTO_ADDRESS_PROV = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n\r\n    ATokenInterface public aDaiContract;\r\n    LendingPoolAddressesProviderInterface public provider;\r\n    LendingPool public lendingPool;\r\n\r\n    /**\r\n     * @dev Deposit DAI to aave protocol return cDAI to user proxy wallet.\r\n     * @param _user User proxy wallet address.\r\n     * @param _amount Amount of DAI.\r\n     */\r\n    function deposit(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _aToken\r\n    ) public override {\r\n        aDaiContract = ATokenInterface(_aToken);\r\n        provider = LendingPoolAddressesProviderInterface(LENDING_PROTO_ADDRESS_PROV);\r\n\r\n        lendingPool = LendingPool(provider.getLendingPool());\r\n        require(ERC20(_token).transferFrom(_user, address(this), _amount), \"Nothing to deposit\");\r\n        ERC20(_token).approve(provider.getLendingPoolCore(), uint256(-1));\r\n        lendingPool.deposit(_token, _amount, 0);\r\n\r\n        aDaiContract.transfer(_user, aDaiContract.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     *@dev Withdraw DAI from aave protocol return it to users EOA\r\n     *@param _user User proxy wallet address.\r\n     *@param _amount Amount of Token.\r\n     *@param _token Token address.\r\n     *@param _aToken Interest-Bearing Token address.\r\n     */\r\n    function withdraw(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _aToken\r\n    ) public override {\r\n        aDaiContract = ATokenInterface(_aToken);\r\n        require(aDaiContract.transferFrom(_user, address(this), _amount), \"Nothing to withdraw\");\r\n\r\n        aDaiContract.redeem(_amount);\r\n\r\n        ERC20(_token).transfer(_user, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"LENDING_PROTO_ADDRESS_PROV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDaiContract\",\"outputs\":[{\"internalType\":\"contract ATokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract LendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"contract LendingPoolAddressesProviderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveProtocol","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a86d152b237f76be690a0b73c540c345f30160883c33b15aeb4358514dc86245"}]}