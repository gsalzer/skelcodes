{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Uniswap{\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface Kye {\r\n    function routerAddress() external view returns (address);\r\n}\r\n\r\ninterface Router {\r\n    function mint(address tokenAddress, uint toMint) external;\r\n}\r\n\r\ncontract Routerable{\r\n    \r\n    address private constant _KYEADDRESS = 0xD5A4dc51229774223e288528E03192e2342bDA00;\r\n    \r\n    function kyeAddress() public pure returns (address) {\r\n        return _KYEADDRESS;\r\n    }\r\n    \r\n    function routerAddress() public view returns (address payable) {\r\n        return toPayable( Kye(kyeAddress()).routerAddress() );\r\n    }\r\n    \r\n    modifier onlyRouter() {\r\n        require(msg.sender == routerAddress(), \"Caller is not Router\");\r\n        _;\r\n    }\r\n    \r\n    function toPayable(address input) internal pure returns (address payable){\r\n        return address(uint160(input));\r\n    }\r\n}\r\n\r\ncontract Staker is Routerable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint constant internal DECIMAL = 10**18;\r\n    uint constant public INF = 33136721748;\r\n\r\n    uint private timeOver = INF;\r\n    bool private _paused = false;\r\n    \r\n    uint private rewardValue = 10**18;\r\n    uint private kyePromo = 2;\r\n\r\n    mapping (address => mapping (address => uint256)) private rewards;\r\n    mapping (address => mapping (address => uint256)) private timePooled;\r\n    mapping (address => mapping (address => uint256)) private LPTokenBalance;\r\n    \r\n    address constant public KYE_TOKEN_ADDRESS = 0x273dB7238B46FDFdD28f553f4AE7f7da736A8D92;\r\n    \r\n    address constant public UNIROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant public FACTORY           = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address          public WETHAddress       = Uniswap(UNIROUTER).WETH();\r\n    \r\n    receive() external payable {\r\n        \r\n       if(msg.sender != UNIROUTER){\r\n           stake(KYE_TOKEN_ADDRESS);\r\n       }\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        (bool success, ) = recipient.call{ value: amount }(\"\"); \r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function mintingPeriodOver() internal view returns (bool){\r\n        return now > timeOver;\r\n    }\r\n    \r\n    function closeMinting() public onlyRouter {\r\n        timeOver = now;\r\n    }\r\n    \r\n    function Pause(bool paused) public onlyRouter {\r\n        _paused = paused;\r\n    }\r\n    \r\n    function updateRewardValue(uint _rewardValue) public onlyRouter {\r\n        require(!mintingPeriodOver());\r\n        rewardValue = _rewardValue;\r\n    }\r\n    \r\n    function updateKyePromo(uint _kyePromo) public onlyRouter {\r\n        require(!mintingPeriodOver());\r\n        kyePromo = _kyePromo;\r\n    }\r\n    \r\n    function stake(address tokenAddress) public payable{\r\n        require(!mintingPeriodOver(), \"You will not mint Kye tokens anymore, stake directly through Uniswap\");\r\n        \r\n        sendValue(routerAddress(), address(this).balance/2);\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(tokenAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\r\n        Router(routerAddress()).mint(tokenAddress, toMint);\r\n        \r\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\r\n        \r\n        uint amountTokenDesired = IERC20(tokenAddress).balanceOf(address(this));\r\n        IERC20(tokenAddress).approve(UNIROUTER, amountTokenDesired ); //allow pool to get tokens\r\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(tokenAddress, amountTokenDesired, 1, 1, address(this), INF);\r\n        \r\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\r\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\r\n        \r\n        rewards[tokenAddress][msg.sender] = rewards[tokenAddress][msg.sender].add(viewRecentRewardTokenAmount(tokenAddress,msg.sender));\r\n        timePooled[tokenAddress][msg.sender] = now;\r\n    \r\n        LPTokenBalance[tokenAddress][msg.sender] = LPTokenBalance[tokenAddress][msg.sender].add(poolTokenGot);\r\n    }\r\n\r\n    function withdrawLPTokens(address tokenAddress, uint amount) public {\r\n        require( amount <= rewards[tokenAddress][msg.sender].add(viewRecentRewardTokenAmount(tokenAddress, msg.sender)) );\r\n        if(!mintingPeriodOver() || _paused){return;}\r\n        \r\n        rewards[tokenAddress][msg.sender] = rewards[tokenAddress][msg.sender].add(viewRecentRewardTokenAmount(tokenAddress, msg.sender));\r\n        LPTokenBalance[tokenAddress][msg.sender] = LPTokenBalance[tokenAddress][msg.sender].sub(amount);\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\r\n        IERC20(poolAddress).transfer(msg.sender, amount);\r\n        \r\n        timePooled[tokenAddress][msg.sender] = now;\r\n    }\r\n    \r\n    function withdrawRewardTokens(address tokenAddress, uint amount) public {\r\n        require(amount <= viewRewardTokenAmount(tokenAddress, msg.sender));\r\n        if(!mintingPeriodOver()){return;}\r\n        \r\n        rewards[tokenAddress][msg.sender] = rewards[tokenAddress][msg.sender].add(viewRecentRewardTokenAmount(tokenAddress, msg.sender));\r\n        timePooled[tokenAddress][msg.sender] = now;\r\n        \r\n        uint removeAmount = ethtimeCalc(tokenAddress, amount)/2;\r\n        rewards[tokenAddress][msg.sender] = rewards[tokenAddress][msg.sender].sub(removeAmount);\r\n        \r\n        Router(routerAddress()).mint(KYE_TOKEN_ADDRESS, amount);\r\n        IERC20(KYE_TOKEN_ADDRESS).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function viewRecentRewardTokenAmount(address tokenAddress, address who) internal view returns (uint){\r\n        \r\n        if(mintingPeriodOver()){\r\n            \r\n            if(timePooled[tokenAddress][who] > timeOver){\r\n                return 0;\r\n            }else{\r\n                return (viewPooledEthAmount(tokenAddress, who).mul( timeOver.sub(timePooled[tokenAddress][who]) ));\r\n            }\r\n        }else{\r\n            return (viewPooledEthAmount(tokenAddress,who).mul( now.sub(timePooled[tokenAddress][who]) ));\r\n        }\r\n    }\r\n    \r\n    function viewRewardTokenAmount(address tokenAddress, address who) public view returns (uint){\r\n        return earnCalc( tokenAddress, rewards[tokenAddress][who].add(viewRecentRewardTokenAmount(tokenAddress, who))*2 );\r\n    }\r\n    \r\n    function viewLPTokenAmount(address tokenAddress, address who) public view returns (uint){\r\n        return LPTokenBalance[tokenAddress][who];\r\n    }\r\n    \r\n    function viewPooledEthAmount(address tokenAddress, address who) public view returns (uint){\r\n      \r\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        \r\n        return (ethAmount.mul(viewLPTokenAmount(tokenAddress, who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function viewPooledTokenAmount(address tokenAddress, address who) public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\r\n        uint tokenAmount = IERC20(tokenAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (tokenAmount.mul(viewLPTokenAmount(tokenAddress, who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function price() public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(KYE_TOKEN_ADDRESS, WETHAddress);\r\n        \r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(KYE_TOKEN_ADDRESS).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\r\n    }\r\n\r\n    function earnCalc(address token, uint ethTime) public view returns(uint){\r\n        \r\n        if(token == KYE_TOKEN_ADDRESS){\r\n            return ( kyePromo * rewardValue * ethTime ) / ( 31557600 * DECIMAL );\r\n        }else{\r\n            return ( rewardValue * ethTime  ) / ( 31557600 * DECIMAL );\r\n        }\r\n    }\r\n    \r\n    function ethtimeCalc(address token, uint kye) internal view returns(uint){\r\n        \r\n        if(token == KYE_TOKEN_ADDRESS){\r\n            return ( kye.mul(31557600 * DECIMAL) ).div( kyePromo.mul(rewardValue) );\r\n        }else{\r\n            return ( kye.mul(31557600 * DECIMAL) ).div( rewardValue );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethTime\",\"type\":\"uint256\"}],\"name\":\"earnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kyePromo\",\"type\":\"uint256\"}],\"name\":\"updateKyePromo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardValue\",\"type\":\"uint256\"}],\"name\":\"updateRewardValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewLPTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9df5cf6ec2b33b39476c490d2c1d0dc59cca85aa9e30245785fd3f9a16451294"}]}