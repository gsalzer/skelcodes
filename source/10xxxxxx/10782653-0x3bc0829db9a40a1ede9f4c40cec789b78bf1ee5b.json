{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/sogur/interfaces/IPriceBandCalculator.sol\n\n/**\n * @title Price Band Calculator Interface.\n */\ninterface IPriceBandCalculator {\n    /**\n     * @dev Deduct price-band from a given amount of SDR.\n     * @param _sdrAmount The amount of SDR.\n     * @param _sgrTotal The total amount of SGR.\n     * @param _alpha The alpha-value of the current interval.\n     * @param _beta The beta-value of the current interval.\n     * @return The amount of SDR minus the price-band.\n     */\n    function buy(uint256 _sdrAmount, uint256 _sgrTotal, uint256 _alpha, uint256 _beta) external pure returns (uint256);\n\n    /**\n     * @dev Deduct price-band from a given amount of SDR.\n     * @param _sdrAmount The amount of SDR.\n     * @param _sgrTotal The total amount of SGR.\n     * @param _alpha The alpha-value of the current interval.\n     * @param _beta The beta-value of the current interval.\n     * @return The amount of SDR minus the price-band.\n     */\n    function sell(uint256 _sdrAmount, uint256 _sgrTotal, uint256 _alpha, uint256 _beta) external pure returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/sogur/PriceBandCalculator.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title Price Band Calculator.\n */\ncontract PriceBandCalculator is IPriceBandCalculator {\n    string public constant VERSION = \"1.0.1\";\n\n    using SafeMath for uint256;\n\n    // Auto-generated via 'AutoGenerate/PriceBandCalculator/PrintConstants.py'\n    uint256 public constant ONE = 1000000000;\n    uint256 public constant GAMMA = 165000000000000000000000000000000000000000;\n    uint256 public constant DELTA = 15000000;\n\n    /**\n     * Denote r = sdrAmount\n     * Denote n = sgrTotal\n     * Denote a = alpha / A_B_SCALE\n     * Denote b = beta  / A_B_SCALE\n     * Denote c = GAMMA / ONE / A_B_SCALE\n     * Denote d = DELTA / ONE\n     * Denote w = c / (a - b * n) - d\n     * Return r / (1 + w)\n     */\n    function buy(uint256 _sdrAmount, uint256 _sgrTotal, uint256 _alpha, uint256 _beta) external pure returns (uint256) {\n        uint256 reserveRatio = calcReserveRatio(_alpha, _beta, _sgrTotal);\n        return  (_sdrAmount.mul(reserveRatio).mul(ONE)).div((reserveRatio.mul(ONE.sub(DELTA))).add(GAMMA));\n    }\n\n    /**\n     * Denote r = sdrAmount\n     * Denote n = sgrTotal\n     * Denote a = alpha / A_B_SCALE\n     * Denote b = beta  / A_B_SCALE\n     * Denote c = GAMMA / ONE / A_B_SCALE\n     * Denote d = DELTA / ONE\n     * Denote w = c / (a - b * n) - d\n     * Return r * (1 - w)\n     */\n    function sell(uint256 _sdrAmount, uint256 _sgrTotal, uint256 _alpha, uint256 _beta) external pure returns (uint256) {\n        uint256 reserveRatio = calcReserveRatio(_alpha, _beta, _sgrTotal);\n        return (_sdrAmount.mul((reserveRatio.mul(ONE.add(DELTA))).sub(GAMMA))).div(reserveRatio.mul(ONE));\n    }\n\n    function calcReserveRatio(uint256 _alpha, uint256 _beta, uint256 _sgrTotal) public pure returns (uint256){\n        return _alpha.sub(_beta.mul(_sgrTotal));\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_sdrAmount\",\"type\":\"uint256\"},{\"name\":\"_sgrTotal\",\"type\":\"uint256\"},{\"name\":\"_alpha\",\"type\":\"uint256\"},{\"name\":\"_beta\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sdrAmount\",\"type\":\"uint256\"},{\"name\":\"_sgrTotal\",\"type\":\"uint256\"},{\"name\":\"_alpha\",\"type\":\"uint256\"},{\"name\":\"_beta\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_alpha\",\"type\":\"uint256\"},{\"name\":\"_beta\",\"type\":\"uint256\"},{\"name\":\"_sgrTotal\",\"type\":\"uint256\"}],\"name\":\"calcReserveRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAMMA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELTA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceBandCalculator","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}