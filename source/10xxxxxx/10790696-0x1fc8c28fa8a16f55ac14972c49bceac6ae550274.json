{"status":"1","message":"OK","result":[{"SourceCode":"{\"airdrop2.sol\":{\"content\":\"pragma solidity ^0.4.26;\\n\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract Airdrop{\\n  function airdrop(address[] memory toAirdrop,uint[] memory tokensToEach,address tokenAddress) public{\\n    require(toAirdrop.length==tokensToEach.length,\\\"must have same number of addresses and payments\\\");\\n    for(uint i=0;i\\u003ctoAirdrop.length;i++){\\n      ERC20(tokenAddress).transferFrom(msg.sender,toAirdrop[i],tokensToEach[i]);\\n    }\\n  }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"interface ERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address who) external view returns (uint256);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function transfer(address to, uint256 value) external returns (bool);\\n  function approve(address spender, uint256 value) external returns (bool);\\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\n  function burn(uint256 amount) external;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toAirdrop\",\"type\":\"address[]\"},{\"name\":\"tokensToEach\",\"type\":\"uint256[]\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Airdrop","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0508e8027da537c1e1dea515c0393e444a9347765007bdfc8670a9b84f1fc5aa"}]}