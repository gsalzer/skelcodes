{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/Config.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Config {\r\n    // function signature of \"postProcess()\"\r\n    bytes4 constant POSTPROCESS_SIG = 0xc2722916;\r\n\r\n    // Handler post-process type. Others should not happen now.\r\n    enum HandlerType {Token, Custom, Others}\r\n}\r\n\r\n// File: localhost/contracts/lib/LibCache.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary LibCache {\r\n    function setAddress(bytes32[] storage _cache, address _input) internal {\r\n        _cache.push(bytes32(uint256(uint160(_input))));\r\n    }\r\n\r\n    function set(bytes32[] storage _cache, bytes32 _input) internal {\r\n        _cache.push(_input);\r\n    }\r\n\r\n    function setHandlerType(bytes32[] storage _cache, uint256 _input) internal {\r\n        require(_input < uint96(-1), \"Invalid Handler Type\");\r\n        _cache.push(bytes12(uint96(_input)));\r\n    }\r\n\r\n    function setSender(bytes32[] storage _cache, address _input) internal {\r\n        require(_cache.length == 0, \"cache not empty\");\r\n        setAddress(_cache, _input);\r\n    }\r\n\r\n    function getAddress(bytes32[] storage _cache)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        ret = address(uint160(uint256(peek(_cache))));\r\n        _cache.pop();\r\n    }\r\n\r\n    function getSig(bytes32[] storage _cache) internal returns (bytes4 ret) {\r\n        ret = bytes4(peek(_cache));\r\n        _cache.pop();\r\n    }\r\n\r\n    function get(bytes32[] storage _cache) internal returns (bytes32 ret) {\r\n        ret = peek(_cache);\r\n        _cache.pop();\r\n    }\r\n\r\n    function peek(bytes32[] storage _cache)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        require(_cache.length > 0, \"cache empty\");\r\n        ret = _cache[_cache.length - 1];\r\n    }\r\n\r\n    function getSender(bytes32[] storage _cache)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        require(_cache.length > 0, \"cache empty\");\r\n        ret = address(uint160(uint256(_cache[0])));\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Cache.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/// @notice A cache structure composed by a bytes32 array\r\ncontract Cache {\r\n    using LibCache for bytes32[];\r\n\r\n    bytes32[] cache;\r\n\r\n    modifier isCacheEmpty() {\r\n        require(cache.length == 0, \"Cache not empty\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interface/IRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IRegistry {\r\n    function isValid(address handler) external view returns (bool result);\r\n\r\n    function getInfo(address handler) external view returns (bytes32 info);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The entrance of Furucombo\r\n * @author Ben Huang\r\n */\r\ncontract Proxy is Cache, Config {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // keccak256 hash of \"furucombo.handler.registry\"\r\n    bytes32 private constant HANDLER_REGISTRY = 0x6874162fd62902201ea0f4bf541086067b3b88bd802fac9e150fd2d1db584e19;\r\n\r\n    constructor(address registry) public {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            sstore(slot, registry)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Direct transfer from EOA should be reverted.\r\n     * @dev Callback function will be handled here.\r\n     */\r\n    function() external payable {\r\n        require(Address.isContract(msg.sender), \"Not allowed from EOA\");\r\n\r\n        // If triggered by a function call, caller should be registered in registry.\r\n        // The function call will then be forwarded to the location registered in\r\n        // registry.\r\n        if (msg.data.length != 0) {\r\n            require(_isValid(msg.sender), \"Invalid caller\");\r\n\r\n            address target = address(\r\n                bytes20(IRegistry(_getRegistry()).getInfo(msg.sender))\r\n            );\r\n            _exec(target, msg.data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Combo execution function. Including three phases: pre-process,\r\n     * exection and post-process.\r\n     * @param tos The handlers of combo.\r\n     * @param datas The combo datas.\r\n     */\r\n    function batchExec(address[] memory tos, bytes[] memory datas)\r\n        public\r\n        payable\r\n    {\r\n        _preProcess();\r\n        _execs(tos, datas);\r\n        _postProcess();\r\n    }\r\n\r\n    /**\r\n     * @notice The execution interface for callback function to be executed.\r\n     * @dev This function can only be called through the handler, which makes\r\n     * the caller become proxy itself.\r\n     */\r\n    function execs(address[] memory tos, bytes[] memory datas) public payable {\r\n        require(msg.sender == address(this), \"Does not allow external calls\");\r\n        _execs(tos, datas);\r\n    }\r\n\r\n    /**\r\n     * @notice The execution phase.\r\n     * @param tos The handlers of combo.\r\n     * @param datas The combo datas.\r\n     */\r\n    function _execs(address[] memory tos, bytes[] memory datas) internal {\r\n        require(\r\n            tos.length == datas.length,\r\n            \"Tos and datas length inconsistent\"\r\n        );\r\n        for (uint256 i = 0; i < tos.length; i++) {\r\n            _exec(tos[i], datas[i]);\r\n            // Setup the process to be triggered in the post-process phase\r\n            _setPostProcess(tos[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice The execution of a single cube.\r\n     * @param _to The handler of cube.\r\n     * @param _data The cube execution data.\r\n     */\r\n    function _exec(address _to, bytes memory _data)\r\n        internal\r\n        returns (bytes memory result)\r\n    {\r\n        require(_isValid(_to), \"Invalid handler\");\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas, 5000),\r\n                _to,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                0\r\n            )\r\n            let size := returndatasize\r\n\r\n            result := mload(0x40)\r\n            mstore(\r\n                0x40,\r\n                add(result, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r\n            )\r\n            mstore(result, size)\r\n            returndatacopy(add(result, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    revert(add(result, 0x20), size)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Setup the post-process.\r\n     * @param _to The handler of post-process.\r\n     */\r\n    function _setPostProcess(address _to) internal {\r\n        // If the cache is empty, just skip\r\n        // If the top is a custom post-process, replace it with the handler\r\n        // address.\r\n        require(cache.length > 0, \"cache empty\");\r\n        if (cache.length == 1) return;\r\n        else if (cache.peek() == bytes32(bytes12(uint96(HandlerType.Custom)))) {\r\n            cache.pop();\r\n            // Check if the handler is already set.\r\n            if (bytes4(cache.peek()) != 0x00000000) cache.setAddress(_to);\r\n            cache.setHandlerType(uint256(HandlerType.Custom));\r\n        }\r\n    }\r\n\r\n    /// @notice The pre-process phase.\r\n    function _preProcess() internal isCacheEmpty {\r\n        // Set the sender on the top of cache.\r\n        cache.setSender(msg.sender);\r\n    }\r\n\r\n    /// @notice The post-process phase.\r\n    function _postProcess() internal {\r\n        // If the top of cache is HandlerType.Custom (which makes it being zero\r\n        // address when `cache.getAddress()`), get the handler address and execute\r\n        // the handler with it and the post-process function selector.\r\n        // If not, use it as token address and send the token back to user.\r\n        while (cache.length > 1) {\r\n            address addr = cache.getAddress();\r\n            if (addr == address(0)) {\r\n                addr = cache.getAddress();\r\n                _exec(addr, abi.encodeWithSelector(POSTPROCESS_SIG));\r\n            } else {\r\n                uint256 amount = IERC20(addr).balanceOf(address(this));\r\n                if (amount > 0) IERC20(addr).safeTransfer(msg.sender, amount);\r\n            }\r\n        }\r\n\r\n        // Balance should also be returned to user\r\n        uint256 amount = address(this).balance;\r\n        if (amount > 0) msg.sender.transfer(amount);\r\n\r\n        // Pop the msg.sender\r\n        cache.pop();\r\n    }\r\n\r\n    /// @notice Get the registry contract address.\r\n    function _getRegistry() internal view returns (address registry) {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            registry := sload(slot)\r\n        }\r\n    }\r\n\r\n    /// @notice Check if the handler is valid in registry.\r\n    function _isValid(address handler) internal view returns (bool result) {\r\n        return IRegistry(_getRegistry()).isValid(handler);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExec\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Proxy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af1134a479c0d3ecae95cec4490b97305ac17970","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b6e63f436c6ae4002cf8bd1e9df5a878ef1ea4073c5e104d913e07cf9b880aab"}]}