{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\n\n\ninterface IMostERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event LogRebase(uint indexed epoch, uint totalSupply);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function epoch() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function oracle() external view returns (address);\n    function rebaseSetter() external view returns (address);\n    function creator() external view returns (address);\n    function initialize(address) external;\n    function rebase() external returns (uint);\n    function setRebaseSetter(address) external;\n    function setCreator(address) external;\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IMostOracle {\n    function PERIOD() external pure returns (uint);\n\n    function pair() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function mostToken() external view returns (address);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function blockTimestampLast() external view returns (uint32);\n    function update() external;\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\n    function consultNow(uint amountIn) external view returns (uint amountOut, int256 supplyDelta, uint totalSupply);\n}\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n\n    function abs(int a) internal pure returns (int) {\n        require(a != int256(1) << 255, 'ds-math-mul-overflow');\n        return a < 0 ? -a : a;\n    }\n}\n\ncontract MostERC20 is IMostERC20 {\n    using SafeMath for uint;\n    using SafeMath for int;\n\n    string public constant override name = 'mBTC';\n    string public constant override symbol = 'mBTC';\n    uint8 public constant override decimals = 9;\n    uint public override totalSupply;\n    uint public override epoch;\n    mapping(address => uint) private gonBalanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    uint private constant MAX_UINT256 = ~uint256(0);\n    uint private constant INITIAL_FRAGMENTS_SUPPLY = 42 * 10**4 * 10**uint(decimals); // 420K mBTC\n    uint8 private constant RATE_BASE = 100;\n    uint8 private constant UPPER_BOUND = 106;\n    uint8 private constant LOWER_BOUND = 96;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    uint private constant MAX_SUPPLY = 1 * 10**9 * 10**uint(decimals);  // 1 billion mBTC\n\n    uint private gonsPerFragment;\n\n    address public override oracle;\n    address public override rebaseSetter;\n    address public override creator;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event LogRebase(uint indexed epoch, uint totalSupply);\n\n    constructor() public {\n        creator = msg.sender;\n\n        totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        gonBalanceOf[msg.sender] = TOTAL_GONS;\n        gonsPerFragment = TOTAL_GONS / totalSupply;\n\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    function initialize(address _oracle) external override {\n        require(msg.sender == creator, 'MOST: FORBIDDEN'); // sufficient check\n\n        oracle = _oracle;\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        uint gonValue = value.mul(gonsPerFragment);\n        gonBalanceOf[from] = gonBalanceOf[from].sub(gonValue);\n        gonBalanceOf[to] = gonBalanceOf[to].add(gonValue);\n        emit Transfer(from, to, value);\n    }\n\n    function balanceOf(address owner) external view override returns (uint) {\n        return gonBalanceOf[owner] / gonsPerFragment;\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function rebase() external override returns (uint) {\n        require(msg.sender == rebaseSetter, 'MOST: FORBIDDEN'); // sufficient check\n\n        IMostOracle mostOracle = IMostOracle(oracle);\n        mostOracle.update();\n\n        epoch = epoch.add(1);\n\n        uint priceAverage = mostOracle.consult(address(this), 10**uint(decimals));\n\n        uint tokenBRemaining;\n        if (address(this) == mostOracle.token0()) {\n            tokenBRemaining = 10 ** uint(IERC20(mostOracle.token1()).decimals() - 5);\n        } else {\n            tokenBRemaining = 10 ** uint(IERC20(mostOracle.token0()).decimals() - 5);\n        }\n        uint unitBase = RATE_BASE * tokenBRemaining;\n        int256 supplyDelta;\n        if (priceAverage > UPPER_BOUND * tokenBRemaining) {\n            supplyDelta = 0 - int(totalSupply.mul(priceAverage.sub(unitBase)) / priceAverage);\n        } else if (priceAverage < LOWER_BOUND * tokenBRemaining) {\n            supplyDelta = int(totalSupply.mul(unitBase.sub(priceAverage)) / unitBase);\n        } else {\n            supplyDelta = 0;\n        }\n\n        supplyDelta = supplyDelta / 10;\n\n        if (supplyDelta == 0) {\n            emit LogRebase(epoch, totalSupply);\n            return totalSupply;\n        }\n\n        if (supplyDelta < 0) {\n            totalSupply = totalSupply.sub(uint256(supplyDelta.abs()));\n        } else {\n            totalSupply = totalSupply.add(uint256(supplyDelta));\n        }\n\n        if (totalSupply > MAX_SUPPLY) {\n            totalSupply = MAX_SUPPLY;\n        }\n\n        gonsPerFragment = TOTAL_GONS / totalSupply;\n\n        // From this point forward, gonsPerFragment is taken as the source of truth.\n        // We recalculate a new totalSupply to be in agreement with the gonsPerFragment\n        // conversion rate.\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\n        // but this deviation is guaranteed to be < (totalSupply^2)/(TOTAL_GONS - totalSupply).\n        //\n        // In the case of totalSupply <= MAX_UINT128 (our current supply cap), this\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\n        // ever increased, it must be re-included.\n        // totalSupply = TOTAL_GONS / gonsPerFragment\n\n        emit LogRebase(epoch, totalSupply);\n        return totalSupply;\n    }\n\n    function setRebaseSetter(address _rebaseSetter) external override {\n        require(msg.sender == creator, 'MOST: FORBIDDEN');\n        rebaseSetter = _rebaseSetter;\n    }\n\n    function setCreator(address _creator) external override {\n        require(msg.sender == creator, 'MOST: FORBIDDEN');\n        creator = _creator;\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebaseSetter\",\"type\":\"address\"}],\"name\":\"setRebaseSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MostERC20","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}