{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GlobalConfig is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public communityFundRatio = 10;\r\n    uint256 public minReserveRatio = 10;\r\n    uint256 public maxReserveRatio = 20;\r\n    uint256 public liquidationThreshold = 85;\r\n    uint256 public liquidationDiscountRatio = 95;\r\n    uint256 public compoundSupplyRateWeights = 4;\r\n    uint256 public compoundBorrowRateWeights = 6;\r\n    uint256 public rateCurveSlope = 15 * 10 ** 16;\r\n    uint256 public rateCurveConstant = 3 * 10 ** 16;\r\n    uint256 public deFinerRate = 10;\r\n    address payable public deFinerCommunityFund = msg.sender;\r\n\r\n    address public bank;                               // the Bank contract\r\n    address public savingAccount;             // the SavingAccount contract\r\n    address public tokenInfoRegistry;     // the TokenRegistry contract\r\n    address public accounts;                       // the Accounts contract\r\n    address public constants;                      // the constants contract\r\n    address public chainLink;\r\n\r\n    event CommunityFundRatioUpdated(uint256 indexed communityFundRatio);\r\n    event MinReserveRatioUpdated(uint256 indexed minReserveRatio);\r\n    event MaxReserveRatioUpdated(uint256 indexed maxReserveRatio);\r\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\r\n    event LiquidationDiscountRatioUpdated(uint256 indexed liquidationDiscountRatio);\r\n    event CompoundSupplyRateWeightsUpdated(uint256 indexed compoundSupplyRateWeights);\r\n    event CompoundBorrowRateWeightsUpdated(uint256 indexed compoundBorrowRateWeights);\r\n    event rateCurveSlopeUpdated(uint256 indexed rateCurveSlope);\r\n    event rateCurveConstantUpdated(uint256 indexed rateCurveConstant);\r\n    event ConstantUpdated(address indexed constants);\r\n    event BankUpdated(address indexed bank);\r\n    event SavingAccountUpdated(address indexed savingAccount);\r\n    event TokenInfoRegistryUpdated(address indexed tokenInfoRegistry);\r\n    event AccountsUpdated(address indexed accounts);\r\n    event DeFinerCommunityFundUpdated(address indexed deFinerCommunityFund);\r\n    event DeFinerRateUpdated(uint256 indexed deFinerRate);\r\n    event ChainLinkUpdated(address indexed chainLink);\r\n\r\n\r\n    function initialize(\r\n        address _bank,\r\n        address _savingAccount,\r\n        address _tokenInfoRegistry,\r\n        address _accounts,\r\n        address _constants,\r\n        address _chainLink\r\n    ) public onlyOwner {\r\n        bank = _bank;\r\n        savingAccount = _savingAccount;\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n        accounts = _accounts;\r\n        constants = _constants;\r\n        chainLink = _chainLink;\r\n    }\r\n\r\n    /**\r\n     * Update the community fund (commision fee) ratio.\r\n     * @param _communityFundRatio the new ratio\r\n     */\r\n    function updateCommunityFundRatio(uint256 _communityFundRatio) external onlyOwner {\r\n        if (_communityFundRatio == communityFundRatio)\r\n            return;\r\n\r\n        require(_communityFundRatio > 0 && _communityFundRatio < 100,\r\n            \"Invalid community fund ratio.\");\r\n        communityFundRatio = _communityFundRatio;\r\n\r\n        emit CommunityFundRatioUpdated(_communityFundRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the minimum reservation reatio\r\n     * @param _minReserveRatio the new value of the minimum reservation ratio\r\n     */\r\n    function updateMinReserveRatio(uint256 _minReserveRatio) external onlyOwner {\r\n        if (_minReserveRatio == minReserveRatio)\r\n            return;\r\n\r\n        require(_minReserveRatio > 0 && _minReserveRatio < maxReserveRatio,\r\n            \"Invalid min reserve ratio.\");\r\n        minReserveRatio = _minReserveRatio;\r\n\r\n        emit MinReserveRatioUpdated(_minReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the maximum reservation reatio\r\n     * @param _maxReserveRatio the new value of the maximum reservation ratio\r\n     */\r\n    function updateMaxReserveRatio(uint256 _maxReserveRatio) external onlyOwner {\r\n        if (_maxReserveRatio == maxReserveRatio)\r\n            return;\r\n\r\n        require(_maxReserveRatio > minReserveRatio && _maxReserveRatio < 100,\r\n            \"Invalid max reserve ratio.\");\r\n        maxReserveRatio = _maxReserveRatio;\r\n\r\n        emit MaxReserveRatioUpdated(_maxReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation threshold, i.e. the LTV that will trigger the liquidation.\r\n     * @param _liquidationThreshold the new threshhold value\r\n     */\r\n    function updateLiquidationThreshold(uint256 _liquidationThreshold) external onlyOwner {\r\n        if (_liquidationThreshold == liquidationThreshold)\r\n            return;\r\n\r\n        require(_liquidationThreshold > 0 && _liquidationThreshold < liquidationDiscountRatio,\r\n            \"Invalid liquidation threshold.\");\r\n        liquidationThreshold = _liquidationThreshold;\r\n\r\n        emit LiquidationThresholdUpdated(_liquidationThreshold);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation discount\r\n     * @param _liquidationDiscountRatio the new liquidation discount\r\n     */\r\n    function updateLiquidationDiscountRatio(uint256 _liquidationDiscountRatio) external onlyOwner {\r\n        if (_liquidationDiscountRatio == liquidationDiscountRatio)\r\n            return;\r\n\r\n        require(_liquidationDiscountRatio > liquidationThreshold && _liquidationDiscountRatio < 100,\r\n            \"Invalid liquidation discount ratio.\");\r\n        liquidationDiscountRatio = _liquidationDiscountRatio;\r\n\r\n        emit LiquidationDiscountRatioUpdated(_liquidationDiscountRatio);\r\n    }\r\n\r\n    /**\r\n     * Medium value of the reservation ratio, which is the value that the pool try to maintain.\r\n     */\r\n    function midReserveRatio() public view returns(uint256){\r\n        return minReserveRatio.add(maxReserveRatio).div(2);\r\n    }\r\n\r\n    function updateCompoundSupplyRateWeights(uint256 _compoundSupplyRateWeights) external onlyOwner{\r\n        compoundSupplyRateWeights = _compoundSupplyRateWeights;\r\n\r\n        emit CompoundSupplyRateWeightsUpdated(_compoundSupplyRateWeights);\r\n    }\r\n\r\n    function updateCompoundBorrowRateWeights(uint256 _compoundBorrowRateWeights) external onlyOwner{\r\n        compoundBorrowRateWeights = _compoundBorrowRateWeights;\r\n\r\n        emit CompoundBorrowRateWeightsUpdated(_compoundBorrowRateWeights);\r\n    }\r\n\r\n    function updaterateCurveSlope(uint256 _rateCurveSlope) external onlyOwner{\r\n        rateCurveSlope = _rateCurveSlope;\r\n\r\n        emit rateCurveSlopeUpdated(_rateCurveSlope);\r\n    }\r\n\r\n    function updaterateCurveConstant(uint256 _rateCurveConstant) external onlyOwner{\r\n        rateCurveConstant = _rateCurveConstant;\r\n\r\n        emit rateCurveConstantUpdated(_rateCurveConstant);\r\n    }\r\n\r\n    function updateBank(address _bank) external onlyOwner{\r\n        bank = _bank;\r\n\r\n        emit BankUpdated(_bank);\r\n    }\r\n\r\n    function updateSavingAccount(address _savingAccount) external onlyOwner{\r\n        savingAccount = _savingAccount;\r\n\r\n        emit SavingAccountUpdated(_savingAccount);\r\n    }\r\n\r\n    function updateTokenInfoRegistry(address _tokenInfoRegistry) external onlyOwner{\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n\r\n        emit TokenInfoRegistryUpdated(_tokenInfoRegistry);\r\n    }\r\n\r\n    function updateAccounts(address _accounts) external onlyOwner{\r\n        accounts = _accounts;\r\n\r\n        emit AccountsUpdated(_accounts);\r\n    }\r\n\r\n    function updateConstant(address _constants) external onlyOwner{\r\n        constants = _constants;\r\n\r\n        emit ConstantUpdated(_constants);\r\n    }\r\n\r\n    function updatedeFinerCommunityFund(address payable _deFinerCommunityFund) external onlyOwner{\r\n        deFinerCommunityFund = _deFinerCommunityFund;\r\n\r\n        emit DeFinerCommunityFundUpdated(_deFinerCommunityFund);\r\n    }\r\n\r\n    function updatedeFinerRate(uint256 _deFinerRate) external onlyOwner{\r\n        require(_deFinerRate <= 100,\"_deFinerRate cannot exceed 100\");\r\n        deFinerRate = _deFinerRate;\r\n\r\n        emit DeFinerRateUpdated(_deFinerRate);\r\n    }\r\n\r\n    function updateChainLink(address _chainLink) external onlyOwner{\r\n        chainLink = _chainLink;\r\n\r\n        emit ChainLinkUpdated(_chainLink);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"AccountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"BankUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chainLink\",\"type\":\"address\"}],\"name\":\"ChainLinkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"communityFundRatio\",\"type\":\"uint256\"}],\"name\":\"CommunityFundRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"compoundBorrowRateWeights\",\"type\":\"uint256\"}],\"name\":\"CompoundBorrowRateWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"compoundSupplyRateWeights\",\"type\":\"uint256\"}],\"name\":\"CompoundSupplyRateWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"constants\",\"type\":\"address\"}],\"name\":\"ConstantUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deFinerCommunityFund\",\"type\":\"address\"}],\"name\":\"DeFinerCommunityFundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deFinerRate\",\"type\":\"uint256\"}],\"name\":\"DeFinerRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidationDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"LiquidationDiscountRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"}],\"name\":\"LiquidationThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxReserveRatio\",\"type\":\"uint256\"}],\"name\":\"MaxReserveRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minReserveRatio\",\"type\":\"uint256\"}],\"name\":\"MinReserveRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"savingAccount\",\"type\":\"address\"}],\"name\":\"SavingAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenInfoRegistry\",\"type\":\"address\"}],\"name\":\"TokenInfoRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateCurveConstant\",\"type\":\"uint256\"}],\"name\":\"rateCurveConstantUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateCurveSlope\",\"type\":\"uint256\"}],\"name\":\"rateCurveSlopeUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityFundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundBorrowRateWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compoundSupplyRateWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deFinerCommunityFund\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deFinerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_savingAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenInfoRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_constants\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLink\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationDiscountRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"midReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateCurveConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateCurveSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"savingAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInfoRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accounts\",\"type\":\"address\"}],\"name\":\"updateAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"updateBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainLink\",\"type\":\"address\"}],\"name\":\"updateChainLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_communityFundRatio\",\"type\":\"uint256\"}],\"name\":\"updateCommunityFundRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundBorrowRateWeights\",\"type\":\"uint256\"}],\"name\":\"updateCompoundBorrowRateWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundSupplyRateWeights\",\"type\":\"uint256\"}],\"name\":\"updateCompoundSupplyRateWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constants\",\"type\":\"address\"}],\"name\":\"updateConstant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationDiscountRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxReserveRatio\",\"type\":\"uint256\"}],\"name\":\"updateMaxReserveRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReserveRatio\",\"type\":\"uint256\"}],\"name\":\"updateMinReserveRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_savingAccount\",\"type\":\"address\"}],\"name\":\"updateSavingAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenInfoRegistry\",\"type\":\"address\"}],\"name\":\"updateTokenInfoRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_deFinerCommunityFund\",\"type\":\"address\"}],\"name\":\"updatedeFinerCommunityFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deFinerRate\",\"type\":\"uint256\"}],\"name\":\"updatedeFinerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateCurveConstant\",\"type\":\"uint256\"}],\"name\":\"updaterateCurveConstant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateCurveSlope\",\"type\":\"uint256\"}],\"name\":\"updaterateCurveSlope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GlobalConfig","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a7c07d22f856a92a3b89c206c3fdf22bb5dd5441d92ce6292bcb4af1e42fa555"}]}