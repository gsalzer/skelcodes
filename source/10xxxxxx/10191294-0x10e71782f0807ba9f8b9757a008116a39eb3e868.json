{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract TrustWay {\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    \r\n\r\n    address payable public ownerWallet;\r\n\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 64 days;\r\n    uint RENEWAL_NOT_EARLIER = 64 days;\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n    \r\n    \r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n   \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n        // 0.10 - level price , 0.02 - commission for the first time entry\r\n        LEVEL_PRICE[1] = 0.10 ether; \r\n        LEVEL_PRICE[2] = 0.20 ether;\r\n        LEVEL_PRICE[3] = 0.40 ether;\r\n        LEVEL_PRICE[4] = 0.80 ether;\r\n        LEVEL_PRICE[5] = 1.60 ether;\r\n        LEVEL_PRICE[6] = 3.20 ether;\r\n        LEVEL_PRICE[7] = 6.40 ether;\r\n        LEVEL_PRICE[8] = 12.80 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        users[ownerWallet].levelExpired[1] = 77777777777;\r\n        users[ownerWallet].levelExpired[2] = 77777777777;\r\n        users[ownerWallet].levelExpired[3] = 77777777777;\r\n        users[ownerWallet].levelExpired[4] = 77777777777;\r\n        users[ownerWallet].levelExpired[5] = 77777777777;\r\n        users[ownerWallet].levelExpired[6] = 77777777777;\r\n        users[ownerWallet].levelExpired[7] = 77777777777;\r\n        users[ownerWallet].levelExpired[8] = 77777777777;\r\n    }\r\n    \r\n\r\n    function () external payable {\r\n\r\n        uint level;\r\n        // User extend/buy level 1.\r\n        if((msg.value == LEVEL_PRICE[1]) && (users[msg.sender].isExist)){  \r\n            level = 1;\r\n        }\r\n        // User enters for the first time.\r\n        else if((msg.value == LEVEL_PRICE[1]+(0.02 ether))  && !(users[msg.sender].isExist)){\r\n            level = 1;\r\n        }\r\n        else if(msg.value == LEVEL_PRICE[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_PRICE[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_PRICE[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_PRICE[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_PRICE[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_PRICE[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_PRICE[8]){\r\n            level = 8;\r\n        }\r\n        else {\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n        if(users[msg.sender].isExist){\r\n            buyLevel(level);\r\n        } else if(level == 1) {\r\n            uint refId = 0;\r\n \r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if (users[referrer].isExist){\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert('Incorrect referrer');\r\n            }\r\n\r\n            regUser(refId);\r\n        } else {\r\n            revert(\"Please buy first level for 0.10 ETH\");\r\n        }\r\n    }\r\n    \r\n\r\n    function regUser(uint _referrerID) internal {\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n        }\r\n\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender,true); // User enters fisrt time, so commission fee will be deducted.\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) internal {\r\n        \r\n        require(users[msg.sender].levelExpired[_level] < now + RENEWAL_NOT_EARLIER, 'The level has already been extended for a long time. Try later');\r\n\r\n        if(_level == 1){\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            for(uint l =_level-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0){\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_level, msg.sender,false);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user,bool _feeStatus) internal {\r\n        \r\n        address referrer = getUserReferrer(_user, _level);\r\n\r\n        if(!users[referrer].isExist){\r\n            referrer = userList[1];\r\n        }\r\n\r\n        if(users[referrer].levelExpired[_level] >= now ){\r\n            require(address(uint160(referrer)).send(LEVEL_PRICE[_level]), \"referrer transfer failed\");\r\n            // Fee for first time\r\n            if(_feeStatus){\r\n                require(ownerWallet.send((0.02 ether)), \"fee transfer failed\");\r\n            }\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n        } else {\r\n            emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            payForLevel(_level,referrer,_feeStatus);\r\n        }\r\n    }\r\n    \r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        address[] memory referrals = new address[](2046);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i =0; i<2046;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT){\r\n                if(i<1022){\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n\r\n    }\r\n    \r\n    function getUserReferrer(address _user, uint _level) public view returns (address) {\r\n      if (_level == 0 || _user == address(0)) {\r\n        return _user;\r\n      }\r\n\r\n      return this.getUserReferrer(userList[users[_user].referrerID], _level - 1);\r\n    }    \r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n        \r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrustWay","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8d55d26ec8a044af73c676dd1335e0514d80baea80d7842a46985b87f26895fa"}]}