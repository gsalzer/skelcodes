{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n\"Participation in Immutable Transparency (PITcoin)\r\n\r\nRegulating the Regulators\r\n\r\nTaking the business out of law, banking and politics.\"\r\n\r\n\"A Blockchain For What Is Best Creation\"\r\n\r\n*/\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface Erc20 {\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\n\r\nlibrary Math {\r\n    /// @return uint256 = a + b\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /// @return uint256 = a - b\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"too big value\");\r\n        return a - b;\r\n    }\r\n\r\n    /// @return uint256 = a * b\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /// @return uint256 = a / b\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /// @return int256 = a + b\r\n    function signedAdd(int256 a, uint256 b) internal pure returns (int256) {\r\n        int256 c = a + int256(b);\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /// @return int256 = a - b\r\n    function signedSub(int256 a, uint256 b) internal pure returns (int256) {\r\n        int256 c = a - int256(b);\r\n        assert(c <= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title PITcoin Bond\r\n/// @author aqoleg\r\ncontract Token {\r\n    using Math for uint256;\r\n    using Math for int256;\r\n\r\n    uint256 public totalSupply; // tokens, erc20\r\n    mapping(address => uint256) public balanceOf; // tokens, erc20\r\n    mapping(address => mapping(address => uint256)) public allowance; // tokens = allowance[owner][spender], erc20\r\n    uint8 public constant decimals = 18; // erc20\r\n    string public name; // erc20\r\n    string public symbol; // erc20\r\n\r\n    // wei*price = totalSupply + totalSupply*profitPerToken/multiplicator - sum(payoutsOf) + sum(refDividendsOf)\r\n    // dividendsOf = balanceOf*profitPerToken/multiplicator - payoutsOf\r\n    // allDividends = dividendsOf + refDividendsOf\r\n    uint256 public constant price = 10; // tokens/wei\r\n    uint256 public profitPerToken;\r\n    uint256 public constant multiplicator = 2**64;\r\n    mapping(address => int256) public payoutsOf; // tokens\r\n    mapping(address => uint256) public refDividendsOf; // tokens\r\n    uint256 public constant refRequirement = 10**19; // tokens\r\n\r\n    /// @dev erc20\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /// @dev erc20\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// @param _increase increase of the dividends, tokens*2**-64\r\n    event Sell(address indexed _seller, uint256 _value, uint256 _increase);\r\n\r\n    event Withdraw(address indexed _owner, uint256 _value);\r\n\r\n    event Reinvest(address indexed _owner, uint256 _value);\r\n\r\n    /// @param _increase increase of the dividends, tokens*2**-64\r\n    event Buy(address indexed _buyer, address _referral, uint256 _tokens, uint256 _increase);\r\n\r\n    /// @param _increase increase of the dividends, tokens*2**-64\r\n    event Send(address indexed _sender, uint256 _increase);\r\n\r\n    constructor(string memory _name, string memory _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /// @notice converts 90% of incoming eth in tokens, spreads rest as dividends\r\n    receive() external payable {\r\n        buy(address(0));\r\n    }\r\n\r\n    /// @notice keep clean from other tokens\r\n    function clean(address _contract, uint256 _value) external {\r\n        Erc20(_contract).transfer(msg.sender, _value);\r\n    }\r\n\r\n    /// @notice converts 90% in user dividends, spreads rest as dividends\r\n    function sell(uint256 _tokens) external {\r\n        // w*pr = T + T*ppt/m - P + R\r\n        // w*pr = T-t + (T-t)*(ppt + f*m/(T-t))/m - (P - ((t-f) + t*ppt/m)) + R\r\n\r\n        uint256 fee = _tokens.div(10);\r\n        uint256 withdraw = _tokens.sub(fee);\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_tokens);\r\n        totalSupply = totalSupply.sub(_tokens);\r\n        require(totalSupply != 0, \"zero total supply\");\r\n        emit Transfer(msg.sender, address(0), _tokens);\r\n\r\n        uint256 payout = withdraw.add(_tokens.mul(profitPerToken).div(multiplicator));\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedSub(payout);\r\n\r\n        uint256 increaseProfitPerToken = fee.mul(multiplicator).div(totalSupply);\r\n        profitPerToken = profitPerToken.add(increaseProfitPerToken);\r\n\r\n        emit Sell(msg.sender, _tokens, increaseProfitPerToken);\r\n    }\r\n\r\n    /// @notice withdraws all of the dividends, including referral\r\n    function withdraw() external {\r\n        // w*pr = T + T*ppt/m - P + R\r\n        // (w - (d+r)/pr)*pr = T + T*ppt/m - (P + d) + (R - r)\r\n\r\n        uint256 dividends = dividendsOf(msg.sender);\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(dividends);\r\n\r\n        dividends = dividends.add(refDividendsOf[msg.sender]);\r\n        refDividendsOf[msg.sender] = 0;\r\n\r\n        require(dividends != 0, \"zero dividends\");\r\n\r\n        emit Withdraw(msg.sender, dividends);\r\n\r\n        msg.sender.transfer(dividends.div(price));\r\n    }\r\n\r\n    /// @notice converts all of the dividends (including referral) in tokens\r\n    function reinvest() external {\r\n        // w*pr = T + T*ppt/m - P + R\r\n        // w*pr = T+d+r + (T+d+r)*ppt/m - (P + d + (d+r)*ppt/m) + (R - r)\r\n\r\n        uint256 dividends = dividendsOf(msg.sender);\r\n\r\n        uint256 allDividends = dividends.add(refDividendsOf[msg.sender]);\r\n        refDividendsOf[msg.sender] = 0;\r\n\r\n        require(allDividends != 0, \"zero dividends\");\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(allDividends);\r\n        totalSupply = totalSupply.add(allDividends);\r\n        emit Transfer(address(0), msg.sender, allDividends);\r\n\r\n        uint256 payout = dividends.add(allDividends.mul(profitPerToken).div(multiplicator));\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(payout);\r\n\r\n        emit Reinvest(msg.sender, allDividends);\r\n    }\r\n\r\n    /// @notice converts 90% of incoming eth in tokens, spreads rest as dividends\r\n    /// @param _ref referral address that gets 3%, or zero address\r\n    function buy(address _ref) public payable {\r\n        // w*pr = T + T*ppt/m - P + R\r\n        // with ref\r\n        // in*pr = t + f + r\r\n        // (w + in)*pr = T+t + (T+t)*(ppt + f*m/T)/m - (P + t*(ppt + f*m/T)/m) + (R + r)\r\n        // no ref\r\n        // in*pr = t + f\r\n        // (w + in)*pr = T+t + (T+t)*(ppt + f*m/T)/m - (P + t*(ppt + f*m/T)/m) + R\r\n        // first\r\n        // in*pr = t\r\n        // (w + in)*pr = T+t + (T+t)*ppt/m - (P + t*ppt/m) + R\r\n\r\n        uint256 tokens = msg.value.mul(price);\r\n        uint256 fee = tokens.div(10);\r\n        tokens = tokens.sub(fee);\r\n\r\n        if (_ref != address(0)) {\r\n            require(_ref != msg.sender, \"_ref is sender\");\r\n            require(balanceOf[_ref] >= refRequirement, \"small balance\");\r\n            uint256 refBonus = fee.mul(3).div(10);\r\n            fee = fee.sub(refBonus);\r\n            refDividendsOf[_ref] = refDividendsOf[_ref].add(refBonus);\r\n        }\r\n\r\n        uint256 increaseProfitPerToken = 0;\r\n        if (totalSupply != 0) {\r\n            increaseProfitPerToken = fee.mul(multiplicator).div(totalSupply);\r\n            profitPerToken = profitPerToken.add(increaseProfitPerToken);\r\n        } else {\r\n            tokens = tokens.add(fee);\r\n        }\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n\r\n        uint256 payout = tokens.mul(profitPerToken).div(multiplicator);\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(payout);\r\n\r\n        emit Buy(msg.sender, _ref, tokens, increaseProfitPerToken);\r\n    }\r\n\r\n    /// @notice transfers tokens, spreads plus 5% among all\r\n    /// @dev erc20\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        send(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice transfers tokens, spreads plus 5% among all\r\n    /// @dev erc20\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n\r\n        send(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice approves other address to spend your tokens\r\n    /// @dev erc20\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0), \"zero _spender\");\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice not including referral dividends\r\n    function dividendsOf(address _owner) public view returns (uint256) {\r\n        // dividendsOf = balanceOf*profitPerToken/multiplicator - payoutsOf\r\n\r\n        uint256 a = balanceOf[_owner].mul(profitPerToken).div(multiplicator);\r\n        int256 b = payoutsOf[_owner];\r\n        // a - b\r\n        if (b < 0) {\r\n            return a.add(uint256(-b));\r\n        } else {\r\n            uint256 c = uint256(b);\r\n            if (c > a) {\r\n                return 0;\r\n            }\r\n            return a - c;\r\n        }\r\n    }\r\n\r\n    function send(address _from, address _to, uint256 _value) private {\r\n        // w*pr = T + T*ppt/m - P + R\r\n        // newPpt = ppt + f*m/(T-v-f)\r\n        // w*pr = T-f + (T-f)*newPpt/m - (P - (v+f)*ppt/m + v*newPpt/m) + R\r\n\r\n        require(_to != address(0), \"zero _to\");\r\n        uint256 fee = _value.div(20);\r\n        uint256 cost = _value.add(fee);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(cost);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        totalSupply = totalSupply.sub(fee);\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_from, address(0), fee);\r\n\r\n        uint256 payout = cost.mul(profitPerToken).div(multiplicator);\r\n        payoutsOf[_from] = payoutsOf[_from].signedSub(payout);\r\n\r\n        uint256 increaseProfitPerToken = fee.mul(multiplicator).div(totalSupply.sub(_value));\r\n        profitPerToken = profitPerToken.add(increaseProfitPerToken);\r\n\r\n        payout = _value.mul(profitPerToken).div(multiplicator);\r\n        payoutsOf[_to] = payoutsOf[_to].signedAdd(payout);\r\n\r\n        emit Send(msg.sender, increaseProfitPerToken);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Token","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c504954636f696e20426f6e64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035049540000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8fe178f4f5026beeb9606ad79501ab5dac3912d1261efb2eb85be16d958e212a"}]}