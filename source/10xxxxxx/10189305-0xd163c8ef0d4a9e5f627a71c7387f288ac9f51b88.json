{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract Mandelbrot {\r\n  int xMin = -8601;\r\n  int xMax = 2867;\r\n  int yMin = -4915;\r\n  int yMax = 4915;\r\n  int maxI = 30;\r\n  int dx = (xMax - xMin) / 36;\r\n  int dy = (yMax - yMin) / 12;\r\n  int CY = yMax;\r\n  string ascii = '$ .,-~@*?&()%+=';\r\n  string[] mandel;\r\n\r\n  function generator() public payable returns (bool) {\r\n    require(mandel.length < 13, \"Already yeeted.\");\r\n    int yeet = 1;\r\n    int cy = CY;\r\n    for (cy; cy>=xMin; cy-=dy) {\r\n      int byteChar = 0;\r\n      string memory sL = new string(100);\r\n      bytes memory scanLine = bytes(sL);\r\n      int cx = xMin;\r\n      for (cx; cx<=xMax; cx+=dx) {\r\n        int x = 0; int y = 0; int x2 = 0; int y2 = 0;\r\n        int i = 0;\r\n        for (i; i < maxI && x2 + y2 <= 16384; i++) {\r\n            y = ((x * y) / 2**11) + cy;\r\n            x = x2 - y2 + cx;\r\n            x2 = (x * x) / 2**12;\r\n            y2= (y * y) / 2**12;\r\n        }\r\n\r\n        bytes memory char = bytes(ascii);\r\n        scanLine[uint(byteChar)] = char[uint(i%15)];\r\n        byteChar++;\r\n      }\r\n      mandel.push(string(abi.encodePacked(string(scanLine), '\\n')));\r\n      CY -= dy;\r\n      if (yeet == 6 || mandel.length == 13) {\r\n        return true; \r\n      }\r\n      yeet++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function viewer() public view returns (string memory) {\r\n    string memory mandelbro = string(abi.encodePacked(mandel[0]));\r\n    for (uint iter = 1; iter < mandel.length; iter++) {\r\n      mandelbro = string(abi.encodePacked(mandelbro, mandel[iter]));\r\n    }\r\n    return mandelbro;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"generator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Mandelbrot","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b34b25acd5f54c85bec42c08a77371238609b91966920a5257ae6e58c2037d5b"}]}