{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal view returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal view returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal view returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal view returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function safePercent(uint256 a, uint256 b) internal view returns (uint256) {\r\n        return safeDiv(safeMul(a, b), 100);\r\n    }\r\n\r\n    function assert(bool assertion) internal view {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract SettingInterface {\r\n    function sponsorRate() public view returns (uint256 value);\r\n\r\n    function firstRate() public view returns (uint256 value);\r\n\r\n    function lastRate() public view returns (uint256 value);\r\n\r\n    function gameMaxRate() public view returns (uint256 value);\r\n\r\n    function keyRate() public view returns (uint256 value);\r\n\r\n    function shareRate() public view returns (uint256 value);\r\n\r\n    function superRate() public view returns (uint256 value);\r\n\r\n    function leaderRate() public view returns (uint256 value);\r\n\r\n    function auctioneerRate() public view returns (uint256 value);\r\n\r\n    function withdrawFeeRate() public view returns (uint256 value);\r\n\r\n}\r\n\r\ncontract ErrorReporter {\r\n    event Failure(uint error, uint256 gameCount, uint detail);\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED,\r\n        GAME_STATUS,\r\n        GAME_TIME_OUT,\r\n        MIN_LIMIT,\r\n        ALREADY_WITHDRAWAL,\r\n        NOT_COMMISSION,\r\n        CONTRACT_PAUSED\r\n    }\r\n    function fail(Error err, uint256 gameCount, uint info) internal returns (uint) {\r\n        emit Failure(uint(err), gameCount, info);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\ncontract richMan is SafeMath, ErrorReporter {\r\n\r\n    uint constant mantissaOne = 10 ** 18;\r\n    uint constant mantissaOneTenth = 10 ** 17;\r\n    uint constant mantissaOneHundredth = 10 ** 16;\r\n\r\n    address public admin;\r\n    address public finance;\r\n    uint256 public lastRemainAmount = 0;\r\n    bool public paused;\r\n\r\n    uint256 startAmount = 5 * mantissaOne;\r\n    uint256 minAmount = mantissaOneHundredth;\r\n    uint256 initTimer = 600;\r\n\r\n    SettingInterface setting;\r\n    uint256 public currentGameCount;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public shareNode;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public superNode;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public leaderShip;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public auctioneer;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public sponsorCommission;\r\n    mapping(uint256 => mapping(address => bool)) public commissionAddress;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public userInvestment;\r\n\r\n    mapping(uint256 => mapping(address => bool)) public userWithdrawFlag;\r\n\r\n    mapping(uint256 => address[]) public firstAddress;\r\n    mapping(uint256 => address[]) public lastAddress;\r\n\r\n    struct UserKey {\r\n        uint256 gameCount;\r\n        uint256 number;\r\n    }\r\n\r\n    mapping(address => UserKey[]) public userKey;\r\n\r\n    struct MaxPlay {\r\n        address user;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(uint256 => MaxPlay) public gameMax;\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        finance = msg.sender;\r\n        currentGameCount = 0;\r\n        game[0].status = 2;\r\n    }\r\n\r\n\r\n    struct Game {\r\n        uint256 timer;\r\n        uint256 lastTime;\r\n        uint256 minAmount;\r\n        uint256 doubleAmount;\r\n        uint256 investmentAmount;\r\n        uint256 initAmount;\r\n        uint256 totalKey;\r\n        uint8 status;\r\n    }\r\n\r\n    mapping(uint256 => Game) public game;\r\n\r\n    event SetAdmin(address newAdmin);\r\n    event SetFinance(address newFinance);\r\n    event PlayGame(address user, address sponsor, uint256 value);\r\n    event WithdrawCommission(address user, uint256 gameCount, uint256 amount);\r\n    event CalculateGame(uint256 gameCount, uint256 amount);\r\n    event SetPaused(bool newState);\r\n\r\n\r\n    function setPaused(bool requestedState) public returns (uint) {\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, 0, 0);\r\n        }\r\n\r\n        paused = requestedState;\r\n        emit SetPaused(requestedState);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    function setAdmin(address newAdmin) public returns (uint){\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, 0, 0);\r\n        }\r\n        admin = newAdmin;\r\n        emit SetAdmin(admin);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    function setSetting(address value) public returns (uint){\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, 0, 0);\r\n        }\r\n        setting = SettingInterface(value);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    function setFinance(address newFinance) public returns (uint){\r\n        if (msg.sender != finance) {\r\n            return fail(Error.UNAUTHORIZED, 0, 0);\r\n        }\r\n        finance = newFinance;\r\n        emit SetFinance(finance);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    function() payable public {\r\n        if (msg.sender != admin) {\r\n            fail(Error.UNAUTHORIZED, 0, 0);\r\n            return;\r\n        }\r\n        if (game[currentGameCount].status != 2) {\r\n            msg.sender.transfer(msg.value);\r\n            fail(Error.GAME_STATUS, currentGameCount, game[currentGameCount].status);\r\n            return;\r\n        }\r\n        currentGameCount += 1;\r\n        game[currentGameCount].timer = initTimer;\r\n        game[currentGameCount].lastTime = now;\r\n        game[currentGameCount].minAmount = minAmount;\r\n        game[currentGameCount].doubleAmount = startAmount * 2;\r\n        game[currentGameCount].investmentAmount = lastRemainAmount;\r\n        game[currentGameCount].initAmount = msg.value;\r\n        game[currentGameCount].totalKey = game[currentGameCount - 1].totalKey;\r\n        game[currentGameCount].status = 1;\r\n\r\n    }\r\n\r\n    function settTimer(uint256 gameCount) internal {\r\n        uint256 remainTime = safeSub(game[gameCount].timer, safeSub(now, game[gameCount].lastTime));\r\n        if (remainTime >= initTimer) {\r\n            remainTime += 10;\r\n        } else {\r\n            remainTime += 30;\r\n        }\r\n        game[gameCount].timer = remainTime;\r\n        game[gameCount].lastTime = now;\r\n    }\r\n\r\n    function updateUserKey(uint256 gameCount, address user, uint256 number){\r\n        if (userKey[user].length == 0) {\r\n            userKey[user].push(UserKey(gameCount, number));\r\n            return;\r\n        }\r\n        if (userKey[user][userKey[user].length - 1].gameCount < gameCount) {\r\n            userKey[user].push(UserKey(gameCount, userKey[user][userKey[user].length - 1].number + number));\r\n        } else {\r\n            if (userKey[user].length == 1) {\r\n                userKey[user][userKey[user].length - 1].number = number;\r\n            } else {\r\n                userKey[user][userKey[user].length - 1].number = userKey[user][userKey[user].length - 2].number + number;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function clearUserKey(uint256 gameCount, address user){\r\n        if (userKey[user].length == 0) {\r\n            return;\r\n        }\r\n        if (userKey[user][userKey[user].length - 1].gameCount == gameCount) {\r\n            if (userKey[user].length == 1) {\r\n                userKey[user][0].number = 0;\r\n            } else {\r\n                userKey[user][userKey[user].length - 1].number = userKey[user][userKey[user].length - 2].number;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function updateSponsorCommission(uint256 gameCount, address sponsorUser, uint256 amount) internal {\r\n        if (sponsorCommission[gameCount][sponsorUser] == 0) {\r\n            commissionAddress[gameCount][sponsorUser] = true;\r\n            uint256 keys = safeDiv(userInvestment[gameCount][sponsorUser], mantissaOneTenth);\r\n            game[gameCount].totalKey = safeSub(game[gameCount].totalKey, keys);\r\n            clearUserKey(gameCount, sponsorUser);\r\n        }\r\n        sponsorCommission[gameCount][sponsorUser] = safeAdd(sponsorCommission[gameCount][sponsorUser], safePercent(amount, setting.sponsorRate()));\r\n    }\r\n\r\n\r\n    function updateAmountMax(uint256 gameCount, address user) internal {\r\n        if (userInvestment[gameCount][user] > gameMax[gameCount].amount) {\r\n            gameMax[gameCount].amount = userInvestment[gameCount][user];\r\n            gameMax[gameCount].user = user;\r\n        }\r\n    }\r\n\r\n    function updateFirstAddress(uint256 gameCount, address user) internal {\r\n        for (uint8 i = 0; i < firstAddress[gameCount].length; i++) {\r\n            if (firstAddress[gameCount][i] == user) {\r\n                return;\r\n            }\r\n        }\r\n        if (firstAddress[gameCount].length < 10) {\r\n            firstAddress[gameCount].push(user);\r\n        }\r\n    }\r\n\r\n    function updateLastAddress(uint256 gameCount, address user) internal {\r\n        uint8 i = 0;\r\n        uint8 j = 0;\r\n        for (i = 0; i < lastAddress[gameCount].length; i++) {\r\n            if (lastAddress[gameCount][i] == user) {\r\n                for (j = i; j < lastAddress[gameCount].length - 1; j++) {\r\n                    lastAddress[gameCount][j] = lastAddress[gameCount][j + 1];\r\n                }\r\n                lastAddress[gameCount][lastAddress[gameCount].length - 1] = user;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (lastAddress[gameCount].length < 10) {\r\n            lastAddress[gameCount].push(user);\r\n        } else {\r\n            for (i = 0; i < 9; i++) {\r\n                lastAddress[gameCount][i] = lastAddress[gameCount][i + 1];\r\n            }\r\n            lastAddress[gameCount][9] = user;\r\n        }\r\n    }\r\n\r\n    function updateInvestment(uint256 gameCount, address user, uint256 amount) internal {\r\n        uint256 keys = safeDiv(userInvestment[gameCount][user], mantissaOneTenth);\r\n        userInvestment[gameCount][user] = safeAdd(userInvestment[gameCount][user], amount);\r\n        if (commissionAddress[gameCount][user] == false) {\r\n            updateUserKey(gameCount, user, safeDiv(userInvestment[gameCount][user], mantissaOneTenth));\r\n            keys = safeSub(safeDiv(userInvestment[gameCount][user], mantissaOneTenth), keys);\r\n            game[gameCount].totalKey = safeAdd(game[gameCount].totalKey, keys);\r\n        }\r\n\r\n    }\r\n\r\n    function playGame(uint256 gameCount, address sponsorUser) payable returns (uint) {\r\n        if (paused) {\r\n            msg.sender.transfer(msg.value);\r\n            return fail(Error.CONTRACT_PAUSED, gameCount, 0);\r\n        }\r\n        if (game[currentGameCount].status != 1) {\r\n            msg.sender.transfer(msg.value);\r\n            return fail(Error.GAME_STATUS, gameCount, game[currentGameCount].status);\r\n        }\r\n        if (game[gameCount].timer < safeSub(now, game[gameCount].lastTime)) {\r\n            msg.sender.transfer(msg.value);\r\n            return fail(Error.GAME_TIME_OUT, gameCount, 0);\r\n        }\r\n        if (msg.value < game[gameCount].minAmount) {\r\n            msg.sender.transfer(msg.value);\r\n            return fail(Error.MIN_LIMIT, gameCount, game[gameCount].minAmount);\r\n        }\r\n\r\n        uint256 [7] memory doubleList = [320 * mantissaOne, 160 * mantissaOne, 80 * mantissaOne, 40 * mantissaOne, 20 * mantissaOne, 10 * mantissaOne, 5 * mantissaOne];\r\n        uint256 [7] memory minList = [100 * mantissaOneHundredth, 60 * mantissaOneHundredth, 20 * mantissaOneHundredth, 10 * mantissaOneHundredth, 6 * mantissaOneHundredth, 2 * mantissaOneHundredth, 1 * mantissaOneHundredth];\r\n\r\n        settTimer(gameCount);\r\n        updateSponsorCommission(gameCount, sponsorUser, msg.value);\r\n        updateInvestment(gameCount, msg.sender, msg.value);\r\n        updateFirstAddress(gameCount, msg.sender);\r\n        updateLastAddress(gameCount, msg.sender);\r\n        updateAmountMax(gameCount, msg.sender);\r\n\r\n        game[gameCount].investmentAmount += msg.value;\r\n        for (uint256 i = 0; i < doubleList.length; i++) {\r\n            if (safeAdd(game[gameCount].investmentAmount, game[gameCount].initAmount) >= doubleList[i]) {\r\n                if (game[gameCount].minAmount != minList[i]) {\r\n                    game[gameCount].minAmount = minList[i];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit PlayGame(msg.sender, sponsorUser, msg.value);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    function firstAddressLength(uint256 gameCount) public view returns (uint256){\r\n        return firstAddress[gameCount].length;\r\n    }\r\n\r\n    function lastAddressLength(uint256 gameCount) public view returns (uint256){\r\n        return lastAddress[gameCount].length;\r\n    }\r\n\r\n    function calculateFirstAddress(uint256 gameCount, address user) public view returns (uint256){\r\n        uint256 amount = 0;\r\n        for (uint8 i = 0; i < firstAddress[gameCount].length; i++) {\r\n            if (firstAddress[gameCount][i] == user) {\r\n                amount = safeAdd(amount, safeDiv(safePercent(game[gameCount].investmentAmount, setting.firstRate()), firstAddress[gameCount].length));\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function calculateLastAddress(uint256 gameCount, address user) public view returns (uint256){\r\n        uint256 amount = 0;\r\n        for (uint8 i = 0; i < lastAddress[gameCount].length; i++) {\r\n            if (lastAddress[gameCount][i] == user) {\r\n                amount = safeAdd(amount, safeDiv(safePercent(game[gameCount].investmentAmount, setting.lastRate()), lastAddress[gameCount].length));\r\n                if (i + 1 == lastAddress[gameCount].length) {\r\n                    amount = safeAdd(amount, game[gameCount].initAmount);\r\n                }\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function calculateAmountMax(uint256 gameCount, address user) public view returns (uint256){\r\n        if (gameMax[gameCount].user == user) {\r\n            return safePercent(game[gameCount].investmentAmount, setting.gameMaxRate());\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function calculateKeyNumber(uint256 gameCount, address user) public view returns (uint256){\r\n        if (gameCount != 0) {\r\n            for (uint256 i = 1; i < userKey[user].length + 1; i++) {\r\n                if (userKey[user][userKey[user].length - i].gameCount <= gameCount && game[userKey[user][userKey[user].length - i].gameCount].status == 2) {\r\n                    return userKey[user][userKey[user].length - i].number;\r\n                }\r\n            }\r\n            return 0;\r\n        } else {\r\n            if (userKey[user].length > 0 && game[userKey[user][userKey[user].length - 1].gameCount].status == 2) {\r\n                return userKey[user][userKey[user].length - 1].number;\r\n            } else if (userKey[user].length > 1) {\r\n                return userKey[user][userKey[user].length - 2].number;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function calculateKeyCommission(uint256 gameCount, address user) public view returns (uint256){\r\n\r\n        if (calculateKeyNumber(gameCount, user) == 0 || game[gameCount].totalKey == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 commission = safePercent(game[gameCount].investmentAmount, setting.keyRate());\r\n        commission = safeDiv(safeMul(commission, calculateKeyNumber(gameCount, user)), game[gameCount].totalKey);\r\n        return commission;\r\n    }\r\n\r\n    function calculateCommission(uint256 gameCount, address user) public view returns (uint256){\r\n        if (userWithdrawFlag[gameCount][user] == true) {\r\n            return 0;\r\n        }\r\n        if (game[gameCount].status != 2) {\r\n            return 0;\r\n        }\r\n        uint256 commission = 0;\r\n        commission = safeAdd(calculateFirstAddress(gameCount, user), commission);\r\n        commission = safeAdd(calculateLastAddress(gameCount, user), commission);\r\n        commission = safeAdd(calculateAmountMax(gameCount, user), commission);\r\n        commission = safeAdd(calculateKeyCommission(gameCount, user), commission);\r\n        commission = safeAdd(sponsorCommission[gameCount][user], commission);\r\n        commission = safeAdd(shareNode[gameCount][user], commission);\r\n        commission = safeAdd(superNode[gameCount][user], commission);\r\n        commission = safeAdd(auctioneer[gameCount][user], commission);\r\n        commission = safeAdd(leaderShip[gameCount][user], commission);\r\n        commission = safePercent(commission, 100 - setting.withdrawFeeRate());\r\n        return commission;\r\n    }\r\n\r\n    function commissionGameCount(address user) public view returns (uint256[]){\r\n        uint256 commissionCount = 0;\r\n        uint256 i = 0;\r\n        for (i = 1; i <= currentGameCount; i++) {\r\n            if (calculateCommission(i, user) > 0) {\r\n                commissionCount += 1;\r\n            }\r\n        }\r\n        uint256[]  memory commissionCountList = new uint256[](commissionCount);\r\n        commissionCount = 0;\r\n        for (i = 1; i <= currentGameCount; i++) {\r\n            if (calculateCommission(i, user) > 0) {\r\n                commissionCountList[commissionCount] = i;\r\n                commissionCount += 1;\r\n            }\r\n        }\r\n        return commissionCountList;\r\n    }\r\n\r\n    function withdrawCommission(uint256 gameCount) public returns (uint){\r\n        if (paused) {\r\n            return fail(Error.CONTRACT_PAUSED, gameCount, 0);\r\n        }\r\n        if (userWithdrawFlag[gameCount][msg.sender] == true) {\r\n            return fail(Error.ALREADY_WITHDRAWAL, gameCount, 0);\r\n        }\r\n        uint256 commission = calculateCommission(gameCount, msg.sender);\r\n        if (commission <= 0) {\r\n            return fail(Error.NOT_COMMISSION, gameCount, 0);\r\n        }\r\n        userWithdrawFlag[gameCount][msg.sender] = true;\r\n        msg.sender.transfer(commission);\r\n        emit WithdrawCommission(msg.sender, gameCount, commission);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    function calculateRemain(address[] shareUsers,\r\n        address[] superUsers,\r\n        address[] auctioneerUsers,\r\n        address[] leaderUsers,\r\n        uint256 gameCount) public view returns (uint256) {\r\n        uint256 remainAmount = 0;\r\n        if (game[gameCount].totalKey == 0) {\r\n            remainAmount = safeAdd(safePercent(game[gameCount].investmentAmount, setting.keyRate()), remainAmount);\r\n        }\r\n        if (shareUsers.length == 0) {\r\n            remainAmount = safeAdd(safePercent(game[gameCount].investmentAmount, setting.shareRate()), remainAmount);\r\n        }\r\n        if (superUsers.length == 0) {\r\n            remainAmount = safeAdd(safePercent(game[gameCount].investmentAmount, setting.superRate()), remainAmount);\r\n        }\r\n        if (auctioneerUsers.length == 0) {\r\n            remainAmount = safeAdd(safePercent(game[gameCount].investmentAmount, setting.auctioneerRate()), remainAmount);\r\n        }\r\n        if (leaderUsers.length == 0) {\r\n            remainAmount = safeAdd(safePercent(game[gameCount].investmentAmount, setting.leaderRate()), remainAmount);\r\n        }\r\n        return remainAmount;\r\n    }\r\n\r\n    function calculateGame(address[] shareUsers,\r\n        address[] superUsers,\r\n        address[] auctioneerUsers,\r\n        address[] leaderUsers,\r\n        uint256 gameCount) public returns (uint) {\r\n\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, gameCount, 0);\r\n        }\r\n        if (game[currentGameCount].status != 1) {\r\n            return fail(Error.GAME_STATUS, gameCount, game[currentGameCount].status);\r\n        }\r\n\r\n        uint256 totalKey = 0;\r\n        uint256 i = 0;\r\n        for (i = 0; i < shareUsers.length; i++) {\r\n            shareNode[gameCount][shareUsers[i]] = safeDiv(safePercent(game[gameCount].investmentAmount, setting.shareRate()), shareUsers.length);\r\n            if (commissionAddress[gameCount][shareUsers[i]] == false) {\r\n                commissionAddress[gameCount][shareUsers[i]] = true;\r\n                clearUserKey(gameCount, shareUsers[i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][shareUsers[i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        for (i = 0; i < superUsers.length; i++) {\r\n            superNode[gameCount][superUsers[i]] = safeDiv(safePercent(game[gameCount].investmentAmount, setting.superRate()), superUsers.length);\r\n            if (commissionAddress[gameCount][superUsers[i]] == false) {\r\n                commissionAddress[gameCount][superUsers[i]] = true;\r\n                clearUserKey(gameCount, superUsers[i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][superUsers[i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        for (i = 0; i < auctioneerUsers.length; i++) {\r\n            auctioneer[gameCount][auctioneerUsers[i]] = safeDiv(safePercent(game[gameCount].investmentAmount, setting.auctioneerRate()), auctioneerUsers.length);\r\n            if (commissionAddress[gameCount][auctioneerUsers[i]] == false) {\r\n                commissionAddress[gameCount][auctioneerUsers[i]] = true;\r\n                clearUserKey(gameCount, auctioneerUsers[i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][auctioneerUsers[i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        for (i = 0; i < leaderUsers.length; i++) {\r\n            leaderShip[gameCount][leaderUsers[i]] = safeDiv(safePercent(game[gameCount].investmentAmount, setting.leaderRate()), leaderUsers.length);\r\n            if (commissionAddress[gameCount][leaderUsers[i]] == false) {\r\n                commissionAddress[gameCount][leaderUsers[i]] = true;\r\n                clearUserKey(gameCount, leaderUsers[i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][leaderUsers[i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        for (i = 0; i < firstAddress[gameCount].length; i++) {\r\n            if (commissionAddress[gameCount][firstAddress[gameCount][i]] == false) {\r\n                commissionAddress[gameCount][firstAddress[gameCount][i]] = true;\r\n                clearUserKey(gameCount, firstAddress[gameCount][i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][firstAddress[gameCount][i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        for (i = 0; i < lastAddress[gameCount].length; i++) {\r\n            if (commissionAddress[gameCount][lastAddress[gameCount][i]] == false) {\r\n                commissionAddress[gameCount][lastAddress[gameCount][i]] = true;\r\n                clearUserKey(gameCount, lastAddress[gameCount][i]);\r\n                totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][lastAddress[gameCount][i]], mantissaOneTenth));\r\n            }\r\n        }\r\n        if (commissionAddress[gameCount][gameMax[gameCount].user] == false) {\r\n            commissionAddress[gameCount][gameMax[gameCount].user] = true;\r\n            clearUserKey(gameCount, gameMax[gameCount].user);\r\n            totalKey = safeAdd(totalKey, safeDiv(userInvestment[gameCount][gameMax[gameCount].user], mantissaOneTenth));\r\n        }\r\n\r\n        game[gameCount].totalKey = safeSub(game[gameCount].totalKey, totalKey);\r\n        game[gameCount].status = 2;\r\n        uint256 remainAmount = calculateRemain(shareUsers, superUsers, auctioneerUsers, leaderUsers, gameCount);\r\n\r\n        uint256 amount = 0;\r\n        if (lastRemainAmount != game[gameCount].investmentAmount) {\r\n            amount = safePercent(safeSub(game[gameCount].investmentAmount, remainAmount), setting.withdrawFeeRate());\r\n            amount = safeAdd(calculateCommission(gameCount, address(this)), amount);\r\n            lastRemainAmount = remainAmount;\r\n        } else {\r\n            lastRemainAmount += game[gameCount].initAmount;\r\n        }\r\n        emit CalculateGame(gameCount, amount);\r\n        finance.transfer(amount);\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"}],\"name\":\"firstAddressLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shareUsers\",\"type\":\"address[]\"},{\"name\":\"superUsers\",\"type\":\"address[]\"},{\"name\":\"auctioneerUsers\",\"type\":\"address[]\"},{\"name\":\"leaderUsers\",\"type\":\"address[]\"},{\"name\":\"gameCount\",\"type\":\"uint256\"}],\"name\":\"calculateRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderShip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateLastAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestedState\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commissionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"}],\"name\":\"lastAddressLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateKeyCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"sponsorUser\",\"type\":\"address\"}],\"name\":\"playGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateFirstAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareUsers\",\"type\":\"address[]\"},{\"name\":\"superUsers\",\"type\":\"address[]\"},{\"name\":\"auctioneerUsers\",\"type\":\"address[]\"},{\"name\":\"leaderUsers\",\"type\":\"address[]\"},{\"name\":\"gameCount\",\"type\":\"uint256\"}],\"name\":\"calculateGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareNode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"superNode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userKey\",\"outputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctioneer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateAmountMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"updateUserKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameMax\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"clearUserKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"commissionGameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRemainAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"game\",\"outputs\":[{\"name\":\"timer\",\"type\":\"uint256\"},{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"minAmount\",\"type\":\"uint256\"},{\"name\":\"doubleAmount\",\"type\":\"uint256\"},{\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"name\":\"initAmount\",\"type\":\"uint256\"},{\"name\":\"totalKey\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameCount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateKeyNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFinance\",\"type\":\"address\"}],\"name\":\"SetFinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PlayGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CalculateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"}]","ContractName":"richMan","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc80de08dbe950b22ed51be8296540d0cc29b936ba3dc9de530dcd0906f26522"}]}