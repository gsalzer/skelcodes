{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Contract.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\nabstract contract ERC20Interface {\\r\\n    function totalSupply() public virtual view returns (uint);\\r\\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\\r\\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\\r\\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\\r\\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\r\\n}\"},\"HATCH.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./ERC20Contract.sol\\u0027;\\r\\nimport \\u0027./Owned.sol\\u0027;\\r\\n\\r\\ncontract HatchToken is ERC20Interface, Owned {\\r\\n    using SafeMath for uint256;\\r\\n    string public symbol = \\\"HATCH\\\";\\r\\n    string public  name = \\\"HatchDAO\\\";\\r\\n    uint256 public decimals = 18;\\r\\n    uint256 private maxCapSupply = 1e7 * 10**(decimals); // 10 million\\r\\n    uint256 _totalSupply = 520000 * 10 ** (decimals); // 520,000\\r\\n    address incubator;\\r\\n    \\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\r\\n    \\r\\n    constructor() public {\\r\\n        balances[owner] = balances[owner].add(_totalSupply);\\r\\n        emit Transfer(address(0),owner, _totalSupply);\\r\\n    }\\r\\n    \\r\\n    function SetIncubator(address _address) external onlyOwner{\\r\\n        require(_address != address(0), \\\"Invalid address\\\");\\r\\n        incubator = _address;\\r\\n    }\\r\\n    \\r\\n    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\\r\\n        require(msg.sender == incubator);\\r\\n        require(_beneficiary != address(0), \\\"Invalid address\\\");\\r\\n        require(_totalSupply.add(_amount) \\u003c= maxCapSupply, \\\"exceeds max cap supply 10 million\\\");\\r\\n        _totalSupply = _totalSupply.add(_amount);\\r\\n        \\r\\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\\r\\n        \\r\\n        emit Transfer(address(0),_beneficiary, _amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function BurnTokens(uint256 _amount) external {\\r\\n        _burn(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 _amount, address _account) internal {\\r\\n        require(balances[_account] \\u003e= _amount, \\\"insufficient account balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(_amount);\\r\\n        balances[_account] = balances[_account].sub(_amount);\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n    \\r\\n    function totalSupply() public override view returns (uint256){\\r\\n       return _totalSupply; \\r\\n    }\\r\\n    \\r\\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 tokens) public override returns  (bool success) {\\r\\n        require(address(to) != address(0));\\r\\n        require(balances[msg.sender] \\u003e= tokens );\\r\\n        require(balances[to].add(tokens) \\u003e= balances[to]);\\r\\n            \\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        emit Transfer(msg.sender,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\\r\\n        require(tokens \\u003c= allowed[from][msg.sender]); //check allowance\\r\\n        require(balances[from] \\u003e= tokens);\\r\\n        require(from != address(0), \\\"Invalid address\\\");\\r\\n        require(to != address(0), \\\"Invalid address\\\");\\r\\n        \\r\\n        balances[from] = balances[from].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\r\\n        emit Transfer(from,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\\r\\n        return allowed[tokenOwner][spender];\\r\\n    }\\r\\n    \\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowed[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n}\"},\"Incubator.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./HATCH.sol\\\";\\r\\nimport \\\"./ERC20Contract.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract Incubator is Owned{\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    uint256 public yieldCollectionFee = 0.05 ether;\\r\\n    uint256 public stakingPeriod = 30 days;\\r\\n    uint256 public stakeClaimFee = 0.05 ether;\\r\\n    uint256 public minStakeLimit = 300 * 10 **(18); // 300 HATCH\\r\\n    uint256 public totalYield;\\r\\n    uint256 public totalRewards;\\r\\n    \\r\\n    HatchToken public hatch;\\r\\n    \\r\\n    struct Tokens{\\r\\n        bool exists;\\r\\n        uint256 rate;\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e Tokens) public tokens;\\r\\n    address[] TokensAddresses;\\r\\n    address governance;\\r\\n    \\r\\n    struct DepositedToken{\\r\\n        bool    whitelisted;\\r\\n        uint256 activeDeposit;\\r\\n        uint256 totalDeposits;\\r\\n        uint256 startTime;\\r\\n        uint256 pendingGains;\\r\\n        uint256 lastClaimedDate;\\r\\n        uint256 totalGained;\\r\\n        uint    rate;\\r\\n        uint    period;\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e mapping(address =\\u003e DepositedToken)) users;\\r\\n    \\r\\n    event TokenAdded(address indexed tokenAddress, uint256 indexed APY);\\r\\n    event TokenRemoved(address indexed tokenAddress, uint256 indexed APY);\\r\\n    event FarmingRateChanged(address indexed tokenAddress, uint256 indexed newAPY);\\r\\n    event YieldCollectionFeeChanged(uint256 indexed yieldCollectionFee);\\r\\n    event FarmingStarted(address indexed _tokenAddress, uint256 indexed _amount);\\r\\n    event YieldCollected(address indexed _tokenAddress, uint256 indexed _yield);\\r\\n    event AddedToExistingFarm(address indexed _tokenAddress, uint256 indexed tokens);\\r\\n    \\r\\n    event Staked(address indexed staker, uint256 indexed tokens);\\r\\n    event AddedToExistingStake(address indexed staker, uint256 indexed tokens);\\r\\n    event StakingRateChanged(uint256 indexed newAPY);\\r\\n    event TokensClaimed(address indexed claimer, uint256 indexed stakedTokens);\\r\\n    event RewardClaimed(address indexed claimer, uint256 indexed reward);\\r\\n    \\r\\n    event GovernanceSet(address indexed governanceAddress);\\r\\n    \\r\\n    modifier validStake(uint256 stakeAmount){\\r\\n        require(stakeAmount \\u003e= minStakeLimit, \\\"stake amount should be equal/greater than min stake limit\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier OwnerOrGovernance(address _caller){\\r\\n        require(_caller == owner || _caller == governance);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(address _tokenAddress) public {\\r\\n        hatch = HatchToken(_tokenAddress);\\r\\n        \\r\\n        // add hatch token to ecosystem\\r\\n        _addToken(_tokenAddress, 40); // 40 apy initially\\r\\n    }\\r\\n    \\r\\n    function Farm(address _tokenAddress, uint256 _amount) external{\\r\\n        require(_tokenAddress != address(hatch), \\\"Use staking instead\\\"); \\r\\n        \\r\\n        // add to farm\\r\\n        _newDeposit(_tokenAddress, _amount);\\r\\n        \\r\\n        // transfer tokens from user to the contract balance\\r\\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender, address(this), _amount));\\r\\n        \\r\\n        emit FarmingStarted(_tokenAddress, _amount);\\r\\n    }\\r\\n    \\r\\n    function AddToFarm(address _tokenAddress, uint256 _amount) external{\\r\\n        require(_tokenAddress != address(hatch), \\\"use staking instead\\\");\\r\\n        _addToExisting(_tokenAddress, _amount);\\r\\n        \\r\\n        // move the tokens from the caller to the contract address\\r\\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender,address(this), _amount));\\r\\n        \\r\\n        emit AddedToExistingFarm(_tokenAddress, _amount);\\r\\n    }\\r\\n    \\r\\n    function Yield(address _tokenAddress) external payable {\\r\\n        require(msg.value \\u003e= yieldCollectionFee, \\\"should pay exact claim fee\\\");\\r\\n        require(PendingYield(_tokenAddress, msg.sender) \\u003e 0, \\\"No pending yield\\\");\\r\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\r\\n        require(_tokenAddress != address(hatch), \\\"use staking instead\\\");\\r\\n    \\r\\n        uint256 _pendingYield = PendingYield(_tokenAddress, msg.sender);\\r\\n        \\r\\n        // Global stats update\\r\\n        totalYield = totalYield.add(_pendingYield);\\r\\n        \\r\\n        // update the record\\r\\n        users[msg.sender][_tokenAddress].totalGained = users[msg.sender][_tokenAddress].totalGained.add(_pendingYield);\\r\\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\\r\\n        users[msg.sender][_tokenAddress].pendingGains = 0;\\r\\n        \\r\\n        // transfer fee to the owner\\r\\n        owner.transfer(msg.value);\\r\\n        \\r\\n        // mint more tokens inside token contract equivalent to _pendingYield\\r\\n        require(hatch.MintTokens(_pendingYield, msg.sender));\\r\\n        \\r\\n        emit YieldCollected(_tokenAddress, _pendingYield);\\r\\n    }\\r\\n    \\r\\n    function WithdrawFarmedTokens(address _tokenAddress, uint256 _amount) external {\\r\\n        require(users[msg.sender][_tokenAddress].activeDeposit \\u003e= _amount, \\\"insufficient amount in farming\\\");\\r\\n        require(_tokenAddress != address(hatch), \\\"use withdraw of staking instead\\\");\\r\\n        \\r\\n        // update farming stats\\r\\n            // check if we have any pending yield, add it to previousYield var\\r\\n            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\r\\n            // update amount \\r\\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.sub(_amount);\\r\\n            // update farming start time -- new farming will begin from this time onwards\\r\\n            users[msg.sender][_tokenAddress].startTime = now;\\r\\n            // reset last claimed figure as well -- new farming will begin from this time onwards\\r\\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\\r\\n        \\r\\n        // withdraw the tokens and move from contract to the caller\\r\\n        require(ERC20Interface(_tokenAddress).transfer(msg.sender, _amount));\\r\\n        \\r\\n        emit TokensClaimed(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    function Stake(uint256 _amount) external validStake(_amount) {\\r\\n        // add new stake\\r\\n        _newDeposit(address(hatch), _amount);\\r\\n        \\r\\n        // transfer tokens from user to the contract balance\\r\\n        require(hatch.transferFrom(msg.sender, address(this), _amount));\\r\\n        \\r\\n        emit Staked(msg.sender, _amount);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function AddToStake(uint256 _amount) external {\\r\\n        require(now - users[msg.sender][address(hatch)].startTime \\u003c users[msg.sender][address(hatch)].period, \\\"current staking expired\\\");\\r\\n        _addToExisting(address(hatch), _amount);\\r\\n\\r\\n        // move the tokens from the caller to the contract address\\r\\n        require(hatch.transferFrom(msg.sender,address(this), _amount));\\r\\n        \\r\\n        emit AddedToExistingStake(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    function ClaimStakedTokens() external {\\r\\n        //require(users[msg.sender][address(hatch)].running, \\\"no running stake\\\");\\r\\n        require(users[msg.sender][address(hatch)].activeDeposit \\u003e 0, \\\"no running stake\\\");\\r\\n        require(users[msg.sender][address(hatch)].startTime.add(users[msg.sender][address(hatch)].period) \\u003c now, \\\"not claimable before staking period\\\");\\r\\n        \\r\\n        uint256 _currentDeposit = users[msg.sender][address(hatch)].activeDeposit;\\r\\n        \\r\\n        // check if we have any pending reward, add it to pendingGains var\\r\\n        users[msg.sender][address(hatch)].pendingGains = PendingReward(msg.sender);\\r\\n        // update amount \\r\\n        users[msg.sender][address(hatch)].activeDeposit = 0;\\r\\n        \\r\\n        // transfer staked tokens\\r\\n        require(hatch.transfer(msg.sender, _currentDeposit));\\r\\n        \\r\\n        emit TokensClaimed(msg.sender, _currentDeposit);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function ClaimReward() external payable {\\r\\n        require(msg.value \\u003e= stakeClaimFee, \\\"should pay exact claim fee\\\");\\r\\n        require(PendingReward(msg.sender) \\u003e 0, \\\"nothing pending to claim\\\");\\r\\n    \\r\\n        uint256 _pendingReward = PendingReward(msg.sender);\\r\\n        \\r\\n        // add claimed reward to global stats\\r\\n        totalRewards = totalRewards.add(_pendingReward);\\r\\n        // add the reward to total claimed rewards\\r\\n        users[msg.sender][address(hatch)].totalGained = users[msg.sender][address(hatch)].totalGained.add(_pendingReward);\\r\\n        // update lastClaim amount\\r\\n        users[msg.sender][address(hatch)].lastClaimedDate = now;\\r\\n        // reset previous rewards\\r\\n        users[msg.sender][address(hatch)].pendingGains = 0;\\r\\n        \\r\\n        // transfer the claim fee to the owner\\r\\n        owner.transfer(msg.value);\\r\\n        \\r\\n        // mint more tokens inside token contract\\r\\n        require(hatch.MintTokens(_pendingReward, msg.sender));\\r\\n         \\r\\n        emit RewardClaimed(msg.sender, _pendingReward);\\r\\n    }\\r\\n    \\r\\n    function PendingYield(address _tokenAddress, address _caller) public view returns(uint256 _pendingRewardWeis){\\r\\n        uint256 _totalFarmingTime = now.sub(users[_caller][_tokenAddress].lastClaimedDate);\\r\\n        \\r\\n        uint256 _reward_token_second = ((tokens[_tokenAddress].rate).mul(10 ** 21)).div(365 days); // added extra 10^21\\r\\n        \\r\\n        uint256 yield = ((users[_caller][_tokenAddress].activeDeposit).mul(_totalFarmingTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // 10^2 are for 100 (%)\\r\\n        \\r\\n        return yield.add(users[_caller][_tokenAddress].pendingGains);\\r\\n    }\\r\\n    \\r\\n    function ActiveFarmDeposit(address _tokenAddress, address _user) external view returns(uint256 _activeDeposit){\\r\\n        return users[_user][_tokenAddress].activeDeposit;\\r\\n    }\\r\\n    \\r\\n    function YourTotalFarmingTillToday(address _tokenAddress, address _user) external view returns(uint256 _totalFarming){\\r\\n        return users[_user][_tokenAddress].totalDeposits;\\r\\n    }\\r\\n    \\r\\n    function LastFarmedOn(address _tokenAddress, address _user) external view returns(uint256 _unixLastFarmedTime){\\r\\n        return users[_user][_tokenAddress].startTime;\\r\\n    }\\r\\n    \\r\\n    function TotalFarmingRewards(address _tokenAddress, address _user) external view returns(uint256 _totalEarned){\\r\\n        return users[_user][_tokenAddress].totalGained;\\r\\n    }\\r\\n    \\r\\n    function setGovernanceContract(address _govAddress) external onlyOwner {\\r\\n        governance = _govAddress;\\r\\n        emit GovernanceSet(_govAddress);\\r\\n    }\\r\\n    \\r\\n    function AddToken(address _tokenAddress, uint256 _rate) public OwnerOrGovernance(msg.sender) {\\r\\n        _addToken(_tokenAddress, _rate);\\r\\n    }\\r\\n    \\r\\n    function RemoveToken(address _tokenAddress) public OwnerOrGovernance(msg.sender) {\\r\\n        \\r\\n        require(tokens[_tokenAddress].exists, \\\"token doesn\\u0027t exist\\\");\\r\\n        \\r\\n        tokens[_tokenAddress].exists = false;\\r\\n        \\r\\n        emit TokenRemoved(_tokenAddress, tokens[_tokenAddress].rate);\\r\\n    }\\r\\n    \\r\\n    function ChangeFarmingRate(address _tokenAddress, uint256 _newFarmingRate) public OwnerOrGovernance(msg.sender) {\\r\\n        \\r\\n        require(tokens[_tokenAddress].exists, \\\"token doesn\\u0027t exist\\\");\\r\\n        \\r\\n        tokens[_tokenAddress].rate = _newFarmingRate;\\r\\n        \\r\\n        emit FarmingRateChanged(_tokenAddress, _newFarmingRate);\\r\\n    }\\r\\n\\r\\n    function SetYieldCollectionFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\\r\\n        yieldCollectionFee = _fee;\\r\\n        emit YieldCollectionFeeChanged(_fee);\\r\\n    }\\r\\n    \\r\\n    function PendingReward(address _caller) public view returns(uint256 _pendingReward){\\r\\n        uint256 _totalStakedTime = 0;\\r\\n        uint256 expiryDate = (users[_caller][address(hatch)].period).add(users[_caller][address(hatch)].startTime);\\r\\n        \\r\\n        if(now \\u003c expiryDate)\\r\\n            _totalStakedTime = now.sub(users[_caller][address(hatch)].lastClaimedDate);\\r\\n        else{\\r\\n            if(users[_caller][address(hatch)].lastClaimedDate \\u003e= expiryDate) // if claimed after expirydate already\\r\\n                _totalStakedTime = 0;\\r\\n            else\\r\\n                _totalStakedTime = expiryDate.sub(users[_caller][address(hatch)].lastClaimedDate);\\r\\n        }\\r\\n            \\r\\n        uint256 _reward_token_second = ((users[_caller][address(hatch)].rate).mul(10 ** 21)); // added extra 10^21\\r\\n        uint256 reward =  ((users[_caller][address(hatch)].activeDeposit).mul(_totalStakedTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // the two extra 10^2 is for 100 (%) // another two extra 10^4 is for decimals to be allowed\\r\\n        reward = reward.div(365 days);\\r\\n        return (reward.add(users[_caller][address(hatch)].pendingGains));\\r\\n    }\\r\\n    \\r\\n    function YourActiveStake(address _user) external view returns(uint256 _activeStake){\\r\\n        return users[_user][address(hatch)].activeDeposit;\\r\\n    }\\r\\n    \\r\\n    function YourTotalStakesTillToday(address _user) external view returns(uint256 _totalStakes){\\r\\n        return users[_user][address(hatch)].totalDeposits;\\r\\n    }\\r\\n    \\r\\n    function LastStakedOn(address _user) public view returns(uint256 _unixLastStakedTime){\\r\\n        return users[_user][address(hatch)].startTime;\\r\\n    }\\r\\n    \\r\\n    function TotalStakeRewardsClaimedTillToday(address _user) external view returns(uint256 _totalEarned){\\r\\n        return users[_user][address(hatch)].totalGained;\\r\\n    }\\r\\n    \\r\\n    function LatestStakingRate() external view returns(uint256 APY){\\r\\n        return tokens[address(hatch)].rate;\\r\\n    }\\r\\n    \\r\\n    function YourStakingRate(address _user) external view returns(uint256 _stakingRate){\\r\\n        return users[_user][address(hatch)].rate;\\r\\n    }\\r\\n    \\r\\n    function YourStakingPeriod(address _user) external view returns(uint256 _stakingPeriod){\\r\\n        return users[_user][address(hatch)].period;\\r\\n    }\\r\\n    \\r\\n    function StakingTimeLeft(address _user) external view returns(uint256 _secsLeft){\\r\\n        uint256 left = 0; \\r\\n        uint256 expiryDate = (users[_user][address(hatch)].period).add(LastStakedOn(_user));\\r\\n        \\r\\n        if(now \\u003c expiryDate)\\r\\n            left = expiryDate.sub(now);\\r\\n            \\r\\n        return left;\\r\\n    }\\r\\n    \\r\\n    function ChangeStakingRate(uint256 _newStakingRate) public OwnerOrGovernance(msg.sender){\\r\\n        \\r\\n        tokens[address(hatch)].rate = _newStakingRate;\\r\\n        \\r\\n        emit StakingRateChanged(_newStakingRate);\\r\\n    }\\r\\n    \\r\\n    function SetMinStakeLimit(uint256 _minStakeLimit) public OwnerOrGovernance(msg.sender){\\r\\n       minStakeLimit = _minStakeLimit;\\r\\n    }\\r\\n    \\r\\n    function SetStakingPeriod(uint256 _seconds) public OwnerOrGovernance(msg.sender){\\r\\n       stakingPeriod = _seconds;\\r\\n    }\\r\\n    \\r\\n    function SetClaimFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\\r\\n       stakeClaimFee = _fee;\\r\\n    }\\r\\n    \\r\\n    function _newDeposit(address _tokenAddress, uint256 _amount) internal{\\r\\n        require(users[msg.sender][_tokenAddress].activeDeposit ==  0, \\\"Already running\\\");\\r\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\r\\n        \\r\\n        // add that token into the contract balance\\r\\n        // check if we have any pending reward/yield, add it to pendingGains variable\\r\\n        if(_tokenAddress == address(hatch)){\\r\\n            users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\\r\\n            users[msg.sender][_tokenAddress].period = stakingPeriod;\\r\\n            users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate for stakers will be fixed at time of staking\\r\\n        }\\r\\n        else\\r\\n            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\r\\n            \\r\\n        users[msg.sender][_tokenAddress].activeDeposit = _amount;\\r\\n        users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\\r\\n        users[msg.sender][_tokenAddress].startTime = now;\\r\\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _addToExisting(address _tokenAddress, uint256 _amount) internal{\\r\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\r\\n        // require(users[msg.sender][_tokenAddress].running, \\\"no running farming/stake\\\");\\r\\n        require(users[msg.sender][_tokenAddress].activeDeposit \\u003e 0, \\\"no running farming/stake\\\");\\r\\n        // update farming stats\\r\\n            // check if we have any pending reward/yield, add it to pendingGains variable\\r\\n            if(_tokenAddress == address(hatch)){\\r\\n                users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\\r\\n                users[msg.sender][_tokenAddress].period = stakingPeriod;\\r\\n                users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate of only staking will be updated when more is added to stake\\r\\n            }\\r\\n            else\\r\\n                users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\r\\n            // update current deposited amount \\r\\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.add(_amount);\\r\\n            // update total deposits till today\\r\\n            users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\\r\\n            // update new deposit start time -- new stake/farming will begin from this time onwards\\r\\n            users[msg.sender][_tokenAddress].startTime = now;\\r\\n            // reset last claimed figure as well -- new stake/farming will begin from this time onwards\\r\\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\\r\\n    }\\r\\n\\r\\n    function _addToken(address _tokenAddress, uint256 _rate) internal{\\r\\n        require(!tokens[_tokenAddress].exists, \\\"token already exists\\\");\\r\\n        \\r\\n        tokens[_tokenAddress] = Tokens({\\r\\n            exists: true,\\r\\n            rate: _rate\\r\\n        });\\r\\n        \\r\\n        TokensAddresses.push(_tokenAddress);\\r\\n        emit TokenAdded(_tokenAddress, _rate);\\r\\n    }\\r\\n}\\r\\n\"},\"Owned.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ncontract Owned {\\r\\n    address payable public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\r\\n        owner = _newOwner;\\r\\n        emit OwnershipTransferred(msg.sender, _newOwner);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  \\r\\n  function ceil(uint a, uint m) internal pure returns (uint r) {\\r\\n    return (a + m - 1) / m * m;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"FarmingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FarmingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"StakingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yieldCollectionFee\",\"type\":\"uint256\"}],\"name\":\"YieldCollectionFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ActiveFarmDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddToFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFarmingRate\",\"type\":\"uint256\"}],\"name\":\"ChangeFarmingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingRate\",\"type\":\"uint256\"}],\"name\":\"ChangeStakingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LastFarmedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastFarmedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LastStakedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastStakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LatestStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingRewardWeis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeLimit\",\"type\":\"uint256\"}],\"name\":\"SetMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"SetStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetYieldCollectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"StakingTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalFarmingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalStakeRewardsClaimedTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFarmedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"Yield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourStakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalFarmingTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFarming\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalStakesTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatch\",\"outputs\":[{\"internalType\":\"contract HatchToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeClaimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Incubator","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006f3009663470475f0749a6b76195375f95495fcb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ea7e15fb0c0e1f168eef690952706e2ef1793335b5aab72f8c460b535f67b78f"}]}