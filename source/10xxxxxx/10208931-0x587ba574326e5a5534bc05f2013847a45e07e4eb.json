{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract CalculatorInterface {\r\n    function calculateNumTokens(uint256 balance, uint256 daysStaked, address stakerAddress, uint256 totalSupply) public virtual returns (uint256);\r\n    function randomness() public view virtual returns (uint256);\r\n}\r\n\r\nabstract contract PampToken {\r\n    function balanceOf(address account) public view virtual returns (uint256);\r\n    function _burn(address account, uint256 amount) external virtual;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the Pamp Network: https://pamp.network\r\n * Pamp Network (PAMP) is the world's first price-reactive cryptocurrency.\r\n * That is, the inflation rate of the token is wholly dependent on its market activity.\r\n * Minting does not happen when the price is less than the day prior.\r\n * When the price is greater than the day prior, the inflation for that day is\r\n * a function of its price, percent increase, volume, any positive price streaks,\r\n * and the amount of time any given holder has been holding.\r\n * In the first iteration, the dev team acts as the price oracle, but in the future, we plan to integrate a Chainlink price oracle.\r\n */\r\ncontract StakePampToken is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct staker {\r\n        uint startTimestamp;\r\n        uint lastTimestamp;\r\n    }\r\n    \r\n    struct update {\r\n        uint timestamp;\r\n        uint numerator;\r\n        uint denominator;\r\n        uint price;         // In USD. 0001 is $0.001, 1000 is $1.000, 1001 is $1.001, etc\r\n        uint volume;        // In whole USD (100 = $100)\r\n    }\r\n    \r\n    struct seller {\r\n        address addr;\r\n        uint256 burnAmount;\r\n    }\r\n    \r\n    PampToken public token;\r\n    \r\n    modifier onlyToken() {\r\n        require(_msgSender() == address(token), \"Caller must be PAMP token contract.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    mapping (address => staker) public _stakers;\r\n    \r\n    mapping (address => string) public _whitelist;\r\n    \r\n    mapping (address => uint256) public _blacklist;\r\n    \r\n    bool private _enableDelayedSellBurns;\r\n    \r\n    bool private _enableBurns;\r\n    \r\n    bool private _priceTarget1Hit;\r\n    \r\n    bool private _priceTarget2Hit;\r\n    \r\n    address private _uniswapV2Pair;\r\n    \r\n    address private _uniswapV1Pair;\r\n    \r\n    seller[] private _delayedBurns;\r\n    \r\n    uint8 private _uniswapSellerBurnPercent;\r\n\r\n    \r\n    uint256 private _minStake;\r\n    \r\n    uint8 private _minStakeDurationDays;\r\n    \r\n    uint8 private _minPercentIncrease;\r\n    \r\n    uint256 private _inflationAdjustmentFactor;\r\n    \r\n    uint256 private _streak;\r\n    \r\n    update public _lastUpdate;\r\n    \r\n    CalculatorInterface private _externalCalculator;\r\n    \r\n    bool private _useExternalCalc;\r\n    \r\n    bool private _freeze;\r\n    \r\n    bool private _enableHoldersDay;\r\n    \r\n    event StakerRemoved(address StakerAddress);\r\n    \r\n    event StakerAdded(address StakerAddress);\r\n    \r\n    event StakesUpdated(uint Amount);\r\n    \r\n    event MassiveCelebration();\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    \r\n    constructor (PampToken newToken) public {\r\n        token = newToken;\r\n        _minStake = 500E18;\r\n        _inflationAdjustmentFactor = 100;\r\n        _streak = 0;\r\n        _minStakeDurationDays = 1;\r\n        _useExternalCalc = false;\r\n        _uniswapSellerBurnPercent = 5;\r\n        _enableDelayedSellBurns = true;\r\n        _enableBurns = false;\r\n        _freeze = false;\r\n        _minPercentIncrease = 10; // 1.0% min increase\r\n    }\r\n    \r\n    \r\n    function updateState(uint numerator, uint denominator, uint256 price, uint256 volume) external onlyOwner {  // when chainlink is integrated a separate contract will call this function (onlyOwner state will be changed as well)\r\n    \r\n        require(numerator != 0 && denominator != 0 && price != 0 && volume != 0, \"Parameters cannot be zero\");\r\n        \r\n        if (numerator < 2 && denominator == 100 || numerator < 20 && denominator == 1000) {\r\n            require(mulDiv(1000, numerator, denominator) >= _minPercentIncrease, \"Increase must be at least _minPercentIncrease to count\");\r\n        }\r\n        \r\n        \r\n        \r\n        uint8 daysSinceLastUpdate = uint8((block.timestamp - _lastUpdate.timestamp) / 86400);\r\n        \r\n        if (daysSinceLastUpdate == 0) {\r\n            // should we error here?\r\n            _streak++;\r\n        } else if (daysSinceLastUpdate == 1) {\r\n            _streak++;\r\n        } else {\r\n            _streak = 1;\r\n        }\r\n        \r\n        if (price >= 1000 && _priceTarget1Hit == false) { // 1000 = $1.00\r\n            _priceTarget1Hit = true;\r\n            _streak = 50;\r\n            emit MassiveCelebration();\r\n            \r\n        } else if (price >= 10000 && _priceTarget2Hit == false) {   // It is written, so it shall be done\r\n            _priceTarget2Hit = true;\r\n            _streak = 100;\r\n             _minStake = 100;        // Need $1000 to stake\r\n            emit MassiveCelebration();\r\n        }\r\n        \r\n        _lastUpdate = update(block.timestamp, numerator, denominator, price, volume);\r\n\r\n    }\r\n    \r\n    function updateMyStakes(address stakerAddress, uint256 balance, uint256 totalSupply) external onlyToken returns (uint256) {\r\n        \r\n        require((block.timestamp.sub(_lastUpdate.timestamp)) / 86400 == 0, \"Stakes must be updated the same day of the latest update\");\r\n        \r\n    \r\n        staker memory thisStaker = _stakers[stakerAddress];\r\n        \r\n        require(block.timestamp > thisStaker.lastTimestamp, \"Error: block timestamp is not greater than your last timestamp!\");\r\n        //require((block.timestamp.sub(thisStaker.lastTimestamp)) / 86400 != 0, \"Error: you can only update stakes once per day. You also cannot update stakes on the same day that you purchased them.\");\r\n        require(_lastUpdate.timestamp > thisStaker.lastTimestamp, \"Error: you can only update stakes once per day. You also cannot update stakes on the same day that you purchased them.\");\r\n        require(thisStaker.lastTimestamp != 0, \"Error: your last timestamp cannot be zero.\");\r\n        require(thisStaker.startTimestamp != 0, \"Error: your start timestamp cannot be zero.\");\r\n        \r\n        uint daysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400;\r\n        \r\n        require(daysStaked >= _minStakeDurationDays, \"You must stake for at least minStakeDurationDays to claim rewards\");\r\n        require(balance >= _minStake, \"You must have a balance of at least minStake to claim rewards\");\r\n        require(thisStaker.startTimestamp > 0, \"Your start timestamp must be greater than 0\");\r\n\r\n            \r\n        uint numTokens = calculateNumTokens(balance, daysStaked, stakerAddress, totalSupply);\r\n        if (_enableHoldersDay && daysStaked >= 30) {\r\n            numTokens = mulDiv(balance, daysStaked, 600);   // Once a month, holders get a nice bump\r\n        }\r\n        \r\n        _stakers[stakerAddress].lastTimestamp = block.timestamp;\r\n        emit StakesUpdated(numTokens);\r\n        \r\n        return numTokens;\r\n    \r\n        \r\n    }\r\n    // need to limit days staked multiplier and max percentage daily gain\r\n    function calculateNumTokens(uint256 balance, uint256 daysStaked, address stakerAddress, uint256 totalSupply) internal returns (uint256) {\r\n        \r\n        if (_useExternalCalc) {\r\n            return _externalCalculator.calculateNumTokens(balance, daysStaked, stakerAddress, totalSupply);\r\n        }\r\n        \r\n        uint256 inflationAdjustmentFactor = _inflationAdjustmentFactor;\r\n        \r\n        if (_streak > 1) {\r\n            inflationAdjustmentFactor /= _streak;\r\n        }\r\n        \r\n        if (daysStaked > 60) {\r\n            daysStaked = 60;\r\n        } \r\n        \r\n        uint marketCap = totalSupply.mul(_lastUpdate.price);\r\n        \r\n        uint ratio = marketCap.div(_lastUpdate.volume);\r\n        \r\n        if (ratio > 50) {  // Too little volume. Decrease rewards.\r\n            inflationAdjustmentFactor = inflationAdjustmentFactor.mul(10);\r\n        } else if (ratio > 25) { // Still not enough. Streak doesn't count.\r\n            inflationAdjustmentFactor = _inflationAdjustmentFactor;\r\n        }\r\n        \r\n        uint numTokens = mulDiv(balance, _lastUpdate.numerator * daysStaked, _lastUpdate.denominator * inflationAdjustmentFactor);\r\n        uint tenPercent = mulDiv(balance, 1, 10);\r\n        \r\n        if (numTokens > tenPercent) {\r\n            numTokens = tenPercent;\r\n        }\r\n        \r\n        return numTokens;\r\n    }\r\n    \r\n    function updateTokenAddress(PampToken newToken) external onlyOwner {\r\n        token = newToken;\r\n    }\r\n    \r\n    function updateCalculator(CalculatorInterface calc) external {\r\n       _externalCalculator = calc;\r\n       _useExternalCalc = true;\r\n    }\r\n    \r\n    \r\n    function updateInflationAdjustmentFactor(uint256 inflationAdjustmentFactor) external onlyOwner {\r\n        _inflationAdjustmentFactor = inflationAdjustmentFactor;\r\n    }\r\n    \r\n    function updateStreak(uint streak) external onlyOwner {\r\n        _streak = streak;\r\n    }\r\n    \r\n    function updateMinStakeDurationDays(uint8 minStakeDurationDays) external onlyOwner {\r\n        _minStakeDurationDays = minStakeDurationDays;\r\n    }\r\n    \r\n    function updateMinStakes(uint minStake) external onlyOwner {\r\n        _minStake = minStake;\r\n    }\r\n    function updateMinPercentIncrease(uint8 minIncrease) external onlyOwner {\r\n        _minPercentIncrease = minIncrease;\r\n    }\r\n    \r\n    function enableBurns(bool enabledBurns) external onlyOwner {\r\n        _enableBurns = enabledBurns;\r\n    }\r\n    function updateHoldersDay(bool enableHoldersDay)   external onlyOwner {\r\n        _enableHoldersDay = enableHoldersDay;\r\n    }\r\n    \r\n    function updateWhitelist(address addr, string calldata reason, bool remove) external onlyOwner returns (bool) {\r\n        if (remove) {\r\n            delete _whitelist[addr];\r\n            return true;\r\n        } else {\r\n            _whitelist[addr] = reason;\r\n            return true;\r\n        }\r\n        return false;        \r\n    }\r\n    \r\n    function updateBlacklist(address addr, uint256 fee, bool remove) external onlyOwner returns (bool) {\r\n        if (remove) {\r\n            delete _blacklist[addr];\r\n            return true;\r\n        } else {\r\n            _blacklist[addr] = fee;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function updateUniswapPair(address addr, bool V1) external onlyOwner returns (bool) {\r\n        if (V1) {\r\n            _uniswapV1Pair = addr;\r\n            return true;\r\n        } else {\r\n            _uniswapV2Pair = addr;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function updateDelayedSellBurns(bool enableDelayedSellBurns) external onlyOwner {\r\n        _enableDelayedSellBurns = enableDelayedSellBurns;\r\n    }\r\n    \r\n    function updateUniswapSellerBurnPercent(uint8 sellerBurnPercent) external onlyOwner {\r\n        _uniswapSellerBurnPercent = sellerBurnPercent;\r\n    }\r\n    \r\n    function freeze(bool enableFreeze) external onlyOwner {\r\n        _freeze = enableFreeze;\r\n    }\r\n    \r\n\r\n    function mulDiv (uint x, uint y, uint z) public pure returns (uint) {\r\n          (uint l, uint h) = fullMul (x, y);\r\n          require (h < z);\r\n          uint mm = mulmod (x, y, z);\r\n          if (mm > l) h -= 1;\r\n          l -= mm;\r\n          uint pow2 = z & -z;\r\n          z /= pow2;\r\n          l /= pow2;\r\n          l += h * ((-pow2) / pow2 + 1);\r\n          uint r = 1;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          return l * r;\r\n    }\r\n    \r\n    function fullMul (uint x, uint y) private pure returns (uint l, uint h) {\r\n          uint mm = mulmod (x, y, uint (-1));\r\n          l = x * y;\r\n          h = mm - l;\r\n          if (mm < l) h -= 1;\r\n    }\r\n    \r\n    function streak() public view returns (uint) {\r\n        return _streak;\r\n    }\r\n\r\n\r\n    // Hooks the transfer() function on pamptoken\r\n    function transferHook(address sender, address recipient, uint256 amount, uint256 senderBalance, uint256 recipientBalance) external onlyToken returns (uint256, uint256, uint256) {\r\n        \r\n        require(_freeze == false, \"Contract is frozen.\");\r\n        \r\n        uint totalAmount = amount;\r\n        bool shouldAddStaker = true;\r\n        bool addedToDelayedBurns = false;\r\n        uint burnedAmount = 0;\r\n        \r\n        if (_enableBurns && bytes(_whitelist[sender]).length == 0 && bytes(_whitelist[recipient]).length == 0 && bytes(_whitelist[_msgSender()]).length == 0) {\r\n                \r\n            burnedAmount = mulDiv(amount, _randomness(), 100);\r\n            \r\n            \r\n            if (_blacklist[recipient] != 0) {   //Transferring to a blacklisted address incurs a specific fee\r\n                burnedAmount = mulDiv(amount, _blacklist[recipient], 100);\r\n                shouldAddStaker = false;\r\n            }\r\n            \r\n            \r\n            \r\n            if (burnedAmount > 0) {\r\n                if (burnedAmount > amount) {\r\n                    totalAmount = 0;\r\n                } else {\r\n                    totalAmount = amount.sub(burnedAmount);\r\n                }\r\n                senderBalance = senderBalance.sub(burnedAmount, \"ERC20: burn amount amount exceeds balance\");\r\n            }\r\n        } else if (recipient == _uniswapV2Pair || recipient == _uniswapV1Pair) {    // Uniswap was used\r\n            shouldAddStaker = false;\r\n            if (_enableDelayedSellBurns && bytes(_whitelist[sender]).length == 0) { // delayed burns enabled and sender is not whitelisted\r\n                uint delayedBurnAmount = mulDiv(amount, _uniswapSellerBurnPercent, 100);     // Seller fee\r\n                seller memory _seller;\r\n                _seller.addr = sender;\r\n                _seller.burnAmount = delayedBurnAmount;\r\n                _delayedBurns.push(_seller);\r\n                addedToDelayedBurns = true;\r\n            }\r\n        \r\n        }\r\n        \r\n        if (bytes(_whitelist[recipient]).length != 0) {\r\n            shouldAddStaker = false;\r\n        }\r\n        \r\n        \r\n        if (shouldAddStaker && _stakers[recipient].startTimestamp != 0 && recipientBalance != 0) {  // If you are currently staking, these should all be true\r\n            uint percent = mulDiv(1000000, totalAmount, recipientBalance);\r\n            require(percent > 0, \"The amount you are transferring is too low as a percentage of the total balance.\");\r\n            if(percent.add(_stakers[recipient].startTimestamp) > block.timestamp) {         \r\n                _stakers[recipient].startTimestamp = block.timestamp;\r\n            } else {\r\n                _stakers[recipient].startTimestamp = _stakers[recipient].startTimestamp.add(percent);               // Receiving too many tokens resets your holding time\r\n            }\r\n            if(percent.add(_stakers[recipient].lastTimestamp) > block.timestamp) {\r\n                _stakers[recipient].lastTimestamp = block.timestamp;\r\n            } else {\r\n                _stakers[recipient].lastTimestamp = _stakers[recipient].lastTimestamp.add(percent);                 // Receiving too many tokens may make you ineligible to claim the next day\r\n            }\r\n        }\r\n        \r\n\r\n        senderBalance = senderBalance.sub(totalAmount, \"ERC20: transfer amount exceeds balance\");\r\n        recipientBalance = recipientBalance.add(totalAmount);\r\n        \r\n        if (shouldAddStaker && _stakers[recipient].startTimestamp == 0 && (totalAmount >= _minStake || recipientBalance >= _minStake)) {\r\n            _stakers[recipient] = staker(block.timestamp, block.timestamp);\r\n            emit StakerAdded(recipient);\r\n        }\r\n        \r\n        if (senderBalance < _minStake) {\r\n            // Remove staker\r\n            delete _stakers[sender];\r\n            emit StakerRemoved(sender);\r\n        } else {\r\n            _stakers[sender].startTimestamp = block.timestamp;\r\n            if (_stakers[sender].lastTimestamp == 0) {\r\n                _stakers[sender].lastTimestamp = block.timestamp;\r\n            }\r\n        }\r\n        \r\n        if (_enableDelayedSellBurns && _delayedBurns.length > 0 && !addedToDelayedBurns) {\r\n            \r\n             seller memory _seller = _delayedBurns[_delayedBurns.length - 1];\r\n             _delayedBurns.pop();\r\n             \r\n             uint balance = token.balanceOf(_seller.addr);\r\n             \r\n             if(balance >= _seller.burnAmount) {\r\n                 \r\n                 balance = balance.sub(_seller.burnAmount);\r\n                 token._burn(_seller.addr, _seller.burnAmount);\r\n                 \r\n                 if (_stakers[_seller.addr].startTimestamp != 0 && balance < _minStake) {\r\n                     // Remove staker\r\n                    delete _stakers[_seller.addr];\r\n                    emit StakerRemoved(_seller.addr);\r\n                 }\r\n             } else if (balance != 0) {\r\n                token._burn(_seller.addr, balance);\r\n                delete _stakers[_seller.addr];\r\n             }\r\n        }\r\n        \r\n        return (senderBalance, recipientBalance, burnedAmount);\r\n    }\r\n    \r\n    \r\n    function _randomness() internal view returns (uint256) {\r\n        if(_useExternalCalc) {\r\n            return _externalCalculator.randomness();\r\n        }\r\n        return 1 + uint256(keccak256(abi.encodePacked(blockhash(block.number-1), _msgSender())))%4;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PampToken\",\"name\":\"newToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MassiveCelebration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"StakerAddress\",\"type\":\"address\"}],\"name\":\"StakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"StakerAddress\",\"type\":\"address\"}],\"name\":\"StakerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"StakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whitelist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabledBurns\",\"type\":\"bool\"}],\"name\":\"enableBurns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableFreeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract PampToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"transferHook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CalculatorInterface\",\"name\":\"calc\",\"type\":\"address\"}],\"name\":\"updateCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableDelayedSellBurns\",\"type\":\"bool\"}],\"name\":\"updateDelayedSellBurns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableHoldersDay\",\"type\":\"bool\"}],\"name\":\"updateHoldersDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inflationAdjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"updateInflationAdjustmentFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minIncrease\",\"type\":\"uint8\"}],\"name\":\"updateMinPercentIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minStakeDurationDays\",\"type\":\"uint8\"}],\"name\":\"updateMinStakeDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"}],\"name\":\"updateMinStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"updateMyStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"}],\"name\":\"updateStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PampToken\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"V1\",\"type\":\"bool\"}],\"name\":\"updateUniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sellerBurnPercent\",\"type\":\"uint8\"}],\"name\":\"updateUniswapSellerBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakePampToken","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003cf907400a81e3acee3f3221e807e03c5a2ed185","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2e699243988587187404c8c6de5cedaf03921eee5122705f0abe57b9d275f81f"}]}