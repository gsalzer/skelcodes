{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ncontract BPool is ERC20 {\r\n    function isBound(address t) external view returns (bool);\r\n    function getFinalTokens() external view returns(address[] memory);\r\n    function getBalance(address token) external view returns (uint);\r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address controller) external;\r\n    function setPublicSwap(bool public_) external;\r\n    function finalize() external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n    function unbind(address token) external;\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinswapExternAmountIn(\r\n        address tokenIn, uint tokenAmountIn, uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n}\r\n\r\ncontract BFactory {\r\n    function newBPool() external returns (BPool);\r\n}\r\n\r\n/********************************** WARNING **********************************/\r\n//                                                                           //\r\n// This contract is only meant to be used in conjunction with ds-proxy.      //\r\n// Calling this contract directly will lead to loss of funds.                //\r\n//                                                                           //\r\n/********************************** WARNING **********************************/\r\n\r\ncontract BActions {\r\n\r\n    function create(\r\n        BFactory factory,\r\n        address[] calldata tokens,\r\n        uint[] calldata balances,\r\n        uint[] calldata denorms,\r\n        uint swapFee,\r\n        bool finalize\r\n    ) external returns (BPool pool) {\r\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\r\n        require(tokens.length == denorms.length, \"ERR_LENGTH_MISMATCH\");\r\n\r\n        pool = factory.newBPool();\r\n        pool.setSwapFee(swapFee);\r\n\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            ERC20 token = ERC20(tokens[i]);\r\n            require(token.transferFrom(msg.sender, address(this), balances[i]), \"ERR_TRANSFER_FAILED\");\r\n            token.approve(address(pool), balances[i]);\r\n            pool.bind(tokens[i], balances[i], denorms[i]);\r\n        }\r\n\r\n        if (finalize) {\r\n            pool.finalize();\r\n            require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \"ERR_TRANSFER_FAILED\");\r\n        } else {\r\n            pool.setController(address(this));\r\n            pool.setPublicSwap(true);\r\n        }\r\n    }\r\n\r\n    function rebind(\r\n        BPool pool,\r\n        address[] calldata tokens,\r\n        uint[] calldata balances,\r\n        uint[] calldata denorms\r\n    ) external {\r\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\r\n        require(tokens.length == denorms.length, \"ERR_LENGTH_MISMATCH\");\r\n\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            ERC20 token = ERC20(tokens[i]);\r\n            if (pool.isBound(tokens[i])) {\r\n                if (balances[i] > pool.getBalance(tokens[i])) {\r\n                    require(\r\n                        token.transferFrom(msg.sender, address(this), balances[i] - pool.getBalance(tokens[i])),\r\n                        \"ERR_TRANSFER_FAILED\"\r\n                    );\r\n                    token.approve(address(pool), balances[i] - pool.getBalance(tokens[i]));\r\n                }\r\n                if (balances[i] > 0) {\r\n                    pool.rebind(tokens[i], balances[i], denorms[i]);\r\n                } else {\r\n                    pool.unbind(tokens[i]);\r\n                }\r\n\r\n                if (token.balanceOf(address(this)) > 0) {\r\n                    require(token.transfer(msg.sender, token.balanceOf(address(this))), \"ERR_TRANSFER_FAILED\");\r\n                }\r\n            } else {\r\n                require(token.transferFrom(msg.sender, address(this), balances[i]), \"ERR_TRANSFER_FAILED\");\r\n                token.approve(address(pool), balances[i]);\r\n                pool.bind(tokens[i], balances[i], denorms[i]);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function setPublicSwap(BPool pool, bool publicSwap) external {\r\n        pool.setPublicSwap(publicSwap);\r\n    }\r\n\r\n    function setSwapFee(BPool pool, uint newFee) external {\r\n        pool.setSwapFee(newFee);\r\n    }\r\n\r\n    function setController(BPool pool, address newController) external {\r\n        pool.setController(newController);\r\n    }\r\n\r\n    function finalize(BPool pool) external {\r\n        pool.finalize();\r\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \"ERR_TRANSFER_FAILED\");\r\n    }\r\n\r\n    function joinPool(\r\n        BPool pool,\r\n        uint poolAmountOut,\r\n        uint[] calldata maxAmountsIn\r\n    ) external {\r\n        address[] memory tokens = pool.getFinalTokens();\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            ERC20 token = ERC20(tokens[i]);\r\n            require(token.transferFrom(msg.sender, address(this), maxAmountsIn[i]), \"ERR_TRANSFER_FAILED\");\r\n            token.approve(address(pool), maxAmountsIn[i]);\r\n        }\r\n        pool.joinPool(poolAmountOut, maxAmountsIn);\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            ERC20 token = ERC20(tokens[i]);\r\n            if (token.balanceOf(address(this)) > 0) {\r\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \"ERR_TRANSFER_FAILED\");\r\n            }\r\n        }\r\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \"ERR_TRANSFER_FAILED\");\r\n    }\r\n\r\n    function joinswapExternAmountIn(\r\n        BPool pool,\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external {\r\n        ERC20 token = ERC20(tokenIn);\r\n        require(token.transferFrom(msg.sender, address(this), tokenAmountIn), \"ERR_TRANSFER_FAILED\");\r\n        token.approve(address(pool), tokenAmountIn);\r\n        uint poolAmountOut = pool.joinswapExternAmountIn(tokenIn, tokenAmountIn, minPoolAmountOut);\r\n        require(pool.transfer(msg.sender, poolAmountOut), \"ERR_TRANSFER_FAILED\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"}],\"name\":\"rebind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BActions","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4a1ab0d87fbd303a0f0397f988a6bfa46d2921129c2c5d54951d2a5726883c7c"}]}