{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an address access to this role\r\n     */\r\n    function add(Role storage role, address addr)\r\n        internal\r\n    {\r\n        role.bearer[addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address' access to this role\r\n     */\r\n    function remove(Role storage role, address addr)\r\n        internal\r\n    {\r\n        role.bearer[addr] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * // reverts\r\n     */\r\n    function check(Role storage role, address addr)\r\n        view\r\n        internal\r\n    {\r\n        require(has(role, addr));\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address addr)\r\n        view\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return role.bearer[addr];\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n *      Supports unlimited numbers of roles and addresses.\r\n *      See //contracts/examples/RBACExample.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\nabstract contract RBAC {\r\n    using Roles for Roles.Role;\r\n\r\n    mapping (string => Roles.Role) private roles;\r\n\r\n    event RoleAdded(address addr, string roleName);\r\n    event RoleRemoved(address addr, string roleName);\r\n\r\n    /**\r\n     * A constant role name for indicating admins.\r\n     */\r\n    string public constant ROLE_ADMIN = \"admin\";\r\n\r\n    /**\r\n     * @dev constructor. Sets msg.sender as admin by default\r\n     */\r\n\r\n    constructor () {\r\n        addRole(msg.sender, ROLE_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function addRole(address addr, string memory roleName)\r\n        internal\r\n    {\r\n        roles[roleName].add(addr);\r\n        emit RoleAdded(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function removeRole(address addr, string memory roleName)\r\n        internal\r\n    {\r\n        roles[roleName].remove(addr);\r\n        emit RoleRemoved(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev reverts if addr does not have role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    function checkRole(address addr, string memory roleName)\r\n        view\r\n        public\r\n    {\r\n        roles[roleName].check(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev determine if addr has role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * @return bool\r\n     */\r\n    function hasRole(address addr, string memory roleName)\r\n        view\r\n        public\r\n        returns (bool)\r\n    {\r\n        return roles[roleName].has(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminAddRole(address addr, string memory roleName)\r\n        onlyAdmin\r\n        public\r\n    {\r\n        addRole(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminRemoveRole(address addr, string memory roleName)\r\n        onlyAdmin\r\n        public\r\n    {\r\n        removeRole(addr, roleName);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    modifier onlyRole(string memory roleName)\r\n    {\r\n        checkRole(msg.sender, roleName);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to admins\r\n     * // reverts\r\n     */\r\n    modifier onlyAdmin()\r\n    {\r\n        checkRole(msg.sender, ROLE_ADMIN);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n     * @param roleNames the names of the roles to scope access to\r\n     * // reverts\r\n     *\r\n     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n     *  see: https://github.com/ethereum/solidity/issues/2467\r\n     */\r\n    // modifier onlyRoles(string[] roleNames) {\r\n    //     bool hasAnyRole = false;\r\n    //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n    //         if (hasRole(msg.sender, roleNames[i])) {\r\n    //             hasAnyRole = true;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     require(hasAnyRole);\r\n\r\n    //     _;\r\n    // }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\nabstract contract ERC20Basic {\r\n    \r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view virtual returns (uint256);\r\n  function transfer(address to, uint256 value) public virtual returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  using SafeMath for uint;\r\n\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return balance uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n    using SafeMath for uint;\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   constructor() {\r\n       owner = msg.sender;\r\n   }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\nabstract contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view virtual returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n  function approve(address spender, uint256 value) public virtual returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  athaine\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  using SafeMath for uint;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public override returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  using SafeMath for uint;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/Recurly.sol\r\n\r\ncontract Recurly is StandardToken, BurnableToken, MintableToken, RBAC {\r\n  using SafeMath for uint;\r\n  string public constant name = \"Recurly\";\r\n  string public constant symbol = \"RCR\";\r\n  uint8 public constant decimals = 18;\r\n  string constant public ROLE_TRANSFER = \"transfer\";\r\n    \r\n  constructor() {\r\n      totalSupply = 0;\r\n  }\r\n\r\n  // used by hodler contract to transfer users tokens to it\r\n  function hodlerTransfer(address _from, uint256 _value) external onlyRole(ROLE_TRANSFER) returns (bool) {\r\n    require(_from != address(0));\r\n    require(_value > 0);\r\n\r\n    // hodler\r\n    address _hodler = msg.sender;\r\n\r\n    // update state\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_hodler] = balances[_hodler].add(_value);\r\n\r\n    // logs\r\n    emit Transfer(_from, _hodler, _value);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/CLERK.sol\r\n\r\ncontract CLERK is StandardToken, BurnableToken, RBAC {\r\n  using SafeMath for uint;\r\n  string public constant name = \"Defi Clerk\";\r\n  string public constant symbol = \"CLERK\";\r\n  uint8 public constant decimals = 18;\r\n  string constant public ROLE_MINT = \"mint\";\r\n\r\n  event MintLog(address indexed to, uint256 amount);\r\n\r\n  constructor() {\r\n    totalSupply = 0;\r\n  }\r\n\r\n  // used by contracts to mint CLERK tokens\r\n  function mint(address _to, uint256 _amount) external onlyRole(ROLE_MINT) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_amount > 0);\r\n\r\n    // update state\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    // logs\r\n    emit MintLog(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Hodler is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for Recurly;\r\n  using SafeERC20 for CLERK;\r\n\r\n  Recurly public recurly;\r\n  CLERK public clerk;\r\n \r\n  struct Item {\r\n    uint256 id;\r\n    address beneficiary;\r\n    uint256 value;\r\n    uint256 releaseTime;\r\n    bool fulfilled;\r\n  }\r\n\r\n  mapping(address => mapping(uint256 => Item)) private items;\r\n\r\n  \r\n  constructor(address _recurly, address _clerk) {\r\n      require(_recurly != address(0));\r\n      \r\n      recurly = Recurly(_recurly);\r\n      changeClerkAddress(_clerk);\r\n  }\r\n\r\n\r\n  function changeClerkAddress(address _clerk) public onlyOwner {\r\n    require(_clerk != address(0));\r\n\r\n    clerk = CLERK(_clerk);\r\n  }\r\n\r\n  function hodl(uint256 _id, uint256 _value, uint256 _months) external {\r\n    require(_id > 0);\r\n    require(_value > 0);\r\n    // only 3 types are allowed\r\n    require(_months == 3 || _months == 6 || _months == 12);\r\n\r\n    // user\r\n    address _user = msg.sender;\r\n\r\n    // get clerk item\r\n    Item storage item = items[_user][_id];\r\n    // make sure clerk doesnt exist already\r\n    require(item.id != _id);\r\n\r\n    // turn months to seconds\r\n    uint256 _seconds = _months.mul(2628000);\r\n    //current time\r\n    uint256 _now = block.timestamp;\r\n    // get release time\r\n    uint256 _releaseTime = _now.add(_seconds);\r\n    require(_releaseTime > _now);\r\n\r\n    // check if user has enough balance\r\n    uint256 balance = recurly.balanceOf(_user);\r\n    require(balance >= _value);\r\n\r\n    // calculate percentage to mint for user: 3 months = 1% => _months / 3 = x\r\n    uint256 userPercentage = _months.div(3);\r\n    // get clerk amount: => (_value * userPercentage) / 100\r\n    uint256 userClerkAmount = _value.mul(userPercentage).div(100);\r\n\r\n    // update state\r\n    items[_user][_id] = Item(_id, _user, _value, _releaseTime, false);\r\n\r\n    // transfer tokens to hodler\r\n    assert(recurly.hodlerTransfer(_user, _value));\r\n\r\n    // mint tokens for user\r\n    assert(clerk.mint(_user, userClerkAmount));\r\n  }\r\n\r\n  function release(uint256 _id) external {\r\n    require(_id > 0);\r\n\r\n    // user\r\n    address _user = msg.sender;\r\n\r\n    // get item\r\n    Item storage item = items[_user][_id];\r\n\r\n    // check if it exists\r\n    require(item.id == _id);\r\n    // check if its not already fulfilled\r\n    require(!item.fulfilled);\r\n    // check time\r\n    require(block.timestamp >= item.releaseTime);\r\n\r\n    // check if there is enough tokens\r\n    uint256 balance = recurly.balanceOf(address(this));\r\n    require(balance >= item.value);\r\n\r\n    // update state\r\n    item.fulfilled = true;\r\n\r\n    // transfer tokens to beneficiary\r\n    recurly.safeTransfer(item.beneficiary, item.value);\r\n  }\r\n\r\n  function getItem(address _user, uint256 _id) public view returns (uint256, address, uint256, uint256, bool) {\r\n    Item storage item = items[_user][_id];\r\n\r\n    return (\r\n      item.id,\r\n      item.beneficiary,\r\n      item.value,\r\n      item.releaseTime,\r\n      item.fulfilled\r\n    );\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recurly\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clerk\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clerk\",\"type\":\"address\"}],\"name\":\"changeClerkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clerk\",\"outputs\":[{\"internalType\":\"contract CLERK\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_months\",\"type\":\"uint256\"}],\"name\":\"hodl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recurly\",\"outputs\":[{\"internalType\":\"contract Recurly\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Hodler","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f5323c19fb271a489000b739b09554c144ba840d000000000000000000000000432a92cccb253e890b6765e5d368733a27a5df49","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8bdc8ae73fff340763b235bed2b810f10b4874c018f0c361ad914fbe76cee738"}]}