{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\ncontract BubbleUtil {\r\n    uint256 ethWei = 1 ether;\r\n    uint256 public startTime;\r\n\r\n    //limit user max calc ETH is 15 ether\r\n    function getMaxEthMiner(uint256 value) public view returns (uint256) {\r\n        if (value > 15 * ethWei) {\r\n            return 15 * ethWei;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    //limit user max calc BUB is frozenEth * 1000\r\n    function getMaxBubMiner(uint256 frozenEth, uint256 value)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (value > (frozenEth / ethWei) * 100000) {\r\n            return (frozenEth / ethWei) * 100000;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function getLevel(uint256 value) public view returns (uint256) {\r\n        if (value >= 1 * ethWei && value < 6 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value >= 6 * ethWei && value < 11 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value >= 11 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBoostLevel(uint256 value) public view returns (uint256) {\r\n        if (value >= 40000 && value < 150000) {\r\n            return 1;\r\n        }\r\n        if (value >= 150000 && value < 200000) {\r\n            return 2;\r\n        }\r\n        if (value >= 200000 && value < 800000) {\r\n            return 3;\r\n        }\r\n        if (value >= 800000 && value < 4000000) {\r\n            return 4;\r\n        }\r\n        if (value >= 4000000 && value < 20000000) {\r\n            return 5;\r\n        }\r\n        if (value >= 20000000) {\r\n            return 6;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getUserLevelCoefficient(uint256 level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //30%\r\n        if (level == 1) {\r\n            return 30;\r\n        }\r\n        //60%\r\n        if (level == 2) {\r\n            return 60;\r\n        }\r\n        //100%\r\n        if (level >= 3) {\r\n            return 100;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getUserBoostCoefficient(uint256 boostLevel)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //150%\r\n        if (boostLevel == 1) {\r\n            return 150;\r\n        }\r\n        //170%\r\n        if (boostLevel == 2) {\r\n            return 170;\r\n        }\r\n        //200%\r\n        if (boostLevel >= 3) {\r\n            return 200;\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function getUserInviterBoostCoefficient(uint256 boostLevel)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //120%\r\n        if (boostLevel == 4) {\r\n            return 120;\r\n        }\r\n        //150%\r\n        if (boostLevel == 5) {\r\n            return 150;\r\n        }\r\n        //200%\r\n        if (boostLevel >= 6) {\r\n            return 200;\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function getUserReinvestCoefficient(uint256 reinvestCount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //130%\r\n        if (reinvestCount == 1) {\r\n            return 130;\r\n        }\r\n        //170%\r\n        if (reinvestCount == 2) {\r\n            return 170;\r\n        }\r\n        //220%\r\n        if (reinvestCount == 3) {\r\n            return 220;\r\n        }\r\n        if (reinvestCount >= 4) {\r\n            return 300;\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function getGameCoefficient() public view returns (uint256) {\r\n        if (now < startTime + 14 days) {\r\n            return 2;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    function compareStr(string memory _str, string memory str)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool checkResult = false;\r\n        if (\r\n            keccak256(abi.encodePacked(_str)) ==\r\n            keccak256(abi.encodePacked(str))\r\n        ) {\r\n            checkResult = true;\r\n        }\r\n        return checkResult;\r\n    }\r\n}\r\n\r\ncontract Bubble is BubbleUtil, ERC20 {\r\n    using SafeMath for *;\r\n\r\n    //Token\r\n    string public name = \"BubbleToken\";\r\n    string public symbol = \"BUB\";\r\n    uint256 public decimals = 2;\r\n    uint256 public INITIAL_SUPPLY = 10000000000;\r\n\r\n    //Game\r\n    address administrator;\r\n    bool isGameOver;\r\n\r\n    //0.3%\r\n    uint256 public ETHCoefficient = 30;\r\n    //15%\r\n    uint256 public BUBCoefficient = 1500;\r\n    //2%\r\n    uint256 public JackpotCoefficient = 2;\r\n\r\n    uint256 invitePoolTokenAmount;\r\n    uint256 reservedTokenAmount;\r\n    uint256 public diggedTokenAmount;\r\n    uint256 public totalFrozenTokenAmount;\r\n    uint256 LIMITREINVESTTIME = 12 hours;\r\n    uint256 USERLOCKTIME = 5 days;\r\n    uint256 GROWTHPERIOD = 20 days;\r\n\r\n    constructor() public {\r\n        //init token\r\n        //0.2%\r\n        _mint(msg.sender, INITIAL_SUPPLY / 500);\r\n\r\n        _mint(address(this), (INITIAL_SUPPLY * 499) / 500);\r\n        //1.8% to increase prize pool eth balance\r\n        reservedTokenAmount = (INITIAL_SUPPLY * 9) / 500;\r\n        //init game\r\n        administrator = msg.sender;\r\n        //2%\r\n        invitePoolTokenAmount = INITIAL_SUPPLY / 50;\r\n        isGameOver = false;\r\n        startTime = now;\r\n    }\r\n\r\n    struct User {\r\n        address payable userAddress;\r\n        uint256 frozenToken;\r\n        uint256 freeToken;\r\n        uint256 frozenEth;\r\n        uint256 freeEth;\r\n        uint256 startTime;\r\n        uint256 level;\r\n        uint256 boostLevel;\r\n        uint256 totalEthProfit;\r\n        uint256 totalTokenProfit;\r\n        uint256 inviteCount;\r\n        uint256 inviteRewardEth;\r\n        uint256 inviteRewardToken;\r\n        uint256 reinvestCount;\r\n        bool isSendV1Award;\r\n        bool isSendV2Award;\r\n        bool isSendV3Award;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint256 status;\r\n    }\r\n\r\n    mapping(address => User) users;\r\n    mapping(string => address payable) addressMapping;\r\n\r\n    address payable public jackpotAddr = address(0);\r\n    address payable public devAddr = address(\r\n        0xd7E023642177432b029A274fee54Fb134B829293\r\n    );\r\n\r\n    event InvestEvent(\r\n        address indexed user,\r\n        uint256 ethAmount,\r\n        uint256 tokenAmount\r\n    );\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == administrator,\r\n            \"OnlyOwner methods called by non-owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(addr)\r\n        }\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    modifier checkStart() {\r\n        require(now > startTime, \"not start\");\r\n        _;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    function setJackpotAddress(address payable addr) public {\r\n        //excute once\r\n        if (jackpotAddr == address(0) && msg.sender == administrator) {\r\n            jackpotAddr = addr;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function registerUser(\r\n        User storage userGlobal,\r\n        address payable userAddress,\r\n        string memory inviteCode,\r\n        string memory referrer\r\n    ) private {\r\n        userGlobal.userAddress = userAddress;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n        userGlobal.status = 0;\r\n        address invitedAddress = getUserByInvitedCode(referrer);\r\n        User storage invitedUser = users[invitedAddress];\r\n        invitedUser.inviteCount = invitedUser.inviteCount + 1;\r\n\r\n        addressMapping[inviteCode] = userAddress;\r\n    }\r\n\r\n    function registerUserByOwner(\r\n        address payable userAddress,\r\n        string memory inviteCode,\r\n        string memory referrer\r\n    ) public onlyOwner() {\r\n        User storage user = users[userAddress];\r\n        require(user.userAddress == address(0), \"user is exist\");\r\n        require(isCodeUsed(inviteCode) == false, \"invite code is used\");\r\n        registerUser(user, userAddress, inviteCode, referrer);\r\n    }\r\n\r\n    function invest(\r\n        uint256 tokenAmount,\r\n        string memory inviteCode,\r\n        string memory referrer\r\n    ) public payable isHuman() checkStart() {\r\n        require(!isGameOver, \"game is over\");\r\n\r\n        address payable userAddress = msg.sender;\r\n        uint256 ethAmount = msg.value;\r\n\r\n        //check token balance\r\n        require(\r\n            balanceOf(userAddress) >= tokenAmount,\r\n            \"token balance is insufficient\"\r\n        );\r\n\r\n        User storage user = users[userAddress];\r\n\r\n        //register\r\n        if (user.userAddress == address(0)) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserByInvitedCode(referrer);\r\n            require(referrerAddr != address(0), \"referrer not exist\");\r\n            require(referrerAddr != userAddress, \"referrer can't be self\");\r\n            require(isCodeUsed(inviteCode) == false, \"invite code is used\");\r\n            registerUser(user, userAddress, inviteCode, referrer);\r\n        }\r\n\r\n        if (tokenAmount > 0) {\r\n            transfer(address(this), tokenAmount);\r\n        }\r\n\r\n        //invest first\r\n        if (user.status == 0 || user.status == 2) {\r\n            restartUser(user, ethAmount, tokenAmount);\r\n        } else {\r\n            require(user.status == 1, \"user status error\");\r\n\r\n            // user can additional investment in 1 day\r\n            require(\r\n                now < user.startTime + LIMITREINVESTTIME,\r\n                \"over the stipulated time, account is locked\"\r\n            );\r\n            //reset start time\r\n            restartUser(user, ethAmount, tokenAmount);\r\n        }\r\n\r\n        require(user.frozenEth + ethAmount >= 1 * ethWei, \"greater than 1 eth\");\r\n\r\n        calcInvitedAndSendAward(user);\r\n\r\n        user.level = getLevel(user.frozenEth);\r\n        user.boostLevel = getBoostLevel(user.frozenToken);\r\n\r\n        if (ethAmount >= 0) {\r\n            sendFeeToJackpot(ethAmount);\r\n            sendFeeToAdmin(ethAmount);\r\n        }\r\n\r\n        emit InvestEvent(userAddress, ethAmount, tokenAmount);\r\n    }\r\n\r\n    function reinvest() public isHuman() {\r\n        require(!isGameOver, \"game is over\");\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 unlockTime = getUserUnlockTime(user.startTime);\r\n\r\n        require(now > unlockTime, \"user is locking\");\r\n        require(user.status == 1, \"user status err\");\r\n\r\n        //empty frozen ETH\r\n        settleAccount(user);\r\n\r\n        require(user.freeEth > 1 * ethWei, \"greater than 1 eth\");\r\n\r\n        uint256 reinvestEth = user.freeEth;\r\n        user.freeEth = 0;\r\n\r\n        uint256 reinvestToken = user.freeToken;\r\n        user.freeToken = 0;\r\n\r\n        //reset frozen Eth\r\n        restartUser(user, reinvestEth, reinvestToken);\r\n\r\n        calcInvitedAndSendAward(user);\r\n        user.level = getLevel(user.frozenEth);\r\n        user.boostLevel = getBoostLevel(user.frozenToken);\r\n        user.reinvestCount = user.reinvestCount + 1;\r\n\r\n        sendFeeToJackpot(reinvestEth);\r\n        sendFeeToAdmin(reinvestEth);\r\n\r\n        emit InvestEvent(user.userAddress, reinvestEth, reinvestToken);\r\n    }\r\n\r\n    function withdraw() public isHuman() checkStart() {\r\n        User storage user = users[msg.sender];\r\n\r\n        //withdraw will set reinvest to 0\r\n        user.reinvestCount = 0;\r\n\r\n        settleAccount(user);\r\n\r\n        uint256 sendMoney = user.freeEth;\r\n        uint256 sendToken = user.freeToken;\r\n        bool isEthEnough = false;\r\n        bool isTokenEnough = false;\r\n        uint256 resultMoney = 0;\r\n        uint256 resultToken = 0;\r\n\r\n        (isEthEnough, resultMoney) = isEthBalanceEnough(sendMoney);\r\n        (isTokenEnough, resultToken) = isTokenBalanceEnough(sendToken);\r\n\r\n        if (resultMoney > 0) {\r\n            user.freeEth = user.freeEth.sub(resultMoney);\r\n            msg.sender.transfer(resultMoney);\r\n        }\r\n        if (resultToken > 0) {\r\n            user.freeToken = user.freeToken.sub(resultToken);\r\n            sendTokenTo(msg.sender, resultToken);\r\n        }\r\n\r\n        if (!isEthEnough) {\r\n            endRound();\r\n        }\r\n    }\r\n\r\n    function getUserByInvitedCode(string memory code)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function restartUser(\r\n        User storage user,\r\n        uint256 ethAmount,\r\n        uint256 tokenAmount\r\n    ) private {\r\n        user.frozenEth = user.frozenEth.add(ethAmount);\r\n        user.frozenToken = user.frozenToken.add(tokenAmount);\r\n        user.startTime = now;\r\n        user.status = 1;\r\n        totalFrozenTokenAmount = totalFrozenTokenAmount + tokenAmount;\r\n    }\r\n\r\n    function settleAccount(User storage user) private returns (bool) {\r\n        uint256 unlockTime = getUserUnlockTime(user.startTime);\r\n\r\n        if (user.status == 1 && now > unlockTime) {\r\n            totalFrozenTokenAmount = totalFrozenTokenAmount - user.frozenToken;\r\n            uint256 calcEth = getMaxEthMiner(user.frozenEth);\r\n            uint256 earningMoney = getUserEthEarning(user.userAddress, calcEth);\r\n            uint256 calcBub = getMaxBubMiner(user.frozenEth, user.frozenToken);\r\n            uint256 earningToken = getUserTokenEarning(\r\n                user.userAddress,\r\n                calcBub\r\n            );\r\n            user.freeToken = user.freeToken + user.frozenToken + earningToken;\r\n            user.freeEth = user.freeEth + user.frozenEth + earningMoney;\r\n            user.totalEthProfit = user.totalEthProfit + earningMoney;\r\n            user.totalTokenProfit = user.totalTokenProfit + earningToken;\r\n            user.frozenEth = 0;\r\n            user.frozenToken = 0;\r\n            user.level = 0;\r\n            user.status = 2;\r\n            user.isSendV1Award = false;\r\n            user.isSendV2Award = false;\r\n            user.isSendV3Award = false;\r\n            address inviter = getUserByInvitedCode(user.referrer);\r\n            sendInviteReward(earningMoney, inviter);\r\n            diggedTokenAmount = diggedTokenAmount + earningToken;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function sendInviteReward(uint256 earningMoney, address inviter) private {\r\n        User storage user = users[inviter];\r\n        uint256 inviteEarning = 0;\r\n        inviteEarning =\r\n            (earningMoney *\r\n                getUserLevelCoefficient(user.level) *\r\n                getUserInviterBoostCoefficient(user.boostLevel)) /\r\n            (100 * 100 * 2);\r\n        if (inviteEarning > 0) {\r\n            user.freeEth = user.freeEth + inviteEarning;\r\n            user.inviteRewardEth = user.inviteRewardEth + inviteEarning;\r\n        }\r\n    }\r\n\r\n    function getUserUnlockTime(uint256 startTime)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return startTime + USERLOCKTIME;\r\n    }\r\n\r\n    function getUserTokenEarning(address userAddress, uint256 frozenToken)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //500 /10000 = 5%\r\n        return (frozenToken * getUserEarningRatio(userAddress, false)) / 10000;\r\n    }\r\n\r\n    function getUserEarningRatio(address userAddress, bool isEth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User memory user = users[userAddress];\r\n        if (user.status == 1) {\r\n            if (isEth) {\r\n                //default 0.3% per day\r\n                uint256 defaultCoefficient = ETHCoefficient;\r\n                defaultCoefficient =\r\n                    (defaultCoefficient *\r\n                        getGameCoefficient() *\r\n                        getUserLevelCoefficient(user.level) *\r\n                        getUserBoostCoefficient(user.boostLevel) *\r\n                        getUserReinvestCoefficient(user.reinvestCount)) /\r\n                    (100 * 100 * 100);\r\n                return defaultCoefficient;\r\n            } else {\r\n                //default 5% per round\r\n                uint256 defaultCoefficient = BUBCoefficient;\r\n                defaultCoefficient =\r\n                    (defaultCoefficient *\r\n                        getGameCoefficient() *\r\n                        getUserLevelCoefficient(user.level) *\r\n                        getUserReinvestCoefficient(user.reinvestCount)) /\r\n                    (100 * 100);\r\n                return defaultCoefficient;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getUserEthEarning(address userAddress, uint256 frozenEth)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // 30 / 10000 = 0.3%\r\n        uint256 dailyProfit = (frozenEth *\r\n            getUserEarningRatio(userAddress, true)) / 10000;\r\n\r\n        return dailyProfit * 5;\r\n    }\r\n\r\n    function isEthBalanceEnough(uint256 sendMoney)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        if (address(this).balance > 0) {\r\n            if (sendMoney >= address(this).balance) {\r\n                return (false, address(this).balance);\r\n            } else {\r\n                return (true, sendMoney);\r\n            }\r\n        } else {\r\n            return (false, 0);\r\n        }\r\n    }\r\n\r\n    function isTokenBalanceEnough(uint256 sendMoney)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            if (sendMoney >= tokenBalance) {\r\n                return (false, tokenBalance);\r\n            } else {\r\n                return (true, sendMoney);\r\n            }\r\n        } else {\r\n            return (false, 0);\r\n        }\r\n    }\r\n\r\n    function calcInvitedAndSendAward(User storage user) private {\r\n        uint256 currentLvel = getLevel(user.frozenEth);\r\n        uint256 sendToken = 0;\r\n        if (currentLvel >= 1 && !user.isSendV1Award) {\r\n            sendToken += 20000;\r\n            user.isSendV1Award = true;\r\n        }\r\n\r\n        if (currentLvel >= 2 && !user.isSendV2Award) {\r\n            sendToken += 40000;\r\n            user.isSendV2Award = true;\r\n        }\r\n\r\n        if (currentLvel >= 3 && !user.isSendV3Award) {\r\n            sendToken += 40000;\r\n            user.isSendV3Award = true;\r\n        }\r\n\r\n        address inviterAddress = getUserByInvitedCode(user.referrer);\r\n        if (\r\n            invitePoolTokenAmount >= sendToken &&\r\n            balanceOf(address(this)) >= sendToken &&\r\n            sendToken > 0\r\n        ) {\r\n            invitePoolTokenAmount -= sendToken;\r\n            User storage inviter = users[inviterAddress];\r\n            if (inviter.level > 0) {\r\n                inviter.freeToken = inviter.freeToken + sendToken;\r\n                inviter.inviteRewardToken =\r\n                    inviter.inviteRewardToken +\r\n                    sendToken;\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendFeeToJackpot(uint256 amount) private {\r\n        jackpotAddr.transfer(amount.mul(JackpotCoefficient).div(100));\r\n    }\r\n\r\n    function sendFeeToAdmin(uint256 amount) private {\r\n        devAddr.transfer(amount.mul(5).div(100));\r\n    }\r\n\r\n    function sendTokenTo(address recipient, uint256 amount) private {\r\n        _transfer(address(this), recipient, amount);\r\n    }\r\n\r\n    function isCodeUsed(string memory code) public view returns (bool) {\r\n        address user = getUserByInvitedCode(code);\r\n        return user != address(0);\r\n    }\r\n\r\n    function getUserInfo(address user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[18] memory ct,\r\n            string memory inviteCode,\r\n            string memory referrer\r\n        )\r\n    {\r\n        User memory userInfo = users[user];\r\n        ct[0] = userInfo.frozenToken;\r\n        ct[1] = userInfo.frozenEth;\r\n        ct[2] = userInfo.startTime;\r\n        ct[3] = getUserUnlockTime(userInfo.startTime);\r\n        ct[4] = userInfo.level;\r\n        ct[5] = userInfo.status;\r\n        ct[6] = userInfo.totalEthProfit;\r\n        ct[7] = userInfo.totalTokenProfit;\r\n        ct[8] = userInfo.reinvestCount;\r\n        ct[9] = userInfo.inviteCount;\r\n        ct[10] = userInfo.isSendV1Award ? 1 : 0;\r\n        ct[11] = userInfo.isSendV2Award ? 1 : 0;\r\n        ct[12] = userInfo.isSendV3Award ? 1 : 0;\r\n        ct[13] = userInfo.boostLevel;\r\n        ct[14] = userInfo.freeEth;\r\n        ct[15] = userInfo.freeToken;\r\n        ct[16] = userInfo.inviteRewardEth;\r\n        ct[17] = userInfo.inviteRewardToken;\r\n\r\n        inviteCode = userInfo.inviteCode;\r\n        referrer = userInfo.referrer;\r\n\r\n        return (ct, inviteCode, referrer);\r\n    }\r\n\r\n    function endRound() private {\r\n        if (now > startTime + GROWTHPERIOD) {\r\n            isGameOver = true;\r\n        }\r\n    }\r\n\r\n    //Game Coefficient\r\n    // vote to change\r\n    function resetETHCoefficient(uint256 Coefficient) public onlyOwner() {\r\n        require(Coefficient > 0);\r\n        ETHCoefficient = Coefficient;\r\n    }\r\n\r\n    // vote to change\r\n    function resetBUBCoefficient(uint256 Coefficient) public onlyOwner() {\r\n        require(Coefficient > 0);\r\n        BUBCoefficient = Coefficient;\r\n    }\r\n\r\n    //20 days to 3%; 30 days to 4%; 40 days to 5%\r\n    function resetJackpotcCoefficient(uint256 Coefficient) public onlyOwner() {\r\n        require(Coefficient > 0);\r\n        JackpotCoefficient = Coefficient;\r\n    }\r\n\r\n    function drawAward() public onlyOwner() {\r\n        //total 1.8%\r\n        uint256 totalAmount = (INITIAL_SUPPLY * 9) / 500;\r\n        uint256 eachAmount = totalAmount / 10;\r\n        if (\r\n            jackpotAddr.balance >= 100 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 10\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 150 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 9\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 200 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 8\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 250 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 7\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 300 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 6\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 400 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 5\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 500 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 4\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 600 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 3\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 700 * ethWei &&\r\n            reservedTokenAmount == eachAmount * 2\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        } else if (\r\n            jackpotAddr.balance >= 800 * ethWei &&\r\n            reservedTokenAmount == eachAmount\r\n        ) {\r\n            reservedTokenAmount = reservedTokenAmount - eachAmount;\r\n            sendTokenTo(msg.sender, eachAmount);\r\n        }\r\n    }\r\n\r\n    //Jackpot call\r\n    function getGameOverStatus() external view returns (bool) {\r\n        return isGameOver;\r\n    }\r\n\r\n    function transferAllEthToJackPot() external {\r\n        if (!isGameOver) {\r\n            jackpotAddr.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function sendTokenToJackpot(address sender, uint256 amount) external {\r\n        require(msg.sender == jackpotAddr, \"call only by jackpot\");\r\n        _transfer(sender, jackpotAddr, amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"InvestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUBCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JackpotCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"diggedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getBoostLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameOverStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frozenEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getMaxBubMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getMaxEthMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boostLevel\",\"type\":\"uint256\"}],\"name\":\"getUserBoostCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserByInvitedCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"name\":\"getUserEarningRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[18]\",\"name\":\"ct\",\"type\":\"uint256[18]\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boostLevel\",\"type\":\"uint256\"}],\"name\":\"getUserInviterBoostCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getUserLevelCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"name\":\"getUserReinvestCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"getUserUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isCodeUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"registerUserByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Coefficient\",\"type\":\"uint256\"}],\"name\":\"resetBUBCoefficient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Coefficient\",\"type\":\"uint256\"}],\"name\":\"resetETHCoefficient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Coefficient\",\"type\":\"uint256\"}],\"name\":\"resetJackpotcCoefficient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokenToJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setJackpotAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFrozenTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferAllEthToJackPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bubble","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://433eb860b16c3988c3207866da03cd7679b57f3a16bacf1fb9047c0139a0d9a4"}]}