{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n  /**\r\n   * @dev Return ethereum address\r\n   */\r\n  function getEthAddr() internal pure returns (address) {\r\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return memory variable address\r\n   */\r\n  function getMemoryAddr() internal pure returns (address) {\r\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return InstaEvent Address.\r\n   */\r\n  function getEventAddr() internal pure returns (address) {\r\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n  }\r\n\r\n  /**\r\n   * @dev Get Uint value from InstaMemory Contract.\r\n   */\r\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n  }\r\n\r\n  /**\r\n  * @dev Set Uint value in InstaMemory Contract.\r\n  */\r\n  function setUint(uint setId, uint val) virtual internal {\r\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n  }\r\n\r\n  /**\r\n  * @dev emit event on event contract\r\n  */\r\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\r\n    (uint model, uint id) = connectorID();\r\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n  }\r\n\r\n  /**\r\n  * @dev Connector Details.\r\n  */\r\n  function connectorID() public view returns(uint model, uint id) {\r\n    (model, id) = (1, 41);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n}\r\n\r\ninterface IGauge {\r\n  function claim_rewards() external;\r\n  function deposit(uint256 value) external;\r\n  function withdraw(uint256 value) external;\r\n  function lp_token() external view returns(address token);\r\n  function rewarded_token() external view returns(address token);\r\n  function crv_token() external view returns(address token);\r\n  function balanceOf(address user) external view returns(uint256 amt);\r\n}\r\n\r\ninterface IMintor{\r\n  function mint(address gauge) external;\r\n}\r\n\r\ninterface ICurveGaugeMapping {\r\n\r\n  struct GaugeData {\r\n    address gaugeAddress;\r\n    bool rewardToken;\r\n  }\r\n\r\n  function gaugeMapping(bytes32) external view returns(GaugeData memory);\r\n}\r\n\r\ncontract GaugeHelper is DSMath, Stores{\r\n\r\n  function getCurveGaugeMappingAddr() internal virtual view returns (address){\r\n    return 0x1C800eF1bBfE3b458969226A96c56B92a069Cc92;\r\n  }\r\n\r\n  function getCurveMintorAddr() internal virtual view returns (address){\r\n    return 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n  }\r\n\r\n  /**\r\n   * @dev Convert String to bytes32.\r\n   */\r\n  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n    require(bytes(str).length != 0, \"string-empty\");\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      result := mload(add(str, 32))\r\n    }\r\n  }\r\n}\r\n\r\ncontract CurveGaugeEvent is GaugeHelper {\r\n  event LogDeposit(\r\n    string indexed gaugePoolName,\r\n    uint amount,\r\n    uint getId,\r\n    uint setId\r\n  );\r\n\r\n  event LogWithdraw(\r\n    string indexed gaugePoolName,\r\n    uint amount,\r\n    uint getId,\r\n    uint setId\r\n  );\r\n\r\n  event LogClaimedReward(\r\n    string indexed gaugePoolName,\r\n    uint amount,\r\n    uint rewardAmt,\r\n    uint setId,\r\n    uint setIdReward\r\n  );\r\n\r\n  function emitLogWithdraw(string memory gaugePoolName, uint _amt, uint getId, uint setId) internal {\r\n    emit LogWithdraw(gaugePoolName, _amt, getId, setId);\r\n    bytes32 _eventCodeWithdraw = keccak256(\"LogWithdraw(string,uint256,uint256,uint256)\");\r\n    bytes memory _eventParamWithdraw = abi.encode(gaugePoolName, _amt, getId, setId);\r\n    emitEvent(_eventCodeWithdraw, _eventParamWithdraw);\r\n  }\r\n\r\n  function emitLogClaimedReward(string memory gaugePoolName, uint crvAmt, uint rewardAmt, uint setIdCrv, uint setIdReward) internal {\r\n    emit LogClaimedReward(gaugePoolName, crvAmt, rewardAmt, setIdCrv, setIdReward);\r\n    bytes32 _eventCode = keccak256(\"LogClaimedReward(string,uint256,uint256,uint256,uint256)\");\r\n    bytes memory _eventParam = abi.encode(gaugePoolName, crvAmt, rewardAmt, setIdCrv, setIdReward);\r\n    emitEvent(_eventCode, _eventParam);\r\n  }\r\n}\r\n\r\ncontract CurveGauge is CurveGaugeEvent {\r\n  struct Balances{\r\n    uint intialCRVBal;\r\n    uint intialRewardBal;\r\n    uint finalCRVBal;\r\n    uint finalRewardBal;\r\n    uint crvRewardAmt;\r\n    uint rewardAmt;\r\n  }\r\n\r\n  /**\r\n  * @dev Deposit Cruve LP Token.\r\n    * @param gaugePoolName Curve gauge pool name.\r\n    * @param amt deposit amount.\r\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n    * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function deposit(\r\n    string calldata gaugePoolName,\r\n    uint amt,\r\n    uint getId,\r\n    uint setId\r\n  ) external payable {\r\n    uint _amt = getUint(getId, amt);\r\n    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\r\n    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\r\n        bytes32(stringToBytes32(gaugePoolName)\r\n    ));\r\n    require(curveGaugeData.gaugeAddress != address(0), \"wrong-gauge-pool-name\");\r\n    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\r\n    TokenInterface lp_token = TokenInterface(address(gauge.lp_token()));\r\n\r\n    _amt = _amt == uint(-1) ? lp_token.balanceOf(address(this)) : _amt;\r\n    lp_token.approve(address(curveGaugeData.gaugeAddress), _amt);\r\n\r\n    gauge.deposit(_amt);\r\n\r\n    setUint(setId, _amt);\r\n\r\n    emit LogDeposit(gaugePoolName, _amt, getId, setId);\r\n    bytes32 _eventCode = keccak256(\"LogDeposit(string,uint256,uint256,uint256)\");\r\n    bytes memory _eventParam = abi.encode(gaugePoolName, _amt, getId, setId);\r\n    emitEvent(_eventCode, _eventParam);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw LP Token and claim both CRV and Reward token.\r\n    * @param gaugePoolName gauge pool name.\r\n    * @param amt LP token amount.\r\n    * @param getId Get LP token amount at this ID from `InstaMemory` Contract.\r\n    * @param setId Set LP token amount at this ID in `InstaMemory` Contract.\r\n    * @param setIdCrv Set CRV token reward amount at this ID in `InstaMemory` Contract.\r\n    * @param setIdReward Set reward amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function withdraw(\r\n    string calldata gaugePoolName,\r\n    uint amt,\r\n    uint getId,\r\n    uint setId,\r\n    uint setIdCrv,\r\n    uint setIdReward\r\n  ) external payable {\r\n    uint _amt = getUint(getId, amt);\r\n    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\r\n    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\r\n      bytes32(stringToBytes32(gaugePoolName))\r\n    );\r\n    require(curveGaugeData.gaugeAddress != address(0), \"wrong-gauge-pool-name\");\r\n    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\r\n    TokenInterface crv_token = TokenInterface(address(gauge.crv_token()));\r\n    TokenInterface rewarded_token;\r\n    Balances memory balances;\r\n\r\n    _amt = _amt == uint(-1) ? gauge.balanceOf(address(this)) : _amt;\r\n    balances.intialCRVBal = crv_token.balanceOf(address(this));\r\n\r\n    if (curveGaugeData.rewardToken) {\r\n      rewarded_token = TokenInterface(address(gauge.rewarded_token()));\r\n      balances.intialRewardBal = rewarded_token.balanceOf(address(this));\r\n    }\r\n\r\n    IMintor(getCurveMintorAddr()).mint(curveGaugeData.gaugeAddress);\r\n    gauge.withdraw(_amt);\r\n\r\n    balances.finalCRVBal = crv_token.balanceOf(address(this));\r\n    balances.crvRewardAmt = sub(balances.finalCRVBal, balances.intialCRVBal);\r\n\r\n    setUint(setId, _amt);\r\n    setUint(setIdCrv, balances.crvRewardAmt);\r\n\r\n    if (curveGaugeData.rewardToken) {\r\n      balances.finalRewardBal = rewarded_token.balanceOf(address(this));\r\n      balances.rewardAmt = sub(balances.finalRewardBal, balances.intialRewardBal);\r\n      setUint(setIdReward, balances.rewardAmt);\r\n    }\r\n\r\n    emitLogWithdraw(gaugePoolName, _amt, getId, setId);\r\n    emitLogClaimedReward(gaugePoolName, balances.crvRewardAmt, balances.rewardAmt, setIdCrv, setIdReward);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim CRV Reward with Staked Reward token\r\n    * @param gaugePoolName gauge pool name.\r\n    * @param setId Set CRV reward amount at this ID in `InstaMemory` Contract.\r\n    * @param setIdReward Set token reward amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function claimReward(\r\n    string calldata gaugePoolName,\r\n    uint setId,\r\n    uint setIdReward\r\n  ) external payable {\r\n    ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\r\n    ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\r\n      bytes32(stringToBytes32(gaugePoolName))\r\n    );\r\n    require(curveGaugeData.gaugeAddress != address(0), \"wrong-gauge-pool-name\");\r\n    IMintor mintor = IMintor(getCurveMintorAddr());\r\n    IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\r\n    TokenInterface crv_token = TokenInterface(address(gauge.crv_token()));\r\n    TokenInterface rewarded_token;\r\n    Balances memory balances;\r\n\r\n    if (curveGaugeData.rewardToken) {\r\n      rewarded_token = TokenInterface(address(gauge.rewarded_token()));\r\n      balances.intialRewardBal = rewarded_token.balanceOf(address(this));\r\n    }\r\n\r\n    balances.intialCRVBal = crv_token.balanceOf(address(this));\r\n\r\n    mintor.mint(curveGaugeData.gaugeAddress);\r\n\r\n    balances.finalCRVBal = crv_token.balanceOf(address(this));\r\n    balances.crvRewardAmt = sub(balances.finalCRVBal, balances.intialCRVBal);\r\n\r\n    setUint(setId, balances.crvRewardAmt);\r\n\r\n    if(curveGaugeData.rewardToken){\r\n      balances.finalRewardBal = rewarded_token.balanceOf(address(this));\r\n      balances.rewardAmt = sub(balances.finalRewardBal, balances.intialRewardBal);\r\n      setUint(setIdReward, balances.rewardAmt);\r\n    }\r\n\r\n    emitLogClaimedReward(gaugePoolName, balances.crvRewardAmt, balances.rewardAmt, setId, setIdReward);\r\n  }\r\n}\r\n\r\ncontract ConnectCurveGauge is CurveGauge {\r\n  string public name = \"Curve-Gauge-v1.0\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setIdReward\",\"type\":\"uint256\"}],\"name\":\"LogClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdReward\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugePoolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdCrv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdReward\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectCurveGauge","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0128541e4cb682686eb741471541b758ab217bbcdddd01277c8d68a7e1839afa"}]}