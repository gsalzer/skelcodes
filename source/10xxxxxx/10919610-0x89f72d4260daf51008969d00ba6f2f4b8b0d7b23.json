{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n\r\n/**\r\n * @title Owned\r\n * @notice Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @notice Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title IArgentProxy\r\n * @notice Interface for all Argent Proxy contracts exposing the target implementation.\r\n */\r\ninterface IArgentProxy {\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title ArgentWalletDetector\r\n * @notice Simple contract to detect if a given address represents an Argent wallet.\r\n * The `isArgentWallet` method returns true if the codehash matches one of the deployed Proxy\r\n * and if the target implementation matches one of the deployed BaseWallet.\r\n * Only the owner of the contract can add code hash ad implementations.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ArgentWalletDetector is Owned {\r\n\t\r\n\t// The accepeted code hash\r\n\tbytes32[] private codes;\r\n\t// The accepted implementations\r\n\taddress[] private implementations;\r\n\t// mapping to efficiently check if a code is accepeted\r\n    mapping (bytes32 => Info) public acceptedCodes;\r\n\t// mapping to efficiently check is an implementation is accepeted\r\n\tmapping (address => Info) public acceptedImplementations;\r\n\r\n\tstruct Info {\r\n        bool exists;\r\n        uint128 index;\r\n    }\r\n\r\n\t// emits when a new accepeted code is added\r\n\tevent CodeAdded(bytes32 indexed code);\r\n\t// emits when a new accepeted implementation is added \r\n\tevent ImplementationAdded(address indexed implementation);\r\n\r\n\tconstructor(bytes32[] memory _codes, address[] memory _implementations) public {\r\n\t\tfor(uint i = 0; i < codes.length; i++) {\r\n\t\t\taddCode(_codes[i]);\r\n\t\t}\r\n\t\tfor(uint j = 0; j < _implementations.length; j++) {\r\n\t\t\taddImplementation(_implementations[j]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n    * @notice Adds a new acceted code hash.\r\n    * @param _code The new code hash.\r\n    */\r\n\tfunction addCode(bytes32 _code) public onlyOwner {\r\n        require(_code != bytes32(0), \"AWR: empty _code\");\r\n        Info storage code = acceptedCodes[_code];\r\n\t\tif(!code.exists) {\r\n\t\t\tcodes.push(_code);\r\n\t\t\tcode.exists = true;\r\n        \tcode.index = uint128(codes.length - 1);\r\n\t\t\temit CodeAdded(_code);\r\n\t\t}\r\n    }\r\n\t\r\n\t/**\r\n    * @notice Adds a new acceted implementation.\r\n    * @param _impl The new implementation.\r\n    */\r\n\tfunction addImplementation(address _impl) public onlyOwner {\r\n        require(_impl != address(0), \"AWR: empty _impl\");\r\n        Info storage impl = acceptedImplementations[_impl];\r\n\t\tif(!impl.exists) {\r\n\t\t\timplementations.push(_impl);\r\n\t\t\timpl.exists = true;\r\n        \timpl.index = uint128(implementations.length - 1);\r\n\t\t\temit ImplementationAdded(_impl);\r\n\t\t}\r\n    }\r\n\r\n\t/**\r\n    * @notice Adds a new acceted code hash and implementation from a deployed Argent wallet.\r\n    * @param _argentWallet The deployed Argent wallet.\r\n    */\r\n    function addCodeAndImplementationFromWallet(address _argentWallet) external onlyOwner {\r\n        bytes32 codeHash;   \r\n    \tassembly { codeHash := extcodehash(_argentWallet) }\r\n        addCode(codeHash);\r\n        address implementation = IArgentProxy(_argentWallet).implementation(); \r\n        addImplementation(implementation);\r\n    }\r\n\r\n\t/**\r\n    * @notice Gets the list of accepted implementations.\r\n    */\r\n\tfunction getImplementations() public view returns (address[] memory) {\r\n\t\treturn implementations;\r\n\t}\r\n\r\n\t/**\r\n    * @notice Gets the list of accepted code hash.\r\n    */\r\n\tfunction getCodes() public view returns (bytes32[] memory) {\r\n\t\treturn codes;\r\n\t}\r\n\r\n\t/**\r\n    * @notice Checks if an address is an Argent wallet\r\n\t* @param _wallet The target wallet\r\n    */\r\n\tfunction isArgentWallet(address _wallet) external view returns (bool) {\r\n\t\tbytes32 codeHash;    \r\n    \tassembly { codeHash := extcodehash(_wallet) }\r\n\t\treturn acceptedCodes[codeHash].exists && acceptedImplementations[IArgentProxy(_wallet).implementation()].exists;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_codes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_implementations\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"CodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"acceptedCodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"index\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedImplementations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"index\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"addCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argentWallet\",\"type\":\"address\"}],\"name\":\"addCodeAndImplementationFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"addImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isArgentWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ArgentWalletDetector","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020b44c9be520023d9f6091278e7e5a8853257eb9fb3d78e6951315df59679e3b283baa4b265772664a88dcfc8be0e24e1fe969a3c66f03851c6aa2f5da73cd7fd0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b1dd690cc9af7bb1a906a9b5a94f94191cc553ce000000000000000000000000b6d64221451edbac7736d4c3da7fc827457dec030000000000000000000000008cbe893fb3372e3ce1e63ad0262b2a544fa1fb9c000000000000000000000000609282d2d8f9ba4bb87ac9c38de20ed5de86596b000000000000000000000000b11da8fbd8126f4f66c093070ecb8316734a7130","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a2e5beaff22a9a70617f7d0143ee1fb1853fc8398cdf95c11720d8242d58b0cd"}]}