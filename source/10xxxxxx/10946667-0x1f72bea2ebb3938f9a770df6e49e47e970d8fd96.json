{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {// Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1;\r\n            // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: contracts/token/MyERC20Token.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract MyERC20Token is ERC20, Ownable {\r\n\r\n    address public minter;\r\n    address public burner;\r\n\r\n    constructor (string memory name, string memory symbol, address _minter, address _burner) public ERC20(name, symbol) {\r\n        minter = _minter;\r\n        burner = _burner;\r\n    }\r\n\r\n    function setBurner(address _newBurner) external onlyOwner {\r\n        burner = _newBurner;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public {\r\n        require(msg.sender == minter, \"Only minter can mint this token\");\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) public {\r\n        require(msg.sender == burner, \"Only burner can burn this token\");\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/token/IronToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ncontract IronToken is MyERC20Token {\r\n    constructor (address _minter, address _burner) public MyERC20Token(\"Dungeon Iron\", \"IRON\", _minter, _burner) {}\r\n}\r\n\r\n// File: contracts/token/KnightToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ncontract KnightToken is MyERC20Token {\r\n    constructor (address _minter, address _burner) public MyERC20Token(\"Dungeon Knight\", \"KNIGHT\", _minter, _burner) {}\r\n}\r\n\r\n// File: contracts/DungeonMaster.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ncontract DungeonMaster is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ------------- normal pool variables and structs ----------------------\r\n\r\n    struct NormalUserInfo {\r\n        uint256 amountStaked;\r\n        uint256 debt;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct NormalPoolInfo {\r\n        IERC20 stakeToken;\r\n        MyERC20Token receiveToken;\r\n        uint256 stakedSupply;\r\n        uint256 uncollectedAmount;\r\n        uint256 rewardPerBlock;\r\n        uint256 stakeChestAmount;\r\n        uint256 receiveChestAmount;\r\n        uint256 lastUpdateBlock;\r\n        uint256 accumulatedRewardPerStake; // is in 1e12 to allow for cases where stake supply is more than block reward\r\n    }\r\n\r\n    // Info of each normal pool.\r\n    NormalPoolInfo[] public normalPoolInfo;\r\n    // Info of each user that stakes tokens in normal pool\r\n    mapping(uint256 => mapping(address => NormalUserInfo)) public normalUserInfo;\r\n\r\n    // ------------- burn pool variables and structs ----------------------\r\n\r\n    struct BurnUserInfo {\r\n        uint256 amountStaked;\r\n        uint256 startBlock;\r\n\r\n        // reward is calculated by (currentBlock - startBlock) / blockrate * rewardRate\r\n        // burn is calculated by (currentBlock - startBlock) / blockrate * burnRate\r\n        // if all stake burned reward is amountStaked / burnRate * rewardRate (which would be the maximum reward possible\r\n        // and is useful for pending function)\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct BurnPoolInfo {\r\n        MyERC20Token burningStakeToken;\r\n        MyERC20Token receiveToken;\r\n        uint256 blockRate; // reward is created every x blocks\r\n        uint256 rewardRate; // reward distributed per blockrate\r\n        uint256 burnRate; // token burned per blockrate\r\n        uint256 stakeChestAmount;\r\n        uint256 receiveChestAmount;\r\n    }\r\n\r\n    // Info of each burn pool.\r\n    BurnPoolInfo[] public burnPoolInfo;\r\n    // Info of each user that stakes and burns tokens in burn pool\r\n    mapping(uint256 => mapping(address => BurnUserInfo)) public burnUserInfo;\r\n\r\n    // ------------- multi burn pool variables and structs ----------------------\r\n\r\n    struct MultiBurnUserInfo {\r\n        uint256 amountStakedOfEach;\r\n        uint256 startBlock;\r\n\r\n        // reward is calculated by (currentBlock - startBlock) / blockrate * rewardRate\r\n        // burn is calculated by (currentBlock - startBlock) / blockrate * burnRate\r\n        // if all stake burned reward is amountStaked / burnRate * rewardRate (which would be the maximum reward possible\r\n        // and is useful for pending function)\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct MultiBurnPoolInfo {\r\n        MyERC20Token[] burningStakeTokens;\r\n        MyERC20Token receiveToken;\r\n        uint256 blockRate; // reward is created every x blocks\r\n        uint256 rewardRate; // reward distributed per blockrate\r\n        uint256 burnRate; // token burned per blockrate\r\n        uint256 stakeChestAmount;\r\n    }\r\n\r\n    // Info of each burn pool.\r\n    MultiBurnPoolInfo[] public multiBurnPoolInfo;\r\n    // Info of each user that stakes and burns tokens in burn pool\r\n    mapping(uint256 => mapping(address => MultiBurnUserInfo)) public multiBurnUserInfo;\r\n\r\n    // ------------- raid variables and structs ----------------------\r\n\r\n    uint256 public raidBlock;\r\n    uint256 public raidFrequency;\r\n    uint256 public returnIfNotInRaidPercentage = 25; // 25% of knights will return if you miss the raid block\r\n    uint256 public raidWinLootPercentage = 25; // 25% of chest will be rewarded based on knights provided\r\n    uint256 public raidWinPercentage = 5; // 5% of total supplied knights must be in raid to win\r\n\r\n    address[] public participatedInRaid;\r\n\r\n    mapping(address => uint256)[] public knightsProvidedInRaid;\r\n    mapping(address => uint256) public raidShare;\r\n\r\n    // -------------------------------------------------------------------------------------\r\n\r\n    bool public votingActive = false;\r\n    uint256 public voted = 0;\r\n    address[] public voters;\r\n    mapping(address => uint256) voteAmount;\r\n\r\n    address public devaddr;\r\n    uint public depositChestFee = 25;\r\n    uint public chestRewardPercentage = 500;\r\n\r\n    uint256 public startBlock;\r\n    KnightToken public knightToken;\r\n\r\n    constructor(\r\n        address _devaddr,\r\n        uint256 _startBlock,\r\n        uint256 _depositChestFee\r\n    ) public {\r\n        devaddr = _devaddr;\r\n        startBlock = _startBlock;\r\n        depositChestFee = _depositChestFee;\r\n    }\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    // Set the percentage of the deposit amount going into the chest; max 1%\r\n    function setDepositChestFee(uint256 _depositChestFee) public onlyOwner {\r\n        require(_depositChestFee <= 100, \"deposit chest fee can be max 1%\");\r\n        depositChestFee = _depositChestFee;\r\n    }\r\n\r\n    // Set the percentage of the collected amount going into the chest is in * 0.01%\r\n    function setChestRewardPercentage(uint256 _chestRewardPercentage) public onlyOwner {\r\n        require(_chestRewardPercentage <= 1000, \"chest reward percentage can be max 10%\");\r\n        chestRewardPercentage = _chestRewardPercentage;\r\n    }\r\n\r\n    function setKnightToken(KnightToken _knight) public onlyOwner {\r\n        knightToken = _knight;\r\n    }\r\n\r\n    // Set the percentage of the chest which is distributed to the raid participants; min 10%\r\n    function setRaidWinLootPercentage(uint256 _percentage) public onlyOwner {\r\n        require(_percentage >= 10, \"minimum of 10% must be distributed\");\r\n        raidWinLootPercentage = _percentage;\r\n    }\r\n\r\n    // Set the percentage of the total supply of knights which must take part in the raid to win; max 50%\r\n    function setRaidWinPercentage(uint256 _percentage) public onlyOwner {\r\n        require(_percentage <= 50, \"maximum of 50% must take part\");\r\n        raidWinPercentage = _percentage;\r\n    }\r\n\r\n    function getBlocks(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    function isStarted() public view returns (bool) {\r\n        return startBlock <= block.number;\r\n    }\r\n\r\n    //    ---------------- Normal Pool Methods -------------------------------\r\n\r\n    function addNormalPool(IERC20 _stakeToken, MyERC20Token _receiveToken, uint256 _rewardPerBlock) public onlyOwner {\r\n        uint256 lastUpdateBlock = block.number > startBlock ? block.number : startBlock;\r\n        normalPoolInfo.push(NormalPoolInfo(_stakeToken, _receiveToken, 0, 0, _rewardPerBlock.mul(1e18), 0, 0, lastUpdateBlock, 0));\r\n    }\r\n\r\n    function normalPoolLength() external view returns (uint256) {\r\n        return normalPoolInfo.length;\r\n    }\r\n\r\n    function normalPending(uint256 _pid, address _user) external view returns (uint256, IERC20) {\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        NormalUserInfo storage user = normalUserInfo[_pid][_user];\r\n        uint256 rewardPerStake = pool.accumulatedRewardPerStake;\r\n        if (block.number > pool.lastUpdateBlock && pool.stakedSupply != 0) {\r\n            uint256 blocks = getBlocks(pool.lastUpdateBlock, block.number);\r\n            uint256 reward = pool.rewardPerBlock.mul(blocks);\r\n            rewardPerStake = rewardPerStake.add(reward.mul(1e12).div(pool.stakedSupply));\r\n        }\r\n        return (user.amountStaked.mul(rewardPerStake).div(1e12).sub(user.debt), pool.receiveToken);\r\n    }\r\n\r\n    function updateNormalPool(uint256 _pid) public {\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        if (block.number <= pool.lastUpdateBlock) {\r\n            return;\r\n        }\r\n        if (pool.stakedSupply == 0) {\r\n            pool.lastUpdateBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 blocks = getBlocks(pool.lastUpdateBlock, block.number);\r\n        uint256 reward = blocks.mul(pool.rewardPerBlock);\r\n        // reward * (1 - 0,05 - chestRewardPercentage)\r\n        uint256 poolReward = reward.mul(10000 - 500 - chestRewardPercentage).div(10000);\r\n        pool.receiveToken.mint(address(this), poolReward);\r\n        // 5% goes to dev address\r\n        pool.receiveToken.mint(devaddr, reward.mul(5).div(100));\r\n        pool.receiveChestAmount = pool.receiveChestAmount.add(reward.mul(chestRewardPercentage).div(10000));\r\n        pool.receiveToken.mint(address(this), reward.mul(chestRewardPercentage).div(10000));\r\n        pool.uncollectedAmount = pool.uncollectedAmount.add(poolReward);\r\n        pool.accumulatedRewardPerStake = pool.accumulatedRewardPerStake.add(poolReward.mul(1e12).div(pool.stakedSupply));\r\n        pool.lastUpdateBlock = block.number;\r\n    }\r\n\r\n    function depositNormalPool(uint256 _pid, uint256 _amount) public {\r\n        require(startBlock <= block.number, \"not yet started.\");\r\n\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        NormalUserInfo storage user = normalUserInfo[_pid][msg.sender];\r\n        updateNormalPool(_pid);\r\n\r\n        // collect farmed token if user has already staked\r\n        if (user.amountStaked > 0) {\r\n            uint256 pending = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12).sub(user.debt);\r\n            require(pool.uncollectedAmount >= pending, \"not enough uncollected tokens anymore\");\r\n            pool.receiveToken.transfer(address(msg.sender), pending);\r\n            pool.uncollectedAmount = pool.uncollectedAmount - pending;\r\n        }\r\n        pool.stakeToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 chestAmount = _amount.mul(depositChestFee).div(10000);\r\n        user.amountStaked = user.amountStaked.add(_amount).sub(chestAmount);\r\n        pool.stakedSupply = pool.stakedSupply.add(_amount.sub(chestAmount));\r\n        pool.stakeChestAmount = pool.stakeChestAmount.add(chestAmount);\r\n        user.debt = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdrawNormalPool(uint256 _pid, uint256 _amount) public {\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        NormalUserInfo storage user = normalUserInfo[_pid][msg.sender];\r\n        require(user.amountStaked >= _amount, \"withdraw: not good\");\r\n        updateNormalPool(_pid);\r\n\r\n        // collect farmed token\r\n        uint256 pending = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12).sub(user.debt);\r\n        require(pool.uncollectedAmount >= pending, \"not enough uncollected tokens anymore\");\r\n        pool.receiveToken.transfer(address(msg.sender), pending);\r\n        pool.uncollectedAmount = pool.uncollectedAmount - pending;\r\n\r\n        user.amountStaked = user.amountStaked.sub(_amount);\r\n        user.debt = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12);\r\n        pool.stakeToken.safeTransfer(address(msg.sender), _amount);\r\n        pool.stakedSupply = pool.stakedSupply.sub(_amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function emergencyWithdrawNormalPool(uint256 _pid) public {\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        NormalUserInfo storage user = normalUserInfo[_pid][msg.sender];\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amountStaked);\r\n        pool.stakedSupply = pool.stakedSupply.sub(user.amountStaked);\r\n        pool.stakeToken.safeTransfer(address(msg.sender), user.amountStaked);\r\n        user.amountStaked = 0;\r\n    }\r\n\r\n    function collectNormalPool(uint256 _pid) public {\r\n        NormalPoolInfo storage pool = normalPoolInfo[_pid];\r\n        NormalUserInfo storage user = normalUserInfo[_pid][msg.sender];\r\n        updateNormalPool(_pid);\r\n        uint256 pending = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12).sub(user.debt);\r\n        require(pool.uncollectedAmount >= pending, \"not enough uncollected tokens anymore\");\r\n        pool.receiveToken.transfer(address(msg.sender), pending);\r\n        pool.uncollectedAmount = pool.uncollectedAmount.sub(pending);\r\n        user.debt = user.amountStaked.mul(pool.accumulatedRewardPerStake).div(1e12);\r\n    }\r\n\r\n    //    ----------------------------- Burn Pool Methods --------------------------------------------\r\n\r\n    function addBurnPool(MyERC20Token _stakeToken, MyERC20Token _receiveToken, uint256 _blockRate, uint256 _rewardRate, uint256 _burnRate) public onlyOwner {\r\n        // reward and burn rate is in * 0.001\r\n        burnPoolInfo.push(BurnPoolInfo(_stakeToken, _receiveToken, _blockRate, _rewardRate.mul(1e15), _burnRate.mul(1e15), 0, 0));\r\n    }\r\n\r\n    function burnPoolLength() external view returns (uint256) {\r\n        return burnPoolInfo.length;\r\n    }\r\n\r\n    function burnPending(uint256 _pid, address _user) external view returns (uint256, uint256, IERC20) {\r\n        BurnPoolInfo storage pool = burnPoolInfo[_pid];\r\n        BurnUserInfo storage user = burnUserInfo[_pid][_user];\r\n        uint256 blocks = getBlocks(user.startBlock, block.number);\r\n        uint256 ticks = blocks.div(pool.blockRate);\r\n        uint256 burned = ticks.mul(pool.burnRate);\r\n        uint256 reward = 0;\r\n        if (burned > user.amountStaked) {\r\n            reward = user.amountStaked.mul(1e5).div(pool.burnRate).mul(pool.rewardRate).div(1e5);\r\n            burned = user.amountStaked;\r\n        }\r\n        else {\r\n            reward = ticks.mul(pool.rewardRate);\r\n        }\r\n        return (reward, burned, pool.receiveToken);\r\n    }\r\n\r\n    function depositBurnPool(uint256 _pid, uint256 _amount) public {\r\n        require(startBlock <= block.number, \"not yet started.\");\r\n\r\n        BurnPoolInfo storage pool = burnPoolInfo[_pid];\r\n        BurnUserInfo storage user = burnUserInfo[_pid][msg.sender];\r\n\r\n        // collect farmed token if user has already staked\r\n        if (user.amountStaked > 0) {\r\n            collectBurnPool(_pid);\r\n        }\r\n        pool.burningStakeToken.transferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 chestAmount = _amount.mul(depositChestFee).div(10000);\r\n        pool.stakeChestAmount = pool.stakeChestAmount.add(chestAmount);\r\n        user.amountStaked = user.amountStaked.add(_amount).sub(chestAmount);\r\n        user.startBlock = block.number;\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdrawBurnPool(uint256 _pid, uint256 _amount) public {\r\n        BurnPoolInfo storage pool = burnPoolInfo[_pid];\r\n        BurnUserInfo storage user = burnUserInfo[_pid][msg.sender];\r\n\r\n        // collect farmed token\r\n        collectBurnPool(_pid);\r\n\r\n        if (user.amountStaked < _amount) {\r\n            _amount = user.amountStaked;\r\n            // withdraw all of stake\r\n        }\r\n        user.amountStaked = user.amountStaked.sub(_amount);\r\n        pool.burningStakeToken.transfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function collectBurnPool(uint256 _pid) public returns (uint256) {\r\n        BurnPoolInfo storage pool = burnPoolInfo[_pid];\r\n        BurnUserInfo storage user = burnUserInfo[_pid][msg.sender];\r\n        uint256 blocks = getBlocks(user.startBlock, block.number);\r\n        uint256 ticks = blocks.div(pool.blockRate);\r\n        uint256 burned = ticks.mul(pool.burnRate);\r\n        uint256 reward = 0;\r\n        if (burned > user.amountStaked) {\r\n            reward = user.amountStaked.mul(1e5).div(pool.burnRate).mul(pool.rewardRate).div(1e5);\r\n            burned = user.amountStaked;\r\n            user.amountStaked = 0;\r\n        }\r\n        else {\r\n            reward = ticks.mul(pool.rewardRate);\r\n            user.amountStaked = user.amountStaked.sub(burned);\r\n        }\r\n        // burn token\r\n        pool.burningStakeToken.burn(burned);\r\n\r\n        uint256 userAmount = reward.mul(10000 - 500 - chestRewardPercentage).div(10000);\r\n        uint256 chestAmount = reward.mul(chestRewardPercentage).div(10000);\r\n        uint256 devAmount = reward.mul(500).div(10000);\r\n        pool.receiveToken.mint(msg.sender, userAmount);\r\n        pool.receiveToken.mint(address(this), chestAmount);\r\n        pool.receiveToken.mint(devaddr, devAmount);\r\n        pool.receiveChestAmount = pool.receiveChestAmount.add(chestAmount);\r\n        user.startBlock = block.number;\r\n        return (reward);\r\n    }\r\n\r\n    //    ----------------------------- Multi Burn Pool Methods --------------------------------------------\r\n\r\n    function addMultiBurnPool(MyERC20Token[] memory _stakeTokens, MyERC20Token _receiveToken, uint256 _blockRate, uint256 _rewardRate, uint256 _burnRate) public onlyOwner {\r\n        // reward and burn rate is in * 0.001\r\n        multiBurnPoolInfo.push(MultiBurnPoolInfo(_stakeTokens, _receiveToken, _blockRate, _rewardRate.mul(1e15), _burnRate.mul(1e15), 0));\r\n    }\r\n\r\n    function multiBurnPoolLength() external view returns (uint256) {\r\n        return multiBurnPoolInfo.length;\r\n    }\r\n\r\n    function multiBurnPending(uint256 _pid, address _user) external view returns (uint256, uint256, IERC20) {\r\n        MultiBurnPoolInfo storage pool = multiBurnPoolInfo[_pid];\r\n        MultiBurnUserInfo storage user = multiBurnUserInfo[_pid][_user];\r\n        uint256 blocks = getBlocks(user.startBlock, block.number);\r\n        uint256 ticks = blocks.div(pool.blockRate);\r\n        uint256 burned = ticks.mul(pool.burnRate);\r\n        uint256 reward = 0;\r\n        if (burned > user.amountStakedOfEach) {\r\n            reward = user.amountStakedOfEach.mul(1e5).div(pool.burnRate).mul(pool.rewardRate).div(1e5);\r\n            burned = user.amountStakedOfEach;\r\n        }\r\n        else {\r\n            reward = ticks.mul(pool.rewardRate);\r\n        }\r\n        return (reward, burned, pool.receiveToken);\r\n    }\r\n\r\n    function depositMultiBurnPool(uint256 _pid, uint256 _amount) public {\r\n        require(startBlock <= block.number, \"not yet started.\");\r\n\r\n        MultiBurnPoolInfo storage pool = multiBurnPoolInfo[_pid];\r\n        MultiBurnUserInfo storage user = multiBurnUserInfo[_pid][msg.sender];\r\n\r\n        // collect farmed token if user has already staked\r\n        if (user.amountStakedOfEach > 0) {\r\n            collectMultiBurnPool(_pid);\r\n        }\r\n        for (uint i = 0; i < pool.burningStakeTokens.length; i++) {\r\n            MyERC20Token stakeToken = pool.burningStakeTokens[i];\r\n            stakeToken.transferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n        uint256 chestAmount = _amount.mul(depositChestFee).div(10000);\r\n        pool.stakeChestAmount = pool.stakeChestAmount.add(chestAmount);\r\n        user.amountStakedOfEach = user.amountStakedOfEach.add(_amount).sub(chestAmount);\r\n        user.startBlock = block.number;\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdrawMultiBurnPool(uint256 _pid, uint256 _amount) public {\r\n        MultiBurnPoolInfo storage pool = multiBurnPoolInfo[_pid];\r\n        MultiBurnUserInfo storage user = multiBurnUserInfo[_pid][msg.sender];\r\n        updateNormalPool(_pid);\r\n\r\n        // collect farmed token\r\n        collectMultiBurnPool(_pid);\r\n\r\n        if (user.amountStakedOfEach < _amount) {\r\n            _amount = user.amountStakedOfEach;\r\n            // withdraw all\r\n        }\r\n\r\n        user.amountStakedOfEach = user.amountStakedOfEach.sub(_amount);\r\n        for (uint i = 0; i < pool.burningStakeTokens.length; i++) {\r\n            MyERC20Token stakeToken = pool.burningStakeTokens[i];\r\n            stakeToken.transfer(address(msg.sender), _amount);\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function collectMultiBurnPool(uint256 _pid) public returns (uint256) {\r\n        MultiBurnPoolInfo storage pool = multiBurnPoolInfo[_pid];\r\n        MultiBurnUserInfo storage user = multiBurnUserInfo[_pid][msg.sender];\r\n        uint256 blocks = getBlocks(user.startBlock, block.number);\r\n        uint256 ticks = blocks.div(pool.blockRate);\r\n        uint256 burned = ticks.mul(pool.burnRate);\r\n        uint256 reward = 0;\r\n        if (burned > user.amountStakedOfEach) {\r\n            reward = user.amountStakedOfEach.mul(1e5).div(pool.burnRate).mul(pool.rewardRate).div(1e5);\r\n            burned = user.amountStakedOfEach;\r\n            user.amountStakedOfEach = 0;\r\n        }\r\n        else {\r\n            reward = ticks.mul(pool.rewardRate);\r\n            user.amountStakedOfEach = user.amountStakedOfEach.sub(burned);\r\n        }\r\n        // burn token\r\n        for (uint i = 0; i < pool.burningStakeTokens.length; i++) {\r\n            MyERC20Token token = pool.burningStakeTokens[i];\r\n            token.burn(burned);\r\n        }\r\n\r\n        // nothing goes into chest\r\n        uint256 userAmount = reward.mul(100 - 5).div(100);\r\n        uint256 devAmount = reward.mul(5).div(100);\r\n        pool.receiveToken.mint(msg.sender, userAmount);\r\n        pool.receiveToken.mint(devaddr, devAmount);\r\n        user.startBlock = block.number;\r\n        return (reward);\r\n    }\r\n\r\n    //    ----------------------------- Raid Methods --------------------------------------------\r\n\r\n    function allowRaids(uint256 _raidFrequency) public onlyOwner {\r\n        raidFrequency = _raidFrequency;\r\n        raidBlock = block.number.add(raidFrequency);\r\n        knightsProvidedInRaid.push();\r\n    }\r\n\r\n    function joinRaid(uint256 _amount) public returns (bool) {\r\n        require(startBlock <= block.number, \"not yet started.\");\r\n\r\n        knightToken.transferFrom(address(msg.sender), address(this), _amount);\r\n        if (block.number == raidBlock) {\r\n            uint256 currentRaidId = knightsProvidedInRaid.length.sub(1);\r\n\r\n            // can only join a raid once\r\n            if (knightsProvidedInRaid[currentRaidId][msg.sender] != 0) {\r\n                return false;\r\n            }\r\n            knightsProvidedInRaid[currentRaidId][msg.sender] = _amount;\r\n            participatedInRaid.push(msg.sender);\r\n            return true;\r\n        }\r\n        else {\r\n            uint256 returnAmount = _amount.mul(returnIfNotInRaidPercentage).div(100);\r\n            uint256 burnAmount = _amount.sub(returnAmount);\r\n            knightToken.burn(burnAmount);\r\n            knightToken.transfer(address(msg.sender), returnAmount);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function checkAndCalculateRaidShares() public {\r\n        require(block.number > raidBlock, \"raid not started!\");\r\n        uint256 totalKnights = 0;\r\n        uint256 currentRaidId = knightsProvidedInRaid.length.sub(1);\r\n        for (uint i = 0; i < participatedInRaid.length; i++) {\r\n            address user = participatedInRaid[i];\r\n            totalKnights = totalKnights.add(knightsProvidedInRaid[currentRaidId][user]);\r\n        }\r\n        // check if minimum amount of knights were in raid to win\r\n        if (totalKnights < knightToken.totalSupply().div(raidWinPercentage)) {\r\n            // minimum amount of knights not participated\r\n            knightToken.burn(totalKnights);\r\n            delete participatedInRaid;\r\n            knightsProvidedInRaid.push();\r\n            raidBlock = raidBlock.add(raidFrequency);\r\n            return;\r\n        }\r\n\r\n        // calculate each users share times 1e12\r\n        for (uint i = 0; i < participatedInRaid.length; i++) {\r\n            address user = participatedInRaid[i];\r\n            uint256 knights = knightsProvidedInRaid[currentRaidId][user];\r\n            uint256 userShare = knights.mul(1e12).div(totalKnights);\r\n            raidShare[user] = userShare;\r\n        }\r\n\r\n        // burn provided knights after shares have been calculated\r\n        knightToken.burn(totalKnights);\r\n        delete participatedInRaid;\r\n        knightsProvidedInRaid.push();\r\n        raidBlock = raidBlock.add(raidFrequency);\r\n    }\r\n\r\n    function claimRaidRewards() public {\r\n        uint256 userShare = raidShare[msg.sender];\r\n        address user = msg.sender;\r\n        // distribute normal pool rewards\r\n        for (uint j = 0; j < normalPoolInfo.length; j++) {\r\n            NormalPoolInfo storage poolInfo = normalPoolInfo[j];\r\n            uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12).mul(raidWinLootPercentage).div(100);\r\n            uint256 receiveChestShare = poolInfo.receiveChestAmount.mul(userShare).div(1e12).mul(raidWinLootPercentage).div(100);\r\n            poolInfo.stakeToken.transfer(user, stakeChestShare);\r\n            poolInfo.receiveToken.transfer(user, receiveChestShare);\r\n            poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n            poolInfo.receiveChestAmount = poolInfo.receiveChestAmount.sub(receiveChestShare);\r\n        }\r\n\r\n        // distribute burn pool rewards\r\n        for (uint j = 0; j < burnPoolInfo.length; j++) {\r\n            BurnPoolInfo storage poolInfo = burnPoolInfo[j];\r\n            uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12).mul(raidWinLootPercentage).div(100);\r\n            uint256 receiveChestShare = poolInfo.receiveChestAmount.mul(userShare).div(1e12).mul(raidWinLootPercentage).div(100);\r\n            poolInfo.burningStakeToken.transfer(user, stakeChestShare);\r\n            poolInfo.receiveToken.transfer(user, receiveChestShare);\r\n            poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n            poolInfo.receiveChestAmount = poolInfo.receiveChestAmount.sub(receiveChestShare);\r\n        }\r\n\r\n        // distribute multi burn pool rewards\r\n        for (uint j = 0; j < multiBurnPoolInfo.length; j++) {\r\n            MultiBurnPoolInfo storage poolInfo = multiBurnPoolInfo[j];\r\n            uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12).mul(raidWinLootPercentage).div(100);\r\n            for (uint x = 0; x < poolInfo.burningStakeTokens.length; x++) {\r\n                poolInfo.burningStakeTokens[x].transfer(user, stakeChestShare);\r\n            }\r\n            poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n        }\r\n\r\n        raidShare[msg.sender] = 0;\r\n    }\r\n\r\n    //    --------------------------------------------------------------------------------------------\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    function activateVoting() public onlyOwner {\r\n        votingActive = true;\r\n    }\r\n\r\n    function vote(uint256 _amount) public {\r\n        require(votingActive);\r\n        // only allowed to vote once\r\n        require(voteAmount[msg.sender] == 0);\r\n        knightToken.transferFrom(address(msg.sender), address(this), _amount);\r\n        voted = voted.add(_amount);\r\n        voters.push(msg.sender);\r\n        voteAmount[msg.sender] = _amount;\r\n    }\r\n\r\n    // expensive operation\r\n    function drainChest() public onlyOwner {\r\n        require(votingActive);\r\n        // more than 10% of total supply must vote\r\n        require(voted >= knightToken.totalSupply().div(10).mul(100));\r\n\r\n        for (uint i = 0; i < voters.length; i++) {\r\n            address user = voters[i];\r\n            uint256 knights = voteAmount[user];\r\n            uint256 userShare = knights.mul(1e12).div(voted);\r\n            // distribute normal pool rewards\r\n            for (uint j = 0; j < normalPoolInfo.length; j++) {\r\n                NormalPoolInfo storage poolInfo = normalPoolInfo[j];\r\n                uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12);\r\n                uint256 receiveChestShare = poolInfo.receiveChestAmount.mul(userShare).div(1e12);\r\n                poolInfo.stakeToken.transfer(user, stakeChestShare);\r\n                poolInfo.receiveToken.transfer(user, receiveChestShare);\r\n                poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n                poolInfo.receiveChestAmount = poolInfo.receiveChestAmount.sub(receiveChestShare);\r\n            }\r\n\r\n            // distribute burn pool rewards\r\n            for (uint j = 0; j < burnPoolInfo.length; j++) {\r\n                BurnPoolInfo storage poolInfo = burnPoolInfo[j];\r\n                uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12);\r\n                uint256 receiveChestShare = poolInfo.receiveChestAmount.mul(userShare).div(1e12);\r\n                poolInfo.burningStakeToken.transfer(user, stakeChestShare);\r\n                poolInfo.receiveToken.transfer(user, receiveChestShare);\r\n                poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n                poolInfo.receiveChestAmount = poolInfo.receiveChestAmount.sub(receiveChestShare);\r\n            }\r\n\r\n            // distribute multi burn pool rewards\r\n            for (uint j = 0; j < multiBurnPoolInfo.length; j++) {\r\n                MultiBurnPoolInfo storage poolInfo = multiBurnPoolInfo[j];\r\n                uint256 stakeChestShare = poolInfo.stakeChestAmount.mul(userShare).div(1e12);\r\n                for (uint x = 0; x < poolInfo.burningStakeTokens.length; x++) {\r\n                    poolInfo.burningStakeTokens[x].transfer(user, stakeChestShare);\r\n                }\r\n                poolInfo.stakeChestAmount = poolInfo.stakeChestAmount.sub(stakeChestShare);\r\n            }\r\n\r\n            // clear voteAmount\r\n            knightToken.transfer(user, voteAmount[user]);\r\n            delete voteAmount[user];\r\n        }\r\n\r\n\r\n        votingActive = false;\r\n        delete voters;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositChestFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MyERC20Token\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract MyERC20Token\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"addBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MyERC20Token[]\",\"name\":\"_stakeTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract MyERC20Token\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"addMultiBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract MyERC20Token\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raidFrequency\",\"type\":\"uint256\"}],\"name\":\"allowRaids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"burnPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnPoolInfo\",\"outputs\":[{\"internalType\":\"contract MyERC20Token\",\"name\":\"burningStakeToken\",\"type\":\"address\"},{\"internalType\":\"contract MyERC20Token\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveChestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAndCalculateRaidShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chestRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRaidRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"collectBurnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"collectMultiBurnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"collectNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositChestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositMultiBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainChest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinRaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knightToken\",\"outputs\":[{\"internalType\":\"contract KnightToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"knightsProvidedInRaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"multiBurnPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiBurnPoolInfo\",\"outputs\":[{\"internalType\":\"contract MyERC20Token\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiBurnPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiBurnUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStakedOfEach\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"normalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"normalPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract MyERC20Token\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uncollectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiveChestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardPerStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"normalUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participatedInRaid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"raidShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidWinLootPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidWinPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnIfNotInRaidPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chestRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setChestRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositChestFee\",\"type\":\"uint256\"}],\"name\":\"setDepositChestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KnightToken\",\"name\":\"_knight\",\"type\":\"address\"}],\"name\":\"setKnightToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setRaidWinLootPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setRaidWinPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updateNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMultiBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNormalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DungeonMaster","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fcd036ee85c768665740f6c686f634b874ef17c20000000000000000000000000000000000000000000000000000000000a719580000000000000000000000000000000000000000000000000000000000000019","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92c61aa0e24d4c2fa25553340ef5ecc7e881aaf67e1d3fce393c787230e532ff"}]}