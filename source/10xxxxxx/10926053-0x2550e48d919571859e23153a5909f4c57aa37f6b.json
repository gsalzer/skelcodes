{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/tokens/EIP20NonStandardInterface.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title EIP20NonStandardInterface\r\n/// @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n/// See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\ninterface EIP20NonStandardInterface {\r\n    /// @notice Get the total number of tokens in circulation\r\n    /// @return The supply of tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of the specified address\r\n    /// @param owner The address from which the balance will be retrieved\r\n    /// @return balance The balance\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `src` to `dst`\r\n    /// @param src The address of the source account\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /// @notice Approve `spender` to transfer up to `amount` from `src`\r\n    /// @dev This will overwrite the approval amount for `spender`\r\n    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @param amount The number of tokens that are approved\r\n    /// @return success Whether or not the approval succeeded\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /// @notice Get the current allowance from `owner` for `spender`\r\n    /// @param owner The address of the account which owns the tokens to be spent\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @return remaining The number of tokens allowed to be spent\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n// File: contracts/IDerivativeSpecification.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Derivative Specification interface\r\n/// @notice Immutable collection of derivative attributes\r\n/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\r\ninterface IDerivativeSpecification {\r\n\r\n    /// @notice Proof of a derivative specification\r\n    /// @dev Verifies that contract is a derivative specification\r\n    /// @return true if contract is a derivative specification\r\n    function isDerivativeSpecification() external pure returns(bool);\r\n\r\n    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\r\n    /// between the start and the end of the Live period\r\n    /// @dev Should be resolved through OracleRegistry contract\r\n    /// @return oracle symbols\r\n    function oracleSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    /// finds the value closest to a given timestamp\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbols\r\n    function oracleIteratorSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Type of collateral that users submit to mint the derivative\r\n    /// @dev Should be resolved through CollateralTokenRegistry contract\r\n    /// @return collateral token symbol\r\n    function collateralTokenSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\r\n    /// and the initial collateral split to the final collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split symbol\r\n    function collateralSplitSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Lifecycle parameter that define the length of the derivative's Minting period.\r\n    /// @dev Set in seconds\r\n    /// @return minting period value\r\n    function mintingPeriod() external view returns (uint);\r\n\r\n    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\r\n    /// @dev Set in seconds\r\n    /// @return live period value\r\n    function livePeriod() external view returns (uint);\r\n\r\n    /// @notice Parameter that determines starting nominal value of primary asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\r\n    /// @return primary nominal value\r\n    function primaryNominalValue() external view returns (uint);\r\n\r\n    /// @notice Parameter that determines starting nominal value of complement asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\r\n    /// @return complement nominal value\r\n    function complementNominalValue() external view returns (uint);\r\n\r\n    /// @notice Minting fee rate due to the author of the derivative specification.\r\n    /// @dev Percentage fee multiplied by 10 ^ 12\r\n    /// @return author fee\r\n    function authorFee() external view returns (uint);\r\n\r\n    /// @notice Symbol of the derivative\r\n    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\r\n    /// @return derivative specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Return optional long name of the derivative\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return long name\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice Optional URI to the derivative specs\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return URI to the derivative specs\r\n    function baseURI() external view returns (string memory);\r\n\r\n    /// @notice Derivative spec author\r\n    /// @dev Used to set and receive author's fee\r\n    /// @return address of the author\r\n    function author() external view returns (address);\r\n}\r\n\r\n// File: contracts/collateralSplits/ICollateralSplit.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Collateral Split interface\r\n/// @notice Contains mathematical functions used to calculate relative claim\r\n/// on collateral of primary and complement assets after settlement.\r\n/// @dev Created independently from specification and published to the CollateralSplitRegistry\r\ninterface ICollateralSplit {\r\n\r\n    /// @notice Proof of collateral split contract\r\n    /// @dev Verifies that contract is a collateral split contract\r\n    /// @return true if contract is a collateral split contract\r\n    function isCollateralSplit() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Calcs primary asset class' share of collateral at settlement.\r\n    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\r\n    /// @param _underlyingStartRoundHints specify for each oracle round of the start of Live period\r\n    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\r\n    /// @return _split primary asset class' share of collateral at settlement\r\n    /// @return _underlyingStart underlying value in the start of Live period\r\n    /// @return _underlyingEnd underlying value in the end of Live period\r\n    function split(\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        uint _liveTime,\r\n        uint _settleTime,\r\n        uint[] memory _underlyingStartRoundHints,\r\n        uint[] memory _underlyingEndRoundHints)\r\n    external view returns(uint _split, int _underlyingStart, int _underlyingEnd);\r\n}\r\n\r\n// File: contracts/tokens/IERC20MintedBurnable.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\ninterface IERC20MintedBurnable is IERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/tokens/ITokenBuilder.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ninterface ITokenBuilder {\r\n    function isTokenBuilder() external pure returns(bool);\r\n    function buildTokens(IDerivativeSpecification derivative, uint settlement, address _collateralToken) external returns(IERC20MintedBurnable, IERC20MintedBurnable);\r\n}\r\n\r\n// File: contracts/IFeeLogger.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IFeeLogger {\r\n    function log(address _liquidityProvider, address _collateral, uint _protocolFee, address _author) external;\r\n}\r\n\r\n// File: contracts/Vault.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Derivative implementation Vault\r\n/// @notice A smart contract that references derivative specification and enables users to mint and redeem the derivative\r\ncontract Vault {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint8;\r\n\r\n    uint public constant FRACTION_MULTIPLIER = 10**12;\r\n    int public constant NEGATIVE_INFINITY = type(int256).min;\r\n\r\n    enum State { Created, Minting, Live, Settled }\r\n\r\n    event StateChanged(State oldState, State newState);\r\n    event MintingStateSet(address primaryToken, address complementToken);\r\n    event LiveStateSet();\r\n    event SettledStateSet(int underlyingStart, int underlyingEnd, uint primaryConversion, uint complementConversion);\r\n    event Minted(uint minted, uint collateral, uint fee);\r\n    event Refunded(uint tokenAmount, uint collateral);\r\n    event Redeemed(uint tokenAmount, uint conversion, uint collateral, bool isPrimary);\r\n\r\n    /// @notice vault initialization time\r\n    uint public initializationTime;\r\n    /// @notice start of live period\r\n    uint public liveTime;\r\n    /// @notice end of live period\r\n    uint public settleTime;\r\n\r\n    /// @notice underlying value at the start of live period\r\n    int public underlyingStart;\r\n    /// @notice underlying value at the end of live period\r\n    int public underlyingEnd;\r\n\r\n    /// @notice primary token conversion rate multiplied by 10 ^ 12\r\n    uint public primaryConversion;\r\n    /// @notice primary token conversion rate multiplied by 10 ^ 12\r\n    uint public complementConversion;\r\n\r\n    /// @notice protocol fee multiplied by 10 ^ 12\r\n    uint public protocolFee;\r\n    /// @notice limit on author fee multiplied by 10 ^ 12\r\n    uint public authorFeeLimit;\r\n\r\n    // @notice current state of the vault\r\n    State public state;\r\n\r\n    // @notice derivative specification address\r\n    IDerivativeSpecification public derivativeSpecification;\r\n    // @notice collateral token address\r\n    IERC20 public collateralToken;\r\n    // @notice oracle address\r\n    address[] public oracles;\r\n    address[] public oracleIterators;\r\n    // @notice collateral split address\r\n    ICollateralSplit public collateralSplit;\r\n    // @notice derivative's token builder strategy address\r\n    ITokenBuilder public tokenBuilder;\r\n    IFeeLogger public feeLogger;\r\n\r\n    // @notice protocol's fee receiving wallet\r\n    address public feeWallet;\r\n\r\n    // @notice primary token address\r\n    IERC20MintedBurnable public primaryToken;\r\n    // @notice complement token address\r\n    IERC20MintedBurnable public complementToken;\r\n\r\n    constructor(\r\n        uint _initializationTime,\r\n        uint _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint _authorFeeLimit\r\n    ) public {\r\n        require(_initializationTime > 0, \"Initialization time\");\r\n        initializationTime = _initializationTime;\r\n\r\n        protocolFee = _protocolFee;\r\n\r\n        require(_feeWallet != address(0), \"Fee wallet\");\r\n        feeWallet = _feeWallet;\r\n\r\n        require(_derivativeSpecification != address(0), \"Derivative\");\r\n        derivativeSpecification = IDerivativeSpecification(_derivativeSpecification);\r\n\r\n        require(_collateralToken != address(0), \"Collateral token\");\r\n        collateralToken = IERC20(_collateralToken);\r\n\r\n        require(_oracles.length > 0, \"Oracles\");\r\n        require(_oracles[0] != address(0), \"First oracle is absent\");\r\n        oracles = _oracles;\r\n\r\n        require(_oracleIterators.length > 0, \"OracleIterators\");\r\n        require(_oracleIterators[0] != address(0), \"First oracle iterator is absent\");\r\n        oracleIterators = _oracleIterators;\r\n\r\n        require(_collateralSplit != address(0), \"Collateral split\");\r\n        collateralSplit = ICollateralSplit(_collateralSplit);\r\n\r\n        require(_tokenBuilder != address(0), \"Token builder\");\r\n        tokenBuilder = ITokenBuilder(_tokenBuilder);\r\n\r\n        require(_feeLogger != address(0), \"Fee logger\");\r\n        feeLogger = IFeeLogger(_feeLogger);\r\n\r\n        changeState(State.Created);\r\n\r\n        underlyingStart = NEGATIVE_INFINITY;\r\n        underlyingEnd = NEGATIVE_INFINITY;\r\n\r\n        authorFeeLimit = _authorFeeLimit;\r\n\r\n        liveTime = initializationTime + derivativeSpecification.mintingPeriod();\r\n        settleTime = liveTime + derivativeSpecification.livePeriod();\r\n        require(liveTime > block.timestamp, \"Live time\");\r\n        require(settleTime > block.timestamp, \"Settle time\");\r\n    }\r\n\r\n    /// @notice Initialize vault by creating derivative token and switching to Minting state\r\n    /// @dev Extracted from constructor to reduce contract gas creation amount\r\n    function initialize() external {\r\n        require(state == State.Created, \"Incorrect state.\");\r\n\r\n        changeState(State.Minting);\r\n\r\n        (primaryToken, complementToken) = tokenBuilder.buildTokens(derivativeSpecification, settleTime, address(collateralToken));\r\n\r\n        emit MintingStateSet(address(primaryToken), address(complementToken));\r\n    }\r\n\r\n    /// @notice Switch to Live state if appropriate time threshold is passed\r\n    function live() public {\r\n        if(state != State.Minting) {\r\n            revert('Incorrect state');\r\n        }\r\n        require(block.timestamp >= liveTime, \"Incorrect time\");\r\n        changeState(State.Live);\r\n\r\n        emit LiveStateSet();\r\n    }\r\n\r\n    function changeState(State _newState) internal {\r\n        emit StateChanged(state, _newState);\r\n        state = _newState;\r\n    }\r\n\r\n\r\n    /// @notice Switch to Settled state if appropriate time threshold is passed and\r\n    /// set underlyingStart value and set underlyingEnd value,\r\n    /// calculate primaryConversion and complementConversion params\r\n    /// @dev Reverts if underlyingStart or underlyingEnd are not available\r\n    function settle(uint[] memory underlyingStartRoundHints, uint[] memory underlyingEndRoundHints) public {\r\n        if(state != State.Live) {\r\n            revert('Incorrect state');\r\n        }\r\n        require(block.timestamp >= settleTime, \"Incorrect time\");\r\n        changeState(State.Settled);\r\n\r\n        uint split;\r\n        (split, underlyingStart, underlyingEnd) = collateralSplit.split(\r\n            oracles, oracleIterators, liveTime, settleTime, underlyingStartRoundHints, underlyingEndRoundHints\r\n        );\r\n        split = range(split);\r\n\r\n        uint collectedCollateral = collateralToken.balanceOf(address(this));\r\n        uint mintedPrimaryTokenAmount = primaryToken.totalSupply();\r\n\r\n        if(mintedPrimaryTokenAmount > 0) {\r\n            uint primaryCollateralPortion = collectedCollateral.mul(split);\r\n            primaryConversion = primaryCollateralPortion.div(mintedPrimaryTokenAmount);\r\n            complementConversion = collectedCollateral.mul(FRACTION_MULTIPLIER).sub(primaryCollateralPortion).div(mintedPrimaryTokenAmount);\r\n        }\r\n\r\n        emit SettledStateSet(underlyingStart, underlyingEnd, primaryConversion, complementConversion);\r\n    }\r\n\r\n    function range(uint _split) public pure returns(uint) {\r\n        if(_split > FRACTION_MULTIPLIER) {\r\n            return uint(FRACTION_MULTIPLIER);\r\n        }\r\n        return uint(_split);\r\n    }\r\n\r\n    /// @notice Mints primary and complement derivative tokens\r\n    /// @dev Checks and switches to the right state and does nothing if vault is not in Minting state\r\n    function mint(uint _collateralAmount) external {\r\n        if(block.timestamp >= liveTime && state == State.Minting) {\r\n            live();\r\n        }\r\n\r\n        if(state != State.Minting){\r\n            revert('Minting period is over');\r\n        }\r\n\r\n        require(_collateralAmount > 0, \"Zero amount\");\r\n        _collateralAmount = doTransferIn(msg.sender, _collateralAmount);\r\n\r\n        uint feeAmount = withdrawFee(_collateralAmount);\r\n\r\n        uint netAmount = _collateralAmount.sub(feeAmount);\r\n\r\n        uint tokenAmount = denominate(netAmount);\r\n\r\n        primaryToken.mint(msg.sender, tokenAmount);\r\n        complementToken.mint(msg.sender, tokenAmount);\r\n\r\n        emit Minted(tokenAmount, _collateralAmount, feeAmount);\r\n    }\r\n\r\n    /// @notice Refund equal amounts of derivative tokens for collateral at any time\r\n    function refund(uint _tokenAmount) external {\r\n        require(_tokenAmount > 0, \"Zero amount\");\r\n        require(_tokenAmount <= primaryToken.balanceOf(msg.sender), \"Insufficient primary amount\");\r\n        require(_tokenAmount <= complementToken.balanceOf(msg.sender), \"Insufficient complement amount\");\r\n\r\n        primaryToken.burnFrom(msg.sender, _tokenAmount);\r\n        complementToken.burnFrom(msg.sender, _tokenAmount);\r\n        uint unDenominated = unDenominate(_tokenAmount);\r\n\r\n        emit Refunded(_tokenAmount, unDenominated);\r\n        doTransferOut(msg.sender, unDenominated);\r\n    }\r\n\r\n    /// @notice Redeems unequal amounts previously calculated conversions if the vault in Settled state\r\n    function redeem(\r\n        uint _primaryTokenAmount,\r\n        uint _complementTokenAmount,\r\n        uint[] memory underlyingStartRoundHints,\r\n        uint[] memory underlyingEndRoundHints\r\n    ) external {\r\n        require(_primaryTokenAmount > 0 || _complementTokenAmount > 0, \"Both tokens zero amount\");\r\n        require(_primaryTokenAmount <= primaryToken.balanceOf(msg.sender), \"Insufficient primary amount\");\r\n        require(_complementTokenAmount <= complementToken.balanceOf(msg.sender), \"Insufficient complement amount\");\r\n\r\n        if(block.timestamp >= liveTime && state == State.Minting) {\r\n            live();\r\n        }\r\n\r\n        if(block.timestamp >= settleTime && state == State.Live) {\r\n            settle(underlyingStartRoundHints,underlyingEndRoundHints);\r\n        }\r\n\r\n        if(state == State.Settled) {\r\n            redeemAsymmetric(primaryToken, _primaryTokenAmount, true);\r\n            redeemAsymmetric(complementToken, _complementTokenAmount, false);\r\n        }\r\n    }\r\n\r\n    function redeemAsymmetric(IERC20MintedBurnable _derivativeToken, uint _amount, bool _isPrimary) internal {\r\n        if(_amount > 0) {\r\n            _derivativeToken.burnFrom(msg.sender, _amount);\r\n            uint conversion = _isPrimary ? primaryConversion : complementConversion;\r\n            uint collateral = _amount.mul(conversion).div(FRACTION_MULTIPLIER);\r\n            emit Redeemed(_amount, conversion, collateral, _isPrimary);\r\n            if(collateral > 0) {\r\n                doTransferOut(msg.sender, collateral);\r\n            }\r\n        }\r\n    }\r\n\r\n    function denominate(uint _collateralAmount) internal view returns(uint) {\r\n        return _collateralAmount.div(derivativeSpecification.primaryNominalValue() + derivativeSpecification.complementNominalValue());\r\n    }\r\n\r\n    function unDenominate(uint _tokenAmount) internal view returns(uint) {\r\n        return _tokenAmount.mul(derivativeSpecification.primaryNominalValue() + derivativeSpecification.complementNominalValue());\r\n    }\r\n\r\n    function withdrawFee(uint _amount) internal returns(uint){\r\n        uint protocolFeeAmount = calcAndTransferFee(_amount, payable(feeWallet), protocolFee);\r\n\r\n        feeLogger.log(msg.sender, address(collateralToken), protocolFeeAmount, derivativeSpecification.author());\r\n\r\n        uint authorFee = derivativeSpecification.authorFee();\r\n        if(authorFee > authorFeeLimit) {\r\n            authorFee = authorFeeLimit;\r\n        }\r\n        uint authorFeeAmount = calcAndTransferFee(_amount, payable(derivativeSpecification.author()), authorFee);\r\n\r\n        return protocolFeeAmount.add(authorFeeAmount);\r\n    }\r\n\r\n    function calcAndTransferFee(uint _amount, address payable _beneficiary, uint _fee) internal returns(uint){\r\n        uint feeAmount = _amount.mul(_fee).div(FRACTION_MULTIPLIER);\r\n        if(feeAmount > 0) {\r\n            doTransferOut(_beneficiary, feeAmount);\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n\r\n    /// @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n    /// This will revert due to insufficient balance or insufficient allowance.\r\n    /// This function returns the actual amount received,\r\n    /// which may be less than `amount` if there is a fee attached to the transfer.\r\n    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n    function doTransferIn(address from, uint amount) internal returns (uint) {\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(address(collateralToken));\r\n        uint balanceBefore = collateralToken.balanceOf(address(this));\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 {                       // This is a non-standard ERC-20\r\n                success := not(0)          // set success to true\r\n            }\r\n            case 32 {                      // This is a compliant ERC-20\r\n                returndatacopy(0, 0, 32)\r\n                success := mload(0)        // Set `success = returndata` of external call\r\n            }\r\n            default {                      // This is an excessively non-compliant ERC-20, revert.\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n        // Calculate the amount that was *actually* transferred\r\n        uint balanceAfter = collateralToken.balanceOf(address(this));\r\n        require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\r\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\r\n    }\r\n\r\n    /// @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n    /// error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n    /// insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n    /// it is >= amount, this should not revert in normal conditions.\r\n    /// @notice This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n    /// See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n    function doTransferOut(address payable to, uint amount) internal {\r\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(address(collateralToken));\r\n        token.transfer(to, amount);\r\n\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 {                      // This is a non-standard ERC-20\r\n                success := not(0)          // set success to true\r\n            }\r\n            case 32 {                     // This is a complaint ERC-20\r\n                returndatacopy(0, 0, 32)\r\n                success := mload(0)        // Set `success = returndata` of external call\r\n            }\r\n            default {                     // This is an excessively non-compliant ERC-20, revert.\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n}\r\n\r\n// File: contracts/IVaultBuilder.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\ninterface IVaultBuilder {\r\n    function buildVault(\r\n        uint _initializationTime,\r\n        uint _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint _authorFeeLimit\r\n    ) external returns(address);\r\n}\r\n\r\n// File: contracts/VaultBuilder.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ncontract VaultBuilder is IVaultBuilder{\r\n    function buildVault(\r\n        uint _initializationTime,\r\n        uint _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint _authorFeeLimit\r\n    ) external override returns(address){\r\n        address vault = address(\r\n            new Vault(\r\n                _initializationTime,\r\n                _protocolFee,\r\n                _feeWallet,\r\n                _derivativeSpecification,\r\n                _collateralToken,\r\n                _oracles,\r\n                _oracleIterators,\r\n                _collateralSplit,\r\n                _tokenBuilder,\r\n                _feeLogger,\r\n                _authorFeeLimit\r\n            )\r\n        );\r\n        return vault;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initializationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_derivativeSpecification\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracleIterators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_collateralSplit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBuilder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeLogger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_authorFeeLimit\",\"type\":\"uint256\"}],\"name\":\"buildVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultBuilder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f0256bdb1b6811ebfc1229e6ffccb30244a4bcb0946e164dc4d6b5a1e5c45085"}]}