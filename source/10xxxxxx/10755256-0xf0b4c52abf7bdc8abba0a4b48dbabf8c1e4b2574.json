{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\ndev_team.gutalik\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, reverts on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b);\r\n\r\nreturn c;\r\n}\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b > 0);\r\nuint256 c = a / b;\r\n\r\nreturn c;\r\n}\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b <= a);\r\nuint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a);\r\n\r\nreturn c;\r\n}\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b != 0);\r\nreturn a % b;\r\n}\r\n}\r\n\r\ncontract owned {\r\naddress public owner;\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 is owned{\r\nusing SafeMath for uint256;\r\n\r\n// Public variables of the token\r\nstring public name = \"SAMSUNG GAMES COIN\";\r\nstring public symbol = 'SGC';\r\nuint8 public decimals = 18;\r\n// 18 decimals is the strongly suggested default, avoid changing it\r\nuint256 public totalSupply = 1000000000000000000000000000000;\r\nbool public released = true;\r\n\r\n// This creates an array with all balances\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n// This notifies clients about the amount burnt\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n\r\nconstructor(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n) public {\r\ntotalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\r\nbalanceOf[msg.sender] = 0; // Give the creator all initial tokens\r\nname = \"SAMSUNG GAMES COIN\"; // Set the name for display purposes\r\nsymbol = \"SGC\"; // Set the symbol for display purposes\r\n}\r\n\r\nfunction release() public onlyOwner{\r\nrequire (owner == msg.sender);\r\nreleased = !released;\r\n}\r\n\r\nmodifier onlyReleased() {\r\nrequire(released);\r\n_;\r\n}\r\n\r\nfunction _transfer(address _from, address _to, uint _value) internal onlyReleased {\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\nrequire(_to != 0x0);\r\n// Check if the sender has enough\r\nrequire(balanceOf[_from] >= _value);\r\n// Check for overflows\r\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n// Save this for an assertion in the future\r\nuint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n// Subtract from the sender\r\nbalanceOf[_from] = balanceOf[_from].sub(_value);\r\n// Add the same to the recipient\r\nbalanceOf[_to] = balanceOf[_to].add(_value);\r\nemit Transfer(_from, _to, _value);\r\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\nassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n}\r\n\r\n/**\r\n* Transfer tokens\r\n*\r\n* Send `_value` tokens to `_to` from your account\r\n*\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transfer(address _to, uint256 _value) public onlyReleased returns (bool success) {\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Transfer tokens from other address\r\n*\r\n* Send `_value` tokens to `_to` in behalf of `_from`\r\n*\r\n* @param _from The address of the sender\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public onlyReleased returns (bool success) {\r\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\r\nallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Set allowance for other address\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n*/\r\nfunction approve(address _spender, uint256 _value) public onlyReleased\r\nreturns (bool success) {\r\nrequire(_spender != address(0));\r\n\r\nallowance[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\npublic onlyReleased\r\nreturns (bool success) {\r\ntokenRecipient spender = tokenRecipient(_spender);\r\nif (approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\nreturn true;\r\n}\r\n}\r\n\r\n/**\r\n* Destroy tokens\r\n*\r\n* Remove `_value` tokens from the system irreversibly\r\n*\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burn(uint256 _value) public onlyReleased returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); // Subtract from the sender\r\ntotalSupply = totalSupply.sub(_value); // Updates totalSupply\r\nemit Burn(msg.sender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* Destroy tokens from other account\r\n*\r\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n*\r\n* @param _from the address of the sender\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burnFrom(address _from, uint256 _value) public onlyReleased returns (bool success) {\r\nrequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\nbalanceOf[_from] = balanceOf[_from].sub(_value); // Subtract from the targeted balance\r\nallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\ntotalSupply = totalSupply.sub(_value); // Update totalSupply\r\nemit Burn(_from, _value);\r\nreturn true;\r\n}\r\n}\r\n\r\ncontract SGC is owned, TokenERC20 {\r\n\r\nmapping (address => bool) public frozenAccount;\r\n\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent FrozenFunds(address target, bool frozen);\r\n\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nconstructor(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n\r\n) TokenERC20(initialSupply, tokenName, tokenSymbol) public {\r\n    totalSupply = totalSupply.add(10000000000000000000000000000);\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(10000000000000000000000000000);\r\n}\r\n\r\n/* Internal transfer, only can be called by this contract */\r\nfunction _transfer(address _from, address _to, uint _value) internal onlyReleased {\r\nrequire (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\r\nrequire (balanceOf[_from] >= _value); // Check if the sender has enough\r\nrequire (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\nrequire(!frozenAccount[_from]); // Check if sender is frozen\r\nrequire(!frozenAccount[_to]); // Check if recipient is frozen\r\nbalanceOf[_from] = balanceOf[_from].sub(_value); // Subtract from the sender\r\nbalanceOf[_to] = balanceOf[_to].add(_value); // Add the same to the recipient\r\nemit Transfer(_from, _to, _value);\r\n}\r\n\r\n\r\n/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n/// @param target Address to be frozen\r\n/// @param freeze either to freeze it or not\r\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\nfrozenAccount[target] = freeze;\r\nemit FrozenFunds(target, freeze);\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"SGC","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1ed13724a85cc48540461b7fc21aafa900d974a4fe079a058401506b00382267"}]}