{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        if(a % b != 0)\r\n            c = c + 1;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface Curve {\r\n    function get_virtual_price() external view returns (uint);\r\n}\r\n\r\ninterface Yearn {\r\n    function getPricePerFullShare() external view returns (uint);\r\n}\r\n\r\ninterface Dforce {\r\n    function getExchangeRate() external view returns (uint);\r\n}\r\n\r\ninterface Compound {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface Cream {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract Normalizer {\r\n    \r\n    mapping(address => bool) public yearn;\r\n    mapping(address => bool) public curve;\r\n    mapping(address => address) public curveSwap;\r\n    mapping(address => bool) public vaults;\r\n    mapping(address => bool) public dforce;\r\n    mapping(address => bool) public compound;\r\n    mapping(address => bool) public cream;\r\n    \r\n    constructor() public {\r\n        yearn[0xACd43E627e64355f1861cEC6d3a6688B31a6F952] = true; // vault yDAI\r\n        yearn[0x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a] = true; // vault yTUSD\r\n        yearn[0x597aD1e0c13Bfe8025993D9e79C69E1c0233522e] = true; // vault yUSDC\r\n        yearn[0x2f08119C6f07c006695E079AAFc638b8789FAf18] = true; // vault yUSDT\r\n        \r\n        yearn[0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01] = true; // yDAI\r\n        yearn[0xd6aD7a6750A7593E092a9B218d66C0A814a3436e] = true; // yUSDC\r\n        yearn[0x83f798e925BcD4017Eb265844FDDAbb448f1707D] = true; // yUSDT\r\n        yearn[0x73a052500105205d34Daf004eAb301916DA8190f] = true; // yTUSD\r\n        yearn[0xF61718057901F84C4eEC4339EF8f0D86D2B45600] = true; // ySUSD\r\n        \r\n        yearn[0xC2cB1040220768554cf699b0d863A3cd4324ce32] = true; // bDAI\r\n        yearn[0x26EA744E5B887E5205727f55dFBE8685e3b21951] = true; // bUSDC\r\n        yearn[0xE6354ed5bC4b393a5Aad09f21c46E101e692d447] = true; // bUSDT\r\n        yearn[0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE] = true; // bBUSD\r\n        \r\n        curve[0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2] = true; // cCompound\r\n        curveSwap[0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2] = 0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56;\r\n        curve[0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8] = true; // cYearn\r\n        curveSwap[0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8] = 0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51;\r\n        curve[0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B] = true; // cBUSD\r\n        curveSwap[0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B] = 0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27;\r\n        curve[0xC25a3A3b969415c80451098fa907EC722572917F] = true; // cSUSD\r\n        curveSwap[0xC25a3A3b969415c80451098fa907EC722572917F] = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\r\n        curve[0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8] = true; // cPAX\r\n        curveSwap[0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8] = 0x06364f10B501e868329afBc005b3492902d6C763;\r\n        \r\n        dforce[0x868277d475E0e475E38EC5CdA2d9C83B5E1D9fc8] = true; // dUSDT\r\n        dforce[0x02285AcaafEB533e03A7306C55EC031297df9224] = true; // dDAI\r\n        dforce[0x16c9cF62d8daC4a38FB50Ae5fa5d51E9170F3179] = true; // dUSDC\r\n        \r\n        compound[0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643] = true; // cDAI\r\n        compound[0x39AA39c021dfbaE8faC545936693aC917d5E7563] = true; // cUSDC\r\n        compound[0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9] = true; // cUSDT\r\n        \r\n        cream[0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322] = true; // crUSDC\r\n        cream[0x797AAB1ce7c01eB727ab980762bA88e7133d2157] = true; // crUSDT\r\n        cream[0x1FF8CDB51219a8838b52E9cAc09b71e591BC998e] = true; // crBUSD\r\n    }\r\n    \r\n    function getPrice(address token) external view returns (uint, uint) {\r\n        if (yearn[token]) {\r\n            return (uint(18), Yearn(token).getPricePerFullShare());\r\n        } else if (curve[token]) {\r\n            return (uint(18), Curve(curveSwap[token]).get_virtual_price());\r\n        } else if (dforce[token]) {\r\n            return (uint(18), Dforce(token).getExchangeRate());\r\n        } else if (compound[token]) {\r\n            return (Compound(token).decimals(), Compound(token).exchangeRateStored());\r\n        } else if (cream[token]) {\r\n            return (Cream(token).decimals(), Cream(token).exchangeRateStored());\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dforce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yearn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Normalizer","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2a429b5e5f0c6af45678a99580dee3adccd681ba20a2fc81a09bf607359d1d17"}]}