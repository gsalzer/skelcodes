{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\ncontract ParkCryption {\r\n  //global variables\r\n  string public name = \"ParkCryption\";\r\n  string public symbol = \"PARK\";\r\n  uint8 public decimals = 18;\r\n  address public _owner;\r\n  uint256 public initialSupply = 1000000000000000000000000000;\r\n  uint256 public totalSupply;\r\n  \r\n  //Creates mapping arrays for storing all balances and allowed 3rd party sellers\r\n  mapping (address => uint256) public _balances;\r\n  mapping (address => mapping (address => uint256)) public _allowed;\r\n  \r\n  //generate a blockchain event to broadcast a transfer\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n  \r\n  //generate a blockchain event to broadcast an approval\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n  \r\n  //function modifier to restrict function call to only contract owner\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n  \r\n  //assign contract owner and mint genesis tokens\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n    _mint(msg.sender, initialSupply);\r\n  }\r\n  \r\n  //external balanceof function to allow checks of balances \r\n  function balanceOf(address owner) external view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n  \r\n  //restrict functions to be only called by contract owner\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n  \r\n  //external token transfer function\r\n  function transfer(address to, uint256 value) external returns (bool success) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n  \r\n  //approve + transferFrom are to authorise a 3rd party transfer such as an exchange,\r\n  //to sell and transfer tokens on behalf of token contract owner.\r\n  //Token Contract Owner would use function approve(exchange, amount) then\r\n  //Token Buyer would execute trade on the Exchange then\r\n  //Exchange would call transferFrom(TokenContractOwnerAddress, BuyerAddress, TokenAmount)\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external\r\n    returns (bool success)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n    _allowed[from][msg.sender] -= value; //Deduct value amount from 3rd Party token allowance\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n  \r\n  // Internal transfer, can only be called by this contract\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n    _balances[from] -= value;\r\n    _balances[to] += value;\r\n    emit Transfer(from, to, value);\r\n  }\r\n  \r\n  //approve + transferFrom are for a 3rd party transfer such as an exchange\r\n  function approve(address spender, uint256 value) external onlyOwner returns (bool success) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n  \r\n  //Retrieve token allowance allocated to a seller i.e. a crypto exchange\r\n  function allowance(address owner, address spender) external onlyOwner view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  //increase the amount of tokens that an owner allowed to a seller.\r\n  //spender - the address allowed to sell the tokens.\r\n  //addedValue - the amount of tokens to increase the allowance by.\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender] + addedValue);\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  //Decrease the amount of tokens that owner allowed to a spender.\r\n  //spender - the address allowed to sell the tokens ie an exchange\r\n  //subtractedValue - the amount of tokens to decrease the allowance by.\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender] - subtractedValue);\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n  \r\n  //Set totalSupply and assign all genesis tokens to contract owner\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != address(0));\r\n    _balances[account] = value;      \r\n    totalSupply = value;\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n  \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ParkCryption","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2671273d52855fafb8860d2d7f0ba5fd189858bed41c141d97eee24030eaa465"}]}