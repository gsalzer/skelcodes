{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/***\r\n *    ,------.                             \r\n *    |  .---'  ,--,--. ,--.--. ,--,--,--. \r\n *    |  `--,  ' ,-.  | |  .--' |        | \r\n *    |  |`    \\ '-'  | |  |    |  |  |  | \r\n *    `--'      `--`--' `--'    `--`--`--' \r\n * \r\n *  v 1.1.0\r\n *  \"With help, wealth grows...\"\r\n *\r\n *  Ethereum Commonwealth.gg Farm(based on contract @ ETC:0x93123bA3781bc066e076D249479eEF760970aa32)\r\n *  Modifications: \r\n *  -> reinvest Crop Function\r\n\r\n *  What?\r\n *  -> Maintains crops, so that farmers can reinvest on user's behalf. Farmers receieve a referral bonus.\r\n *  -> A crop contract is deployed for each holder, and holds custody of eWLTH.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \r\n * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\ncontract Hourglass {\r\n  function() payable public;\r\n  function buy(address) public payable returns(uint256) {}\r\n  function sell(uint256) public;\r\n  function withdraw() public returns(address);\r\n  function dividendsOf(address,bool) public view returns(uint256);\r\n  function balanceOf(address) public view returns(uint256);\r\n  function transfer(address , uint256) public returns(bool);\r\n  function myTokens() public view returns(uint256);\r\n  function myDividends(bool) public view returns(uint256);\r\n  function exit() public;\r\n}\r\n\r\ncontract Farm {\r\n  address public eWLTHAddress = 0x5833C959C3532dD5B3B6855D590D70b01D2d9fA6;\r\n  \r\n  // Mapping of owners to their crops.\r\n  mapping (address => address) public crops;\r\n  \r\n  // event for creating a new crop\r\n  event CropCreated(address indexed owner, address crop);\r\n\r\n  /**\r\n   * @dev Creates a crop with an optional payable value\r\n   * @param _playerAddress referral address.\r\n   */\r\n  function createCrop(address _playerAddress, bool _selfBuy) public payable returns (address) {\r\n      // we can't already have a crop\r\n      require(crops[msg.sender] == address(0));\r\n      \r\n      // create a new crop for us\r\n      address cropAddress = new Crop(msg.sender);\r\n      // map the creator to the crop address\r\n      crops[msg.sender] = cropAddress;\r\n      emit CropCreated(msg.sender, cropAddress);\r\n\r\n      // if we sent some value with the transaction, buy some eWLTH for the crop.\r\n      if (msg.value != 0){\r\n        if (_selfBuy){\r\n            Crop(cropAddress).buy.value(msg.value)(cropAddress);\r\n        } else {\r\n            Crop(cropAddress).buy.value(msg.value)(_playerAddress);\r\n        }\r\n      }\r\n      \r\n      return cropAddress;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns my current crop.\r\n   */\r\n  function myCrop() public view returns (address) {\r\n    return crops[msg.sender];\r\n  }\r\n  \r\n  /**\r\n   * @dev Get dividends of my crop.\r\n   */\r\n  function myCropDividends(bool _includeReferralBonus) external view returns (uint256) {\r\n    return Hourglass(eWLTHAddress).dividendsOf(crops[msg.sender], _includeReferralBonus);\r\n  }\r\n  \r\n  /**\r\n   * @dev Get amount of tokens owned by my crop.\r\n   */\r\n  function myCropTokens() external view returns (uint256) {\r\n    return Hourglass(eWLTHAddress).balanceOf(crops[msg.sender]);\r\n  }\r\n  \r\n  /**\r\n   * @dev Get whether or not your crop is disabled.\r\n   */\r\n  function myCropDisabled() external view returns (bool) {\r\n    if (crops[msg.sender] != address(0)){\r\n        return Crop(crops[msg.sender]).disabled();\r\n    } else {\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\ncontract Crop {\r\n  address public owner;\r\n  bool public disabled = false;\r\n\r\n  address private eWLTHAddress = 0xDe6FB6a5adbe6415CDaF143F8d90Eb01883e42ac;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function Crop(address newOwner) public {\r\n      owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Turn reinvest on / off\r\n   * @param _disabled bool to determine state of reinvest.\r\n   */\r\n  function disable(bool _disabled) external onlyOwner() {\r\n    // toggle disabled\r\n    disabled = _disabled;\r\n  }\r\n\r\n  /**\r\n   * @dev Enables anyone with a masternode to earn referral fees on eWLTH reinvestments.\r\n   * @param _playerAddress referral address.\r\n   */\r\n  function reinvest(address _playerAddress) external {\r\n    // reinvest must be enabled\r\n    require(disabled == false);\r\n    \r\n    Hourglass eWLTH = Hourglass(eWLTHAddress);\r\n    if (eWLTH.dividendsOf(address(this), true) > 0){\r\n        eWLTH.withdraw();\r\n        uint256 bal = address(this).balance;\r\n        // reinvest with a referral fee for sender\r\n        eWLTH.buy.value(bal)(_playerAddress);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Default function if ETC sent to contract. Does nothing.\r\n   */\r\n  function() public payable {}\r\n\r\n  /**\r\n   * @dev Buy eWLTH tokens\r\n   * @param _playerAddress referral address.\r\n   */\r\n  function buy(address _playerAddress) external payable {\r\n    Hourglass(eWLTHAddress).buy.value(msg.value)(_playerAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Sell eWLTH tokens and send balance to owner\r\n   * @param _amountOfTokens amount of tokens to sell.\r\n   */\r\n  function sell(uint256 _amountOfTokens) external onlyOwner() {\r\n    // sell tokens\r\n    Hourglass(eWLTHAddress).sell(_amountOfTokens);\r\n    // transfer the dividends back to the owner\r\n    withdraw();\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw eWLTH dividends and send balance to owner\r\n   */\r\n  function withdraw() public onlyOwner() {\r\n    if (Hourglass(eWLTHAddress).myDividends(true) > 0){\r\n        // withdraw dividends\r\n        Hourglass(eWLTHAddress).withdraw();\r\n\r\n        // transfer to owner\r\n        owner.transfer(address(this).balance);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Liquidate all eWLTH in crop and send to the owner.\r\n   */\r\n  function exit() external onlyOwner() {\r\n    Hourglass(eWLTHAddress).exit();\r\n    owner.transfer(address(this).balance);\r\n  }\r\n  \r\n  /**\r\n   * @dev Transfer eWLTH tokens\r\n   * @param _toAddress address to send tokens to.\r\n   * @param _amountOfTokens amount of tokens to send.\r\n   */\r\n  function transfer(address _toAddress, uint256 _amountOfTokens) external onlyOwner() returns (bool) {\r\n    withdraw();\r\n    return Hourglass(eWLTHAddress).transfer(_toAddress, _amountOfTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Get dividends for this crop.\r\n   * @param _includeReferralBonus for including referrals in dividends.\r\n   */\r\n  function cropDividends(bool _includeReferralBonus) external view returns (uint256) {\r\n    return Hourglass(eWLTHAddress).myDividends(_includeReferralBonus);\r\n  }\r\n  \r\n  /**\r\n   * @dev Get number of tokens for this crop.\r\n   */\r\n  function cropTokens() external view returns (uint256) {\r\n    return Hourglass(eWLTHAddress).myTokens();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crops\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myCropDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myCrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_selfBuy\",\"type\":\"bool\"}],\"name\":\"createCrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eWLTHAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myCropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myCropDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crop\",\"type\":\"address\"}],\"name\":\"CropCreated\",\"type\":\"event\"}]","ContractName":"Farm","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://13e6736e1802b99e47014123acfe8a01aa594f5ebafd65431e72318f433fbb94"}]}