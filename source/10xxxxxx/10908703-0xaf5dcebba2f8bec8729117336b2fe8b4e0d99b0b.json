{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/ETH/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/ETH/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/ETH/ETHBurgerTransit.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\n// import 'contracts/ETH/libraries/SafeMath.sol';\r\n// import 'contracts/ETH/libraries/TransferHelper.sol';\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract ETHBurgerTransit {\r\n    using SafeMath for uint;\r\n    \r\n    address public owner;\r\n    address public signWallet;\r\n    address public developWallet;\r\n    address public WETH;\r\n    \r\n    uint public totalFee;\r\n    uint public developFee;\r\n    \r\n    // key: payback_id\r\n    mapping (bytes32 => bool) public executedMap;\r\n    \r\n    event Transit(address indexed from, address indexed token, uint amount);\r\n    event Withdraw(bytes32 paybackId, address indexed to, address indexed token, uint amount);\r\n    event CollectFee(address indexed handler, uint amount);\r\n    \r\n    constructor(address _WETH, address _signer, address _developer) public {\r\n        WETH = _WETH;\r\n        signWallet = _signer;\r\n        developWallet = _developer;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    receive() external payable {\r\n        assert(msg.sender == WETH);\r\n    }\r\n    \r\n    function changeSigner(address _wallet) external {\r\n        require(msg.sender == owner, \"CHANGE_SIGNER_FORBIDDEN\");\r\n        signWallet = _wallet;\r\n    }\r\n    \r\n    function changeDevelopWallet(address _developWallet) external {\r\n        require(msg.sender == owner, \"CHANGE_DEVELOP_WALLET_FORBIDDEN\");\r\n        developWallet = _developWallet;\r\n    } \r\n    \r\n    function changeDevelopFee(uint _amount) external {\r\n        require(msg.sender == owner, \"CHANGE_DEVELOP_FEE_FORBIDDEN\");\r\n        developFee = _amount;\r\n    }\r\n    \r\n    function collectFee() external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        require(developWallet != address(0), \"SETUP_DEVELOP_WALLET\");\r\n        require(totalFee > 0, \"NO_FEE\");\r\n        TransferHelper.safeTransferETH(developWallet, totalFee);\r\n        totalFee = 0;\r\n    }\r\n    \r\n    function transitForBSC(address _token, uint _amount) external {\r\n        require(_amount > 0, \"INVALID_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\r\n        emit Transit(msg.sender, _token, _amount);\r\n    }\r\n    \r\n    function transitETHForBSC() external payable {\r\n        require(msg.value > 0, \"INVALID_AMOUNT\");\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n        emit Transit(msg.sender, WETH, msg.value);\r\n    }\r\n    \r\n    function withdrawFromBSC(bytes calldata _signature, bytes32 _paybackId, address _token, uint _amount) external payable {\r\n        require(executedMap[_paybackId] == false, \"ALREADY_EXECUTED\");\r\n        \r\n        require(_amount > 0, \"NOTHING_TO_WITHDRAW\");\r\n        require(msg.value == developFee, \"INSUFFICIENT_VALUE\");\r\n        \r\n        bytes32 message = keccak256(abi.encodePacked(_paybackId, _token, msg.sender, _amount));\r\n        require(_verify(message, _signature), \"INVALID_SIGNATURE\");\r\n        \r\n        if(_token == WETH) {\r\n            IWETH(WETH).withdraw(_amount);\r\n            TransferHelper.safeTransferETH(msg.sender, _amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(_token, msg.sender, _amount);\r\n        }\r\n        totalFee = totalFee.add(developFee);\r\n        \r\n        executedMap[_paybackId] = true;\r\n        \r\n        emit Withdraw(_paybackId, msg.sender, _token, _amount);\r\n    }\r\n    \r\n    function _verify(bytes32 _message, bytes memory _signature) internal view returns (bool) {\r\n        bytes32 hash = _toEthBytes32SignedMessageHash(_message);\r\n        address[] memory signList = _recoverAddresses(hash, _signature);\r\n        return signList[0] == signWallet;\r\n    }\r\n    \r\n    function _toEthBytes32SignedMessageHash (bytes32 _msg) pure internal returns (bytes32 signHash)\r\n    {\r\n        signHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _msg));\r\n    }\r\n    \r\n    function _recoverAddresses(bytes32 _hash, bytes memory _signatures) pure internal returns (address[] memory addresses)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint count = _countSignatures(_signatures);\r\n        addresses = new address[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            (v, r, s) = _parseSignature(_signatures, i);\r\n            addresses[i] = ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n    \r\n    function _parseSignature(bytes memory _signatures, uint _pos) pure internal returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        uint offset = _pos * 65;\r\n        assembly {\r\n            r := mload(add(_signatures, add(32, offset)))\r\n            s := mload(add(_signatures, add(64, offset)))\r\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\r\n        }\r\n\r\n        if (v < 27) v += 27;\r\n\r\n        require(v == 27 || v == 28);\r\n    }\r\n    \r\n    function _countSignatures(bytes memory _signatures) pure internal returns (uint)\r\n    {\r\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paybackId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeDevelopFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developWallet\",\"type\":\"address\"}],\"name\":\"changeDevelopWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transitETHForBSC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transitForBSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_paybackId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromBSC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ETHBurgerTransit","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000005fdd700d4d438301a3c4378276ffb424fa36cd000000000000000000000000aad9f762bd7b61b6e5893823d2a6905583c41b5d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3395438e5f3553355ae6b5845a3c0b6abdcd3a3109a459788d89133badcaa52e"}]}