{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/marketplace/interfaces/IPosition.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface IPosition {\r\n    event PositionCreated(\r\n        address indexed position,\r\n        address indexed seller,\r\n        uint256 indexed tokenId,\r\n        uint256 price,\r\n        address tokenAddress,\r\n        address marketPlaceAddress,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PositionBought(\r\n        address indexed position,\r\n        address indexed seller,\r\n        uint256 indexed tokenId,\r\n        uint256 tokenAddress,\r\n        uint256 price,\r\n        address buyer,\r\n        uint256 mktFee,\r\n        uint256 sellerProfit,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function init(\r\n        address payable _seller,\r\n        uint256 _MPFee,\r\n        uint256 _price,\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        address payable _marketPlaceAddress\r\n    ) external returns (bool);\r\n\r\n    function isTemplateContract() external view returns (bool);\r\n\r\n    function buyPosition() external payable;\r\n}\r\n\r\n// File: contracts/marketplace/library/Wrapper721.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface I721Kitty {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function kittyIndexToApproved(uint256 tokenId) external view returns (address owner);\r\n    // mapping(uint256 => address) public kittyIndexToApproved;\r\n}\r\n\r\ninterface I721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n}\r\n\r\ninterface I721Meta {\r\n    function symbol() external view returns (string memory);\r\n}\r\nlibrary Wrapper721 {\r\n    function safeTransferFrom(address _token, address _from, address _to, uint256 _tokenId)\r\n        external\r\n    {\r\n        if (isIssuedToken(_token)) {\r\n            I721Kitty(_token).transferFrom(_from, _to, _tokenId);\r\n        } else {\r\n            I721(_token).safeTransferFrom(_from, _to, _tokenId);\r\n        }\r\n\r\n    }\r\n    function getApproved(address _token, uint256 _tokenId) external view returns (address) {\r\n        if (isIssuedToken(_token)) {\r\n            return I721Kitty(_token).kittyIndexToApproved(_tokenId);\r\n        } else {\r\n            return I721(_token).getApproved(_tokenId);\r\n        }\r\n    }\r\n    function ownerOf(address _token, uint256 _tokenId) public view returns (address owner) {\r\n        if (isIssuedToken(_token)) {\r\n            return I721Kitty(_token).ownerOf(_tokenId);\r\n        } else {\r\n            return I721(_token).ownerOf(_tokenId);\r\n        }\r\n    }\r\n    function isIssuedToken(address _token) private view returns (bool) {\r\n        return (keccak256(abi.encodePacked((I721Meta(_token).symbol()))) ==\r\n            keccak256(abi.encodePacked((\"CK\"))));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/marketplace/Position.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract Position is IPosition, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    address public token721;\r\n    bool private isTemplate;\r\n\r\n    uint256 public positionCreated;\r\n    uint256 public price;\r\n    uint256 public MPFee;\r\n    uint256 public positionFee;\r\n\r\n    address payable public seller;\r\n    address payable public marketPlaceAddress;\r\n    address public tokenAddress;\r\n    uint256 public tokenId;\r\n\r\n    uint256 constant ONE_HUNDRED = 100e18;\r\n\r\n    event PositionCreated(\r\n        address indexed position,\r\n        address indexed seller,\r\n        uint256 indexed tokenId,\r\n        uint256 price,\r\n        address tokenAddress,\r\n        address marketPlaceAddress,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PositionBought(\r\n        address indexed position,\r\n        address indexed seller,\r\n        uint256 indexed tokenId,\r\n        address tokenAddress,\r\n        uint256 price,\r\n        address buyer,\r\n        uint256 mktFee,\r\n        uint256 sellerProfit,\r\n        uint256 timestamp\r\n    );\r\n\r\n    modifier notTemplate() {\r\n        require(isTemplate == false, \"you cant call template contract\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        isTemplate = true;\r\n    }\r\n\r\n    function init(\r\n        address payable _seller,\r\n        uint256 _MPFee,\r\n        uint256 _price,\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        address payable _marketPlaceAddress\r\n    ) external notTemplate returns (bool) {\r\n        positionCreated = block.timestamp;\r\n\r\n        seller = _seller;\r\n        MPFee = _MPFee;\r\n        price = _price;\r\n        tokenAddress = _tokenAddress;\r\n        tokenId = _tokenId;\r\n\r\n        marketPlaceAddress = _marketPlaceAddress;\r\n\r\n        token721 = tokenAddress;\r\n\r\n        emit PositionCreated(\r\n            address(this),\r\n            seller,\r\n            tokenId,\r\n            price,\r\n            tokenAddress,\r\n            marketPlaceAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function isTemplateContract() external view returns (bool) {\r\n        return isTemplate;\r\n    }\r\n\r\n    function buyPosition() external payable nonReentrant notTemplate {\r\n        address approved = Wrapper721.getApproved(token721, tokenId);\r\n        require(approved == address(this), \"This contract is not approved to use this token\");\r\n        require(address(msg.sender).balance >= price, \"Buyer does not have enought money\");\r\n        require(msg.value >= price, \"The value sent is smaller than price\");\r\n        uint256 mktFee = price.mul(MPFee).div(ONE_HUNDRED);\r\n        uint256 sellerProfit = price.sub(mktFee);\r\n\r\n        seller.transfer(sellerProfit);\r\n\r\n        marketPlaceAddress.transfer(mktFee);\r\n\r\n        Wrapper721.safeTransferFrom(token721, seller, msg.sender, tokenId);\r\n\r\n        emit PositionBought(\r\n            address(this),\r\n            seller,\r\n            tokenId,\r\n            tokenAddress,\r\n            price,\r\n            msg.sender,\r\n            mktFee,\r\n            sellerProfit,\r\n            block.timestamp\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTemplateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPosition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token721\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positionCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_MPFee\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_marketPlaceAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketPlaceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"position\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"marketPlaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"position\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mktFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellerProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"position\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mktFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellerProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionBought\",\"type\":\"event\"}]","ContractName":"Position","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Wrapper721:82735c7bb56f5a8a6d975e8866048ad7be984f0b","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://09b1446312a603405bea4c6748a141a9d0dfc268be5c25c781eca6e1ae91e0bf"}]}