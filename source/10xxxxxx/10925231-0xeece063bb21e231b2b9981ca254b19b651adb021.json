{"status":"1","message":"OK","result":[{"SourceCode":"interface PermittedAddressesInterface {\r\n  function permittedAddresses(address _address) external view returns(bool);\r\n  function addressesTypes(address _address) external view returns(string memory);\r\n  function isMatchTypes(address _address, uint256 addressType) external view returns(bool);\r\n}\r\ninterface SmartFundERC20LightFactoryInterface {\r\n  function createSmartFundLight(\r\n    address _owner,\r\n    string memory _name,\r\n    uint256 _successFee,\r\n    address _exchangePortalAddress,\r\n    address _permittedAddresses,\r\n    address _coinAddress,\r\n    bool    _isRequireTradeVerification\r\n  )\r\n  external\r\n  returns(address);\r\n}\r\ninterface SmartFundETHLightFactoryInterface {\r\n  function createSmartFundLight(\r\n    address _owner,\r\n    string  memory _name,\r\n    uint256 _successFee,\r\n    address _exchangePortalAddress,\r\n    address _permittedAddresses,\r\n    bool    _isRequireTradeVerification\r\n  )\r\n  external\r\n  returns(address);\r\n}\r\ninterface SmartFundERC20FactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string memory _name,\r\n    uint256 _successFee,\r\n    address _exchangePortalAddress,\r\n    address _poolPortalAddress,\r\n    address _defiPortal,\r\n    address _permittedAddresses,\r\n    address _coinAddress,\r\n    bool    _isRequireTradeVerification\r\n  )\r\n  external\r\n  returns(address);\r\n}\r\ninterface SmartFundETHFactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string  memory _name,\r\n    uint256 _successFee,\r\n    address _exchangePortalAddress,\r\n    address _poolPortalAddress,\r\n    address _defiPortal,\r\n    address _permittedAddresses,\r\n    bool    _isRequireTradeVerification\r\n  )\r\n  external\r\n  returns(address);\r\n}\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/*\r\n* The SmartFundRegistry is used to manage the creation and permissions of SmartFund contracts\r\n*/\r\ncontract SmartFundRegistry is Ownable {\r\n  address[] public smartFunds;\r\n\r\n  // The Smart Contract which stores the addresses of all the authorized address\r\n  PermittedAddressesInterface public permittedAddresses;\r\n\r\n  // Addresses of portals\r\n  address public poolPortalAddress;\r\n  address public exchangePortalAddress;\r\n  address public defiPortalAddress;\r\n\r\n  // Default maximum success fee is 3000/30%\r\n  uint256 public maximumSuccessFee = 3000;\r\n\r\n  // Address of stable coin can be set in constructor and changed via function\r\n  address public stableCoinAddress;\r\n\r\n  // Address of CoTrader coin be set in constructor\r\n  address public COTCoinAddress;\r\n\r\n  // Factories\r\n  SmartFundETHFactoryInterface public smartFundETHFactory;\r\n  SmartFundERC20FactoryInterface public smartFundERC20Factory;\r\n  SmartFundETHLightFactoryInterface public smartFundETHLightFactory;\r\n  SmartFundERC20LightFactoryInterface public smartFundERC20LightFactory;\r\n\r\n  // Enum for detect fund type in create fund function\r\n  // NOTE: You can add a new type at the end, but do not change this order\r\n  enum FundType { ETH, USD, COT }\r\n\r\n  event SmartFundAdded(address indexed smartFundAddress, address indexed owner);\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _exchangePortalAddress        Address of the initial ExchangePortal contract\r\n  * @param _poolPortalAddress            Address of the initial PoolPortal contract\r\n  * @param _stableCoinAddress            Address of the stable coin\r\n  * @param _COTCoinAddress               Address of Cotrader coin\r\n  * @param _smartFundETHFactory          Address of smartFund ETH factory\r\n  * @param _smartFundERC20Factory        Address of smartFund USD factory\r\n  * @param _smartFundETHLightFactory     Address of smartFund ETH factory\r\n  * @param _smartFundERC20LightFactory   Address of smartFund USD factory\r\n  * @param _defiPortalAddress            Address of defiPortal contract\r\n  * @param _permittedAddresses           Address of permittedAddresses contract\r\n  */\r\n  constructor(\r\n    address _exchangePortalAddress,\r\n    address _poolPortalAddress,\r\n    address _stableCoinAddress,\r\n    address _COTCoinAddress,\r\n    address _smartFundETHFactory,\r\n    address _smartFundERC20Factory,\r\n    address _smartFundETHLightFactory,\r\n    address _smartFundERC20LightFactory,\r\n    address _defiPortalAddress,\r\n    address _permittedAddresses\r\n  ) public {\r\n    exchangePortalAddress = _exchangePortalAddress;\r\n    poolPortalAddress = _poolPortalAddress;\r\n    stableCoinAddress = _stableCoinAddress;\r\n    COTCoinAddress = _COTCoinAddress;\r\n    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\r\n    smartFundERC20Factory = SmartFundERC20FactoryInterface(_smartFundERC20Factory);\r\n    smartFundETHLightFactory = SmartFundETHLightFactoryInterface(_smartFundETHLightFactory);\r\n    smartFundERC20LightFactory = SmartFundERC20LightFactoryInterface(_smartFundERC20LightFactory);\r\n    defiPortalAddress = _defiPortalAddress;\r\n    permittedAddresses = PermittedAddressesInterface(_permittedAddresses);\r\n  }\r\n\r\n  /**\r\n  * @dev Creates a new Full SmartFund\r\n  *\r\n  * @param _name                        The name of the new fund\r\n  * @param _successFee                  The fund managers success fee\r\n  * @param _fundType                    Fund type enum number\r\n  * @param _isRequireTradeVerification  If true fund can buy only tokens,\r\n  *                                     which include in Merkle Three white list\r\n  */\r\n  function createSmartFund(\r\n    string memory _name,\r\n    uint256       _successFee,\r\n    uint256       _fundType,\r\n    bool          _isRequireTradeVerification\r\n  ) public {\r\n    // Require that the funds success fee be less than the maximum allowed amount\r\n    require(_successFee <= maximumSuccessFee);\r\n\r\n    address smartFund;\r\n\r\n    // ETH case\r\n    if(_fundType == uint256(FundType.ETH)){\r\n      // Create ETH Fund\r\n      smartFund = smartFundETHFactory.createSmartFund(\r\n        msg.sender,\r\n        _name,\r\n        _successFee, // manager and platform fee\r\n        exchangePortalAddress,\r\n        poolPortalAddress,\r\n        defiPortalAddress,\r\n        address(permittedAddresses),\r\n        _isRequireTradeVerification\r\n      );\r\n\r\n    }\r\n    // ERC20 case\r\n    else{\r\n      address coinAddress = getERC20AddressByFundType(_fundType);\r\n      // Create ERC20 based fund\r\n      smartFund = smartFundERC20Factory.createSmartFund(\r\n        msg.sender,\r\n        _name,\r\n        _successFee, // manager and platform fee\r\n        exchangePortalAddress,\r\n        poolPortalAddress,\r\n        defiPortalAddress,\r\n        address(permittedAddresses),\r\n        coinAddress,\r\n        _isRequireTradeVerification\r\n      );\r\n    }\r\n\r\n    smartFunds.push(smartFund);\r\n    emit SmartFundAdded(smartFund, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev Creates a new Light SmartFund\r\n  *\r\n  * @param _name                        The name of the new fund\r\n  * @param _successFee                  The fund managers success fee\r\n  * @param _fundType                    Fund type enum number\r\n  * @param _isRequireTradeVerification  If true fund can buy only tokens,\r\n  *                                     which include in Merkle Three white list\r\n  */\r\n  function createSmartFundLight(\r\n    string memory _name,\r\n    uint256       _successFee,\r\n    uint256       _fundType,\r\n    bool          _isRequireTradeVerification\r\n  ) public {\r\n    // Require that the funds success fee be less than the maximum allowed amount\r\n    require(_successFee <= maximumSuccessFee);\r\n\r\n    address smartFund;\r\n\r\n    // ETH case\r\n    if(_fundType == uint256(FundType.ETH)){\r\n      // Create ETH Fund\r\n      smartFund = smartFundETHLightFactory.createSmartFundLight(\r\n        msg.sender,\r\n        _name,\r\n        _successFee, // manager and platform fee\r\n        exchangePortalAddress,\r\n        address(permittedAddresses),\r\n        _isRequireTradeVerification\r\n      );\r\n\r\n    }\r\n    // ERC20 case\r\n    else{\r\n      address coinAddress = getERC20AddressByFundType(_fundType);\r\n      // Create ERC20 based fund\r\n      smartFund = smartFundERC20LightFactory.createSmartFundLight(\r\n        msg.sender,\r\n        _name,\r\n        _successFee, // manager and platform fee\r\n        exchangePortalAddress,\r\n        address(permittedAddresses),\r\n        coinAddress,\r\n        _isRequireTradeVerification\r\n      );\r\n    }\r\n\r\n    smartFunds.push(smartFund);\r\n    emit SmartFundAdded(smartFund, msg.sender);\r\n  }\r\n\r\n\r\n  function getERC20AddressByFundType(uint256 _fundType) private view returns(address coinAddress){\r\n    // Define coin address dependse of fund type\r\n    coinAddress = _fundType == uint256(FundType.USD)\r\n    ? stableCoinAddress\r\n    : COTCoinAddress;\r\n  }\r\n\r\n  function totalSmartFunds() public view returns (uint256) {\r\n    return smartFunds.length;\r\n  }\r\n\r\n  function getAllSmartFundAddresses() public view returns(address[] memory) {\r\n    address[] memory addresses = new address[](smartFunds.length);\r\n\r\n    for (uint i; i < smartFunds.length; i++) {\r\n      addresses[i] = address(smartFunds[i]);\r\n    }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can set a new default ExchangePortal address\r\n  *\r\n  * @param _newExchangePortalAddress    Address of the new exchange portal to be set\r\n  */\r\n  function setExchangePortalAddress(address _newExchangePortalAddress) external onlyOwner {\r\n    // Require that the new exchange portal is permitted by permittedAddresses\r\n    require(permittedAddresses.permittedAddresses(_newExchangePortalAddress));\r\n\r\n    exchangePortalAddress = _newExchangePortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can set a new default Portal Portal address\r\n  *\r\n  * @param _poolPortalAddress    Address of the new pool portal to be set\r\n  */\r\n  function setPoolPortalAddress(address _poolPortalAddress) external onlyOwner {\r\n    // Require that the new pool portal is permitted by permittedAddresses\r\n    require(permittedAddresses.permittedAddresses(_poolPortalAddress));\r\n\r\n    poolPortalAddress = _poolPortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the fund manager to connect to a new permitted defi portal\r\n  *\r\n  * @param _newDefiPortalAddress    The address of the new permitted defi portal to use\r\n  */\r\n  function setDefiPortal(address _newDefiPortalAddress) public onlyOwner {\r\n    // Require that the new defi portal is permitted by permittedAddresses\r\n    require(permittedAddresses.permittedAddresses(_newDefiPortalAddress));\r\n\r\n    defiPortalAddress = _newDefiPortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can set maximum success fee for all newly created SmartFunds\r\n  *\r\n  * @param _maximumSuccessFee    New maximum success fee\r\n  */\r\n  function setMaximumSuccessFee(uint256 _maximumSuccessFee) external onlyOwner {\r\n    maximumSuccessFee = _maximumSuccessFee;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can set new stableCoinAddress\r\n  *\r\n  * @param _stableCoinAddress    New stable address\r\n  */\r\n  function setStableCoinAddress(address _stableCoinAddress) external onlyOwner {\r\n    require(permittedAddresses.permittedAddresses(_stableCoinAddress));\r\n    stableCoinAddress = _stableCoinAddress;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Owner can set new smartFundETHFactory\r\n  *\r\n  * @param _smartFundETHFactory    address of ETH factory contract\r\n  */\r\n  function setNewSmartFundETHFactory(address _smartFundETHFactory) external onlyOwner {\r\n    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Owner can set new smartFundERC20Factory\r\n  *\r\n  * @param _smartFundERC20Factory    address of ERC20 factory contract\r\n  */\r\n  function setNewSmartFundERC20Factory(address _smartFundERC20Factory) external onlyOwner {\r\n    smartFundERC20Factory = SmartFundERC20FactoryInterface(_smartFundERC20Factory);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Owner can set new smartFundETHLightFactory\r\n  *\r\n  * @param _smartFundETHLightFactory    address of ETH factory contract\r\n  */\r\n  function setNewSmartFundETHLightFactory(address _smartFundETHLightFactory) external onlyOwner {\r\n      smartFundETHLightFactory = SmartFundETHLightFactoryInterface(_smartFundETHLightFactory);\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can set new smartFundERC20LightFactory\r\n  *\r\n  * @param _smartFundERC20LightFactory    address of ERC20 factory contract\r\n  */\r\n  function setNewSmartFundERC20LightFactory(address _smartFundERC20LightFactory) external onlyOwner {\r\n    smartFundERC20LightFactory = SmartFundERC20LightFactoryInterface(_smartFundERC20LightFactory);\r\n  }\r\n\r\n  /**\r\n  * @dev Allows withdarw tokens from this contract if someone will accidentally send tokens here\r\n  *\r\n  * @param _tokenAddress    Address of the token to be withdrawn\r\n  */\r\n  function withdrawTokens(address _tokenAddress) external onlyOwner {\r\n    IERC20 token = IERC20(_tokenAddress);\r\n    token.transfer(owner(), token.balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n  * @dev Allows withdarw ETH from this contract if someone will accidentally send tokens here\r\n  */\r\n  function withdrawEther() external onlyOwner {\r\n    payable(owner()).transfer(address(this).balance);\r\n  }\r\n\r\n  // Fallback payable function in order to receive ether when fund manager withdraws their cut\r\n  fallback() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangePortalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolPortalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_COTCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundETHFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundERC20Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundETHLightFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundERC20LightFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defiPortalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedAddresses\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartFundAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SmartFundAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COTCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_successFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isRequireTradeVerification\",\"type\":\"bool\"}],\"name\":\"createSmartFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_successFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isRequireTradeVerification\",\"type\":\"bool\"}],\"name\":\"createSmartFundLight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiPortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangePortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSmartFundAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumSuccessFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedAddresses\",\"outputs\":[{\"internalType\":\"contract PermittedAddressesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolPortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDefiPortalAddress\",\"type\":\"address\"}],\"name\":\"setDefiPortal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExchangePortalAddress\",\"type\":\"address\"}],\"name\":\"setExchangePortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumSuccessFee\",\"type\":\"uint256\"}],\"name\":\"setMaximumSuccessFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartFundERC20Factory\",\"type\":\"address\"}],\"name\":\"setNewSmartFundERC20Factory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartFundERC20LightFactory\",\"type\":\"address\"}],\"name\":\"setNewSmartFundERC20LightFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartFundETHFactory\",\"type\":\"address\"}],\"name\":\"setNewSmartFundETHFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartFundETHLightFactory\",\"type\":\"address\"}],\"name\":\"setNewSmartFundETHLightFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolPortalAddress\",\"type\":\"address\"}],\"name\":\"setPoolPortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"setStableCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundERC20Factory\",\"outputs\":[{\"internalType\":\"contract SmartFundERC20FactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundERC20LightFactory\",\"outputs\":[{\"internalType\":\"contract SmartFundERC20LightFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundETHFactory\",\"outputs\":[{\"internalType\":\"contract SmartFundETHFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundETHLightFactory\",\"outputs\":[{\"internalType\":\"contract SmartFundETHLightFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smartFunds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSmartFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartFundRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e3c06d526b38f67d7a897bba20906f36d2793a30000000000000000000000006f553184c04a4ad0b3551a4ff60fb73bb6e904080000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff80000000000000000000000003344573a8b164d9ed32a11a5a9c6326ddb3dc2980000000000000000000000006d85dd4672afad01a28bdfa8b4323be910999954000000000000000000000000666cae17452cf2112ef1479943099320afd16d470000000000000000000000002b4ba0a92ccc11e839d1928ae73b34e7aac2c040000000000000000000000000c8a2ba3e9ce03f78551d7de5706cc275d4d3130f0000000000000000000000009674ce5043606ecee025240b7ef78fe76c8c75a6","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3f731834ccbb07cf9551e15028cea21daa0a6d2f5cae5f852df9cc496e3ec999"}]}