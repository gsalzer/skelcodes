{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where there is an account\r\n * (owner) that can be granted exclusive access to specific functions.\r\n *\r\n * This module is used through inheritance by using the modifier `onlyOwner`.\r\n *\r\n * To change ownership, use a 2-part nominate-accept pattern.\r\n *\r\n * This contract is loosely based off of https://git.io/JenNF but additionally requires new owners\r\n * to accept ownership before the transition occurs.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _nominatedOwner;\r\n\r\n    event NewOwnerNominated(address indexed previousOwner, address indexed nominee);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current nominated owner.\r\n     */\r\n    function nominatedOwner() external view returns (address) {\r\n        return _nominatedOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() internal view {\r\n        require(_msgSender() == _owner, \"caller is not owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Nominates a new owner `newOwner`.\r\n     * Requires a follow-up `acceptOwnership`.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function nominateNewOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"new owner is 0 address\");\r\n        emit NewOwnerNominated(_owner, newOwner);\r\n        _nominatedOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership of the contract.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(_nominatedOwner == _msgSender(), \"unauthorized\");\r\n        emit OwnershipTransferred(_owner, _nominatedOwner);\r\n        _owner = _nominatedOwner;\r\n    }\r\n\r\n    /** Set `_owner` to the 0 address.\r\n     * Only do this to deliberately lock in the current permissions.\r\n     *\r\n     * THIS CANNOT BE UNDONE! Call this only if you know what you're doing and why you're doing it!\r\n     */\r\n    function renounceOwnership(string calldata declaration) external onlyOwner {\r\n        string memory requiredDeclaration = \"I hereby renounce ownership of this contract forever.\";\r\n        require(\r\n            keccak256(abi.encodePacked(declaration)) ==\r\n            keccak256(abi.encodePacked(requiredDeclaration)),\r\n            \"declaration incorrect\");\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Eternal Storage for the Reserve Token\r\n *\r\n * @dev Eternal Storage facilitates future upgrades.\r\n *\r\n * If Reserve chooses to release an upgraded contract for the Reserve in the future, Reserve will\r\n * have the option of reusing the deployed version of this data contract to simplify migration.\r\n *\r\n * The use of this contract does not imply that Reserve will choose to do a future upgrade, nor\r\n * that any future upgrades will necessarily re-use this storage. It merely provides option value.\r\n */\r\ncontract ReserveEternalStorage is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ===== auth =====\r\n\r\n    address public reserveAddress;\r\n\r\n    event ReserveAddressTransferred(\r\n        address indexed oldReserveAddress,\r\n        address indexed newReserveAddress\r\n    );\r\n\r\n    /// On construction, set auth fields.\r\n    constructor() public {\r\n        reserveAddress = _msgSender();\r\n        emit ReserveAddressTransferred(address(0), reserveAddress);\r\n    }\r\n\r\n    /// Only run modified function if sent by `reserveAddress`.\r\n    modifier onlyReserveAddress() {\r\n        require(_msgSender() == reserveAddress, \"onlyReserveAddress\");\r\n        _;\r\n    }\r\n\r\n    /// Set `reserveAddress`.\r\n    function updateReserveAddress(address newReserveAddress) external {\r\n        require(newReserveAddress != address(0), \"zero address\");\r\n        require(_msgSender() == reserveAddress || _msgSender() == owner(), \"not authorized\");\r\n        emit ReserveAddressTransferred(reserveAddress, newReserveAddress);\r\n        reserveAddress = newReserveAddress;\r\n    }\r\n\r\n\r\n\r\n    // ===== balance =====\r\n\r\n    mapping(address => uint256) public balance;\r\n\r\n    /// Add `value` to `balance[key]`, unless this causes integer overflow.\r\n    ///\r\n    /// @dev This is a slight divergence from the strict Eternal Storage pattern, but it reduces\r\n    /// the gas for the by-far most common token usage, it's a *very simple* divergence, and\r\n    /// `setBalance` is available anyway.\r\n    function addBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = balance[key].add(value);\r\n    }\r\n\r\n    /// Subtract `value` from `balance[key]`, unless this causes integer underflow.\r\n    function subBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = balance[key].sub(value);\r\n    }\r\n\r\n    /// Set `balance[key]` to `value`.\r\n    function setBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = value;\r\n    }\r\n\r\n\r\n\r\n    // ===== allowed =====\r\n\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    /// Set `to`'s allowance of `from`'s tokens to `value`.\r\n    function setAllowed(address from, address to, uint256 value) external onlyReserveAddress {\r\n        allowed[from][to] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * @title An interface representing a contract that calculates transaction fees\r\n */\r\n interface ITXFee {\r\n     function calculateFee(address from, address to, uint256 amount) external returns (uint256);\r\n }\r\n\r\n/**\r\n * @title The Reserve Token\r\n * @dev An ERC-20 token with minting, burning, pausing, and user freezing.\r\n * Based on OpenZeppelin's [implementation](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/41aa39afbc13f0585634061701c883fe512a5469/contracts/token/ERC20/ERC20.sol).\r\n *\r\n * Non-constant-sized data is held in ReserveEternalStorage, to facilitate potential future upgrades.\r\n */\r\ncontract Reserve is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ==== State ====\r\n\r\n\r\n    // Non-constant-sized data\r\n    ReserveEternalStorage internal trustedData;\r\n\r\n    // TX Fee helper contract\r\n    ITXFee public trustedTxFee;\r\n\r\n    // Relayer\r\n    address public trustedRelayer;\r\n\r\n    // Basic token data\r\n    uint256 public totalSupply;\r\n    uint256 public maxSupply;\r\n\r\n    // Paused data\r\n    bool public paused;\r\n\r\n    // Auth roles\r\n    address public minter;\r\n    address public pauser;\r\n    address public feeRecipient;\r\n\r\n\r\n    // ==== Events, Constants, and Constructor ====\r\n\r\n\r\n    // Auth role change events\r\n    event MinterChanged(address indexed newMinter);\r\n    event PauserChanged(address indexed newPauser);\r\n    event FeeRecipientChanged(address indexed newFeeRecipient);\r\n    event MaxSupplyChanged(uint256 indexed newMaxSupply);\r\n    event EternalStorageTransferred(address indexed newReserveAddress);\r\n    event TxFeeHelperChanged(address indexed newTxFeeHelper);\r\n    event TrustedRelayerChanged(address indexed newTrustedRelayer);\r\n\r\n    // Pause events\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    // Basic information as constants\r\n    string public constant name = \"Reserve\";\r\n    string public constant symbol = \"RSV\";\r\n    string public constant version = \"2.1\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// Initialize critical fields.\r\n    constructor() public {\r\n        pauser = msg.sender;\r\n        feeRecipient = msg.sender;\r\n        // minter defaults to the zero address.\r\n\r\n        maxSupply = 2 ** 256 - 1;\r\n        paused = true;\r\n\r\n        trustedTxFee = ITXFee(address(0));\r\n        trustedRelayer = address(0);\r\n        trustedData = ReserveEternalStorage(address(0));\r\n    }\r\n\r\n    /// Accessor for eternal storage contract address.\r\n    function getEternalStorageAddress() external view returns(address) {\r\n        return address(trustedData);\r\n    }\r\n\r\n\r\n    // ==== Admin functions ====\r\n\r\n\r\n    /// Modifies a function to only run if sent by `role`.\r\n    modifier only(address role) {\r\n        require(msg.sender == role, \"unauthorized: not role holder\");\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to only run if sent by `role` or the contract's `owner`.\r\n    modifier onlyOwnerOr(address role) {\r\n        require(msg.sender == owner() || msg.sender == role, \"unauthorized: not owner or role\");\r\n        _;\r\n    }\r\n\r\n    /// Change who holds the `minter` role.\r\n    function changeMinter(address newMinter) external onlyOwnerOr(minter) {\r\n        minter = newMinter;\r\n        emit MinterChanged(newMinter);\r\n    }\r\n\r\n    /// Change who holds the `pauser` role.\r\n    function changePauser(address newPauser) external onlyOwnerOr(pauser) {\r\n        pauser = newPauser;\r\n        emit PauserChanged(newPauser);\r\n    }\r\n\r\n    function changeFeeRecipient(address newFeeRecipient) external onlyOwnerOr(feeRecipient) {\r\n        feeRecipient = newFeeRecipient;\r\n        emit FeeRecipientChanged(newFeeRecipient);\r\n    }\r\n\r\n    /// Make a different address the EternalStorage contract's reserveAddress.\r\n    /// This will break this contract, so only do it if you're\r\n    /// abandoning this contract, e.g., for an upgrade.\r\n    function transferEternalStorage(address newReserveAddress) external onlyOwner isPaused {\r\n        require(newReserveAddress != address(0), \"zero address\");\r\n        emit EternalStorageTransferred(newReserveAddress);\r\n        trustedData.updateReserveAddress(newReserveAddress);\r\n    }\r\n\r\n    /// Change the contract that is able to do metatransactions.\r\n    function changeRelayer(address newTrustedRelayer) external onlyOwner {\r\n        trustedRelayer = newTrustedRelayer;\r\n        emit TrustedRelayerChanged(newTrustedRelayer);\r\n    }\r\n\r\n    /// Change the contract that helps with transaction fee calculation.\r\n    function changeTxFeeHelper(address newTrustedTxFee) external onlyOwner {\r\n        trustedTxFee = ITXFee(newTrustedTxFee);\r\n        emit TxFeeHelperChanged(newTrustedTxFee);\r\n    }\r\n\r\n    /// Change the maximum supply allowed.\r\n    function changeMaxSupply(uint256 newMaxSupply) external onlyOwner {\r\n        maxSupply = newMaxSupply;\r\n        emit MaxSupplyChanged(newMaxSupply);\r\n    }\r\n\r\n    /// Pause the contract.\r\n    function pause() external only(pauser) {\r\n        paused = true;\r\n        emit Paused(pauser);\r\n    }\r\n\r\n    /// Unpause the contract.\r\n    function unpause() external only(pauser) {\r\n        paused = false;\r\n        emit Unpaused(pauser);\r\n    }\r\n\r\n    /// Modifies a function to run only when the contract is paused.\r\n    modifier isPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to run only when the contract is not paused.\r\n    modifier notPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    // ==== Token transfers, allowances, minting, and burning ====\r\n\r\n\r\n    /// @return how many attoRSV are held by `holder`.\r\n    function balanceOf(address holder) external view returns (uint256) {\r\n        return trustedData.balance(holder);\r\n    }\r\n\r\n    /// @return how many attoRSV `holder` has allowed `spender` to control.\r\n    function allowance(address holder, address spender) external view returns (uint256) {\r\n        return trustedData.allowed(holder, spender);\r\n    }\r\n\r\n    /// Transfer `value` attoRSV from `msg.sender` to `to`.\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Approve `spender` to spend `value` attotokens on behalf of `msg.sender`.\r\n     *\r\n     * Beware that changing a nonzero allowance with this method brings the risk that\r\n     * someone may use both the old and the new allowance by unfortunate transaction ordering. One\r\n     * way to mitigate this risk is to first reduce the spender's allowance\r\n     * to 0, and then set the desired value afterwards, per\r\n     * [this ERC-20 issue](https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729).\r\n     *\r\n     * A simpler workaround is to use `increaseAllowance` or `decreaseAllowance`, below.\r\n     *\r\n     * @param spender address The address which will spend the funds.\r\n     * @param value uint256 How many attotokens to allow `spender` to spend.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// Transfer approved tokens from one address to another.\r\n    /// @param from address The address to send tokens from.\r\n    /// @param to address The address to send tokens to.\r\n    /// @param value uint256 The number of attotokens to send.\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, trustedData.allowed(from, msg.sender).sub(value));\r\n        return true;\r\n    }\r\n\r\n    /// Increase `spender`'s allowance of the sender's tokens.\r\n    /// @dev From MonolithDAO Token.sol\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param addedValue How many attotokens to increase the allowance by.\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, trustedData.allowed(msg.sender, spender).add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /// Decrease `spender`'s allowance of the sender's tokens.\r\n    /// @dev From MonolithDAO Token.sol\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param subtractedValue How many attotokens to decrease the allowance by.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            trustedData.allowed(msg.sender, spender).sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// Mint `value` new attotokens to `account`.\r\n    function mint(address account, uint256 value)\r\n        external\r\n        notPaused\r\n        only(minter)\r\n    {\r\n        require(account != address(0), \"can't mint to address zero\");\r\n\r\n        totalSupply = totalSupply.add(value);\r\n        require(totalSupply < maxSupply, \"max supply exceeded\");\r\n        trustedData.addBalance(account, value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /// Burn `value` attotokens from `account`, if sender has that much allowance from `account`.\r\n    function burnFrom(address account, uint256 value)\r\n        external\r\n        notPaused\r\n        only(minter)\r\n    {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, trustedData.allowed(account, msg.sender).sub(value));\r\n    }\r\n\r\n    // ==== Relay functions === //\r\n    \r\n    /// Transfer `value` attotokens from `from` to `to`.\r\n    /// Callable only by the relay contract.\r\n    function relayTransfer(address from, address to, uint256 value) \r\n        external \r\n        notPaused\r\n        only(trustedRelayer)\r\n        returns (bool)\r\n    {\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /// Approve `value` attotokens to be spent by `spender` from `holder`.\r\n    /// Callable only by the relay contract.\r\n    function relayApprove(address holder, address spender, uint256 value) \r\n        external \r\n        notPaused\r\n        only(trustedRelayer)\r\n        returns (bool)\r\n    {\r\n        _approve(holder, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// `spender` transfers `value` attotokens from `holder` to `to`.\r\n    /// Requires allowance.\r\n    /// Callable only by the relay contract.\r\n    function relayTransferFrom(address holder, address spender, address to, uint256 value) \r\n        external \r\n        notPaused\r\n        only(trustedRelayer)\r\n        returns (bool)\r\n    {\r\n        _transfer(holder, to, value);\r\n        _approve(holder, spender, trustedData.allowed(holder, spender).sub(value));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer of `value` attotokens from `from` to `to`.\r\n    /// Internal; doesn't check permissions.\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \"can't transfer to address zero\");\r\n        trustedData.subBalance(from, value);\r\n        uint256 fee = 0;\r\n\r\n        if (address(trustedTxFee) != address(0)) {\r\n            fee = trustedTxFee.calculateFee(from, to, value);\r\n            require(fee <= value, \"transaction fee out of bounds\");\r\n\r\n            trustedData.addBalance(feeRecipient, fee);\r\n            emit Transfer(from, feeRecipient, fee);\r\n        }\r\n\r\n        trustedData.addBalance(to, value.sub(fee));\r\n        emit Transfer(from, to, value.sub(fee));\r\n    }\r\n\r\n    /// @dev Burn `value` attotokens from `account`.\r\n    /// Internal; doesn't check permissions.\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"can't burn from address zero\");\r\n\r\n        totalSupply = totalSupply.sub(value);\r\n        trustedData.subBalance(account, value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /// @dev Set `spender`'s allowance on `holder`'s tokens to `value` attotokens.\r\n    /// Internal; doesn't check permissions.\r\n    function _approve(address holder, address spender, uint256 value) internal {\r\n        require(spender != address(0), \"spender cannot be address zero\");\r\n        require(holder != address(0), \"holder cannot be address zero\");\r\n\r\n        trustedData.setAllowed(holder, spender, value);\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n// ===========================  Upgradeability   =====================================\r\n\r\n    /// Accept upgrade from previous RSV instance. Can only be called once. \r\n    function acceptUpgrade(address previousImplementation) external onlyOwner {\r\n        require(address(trustedData) == address(0), \"can only be run once\");\r\n        Reserve previous = Reserve(previousImplementation);\r\n        trustedData = ReserveEternalStorage(previous.getEternalStorageAddress());\r\n\r\n        // Copy values from old contract\r\n        totalSupply = previous.totalSupply();\r\n        maxSupply = previous.maxSupply();\r\n        emit MaxSupplyChanged(maxSupply);\r\n        \r\n        // Unpause.\r\n        paused = false;\r\n        emit Unpaused(pauser);\r\n\r\n        previous.acceptOwnership();\r\n\r\n        // Take control of Eternal Storage.\r\n        previous.changePauser(address(this));\r\n        previous.pause();\r\n        previous.transferEternalStorage(address(this));\r\n\r\n        // Burn the bridge behind us.\r\n        previous.changeMinter(address(0));\r\n        previous.changePauser(address(0));\r\n        previous.renounceOwnership(\"I hereby renounce ownership of this contract forever.\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"relayTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"changeMaxSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTrustedRelayer\",\"type\":\"address\"}],\"name\":\"changeRelayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"declaration\",\"type\":\"string\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"relayTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedRelayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReserveAddress\",\"type\":\"address\"}],\"name\":\"transferEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTrustedTxFee\",\"type\":\"address\"}],\"name\":\"changeTxFeeHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedTxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"previousImplementation\",\"type\":\"address\"}],\"name\":\"acceptUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"relayApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEternalStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newReserveAddress\",\"type\":\"address\"}],\"name\":\"EternalStorageTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTxFeeHelper\",\"type\":\"address\"}],\"name\":\"TxFeeHelperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTrustedRelayer\",\"type\":\"address\"}],\"name\":\"TrustedRelayerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"NewOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Reserve","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ff21448e107a290591da2fb4a5c38e03f84252d226792d92dae425cf027694d9"}]}