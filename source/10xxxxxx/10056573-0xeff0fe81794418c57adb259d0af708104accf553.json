{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface Minereum {\r\n  function Payment (  ) payable external;  \r\n}\r\n\r\ncontract MinereumLuckyDraw\r\n{\r\n\tMinereum public mne;\r\n\tuint public stakeHoldersfee = 50;\r\n\tuint public percentWin = 80;\r\n\tuint public mnefee = 0;\r\n\tuint public ethfee = 15000000000000000;\r\n\tuint public totalSentToStakeHolders = 0;\r\n\tuint public totalPaidOut = 0;\r\n\tuint public ticketsSold = 0;\r\n\tuint public ticketsPlayed = 0;\r\n\taddress public owner = 0x0000000000000000000000000000000000000000;\t\r\n\tuint public maxNumber = 10001;\r\n\tuint public systemNumber = 3223;\r\n\t\r\n\tuint public blockInterval = 3;\r\n\tuint public maxBlock = 60;\r\n\t\r\n\t//winners from past contracts\r\n\tuint public winnersCount = 0;\r\n\tuint public winnersEthCount = 0;\r\n\t\r\n\taddress[] public winners;\r\n\tuint[] public winnersTickets;\r\n\tuint[] public winnersETH;\r\n\tuint[] public winnersTimestamp;\r\n\t\r\n\tmapping (address => uint256) public playerBlock;\r\n\tmapping (address => uint256) public playerTickets;\r\n\t\r\n\tevent Numbers(address indexed from, uint[] n, string m);\r\n\t\r\n\tconstructor() public\r\n\t{\r\n\t\tmne = Minereum(0x426CA1eA2406c07d75Db9585F22781c096e3d0E0);\r\n\t\towner = msg.sender;\r\n\t\t//data from old contract\r\n\t\tticketsPlayed = 10;\r\n\t\tticketsSold = 13;\r\n\t}\r\n\t\r\n\treceive() external payable { }\r\n\t\r\n\tfunction LuckyDraw() public\r\n    {\r\n        require(msg.sender == tx.origin);\r\n\t\t\r\n\t\tif (block.number >= playerBlock[msg.sender] + 256)\r\n\t\t{\r\n\t\t\tuint[] memory empty = new uint[](0);\t\r\n\t\t\temit Numbers(address(this), empty, \"Your tickets expired or are invalid. Try Again.\");\r\n\t\t\tplayerBlock[msg.sender] = 0;\r\n\t\t\tplayerTickets[msg.sender] = 0;\t\t\t\r\n\t\t}\t\t\r\n\t\telse if (block.number > playerBlock[msg.sender] + blockInterval)\r\n\t\t{\r\n\t\t\tbool win = false;\r\n\r\n\t\t\tuint[] memory numbers = new uint[](playerTickets[msg.sender]);\t\t\r\n\t\t\t\r\n\t\t\tuint i = 0;\r\n\t\t\twhile (i < playerTickets[msg.sender])\r\n\t\t\t{\r\n\t\t\t\tnumbers[i] = uint256(uint256(keccak256(abi.encodePacked(blockhash(playerBlock[msg.sender] + 2), i)))%maxNumber);\r\n\t\t\t\tif (numbers[i] == systemNumber)\r\n\t\t\t\t\twin = true;\r\n\t\t\t\ti++;\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tticketsPlayed += playerTickets[msg.sender];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (win)\r\n\t\t\t{\r\n\t\t\t\taddress payable add = payable(msg.sender);\r\n\t\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\t\tuint winAmount = contractBalance * percentWin / 100;\r\n\t\t\t\tuint totalToPay = winAmount;\r\n\t\t\t\tif (!add.send(totalToPay)) revert('Error While Executing Payment.');\r\n\t\t\t\ttotalPaidOut += totalToPay;\r\n\t\t\t\t\r\n\t\t\t\twinnersCount++;\r\n\t\t\t\twinnersEthCount += totalToPay;\r\n\t\t\t\temit Numbers(address(this), numbers, \"YOU WON!\");\r\n\t\t\t\t\r\n\t\t\t\twinners.push(msg.sender);\r\n\t\t\t\twinnersTickets.push(playerTickets[msg.sender]);\r\n\t\t\t\twinnersETH.push(totalToPay);\r\n\t\t\t\twinnersTimestamp.push(block.timestamp);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\temit Numbers(address(this), numbers, \"Your numbers don't match the System Number! Try Again.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tplayerBlock[msg.sender] = 0;\r\n\t\t\tplayerTickets[msg.sender] = 0;\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert('Players must wait 3 blocks');\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)\r\n    {\r\n\t\trequire(msg.sender == address(mne));\r\n\t\trequire(_sender == tx.origin);\r\n\t\t\r\n\t\tif (_max[0] == 0) revert('value is 0');\r\n\t\t\r\n\t\tif (playerBlock[_sender] == 0)\r\n\t\t{\t\r\n\t\t\tuint valueStakeHolder = msg.value * stakeHoldersfee / 100;\t\t\t\t\t\r\n\t\t\tticketsSold += _max[0];\t\t\t\r\n\t\t\tuint totalEthfee = ethfee * _max[0];\r\n\t\t\tuint totalMneFee = mnefee * _max[0];\r\n\t\t\t\r\n\t\t\tplayerBlock[_sender] = block.number;\r\n\t\t\tplayerTickets[_sender] = _max[0];\t\t\t\r\n\t\t\t\r\n\t\t\tif (msg.value < totalEthfee) revert('Not enough ETH.');\r\n\t\t\tmne.Payment.value(valueStakeHolder)();\r\n\t\t\ttotalSentToStakeHolders += valueStakeHolder;\r\n\t\t\treturn totalMneFee;\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\trevert('You must play the tickets first');\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction transferFundsOut() public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\taddress payable add = payable(msg.sender);\r\n\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\tif (!add.send(contractBalance)) revert('Error While Executing Payment.');\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee, uint _blockInterval) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tstakeHoldersfee = _stakeHoldersfee;\r\n\t\t\tmnefee = _mnefee;\r\n\t\t\tethfee = _ethfee;\r\n\t\t\tblockInterval = _blockInterval;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateSystemNumber(uint _systemNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tsystemNumber = _systemNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateMaxNumber(uint _maxNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmaxNumber = _maxNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updatePercentWin(uint _percentWin) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tpercentWin = _percentWin;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tfunction updateMNEContract(address _mneAddress) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmne = Minereum(_mneAddress);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction WinnersLength() public view returns (uint256) { return winners.length; }\t\r\n\tfunction GetPlayerBlock(address _address) public view returns (uint256) { return playerBlock[_address]; }\r\n\tfunction GetPlayerTickets(address _address) public view returns (uint256) { return playerTickets[_address]; }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"n\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"}],\"name\":\"Numbers\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_max\",\"type\":\"uint256[]\"}],\"name\":\"BuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GetPlayerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GetPlayerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LuckyDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WinnersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mne\",\"outputs\":[{\"internalType\":\"contract Minereum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeHoldersfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSentToStakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeHoldersfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mnefee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockInterval\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mneAddress\",\"type\":\"address\"}],\"name\":\"updateMNEContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentWin\",\"type\":\"uint256\"}],\"name\":\"updatePercentWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_systemNumber\",\"type\":\"uint256\"}],\"name\":\"updateSystemNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersEthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MinereumLuckyDraw","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06f9ea954398de539dd0de16399d5fd9a6e14e00b084ab653e8d8857c4764ed2"}]}