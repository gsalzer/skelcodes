{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary AuctionLib {\r\n\r\n  using Address for address payable;\r\n\r\n  enum Result {\r\n    UNSET,\r\n    MISS,\r\n    HIT\r\n  }\r\n\r\n  struct Bid {\r\n    address payable bidder;\r\n    uint amount;\r\n    uint16[2] move;\r\n  }\r\n\r\n  struct Data {\r\n    Bid leadingBid;\r\n    Result result;\r\n\r\n    // Start the auction at a later point in time\r\n    uint256 startTime;\r\n    // How long the auction runs after the first bid\r\n    uint256 duration;\r\n    // When the auction ends\r\n    uint256 endTime;\r\n  }\r\n\r\n  function placeBid(\r\n    Data storage data,\r\n    uint16[2] memory move\r\n  ) public returns(uint256){\r\n    // Validate auction\r\n    require(hasStarted(data), \"Auction has not started\");\r\n    require(!hasEnded(data), \"Auction has ended\");\r\n\r\n    // Validate input\r\n    require(msg.value > data.leadingBid.amount, \"Bid must be greater than current bid\");\r\n\r\n    Bid memory previousBid = data.leadingBid;\r\n\r\n    data.leadingBid = Bid(tx.origin, msg.value, move);\r\n\r\n    // First bid, auction is started and will end after duration from now\r\n    if (data.endTime == 0) {\r\n      data.endTime = now + data.duration;\r\n    }\r\n\r\n    // Transfer the bid back to the previous bidder\r\n    if (previousBid.bidder != address(0)) {\r\n      previousBid.bidder.sendValue(previousBid.amount);\r\n    }\r\n\r\n    return data.endTime;\r\n  }\r\n\r\n  function setResult(Data storage data, bool hit) public {\r\n    require(hasEnded(data), \"Auction has not yet ended\");\r\n    require(data.result == Result.UNSET, \"Auction result already set\");\r\n    data.result = hit ? Result.HIT : Result.MISS;\r\n  }\r\n\r\n  /* End the auction immediately,\r\n     this is used when the other team wins to stop it instantly,\r\n     return the funds to the leading bidder\r\n   */\r\n  function cancel(Data storage data) public {\r\n    if (!hasEnded(data)) {\r\n      data.endTime = now - 1;\r\n    }\r\n\r\n    if (data.leadingBid.bidder != address(0)) {\r\n      data.leadingBid.bidder.sendValue(data.leadingBid.amount);\r\n\r\n      data.leadingBid = Bid(address(0), 0, [uint16(0), uint16(0)]);\r\n    }\r\n  }\r\n\r\n  function hasStarted(Data storage data) public view returns(bool) {\r\n    return now >= data.startTime;\r\n  }\r\n\r\n  function hasEnded(Data storage data) public view returns(bool) {\r\n    return data.endTime != 0 && now > data.endTime;\r\n  }\r\n}","ABI":"[]","ContractName":"AuctionLib","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://373ada48f3a556b2437395585f29361dcd0862e93ffafc5e14128d766a15c0fd"}]}