{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ExtendedShrimp {\r\n  function sendFunds(address user,uint hexAmount) external returns (uint256);\r\n  function signalHatch(address user,uint shrimpAmount) external; //to allow the safe use of shrimp as divs, with an effective snapshot of all shrimp counts.\r\n}\r\n\r\n\r\ncontract ShrimpFarmer is IERC20{\r\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    IERC20 public hexToken;\r\n    ExtendedShrimp public extendedContract;\r\n    uint256 public extendedContractSetAt;\r\n    uint256 public extendedContractTimeToGoLive=1 days;\r\n    address public contractCreator;\r\n    address public feeshare2;\r\n    address public feeshare3;\r\n    address public feeshare4;\r\n    address public feeshare5;\r\n    mapping (address => uint256) public hatcheryShrimp;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n\r\n    uint256 public marketEggs;\r\n\r\n    //ERC20 constants\r\n    string public constant name = \"HEXSHRIMP\";\r\n    string public constant symbol = \"HEXSHRIMP\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    //for view only\r\n    mapping(address => uint) public referralCount;\r\n    mapping(address => uint) public eggsFromReferral;\r\n    mapping(address => bytes32) public refName;\r\n    mapping(bytes32 => address) public addressByRefName;\r\n\r\n    event Referral(address from,address to,uint eggsSent);\r\n    event Hatch(address from,uint newShrimp);\r\n    event Buy(address from,uint hexSpent,uint eggsBought);\r\n    event Sell(address from,uint eggsSold,uint hexWithdrawn);\r\n    function ShrimpFarmer(address token,address fs2,address fs3,address fs4,address fs5) public{\r\n        contractCreator=msg.sender;\r\n        feeshare2=fs2;\r\n        feeshare3=fs3;\r\n        feeshare4=fs4;\r\n        feeshare5=fs5;\r\n        hexToken=IERC20(token);\r\n    }\r\n    function hatchEggs(address ref) public{\r\n        require(initialized);\r\n        if(getExtendedContract() != address(0)){\r\n          extendedContract.signalHatch(msg.sender,hatcheryShrimp[msg.sender]);\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n            referralCount[ref]+=1;\r\n        }\r\n\r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\r\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n\r\n        //send referral eggs\r\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,20));\r\n        if(referrals[msg.sender]!=0){\r\n          eggsFromReferral[referrals[msg.sender]]+=SafeMath.div(eggsUsed,20);\r\n          emit Referral(msg.sender,referrals[msg.sender],SafeMath.div(eggsUsed,20));\r\n        }\r\n        //if(ref!=msg.sender){\r\n        //  claimedEggs[ref]=SafeMath.add(claimedEggs[ref],SafeMath.div(eggsUsed,20));//divided by 20 is 5%\r\n        //}\r\n\r\n        //boost market to nerf shrimp hoarding\r\n        //re-enabled with lower amount.\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,20));\r\n\r\n        emit Hatch(msg.sender,newShrimp);\r\n    }\r\n    function payoutFee(uint fee) private{\r\n      hexToken.transfer(contractCreator,SafeMath.div(SafeMath.mul(fee,30),100));\r\n      hexToken.transfer(feeshare2,SafeMath.div(SafeMath.mul(fee,20),100));\r\n      hexToken.transfer(feeshare3,SafeMath.div(SafeMath.mul(fee,20),100));\r\n      hexToken.transfer(feeshare4,SafeMath.div(SafeMath.mul(fee,15),100));\r\n      hexToken.transfer(feeshare5,SafeMath.div(SafeMath.mul(fee,15),100));\r\n    }\r\n    function sellEggs() public{\r\n        require(initialized);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        //contractCreator.transfer(fee);\r\n        payoutFee(fee);\r\n        hexToken.transfer(msg.sender,SafeMath.sub(eggValue,fee));\r\n\r\n        emit Sell(msg.sender,hasEggs,SafeMath.sub(eggValue,fee));\r\n    }\r\n    function buyEggs(uint hexIn1) public{\r\n        require(initialized);\r\n        uint hexIn;\r\n\r\n        //transfer hex from user, must have allowance already set\r\n        hexToken.transferFrom(msg.sender,address(this),hexIn1);\r\n\r\n        if(getExtendedContract() != address(0)){\r\n          sendToExtendedShrimp(getExtendedFee(hexIn1));\r\n          hexIn=SafeMath.sub(hexIn1,getExtendedFee(hexIn1));\r\n        }\r\n        else{\r\n          hexIn=hexIn1;\r\n        }\r\n\r\n        uint256 eggsBought=calculateEggBuy(hexIn,SafeMath.sub(hexToken.balanceOf(address(this)),hexIn));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n\r\n        payoutFee(devFee(hexIn));\r\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n\r\n        emit Buy(msg.sender,hexIn,eggsBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs,hexToken.balanceOf(address(this)));\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,hexToken.balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function seedMarket(uint256 eggs,uint256 hexIn) public{\r\n        require(msg.sender==contractCreator);\r\n        require(marketEggs==0);\r\n        hexToken.transferFrom(msg.sender,address(this),hexIn);\r\n        initialized=true;\r\n        marketEggs=eggs;\r\n    }\r\n    function getExtendedFee(uint hexAmount) public pure returns(uint256){\r\n      return SafeMath.div(SafeMath.mul(hexAmount,10),100);\r\n    }\r\n    function sendToExtendedShrimp(uint hexAmount) private{\r\n      hexToken.transfer(address(extendedContract),hexAmount);\r\n      extendedContract.sendFunds(msg.sender,hexAmount);\r\n    }\r\n    /*\r\n      The contract upgrade function\r\n    */\r\n    function setExtendedShrimp(address extended) public{\r\n      require(msg.sender==contractCreator);\r\n      extendedContract=ExtendedShrimp(extended);\r\n      extendedContractSetAt=now;\r\n    }\r\n    /*\r\n      Ensures that the upgraded contract only goes live after a buffer of time has passed after it was set. Users may examine the code of the contract in the meantime.\r\n    */\r\n    function getExtendedContract() public view returns(ExtendedShrimp){\r\n      if(SafeMath.sub(now,extendedContractSetAt)>extendedContractTimeToGoLive){\r\n        return extendedContract;\r\n      }\r\n      else{\r\n        return ExtendedShrimp(address(0));\r\n      }\r\n    }\r\n    function setRefName(bytes32 s) public{\r\n      require(addressByRefName[s]==0);\r\n      addressByRefName[s]=msg.sender;\r\n      refName[msg.sender]=s;\r\n    }\r\n    /* disabled\r\n    function getFreeShrimp() public{\r\n        require(initialized);\r\n        require(hatcheryShrimp[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\r\n    }\r\n    */\r\n    function getBalance() public view returns(uint256){\r\n        return hexToken.balanceOf(address(this));\r\n    }\r\n    function getMyShrimp() public view returns(uint256){\r\n        return hatcheryShrimp[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n/*\r\n  Making this a token to take advantage of metrics collection for shrimp balances. Shrimp cannot be transferred.\r\n*/\r\n    function totalSupply() external view returns (uint256){\r\n      return 0;\r\n    }\r\n    function balanceOf(address account) external view returns (uint256){\r\n      return hatcheryShrimp[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) external returns (bool){\r\n      revert();\r\n    }\r\n    function allowance(address owner, address spender) external view returns (uint256){\r\n      return 0;\r\n    }\r\n    function approve(address spender, uint256 amount) external returns (bool){\r\n      revert();\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool){\r\n      revert();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"extendedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendedContractSetAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeshare2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"extended\",\"type\":\"address\"}],\"name\":\"setExtendedShrimp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"},{\"name\":\"hexIn\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hexAmount\",\"type\":\"uint256\"}],\"name\":\"getExtendedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressByRefName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eggsFromReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeshare3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hexToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeshare4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hexIn1\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExtendedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setRefName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendedContractTimeToGoLive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeshare5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"fs2\",\"type\":\"address\"},{\"name\":\"fs3\",\"type\":\"address\"},{\"name\":\"fs4\",\"type\":\"address\"},{\"name\":\"fs5\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggsSent\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newShrimp\",\"type\":\"uint256\"}],\"name\":\"Hatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hexSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eggsBought\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggsSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ShrimpFarmer","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb390000000000000000000000003df3766e64c2c85ce1baa858d2a14f96916d5087000000000000000000000000e7f53ce9421670ac2f11c5035e6f6f13d9829aa6000000000000000000000000776aa49b2910b5062b1c230039507d6cfa754b0e0000000000000000000000008cc62c4dcf129188ce4b43103eaefc0d6b71af6d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8cf29e510dbf0e146bf3e8e037c03554e147c295dc5cf299120e275d3b9ec35e"}]}