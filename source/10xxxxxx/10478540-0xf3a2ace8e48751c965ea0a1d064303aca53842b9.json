{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"HEX.sol\":{\"content\":\"\\r\\npragma solidity 0.6.4;\\r\\n\\r\\ninterface HEX {\\r\\n   /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n   function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\\r\\n   function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\\r\\n   function stakeCount(address stakerAddr) external view returns (uint256);\\r\\n   function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\\r\\n   function currentDay() external view returns (uint256);\\r\\n   function dailyDataRange(uint256 beginDay, uint256 endDay) external view returns (uint256[] memory);\\r\\n   function globalInfo() external view returns (uint256[13] memory);\\r\\n\\r\\n}\\r\\n\"},\"HEXMONEYv1_1.sol\":{\"content\":\"//HEXMONEY.sol\\r\\n//\\r\\n//\\r\\n\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./HEX.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n//Uniswap v2 interface\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n  function symbol() external pure returns (string memory);\\r\\n  function decimals() external pure returns (uint8);\\r\\n  function totalSupply() external view returns (uint);\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n      address indexed sender,\\r\\n      uint amount0In,\\r\\n      uint amount1In,\\r\\n      uint amount0Out,\\r\\n      uint amount1Out,\\r\\n      address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n  function skim(address to) external;\\r\\n  function sync() external;\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n    //when a user freezes tokens\\r\\n    event TokenFreeze(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    //when a user unfreezes tokens\\r\\n    event TokenUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n    \\r\\n    //when a user freezes freely minted tokens\\r\\n    event FreeMintFreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        uint indexed dapp //0 for ref, increment per external dapp\\r\\n    );\\r\\n\\r\\n    //when a user unfreezes freely minted tokens\\r\\n    event FreeMintUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n    \\r\\n    //when a user transforms HEX to HXY\\r\\n    event Transform (\\r\\n        uint hexAmt,\\r\\n        uint hxyAmt,\\r\\n        address indexed transformer\\r\\n    );\\r\\n\\r\\n    //when founder tokens are frozen\\r\\n    event FounderLock (\\r\\n        uint hxyAmt,\\r\\n        uint timestamp\\r\\n    );\\r\\n\\r\\n    //when founder tokens are unfrozen\\r\\n    event FounderUnlock (\\r\\n        uint hxyAmt,\\r\\n        uint timestamp\\r\\n    );\\r\\n    \\r\\n    event LiquidityPush(\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n    \\r\\n    event DividendPush(\\r\\n        uint256 hexDivs  \\r\\n    );\\r\\n    \\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HEXMONEY TOKEN CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HEXMONEY is IERC20, TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for HEXMONEY;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    //uniswap setup\\r\\n    address public factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    address public routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address public uniHEXHXY = address(0);\\r\\n    IUniswapV2Pair internal uniPairInterface = IUniswapV2Pair(uniHEXHXY);\\r\\n    IUniswapV2Router02 internal uniV2Router = IUniswapV2Router02(routerAddress);\\r\\n    \\r\\n    //hex contract setup\\r\\n    address internal hexAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\\r\\n    HEX internal hexInterface = HEX(hexAddress);\\r\\n\\r\\n    //transform setup\\r\\n    bool public roomActive;\\r\\n    uint public totalHeartsTransformed = 0;\\r\\n    uint public totalHxyTransformed = 0;\\r\\n    uint public totalDividends = 0;\\r\\n    uint public totalLiquidityAdded = 0;\\r\\n    uint public hexLiquidity = 0;\\r\\n    uint public hexDivs = 0;\\r\\n\\r\\n    //mint / freeze setup\\r\\n    uint public unlockLvl = 0;\\r\\n    uint public founderLockStartTimestamp = 0;\\r\\n    uint public founderLockDayLength = 1825;//5 years (10% released every sixmonths)\\r\\n    uint public founderLockedTokens = 0;\\r\\n    uint private allFounderLocked = 0;\\r\\n\\r\\n    bool public mintBlock;//disables any more tokens ever being minted once _totalSupply reaches _maxSupply\\r\\n    uint public minFreezeDayLength = 7; // min days to freeze\\r\\n    uint internal daySeconds = 86400; // seconds in a day\\r\\n    uint public totalFrozen = 0;\\r\\n    mapping (address =\\u003e uint) public tokenFrozenBalances;//balance of HXY frozen mapped by user\\r\\n    uint public totalFreeMintFrozen = 0;\\r\\n    mapping (address =\\u003e uint) public freeMintFrozenBalances;//balance of HXY free minted frozen mapped by user\\r\\n\\r\\n    //tokenomics\\r\\n    uint256 public _maxSupply = 6000000000000000;// max supply @ 60M\\r\\n    uint256 internal _totalSupply;\\r\\n    string public constant name = \\\"HEX Money\\\";\\r\\n    string public constant symbol = \\\"HXY\\\";\\r\\n    uint public constant decimals = 8;\\r\\n    \\r\\n    //airdrop contract\\r\\n    address payable public airdropContract = address(0);\\r\\n    //multisig\\r\\n    address public multisig = address(0);\\r\\n    //admin\\r\\n    address payable internal _p1 = 0xb9F8e9dad5D985dF35036C61B6Aded2ad08bd53f;\\r\\n    address payable internal _p2 = 0xe551072153c02fa33d4903CAb0435Fb86F1a80cb;\\r\\n    address payable internal _p3 = 0xc5f517D341c1bcb2cdC004e519AF6C4613A8AB2d;\\r\\n    address payable internal _p4 = 0x47705B509A4Fe6a0237c975F81030DAC5898Dc06;\\r\\n    address payable internal _p5 = 0x31101541339B4B3864E728BbBFc1b8A0b3BCAa45;\\r\\n    \\r\\n    bool private sync;\\r\\n    bool public multisigSet;\\r\\n    bool public transformsActive;\\r\\n    \\r\\n    //minters\\r\\n    address[] public minterAddresses;// future contracts to enable minting of HXY\\r\\n\\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    mapping(address =\\u003e bool) minters;\\r\\n    mapping (address =\\u003e Frozen) public frozen;\\r\\n    mapping (address =\\u003e FreeMintFrozen) public freeMintFrozen;\\r\\n\\r\\n    struct Frozen{\\r\\n        uint256 freezeStartTimestamp;\\r\\n        uint256 totalEarnedInterest;\\r\\n    }\\r\\n    \\r\\n    struct FreeMintFrozen{\\r\\n        uint256 totalHxyMinted;\\r\\n    }\\r\\n    \\r\\n    modifier onlyMultisig(){\\r\\n        require(msg.sender == multisig, \\\"not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinters(){\\r\\n        require(minters[msg.sender], \\\"not a minter\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOnceMultisig(){\\r\\n        require(!multisigSet, \\\"cannot call twice\\\");\\r\\n        multisigSet = true;\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOnceTransform(){\\r\\n        require(!transformsActive, \\\"cannot call twice\\\");\\r\\n        transformsActive = true;\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!sync, \\\"Sync lock\\\");\\r\\n        sync = true;\\r\\n        _;\\r\\n        sync = false;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 v2Supply) public {\\r\\n        admins[_p1] = true;\\r\\n        admins[_p2] = true;\\r\\n        admins[_p3] = true;\\r\\n        admins[msg.sender] = true;\\r\\n        //mint initial tokens\\r\\n        mintInitialTokens(v2Supply);\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable{\\r\\n        donate();\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply unless mintBLock is true\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        uint256 amt = amount;\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        if(!mintBlock){\\r\\n            if(_totalSupply \\u003c _maxSupply){\\r\\n                if(_totalSupply.add(amt) \\u003e _maxSupply){\\r\\n                    amt = _maxSupply.sub(_totalSupply);\\r\\n                    _totalSupply = _maxSupply;\\r\\n                    mintBlock = true;\\r\\n                }\\r\\n                else{\\r\\n                    _totalSupply = _totalSupply.add(amt);\\r\\n                }\\r\\n                _balances[account] = _balances[account].add(amt);\\r\\n                emit Transfer(address(0), account, amt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //mint HXY lock (only ever called in constructor)\\r\\n    function mintInitialTokens(uint v2Supply)\\r\\n        internal\\r\\n        synchronized\\r\\n    {\\r\\n        require(v2Supply \\u003c= _maxSupply, \\\"cannot mint\\\");\\r\\n        uint256 _founderLockedTokens = _maxSupply.div(10);\\r\\n        _mint(_p1, v2Supply.sub(_founderLockedTokens));//mint HXY to airdrop on launch\\r\\n        _mint(address(this), _founderLockedTokens);//mint HXY to be frozen for 10 years, 10% unfrozen every year\\r\\n        founderLock(_founderLockedTokens);\\r\\n    }\\r\\n\\r\\n    function founderLock(uint tokens)\\r\\n        internal\\r\\n    {\\r\\n        founderLockStartTimestamp = now;\\r\\n        founderLockedTokens = tokens;\\r\\n        allFounderLocked = tokens;\\r\\n        emit FounderLock(tokens, founderLockStartTimestamp);\\r\\n    }\\r\\n\\r\\n    //unlock founder tokens\\r\\n    function unlock()\\r\\n        public\\r\\n        onlyAdmins\\r\\n        synchronized\\r\\n    {\\r\\n        uint sixMonths = founderLockDayLength/10;\\r\\n        require(unlockLvl \\u003c 10, \\\"token unlock complete\\\");\\r\\n        require(founderLockStartTimestamp.add(sixMonths.mul(daySeconds)) \\u003c= now, \\\"tokens cannot be unfrozen yet\\\");//must be at least over 6 months\\r\\n        uint value = allFounderLocked/10;\\r\\n        if(founderLockStartTimestamp.add((sixMonths).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 0){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 2).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 1){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 3).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 2){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 4).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 3){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 5).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 4){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 6).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 5){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 7).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 6){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 8).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 7)\\r\\n        {\\r\\n            unlockLvl++;     \\r\\n            founderLockedTokens = founderLockedTokens.sub(value);      \\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 9).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 8){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 10).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 9){\\r\\n            unlockLvl++;\\r\\n            if(founderLockedTokens \\u003e= value){\\r\\n                founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            }\\r\\n            else{\\r\\n                value = founderLockedTokens;\\r\\n                founderLockedTokens = 0;\\r\\n            }\\r\\n            transfer(_p1, value.mul(30).div(100));\\r\\n            transfer(_p2, value.mul(30).div(100));\\r\\n            transfer(_p3, value.mul(20).div(100));\\r\\n            transfer(_p4, value.mul(15).div(100));\\r\\n            transfer(_p5, value.mul(5).div(100));\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n        emit FounderUnlock(value, now);\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - HXY CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n\\r\\n    //freeze HXY tokens to contract\\r\\n    function FreezeTokens(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(tokenBalance() \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isFreezeFinished(msg.sender)){\\r\\n            UnfreezeTokens();//unfreezes all currently frozen tokens + profit\\r\\n        }\\r\\n        //update balances\\r\\n        tokenFrozenBalances[msg.sender] = tokenFrozenBalances[msg.sender].add(amt);\\r\\n        totalFrozen = totalFrozen.add(amt);\\r\\n        frozen[msg.sender].freezeStartTimestamp = now;\\r\\n        _transfer(msg.sender, address(this), amt);//make transfer\\r\\n        emit TokenFreeze(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //unfreeze HXY tokens from contract\\r\\n    function UnfreezeTokens()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(tokenFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        require(isFreezeFinished(msg.sender), \\\"tokens cannot be unfrozen yet. min 7 day freeze\\\");\\r\\n        uint amt = tokenFrozenBalances[msg.sender];\\r\\n        uint256 interest = calcFreezingRewards(msg.sender);\\r\\n        _mint(msg.sender, interest);//mint HXY - total unfrozen / 1000 * (minFreezeDayLength + days past) @ 36.5% per year\\r\\n        frozen[msg.sender].totalEarnedInterest += interest;\\r\\n        tokenFrozenBalances[msg.sender] = 0;\\r\\n        frozen[msg.sender].freezeStartTimestamp = 0;\\r\\n        totalFrozen = totalFrozen.sub(amt);\\r\\n        _transfer(address(this), msg.sender, amt);//make transfer\\r\\n        emit TokenUnfreeze(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n\\r\\n    //returns freezing reward in HXY\\r\\n    function calcFreezingRewards(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        return (tokenFrozenBalances[_user].div(1000) * (minFreezeDayLength + daysPastMinFreezeTime(_user)));\\r\\n    }\\r\\n    \\r\\n    //returns amount of days frozen past min freeze time of 7 days\\r\\n    function daysPastMinFreezeTime(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        if(frozen[_user].freezeStartTimestamp == 0){\\r\\n            return 0;\\r\\n        }\\r\\n        uint daysPast = now.sub(frozen[_user].freezeStartTimestamp).div(daySeconds);\\r\\n        if(daysPast \\u003e= minFreezeDayLength){\\r\\n            return daysPast - minFreezeDayLength;// returns 0 if under 1 day passed\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //freeze HXY tokens to contract for duration (till maxSupply reached)\\r\\n    function FreezeFreeMint(uint amt, address user, uint dapp)\\r\\n        public\\r\\n        onlyMinters\\r\\n        synchronized\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        if(!mintBlock){\\r\\n            //mint tokens\\r\\n            uint t = totalSupply();\\r\\n            freeMintHXY(amt,address(this));//mint HXY to contract and freeze\\r\\n            //adjust for max supply breach\\r\\n            if(totalSupply().sub(t) \\u003c amt){\\r\\n                amt = totalSupply().sub(t);\\r\\n            }\\r\\n            //update balances\\r\\n            freeMintFrozenBalances[user] = freeMintFrozenBalances[user].add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            totalFreeMintFrozen = totalFreeMintFrozen.add(amt);\\r\\n            freeMintFrozen[user].totalHxyMinted += amt;\\r\\n            emit FreeMintFreeze(user, amt, dapp);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    //freeze HXY tokens to contract from ref bonus (till maxSupply reached)\\r\\n    function FreezeRefFreeMint(uint amt, address ref)\\r\\n        internal\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        if(!mintBlock){\\r\\n            //mint tokens\\r\\n            uint t = totalSupply();\\r\\n            freeMintHXY(amt,address(this));//mint HXY to contract and freeze\\r\\n            //adjust for max supply breach\\r\\n            if(totalSupply().sub(t) \\u003c amt){\\r\\n                amt = totalSupply().sub(t);\\r\\n            }\\r\\n            //update balances\\r\\n            freeMintFrozenBalances[ref] = freeMintFrozenBalances[ref].add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            totalFreeMintFrozen = totalFreeMintFrozen.add(amt);\\r\\n            freeMintFrozen[ref].totalHxyMinted += amt;\\r\\n            emit FreeMintFreeze(ref, amt, 0);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    //unfreeze HXY tokens from contract\\r\\n    function UnfreezeFreeMint()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(freeMintFrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        require(mintBlock, \\\"tokens cannot be unfrozen yet. max supply not yet reached\\\");\\r\\n        //update values\\r\\n        uint amt = freeMintFrozenBalances[msg.sender];\\r\\n        freeMintFrozenBalances[msg.sender] = 0;\\r\\n        totalFrozen = totalFrozen.sub(amt);\\r\\n        totalFreeMintFrozen = totalFreeMintFrozen.sub(amt);\\r\\n        //make transfer\\r\\n        _transfer(address(this), msg.sender, amt);\\r\\n        emit FreeMintUnfreeze(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //mint HXY to address\\r\\n    function freeMintHXY(uint value, address minter)\\r\\n        internal\\r\\n    {\\r\\n        uint amt = value;\\r\\n        _mint(minter, amt);//mint HXY\\r\\n    }\\r\\n\\r\\n    //transforms HEX to HXY\\r\\n    function transformHEX(uint hearts, address ref)//Approval needed\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(roomActive, \\\"transforms not yet active\\\");\\r\\n        require(hearts \\u003e= 100, \\\"value too low\\\");\\r\\n        require(hexInterface.transferFrom(msg.sender, address(this), hearts), \\\"Transfer failed\\\");//send hex from user to contract\\r\\n        //allocate funds\\r\\n        hexDivs += hearts.div(2);//50%\\r\\n        hexLiquidity += hearts.div(2);//50%\\r\\n        \\r\\n        //get HXY price\\r\\n        (uint reserve0, uint reserve1,) = uniPairInterface.getReserves();\\r\\n        uint hxy = uniV2Router.quote(hearts, reserve0, reserve1);\\r\\n        if(ref != address(0))//ref\\r\\n        {\\r\\n            totalHxyTransformed += hxy.add(hxy.div(10));\\r\\n            totalHeartsTransformed += hearts;\\r\\n            FreezeRefFreeMint(hxy.div(10), ref);\\r\\n        }\\r\\n        else{//no ref\\r\\n            totalHxyTransformed += hxy;\\r\\n            totalHeartsTransformed += hearts;\\r\\n        }\\r\\n        require(totalHxyTransformed \\u003c= 3000000000000000, \\\"transform threshold breached\\\");//remaining for interest and free mint\\r\\n        _mint(msg.sender, hxy);\\r\\n        emit Transform(hearts, hxy, msg.sender);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function pushLiquidity()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hexLiquidity \\u003e 1000, \\\"nothing to add\\\");\\r\\n        //get price \\r\\n        (uint reserve0, uint reserve1,) = uniPairInterface.getReserves();\\r\\n        uint hxy = uniV2Router.quote(hexLiquidity, reserve0, reserve1);\\r\\n        _mint(address(this), hxy);\\r\\n        //approve\\r\\n        this.safeApprove(routerAddress, hxy);\\r\\n        require(hexInterface.approve(routerAddress, hexLiquidity), \\\"could not approve\\\");\\r\\n        //add liquidity\\r\\n        (uint amountA, uint amountB, uint liquidity) = uniV2Router.addLiquidity(hexAddress, address(this), hexLiquidity, hxy, 0, 0, _p1, now.add(800));\\r\\n        totalLiquidityAdded += hexLiquidity;\\r\\n        //reset\\r\\n        hexLiquidity = 0;\\r\\n        emit LiquidityPush(amountA, amountB, liquidity);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function pushDivs()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(hexDivs \\u003e 0, \\\"nothing to distribute\\\");\\r\\n        //send divs\\r\\n        totalDividends += hexDivs;\\r\\n        hexInterface.transfer(airdropContract, hexDivs);\\r\\n        //send any unallocated HEX in contract to dividend contract\\r\\n        uint overflow = 0;\\r\\n        if(hexInterface.balanceOf(address(this)).sub(hexLiquidity) \\u003e 0){\\r\\n            overflow = hexInterface.balanceOf(address(this)).sub(hexLiquidity);\\r\\n            hexInterface.transfer(airdropContract, overflow);   \\r\\n        }\\r\\n        emit DividendPush(hexDivs.add(overflow));\\r\\n        //reset\\r\\n        hexDivs = 0;\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN/MULTISIG ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n    \\r\\n    function setMultiSig(address _multisig)\\r\\n        public\\r\\n        onlyAdmins\\r\\n        onlyOnceMultisig\\r\\n    {\\r\\n        multisig = _multisig;    \\r\\n    }\\r\\n    \\r\\n    //set airdropcontract for can only be set once\\r\\n    function setAirdropContract(address payable _airdropContract)\\r\\n        public\\r\\n        onlyMultisig\\r\\n    {\\r\\n        airdropContract = _airdropContract;    \\r\\n    }\\r\\n    \\r\\n    //allows addition of contract addresses that can call this contracts mint function.\\r\\n    function addMinter(address minter)\\r\\n        public\\r\\n        onlyMultisig\\r\\n        returns (bool)\\r\\n    {        \\r\\n        minters[minter] = true;\\r\\n        minterAddresses.push(minter);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //transform room initiation\\r\\n    function transformActivate()\\r\\n        public\\r\\n        onlyMultisig\\r\\n        onlyOnceTransform\\r\\n    {\\r\\n        roomActive = true;\\r\\n    }\\r\\n\\r\\n    function setExchange(address exchange)\\r\\n        public\\r\\n        onlyMultisig\\r\\n    {\\r\\n        uniHEXHXY = exchange;\\r\\n        uniPairInterface = IUniswapV2Pair(uniHEXHXY);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function setV2Router(address router)\\r\\n        public\\r\\n        onlyMultisig\\r\\n    {\\r\\n        routerAddress = router;\\r\\n        uniV2Router = IUniswapV2Router02(routerAddress);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //total HXY frozen in contract\\r\\n    function totalFrozenTokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return totalFrozen;\\r\\n    }\\r\\n\\r\\n    //HXY balance of caller\\r\\n    function tokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function isFreezeFinished(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(frozen[_user].freezeStartTimestamp == 0){\\r\\n            return false;\\r\\n        }\\r\\n        else{\\r\\n           return frozen[_user].freezeStartTimestamp.add((minFreezeDayLength).mul(daySeconds)) \\u003c= now;               \\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    function donate() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        bool success = false;\\r\\n        uint256 balance = msg.value;\\r\\n        //distribute\\r\\n        (success, ) =  _p1.call{value:balance.mul(30).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p2.call{value:balance.mul(30).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p3.call{value:balance.mul(20).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p4.call{value:balance.mul(15).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p5.call{value:balance.mul(5).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v2Supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexDivs\",\"type\":\"uint256\"}],\"name\":\"DividendPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FounderLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dapp\",\"type\":\"uint256\"}],\"name\":\"FreeMintFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FreeMintUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transformer\",\"type\":\"address\"}],\"name\":\"Transform\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dapp\",\"type\":\"uint256\"}],\"name\":\"FreezeFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnfreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcFreezingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"daysPastMinFreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeMintFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalHxyMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeMintFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"freezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnedInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isFreezeFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFreezeDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minterAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushDivs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_airdropContract\",\"type\":\"address\"}],\"name\":\"setAirdropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFreeMintFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozenTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHeartsTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxyTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transformActivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"transformHEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transformsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniHEXHXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HEXMONEY","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000005265baeddbc80","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d1063f92076745e8137f664d98ca1623da342af63a1e2dfe814f00d44ae370d1"}]}