{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data);\r\n}\r\ncontract PowerDoubler is ApproveAndCallFallBack{\r\n    using SafeMath for uint256;\r\n\r\n    modifier afterGameStart() {\r\n        require(now >= startTime,\"game not started yet\");\r\n        _;\r\n    }\r\n\r\n    struct Participant {\r\n        address etherAddress;\r\n        uint PayAmount;\r\n    }\r\n\r\n    Participant[] public participants;\r\n\r\n    uint public payoutIdx = 0;\r\n    uint public collectedFees = 0;\r\n    uint public balance = 0;\r\n\r\n    address public owner;\r\n    address[] public feeRecipients;\r\n    ERC20 public powertoken;\r\n    uint public MIN_BUY=1 ether;\r\n    uint public MAX_BUY=1000 ether;\r\n    uint public startTime;\r\n    uint public delayToStart=5 days;//0 minutes;\r\n\r\n    //view only\r\n    uint public totalSpent=0;\r\n    uint public totalPaid=0;\r\n    mapping(address => uint) public queuePosition;\r\n\r\n    // this function is executed at initialization and sets the owner of the contract\r\n    constructor(address tokenaddr) public {\r\n        owner = msg.sender;\r\n        powertoken = ERC20(tokenaddr);\r\n        feeRecipients.push(0xaEbbd80Fd7dAe979d965A3a5b09bBCD23eB40e5F);\r\n        feeRecipients.push(0x3dF3766E64C2C85Ce1baa858d2A14F96916d5087);\r\n        feeRecipients.push(0x8Cc62C4dCF129188ce4b43103eAefc0d6b71af6d);\r\n        feeRecipients.push(0xE7F53CE9421670AC2f11C5035E6f6f13d9829aa6);\r\n        startTime=now+delayToStart;\r\n    }\r\n    /*\r\n      In case we decide to start the game with a trigger transaction. If so set delayToStart to something highish\r\n    */\r\n    function startEarly() public{\r\n      require(msg.sender==owner);\r\n      startTime=now;\r\n    }\r\n    function checkAndTransferPOWER(address from,uint256 _amount) private {\r\n        require(powertoken.transferFrom(from, address(this), _amount) == true, \"transfer must succeed\");//msg.sender\r\n    }\r\n    /*\r\n      allows playing without using approve\r\n    */\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\r\n      require(msg.sender==address(powertoken));\r\n      enter(tokens,from);\r\n    }\r\n    function enter(uint tokensSent,address from) afterGameStart private{\r\n      checkAndTransferPOWER(from,tokensSent);\r\n      totalSpent+=tokensSent;//view only\r\n\t\t  //send more than min and less than max\r\n\t\t  require(tokensSent >= MIN_BUY && tokensSent <= MAX_BUY,\"token amount out of bounds\");\r\n      // collect fees and update contract balance\r\n      collectedFees += tokensSent / 20;\r\n      balance += tokensSent.sub(tokensSent / 20);\r\n\r\n    \t// add a new participant to array and calculate need balance to payout\r\n      uint idx = participants.length;\r\n      participants.length += 1;\r\n      participants[idx].etherAddress = from;//msg.sender;\r\n      participants[idx].PayAmount = (tokensSent.sub(tokensSent / 20)).mul(2);\r\n      //view only\r\n      queuePosition[from]=idx;//msg.sender\r\n\r\n\t\t\tuint NeedAmount = participants[payoutIdx].PayAmount;\r\n\t\t\t// if there are enough ether on the balance we can pay out to an earlier participant\r\n\t\t    if (balance >= NeedAmount) {\r\n\t            powertoken.transfer(participants[payoutIdx].etherAddress,NeedAmount);\r\n\t            balance = balance.sub(NeedAmount);\r\n\t            payoutIdx += 1;\r\n              //view only:\r\n              totalPaid+=NeedAmount;\r\n\t        }\r\n\r\n    }\r\n\r\n/*\r\n   in case someone does a buy that can pay multiple\r\n */\r\n\tfunction NextPayout() afterGameStart public{\r\n      uint NeedAmount = participants[payoutIdx].PayAmount;\r\n\t    require(balance >= NeedAmount,\"insufficient contract balance for cashout\");\r\n      powertoken.transfer(participants[payoutIdx].etherAddress,NeedAmount);\r\n      balance = balance.sub(NeedAmount);\r\n      payoutIdx += 1;\r\n      //view only:\r\n      totalPaid+=NeedAmount;\r\n    }\r\n\r\n  function collectFees() public {\r\n      require(collectedFees>0,\"zero fees\");\r\n      for(uint8 i=0;i<feeRecipients.length;i+=1){\r\n        powertoken.transfer(feeRecipients[i],collectedFees.div(feeRecipients.length));//delivers even shares\r\n      }\r\n      collectedFees = 0;\r\n  }\r\n\r\n  /*\r\n    frontend view function\r\n  */\r\n  function placeInLine(address user) view returns(uint){\r\n    if(queuePosition[user]>payoutIdx){\r\n      return queuePosition[user]-payoutIdx;\r\n    }\r\n    else{\r\n      return 0;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"PayAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"queuePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"NextPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startEarly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"placeInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powertoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delayToStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenaddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PowerDoubler","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f2f9a7e93f845b3ce154efbeb64fb9346fcce509","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0550ca5fbdd46153887090416bc6bd5061754dc12f95ad1f2eb8e5424e73cdb3"}]}