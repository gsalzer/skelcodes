{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OasisInterface {\r\n    function getMinSell(TokenInterface pay_gem) external view returns (uint);\r\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\r\n\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n\r\ncontract OasisHelpers is Helpers {\r\n    /**\r\n     * @dev Return WETH address\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Oasis Address\r\n     */\r\n    function getOasisAddr() internal pure returns (address) {\r\n        return 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\r\n        _sell = sell == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        TokenInterface buyAddr,\r\n        uint expectedAmt,\r\n        TokenInterface sellAddr,\r\n        uint sellAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18((sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getSellUnitAmt(\r\n        TokenInterface sellAddr,\r\n        uint expectedAmt,\r\n        TokenInterface buyAddr,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), buyAmt);\r\n        uint _sellAmt = convertTo18(sellAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_sellAmt, _buyAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Resolver is OasisHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage) public view returns (uint buyAmt, uint unitAmt) {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        buyAmt = OasisInterface(getOasisAddr()).getBuyAmount(address(_buyAddr), address(_sellAddr), sellAmt);\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n\r\n    function getSellAmount(address buyAddr, address sellAddr, uint buyAmt, uint slippage) public view returns (uint sellAmt, uint unitAmt) {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        sellAmt = OasisInterface(getOasisAddr()).getPayAmount(address(_sellAddr), address(_buyAddr), buyAmt);\r\n        unitAmt = getSellUnitAmt(_sellAddr, sellAmt, _buyAddr, buyAmt, slippage);\r\n    }\r\n\r\n    function getMinSellAmount(address sellAddr) public view returns (uint minAmt) {\r\n        (, TokenInterface _sellAddr) = changeEthAddress(getAddressETH(), sellAddr);\r\n        minAmt = OasisInterface(getOasisAddr()).getMinSell(_sellAddr);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaOasisResolver is Resolver {\r\n    string public constant name = \"Oasis-Resolver-v1.1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"}],\"name\":\"getMinSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaOasisResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e9d84e55f13f21737153e522114a23cd100afda60dc1212a9b7051998bba6e4"}]}