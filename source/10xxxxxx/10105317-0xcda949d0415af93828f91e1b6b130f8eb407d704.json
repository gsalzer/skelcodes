{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental ABIEncoderV2;\npragma solidity ^0.6.0;\n\ncontract OfferStorage {\n\n  mapping(address => bool) public accessAllowed;\n  mapping(address => mapping(uint => bool)) public userOfferClaim;\n  mapping(uint256 => address[]) public claimedUsers;\n\n  constructor() public {\n    accessAllowed[msg.sender] = true;\n  }\n\n  modifier platform() {\n    require(accessAllowed[msg.sender] == true);\n    _;\n  }\n\n  function allowAccess(address _address) platform public {\n    accessAllowed[_address] = true;\n  }\n\n  function denyAccess(address _address) platform public {\n    accessAllowed[_address] = false;\n  }\n\n  function setUserClaim(address _address, uint offerId, bool status) platform public returns(bool) {\n    userOfferClaim[_address][offerId] = status;\n    if (status) {\n      claimedUsers[offerId].push(_address);\n    }\n    return true;\n  }\n\n  function getClaimedUsersLength(uint _offerId) platform public view returns(uint256){\n      return claimedUsers[_offerId].length;\n  }\n\n}\n\nabstract contract OpenAlexalO {\n\n    struct UserStruct {\n        bool isExist;\n        uint id;\n        uint referrerID;\n        uint currentLevel;\n        uint totalEarningEth;\n        address[] referral;\n        mapping(uint => uint) levelExpired;\n    }\n\n    mapping (address => UserStruct) public users;\n    mapping (uint => address) public userList;\n    mapping (address => uint) public createdDate;\n\n    function viewUserReferral(address _userAddress) virtual external view returns (address[] memory);\n\n}\n\ncontract Offer {\n  OfferStorage public offerStorage;\n  OpenAlexalO public openAlexa;\n\n  address payable public owner;\n\n  struct UserStruct {\n    bool isExist;\n    uint id;\n    uint referrerID;\n    uint currentLevel;\n    uint totalEarningEth;\n    address[] referral;\n    mapping(uint => uint) levelExpired;\n  }\n\n\n  mapping(uint => uint) public offerActiveDate;\n\n  uint public levelOneCashBackId;\n  uint public levelOneCashBackAmt;\n\n  uint public goLevelSixId;\n  uint public goLevelSixAmt;\n\n  uint public leadersPoolAmt;\n  uint public leadersPoolId;\n  uint public leadersPoolMaxUsers;\n\n  event Claimed(address indexed _from, address indexed _to, uint256 _offerId, uint256 _value);\n\n  modifier onlyActive(uint offerId) {\n    require(offerActiveDate[offerId] < openAlexa.createdDate(msg.sender), \"Offer not active for user\");\n    _;\n  }\n\n  constructor(address offerStorageAddress, address payable openAlexaAddress) public {\n\n    owner = msg.sender;\n\n    offerStorage = OfferStorage(offerStorageAddress);\n    openAlexa = OpenAlexalO(openAlexaAddress);\n\n    // unique id for each offer\n    levelOneCashBackId = 1;\n    goLevelSixId = 2;\n    leadersPoolId = 3;\n\n    levelOneCashBackAmt = 0.03 ether;\n    goLevelSixAmt = 3 ether;\n    leadersPoolAmt = 102 ether;\n\n    offerActiveDate[levelOneCashBackId] = 1588886820;\n    offerActiveDate[goLevelSixId] = 1588886820;\n    offerActiveDate[leadersPoolId] = 1588886820;\n\n    leadersPoolMaxUsers = 21;\n\n  }\n\n  // stack to deep cant add modifier\n  function levelOneCashBackEligible(address _userAddress) view external\n  returns(\n    string [4] memory  _message,\n    uint _userId,\n    uint _userLevel,\n    uint _createdDate,\n    address[] memory _refs,\n    uint256[4] memory _refDates\n  ) {\n    if(offerActiveDate[levelOneCashBackId] > openAlexa.createdDate(_userAddress)) _message[0] = \"Offer not active for User\";\n\n    if (address(this).balance < levelOneCashBackAmt) _message[1] = \"Contract Balance Low\";\n\n    if (offerStorage.userOfferClaim(_userAddress, levelOneCashBackId)) _message[2] = \"Offer Already claimed\";\n\n    UserStruct memory user;\n    (, user.id, user.referrerID, user.currentLevel, ) = openAlexa.users(_userAddress);\n\n    if (user.currentLevel < 2) _message[3] = \"Level less than 2\";\n\n    // fetch his referrers\n    address[] memory refs = openAlexa.viewUserReferral(_userAddress);\n    uint256[4] memory temprefs;\n\n    if (refs.length == 2) {\n      UserStruct memory ref1;\n      (, ref1.id, , , ) = openAlexa.users(refs[0]);\n      UserStruct memory ref2;\n      (, ref2.id, , , ) = openAlexa.users(refs[1]);\n      temprefs = [ref1.id, openAlexa.createdDate(refs[0]), ref2.id, openAlexa.createdDate(refs[1])];\n    }\n\n    return (_message,\n      user.id,\n      user.currentLevel,\n      openAlexa.createdDate(_userAddress),\n      refs,\n      temprefs\n    );\n\n  }\n\n\n  function claimLevelOneCashBack() public {\n    require(offerActiveDate[levelOneCashBackId] < openAlexa.createdDate(msg.sender), \"Offer not active for User\");\n    // check has claimed\n    require(!offerStorage.userOfferClaim(msg.sender, levelOneCashBackId), \"Offer Already Claimed\");\n    // check contract has funds\n    require(address(this).balance > levelOneCashBackAmt, \"Contract Balance Low, try again after sometime\");\n    // fetch his structure\n    UserStruct memory user;\n    (user.isExist,\n      user.id,\n      user.referrerID,\n      user.currentLevel,\n      user.totalEarningEth) = openAlexa.users(msg.sender);\n    // check level at 2\n    require(user.currentLevel >= 2, \"Level not upgraded from 1\");\n    // fetch his referrers\n    address[] memory children = openAlexa.viewUserReferral(msg.sender);\n    // check they are two\n    require(children.length == 2, \"Two downlines not found\");\n    // fetch their created at date\n    uint child1Date = openAlexa.createdDate(children[0]);\n    uint child2Date = openAlexa.createdDate(children[1]);\n    // fetch his created at date\n    uint userDate = openAlexa.createdDate(msg.sender);\n    // match date of user with u2 and u3 < 48 hrs\n    require(((child1Date - userDate) < 48 hours) && ((child2Date - userDate) < 48 hours), \"Downline not registered within 48 hrs\");\n    // all good transfer 0.03ETH\n    require((payable(msg.sender).send(levelOneCashBackAmt)), \"Sending Offer Reward Failure\");\n    // mark the address for address => (offerid => true/false)\n    require(offerStorage.setUserClaim(msg.sender, levelOneCashBackId, true), \"Setting Claim failed\");\n    emit Claimed(address(this), msg.sender, levelOneCashBackId, levelOneCashBackAmt);\n  }\n\n  function getLine6Users(address[] memory users) public view returns(address[] memory) {\n\n    uint level = 0;\n    uint totalLevels = 5;\n\n    uint8[5] memory levelPartners = [4, 8, 16, 32, 64];\n\n    address[] memory result = new address[](64);\n\n    while (level < totalLevels) {\n      if(users.length == 0) return result;    \n      users = getEachLevelUsers(users, levelPartners[level]);\n      if (level == 4)\n        result = users;\n      level++;\n    }\n\n    return result;\n\n  }\n\n  function getEachLevelUsers(address[] memory users, uint limit) public view returns(address[] memory) {\n    address[] memory total = new address[](limit);\n    uint index = 0;\n\n    for (uint i = 0; i < users.length; i++) {\n      if (users[i] == address(0)) break;\n      address[] memory children = openAlexa.viewUserReferral(users[i]);\n      for (uint j = 0; j < children.length; j++) {\n        if (children[j] == address(0)) break;\n        total[index] = children[j];\n        index++;\n      }\n    }\n    return total;\n\n  }\n\n  function goLevelSixEligible(address _userAddress) view external\n  returns(\n    string [4] memory _message,\n    uint _userId,\n    uint _currentLevel,\n    address[] memory _refs,\n    address[] memory _lineSixrefs,\n    bool lineSixComplete\n  ) {\n    // string [4] memory message;\n    if(offerActiveDate[goLevelSixId] > openAlexa.createdDate(_userAddress)) _message[0] = \"Offer not active for User\";\n     // check contract has funds\n    if (address(this).balance < goLevelSixAmt) _message[1] = \"Contract Balance Low, try again after sometime\";\n    // check has claimed\n    if (offerStorage.userOfferClaim(_userAddress, goLevelSixId)) _message[2] = \"Offer Already Claimed\";\n\n    // fetch his structure\n    UserStruct memory user;\n    (, user.id,, user.currentLevel, ) = openAlexa.users(_userAddress);\n    // check level at 6\n    if (user.currentLevel < 4) _message[3] = \"Minimum level 4 required\";\n    // get referrals\n    address[] memory refs = openAlexa.viewUserReferral(_userAddress);\n    // refs at level 6\n    address[] memory lineSixrefs = getLine6Users(refs);\n\n    return (_message,\n      user.id,\n      user.currentLevel,\n      refs,\n      lineSixrefs,\n      checkOfferClaimed(lineSixrefs, levelOneCashBackId)\n    );\n\n  }\n\n  function claimGoLevelSix() public {\n    require(offerActiveDate[goLevelSixId] < openAlexa.createdDate(msg.sender), \"Offer not active for User\");\n    // check has claimed\n    require(!offerStorage.userOfferClaim(msg.sender, goLevelSixId), \"Offer Already claimed\");\n    // check contract has funds\n    require(address(this).balance > goLevelSixAmt, \"Contract Balance Low, try again after sometime\");\n    // fetch his structure\n    UserStruct memory user;\n    (user.isExist,\n      user.id,\n      user.referrerID,\n      user.currentLevel,\n      user.totalEarningEth) = openAlexa.users(msg.sender);\n    // check level\n    require(user.currentLevel >= 4, \"Minimum level expected is 4\");\n    // get user register date\n    uint userDate = openAlexa.createdDate(msg.sender);\n    // match date of user with u2 and u3 < 48 hrs\n    require(((now - userDate) < 12 days), \"User registration date passed 12 days\");\n    // get referrals\n    address[] memory children = openAlexa.viewUserReferral(msg.sender);\n    // children at level 6\n    address[] memory line6children = getLine6Users(children);\n    // check they took offer 1\n    require(checkOfferClaimed(line6children, levelOneCashBackId), \"Level 6 partners not claimed cashback offer\");\n    // all good transfer 0.03ETH\n    require((payable(msg.sender).send(goLevelSixAmt)), \"Sending Offer Failure\");\n    // mark the address for address => (offerid => true/false)\n    require(offerStorage.setUserClaim(msg.sender, goLevelSixId, true), \"Setting Claim failed\");\n    emit Claimed(address(this), msg.sender, goLevelSixId, goLevelSixAmt);\n  }\n\n  function leadersPoolEligible(address _userAddress) view external returns(\n    string [4] memory _message,\n    uint _userId,\n    uint _earnedEth,\n    uint _totalClaims,\n    uint _maxClaims,\n    uint _OfferAmt\n  ) {\n    if(offerActiveDate[leadersPoolId] > openAlexa.createdDate(_userAddress)) _message[0] = \"Offer not active for User\";\n    UserStruct memory user;\n    (, user.id, , , user.totalEarningEth) = openAlexa.users(_userAddress);\n    if(offerStorage.getClaimedUsersLength(leadersPoolId) >= (leadersPoolMaxUsers)) _message[1] = \"Offer Max users reached\";\n    if (offerStorage.userOfferClaim(_userAddress, goLevelSixId)) _message[2] = \"Offer Already Claimed\";\n    if(user.totalEarningEth < leadersPoolAmt) _message[3] = \"Earned ETH less than offer amount\";\n    return (\n      _message,\n      user.id,\n      user.totalEarningEth,\n      offerStorage.getClaimedUsersLength(leadersPoolId),\n      leadersPoolMaxUsers,\n      leadersPoolAmt\n    );\n  }\n\n  function claimLeadersPool() public {\n    require(offerActiveDate[leadersPoolId] < openAlexa.createdDate(msg.sender), \"Offer not active for user\");\n    require(!offerStorage.userOfferClaim(msg.sender, leadersPoolId), \"Offer Already Claimed\");\n    require(offerStorage.getClaimedUsersLength(leadersPoolId) < leadersPoolMaxUsers, \"Offer claimed by max users\");\n    // fetch his structure\n    UserStruct memory user;\n    (user.isExist,\n      user.id,\n      user.referrerID,\n      user.currentLevel,\n      user.totalEarningEth) = openAlexa.users(msg.sender);\n    require(user.currentLevel >= 1, \"Minimum level expected is 1\");\n    require(user.totalEarningEth >= leadersPoolAmt, \"Earned ether less than required amount\");\n    require(offerStorage.setUserClaim(msg.sender, leadersPoolId, true), \"Setting Claim failed\");\n    emit Claimed(address(this), msg.sender, leadersPoolId, leadersPoolAmt);\n\n  }\n\n  function checkOfferClaimed(address[] memory user, uint offerId) public view returns(bool) {\n    bool claimed;\n    for (uint i = 0; i < user.length; i++) {\n      claimed = true;\n      if (!offerStorage.userOfferClaim(user[i], offerId)) {\n        claimed = false;\n        break;\n      }\n    }\n\n    return claimed;\n  }\n\n  function getOfferClaimedUser(address userAddress, uint offerId) public view returns(\n      bool _isClaimed,\n      uint _userId,\n      uint _currentLevel,\n      uint _earnedEth,\n      uint _createdDate\n      ) {\n\n    UserStruct memory user;\n    (, user.id, ,user.currentLevel,user.totalEarningEth) = openAlexa.users(userAddress);\n\n    return (\n        offerStorage.userOfferClaim(userAddress, offerId),\n        user.id,\n        user.currentLevel,\n        user.totalEarningEth,\n        openAlexa.createdDate(userAddress)\n        );\n  }\n\n  function addressToUser(address _user) public view returns(\n    bool _isExist,\n    uint _userId,\n    uint _refId,\n    uint _currentLevel,\n    uint _totalEarningEth,\n    uint _createdDate\n  ) {\n    UserStruct memory user;\n    (user.isExist,\n      user.id,\n      user.referrerID,\n      user.currentLevel,\n      user.totalEarningEth) = openAlexa.users(_user);\n\n\n    return (\n      user.isExist,\n      user.id,\n      user.referrerID,\n      user.currentLevel,\n      user.totalEarningEth,\n      openAlexa.createdDate(_user)\n    );\n  }\n  \n  function userIDtoAddress(uint _id) public view returns(address _userAddress){\n      return openAlexa.userList(_id);\n  }\n\n  function getUserByOfferId(uint offerId, uint index) public view returns(\n    uint _length,\n    address _address\n  ) {\n    return (\n      offerStorage.getClaimedUsersLength(offerId),\n      offerStorage.claimedUsers(offerId, index)\n    );\n  }\n\n\n  function changeOfferDetails(uint _levelOneCashBackAmt, uint _goLevelSixAmt, uint _leadersPoolAmt, uint _leadersPoolMaxUsers) public {\n    require(msg.sender == owner, \"Owner only!\");\n    levelOneCashBackAmt = _levelOneCashBackAmt;\n    goLevelSixAmt = _goLevelSixAmt;\n    leadersPoolAmt = _leadersPoolAmt;\n    leadersPoolMaxUsers = _leadersPoolMaxUsers;\n  }\n\n  function changeOfferActive(uint offerId, uint _startDate) public {\n    require(msg.sender == owner, \"Owner only!\");\n    offerActiveDate[offerId] = _startDate;\n  }\n\n  function withdraw() public {\n    require(msg.sender == owner, \"Owner only!\");\n    owner.transfer(address(this).balance);\n  }\n  \n  function changeOwner(address payable newowner) public {\n    require(msg.sender == owner, \"Owner only!\");\n    owner = newowner;\n  }\n\n  receive () payable external {\n    require(msg.sender == owner, \"Owner only!\");\n  }\n\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"offerStorageAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"openAlexaAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addressToUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEarningEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_createdDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"changeOfferActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelOneCashBackAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goLevelSixAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leadersPoolAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leadersPoolMaxUsers\",\"type\":\"uint256\"}],\"name\":\"changeOfferDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"checkOfferClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGoLevelSix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLeadersPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLevelOneCashBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getEachLevelUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getLine6Users\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getOfferClaimedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_createdDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserByOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goLevelSixAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"goLevelSixEligible\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"_message\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_refs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_lineSixrefs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"lineSixComplete\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goLevelSixId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leadersPoolAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"leadersPoolEligible\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"_message\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_OfferAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leadersPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leadersPoolMaxUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelOneCashBackAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"levelOneCashBackEligible\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"_message\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_createdDate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_refs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_refDates\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelOneCashBackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerActiveDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerStorage\",\"outputs\":[{\"internalType\":\"contract OfferStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAlexa\",\"outputs\":[{\"internalType\":\"contract OpenAlexalO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"userIDtoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Offer","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000075fd7ea35186937865a503b4199e10180e05004600000000000000000000000080e9540c204c05be63cfe44b43302780175b60ff","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}