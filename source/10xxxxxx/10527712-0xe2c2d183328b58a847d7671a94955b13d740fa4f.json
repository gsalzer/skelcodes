{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n/**\r\n * \r\n * Vision Network Liquidity Vault\r\n * \r\n * Simple smart contract to decentralize the uniswap liquidity, providing proof of liquidity indefinitely.\r\n * Timelock for team tokens.\r\n * Original smart contract: MrBlobby (UniPower), modified by George.\r\n * https://www.vision-network.io/\r\n * \r\n */\r\n \r\ncontract Vault {\r\n    \r\n    ERC20 constant VSO = ERC20(0x456AE45c0CE901E2e7c99c0718031cEc0A7A59Ff);\r\n    ERC20 constant liquidityToken = ERC20(0x8d7c9Fa808151D8A0Cc6B11E8f15CED337586c54);\r\n    \r\n    address owner = 0x6e92Da3B81201Da47a01c4FA004E7d058cF64460;\r\n    uint256 public VaultCreation = now;\r\n    uint256 public lastWithdrawal;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n\r\n    event liquidityMigrationStarted(address recipient, uint256 unlockTime);\r\n    \r\n    \r\n    /**\r\n     * Withdraw liquidity\r\n     * Has a hardcap of 2% per 48 hours\r\n     */\r\n    function withdrawLiquidity(address recipient, uint256 amount) external {\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        require(amount < (2 * liquidityBalance / 100)); // Max 2%\r\n        require(lastWithdrawal + 48 hours < now); // Max once every 48 hrs\r\n        require(msg.sender == owner);\r\n        \r\n        liquidityToken.transfer(recipient, amount);\r\n        lastWithdrawal = now;\r\n    } \r\n    \r\n    \r\n    /**\r\n     * This function allows liquidity to be moved, after a 30 days lockup -preventing abuse.\r\n     */\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == owner);\r\n        migrationLock = now + 30 days;\r\n        migrationRecipient = recipient;\r\n        emit liquidityMigrationStarted(recipient, migrationLock);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Moves liquidity to new location, assuming the 30 days lockup has passed -preventing abuse.\r\n     */\r\n    function processMigration() external {\r\n        require(msg.sender == owner);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(migrationRecipient, liquidityBalance);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * VSO tokens locked in this Vault can be withdrawn 4 months after its creation.\r\n     */\r\n    function withdrawVSO(address recipient, uint256 amount) external {\r\n        require(msg.sender == owner);\r\n        require(now > VaultCreation + 120 days);\r\n        VSO.transfer(recipient, amount);\r\n    } \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"liquidityMigrationStarted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"VaultCreation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawVSO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://618260993623501e7a55368f296bed411a6fa5c3a08a7c6daf54d2c50879b79d"}]}