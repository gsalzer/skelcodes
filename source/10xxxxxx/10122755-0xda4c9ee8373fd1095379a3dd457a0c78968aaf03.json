{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0)\r\n            return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return A uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token to a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * Note that while this function emits an Approval event, this is not required as per the specification,\r\n    * and other compliant implementations may not emit the event.\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _allowed[msg.sender][to] = _allowed[msg.sender][to].sub(value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Mintable is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        _balances[to] = _balances[to].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n// ----------- Aave ----------------\r\n\r\ncontract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public view returns (address);\r\n    function setLendingPoolImpl(address _pool) public;\r\n\r\n    function getLendingPoolCore() public view returns (address payable);\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public;\r\n\r\n    function getLendingPoolConfigurator() public view returns (address);\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public;\r\n\r\n    function getLendingPoolDataProvider() public view returns (address);\r\n    function setLendingPoolDataProviderImpl(address _provider) public;\r\n\r\n    function getLendingPoolParametersProvider() public view returns (address);\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public;\r\n\r\n    function getTokenDistributor() public view returns (address);\r\n    function setTokenDistributor(address _tokenDistributor) public;\r\n\r\n\r\n    function getFeeProvider() public view returns (address);\r\n    function setFeeProviderImpl(address _feeProvider) public;\r\n\r\n    function getLendingPoolLiquidationManager() public view returns (address);\r\n    function setLendingPoolLiquidationManager(address _manager) public;\r\n\r\n    function getLendingPoolManager() public view returns (address);\r\n    function setLendingPoolManager(address _lendingPoolManager) public;\r\n\r\n    function getPriceOracle() public view returns (address);\r\n    function setPriceOracle(address _priceOracle) public;\r\n\r\n    function getLendingRateOracle() public view returns (address);\r\n    function setLendingRateOracle(address _lendingRateOracle) public;\r\n}\r\n\r\ninterface ILendingPool {\r\n    function addressesProvider() external view returns(address);\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n    function redeemUnderlying(address _reserve, address _user, uint256 _amount) external;\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n    function repay(address _reserve, uint256 _amount, address _onBehalfOf) external payable;\r\n    function swapBorrowRateMode(address _reserve) external;\r\n    function rebalanceFixedBorrowRate(address _reserve, address _user) external;\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n    function liquidationCall(address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken) external payable;\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n    function getReserveConfigurationData(address _reserve) external view returns(uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive);\r\n    function getReserveData(address _reserve) external view returns(uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp);\r\n    function getUserAccountData(address _user) external view returns(uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor);\r\n    function getUserReserveData(address _reserve, address _user) external view returns(uint256 currentATokenBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled);\r\n    function getReserves() external view;\r\n}\r\n\r\ninterface ILendingPoolCore {\r\n    function getReserveATokenAddress(address _reserve) external view returns (address);\r\n    function getReserveCurrentVariableBorrowRate(address _token) external view returns (uint256);\r\n    function getReserveCurrentLiquidityRate(address _token) external view returns (uint256);\r\n}\r\n\r\ninterface IAavePriceOracleGetter {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external view returns(address);\r\n    function getFallbackOracle() external view returns(address);\r\n}\r\n\r\ninterface IAToken {\r\n    function redirectInterestStream(address _to) external;\r\n    function redirectInterestStreamOf(address _from, address _to) external;\r\n    function allowInterestRedirectionTo(address _to) external;\r\n    function redeem(uint256 _amount) external;\r\n    function principalBalanceOf(address _user) external view returns(uint256);\r\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\r\n    function getUserIndex(address _user) external view returns(uint256);\r\n    function getInterestRedirectionAddress(address _user) external view returns(address);\r\n    function getRedirectedBalance(address _user) external view returns(uint256);\r\n\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface PriceOracle {\r\n    function getUnderlyingPrice(address) external view returns (uint256);\r\n}\r\n\r\n// ---------- Compound ----------\r\n\r\ninterface CErc20 {\r\n\r\n    function borrow(uint256) external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address) external returns (uint256);\r\n\r\n    function repayBorrow(uint256) external returns (uint256);\r\n}\r\n\r\n\r\ninterface CEth {\r\n    function mint() external payable;\r\n\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n}\r\n\r\n\r\ninterface Comptroller {\r\n    function markets(address) external returns (bool, uint256);\r\n\r\n    function enterMarkets(address[] calldata)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    function getAccountLiquidity(address)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256);\r\n\r\n    function oracle() external view returns(address);\r\n}\r\n\r\n// ---------- kyber ----------\r\n\r\ninterface Exchange {\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId )external payable returns(uint);\r\n}\r\n\r\n\r\n// -----tCDP-----\r\n\r\ncontract tCDPConstants {\r\n    uint256 constant dust = 1e6; // minimum mint amount\r\n    ERC20 constant Dai = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); // DAI(debt) token address\r\n\r\n    //Compound\r\n    Comptroller constant comptroller = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    CEth constant cEth = CEth(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    CErc20 constant cDai = CErc20(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n\r\n    //AAVE\r\n    ILendingPoolAddressesProvider constant addressesProvider = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    uint16 constant REFERRAL = 47; // TODO: apply new referral code\r\n\r\n    //Kyber\r\n    Exchange constant kyberNetwork = Exchange(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    address constant etherAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant ref = 0xD0533664013a82c31584B7FFDB215139f38Ad77A;\r\n\r\n    //rebalance target/boundary/size\r\n    uint256 constant targetRatio = 0.4e18; //40%\r\n    uint256 constant upperBound = 444444444444444444; // 1/225%\r\n    uint256 constant lowerBound = 363636363636363636; // 1/275%\r\n    uint256 constant bite = 0.025 * 1e18; //2.5%\r\n}\r\n\r\ncontract tCDP is ERC20Mintable, tCDPConstants{\r\n    using SafeMath for *;\r\n\r\n    bool public isCompound;\r\n\r\n    event Migration(uint8); // 0x01 = to Compound, 0x02 = to Aave\r\n\r\n    constructor() public {\r\n        symbol = \"tETH-DAI\";\r\n        name = \"tokenized CDP ETH-DAI v1\";\r\n        decimals = 18;\r\n\r\n        address lendingPoolCoreAddress = addressesProvider.getLendingPoolCore();\r\n        Dai.approve(lendingPoolCoreAddress, uint256(-1));\r\n        Dai.approve(address(cDai), uint256(-1));\r\n\r\n        address[] memory cTokens = new address[](1);\r\n        cTokens[0] = address(cEth);\r\n        uint256[] memory errors = comptroller.enterMarkets(cTokens);\r\n        require(errors[0] == 0, \"Comptroller.enterMarkets failed.\");\r\n\r\n        Dai.approve(address(kyberNetwork), uint256(-1));\r\n        isCompound = findBestRate();\r\n    }\r\n\r\n    function initiate(uint256 amount) external payable {\r\n        require(_totalSupply < dust, \"initiated\");\r\n        require(msg.value > dust, \"value too small\");\r\n\r\n        if(isCompound) {\r\n            cEth.mint.value(msg.value)();\r\n            _mint(msg.sender, msg.value);\r\n            require(cDai.borrow(amount) == 0, \"borrow failed\");\r\n            Dai.transfer(msg.sender, amount);\r\n        }\r\n        else {\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            lendingPool.deposit.value(msg.value)(etherAddr, msg.value, REFERRAL);\r\n\r\n            _mint(msg.sender, msg.value);\r\n\r\n            lendingPool.borrow(address(Dai), amount, 2, REFERRAL);\r\n            Dai.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function collateral() public returns(uint256) {\r\n        if(isCompound) {\r\n            return cEth.balanceOfUnderlying(address(this));\r\n        }\r\n        else {\r\n            address lendingPoolCore = addressesProvider.getLendingPoolCore();\r\n            address aETH = ILendingPoolCore(lendingPoolCore).getReserveATokenAddress(etherAddr);\r\n            return IAToken(aETH).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function debt() public returns(uint256) {\r\n        if(isCompound) {\r\n            return cDai.borrowBalanceCurrent(address(this));\r\n        }\r\n        else {\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            (, uint256 borrowBalance,,,,,,,,) = lendingPool.getUserReserveData(address(Dai), address(this));\r\n            return borrowBalance;\r\n        }\r\n    }\r\n\r\n    function mint() external payable returns(uint256) {\r\n\r\n        require(_totalSupply >= dust, \"not initiated\");\r\n        uint256 amount = msg.value;\r\n        uint256 tokenToMint = _totalSupply.mul(amount).div(collateral());\r\n        uint256 tokenToBorrow = debt().mul(amount).div(collateral());\r\n        _mint(msg.sender, tokenToMint);\r\n\r\n        if(isCompound) {\r\n            cEth.mint.value(amount)();\r\n            require(cDai.borrow(tokenToBorrow) == 0, \"borrow failed\");\r\n            Dai.transfer(msg.sender, tokenToBorrow);\r\n        }\r\n        else{\r\n            // deposit\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            lendingPool.deposit.value(amount)(etherAddr, amount, REFERRAL);\r\n            // borrow\r\n            lendingPool.borrow(address(Dai), tokenToBorrow, 2, REFERRAL);\r\n            // transfer\r\n            Dai.transfer(msg.sender, tokenToBorrow);\r\n        }\r\n\r\n        return tokenToMint;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n\r\n        uint256 tokenToRepay = amount.mul(debt()).div(_totalSupply);\r\n        uint256 tokenToDraw = amount.mul(collateral()).div(_totalSupply);\r\n        _burn(msg.sender, amount);\r\n        Dai.transferFrom(msg.sender, address(this), tokenToRepay);\r\n\r\n        if(isCompound) {\r\n            require(cDai.repayBorrow(tokenToRepay) == 0, \"repay failed\");\r\n            require(cEth.redeemUnderlying(tokenToDraw) == 0, \"redeem failed\");\r\n        }\r\n        else {\r\n            // repay\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            address lendingPoolCoreAddress = addressesProvider.getLendingPoolCore();\r\n            // Dai.approve(lendingPoolCoreAddress, tokenToRepay);\r\n            lendingPool.repay(address(Dai), tokenToRepay, address(this));\r\n            // redeem\r\n            IAToken aETH = IAToken(ILendingPoolCore(lendingPoolCoreAddress).getReserveATokenAddress(etherAddr));\r\n            aETH.redeem(tokenToDraw);\r\n        }\r\n\r\n        (bool success, ) = msg.sender.call.value(tokenToDraw)(\"\");\r\n        require(success, \"Failed to transfer ether to msg.sender\");\r\n    }\r\n\r\n    function() external payable{}\r\n\r\n    //true if (cEth APR - cDai APR) >= (aEth APR - aDai APR), otherwise, false\r\n    function findBestRate() public view returns (bool) {\r\n        return AaveDaiAPR().mul(targetRatio).div(1e18).add(CompoundEthAPR()) > CompoundDaiAPR().mul(targetRatio).div(1e18).add(AaveEthAPR());\r\n    }\r\n    function CompoundDaiAPR() public view returns (uint256) {\r\n        return cDai.borrowRatePerBlock().mul(2102400);\r\n    }\r\n    function CompoundEthAPR() public view returns (uint256) {\r\n        return cEth.supplyRatePerBlock().mul(2102400);\r\n    }\r\n    function AaveDaiAPR() public view returns (uint256) {\r\n        ILendingPoolCore core = ILendingPoolCore(addressesProvider.getLendingPoolCore());\r\n        return core.getReserveCurrentVariableBorrowRate(address(Dai)).div(1e9);\r\n    }\r\n    function AaveEthAPR() public view returns (uint256) {\r\n        ILendingPoolCore core = ILendingPoolCore(addressesProvider.getLendingPoolCore());\r\n        return core.getReserveCurrentLiquidityRate(etherAddr).div(1e9);\r\n    }\r\n\r\n    function getUnderlyingPrice() public view returns(uint256) {\r\n        uint256 price;\r\n\r\n        if(isCompound) {\r\n            address oracle = comptroller.oracle();\r\n            PriceOracle priceOracle = PriceOracle(oracle);\r\n            price = priceOracle.getUnderlyingPrice(address(cDai));\r\n        }\r\n        else {\r\n            address oracleAddress = addressesProvider.getPriceOracle();\r\n            IAavePriceOracleGetter priceOracle = IAavePriceOracleGetter(oracleAddress);\r\n            price = priceOracle.getAssetPrice(address(Dai));\r\n        }\r\n\r\n        return price;\r\n    }\r\n\r\n    function debtRatio() public returns (uint256) {\r\n        uint256 price = getUnderlyingPrice();\r\n        uint256 ratio = debt().mul(price).div(collateral());\r\n        return ratio;\r\n    }\r\n\r\n    function deleverage() external {\r\n        require(_totalSupply >= dust, \"not initiated\");\r\n        require(debtRatio() > upperBound, \"debt ratio is good\");\r\n        uint256 amount = collateral().mul(bite).div(1e18);\r\n\r\n        if(isCompound) {\r\n            require(cEth.redeemUnderlying(amount) == 0, \"redeem failed\");\r\n            uint256 income = kyberNetwork.trade.value(amount)(etherAddr, amount, address(Dai), address(this), 1e28, 1, ref);\r\n            require(cDai.repayBorrow(income) == 0, \"repay failed\");\r\n        }\r\n        else {\r\n            // redeem\r\n            address lendingPoolCoreAddress = addressesProvider.getLendingPoolCore();\r\n            IAToken aETH = IAToken(ILendingPoolCore(lendingPoolCoreAddress).getReserveATokenAddress(etherAddr));\r\n            aETH.redeem(amount);\r\n            uint256 income = kyberNetwork.trade.value(amount)(etherAddr, amount, address(Dai), address(this), 1e28, 1, ref);\r\n            // repay\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            // Dai.approve(lendingPoolCoreAddress, income);\r\n            lendingPool.repay(address(Dai), income, address(this));\r\n        }\r\n    }\r\n\r\n    function leverage() external {\r\n        require(_totalSupply >= dust, \"not initiated\");\r\n        require(debtRatio() < lowerBound, \"debt ratio is good\");\r\n        uint256 amount = debt().mul(bite).div(1e18);\r\n\r\n        if(isCompound) {\r\n            require(cDai.borrow(amount) == 0, \"borrow failed\");\r\n            uint256 income = kyberNetwork.trade(address(Dai), amount, etherAddr, address(this), 1e28, 1, ref);\r\n            cEth.mint.value(income)();\r\n        }\r\n        else {\r\n            // borrow\r\n            ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n            lendingPool.borrow(address(Dai), amount, 2, REFERRAL);\r\n            uint256 income = kyberNetwork.trade(address(Dai), amount, etherAddr, address(this), 1e28, 1, ref);\r\n            // deposit\r\n            lendingPool.deposit.value(income)(etherAddr, income, REFERRAL);\r\n        }\r\n    }\r\n\r\n    function migrate() external {\r\n        if(findBestRate() != isCompound) {\r\n            uint256 _debt = debt();\r\n            uint256 _collateral = collateral();\r\n            Dai.transferFrom(msg.sender, address(this), _debt);\r\n            uint256 newBorrow = _debt.add(2);\r\n\r\n            if(isCompound) {\r\n                require(cDai.repayBorrow(_debt) == 0, \"borrow failed\");\r\n                require(cEth.redeemUnderlying(_collateral) == 0, \"redeem failed\");\r\n\r\n                ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n                lendingPool.deposit.value(_collateral)(etherAddr, _collateral, REFERRAL);\r\n                lendingPool.borrow(address(Dai), newBorrow, 2, REFERRAL);\r\n\r\n                isCompound = false;\r\n                emit Migration(0x02);\r\n            }\r\n            else {\r\n                ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n                address lendingPoolCoreAddress = addressesProvider.getLendingPoolCore();\r\n                lendingPool.repay(address(Dai), _debt, address(this));\r\n                IAToken aETH = IAToken(ILendingPoolCore(lendingPoolCoreAddress).getReserveATokenAddress(etherAddr));\r\n                aETH.redeem(_collateral);\r\n\r\n                cEth.mint.value(_collateral)();\r\n                require(cDai.borrow(newBorrow) == 0, \"borrow failed\");\r\n\r\n                isCompound = true;\r\n                emit Migration(0x01);\r\n            }\r\n\r\n            Dai.transfer(msg.sender, newBorrow);\r\n        }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"AaveDaiAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AaveEthAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CompoundDaiAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CompoundEthAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"findBestRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"leverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"tCDP","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://057489a05d89ef95399fd2c225b31d79dd31d91ed12572a37ec82cb50605c6da"}]}