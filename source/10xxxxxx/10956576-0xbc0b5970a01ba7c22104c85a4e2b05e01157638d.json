{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n\r\n/**\r\n * @title IModule\r\n * @notice Interface for a module.\r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface IModule {\r\n    /**\r\n     * @notice Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(address _wallet) external;\r\n\r\n    /**\t\r\n     * @notice Adds a module to a wallet. Cannot execute when wallet is locked (or under recovery)\t\r\n     * @param _wallet The target wallet.\t\r\n     * @param _module The modules to authorise.\t\r\n     */\t\r\n    function addModule(address _wallet, address _module) external;\r\n}\r\n\r\n\r\n/**\r\n * @title IWallet\r\n * @notice Interface for the BaseWallet\r\n */\r\ninterface IWallet {\r\n    /**\r\n     * @notice Returns the wallet owner.\r\n     * @return The wallet owner address.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the number of authorised modules.\r\n     * @return The number of authorised modules.\r\n     */\r\n    function modules() external view returns (uint);\r\n\r\n    /**\r\n     * @notice Sets a new owner for the wallet.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function setOwner(address _newOwner) external;\r\n\r\n    /**\r\n     * @notice Checks if a module is authorised on the wallet.\r\n     * @param _module The module address to check.\r\n     * @return `true` if the module is authorised, otherwise `false`.\r\n     */\r\n    function authorised(address _module) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the module responsible for a static call redirection.\r\n     * @param _sig The signature of the static call.\r\n     * @return the module doing the redirection\r\n     */\r\n    function enabled(bytes4 _sig) external view returns (address);\r\n\r\n    /**\r\n     * @notice Enables/Disables a module.\r\n     * @param _module The target module.\r\n     * @param _value Set to `true` to authorise the module.\r\n     */\r\n    function authoriseModule(address _module, bool _value) external;\r\n\r\n    /**\r\n    * @notice Enables a static method by specifying the target module to which the call must be delegated.\r\n    * @param _module The target module.\r\n    * @param _method The static method signature.\r\n    */\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BaseWallet\r\n * @notice Simple modular wallet that authorises modules to call its invoke() method.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet is IWallet {\r\n\r\n    // The implementation of the proxy\r\n    address public implementation;\r\n    // The owner\r\n    address public override owner;\r\n    // The authorised modules\r\n    mapping (address => bool) public override authorised;\r\n    // The enabled static calls\r\n    mapping (bytes4 => address) public override enabled;\r\n    // The number of modules\r\n    uint public override modules;\r\n\r\n    event AuthorisedModule(address indexed module, bool value);\r\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\r\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n    event OwnerChanged(address owner);\r\n\r\n    /**\r\n     * @notice Throws if the sender is not an authorised module.\r\n     */\r\n    modifier moduleOnly {\r\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Inits the wallet by setting the owner and authorising a list of modules.\r\n     * @param _owner The owner.\r\n     * @param _modules The modules to authorise.\r\n     */\r\n    function init(address _owner, address[] calldata _modules) external {\r\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\r\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\r\n        owner = _owner;\r\n        modules = _modules.length;\r\n        for (uint256 i = 0; i < _modules.length; i++) {\r\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\r\n            authorised[_modules[i]] = true;\r\n            IModule(_modules[i]).init(address(this));\r\n            emit AuthorisedModule(_modules[i], true);\r\n        }\r\n        if (address(this).balance > 0) {\r\n            emit Received(address(this).balance, address(0), \"\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IWallet\r\n     */\r\n    function authoriseModule(address _module, bool _value) external override moduleOnly {\r\n        if (authorised[_module] != _value) {\r\n            emit AuthorisedModule(_module, _value);\r\n            if (_value == true) {\r\n                modules += 1;\r\n                authorised[_module] = true;\r\n                IModule(_module).init(address(this));\r\n            } else {\r\n                modules -= 1;\r\n                require(modules > 0, \"BW: wallet must have at least one module\");\r\n                delete authorised[_module];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @inheritdoc IWallet\r\n    */\r\n    function enableStaticCall(address _module, bytes4 _method) external override moduleOnly {\r\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\r\n        enabled[_method] = _module;\r\n        emit EnabledStaticCall(_module, _method);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IWallet\r\n     */\r\n    function setOwner(address _newOwner) external override moduleOnly {\r\n        require(_newOwner != address(0), \"BW: address cannot be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a generic transaction.\r\n     * @param _target The address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invoke(address _target, uint _value, bytes calldata _data) external moduleOnly returns (bytes memory _result) {\r\n        bool success;\r\n        (success, _result) = _target.call{value: _value}(_data);\r\n        if (!success) {\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n        emit Invoked(msg.sender, _target, _value, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice This method delegates the static call to a target contract if the data corresponds\r\n     * to an enabled module, or logs the call otherwise.\r\n     */\r\n    fallback() external payable {\r\n        address module = enabled[msg.sig];\r\n        if (module == address(0)) {\r\n            emit Received(msg.value, msg.sender, msg.data);\r\n        } else {\r\n            require(authorised[module], \"BW: must be an authorised module for static call\");\r\n\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                calldatacopy(0, 0, calldatasize())\r\n                let result := staticcall(gas(), module, 0, calldatasize(), 0, 0)\r\n                returndatacopy(0, 0, returndatasize())\r\n                switch result\r\n                case 0 {revert(0, returndatasize())}\r\n                default {return (0, returndatasize())}\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AuthorisedModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"}],\"name\":\"EnabledStaticCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Invoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Received\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"authoriseModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"enableStaticCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invoke\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BaseWallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1f9bf5f55db61d0fbbd8e1f9d7d34945e51fb700926c85357e6881cac5ed19a5"}]}