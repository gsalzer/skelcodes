{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/sogur/interfaces/IRedButton.sol\n\n/**\n * @title Red Button Interface.\n */\ninterface IRedButton {\n    /**\n     * @dev Get the state of the red-button.\n     * @return The state of the red-button.\n     */\n    function isEnabled() external view returns (bool);\n}\n\n// File: contracts/sogur/interfaces/IPaymentManager.sol\n\n/**\n * @title Payment Manager Interface.\n */\ninterface IPaymentManager {\n    /**\n     * @dev Retrieve the current number of outstanding payments.\n     * @return The current number of outstanding payments.\n     */\n    function getNumOfPayments() external view returns (uint256);\n\n    /**\n     * @dev Retrieve the sum of all outstanding payments.\n     * @return The sum of all outstanding payments.\n     */\n    function getPaymentsSum() external view returns (uint256);\n\n    /**\n     * @dev Compute differ payment.\n     * @param _ethAmount The amount of ETH entitled by the client.\n     * @param _ethBalance The amount of ETH retained by the payment handler.\n     * @return The amount of differed ETH payment.\n     */\n    function computeDifferPayment(uint256 _ethAmount, uint256 _ethBalance) external view returns (uint256);\n\n    /**\n     * @dev Register a differed payment.\n     * @param _wallet The payment wallet address.\n     * @param _ethAmount The payment amount in ETH.\n     */\n    function registerDifferPayment(address _wallet, uint256 _ethAmount) external;\n}\n\n// File: contracts/sogur/interfaces/IReserveManager.sol\n\n/**\n * @title Reserve Manager Interface.\n */\ninterface IReserveManager {\n    /**\n     * @dev Get a deposit-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to deposit ETH into the token-contract.\n     * @return The amount that should be deposited in order for the balance to reach `mid` ETH.\n     */\n    function getDepositParams(uint256 _balance) external view returns (address, uint256);\n\n    /**\n     * @dev Get a withdraw-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to withdraw ETH into the token-contract.\n     * @return The amount that should be withdrawn in order for the balance to reach `mid` ETH.\n     */\n    function getWithdrawParams(uint256 _balance) external view returns (address, uint256);\n}\n\n// File: contracts/sogur/interfaces/ISGRTokenManager.sol\n\n/**\n * @title SGR Token Manager Interface.\n */\ninterface ISGRTokenManager {\n    /**\n     * @dev Exchange ETH for SGR.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGR that the sender is entitled to.\n     */\n    function exchangeEthForSgr(address _sender, uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Handle after the ETH for SGR exchange operation.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @param _sgrAmount The amount of SGR given.\n     */\n    function afterExchangeEthForSgr(address _sender, uint256 _ethAmount, uint256 _sgrAmount) external;\n\n    /**\n     * @dev Exchange SGR for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgrAmount The amount of SGR received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgrForEth(address _sender, uint256 _sgrAmount) external returns (uint256);\n\n    /**\n     * @dev Handle after the SGR for ETH exchange operation.\n     * @param _sender The address of the sender.\n     * @param _sgrAmount The amount of SGR received.\n     * @param _ethAmount The amount of ETH given.\n     * @return The is success result.\n     */\n    function afterExchangeSgrForEth(address _sender, uint256 _sgrAmount, uint256 _ethAmount) external returns (bool);\n\n    /**\n     * @dev Handle direct SGR transfer.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\n\n\n    /**\n     * @dev Handle after direct SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferResult The transfer result.\n     * @return is success result.\n     */\n    function afterTransfer(address _sender, address _to, uint256 _value, bool _transferResult) external returns (bool);\n\n    /**\n     * @dev Handle custodian SGR transfer.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle after custodian SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferFromResult The transferFrom result.\n     * @return is success result.\n     */\n    function afterTransferFrom(address _sender, address _from, address _to, uint256 _value, bool _transferFromResult) external returns (bool);\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external returns (address, uint256);\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external returns (address, uint256);\n\n    /**\n     * @dev Handle after ETH withdrawal from the SGRToken contract operation.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _wallet The address of the withdrawal wallet.\n     * @param _amount The ETH withdraw amount.\n     * @param _priorWithdrawEthBalance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @param _afterWithdrawEthBalance The amount of ETH in the SGRToken contract after the withdrawal.\n     */\n    function afterWithdraw(address _sender, address _wallet, uint256 _amount, uint256 _priorWithdrawEthBalance, uint256 _afterWithdrawEthBalance) external;\n\n    /** \n     * @dev Upon SGR mint for SGN holders.\n     * @param _value The amount of SGR to mint.\n     */\n    function uponMintSgrForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Handle after SGR mint for SGN holders.\n     * @param _value The minted amount of SGR.\n     */\n    function afterMintSgrForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Upon SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGR to transfer.\n     */\n    function uponTransferSgrToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle after SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The transferred amount of SGR.\n     */\n    function afterTransferSgrToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Upon ETH transfer to an SGR holder.\n     * @param _to The address of the SGR holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation's completion-status.\n     */\n    function postTransferEthToSgrHolder(address _to, uint256 _value, bool _status) external;\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function getDepositParams() external view returns (address, uint256);\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256);\n}\n\n// File: contracts/sogur/interfaces/ITransactionManager.sol\n\n/**\n * @title Transaction Manager Interface.\n */\ninterface ITransactionManager {\n    /**\n     * @dev Buy SGR in exchange for ETH.\n     * @param _ethAmount The amount of ETH received from the buyer.\n     * @return The amount of SGR that the buyer is entitled to receive.\n     */\n    function buy(uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Sell SGR in exchange for ETH.\n     * @param _sgrAmount The amount of SGR received from the seller.\n     * @return The amount of ETH that the seller is entitled to receive.\n     */\n    function sell(uint256 _sgrAmount) external returns (uint256);\n}\n\n// File: contracts/sogur/interfaces/ISGRAuthorizationManager.sol\n\n/**\n * @title SGR Authorization Manager Interface.\n */\ninterface ISGRAuthorizationManager {\n    /**\n     * @dev Determine whether or not a user is authorized to buy SGR.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToBuy(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to sell SGR.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToSell(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGR to another user.\n     * @param _sender The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGR from one user to another user.\n     * @param _sender The address of the custodian user.\n     * @param _source The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized for public operation.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _ISogurExchanger_           = \"ISogurExchanger\"          ;\n    bytes32 internal constant _SgnToSgrExchangeInitiator_ = \"SgnToSgrExchangeInitiator\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGRAuthorizationManager_ = \"ISGRAuthorizationManager\";\n    bytes32 internal constant _ISGRToken_                = \"ISGRToken\"               ;\n    bytes32 internal constant _ISGRTokenManager_         = \"ISGRTokenManager\"        ;\n    bytes32 internal constant _ISGRTokenInfo_         = \"ISGRTokenInfo\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = \"BuyWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = \"SellWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n    bytes32 internal constant _SGAToSGRInitializer_      = \"SGAToSGRInitializer\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\n\n/**\n * @title Wallets Trading Limiter Interface.\n */\ninterface IWalletsTradingLimiter {\n    /**\n     * @dev Increment the limiter value of a wallet.\n     * @param _wallet The address of the wallet.\n     * @param _value The amount to be updated.\n     */\n    function updateWallet(address _wallet, uint256 _value) external;\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/sogur/SGRTokenManager.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title SGR Token Manager.\n */\ncontract SGRTokenManager is ISGRTokenManager, ContractAddressLocatorHolder {\n    string public constant VERSION = \"2.0.0\";\n\n    using SafeMath for uint256;\n\n    event ExchangeEthForSgrCompleted(address indexed _user, uint256 _input, uint256 _output);\n    event ExchangeSgrForEthCompleted(address indexed _user, uint256 _input, uint256 _output);\n    event MintSgrForSgnHoldersCompleted(uint256 _value);\n    event TransferSgrToSgnHolderCompleted(address indexed _to, uint256 _value);\n    event TransferEthToSgrHolderCompleted(address indexed _to, uint256 _value, bool _status);\n    event DepositCompleted(address indexed _sender, uint256 _balance, uint256 _amount);\n    event WithdrawCompleted(address indexed _sender, uint256 _balance, uint256 _amount);\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the ISGRAuthorizationManager interface.\n     */\n    function getSGRAuthorizationManager() public view returns (ISGRAuthorizationManager) {\n        return ISGRAuthorizationManager(getContractAddress(_ISGRAuthorizationManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the ITransactionManager interface.\n     */\n    function getTransactionManager() public view returns (ITransactionManager) {\n        return ITransactionManager(getContractAddress(_ITransactionManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IWalletsTradingLimiter interface.\n     */\n    function getSellWalletsTradingLimiter() public view returns (IWalletsTradingLimiter) {\n        return IWalletsTradingLimiter(getContractAddress(_SellWalletsTradingLimiter_SGRTokenManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IWalletsTradingLimiter interface.\n     */\n    function getBuyWalletsTradingLimiter() public view returns (IWalletsTradingLimiter) {\n        return IWalletsTradingLimiter(getContractAddress(_BuyWalletsTradingLimiter_SGRTokenManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IReserveManager interface.\n     */\n    function getReserveManager() public view returns (IReserveManager) {\n        return IReserveManager(getContractAddress(_IReserveManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IPaymentManager interface.\n     */\n    function getPaymentManager() public view returns (IPaymentManager) {\n        return IPaymentManager(getContractAddress(_IPaymentManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IRedButton interface.\n     */\n    function getRedButton() public view returns (IRedButton) {\n        return IRedButton(getContractAddress(_IRedButton_));\n    }\n\n    /**\n     * @dev Reverts if called when the red button is enabled.\n     */\n    modifier onlyIfRedButtonIsNotEnabled() {\n        require(!getRedButton().isEnabled(), \"red button is enabled\");\n        _;\n    }\n\n    /**\n     * @dev Exchange ETH for SGR.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGR that the sender is entitled to.\n     */\n    function exchangeEthForSgr(address _sender, uint256 _ethAmount) external only(_ISGRToken_) onlyIfRedButtonIsNotEnabled returns (uint256) {\n        require(getSGRAuthorizationManager().isAuthorizedToBuy(_sender), \"exchanging ETH for SGR is not authorized\");\n        uint256 sgrAmount = getTransactionManager().buy(_ethAmount);\n        emit ExchangeEthForSgrCompleted(_sender, _ethAmount, sgrAmount);\n        getBuyWalletsTradingLimiter().updateWallet(_sender, sgrAmount);\n        return sgrAmount;\n    }\n\n    /**\n     * @dev Handle after the ETH for SGR exchange operation.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @param _sgrAmount The amount of SGR given.\n     */\n    function afterExchangeEthForSgr(address _sender, uint256 _ethAmount, uint256 _sgrAmount) external {\n        _sender;\n        _ethAmount;\n        _sgrAmount;\n    }\n\n\n    /**\n     * @dev Exchange SGR for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgrAmount The amount of SGR received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgrForEth(address _sender, uint256 _sgrAmount) external only(_ISGRToken_) onlyIfRedButtonIsNotEnabled returns (uint256) {\n        require(getSGRAuthorizationManager().isAuthorizedToSell(_sender), \"exchanging SGR for ETH is not authorized\");\n        uint256 ethAmount = getTransactionManager().sell(_sgrAmount);\n        emit ExchangeSgrForEthCompleted(_sender, _sgrAmount, ethAmount);\n        getSellWalletsTradingLimiter().updateWallet(_sender, _sgrAmount);\n        IPaymentManager paymentManager = getPaymentManager();\n        uint256 paymentETHAmount = paymentManager.computeDifferPayment(ethAmount, msg.sender.balance);\n        if (paymentETHAmount > 0)\n            paymentManager.registerDifferPayment(_sender, paymentETHAmount);\n        assert(ethAmount >= paymentETHAmount);\n        return ethAmount - paymentETHAmount;\n    }\n\n    /**\n    * @dev Handle after the SGR for ETH exchange operation.\n    * @param _sender The address of the sender.\n    * @param _sgrAmount The amount of SGR received.\n    * @param _ethAmount The amount of ETH given.\n    * @return The is success result.\n    */\n    function afterExchangeSgrForEth(address _sender, uint256 _sgrAmount, uint256 _ethAmount) external returns (bool) {\n        _sender;\n        _sgrAmount;\n        _ethAmount;\n        return true;\n    }\n\n\n    /**\n     * @dev Handle direct SGR transfer.\n     * @dev Any authorization not required.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external only(_ISGRToken_) {\n        _sender;\n        _to;\n        _value;\n    }\n\n    /**\n     * @dev Handle after direct SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferResult The transfer result.\n     * @return is success result.\n     */\n    function afterTransfer(address _sender, address _to, uint256 _value, bool _transferResult) external returns (bool) {\n        _sender;\n        _to;\n        _value;\n        return _transferResult;\n    }\n\n    /**\n     * @dev Handle custodian SGR transfer.\n     * @dev Any authorization not required.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external only(_ISGRToken_) {\n        _sender;\n        _from;\n        _to;\n        _value;\n    }\n\n    /**\n     * @dev Handle after custodian SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferFromResult The transferFrom result.\n     * @return is success result.\n     */\n    function afterTransferFrom(address _sender, address _from, address _to, uint256 _value, bool _transferFromResult) external returns (bool) {\n        _sender;\n        _from;\n        _to;\n        _value;\n        return _transferFromResult;\n    }\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external only(_ISGRToken_) returns (address, uint256) {\n        uint256 ethBalancePriorToDeposit = _balance.sub(_amount);\n        (address wallet, uint256 recommendationAmount) = getReserveManager().getDepositParams(ethBalancePriorToDeposit);\n        require(wallet == _sender, \"caller is illegal\");\n        require(recommendationAmount > 0, \"operation is not required\");\n        emit DepositCompleted(_sender, ethBalancePriorToDeposit, _amount);\n        return (wallet, recommendationAmount);\n    }\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external only(_ISGRToken_) returns (address, uint256) {\n        require(getSGRAuthorizationManager().isAuthorizedForPublicOperation(_sender), \"withdraw is not authorized\");\n        (address wallet, uint256 amount) = getReserveManager().getWithdrawParams(_balance);\n        require(wallet != address(0), \"caller is illegal\");\n        require(amount > 0, \"operation is not required\");\n        emit WithdrawCompleted(_sender, _balance, amount);\n        return (wallet, amount);\n    }\n\n    /**\n     * @dev Handle after ETH withdrawal from the SGRToken contract operation.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _wallet The address of the withdrawal wallet.\n     * @param _amount The ETH withdraw amount.\n     * @param _priorWithdrawEthBalance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @param _afterWithdrawEthBalance The amount of ETH in the SGRToken contract after the withdrawal.\n     */\n    function afterWithdraw(address _sender, address _wallet, uint256 _amount, uint256 _priorWithdrawEthBalance, uint256 _afterWithdrawEthBalance) external {\n        _sender;\n        _wallet;\n        _amount;\n        _priorWithdrawEthBalance;\n        _afterWithdrawEthBalance;\n    }\n    /** \n     * @dev Upon SGR mint for SGN holders.\n     * @param _value The amount of SGR to mint.\n     */\n    function uponMintSgrForSgnHolders(uint256 _value) external only(_ISGRToken_) {\n        emit MintSgrForSgnHoldersCompleted(_value);\n    }\n\n    /**\n     * @dev Handle after SGR mint for SGN holders.\n     * @param _value The minted amount of SGR.\n     */\n    function afterMintSgrForSgnHolders(uint256 _value) external {\n        _value;\n    }\n\n    /**\n     * @dev Upon SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGR to transfer.\n     */\n    function uponTransferSgrToSgnHolder(address _to, uint256 _value) external only(_ISGRToken_) onlyIfRedButtonIsNotEnabled {\n        emit TransferSgrToSgnHolderCompleted(_to, _value);\n    }\n\n    /**\n     * @dev Handle after SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The transferred amount of SGR.\n     */\n    function afterTransferSgrToSgnHolder(address _to, uint256 _value) external {\n        _to;\n        _value;\n    }\n\n    /**\n     * @dev Upon ETH transfer to an SGR holder.\n     * @param _to The address of the SGR holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation's completion-status.\n     */\n    function postTransferEthToSgrHolder(address _to, uint256 _value, bool _status) external only(_ISGRToken_) {\n        emit TransferEthToSgrHolderCompleted(_to, _value, _status);\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function getDepositParams() external view only(_ISGRToken_) returns (address, uint256) {\n        return getReserveManager().getDepositParams(msg.sender.balance);\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function getWithdrawParams() external view only(_ISGRToken_) returns (address, uint256) {\n        return getReserveManager().getWithdrawParams(msg.sender.balance);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSGRAuthorizationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponMintSgrForSgnHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_transferFromResult\",\"type\":\"bool\"}],\"name\":\"afterTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_transferResult\",\"type\":\"bool\"}],\"name\":\"afterTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_sgrAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeSgrForEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRedButton\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"afterMintSgrForSgnHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_priorWithdrawEthBalance\",\"type\":\"uint256\"},{\"name\":\"_afterWithdrawEthBalance\",\"type\":\"uint256\"}],\"name\":\"afterWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserveManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponTransferSgrToSgnHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_sgrAmount\",\"type\":\"uint256\"}],\"name\":\"afterExchangeEthForSgr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositParams\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransactionManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"postTransferEthToSgrHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"uponWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaymentManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyWalletsTradingLimiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uponTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeEthForSgr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawParams\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_sgrAmount\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"afterExchangeSgrForEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellWalletsTradingLimiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"uponDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"afterTransferSgrToSgnHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_input\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_output\",\"type\":\"uint256\"}],\"name\":\"ExchangeEthForSgrCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_input\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_output\",\"type\":\"uint256\"}],\"name\":\"ExchangeSgrForEthCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MintSgrForSgnHoldersCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSgrToSgnHolderCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"TransferEthToSgrHolderCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"}]","ContractName":"SGRTokenManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}