{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract Ethage {\r\n\r\n    struct User {\r\n        uint128 mtx3Block;\r\n        uint128 mtx6Block;\r\n        address parent;\r\n    }\r\n\r\n    uint128 public constant NO_OF_BLOCKS = 12;\r\n\r\n    mapping(address => User) public users;\r\n\r\n    mapping(uint256 => uint256) public blockPriceMtx3;\r\n    mapping(uint256 => uint256) public blockPriceMtx6;\r\n\r\n    address owner;\r\n    address ai;\r\n    uint public aiGasCode = 0.009 ether;\r\n\r\n    event Registration(address indexed user, address indexed referrer);\r\n    event Upgrade(address indexed user, uint256 matrix, uint256 blockLevel);\r\n\r\n    constructor(address ownerAddress, address a, address b, address c, address d, address e) public {\r\n\r\n        blockPriceMtx3[1] = 0.03 ether;\r\n        blockPriceMtx3[2] = 0.06 ether;\r\n        blockPriceMtx3[3] = 0.12 ether;\r\n        blockPriceMtx3[4] = 0.24 ether;\r\n        blockPriceMtx3[5] = 0.5 ether;\r\n        blockPriceMtx3[6] = 1.0 ether;\r\n        blockPriceMtx3[7] = 2.0 ether;\r\n        blockPriceMtx3[8] = 4.0 ether;\r\n        blockPriceMtx3[9] = 8.0 ether;\r\n        blockPriceMtx3[10] = 16.0 ether;\r\n        blockPriceMtx3[11] = 32.0 ether;\r\n        blockPriceMtx3[12] = 64.0 ether;\r\n\r\n        blockPriceMtx6[1] = 0.02 ether;\r\n        blockPriceMtx6[2] = 0.06 ether;\r\n        blockPriceMtx6[3] = 0.12 ether;\r\n        blockPriceMtx6[4] = 0.24 ether;\r\n        blockPriceMtx6[5] = 0.5 ether;\r\n        blockPriceMtx6[6] = 1.0 ether;\r\n        blockPriceMtx6[7] = 2.0 ether;\r\n        blockPriceMtx6[8] = 4.0 ether;\r\n        blockPriceMtx6[9] = 8.0 ether;\r\n        blockPriceMtx6[10] = 16.0 ether;\r\n        blockPriceMtx6[11] = 32.0 ether;\r\n        blockPriceMtx6[12] = 64.0 ether;\r\n\r\n\r\n        ai = msg.sender;\r\n        owner = ownerAddress;\r\n\r\n        User memory user = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : address(0)\r\n            });\r\n\r\n        users[ownerAddress] = user;\r\n\r\n        init(a, b, c, d, e);\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) private pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    modifier onlyAiRelay {\r\n        require(\r\n            msg.sender == ai,\r\n            \"Only Ai Relay can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].mtx3Block != 0);\r\n    }\r\n\r\n    function init(address a, address b, address c, address d, address e) private {\r\n        User memory userA = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : owner\r\n            });\r\n\r\n        users[a] = userA;\r\n\r\n        User memory userB = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : owner\r\n            });\r\n\r\n        users[b] = userB;\r\n\r\n        User memory userC = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : a\r\n            });\r\n\r\n        users[c] = userC;\r\n\r\n        User memory userD = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : a\r\n            });\r\n\r\n        users[d] = userD;\r\n\r\n        User memory userE = User({\r\n            mtx3Block : NO_OF_BLOCKS,\r\n            mtx6Block : NO_OF_BLOCKS,\r\n            parent : b\r\n            });\r\n\r\n        users[e] = userE;\r\n    }\r\n\r\n    function nextAvailableBlockMtx3(uint256 blockLevel) public view returns (bool){\r\n        uint256 nextAvailable = users[msg.sender].mtx3Block + 1;\r\n        return (nextAvailable == blockLevel);\r\n    }\r\n\r\n    function nextAvailableBlockMtx6(uint256 blockLevel) public view returns (bool){\r\n        uint256 nextAvailable = users[msg.sender].mtx6Block + 1;\r\n        return (nextAvailable == blockLevel);\r\n    }\r\n\r\n\r\n    function signUp(address referrerAddress) external payable {\r\n        require(msg.value == safeAdd(0.05 ether, aiGasCode), \"sign up cost 0.05 + AI Price\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        require(!isUserExists(msg.sender), \"user exists\");\r\n\r\n        User memory user = User({\r\n            mtx3Block : 1,\r\n            mtx6Block : 1,\r\n            parent : referrerAddress\r\n            });\r\n\r\n        users[msg.sender] = user;\r\n        emit Registration(msg.sender, referrerAddress);\r\n\r\n        if (!address(uint160(ai)).send(aiGasCode)) {\r\n            address(uint160(ai)).transfer(aiGasCode);\r\n        }\r\n\r\n    }\r\n\r\n    function purchaseMtx3(uint256 blockLevel) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Sign Up first.\");\r\n        require(msg.value == safeAdd(blockPriceMtx3[blockLevel], aiGasCode), \"invalid price\");\r\n        require(blockLevel > 1 && blockLevel <= NO_OF_BLOCKS, 'invalid block');\r\n        require(nextAvailableBlockMtx3(blockLevel), \"invalid block\");\r\n\r\n        users[msg.sender].mtx3Block++;\r\n        emit Upgrade(msg.sender, 1, blockLevel);\r\n\r\n        if (!address(uint160(ai)).send(aiGasCode)) {\r\n            address(uint160(ai)).transfer(aiGasCode);\r\n        }\r\n    }\r\n\r\n    function purchaseMtx6(uint256 blockLevel) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Sign Up first.\");\r\n        uint requiredPrice = safeAdd(blockPriceMtx6[blockLevel], aiGasCode);\r\n        require(msg.value == requiredPrice, \"invalid price\");\r\n        require(blockLevel > 1 && blockLevel <= NO_OF_BLOCKS, 'invalid block');\r\n        require(nextAvailableBlockMtx6(blockLevel), \"invalid block\");\r\n\r\n        users[msg.sender].mtx6Block++;\r\n        emit Upgrade(msg.sender, 2, blockLevel);\r\n\r\n        if (!address(uint160(ai)).send(aiGasCode)) {\r\n            address(uint160(ai)).transfer(aiGasCode);\r\n        }\r\n\r\n    }\r\n\r\n    function signUpDividend(address mtx3Receiver, address mtx6Receiver, uint8 nonce) public onlyAiRelay {\r\n        require(isUserExists(mtx3Receiver), \"mtx3Receiver does not exist.\");\r\n        require(isUserExists(mtx6Receiver), \"mtx6Receiver does not exist.\");\r\n        require(nonce > 0, \"invalid nonce\");\r\n        if (!address(uint160(mtx3Receiver)).send(blockPriceMtx3[1])) {\r\n            address(uint160(mtx3Receiver)).transfer(blockPriceMtx3[1]);\r\n        }\r\n\r\n        if (!address(uint160(mtx6Receiver)).send(blockPriceMtx6[1])) {\r\n            address(uint160(mtx6Receiver)).transfer(blockPriceMtx6[1]);\r\n        }\r\n    }\r\n\r\n\r\n    function dividend(address receiver, uint matrix, uint blockLevel, uint8 nonce) public onlyAiRelay {\r\n        require(isUserExists(receiver), \"receiver does not exist.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(nonce > 0, \"invalid nonce\");\r\n        if (matrix == 1) {\r\n            sendDividendMtx3(receiver, blockLevel);\r\n        } else {\r\n            sendDividendMtx6(receiver, blockLevel);\r\n        }\r\n\r\n    }\r\n\r\n    function usersActiveX3Block(address userAddress, uint8 level) public view returns (bool) {\r\n        return users[userAddress].mtx3Block >= level;\r\n    }\r\n\r\n    function usersActiveX6Block(address userAddress, uint8 level) public view returns (bool) {\r\n        return users[userAddress].mtx6Block >= level;\r\n    }\r\n\r\n    function getUser(address userAddress) public view returns (uint128, uint128, address) {\r\n        return (users[userAddress].mtx3Block,\r\n        users[userAddress].mtx6Block,\r\n        users[userAddress].parent);\r\n    }\r\n\r\n    function sendDividendMtx3(address receiver, uint blockLevel) private {\r\n        if (!address(uint160(receiver)).send(blockPriceMtx3[blockLevel])) {\r\n            address(uint160(receiver)).transfer(blockPriceMtx3[blockLevel]);\r\n        }\r\n    }\r\n\r\n    function sendDividendMtx6(address receiver, uint blockLevel) private {\r\n        if (!address(uint160(receiver)).send(blockPriceMtx6[blockLevel])) {\r\n            address(uint160(receiver)).transfer(blockPriceMtx6[blockLevel]);\r\n        }\r\n    }\r\n\r\n    function updateAiGasCode(uint gas) public onlyAiRelay {\r\n        aiGasCode = gas;\r\n    }\r\n\r\n    function updateAiAggregator(address aiProvider) public onlyAiRelay {\r\n        ai = aiProvider;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_OF_BLOCKS\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aiGasCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockPriceMtx3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockPriceMtx6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"matrix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"nonce\",\"type\":\"uint8\"}],\"name\":\"dividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"}],\"name\":\"nextAvailableBlockMtx3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"}],\"name\":\"nextAvailableBlockMtx6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"}],\"name\":\"purchaseMtx3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLevel\",\"type\":\"uint256\"}],\"name\":\"purchaseMtx6\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mtx3Receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mtx6Receiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nonce\",\"type\":\"uint8\"}],\"name\":\"signUpDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aiProvider\",\"type\":\"address\"}],\"name\":\"updateAiAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"updateAiGasCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"mtx3Block\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"mtx6Block\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Block\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Block\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ethage","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000007b2dbd2936d2acd9c49a31f13a22b3d5514dc35000000000000000000000000fcd7374236584f25389d8bf4cc69a21d17ffd6bf00000000000000000000000028b893c17d0b75a50ad5803579713bee0772f50a000000000000000000000000e272406b7e0a7413af4c2f2c54d60ae9c56e2b2300000000000000000000000075f3140f3be67120e890bb7e416b5c85faed7ddf0000000000000000000000001fd8a5d41e136241f6bdb0ecee2afe3018d1d203","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b7c436380b529c03949d21dd4c4f3aeaf40c65f53016a6a66181beca2be972b"}]}