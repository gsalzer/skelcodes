{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Testnet {\r\n    \r\n    uint256 public Flashhold_balance;\r\n    uint256 public get_balance;\r\n    \r\n    uint256 public tokenbalance;\r\n    uint256 public ethbalance;\r\n    uint256 public blocktimex;\r\n    \r\n    mapping(uint256 => uint256) \t\tpublic Session_Balance; \r\n\t\r\n\tfunction Flashhold(uint256 amount)  public {\r\n\r\n\t\tuint256 newbalance\t\t= add(Flashhold_balance, amount) ;\r\n\t\tFlashhold_balance \t\t= newbalance;\r\n\t\t\r\n\t\t\tfor(uint256 i = 1; i < 85; i++) {            \r\n\t\t\tSession_Balance[i] = add(Session_Balance[i], 10000);\r\n\t\t\t}\t\r\n    }\r\n    \r\n    \r\n    function checksupply(address tokenAddress) public { \r\n\t\t\t\t\t\t\t\t\r\n\r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        uint256 xxx = token.totalSupply();\r\n        \r\n        uint256 newbalance\t= add(get_balance, xxx) ;\r\n\t\tget_balance \t\t= newbalance;\r\n    \r\n  } \r\n  \r\n      function addsupply(uint256 amount) public { \r\n\t\t\t\t\t\t\t\t\r\n        uint256 newbalance\t= add(get_balance, amount) ;\r\n\t\tget_balance \t\t= newbalance;\r\n    \r\n  } \r\n  \r\n      function resetbalance() public { \r\n\t\t\t\t\t\t\t\t\r\n        get_balance = 0;\r\n    \r\n  } \r\n  \r\n  \r\n  \r\n      function getreserve(address tokenAddress) public { \r\n\t\t\t\t\t\t\t\t\r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n\t\t(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = token.getReserves();\r\n        \r\n        uint256 newbalance1\t= add(tokenbalance, _reserve0) ;\r\n\t\ttokenbalance \t\t= newbalance1;\r\n\t\t\r\n\t\tuint256 newbalance2\t= add(ethbalance, _reserve0) ;\r\n\t\tethbalance \t\t    = newbalance2;\r\n\t\t\r\n\t\tblocktimex = _blockTimestampLast;\r\n    \r\n  } \r\n    \r\n\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\t/*==============================\r\n    =        ERC20 Interface       =\r\n    ==============================*/ \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\t\r\n\tfunction burn(uint256 _value) public returns (bool success);\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"blocktimex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Session_Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Flashhold_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addsupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getreserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Flashhold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"checksupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetbalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Testnet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://df1baa61b55b26748002e4ca34c90f74bf201b57a89505690ec11ff9d1278a99"}]}