{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/StrategySwerveUSD.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n\r\n/*\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n*/\r\n\r\ninterface SSUSDController {\r\n  function vaults(address) external view returns (address);\r\n  function rewards() external view returns (address);\r\n}\r\n\r\ninterface SSUSDGauge {\r\n  function deposit(uint) external;\r\n  function balanceOf(address) external view returns (uint);\r\n  function withdraw(uint) external;\r\n}\r\n\r\ninterface SSUSDMintr {\r\n  function mint(address) external;\r\n}\r\n\r\ninterface SSUSDUniswapRouter {\r\n  function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ninterface ISwerveFi {\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[4] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[4] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from,\r\n    int128 to,\r\n    uint256 _from_amount,\r\n    uint256 _min_to_amount\r\n  ) external;\r\n  function calc_token_amount(\r\n    uint256[4] calldata amounts,\r\n    bool deposit\r\n  ) external view returns(uint);\r\n  function calc_withdraw_one_coin(\r\n    uint256 _token_amount,\r\n    int128 i) external view returns (uint256);\r\n  function remove_liquidity_one_coin(\r\n    uint256 _token_amount,\r\n    int128 i,\r\n    uint256 min_amount) external;\r\n}\r\n\r\ncontract StrategySwerveUSD {\r\n  using Address for address;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  enum TokenIndex {\r\n    DAI,\r\n    USDC,\r\n    USDT,\r\n    TUSD\r\n  }\r\n\r\n  mapping(uint256 => address) public tokenIndexAddress;\r\n  address public want;\r\n  // the matching enum record used to determine the index\r\n  TokenIndex tokenIndex;\r\n  address constant public swusd = address(0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059); // (swerve combo Swerve.fi DAI/USDC/USDT/TUSD (swUSD))\r\n  address constant public curve = address(0xa746c67eB7915Fa832a4C2076D403D4B68085431);\r\n  address constant public gauge = address(0xb4d0C929cD3A1FbDc6d57E7D3315cF0C4d6B4bFa);\r\n  address constant public mintr = address(0x2c988c3974AD7E604E276AE0294a7228DEf67974);\r\n  address constant public swrv = address(0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433);\r\n  address constant public uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for swrv <> weth <> want route\r\n  // liquidation path to be used\r\n  address[] public uniswap_swrv2want;\r\n\r\n  uint public performanceFee = 600;\r\n  uint constant public performanceMax = 10000;\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor(uint256 _tokenIndex, address _controller) public {\r\n    tokenIndexAddress[0] = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    tokenIndexAddress[1] = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    tokenIndexAddress[2] = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    tokenIndexAddress[3] = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    tokenIndex = TokenIndex(_tokenIndex);\r\n    want = tokenIndexAddress[_tokenIndex];\r\n    uniswap_swrv2want = [swrv, weth, want];\r\n    governance = tx.origin;\r\n    controller = _controller;\r\n  }\r\n\r\n  function getName() external pure returns (string memory) {\r\n    return \"StrategySwerveUSD\";\r\n  }\r\n\r\n  function setPerformanceFee(uint _performanceFee) external {\r\n    require(msg.sender == governance, \"!governance\");\r\n    performanceFee = _performanceFee;\r\n  }\r\n\r\n  function wrapCoinAmount(uint256 amount) internal view returns (uint256[4] memory) {\r\n    uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\r\n    amounts[uint56(tokenIndex)] = amount;\r\n    return amounts;\r\n  }\r\n\r\n  function swusdFromWant() internal {\r\n    uint256 wantBalance = IERC20(want).balanceOf(address(this));\r\n    if (wantBalance > 0) {\r\n      IERC20(want).safeApprove(curve, 0);\r\n      IERC20(want).safeApprove(curve, wantBalance);\r\n      // we can accept 0 as minimum because this is called only by a trusted role\r\n      uint256 minimum = 0;\r\n      uint256[4] memory coinAmounts = wrapCoinAmount(wantBalance);\r\n      ISwerveFi(curve).add_liquidity(coinAmounts, minimum);\r\n    }\r\n    // now we have the swusd token\r\n  }\r\n\r\n  function deposit() public {\r\n    // convert the entire balance not yet invested into swusd first\r\n    swusdFromWant();\r\n\r\n    // then deposit into the swusd vault\r\n    uint256 swusdBalance = IERC20(swusd).balanceOf(address(this));\r\n    if (swusdBalance > 0) {\r\n      IERC20(swusd).safeApprove(gauge, 0);\r\n      IERC20(swusd).safeApprove(gauge, swusdBalance);\r\n      SSUSDGauge(gauge).deposit(swusdBalance);\r\n    }\r\n  }\r\n\r\n  // Controller only function for creating additional rewards from dust\r\n  function withdraw(IERC20 _asset) external returns (uint balance) {\r\n    require(msg.sender == controller, \"!controller\");\r\n    require(want != address(_asset), \"want\");\r\n    require(swusd != address(_asset), \"swusd\");\r\n    require(swrv != address(_asset), \"swrv\");\r\n    balance = _asset.balanceOf(address(this));\r\n    _asset.safeTransfer(controller, balance);\r\n  }\r\n\r\n  function wantValueFromSWUSD(uint256 swusdBalance) public view returns (uint256) {\r\n    return ISwerveFi(curve).calc_withdraw_one_coin(swusdBalance, int128(tokenIndex));\r\n  }\r\n\r\n  function swusdToWant(uint256 wantLimit) internal {\r\n    uint256 swusdBalance = IERC20(swusd).balanceOf(address(this));\r\n\r\n    // this is the maximum number of want we can get for our swusd token\r\n    uint256 wantMaximumAmount = wantValueFromSWUSD(swusdBalance);\r\n    if (wantMaximumAmount == 0) {\r\n      return;\r\n    }\r\n\r\n    if (wantLimit < wantMaximumAmount) {\r\n      // we want less than what we can get, we ask for the exact amount\r\n      // now we can remove the liquidity\r\n      uint256[4] memory tokenAmounts = wrapCoinAmount(wantLimit);\r\n      IERC20(swusd).safeApprove(curve, 0);\r\n      IERC20(swusd).safeApprove(curve, swusdBalance);\r\n      ISwerveFi(curve).remove_liquidity_imbalance(tokenAmounts, swusdBalance);\r\n    } else {\r\n      // we want more than we can get, so we withdraw everything\r\n      IERC20(swusd).safeApprove(curve, 0);\r\n      IERC20(swusd).safeApprove(curve, swusdBalance);\r\n      ISwerveFi(curve).remove_liquidity_one_coin(swusdBalance, int128(tokenIndex), 0);\r\n    }\r\n    // now we have want asset\r\n  }\r\n\r\n  // Withdraw partial funds, normally used with a vault withdrawal\r\n  function withdraw(uint _amount) external {\r\n    require(msg.sender == controller, \"!controller\");\r\n    uint _balance = IERC20(want).balanceOf(address(this));\r\n    if (_balance < _amount) {\r\n      _amount = _withdrawSome(_amount.sub(_balance));\r\n      _amount = _amount.add(_balance);\r\n    }\r\n\r\n    address _vault = SSUSDController(controller).vaults(address(want));\r\n    require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n    IERC20(want).safeTransfer(_vault, _amount);\r\n\r\n    // invest back the rest\r\n    deposit();\r\n  }\r\n\r\n  // Withdraw all funds, normally used when migrating strategies\r\n  function withdrawAll() external returns (uint balance) {\r\n    require(msg.sender == controller, \"!controller\");\r\n    _withdrawAll();\r\n\r\n    // we can transfer the asset to the vault\r\n    balance = IERC20(want).balanceOf(address(this));\r\n\r\n    if (balance > 0) {\r\n      address _vault = SSUSDController(controller).vaults(address(want));\r\n      require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n      IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n  }\r\n\r\n  function _withdrawAll() internal {\r\n    // withdraw all from gauge\r\n    uint _balance = SSUSDGauge(gauge).balanceOf(address(this));\r\n    if (_balance > 0) {\r\n      SSUSDGauge(gauge).withdraw(_balance);\r\n    }\r\n    // convert the swusd to want, we want the entire balance\r\n    swusdToWant(uint256(~0));\r\n  }\r\n\r\n  function harvest() public {\r\n    require(msg.sender == governance, \"!authorized\");\r\n    SSUSDMintr(mintr).mint(gauge);\r\n    uint _before = IERC20(want).balanceOf(address(this));\r\n    // claiming rewards and liquidating them\r\n    uint256 swrvBalance = IERC20(swrv).balanceOf(address(this));\r\n    if (swrvBalance > 0) {\r\n      IERC20(swrv).safeApprove(uni, 0);\r\n      IERC20(swrv).safeApprove(uni, swrvBalance);\r\n      SSUSDUniswapRouter(uni).swapExactTokensForTokens(swrvBalance, uint(0), uniswap_swrv2want, address(this), now.add(1800));\r\n    }\r\n    uint _after = IERC20(want).balanceOf(address(this));\r\n    if (_after > _before) {\r\n      uint profit = _after.sub(_before);\r\n      uint _fee = profit.mul(performanceFee).div(performanceMax);\r\n      IERC20(want).safeTransfer(SSUSDController(controller).rewards(), _fee);\r\n      deposit();\r\n    }\r\n  }\r\n\r\n  function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n    uint _before = IERC20(want).balanceOf(address(this));\r\n    // withdraw all from gauge\r\n    SSUSDGauge(gauge).withdraw(SSUSDGauge(gauge).balanceOf(address(this)));\r\n    // convert the swusd to want, but get at most _amount\r\n    swusdToWant(_amount);\r\n    uint _after = IERC20(want).balanceOf(address(this));\r\n    return _after.sub(_before);\r\n  }\r\n\r\n  function balanceOfWant() public view returns (uint) {\r\n    return IERC20(want).balanceOf(address(this));\r\n  }\r\n\r\n  function balanceOfPool() public view returns (uint) {\r\n    uint256 swusdBalance = SSUSDGauge(gauge).balanceOf(address(this));\r\n    return ISwerveFi(curve).calc_withdraw_one_coin(swusdBalance, int128(tokenIndex));\r\n  }\r\n\r\n  function balanceOf() public view returns (uint) {\r\n    return balanceOfWant().add(balanceOfPool());\r\n  }\r\n\r\n  function setGovernance(address _governance) external {\r\n    require(msg.sender == governance, \"!governance\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) external {\r\n    require(msg.sender == governance, \"!governance\");\r\n    controller = _controller;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswap_swrv2want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swusdBalance\",\"type\":\"uint256\"}],\"name\":\"wantValueFromSWUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategySwerveUSD","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007af74894f4234842d0803759cd52d93004606f6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2bea0f68dcf2a1b76defc786458c5339df2eb4aeeec33c8ff49e7363348d7adf"}]}