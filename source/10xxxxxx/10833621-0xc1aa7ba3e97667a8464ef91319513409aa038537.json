{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/crowdsale/crowdsale.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.2;\r\n\r\n\r\ninterface ERCMintable {\r\n    //function crowdSaleMint(address to, uint256 amount) external returns(bool);\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\n/**\r\n* @title IPM Token CrowdSale\r\n* @dev  CrowdSale contract for IPM Token:\r\n*\r\n*       Tokens for Sale: 9M IPM\r\n*       Minted on demand up to the hard cap per round. \r\n*       Unsold supply won't be minted and will result in a\r\n*       lower circulating supply after the sale. Unsold tokens of each round\r\n*       don't transfer to the next round\r\n*\r\n*       PRIVATE ROUND:\r\n*       - whitelisted\r\n*       - garuanteed allocation, overminted gets reduced from last round\r\n*       - duration of 2 days (10.09.2020 - 12.09.2020)\r\n*       - Min-Max allocation per address 2 ETH - 50 ETH\r\n*       - 1M flexible Cap (ETH price on launch could result in more)\r\n*       - 1 IPM = ~0.15 USD\r\n*\r\n*       ROUND 1:\r\n*       - duration of 2 days (14.09.2020 - 16.09.2020)\r\n*       - 1 IPM = ~0.2 USD\r\n*       - 1M IPM Hard Cap\r\n*\r\n*       ROUND 2:\r\n*       - duration of 2 days (18.09.2020 - 20.09.2020)\r\n*       - 1 IPM = 0.3 USD\r\n*       - 2M IPM Hard Cap\r\n*\r\n*       ROUND 3:\r\n*       - duration of 6 days (22.09.2020 - 28.09.2020)\r\n*       - 1 IPM = 0.4 USD\r\n*       - 5M IPM Hard Cap (possible less, based on private round)\r\n*\r\n*       After CrowdSale:\r\n*       Cooldown phase of 5 days begins\r\n*       and will unpause all tokens.\r\n*\r\n* More at https://timers.network/\r\n*\r\n* @author @KTimersnetwork\r\n*/\r\ncontract IPMCrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    //////////////////////////////////////\r\n    // Contract configuration           //\r\n    //////////////////////////////////////\r\n    // owner\r\n    address owner;\r\n\r\n    // allow pausing of contract to halt everything beside\r\n    // administrative functions\r\n    bool public paused    =   true;\r\n\r\n    // min payment for private round\r\n    uint256 public constant PRIVATE_PAYMENT_MIN =   2 ether;\r\n\r\n    // min payment for other rounds\r\n    uint256 public constant PUBLIC_PAYMENT_MIN  =   0.1 ether;\r\n\r\n    // max payment is always equal\r\n    uint256 public constant PAYMENT_MAX =   50 ether;\r\n\r\n\r\n    // crowdsale can mint 9m IPM at maximum for all rounds\r\n    uint256 public constant MAXIMUM_MINTABLE_TOKENS =   9000000000000000000000000;\r\n\r\n    // start of private round 09/10/2020 @ 12:00pm UTC\r\n    uint256 public constant PRIVATE_ROUND_START     =   1599739200;\r\n    // end of private round 09/12/2020 @ 12:00pm UTC\r\n    uint256 public constant PRIVATE_ROUND_END       =   1599912000;\r\n    // private sale limit 1m \r\n    uint256 public constant PRIVATE_ROUND_CAP       =   1000000 * (10**18);\r\n\r\n    // start of round 1 09/14/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_1_START           =   1600084800;\r\n    // end of round 1 09/16/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_1_END             =   1600257600;\r\n    // round 1 sale limit 1m\r\n    uint256 public constant ROUND_1_CAP             =   1000000 * (10**18);\r\n\r\n    // start of round 2 09/18/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_2_START           =   1600430400;\r\n    // end of round 2 09/20/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_2_END             =   1600603200;\r\n    // round 2 sale limit 2m\r\n    uint256 public constant ROUND_2_CAP             =   2000000 * (10**18);\r\n\r\n    // start of round 3 09/22/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_3_START           =   1600776000;\r\n    // end of round 3 09/28/2020 @ 12:00pm UTC\r\n    uint256 public constant ROUND_3_END             =   1601294400;\r\n    // round 3 sale limit 5m\r\n    uint256 public constant ROUND_3_CAP             =   5000000 * (10**18);\r\n\r\n    // sold tokens private round\r\n    uint256 public privateRoundSold;\r\n    // sold tokens round 1\r\n    uint256 public round1Sold;\r\n    // sold tokens round 2\r\n    uint256 public round2Sold;\r\n    // sold tokens round 3\r\n    uint256 public round3Sold;\r\n\r\n    // private round white list \r\n    mapping(address => uint256) public whitelist;\r\n    // contributors\r\n    mapping(address => uint256) public contributors;\r\n\r\n    // current rate\r\n    uint256 public ipmPerETH;\r\n\r\n    // IPM token references\r\n    address public ipmTokenAddress;\r\n\r\n    // withdrawal\r\n    address public foundation1Address;\r\n    address public foundation2Address;\r\n\r\n    //////////////////////////////////////\r\n    // Control functions / modifiers    //\r\n    //////////////////////////////////////\r\n    function isPrivateRoundActive() public view returns(bool) {\r\n        return (now >= PRIVATE_ROUND_START && now < PRIVATE_ROUND_END);\r\n    }\r\n    function isRound1Active() public view returns(bool) {\r\n        return (now >= ROUND_1_START && now < ROUND_1_END);\r\n    }\r\n\r\n    function isRound2Active() public view returns(bool) {\r\n        return (now >= ROUND_2_START && now < ROUND_2_END);\r\n    }\r\n\r\n    function isRound3Active() public view returns(bool) {\r\n        return (now >= ROUND_3_START && now < ROUND_3_END);\r\n    }\r\n\r\n    function hasStarted() public view returns(bool) {\r\n        return (now > PRIVATE_ROUND_START);\r\n    }\r\n\r\n    function hasEnded() public view returns(bool) {\r\n        return (now > ROUND_3_END);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier ifPaused() {\r\n        require(paused == true);\r\n        _;\r\n    }\r\n\r\n    modifier ifNotPaused() {\r\n        require(paused == false);\r\n        _;\r\n    }\r\n\r\n    modifier saleActive() {\r\n        require(hasStarted() == true, \"Error: Sale has not started\");\r\n        require(hasEnded() == false, \"Error: Sale has already ended\");\r\n        require(isPrivateRoundActive() || isRound1Active() || isRound2Active() || isRound3Active(), \"Error: No round active at the moment\");\r\n        _;\r\n    }\r\n\r\n    //////////////////////////////////////\r\n    // Events                           //\r\n    //////////////////////////////////////\r\n    event IPMPurchase(\r\n        address indexed beneficiary,\r\n        uint256 tokensPurchased,\r\n        uint256 weiUsed\r\n    );\r\n\r\n    //////////////////////////////////////\r\n    // Implementation                   //\r\n    //////////////////////////////////////\r\n\r\n    constructor() public {        \r\n        paused  =   true;\r\n        owner   =   msg.sender;\r\n    }\r\n\r\n    function getCurrentIPMRatio() external view returns(uint256) {\r\n        return ipmPerETH;\r\n    }\r\n\r\n    function getCurrentRound() external view returns(string memory) {\r\n        if(hasEnded()) {\r\n            return \"Finished\";\r\n        }\r\n        if(isRound1Active()) {\r\n            return \"Pre-Sale Round 1\";\r\n        } else if(isRound2Active()) {\r\n            return \"Pre-Sale Round 2\";\r\n        } else if(isRound3Active()) {\r\n            return \"Pre-Sale Round 3\";\r\n        }\r\n        return \"Private Sale\";\r\n    }\r\n\r\n    function getCurrentCap() public view returns (uint256) {\r\n        if(hasEnded()) {\r\n            return 0;\r\n        }\r\n        if(isRound1Active()) {\r\n            return ROUND_1_CAP;\r\n        } else if(isRound2Active()) {\r\n            return ROUND_2_CAP;\r\n        } else if(isRound3Active()) {\r\n            return ROUND_3_CAP;\r\n        }\r\n        return PRIVATE_ROUND_CAP;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Used to update the current eth price of 1 IPM\r\n     *      Function is needed to set the final price ahead\r\n     *      of each round and for possible big price changes\r\n     *      of eth itself to keep somewhat stable usd prices\r\n     */\r\n    function updateIPMPerETH(uint256 _tokens) external onlyOwner {\r\n        require(hasEnded() == false, \"Error: CrowdSale has ended, no need to update ratio\");\r\n        require(_tokens > 0, \"Error: IPM per ETH can't be 0\");\r\n        require(_tokens != ipmPerETH, \"Error: Prices are identical, no changes needed\");\r\n        require(_tokens < 100000, \"Error: Amount of tokens per ETH seems unrealistically high. Input error?\");\r\n\r\n        ipmPerETH  =   _tokens;\r\n    }\r\n\r\n    function unpause() external onlyOwner ifPaused {\r\n        paused = false;\r\n    }   \r\n    function pause() external onlyOwner ifNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n\r\n    function getTokenAddress() external view returns(address) {\r\n        return ipmTokenAddress;\r\n    }\r\n\r\n    function setIPMTokenContract(address _token) external onlyOwner ifPaused {\r\n        ipmTokenAddress =   _token;\r\n    }\r\n\r\n    function setWhitelist(address[] calldata _beneficiaries, uint256[] calldata _weiAmounts) external onlyOwner {\r\n        require(_beneficiaries.length > 0, \"Error: Beneficiaries are empty\");\r\n        require(_weiAmounts.length > 0, \"Error: Investments are empty\");\r\n        require(_beneficiaries.length == _weiAmounts.length, \"Error: Addresses length is not equal investments\");\r\n        \r\n        for(uint256 i=0;i<_beneficiaries.length;i++) {\r\n            whitelist[_beneficiaries[i]]    =   _weiAmounts[i];\r\n        }\r\n    }\r\n\r\n    function addOrUpdateWhitelistEntry(address _beneficiary, uint256 _weiAmount) external onlyOwner {\r\n        require(_weiAmount >= PRIVATE_PAYMENT_MIN, \"Error: Investment is below private sell minimum\");\r\n        require(_weiAmount <= PAYMENT_MAX, \"Error: Investment is above maximum sell amount\");\r\n\r\n        whitelist[_beneficiary]   =   _weiAmount;\r\n    }\r\n\r\n    function removeWhitelistEntry(address _beneficiary) external onlyOwner {\r\n        require(whitelist[_beneficiary] > 0, \"Error: Address is not whitelisted\");\r\n        whitelist[_beneficiary] =   0;\r\n        delete whitelist[_beneficiary];\r\n\r\n    }\r\n\r\n    function isWhitelisted(address _beneficiary) public view returns(bool) {\r\n        require(_beneficiary != address(0), 'Error: Address cannot be empty');\r\n        return (whitelist[_beneficiary] > 0) ? true:false;\r\n    }\r\n\r\n    function setFoundation1Address(address _foundationAddress) external onlyOwner {\r\n        require(_foundationAddress != address(0), 'Error: Address cannot be empty');\r\n        foundation1Address = _foundationAddress;\r\n    }\r\n\r\n    function setFoundation2Address(address _foundationAddress) external onlyOwner {\r\n        require(_foundationAddress != address(0), 'Error: Address cannot be empty');\r\n        foundation2Address = _foundationAddress;\r\n    }\r\n\r\n    function withdrawFunds() external onlyOwner {\r\n        require(hasStarted() == true, \"Error: No reason to withdraw funds before sale has started\");\r\n        require(\r\n            isPrivateRoundActive() == false &&\r\n            isRound1Active() == false &&\r\n            isRound2Active() == false &&\r\n            isRound3Active() == false,\r\n            \"Error: Withdrawal during active rounds is not allowed\"\r\n        );\r\n        require(foundation1Address != address(0), 'Error: No foundation1 wallet set');\r\n        require(foundation2Address != address(0), 'Error: No foundation2 wallet set');\r\n\r\n        uint256 fundsAvailable              =   address(this).balance;\r\n        require(fundsAvailable > 0, \"Error: No funds available to withdraw\");\r\n\r\n        uint256 amountForFoundation1Wallet  =   fundsAvailable.div(100).mul(70); \r\n        uint256 amountForFoundation2Wallet  =   fundsAvailable.sub(amountForFoundation1Wallet);\r\n        require(amountForFoundation1Wallet.add(amountForFoundation2Wallet) == fundsAvailable, \"Error: Amount to be sent is not equal the funds\");\r\n\r\n        payable(foundation1Address).transfer(amountForFoundation1Wallet);\r\n        payable(foundation2Address).transfer(amountForFoundation2Wallet);  \r\n    }\r\n\r\n    /**\r\n    * @dev Default fallback function that will also allow\r\n    *      the contract owner to deposit additional ETH,\r\n    *      without triggering the IPM purchase functionality.\r\n    */\r\n    receive() external payable {\r\n        require(msg.value > 0, \"Error: No ether received. Msg.value is empty\");\r\n        // no need for owner to buy\r\n        if(msg.sender != owner) {\r\n            // let others buy tokens\r\n            _buyTokens(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function _buyTokens(address _beneficiary, uint256 _amountPayedInWei) internal saleActive {\r\n        require(_beneficiary != address(0), \"Error: Burn/Mint address cant purchase tokens\");\r\n        require(_hasAllowance(_beneficiary), \"Error: Address is not allowed to purchase\");\r\n        \r\n        require(_amountPayedInWei <= PAYMENT_MAX, \"Error: Paymed exceeds maximum single purchase\");\r\n        \r\n        uint256 tokensForPayment    =   _calculateTokensForPayment(_amountPayedInWei);\r\n        uint256 tokensLeft          =   _getCurrentRemainingIPM();\r\n\r\n        require(tokensForPayment > 0, \"Error: payment too low. no tokens for this wei amount\");\r\n        require(tokensLeft > 0, \"Error: No tokens left for this round\");\r\n        require(tokensLeft >= tokensForPayment, \"Error: Purchase exceeds remaining tokens for this round\");\r\n\r\n        if(isPrivateRoundActive()) {\r\n            uint256 alreadyPurchased    =   contributors[_beneficiary];\r\n            uint256 allowedToPurchase   =   whitelist[_beneficiary];\r\n\r\n            if(alreadyPurchased == 0) {\r\n                require(_amountPayedInWei >= PRIVATE_PAYMENT_MIN, \"Error: Payment smaller than minimum payment\");\r\n            }\r\n\r\n            uint256 combinedPurchase    =   alreadyPurchased.add(_amountPayedInWei);\r\n\r\n            require(combinedPurchase <= allowedToPurchase, \"Error: This purchase exceeds the whitelisted limited\");\r\n        } \r\n        \r\n        require(_amountPayedInWei >= PUBLIC_PAYMENT_MIN, \"Error: Payment smaller than minimum payment\");\r\n        \r\n        ERCMintable(ipmTokenAddress).mint(_beneficiary, tokensForPayment);\r\n        \r\n        if(isRound1Active()) {\r\n            round1Sold = round1Sold.add(tokensForPayment);\r\n        } else if(isRound2Active()) {\r\n            round2Sold = round2Sold.add(tokensForPayment);\r\n        } else if(isRound3Active()) {\r\n            round3Sold = round3Sold.add(tokensForPayment);\r\n        } else {\r\n            privateRoundSold = privateRoundSold.add(tokensForPayment);\r\n        }\r\n        contributors[_beneficiary] =    contributors[_beneficiary].add(_amountPayedInWei);\r\n\r\n        emit IPMPurchase(\r\n            _beneficiary,\r\n            tokensForPayment,\r\n            _amountPayedInWei\r\n        ); \r\n    }\r\n\r\n    function _calculateTokensForPayment(uint256 payedWei) internal view returns(uint256) {\r\n        require(payedWei > 0, \"Error: Invalid wei amount\");\r\n\r\n        return payedWei.mul(ipmPerETH);\r\n    }\r\n\r\n    function _hasAllowance(address _beneficiary) internal view returns(bool) {\r\n        if(isPrivateRoundActive()) {\r\n            return (whitelist[_beneficiary] > 0);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getCurrentRemainingIPM() internal view returns(uint256) {\r\n        if(isRound1Active()) {\r\n            return ROUND_1_CAP.sub(round1Sold);\r\n        } else if(isRound2Active()) {\r\n            return ROUND_2_CAP.sub(round2Sold);\r\n        } else if(isRound3Active()) {\r\n            return ROUND_3_CAP.sub(round3Sold.add(_getPrivateRoundOverhead()));\r\n        }\r\n        return PRIVATE_ROUND_CAP.add(ROUND_3_CAP).sub(privateRoundSold);\r\n    }\r\n\r\n    function _getPrivateRoundOverhead() internal view returns(uint256) {\r\n        if(privateRoundSold > PRIVATE_ROUND_CAP) {\r\n            return privateRoundSold.sub(PRIVATE_ROUND_CAP);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiUsed\",\"type\":\"uint256\"}],\"name\":\"IPMPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_MINTABLE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_PAYMENT_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_ROUND_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_ROUND_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_ROUND_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_PAYMENT_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_1_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_1_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_1_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_2_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_2_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_2_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_3_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_3_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_3_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateWhitelistEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIPMRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipmPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipmTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrivateRoundActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRound1Active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRound2Active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRound3Active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateRoundSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeWhitelistEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round1Sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round2Sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round3Sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundation1Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundation2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setIPMTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"updateIPMPerETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IPMCrowdSale","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c197172575d10cbc8531fbd92829a9092aca5dd16026f5e7618170c43e4ead4"}]}