{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract Sonergy_Survey_System_v1 is Ownable{\r\naddress private sonergyTokenAddress;\r\naddress private messenger;\r\nenum ChangeTypes{ SURVEY, REGISTRATION, ADVERT, FEE }\r\nmapping (uint256 => uint256) private surveyPlans;\r\nmapping (uint256 => uint256) private advertPlans;\r\nmapping(address => bool) isAValidator;\r\n\r\nuint public fees;\r\nuint public validatorRegistrationFee;\r\n\r\n     struct ValidatedAnswers{\r\n      uint participantID;\r\n      uint[] validators;\r\n      uint surveyID;\r\n      address messenger;\r\n    }\r\nValidatedAnswers[] validatedAns; \r\nmapping(uint => ValidatedAnswers[]) listOfValidatedAns;\r\nusing SafeMath for uint256;\r\n\r\nconstructor(address _sonergyTokenAddress, uint _fee, uint _validatorRegistrationFee) public{\r\n   sonergyTokenAddress = _sonergyTokenAddress;\r\n   fees = _fee;\r\n   validatorRegistrationFee = _validatorRegistrationFee;\r\n   \r\n}\r\nevent PriceChanged(address initiator, uint _from, uint _to, uint _duration, ChangeTypes _type);\r\nevent NewValidator(uint _userID, address _validator);\r\nevent ValidatedQuestionByUser(uint[] _validators, uint _participantID, uint _survey_id, uint _newID);\r\nevent Paid(address creator, uint amount, uint fee, uint _duration, uint survey_id, ChangeTypes _type);\r\nevent MessengerChanged(address _from, address _to);\r\nmodifier onlyMessenger() {\r\n        require(msg.sender == messenger, \"caller is not a messenger\");\r\n        _;\r\n}\r\n\r\n\r\nfunction payForSurvey(uint256 survey_id, uint _duration) public {\r\nIERC20 sonergyToken = IERC20(sonergyTokenAddress);\r\nuint amount = surveyPlans[_duration];\r\nrequire(amount > 0, \"Invalid plan\");\r\nuint fee = uint(int256(amount) / int256(10000) * int256(fees));\r\nrequire(sonergyToken.allowance(msg.sender, address(this)) >= amount.add(fee), \"Non-sufficient funds\");\r\nrequire(sonergyToken.transferFrom(msg.sender, address(this), amount.add(fee)), \"Fail to tranfer fund\");\r\nemit Paid(msg.sender, amount, fee, _duration, survey_id,  ChangeTypes.SURVEY);\r\n\r\n}\r\n\r\nfunction payForAdvert(uint256 advert_id, uint _duration) public {\r\nIERC20 sonergyToken = IERC20(sonergyTokenAddress);\r\nuint amount = advertPlans[_duration];\r\nrequire(amount > 0, \"Invalid plan\");\r\n\r\nrequire(sonergyToken.allowance(msg.sender, address(this)) >= amount, \"Non-sufficient funds\");\r\nrequire(sonergyToken.transferFrom(msg.sender, address(this), amount), \"Fail to tranfer fund\");\r\nemit Paid(msg.sender, amount,0, _duration, advert_id, ChangeTypes.ADVERT);\r\n\r\n}\r\n\r\n\r\nfunction updateSurveyfee(uint256 _fee) public onlyOwner{\r\n    uint256 currentSurveyFee = fees;\r\n    fees = _fee;\r\n    emit PriceChanged(msg.sender, currentSurveyFee, _fee, 0, ChangeTypes.FEE);\r\n}\r\n\r\nfunction updateRegistrationFee(uint256 _fee) public onlyOwner{\r\n    uint256 currentRegistrationFee = validatorRegistrationFee;\r\n    validatorRegistrationFee = _fee;\r\n    emit PriceChanged(msg.sender, currentRegistrationFee, _fee, 0, ChangeTypes.REGISTRATION);\r\n}\r\n\r\nfunction updateSurveyPlan(uint256 _price, uint _duration) public onlyOwner{\r\n    uint256 currentSurveyPlanPrice = surveyPlans[_duration];\r\n    surveyPlans[_duration] = _price;\r\n    emit PriceChanged(msg.sender, currentSurveyPlanPrice, _price, _duration, ChangeTypes.SURVEY);\r\n}\r\n\r\nfunction updateAdvertPlan(uint256 _price, uint _duration) public onlyOwner{\r\n    uint256 currentAdvertPlanPrice = advertPlans[_duration];\r\n     advertPlans[_duration] = _price;\r\n     emit PriceChanged(msg.sender, currentAdvertPlanPrice, _price, _duration, ChangeTypes.ADVERT);\r\n   \r\n}\r\n\r\n\r\nfunction setMessenger(address _messenger) public onlyOwner{\r\n    address currentMessenger = messenger;\r\n    messenger = _messenger;\r\n    emit MessengerChanged(currentMessenger, _messenger);\r\n}\r\n\r\nfunction withdrawEarning() public onlyOwner{\r\n    IERC20 sonergyToken = IERC20(sonergyTokenAddress);\r\n    require(sonergyToken.transfer(owner(), sonergyToken.balanceOf(address(this))), \"Fail to empty vault\");\r\n}\r\n\r\nfunction becomeAValidator(uint _userID) public{\r\n     require(!isAValidator[msg.sender], \"Already a validator\");\r\n     IERC20 sonergyToken = IERC20(sonergyTokenAddress);\r\n     require(sonergyToken.allowance(msg.sender, address(this)) >= validatorRegistrationFee, \"Non-sufficient funds\");\r\n     require(sonergyToken.transferFrom(msg.sender, address(this), validatorRegistrationFee), \"Fail to tranfer fund\");\r\n     isAValidator[msg.sender] = true;\r\n     emit NewValidator(_userID, msg.sender);\r\n}\r\n\r\n\r\nfunction validatedAnswers(uint _participantID, uint[] memory _validators, uint _surveyID) public onlyMessenger{\r\n    ValidatedAnswers memory _validatedAnswers = ValidatedAnswers({\r\n      participantID: _participantID,\r\n      validators: _validators,\r\n      surveyID: _surveyID,\r\n      messenger: msg.sender\r\n    });\r\n    \r\n    validatedAns.push(_validatedAnswers);\r\n    uint256 newID = validatedAns.length - 1;\r\n   emit ValidatedQuestionByUser(_validators, _participantID, _surveyID, newID);\r\n}\r\n\r\n  function getvalidatedAnswersByID(uint _id) external view returns(uint _participantID, uint[] memory _validators, uint _surveyID,  address _messenger){\r\n         ValidatedAnswers memory _validatedAnswers = validatedAns[_id];\r\n         return (_validatedAnswers.participantID, _validatedAnswers.validators,_validatedAnswers.surveyID, _validatedAnswers.messenger);\r\n     }\r\n\r\nfunction getPriceOfPlan(uint _duration) public view returns (uint256 _price) {\r\n   return surveyPlans[_duration];\r\n}\r\n\r\nfunction getFees() public view returns (uint256 _reg, uint256 _survey) {\r\n   return (validatorRegistrationFee, fees);\r\n}\r\n\r\n\r\nfunction getPriceOfAdevert(uint _duration) public view returns (uint256 _price) {\r\n   return advertPlans[_duration];\r\n}\r\nfunction setSonergyTokenAddress(address _sonergyTokenAddress) public onlyOwner{\r\n     sonergyTokenAddress = _sonergyTokenAddress;\r\n    }\r\n\r\n   \r\n\r\n    function getSonergyTokenAddress() public view returns (address _sonergyTokenAddress) {\r\n        return(sonergyTokenAddress);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sonergyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorRegistrationFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"MessengerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"NewValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Sonergy_Survey_System_v1.ChangeTypes\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Sonergy_Survey_System_v1.ChangeTypes\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_validators\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_participantID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_survey_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newID\",\"type\":\"uint256\"}],\"name\":\"ValidatedQuestionByUser\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"becomeAValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_survey\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"getPriceOfAdevert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"getPriceOfPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSonergyTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_sonergyTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getvalidatedAnswersByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_participantID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_validators\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_surveyID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"advert_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"payForAdvert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"payForSurvey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"setMessenger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sonergyTokenAddress\",\"type\":\"address\"}],\"name\":\"setSonergyTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateAdvertPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateRegistrationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateSurveyPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateSurveyfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_participantID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_validators\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_surveyID\",\"type\":\"uint256\"}],\"name\":\"validatedAnswers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorRegistrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Sonergy_Survey_System_v1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0db5618fe22a1c2220b4563bb2ab094769903cc000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000003635c9adc5dea00000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3b8daf5c8d45cb420bc9c6f8bba5170517381f78edc114436c3812d578339cbe"}]}