{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/managment/Constants.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract Constants {\r\n    // Permissions bit constants\r\n    uint256 public constant CAN_MINT_TOKENS = 0;\r\n    uint256 public constant CAN_BURN_TOKENS = 1;\r\n    uint256 public constant CAN_UPDATE_STATE = 2;\r\n    uint256 public constant CAN_LOCK_TOKENS = 3;\r\n    uint256 public constant CAN_UPDATE_PRICE = 4;\r\n    uint256 public constant CAN_INTERACT_WITH_ALLOCATOR = 5;\r\n    uint256 public constant CAN_SET_ALLOCATOR_MAX_SUPPLY = 6;\r\n    uint256 public constant CAN_PAUSE_TOKENS = 7;\r\n    uint256 public constant ECLIUDED_ADDRESSES = 8;\r\n    uint256 public constant WHITELISTED = 9;\r\n    uint256 public constant SIGNERS = 10;\r\n    uint256 public constant EXTERNAL_CONTRIBUTORS = 11;\r\n    uint256 public constant CAN_SEE_BALANCE = 12;\r\n    uint256 public constant CAN_CANCEL_TRANSACTION = 13;\r\n    uint256 public constant CAN_ALLOCATE_REFERRAL_TOKENS = 14;\r\n    uint256 public constant CAN_SET_REFERRAL_MAX_SUPPLY = 15;\r\n    uint256 public constant MANUAL_TOKENS_ALLOCATION = 16;\r\n    uint256 public constant CAN_SET_WHITELISTED = 17;\r\n\r\n    // Contract Registry keys\r\n    uint256 public constant CONTRACT_TOKEN = 1;\r\n    uint256 public constant CONTRACT_PRICING = 2;\r\n    uint256 public constant CONTRACT_CROWDSALE = 3;\r\n    uint256 public constant CONTRACT_ALLOCATOR = 4;\r\n    uint256 public constant CONTRACT_AGENT = 5;\r\n    uint256 public constant CONTRACT_FORWARDER = 6;\r\n    uint256 public constant CONTRACT_REFERRAL = 7;\r\n    uint256 public constant CONTRACT_STATS = 8;\r\n    uint256 public constant CONTRACT_LOCKUP = 9;\r\n\r\n    uint256 public constant YEAR_IN_SECONDS = 31556952;\r\n    uint256 public constant SIX_MONTHS =  15778476;\r\n    uint256 public constant MONTH_IN_SECONDS = 2629746;\r\n\r\n    string public constant ERROR_ACCESS_DENIED = \"ERROR_ACCESS_DENIED\";\r\n    string public constant ERROR_WRONG_AMOUNT = \"ERROR_WRONG_AMOUNT\";\r\n    string public constant ERROR_NO_CONTRACT = \"ERROR_NO_CONTRACT\";\r\n    string public constant ERROR_NOT_AVAILABLE = \"ERROR_NOT_AVAILABLE\";\r\n}\r\n\r\n// File: contracts/managment/Management.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract Management is Ownable, Constants {\r\n\r\n    // Contract Registry\r\n    mapping (uint256 => address payable) public contractRegistry;\r\n\r\n    // Permissions\r\n    mapping (address => mapping(uint256 => bool)) public permissions;\r\n\r\n    event PermissionsSet(\r\n        address subject, \r\n        uint256 permission, \r\n        bool value\r\n    );\r\n\r\n    event ContractRegistered(\r\n        uint256 key,\r\n        address source,\r\n        address target\r\n    );\r\n\r\n    function setPermission(\r\n        address _address, \r\n        uint256 _permission, \r\n        bool _value\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        permissions[_address][_permission] = _value;\r\n        emit PermissionsSet(_address, _permission, _value);\r\n    }\r\n\r\n    function registerContract(\r\n        uint256 _key, \r\n        address payable _target\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        contractRegistry[_key] = _target;\r\n        emit ContractRegistered(_key, address(0), _target);\r\n    }\r\n\r\n    function setWhitelisted(\r\n        address _address,\r\n        bool _value\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            permissions[msg.sender][CAN_SET_WHITELISTED] == true,\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n\r\n        permissions[_address][WHITELISTED] = _value;\r\n\r\n        emit PermissionsSet(_address, WHITELISTED, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/managment/Managed.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Managed is Ownable, Constants {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Management public management;\r\n\r\n    modifier requirePermission(uint256 _permissionBit) {\r\n        require(\r\n            hasPermission(msg.sender, _permissionBit),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canCallOnlyRegisteredContract(uint256 _key) {\r\n        require(\r\n            msg.sender == management.contractRegistry(_key),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requireContractExistsInRegistry(uint256 _key) {\r\n        require(\r\n            management.contractRegistry(_key) != address(0),\r\n            ERROR_NO_CONTRACT\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _managementAddress) public {\r\n        management = Management(_managementAddress);\r\n    }\r\n\r\n    function setManagementContract(address _management) public onlyOwner {\r\n        require(address(0) != _management, ERROR_NO_CONTRACT);\r\n\r\n        management = Management(_management);\r\n    }\r\n\r\n    function hasPermission(address _subject, uint256 _permissionBit)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return management.permissions(_subject, _permissionBit);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LockupContract.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract LockupContract is Managed {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PERCENT_ABS_MAX = 100;\r\n    bool public isPostponedStart;\r\n    uint256 public postponedStartDate;\r\n\r\n    mapping(address => uint256[]) public lockedAllocationData;\r\n\r\n    mapping(address => uint256) public manuallyLockedBalances;\r\n\r\n    event Lock(address holderAddress, uint256 amount);\r\n\r\n    constructor(address _management) public Managed(_management) {\r\n        isPostponedStart = true;\r\n    }\r\n\r\n    function isTransferAllowed(\r\n        address _address,\r\n        uint256 _value,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint256 unlockedBalance = getUnlockedBalance(\r\n            _address,\r\n            _time,\r\n            _holderBalance\r\n        );\r\n        if (unlockedBalance >= _value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function allocationLog(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 _startingAt,\r\n        uint256 _lockPeriodInSeconds,\r\n        uint256 _initialUnlockInPercent,\r\n        uint256 _releasePeriodInSeconds\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        lockedAllocationData[_address].push(_startingAt);\r\n        if (_initialUnlockInPercent > 0) {\r\n            _amount = _amount.mul(uint256(PERCENT_ABS_MAX)\r\n                .sub(_initialUnlockInPercent)).div(PERCENT_ABS_MAX);\r\n        }\r\n        lockedAllocationData[_address].push(_amount);\r\n        lockedAllocationData[_address].push(_lockPeriodInSeconds);\r\n        lockedAllocationData[_address].push(_releasePeriodInSeconds);\r\n        emit Lock(_address, _amount);\r\n    }\r\n\r\n    function getUnlockedBalance(\r\n        address _address,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 blockedAmount = manuallyLockedBalances[_address];\r\n\r\n        if (lockedAllocationData[_address].length == 0) {\r\n            return _holderBalance.sub(blockedAmount);\r\n        }\r\n        uint256[] memory  addressLockupData = lockedAllocationData[_address];\r\n        for (uint256 i = 0; i < addressLockupData.length / 4; i++) {\r\n            uint256 lockedAt = addressLockupData[i.mul(4)];\r\n            uint256 lockedBalance = addressLockupData[i.mul(4).add(1)];\r\n            uint256 lockPeriodInSeconds = addressLockupData[i.mul(4).add(2)];\r\n            uint256 _releasePeriodInSeconds = addressLockupData[\r\n                i.mul(4).add(3)\r\n            ];\r\n            if (lockedAt == 0 && true == isPostponedStart) {\r\n                if (postponedStartDate == 0) {\r\n                    blockedAmount = blockedAmount.add(lockedBalance);\r\n                    continue;\r\n                }\r\n                lockedAt = postponedStartDate;\r\n            }\r\n            if (lockedAt > _time) {\r\n                blockedAmount = blockedAmount.add(lockedBalance);\r\n                continue;\r\n            }\r\n            if (lockedAt.add(lockPeriodInSeconds) > _time) {\r\n                if (lockedBalance == 0) {\r\n                    blockedAmount = _holderBalance;\r\n                    break;\r\n                } else {\r\n                    uint256 tokensUnlocked;\r\n                    if (_releasePeriodInSeconds > 0) {\r\n                        uint256 duration = (_time.sub(lockedAt))\r\n                            .div(_releasePeriodInSeconds);\r\n                        tokensUnlocked = lockedBalance.mul(duration)\r\n                            .mul(_releasePeriodInSeconds)\r\n                            .div(lockPeriodInSeconds);\r\n                    }\r\n                    blockedAmount = blockedAmount\r\n                        .add(lockedBalance)\r\n                        .sub(tokensUnlocked);\r\n                }\r\n            }\r\n        }\r\n\r\n        return _holderBalance.sub(blockedAmount);\r\n    }\r\n\r\n    function setManuallyLockedForAddress (\r\n        address _holder,\r\n        uint256 _balance\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        manuallyLockedBalances[_holder] = _balance;\r\n    }\r\n\r\n    function setPostponedStartDate(uint256 _postponedStartDate)\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        postponedStartDate = _postponedStartDate;\r\n\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/allocator/TokenAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/// @title TokenAllocator\r\n/// @author Applicature\r\n/// @notice Contract responsible for defining distribution logic of tokens.\r\n/// @dev Base class\r\ncontract TokenAllocator is Managed {\r\n\r\n    uint256 public maxSupply;\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        Managed(_management)\r\n    {\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function allocate(\r\n        address _holder,\r\n        uint256 _tokens,\r\n        uint256 _allocatedTokens\r\n    )\r\n        public\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        require(\r\n            tokensAvailable(_allocatedTokens) >= _tokens,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        internalAllocate(_holder, _tokens);\r\n    }\r\n\r\n    function updateMaxSupply(uint256 _maxSupply)\r\n        internal\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    /// @notice Check whether contract is initialised\r\n    /// @return true if initialized\r\n    function isInitialized() public view returns (bool) {\r\n        if (\r\n            address(management) == address(0) ||\r\n            management.contractRegistry(CONTRACT_TOKEN) == address(0) ||\r\n            management.contractRegistry(CONTRACT_ALLOCATOR) != address(this)\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @return available tokens\r\n    function tokensAvailable(uint256 _allocatedTokens)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return maxSupply.sub(_allocatedTokens);\r\n    }\r\n\r\n    function internalAllocate(\r\n        address _holder,\r\n        uint256 _tokens\r\n    )\r\n        internal;\r\n}\r\n\r\n// File: contracts/allocator/MintableTokenAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/// @title MintableTokenAllocator\r\n/// @author Applicature\r\n/// @notice Contract responsible for defining distribution logic of tokens.\r\n/// @dev implementation\r\ncontract MintableTokenAllocator is TokenAllocator {\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        TokenAllocator(_maxSupply, _management)\r\n    {}\r\n\r\n    /// @notice Check whether contract is initialised\r\n    /// @return true if initialized\r\n    function isInitialized() public view returns (bool) {\r\n        return (\r\n            super.isInitialized() &&\r\n            hasPermission(address(this), CAN_MINT_TOKENS)\r\n        );\r\n    }\r\n\r\n\r\n    function decreaseCap(uint256 _valueToSubtract)\r\n        public\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n        requireContractExistsInRegistry(CONTRACT_TOKEN)\r\n    {\r\n        require(\r\n            maxSupply.sub(_valueToSubtract) >= ERC20Mintable(\r\n                management.contractRegistry(CONTRACT_TOKEN)\r\n            ).totalSupply(),\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        updateMaxSupply(maxSupply.sub(_valueToSubtract));\r\n    }\r\n\r\n    function internalAllocate(\r\n        address _holder,\r\n        uint256 _tokens\r\n    )\r\n        internal\r\n        requireContractExistsInRegistry(CONTRACT_TOKEN)\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        ERC20Mintable(management.contractRegistry(CONTRACT_TOKEN))\r\n            .mint(_holder, _tokens);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/CLIAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract CLIAllocator is MintableTokenAllocator {\r\n\r\n    /* solium-disable */\r\n    address public constant strategicPartners = 0xd5249aB86Ef7cE0651DF1b111E607f59950514c3;\r\n    address public constant promotionsBounty = 0x38069DD2C6D385a7dE7dbB90eF74E23B12D124e3;\r\n    address public constant shareholders = 0xA210F19b4C1c52dB213f88fdCA76fD83859052FA;\r\n    address public constant advisors = 0x5d6019C130158FC00bc4Dc1edc949Fa84b8ad098;\r\n    address public constant pharmaIndustrialTrials = 0x880574A5b701e017C254840063DFBd1f59dF9a15;\r\n    address public constant managementTeam = 0x1e2Ce74Bc0a9A9fB2D6b3f630d585E0c00FF66B0;\r\n    address public constant teamIncentive = 0xD4184B19170af014c595EF0b0321760d89918B95;\r\n    address public constant publicSaleTokensHolder = 0x9ED362b5A8aF29CBC06548ba5C2f40978ca48Ec1;\r\n    address public constant applicature = 0x63e638d15462037161003a6083A9c4AeD50f8F73;\r\n\r\n    uint256 public constant strategicPartnersTokensAmount = 20000000e18;\r\n    uint256 public constant promotionsBountyTokensAmount = 5200000e18;\r\n    uint256 public constant shareholdersTokensAmount = 25000000e18;\r\n    uint256 public constant advisorsTokensAmount = 8000000e18;\r\n    uint256 public constant applicatureTokensAmount = 2000000e18;\r\n    uint256 public constant pharmaIndustrialTrialsTokensAmount = 10000000e18;\r\n    uint256 public constant managementTeamTokensAmount = 25000000e18;\r\n    uint256 public constant teamIncentiveTokensAmount = 24000000e18;\r\n    uint256 public constant publicSaleTokensAmount = 60000000e18;\r\n    /* solium-enable */\r\n\r\n    bool public isAllocated;\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        MintableTokenAllocator(_maxSupply, _management)\r\n    {\r\n\r\n    }\r\n\r\n    function increasePublicSaleCap(uint256 valueToAdd)\r\n        external\r\n        canCallOnlyRegisteredContract(CONTRACT_CROWDSALE)\r\n    {\r\n        internalAllocate(publicSaleTokensHolder, valueToAdd);\r\n    }\r\n\r\n    function unlockManuallyLockedBalances(address _holder)\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n        lockupContract.setManuallyLockedForAddress(\r\n            _holder,\r\n            0\r\n        );\r\n    }\r\n\r\n    function allocateRequiredTokensToHolders() public {\r\n        require(isAllocated == false, ERROR_NOT_AVAILABLE);\r\n        isAllocated = true;\r\n        allocateTokensWithSimpleLockUp();\r\n        allocateTokensWithComplicatedLockup();\r\n        allocateTokensWithManualUnlock();\r\n        allocatePublicSale();\r\n    }\r\n\r\n    function allocatePublicSale() private {\r\n        internalAllocate(publicSaleTokensHolder, publicSaleTokensAmount);\r\n    }\r\n\r\n    function allocateTokensWithSimpleLockUp() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n        internalAllocate(strategicPartners, strategicPartnersTokensAmount);\r\n\r\n        internalAllocate(promotionsBounty, promotionsBountyTokensAmount);\r\n        lockupContract.allocationLog(\r\n            promotionsBounty,\r\n            promotionsBountyTokensAmount,\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        internalAllocate(advisors, advisorsTokensAmount);\r\n        lockupContract.allocationLog(\r\n            advisors,\r\n            advisorsTokensAmount,\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        internalAllocate(applicature, applicatureTokensAmount);\r\n        // 25% each  6 months\r\n        lockupContract.allocationLog(\r\n            applicature,\r\n            applicatureTokensAmount,\r\n            0,\r\n            SIX_MONTHS.mul(4),\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n    }\r\n\r\n    function allocateTokensWithComplicatedLockup() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n\r\n        internalAllocate(shareholders, shareholdersTokensAmount);\r\n        lockupContract.allocationLog(\r\n            shareholders,\r\n            shareholdersTokensAmount.div(5),\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        lockupContract.allocationLog(\r\n            shareholders,\r\n            shareholdersTokensAmount.sub(shareholdersTokensAmount.div(5)),\r\n            0,\r\n            uint256(48).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n\r\n        internalAllocate(managementTeam, managementTeamTokensAmount);\r\n        lockupContract.allocationLog(\r\n            managementTeam,\r\n            managementTeamTokensAmount.mul(2).div(5),\r\n            0,\r\n            SIX_MONTHS,\r\n            50,\r\n            SIX_MONTHS\r\n        );\r\n        lockupContract.allocationLog(\r\n            managementTeam,\r\n            managementTeamTokensAmount.sub(\r\n                managementTeamTokensAmount.mul(2).div(5)\r\n            ),\r\n            0,\r\n            uint256(36).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n    }\r\n\r\n    function allocateTokensWithManualUnlock() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n\r\n        internalAllocate(\r\n            pharmaIndustrialTrials,\r\n            pharmaIndustrialTrialsTokensAmount\r\n        );\r\n        lockupContract.setManuallyLockedForAddress(\r\n            pharmaIndustrialTrials,\r\n            pharmaIndustrialTrialsTokensAmount\r\n        );\r\n        internalAllocate(teamIncentive, teamIncentiveTokensAmount);\r\n        lockupContract.setManuallyLockedForAddress(\r\n            teamIncentive,\r\n            teamIncentiveTokensAmount\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/CLIToken.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CLIToken is ERC20, ERC20Detailed, Managed {\r\n\r\n    modifier requireUnlockedBalance(\r\n        address _address,\r\n        uint256 _value,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    ) {\r\n\r\n        require(\r\n            LockupContract(\r\n                management.contractRegistry(CONTRACT_LOCKUP)\r\n            ).isTransferAllowed(\r\n                _address,\r\n                _value,\r\n                _time,\r\n                _holderBalance\r\n            ),\r\n            ERROR_NOT_AVAILABLE\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _management\r\n    )\r\n        public\r\n        ERC20Detailed(\"ClinTex\", \"CTI\", 18)\r\n        Managed(_management)\r\n    {\r\n        _mint(0x8FAE27b50457C10556C45798c34f73AE263282a6, 151000000000000000);\r\n    }\r\n\r\n    function mint(\r\n        address _account,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        requirePermission(CAN_MINT_TOKENS)\r\n        canCallOnlyRegisteredContract(CONTRACT_ALLOCATOR)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _amount <= CLIAllocator(\r\n                management.contractRegistry(CONTRACT_ALLOCATOR)\r\n            ).tokensAvailable(totalSupply()),\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        _mint(_account, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        requireUnlockedBalance(\r\n            msg.sender,\r\n            _tokens,\r\n            block.timestamp,\r\n            balanceOf(msg.sender)\r\n        )\r\n        returns (bool)\r\n    {\r\n        super.transfer(_to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _holder,\r\n        address _to,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        requireUnlockedBalance(\r\n            _holder,\r\n            _tokens,\r\n            block.timestamp,\r\n            balanceOf(_holder)\r\n        )\r\n        returns (bool)\r\n    {\r\n        super.transferFrom(_holder, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value)\r\n        public\r\n        requirePermission(CAN_BURN_TOKENS)\r\n        requireUnlockedBalance(\r\n            msg.sender,\r\n            value,\r\n            block.timestamp,\r\n            balanceOf(msg.sender)\r\n        )\r\n    {\r\n        require(balanceOf(msg.sender) >= value, ERROR_WRONG_AMOUNT);\r\n        super._burn(msg.sender, value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ALLOCATE_REFERRAL_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_BURN_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_CANCEL_TRANSACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_INTERACT_WITH_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_LOCK_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_MINT_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_PAUSE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_ALLOCATOR_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_REFERRAL_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_STATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_AGENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CROWDSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FORWARDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_PRICING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_STATS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECLIUDED_ADDRESSES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_ACCESS_DENIED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_AVAILABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NO_CONTRACT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_WRONG_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_CONTRIBUTORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANUAL_TOKENS_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract Management\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CLIToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005475379562cff40032733220128e8d58a917e058","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://60bc58db6373d43139c50a2e07bc476b7f0a30f0d88b3092757230d1e8ebf569"}]}