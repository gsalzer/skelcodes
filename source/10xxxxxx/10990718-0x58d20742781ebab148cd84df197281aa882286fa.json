{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/zeppelin/SafeMath.sol\r\n\r\npragma solidity >= 0.5.0 < 0.7.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/MWGImplementation.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >= 0.5.0 < 0.7.0;\r\n\r\n\r\ncontract MWGImplementation {\r\n    /**\r\n     * MATH\r\n     */\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * DATA\r\n     */\r\n\r\n    // INITIALIZATION DATA\r\n    bool private initialized;\r\n\r\n    // ERC20 BASIC DATA\r\n    mapping(address => uint256) internal balances;\r\n    uint256 internal totalSupply_;\r\n    string public constant name = \"Motiwala Gold\"; // solium-disable-line\r\n    string public constant symbol = \"MWG\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    // ERC20 DATA\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // OWNER DATA\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    // PAUSABILITY DATA\r\n    bool public paused;\r\n\r\n    // ASSET PROTECTION DATA\r\n    address public assetProtectionRole;\r\n    mapping(address => bool) internal frozen;\r\n\r\n    // SUPPLY CONTROL DATA\r\n    address public supplyController;\r\n\r\n    // DELEGATED TRANSFER DATA\r\n    address public betaDelegateWhitelister;\r\n    mapping(address => bool) internal betaDelegateWhitelist;\r\n    mapping(address => uint256) internal nextSeqs;\r\n    // EIP191 header for EIP712 prefix\r\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\r\n    // Hash of the EIP712 Domain Separator Schema\r\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(\r\n        \"EIP712Domain(string name,address verifyingContract)\"\r\n    );\r\n    bytes32 constant internal EIP712_DELEGATED_TRANSFER_SCHEMA_HASH = keccak256(\r\n        \"BetaDelegatedTransfer(address to,uint256 value,uint256 serviceFee,uint256 seq,uint256 deadline)\"\r\n    );\r\n    // Hash of the EIP712 Domain Separator data\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 public EIP712_DOMAIN_HASH;\r\n\r\n    // FEE CONTROLLER DATA\r\n    // fee decimals is only set for informational purposes.\r\n    // 1 feeRate = .000001 oz of gold\r\n    uint8 public constant feeDecimals = 6;\r\n\r\n    // feeRate is measured in 100th of a basis point (parts per 1,000,000)\r\n    // ex: a fee rate of 200 = 0.02% of an oz of gold\r\n    uint256 public constant feeParts = 1000000;\r\n    uint256 public feeRate;\r\n    address public feeController;\r\n    address public feeRecipient;\r\n\r\n    string public constant version = \"1.0.0\";\r\n\r\n    /**\r\n     * EVENTS\r\n     */\r\n\r\n    // ERC20 BASIC EVENTS\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // ERC20 EVENTS\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // OWNABLE EVENTS\r\n    event OwnershipTransferProposed(\r\n        address indexed currentOwner,\r\n        address indexed proposedOwner\r\n    );\r\n    event OwnershipTransferDisregarded(\r\n        address indexed oldProposedOwner\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // PAUSABLE EVENTS\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    // ASSET PROTECTION EVENTS\r\n    event AddressFrozen(address indexed addr);\r\n    event AddressUnfrozen(address indexed addr);\r\n    event FrozenAddressWiped(address indexed addr);\r\n    event AssetProtectionRoleSet (\r\n        address indexed oldAssetProtectionRole,\r\n        address indexed newAssetProtectionRole\r\n    );\r\n\r\n    // SUPPLY CONTROL EVENTS\r\n    event SupplyIncreased(address indexed to, uint256 value);\r\n    event SupplyDecreased(address indexed from, uint256 value);\r\n    event SupplyControllerSet(\r\n        address indexed oldSupplyController,\r\n        address indexed newSupplyController\r\n    );\r\n\r\n    // DELEGATED TRANSFER EVENTS\r\n    event BetaDelegatedTransfer(\r\n        address indexed from, address indexed to, uint256 value, uint256 seq, uint256 serviceFee\r\n    );\r\n    event BetaDelegateWhitelisterSet(\r\n        address indexed oldWhitelister,\r\n        address indexed newWhitelister\r\n    );\r\n    event BetaDelegateWhitelisted(address indexed newDelegate);\r\n    event BetaDelegateUnwhitelisted(address indexed oldDelegate);\r\n\r\n    // FEE CONTROLLER EVENTS\r\n    event FeeCollected(address indexed from, address indexed to, uint256 value);\r\n    event FeeRateSet(\r\n        uint256 indexed oldFeeRate,\r\n        uint256 indexed newFeeRate\r\n    );\r\n    event FeeControllerSet(\r\n        address indexed oldFeeController,\r\n        address indexed newFeeController\r\n    );\r\n    event FeeRecipientSet(\r\n        address indexed oldFeeRecipient,\r\n        address indexed newFeeRecipient\r\n    );\r\n\r\n    /**\r\n     * FUNCTIONALITY\r\n     */\r\n\r\n    // INITIALIZATION FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev sets 0 initial tokens, the owner, the supplyController,\r\n     * the fee controller and fee recipient.\r\n     * this serves as the constructor for the proxy but compiles to the\r\n     * memory model of the Implementation contract.\r\n     */\r\n    function initialize() public {\r\n        require(!initialized, \"already initialized\");\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n        assetProtectionRole = address(0);\r\n        totalSupply_ = 0;\r\n        supplyController = msg.sender;\r\n        feeRate = 0;\r\n        feeController = msg.sender;\r\n        feeRecipient = msg.sender;\r\n        initializeDomainSeparator();\r\n        initialized = true;\r\n    }\r\n\r\n    /**\r\n     * The constructor is used here to ensure that the implementation\r\n     * contract is initialized. An uncontrolled implementation\r\n     * contract might lead to misleading state\r\n     * for users who accidentally interact with it.\r\n     */\r\n    // constructor() public {\r\n    //     initialize();\r\n    //     pause();\r\n    // }\r\n\r\n    /**\r\n     * @dev To be called when upgrading the contract using upgradeAndCall to add delegated transfers\r\n     */\r\n    function initializeDomainSeparator() public {\r\n        // hash the name context with the contract address\r\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(// solium-disable-line\r\n                EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH, keccak256(bytes(name)), bytes32(uint256(address(this)))                ));\r\n                // bytes32(address(this))\r\n\r\n        // EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(// solium-disable-line\r\n        //         EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n        //         keccak256(bytes(name)),\r\n        //         bytes32(address(this))\r\n        //     ));\r\n\r\n    }\r\n\r\n    // ERC20 BASIC FUNCTIONALITY\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token to a specified address from msg.sender\r\n    * Transfer additionally sends the fee to the fee controller\r\n    * Note: the use of Safemath ensures that _value is nonnegative.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[_to] && !frozen[msg.sender], \"address frozen\");\r\n        require(_value <= balances[msg.sender], \"insufficient funds\");\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _addr The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    // ERC20 FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[_to] && !frozen[_from] && !frozen[msg.sender], \"address frozen\");\r\n        require(_value <= balances[_from], \"insufficient funds\");\r\n        require(_value <= allowed[_from][msg.sender], \"insufficient allowance\");\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(!frozen[_spender] && !frozen[msg.sender], \"address frozen\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (uint256) {\r\n        uint256 _fee = getFeeFor(_value);\r\n        uint256 _principle = _value.sub(_fee);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_principle);\r\n        emit Transfer(_from, _to, _principle);\r\n        emit Transfer(_from, feeRecipient, _fee);\r\n        if (_fee > 0) {\r\n            balances[feeRecipient] = balances[feeRecipient].add(_fee);\r\n            emit FeeCollected(_from, feeRecipient, _fee);\r\n        }\r\n\r\n        return _principle;\r\n    }\r\n\r\n    // OWNER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\r\n     * @param _proposedOwner The address to transfer ownership to.\r\n     */\r\n    function proposeOwner(address _proposedOwner) public onlyOwner {\r\n        require(_proposedOwner != address(0), \"cannot transfer ownership to address zero\");\r\n        require(msg.sender != _proposedOwner, \"caller already is owner\");\r\n        proposedOwner = _proposedOwner;\r\n        emit OwnershipTransferProposed(owner, proposedOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\r\n     */\r\n    function disregardProposeOwner() public {\r\n        require(msg.sender == proposedOwner || msg.sender == owner, \"only proposedOwner or owner\");\r\n        require(proposedOwner != address(0), \"can only disregard a proposed owner that was previously set\");\r\n        address _oldProposedOwner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferDisregarded(_oldProposedOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\r\n     */\r\n    function claimOwnership() public {\r\n        require(msg.sender == proposedOwner, \"onlyProposedOwner\");\r\n        address _oldOwner = owner;\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferred(_oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Reclaim all MTW at the contract address.\r\n     * This sends the MTW tokens that this contract add holding to the owner.\r\n     * Note: this is not affected by freeze constraints.\r\n     */\r\n    function reclaimMTW() external onlyOwner {\r\n        uint256 _balance = balances[address(this)];\r\n        balances[address(this)] = 0;\r\n        balances[owner] = balances[owner].add(_balance);\r\n        emit Transfer(address(this), owner, _balance);\r\n    }\r\n\r\n    // PAUSABILITY FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner {\r\n        require(!paused, \"already paused\");\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner {\r\n        require(paused, \"already unpaused\");\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    // ASSET PROTECTION FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new asset protection role address.\r\n     * @param _newAssetProtectionRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\r\n     */\r\n    function setAssetProtectionRole(address _newAssetProtectionRole) public {\r\n        require(msg.sender == assetProtectionRole || msg.sender == owner, \"only assetProtectionRole or Owner\");\r\n        emit AssetProtectionRoleSet(assetProtectionRole, _newAssetProtectionRole);\r\n        assetProtectionRole = _newAssetProtectionRole;\r\n    }\r\n\r\n    modifier onlyAssetProtectionRole() {\r\n        require(msg.sender == assetProtectionRole, \"onlyAssetProtectionRole\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes an address balance from being transferred.\r\n     * @param _addr The new address to freeze.\r\n     */\r\n    function freeze(address _addr) public onlyAssetProtectionRole {\r\n        require(!frozen[_addr], \"address already frozen\");\r\n        frozen[_addr] = true;\r\n        emit AddressFrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes an address balance allowing transfer.\r\n     * @param _addr The new address to unfreeze.\r\n     */\r\n    function unfreeze(address _addr) public onlyAssetProtectionRole {\r\n        require(frozen[_addr], \"address already unfrozen\");\r\n        frozen[_addr] = false;\r\n        emit AddressUnfrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Wipes the balance of a frozen address, burning the tokens\r\n     * and setting the approval to zero.\r\n     * @param _addr The new frozen address to wipe.\r\n     */\r\n    function wipeFrozenAddress(address _addr) public onlyAssetProtectionRole {\r\n        require(frozen[_addr], \"address is not frozen\");\r\n        uint256 _balance = balances[_addr];\r\n        balances[_addr] = 0;\r\n        totalSupply_ = totalSupply_.sub(_balance);\r\n        emit FrozenAddressWiped(_addr);\r\n        emit SupplyDecreased(_addr, _balance);\r\n        emit Transfer(_addr, address(0), _balance);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets whether the address is currently frozen.\r\n    * @param _addr The address to check if frozen.\r\n    * @return A bool representing whether the given address is frozen.\r\n    */\r\n    function isFrozen(address _addr) public view returns (bool) {\r\n        return frozen[_addr];\r\n    }\r\n\r\n    // SUPPLY CONTROL FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new supply controller address.\r\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\r\n     */\r\n    function setSupplyController(address _newSupplyController) public {\r\n        require(msg.sender == supplyController || msg.sender == owner, \"only SupplyController or Owner\");\r\n        require(_newSupplyController != address(0), \"cannot set supply controller to address zero\");\r\n        emit SupplyControllerSet(supplyController, _newSupplyController);\r\n        supplyController = _newSupplyController;\r\n    }\r\n\r\n    modifier onlySupplyController() {\r\n        require(msg.sender == supplyController, \"onlySupplyController\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\r\n     * @param _value The number of tokens to add.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function increaseSupply(uint256 _value) public onlySupplyController returns (bool success) {\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        balances[supplyController] = balances[supplyController].add(_value);\r\n        emit SupplyIncreased(supplyController, _value);\r\n        emit Transfer(address(0), supplyController, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the total supply by burning the specified number of tokens from the supply controller account.\r\n     * @param _value The number of tokens to remove.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function decreaseSupply(uint256 _value) public onlySupplyController returns (bool success) {\r\n        require(_value <= balances[supplyController], \"not enough supply\");\r\n        balances[supplyController] = balances[supplyController].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit SupplyDecreased(supplyController, _value);\r\n        emit Transfer(supplyController, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    // DELEGATED TRANSFER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev returns the next seq for a target address.\r\n     * The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid.\r\n     * Note: that the seq context is specific to this smart contract.\r\n     * @param target The target address.\r\n     * @return the seq.\r\n     */\r\n    //\r\n    function nextSeqOf(address target) public view returns (uint256) {\r\n        return nextSeqs[target];\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg.\r\n     * Splits a signature byte array into r,s,v for convenience.\r\n     * @param sig the signature of the delgatedTransfer msg.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @param serviceFee an optional ERC20 service fee paid to the executor of betaDelegatedTransfer by the from address.\r\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\r\n     * @param deadline a block number after which the pre-signed transaction has expired.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function betaDelegatedTransfer(\r\n        bytes memory sig, address to, uint256 value, uint256 serviceFee, uint256 seq, uint256 deadline\r\n    ) public returns (bool) {\r\n        require(sig.length == 65, \"signature should have length 65\");\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        require(_betaDelegatedTransfer(r, s, v, to, value, serviceFee, seq, deadline), \"failed transfer\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the betaDelegatedTransfer msg.\r\n     * Note: both the delegate and transactor sign in the service fees. The transactor, however,\r\n     * has no control over the gas price, and therefore no control over the transaction time.\r\n     * Beta prefix chosen to avoid a name clash with an emerging standard in ERC865 or elsewhere.\r\n     * Internal to the contract - see betaDelegatedTransfer and betaDelegatedTransferBatch.\r\n     * @param r the r signature of the delgatedTransfer msg.\r\n     * @param s the s signature of the delgatedTransfer msg.\r\n     * @param v the v signature of the delgatedTransfer msg.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @param serviceFee an optional ERC20 service fee paid to the delegate of betaDelegatedTransfer by the from address.\r\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\r\n     * @param deadline a block number after which the pre-signed transaction has expired.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function _betaDelegatedTransfer(\r\n        bytes32 r, bytes32 s, uint8 v, address to, uint256 value, uint256 serviceFee, uint256 seq, uint256 deadline\r\n    ) internal whenNotPaused returns (bool) {\r\n        require(betaDelegateWhitelist[msg.sender], \"Beta feature only accepts whitelisted delegates\");\r\n        require(value > 0 || serviceFee > 0, \"cannot transfer zero tokens with zero service fee\");\r\n        require(block.number <= deadline, \"transaction expired\");\r\n        // prevent sig malleability from ecrecover()\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"signature incorrect\");\r\n        require(v == 27 || v == 28, \"signature incorrect\");\r\n\r\n        // EIP712 scheme: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            EIP191_HEADER, EIP712_DOMAIN_HASH, keccak256(abi.encodePacked(// solium-disable-line\r\n              EIP712_DELEGATED_TRANSFER_SCHEMA_HASH, bytes32(uint256(to)), value, serviceFee, seq, deadline))));\r\n        address _from = ecrecover(hash, v, r, s);\r\n\r\n        require(_from != address(0), \"error determining from address from signature\");\r\n        require(to != address(0), \"cannot use address zero\");\r\n        require(!frozen[to] && !frozen[_from] && !frozen[msg.sender], \"address frozen\");\r\n        require(value.add(serviceFee) <= balances[_from], \"insufficient funds or bad signature\");\r\n        require(nextSeqs[_from] == seq, \"incorrect seq\");\r\n\r\n        nextSeqs[_from] = nextSeqs[_from].add(1);\r\n\r\n        uint256 _principle = _transfer(_from, to, value);\r\n\r\n        if (serviceFee != 0) {\r\n            balances[_from] = balances[_from].sub(serviceFee);\r\n            balances[msg.sender] = balances[msg.sender].add(serviceFee);\r\n            emit Transfer(_from, msg.sender, serviceFee);\r\n        }\r\n\r\n        emit BetaDelegatedTransfer(_from, to, _principle, seq, serviceFee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures.\r\n     * Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where\r\n     * delegated transfer number i is the combination of all arguments at index i\r\n     * @param r the r signatures of the delgatedTransfer msg.\r\n     * @param s the s signatures of the delgatedTransfer msg.\r\n     * @param v the v signatures of the delgatedTransfer msg.\r\n     * @param to The addresses to transfer to.\r\n     * @param value The amounts to be transferred.\r\n     * @param serviceFee optional ERC20 service fees paid to the delegate of betaDelegatedTransfer by the from address.\r\n     * @param seq sequencing numbers included by the from address specific to this contract to protect from replays.\r\n     * @param deadline block numbers after which the pre-signed transactions have expired.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function betaDelegatedTransferBatch(\r\n        bytes32[] memory r, \r\n        bytes32[] memory s, \r\n        uint8[] memory v, \r\n        address[] memory to, \r\n        uint256[] memory value, \r\n        uint256[] memory serviceFee, \r\n        uint256[] memory seq, \r\n        uint256[] memory deadline\r\n    ) public returns (bool) {\r\n        require(r.length == s.length && r.length == v.length && r.length == to.length && r.length == value.length, \"length mismatch\");\r\n        require(r.length == serviceFee.length && r.length == seq.length && r.length == deadline.length, \"length mismatch\");\r\n\r\n        for (uint i = 0; i < r.length; i++) {\r\n            require(\r\n                _betaDelegatedTransfer(r[i], s[i], v[i], to[i], value[i], serviceFee[i], seq[i], deadline[i]),\r\n                \"failed transfer\"\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets whether the address is currently whitelisted for betaDelegateTransfer.\r\n    * @param _addr The address to check if whitelisted.\r\n    * @return A bool representing whether the given address is whitelisted.\r\n    */\r\n    function isWhitelistedBetaDelegate(address _addr) public view returns (bool) {\r\n        return betaDelegateWhitelist[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new betaDelegate whitelister.\r\n     * @param _newWhitelister The address allowed to whitelist betaDelegates.\r\n     */\r\n    function setBetaDelegateWhitelister(address _newWhitelister) public {\r\n        require(msg.sender == betaDelegateWhitelister || msg.sender == owner, \"only Whitelister or Owner\");\r\n        betaDelegateWhitelister = _newWhitelister;\r\n        emit BetaDelegateWhitelisterSet(betaDelegateWhitelister, _newWhitelister);\r\n    }\r\n\r\n    modifier onlyBetaDelegateWhitelister() {\r\n        require(msg.sender == betaDelegateWhitelister, \"onlyBetaDelegateWhitelister\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelists an address to allow calling BetaDelegatedTransfer.\r\n     * @param _addr The new address to whitelist.\r\n     */\r\n    function whitelistBetaDelegate(address _addr) public onlyBetaDelegateWhitelister {\r\n        require(!betaDelegateWhitelist[_addr], \"delegate already whitelisted\");\r\n        betaDelegateWhitelist[_addr] = true;\r\n        emit BetaDelegateWhitelisted(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Unwhitelists an address to disallow calling BetaDelegatedTransfer.\r\n     * @param _addr The new address to whitelist.\r\n     */\r\n    function unwhitelistBetaDelegate(address _addr) public onlyBetaDelegateWhitelister {\r\n        require(betaDelegateWhitelist[_addr], \"delegate not whitelisted\");\r\n        betaDelegateWhitelist[_addr] = false;\r\n        emit BetaDelegateUnwhitelisted(_addr);\r\n    }\r\n\r\n    // FEE CONTROLLER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new fee controller address.\r\n     * @param _newFeeController The address allowed to set the fee rate and the fee recipient.\r\n     */\r\n    function setFeeController(address _newFeeController) public {\r\n        require(msg.sender == feeController || msg.sender == owner, \"only FeeController or Owner\");\r\n        require(_newFeeController != address(0), \"cannot set fee controller to address zero\");\r\n        address _oldFeeController = feeController;\r\n        feeController = _newFeeController;\r\n        emit FeeControllerSet(_oldFeeController, feeController);\r\n    }\r\n\r\n    modifier onlyFeeController() {\r\n        require(msg.sender == feeController, \"only FeeController\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new fee recipient address.\r\n     * @param _newFeeRecipient The address allowed to collect transfer fees for transfers.\r\n     */\r\n    function setFeeRecipient(address _newFeeRecipient) public onlyFeeController {\r\n        require(_newFeeRecipient != address(0), \"cannot set fee recipient to address zero\");\r\n        address _oldFeeRecipient = feeRecipient;\r\n        feeRecipient = _newFeeRecipient;\r\n        emit FeeRecipientSet(_oldFeeRecipient, feeRecipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new fee rate.\r\n     * @param _newFeeRate The new fee rate to collect as transfer fees for transfers.\r\n     */\r\n    function setFeeRate(uint256 _newFeeRate) public onlyFeeController {\r\n        require(_newFeeRate <= feeParts, \"cannot set fee rate above 100%\");\r\n        uint256 _oldFeeRate = feeRate;\r\n        feeRate = _newFeeRate;\r\n        emit FeeRateSet(_oldFeeRate, feeRate);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets a fee for a given value\r\n    * ex: given feeRate = 200 and feeParts = 1,000,000 then getFeeFor(10000) = 2\r\n    * @param _value The amount to get the fee for.\r\n    */\r\n    function getFeeFor(uint256 _value) public view returns (uint256) {\r\n        if (feeRate == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _value.mul(feeRate).div(feeParts);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAssetProtectionRole\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"AssetProtectionRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"}],\"name\":\"BetaDelegateUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"BetaDelegateWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"BetaDelegateWhitelisterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"BetaDelegatedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeController\",\"type\":\"address\"}],\"name\":\"FeeControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FrozenAddressWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferDisregarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSupplyController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSupplyController\",\"type\":\"address\"}],\"name\":\"SupplyControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetProtectionRole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betaDelegateWhitelister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"betaDelegatedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"serviceFee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seq\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadline\",\"type\":\"uint256[]\"}],\"name\":\"betaDelegatedTransferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disregardProposeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeParts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getFeeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeDomainSeparator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelistedBetaDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"nextSeqOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimMTW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"setAssetProtectionRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"setBetaDelegateWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeController\",\"type\":\"address\"}],\"name\":\"setFeeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSupplyController\",\"type\":\"address\"}],\"name\":\"setSupplyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unwhitelistBetaDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whitelistBetaDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MWGImplementation","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0084ab3a9e2de02f4e2bf33c84f0ea8d34556a34026b7aa429f2e7dcd7909766"}]}