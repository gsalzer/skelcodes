{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"zero division\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\npragma solidity >=0.4.21 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\ninterface Compound {\r\n  function supplyRatePerBlock() external view returns (uint);\r\n  function borrowRatePerBlock() external view returns (uint);\r\n}\r\ninterface DyDx {\r\n  struct val {\r\n       uint256 value;\r\n   }\r\n\r\n   struct set {\r\n      uint128 borrow;\r\n      uint128 supply;\r\n  }\r\n\r\n  function getEarningsRate() external view returns (val memory);\r\n  function getMarketInterestRate(uint256 marketId) external view returns (val memory);\r\n  function getMarketTotalPar(uint256 marketId) external view returns (set memory);\r\n}\r\ninterface Fulcrum {\r\n  function supplyInterestRate() external view returns (uint256);\r\n  function borrowInterestRate() external view returns (uint256);\r\n}\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ninterface LendingPoolCore  {\r\n  function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256 liquidityRate);\r\n  function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256 variableBorrowRate);\r\n}\r\ncontract APROracle {\r\n  using SafeMath for uint256;\r\n  uint256 DECIMAL = 10 ** 18;\r\n  address public owner;\r\n  address public DYDX;\r\n  address public AAVE;\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    DYDX = address(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    AAVE = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n  }\r\n  function getLendCompoundAPR(address token) public view returns (uint256) {\r\n    return Compound(token).supplyRatePerBlock().mul(2102400);\r\n  }\r\n  function getBorrowCompoundAPR(address token) public view returns (uint256) {\r\n      return Compound(token).borrowRatePerBlock().mul(2102400);\r\n  }\r\n  function getLendFulcrumAPR(address token) public view returns(uint256) {\r\n    return Fulcrum(token).supplyInterestRate().div(100);\r\n  }\r\n  function getBorrowFulcrumAPR(address token) public view returns(uint256) {\r\n    return Fulcrum(token).borrowInterestRate().div(100);\r\n  }\r\n  function getLendDyDxAPR(uint256 marketId) public view returns(uint256) {\r\n    uint256 rate      = DyDx(DYDX).getMarketInterestRate(marketId).value;\r\n    uint256 aprBorrow = rate * 31622400;\r\n    uint256 borrow    = DyDx(DYDX).getMarketTotalPar(marketId).borrow;\r\n    uint256 supply    = DyDx(DYDX).getMarketTotalPar(marketId).supply;\r\n    uint256 usage     = (borrow * DECIMAL) / supply;\r\n    uint256 apr       = (((aprBorrow * usage) / DECIMAL) * DyDx(DYDX).getEarningsRate().value) / DECIMAL;\r\n    return apr;\r\n  }\r\n  function getBorrowDyDxAPR(uint256 marketId) public view returns(uint256) {\r\n    uint256 rate      = DyDx(DYDX).getMarketInterestRate(marketId).value;\r\n    uint256 aprBorrow = rate * 31622400;\r\n    return aprBorrow;\r\n  }\r\n  function getLendAaveAPR(address token) public view returns (uint256) {\r\n    LendingPoolCore core = LendingPoolCore(LendingPoolAddressesProvider(AAVE).getLendingPoolCore());\r\n    return core.getReserveCurrentLiquidityRate(token).div(1e9);\r\n  }\r\n  function getBorrowAaveAPR(address token) public view returns (uint256) {\r\n    LendingPoolCore core = LendingPoolCore(LendingPoolAddressesProvider(AAVE).getLendingPoolCore());\r\n    return core.getReserveCurrentVariableBorrowRate(token).div(1e9);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getLendDyDxAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowCompoundAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowFulcrumAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLendAaveAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLendFulcrumAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DYDX\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLendCompoundAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getBorrowDyDxAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowAaveAPR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"APROracle","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://03d7775c84bfef91a79da7b51301e73363543b3ea8793dee2b782e7f62e75ac2"}]}