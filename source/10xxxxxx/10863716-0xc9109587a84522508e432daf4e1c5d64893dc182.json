{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: ECLv2\r\n/**\r\n * @title TokenHook (THK).\r\n * @author Currently ANONYMOUS.\r\n * @notice You may use this code under ECLv2.\r\n * @dev For new token deployment:\r\n * 1- Install MetaMask (Chrome/Firefox extension).\r\n * 2- Connect to Rinkeby (or other private/public chains).\r\n * 3- Run RemixIDE and set environment as \"Injected Web3\".\r\n * 4- Copy and past this code in RemixIDE.\r\n * 5- Deploy the token contract (ERC20).\r\n * @dev The code is compatible with version 0.5.x of Solidity complier.\r\n * Version 0.5.11 has been selected for compatibility with the following auditing tools:\r\n * 1- EY Review Tool by Ernst & Young Global Limited.\r\n * 2- SmartCheck by SmartDec.\r\n * 3- Securify by ChainSecurity.\r\n * 4- ContractGuard by GuardStrike.\r\n * 5- MythX by ConsenSys.\r\n * 6- Slither Analyzer by Crytic.\r\n * 7- Odin by Sooho.\r\n */\r\n \r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title ERC20 Interface\r\n * @author Fabian Vogelsteller, Vitalik Buterin\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ninterface IERC20 {\r\n    /// Transfers tokens and fires the Transfer event.\r\n    function transfer(address to, uint256 tokens) external returns (bool);\r\n    \r\n    /// Allows to withdraw from your account multiple times, up to the approved tokens.\r\n    function approve(address spender, uint256 tokens) external returns (bool);\r\n    \r\n    /// Transfers approved tokens and fires the Transfer event\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool);\r\n\r\n    /// Returns the total token supply\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    /// Returns token balance of an account\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /// Returns the allowed tokens to withdraw from an account\r\n    function allowance(address account, address spender) external view returns (uint256);\r\n\r\n    /// Events\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n/**\r\n * @title Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n * @author OpenZeppelin\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.Using this library instead of the unchecked operations\r\n * eliminates an entire class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        /// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        /// benefit is lost if 'b' is also tested.\r\n        /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        /// Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        /// assert(a == b * c + a % b); /// There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 Token contract\r\n * @dev When verify the code in EtherScan and if you used the default initialSupply,\r\n * set this value as \"Constructor Arguments\":\r\n * 0000000000000000000000000000000000000000000000000000000000000000\r\n * @dev The token will be created with 18 decimal places,\r\n * so it takes a balance of 10 ** 18 token units to equal one token.\r\n * In other word, if we want to have x initial tokens, we need to pass in,\r\n * x * 10 ** 18 to the constructor.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\t\t                            /// Attach SafeMath functions with uint256 to mitigate integer overflow\r\n\r\n    string public constant name = \"TokenHook\";                  /// Token name\r\n    string public constant symbol = \"THK\";                      /// Token symbol\r\n    uint8 public constant decimals = 18;                        /// Divisible to 18 decimal places\r\n    address payable private owner;                              /// Token owner\r\n    uint256 public exchangeRate = 100;                          /// 100 tokens per 1ETH, default exchange rate\r\n    uint256 private initialSupply = 200e6;                      /// Controls economy of the token by limiting initial supply to 200M\r\n    bool private locked;                                        /// Mutex variable to mitigate re-entrancy attack\r\n    bool private paused;                                        /// Boolean variable to support Fail-Safe mode\r\n    //uint256 private contractBalance = 0;                        /// Can be used for integrity check\r\n\r\n    mapping(address => mapping (address => uint256)) private allowances;\t/// Allowed token to transfer by spenders\r\n    mapping(address => mapping (address => uint256)) private transferred;\t/// Transferred tokens by spenders\r\n    mapping(address => uint256) public balances;                            /// Balance of token holders\r\n\r\n    /**\r\n     * @dev Token constructor that runs only once upon contract creation. The final code of the contract is deployed to the blockchain,\r\n     * after the constructor has run.\r\n     */\r\n    constructor(uint256 supply) public {\r\n        owner = msg.sender;                                                 /// Owner of the token\r\n        initialSupply = (supply != 0) ? supply :                            /// Initialize token supply\r\n                        initialSupply.mul(10 ** uint256(decimals));         /// With 18 zero\r\n        balances[owner] = initialSupply;                                    /// Owner gets all initial tokens\r\n        emit Transfer(address(0), owner, initialSupply);                    /// Logs transferred tokens to the owner\r\n    }\r\n    \r\n    /**\r\n     * @dev Fallback function to accept ETH. It is compatible with 2300 gas for receiving funds via send or transfer methods.\r\n     */\r\n    function() external payable{\r\n        //require(msg.data.length == 0, \"Only plain Ether\");                  /// Checks for only calls without data\r\n        //contractBalance = contractBalance.add(msg.value);                   /// Adjusting contract balance\r\n        emit Received(msg.sender, msg.value);                               /// Logs received ETH\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers `tokens` amount of tokens to address `to`, and fires Transfer event. Transferring zero tokens is also allowed.\r\n     */\r\n    function transfer(address to, uint256 tokens) external notPaused validAddress(to) noReentrancy returns (bool success) {\r\n        require(balances[msg.sender] >= tokens, \"Not enough balance\");          /// Checks the sender's balance\r\n        require(balances[to].add(tokens) >= balances[to], \"Overflow error\");    /// Checks overflows\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);                /// Subtracts from the sender\r\n        balances[to] = balances[to].add(tokens);                                /// Adds to the recipient\r\n        emit Transfer(msg.sender, to, tokens);                                  /// Logs transferred tokens\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Special type of Transfer that makes it possible to give permission to another address for spending tokens on your behalf. \r\n     * It sends `tokens` from address `from` to address `to`. The `transferFrom` method is used for a withdraw work-flow, allowing \r\n     * contracts to send tokens on your behalf, for example to deposit to a contract address and/or to charge fees in sub-currencies.\r\n     * The function call fails unless the `from` account has deliberately authorized the sender of the message via `approve` function.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokens) external notPaused validAddress(to) noReentrancy returns (bool success) {\r\n        require(balances[from] >= tokens, \"Not enough tokens\");                     /// Checks the sender's balance\r\n        require(tokens <= (                                                         /// Prevent token transfer more than allowed\r\n                           (allowances[from][msg.sender] > transferred[from][msg.sender]) ? \r\n                            allowances[from][msg.sender].sub(transferred[from][msg.sender]) : 0)\r\n                            , \"Transfer more than allowed\");                               \r\n        balances[from] = balances[from].sub(tokens);                                /// Decreases balance of approver\r\n        balances[to] = balances[to].add(tokens);                                    /// Increases balance of spender\r\n        transferred[from][msg.sender] = transferred[from][msg.sender].add(tokens);  /// Tracks transferred tokens\r\n        emit Transfer(from, to, tokens);                                            /// Logs transferred tokens\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev It approves another address to spend tokens on your behalf. It allows `spender` to withdraw from your account, multiple times, \r\n     * up to the `tokens` amount. If this function is called again, it overwrites the current allowance with `tokens`.\r\n     */\r\n    function approve(address spender, uint256 tokens) external notPaused validAddress(spender) noReentrancy returns (bool success) {\r\n        require(spender != msg.sender, \"Approver is spender\");                      /// Spender cannot approve himself\r\n        require(balances[msg.sender] >= tokens, \"Not enough balance\");              /// Checks the approver's balance\r\n        allowances[msg.sender][spender] = tokens;                                   /// Sets allowance of the spender\r\n        emit Approval(msg.sender, spender, tokens);                                 /// Logs approved tokens\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Implements another way of approving tokens by increasing current approval. It is not defined in the standard.\r\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedTokens) external notPaused validAddress(spender) noReentrancy returns (bool success) {\r\n        require(balances[msg.sender] >= addedTokens, \"Not enough token\");                       /// Checks the approver's balance\r\n        allowances[msg.sender][spender] = allowances[msg.sender][spender].add(addedTokens);     /// Adds allowance of the spender\r\n        emit Approval(msg.sender, spender, addedTokens);                                        /// Logs approved tokens\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Implements another way of approving tokens by decreasing current approval. It is not defined in the standard.\r\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedTokens) external notPaused validAddress(spender) noReentrancy returns (bool success) {\r\n        require(allowances[msg.sender][spender] >= subtractedTokens, \"Not enough token\");       /// Checks the spenders's allowance\r\n        allowances[msg.sender][spender] = allowances[msg.sender][spender].sub(subtractedTokens);/// Adds allowance of the spender\r\n        emit Approval(msg.sender, spender, subtractedTokens);                                   /// Logs approved tokens\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Supports selling tokens to the contract. It uses msg.sender.call.value() mrthod to be compatible with EIP-1884.\r\n     * In addition to CEI, Mutex (noReentrancy modifier is also used to mitigate cross-function re-entrancy attack (along with same-function re-entrancy).\r\n     */\r\n    function sell(uint256 tokens) external notPaused noReentrancy returns(bool success)\r\n    {\r\n        require(tokens > 0, \"No token to sell\");                                /// Selling zero token is not allowed\r\n        require(balances[msg.sender] >= tokens, \"Not enough token\");            /// Checks the seller's balance\r\n        uint256 _wei = tokens.div(exchangeRate);                                /// Calculates equivalent of tokens in Wei\r\n        require(address(this).balance >= _wei, \"Not enough wei\");               /// Checks the contract's ETH balance\r\n        //require(contractBalance >= _wei, \"Not enough wei\");                     /// Contract does not have enough Wei\r\n        \r\n        /// Using Checks-Effects-Interactions (CEI) pattern to mitigate re-entrancy attack\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);                /// Decreases tokens of seller\r\n        balances[owner] = balances[owner].add(tokens);                          /// Increases tokens of owner\r\n        //contractBalance = contractBalance.sub(_wei);                            /// Adjusts contract balance\r\n        \r\n        emit Sell(msg.sender, tokens, address(this), _wei, owner);              /// Logs sell event\r\n        (success, ) = msg.sender.call.value(_wei)(\"\");                          /// Transfers Wei to the seller\r\n        require(success, \"Ether transfer failed\");                              /// Checks successful transfer\r\n    }\r\n    \r\n    /**\r\n     * @dev Supports buying token by transferring Ether\r\n     */ \r\n    function buy() external payable notPaused noReentrancy returns(bool success){\r\n        require(msg.sender != owner, \"Called by the Owner\");                /// The owner cannot be seller/buyer\r\n        uint256 _tokens = msg.value.mul(exchangeRate);                      /// Calculates token equivalents\r\n        require(balances[owner] >= _tokens, \"Not enough tokens\");           /// Checks owner's balance\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(_tokens);           /// Increases token balance of buyer\r\n        balances[owner] = balances[owner].sub(_tokens);                     /// Decreases token balance of owner\r\n        //contractBalance = contractBalance.add(msg.value);                   /// Adjustes contract balance\r\n        emit Buy(msg.sender, msg.value, owner, _tokens);                    /// Logs Buy event\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw Ether from the contract and send it to the address that is specified by the owner. It can be called only by the owner.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner returns(bool success){\r\n        require(address(this).balance >= amount, \"Not enough fund\");        /// Checks the contract's ETH balance\r\n        //require(contractBalance >= amount, \"Not enough fund\");              /// Checks the contract's ETH balance\r\n\r\n        emit Withdrawal(msg.sender, address(this), amount);                 /// Logs withdrawal event\r\n        (success, ) = msg.sender.call.value(amount)(\"\");                    /// Transfers amount (EIP-1884 compatible)\r\n        require(success, \"Ether transfer failed\");                          /// Checks successful transfer\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns balance of the Contract\r\n     *\r\n    function getContractBalance() public view onlyOwner returns(uint256, uint256){\r\n        return (address(this).balance, contractBalance);\r\n    }\r\n    \r\n    /** \r\n     * @dev Checks for unexpected received Ether (forced to the contract without using payable functions)\r\n     *\r\n    function unexpectedEther() public view onlyOwner returns(bool){\r\n        return (contractBalance != address(this).balance);\r\n    }\r\n    */\r\n    \r\n    /**\r\n    /* @dev Creates new tokens and assigns them to the owner, increases the total supply as well.\r\n     */\r\n    function mint(uint256 newTokens) external onlyOwner {\r\n        initialSupply = initialSupply.add(newTokens);               /// Increases token supply\r\n        balances[owner] = balances[owner].add(newTokens);           /// Increases balance of the owner\r\n        emit Mint(msg.sender, newTokens);                           /// Logs Mint event\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens from the owner, decreases the total supply as well.\r\n     */\r\n    function burn(uint256 tokens) external onlyOwner {\r\n        require(balances[owner] >= tokens, \"Not enough tokens\");    /// Checks owner's balance\r\n        balances[owner] = balances[owner].sub(tokens);              /// Decreases balance of the owner\r\n        initialSupply = initialSupply.sub(tokens);                  /// Decreases token supply\r\n        emit Burn(msg.sender, tokens);                              /// Logs Burn event\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets new exchange rate. It can be called only by the owner.\r\n     */\r\n    function setExchangeRate(uint256 newRate) external onlyOwner returns(bool success)\r\n    {\r\n        uint256 _currentRate = exchangeRate;\r\n        exchangeRate = newRate;                             /// Sets new exchange rate\r\n        emit Change(_currentRate, exchangeRate);            /// Logs Change event\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes owner of the contract\r\n     */\r\n    function changeOwner(address payable newOwner) external onlyOwner validAddress(newOwner) {\r\n        address _current = owner;\r\n        owner = newOwner;\r\n        emit ChangeOwner(_current, owner);\r\n    }\r\n    \r\n    /**\r\n     * @dev Pause the contract as result of self-checks (off-chain computations).\r\n     */\r\n    function pause() external onlyOwner {\r\n        paused = true;                  \r\n        emit Pause(msg.sender, paused);\r\n    }\r\n    \r\n    /**\r\n     * @dev Unpause the contract after self-checks.\r\n     */\r\n    function unpause() external onlyOwner {\r\n        paused = false;\r\n        emit Pause(msg.sender, paused);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total token supply.\r\n     */\r\n    function totalSupply() external view returns (uint256 tokens) {\r\n        return initialSupply;                       /// Total supply of the token.\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the account balance of another account with address `tokenHolder`.\r\n     */\r\n    function balanceOf(address tokenHolder) external view returns (uint256 tokens) {\r\n        return balances[tokenHolder];               /// Balance of token holder.\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens approved by the owner that can be transferred to the spender's account.\r\n     */\r\n    function allowance(address tokenHolder, address spender) external view notPaused returns (uint256 tokens) {\r\n        uint256 _transferred = transferred[tokenHolder][spender];       /// Already transferred tokens by `spender`.\r\n        return allowances[tokenHolder][spender].sub(_transferred);      /// Remained tokens to transfer by `spender`.\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the amount of transferred tokens by spender's account.\r\n     */\r\n    function transfers(address tokenHolder, address spender) external view notPaused returns (uint256 tokens) {\r\n        return transferred[tokenHolder][spender];    /// Transfers by `spender` (approved by `tokenHolder`).\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the caller is the owner. \r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks validity of the address.\r\n     */\r\n    modifier validAddress(address addr){\r\n        require(addr != address(0x0), \"Zero address\");\r\n        require(addr != address(this), \"Contract address\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @author https://solidity.readthedocs.io/en/latest/contracts.html#function-modifiers\r\n    * @dev Mutex modifier to mitigate Re-entrancy Attack. Operation will succeed if and only if the locking thread is the one that already holds the lock.\r\n    */\r\n    modifier noReentrancy() \r\n    {\r\n        require(!locked, \"Reentrant call\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n    \r\n    /**\r\n    * @dev Modifier to support Fail-Safe Mode. In case, it disables most of the toekn features, hands off control to the owner.\r\n    */\r\n    modifier notPaused() \r\n    {\r\n        require(!paused, \"Fail-Safe mode\");\r\n        _;\r\n    }\r\n    \r\n    /// Events\r\n    event Buy(address indexed _buyer, uint256 _wei, address indexed _owner, uint256 _tokens);\r\n    event Sell(address indexed _seller, uint256 _tokens, address indexed _contract, uint256 _wei, address indexed _owner);\r\n    event Received(address indexed _sender, uint256 _wei);\r\n    event Withdrawal(address indexed _by, address indexed _contract, uint256 _wei);\r\n    event Change(uint256 _current, uint256 _new);\r\n    event ChangeOwner(address indexed _current, address indexed _new);\r\n    event Pause(address indexed _owner, bool _state);\r\n    event Mint(address indexed _owner, uint256 _tokens);\r\n    event Burn(address indexed _owner, uint256 _tokens);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedTokens\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedTokens\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_current\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bde4fa398ac1f1c78e9219beb5f3358ec92ff93ebf9760bf62d981d38708fa68"}]}