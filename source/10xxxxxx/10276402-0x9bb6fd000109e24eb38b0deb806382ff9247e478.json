{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"HEX.sol\":{\"content\":\"\\r\\npragma solidity 0.6.4;\\r\\n\\r\\ninterface HEX {\\r\\n   /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n   function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\\r\\n   function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\\r\\n   function stakeCount(address stakerAddr) external view returns (uint256);\\r\\n   function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\\r\\n   function currentDay() external view returns (uint256);\\r\\n   function dailyDataRange(uint256 beginDay, uint256 endDay) external view returns (uint256[] memory);\\r\\n   function globalInfo() external view returns (uint256[13] memory);\\r\\n\\r\\n}\\r\\n\"},\"HEXBET.sol\":{\"content\":\"//HEXBET.sol\\r\\n//\\r\\n//\\r\\n\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./HEX.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n//Uniswap factory interface\\r\\ninterface UniswapFactoryInterface {\\r\\n    // Create Exchange\\r\\n    function createExchange(address token) external returns (address exchange);\\r\\n    // Get Exchange and Token Info\\r\\n    function getExchange(address token) external view returns (address exchange);\\r\\n    function getToken(address exchange) external view returns (address token);\\r\\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\\r\\n    // Never use\\r\\n    function initializeFactory(address template) external;\\r\\n}\\r\\n\\r\\n//Uniswap Interface\\r\\ninterface UniswapExchangeInterface {\\r\\n    // Address of ERC20 token sold on this exchange\\r\\n    function tokenAddress() external view returns (address token);\\r\\n    // Address of Uniswap Factory\\r\\n    function factoryAddress() external view returns (address factory);\\r\\n    // Provide Liquidity\\r\\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\\r\\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\\r\\n    // Get Prices\\r\\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\\r\\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\\r\\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\\r\\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\\r\\n    // Trade ETH to ERC20\\r\\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\\r\\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\\r\\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\\r\\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\\r\\n    // Trade ERC20 to ETH\\r\\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\\r\\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\\r\\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\\r\\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\\r\\n    // Trade ERC20 to ERC20\\r\\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\\r\\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\\r\\n    // Trade ERC20 to Custom Pool\\r\\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\\r\\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n    //when a user locks tokens\\r\\n    event TokenLock(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    //when a user unlocks tokens\\r\\n    event TokenUnlock(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    //when founder tokens are locked\\r\\n    event FounderLock (\\r\\n        uint hxbAmt,\\r\\n        uint timestamp\\r\\n    );\\r\\n\\r\\n    //when founder tokens are unlocked\\r\\n    event FounderUnlock (\\r\\n        uint hxbAmt,\\r\\n        uint timestamp\\r\\n    );\\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HEXBET TOKEN CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HEXBET is IERC20, TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for HEXBET;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    //uniswap setup (used in setup only)\\r\\n    address internal uniFactory = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\\r\\n    address internal uniETHHEX = 0x05cDe89cCfa0adA8C88D5A23caaa79Ef129E7883;\\r\\n    address public uniETHHXB = address(0);\\r\\n    UniswapExchangeInterface internal uniHEXInterface = UniswapExchangeInterface(uniETHHEX);\\r\\n    UniswapExchangeInterface internal uniHXBInterface;\\r\\n    UniswapFactoryInterface internal uniFactoryInterface = UniswapFactoryInterface(uniFactory);\\r\\n    //hex contract setup\\r\\n    address internal hexAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\\r\\n    HEX internal hexInterface = HEX(hexAddress);\\r\\n    //mint / lock\\r\\n    uint public unlockLvl = 0;\\r\\n    uint public founderLockStartTimestamp = 0;\\r\\n    uint public founderLockDayLength = 3650;//10 years (10% released every year)\\r\\n    uint public founderLockedTokens = 0;\\r\\n    uint private allFounderLocked = 0;\\r\\n\\r\\n    bool public mintBlock;//disables any more tokens ever being minted once _totalSupply reaches _maxSupply\\r\\n    uint public mintRatio = 1000; //inital @ 1000, raises \\r\\n    uint public minLockDayLength = 7; // min days to lock\\r\\n    uint internal daySeconds = 86400; // seconds in a day\\r\\n    uint public totalLocked = 0;\\r\\n    mapping (address =\\u003e uint) public tokenLockedBalances;//balance of HXB locked mapped by user\\r\\n\\r\\n    //tokenomics\\r\\n    uint256 public _maxSupply = 50000000000000000000;// max supply @ 500B\\r\\n    uint256 internal _totalSupply;\\r\\n    string public constant name = \\\"hex.bet\\\";\\r\\n    string public constant symbol = \\\"HXB\\\";\\r\\n    uint public constant decimals = 8;\\r\\n\\r\\n    //multisig\\r\\n    address payable internal MULTISIG = 0x35C7a87EbC3E9fBfd2a31579c70f0A2A8D4De4c5;\\r\\n    //admin\\r\\n    address payable internal _p1 = 0xD64FF89558Cd0EA20Ae7aA032873d290801865f3;\\r\\n    address payable internal _p2 = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39;\\r\\n    bool private sync;\\r\\n    //minters\\r\\n    address[] public minterAddresses;// future contracts to enable minting of HXB relative to HEX\\r\\n\\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    mapping(address =\\u003e bool) minters;\\r\\n    mapping (address =\\u003e Locked) public locked;\\r\\n\\r\\n    struct Locked{\\r\\n        uint256 lockStartTimestamp;\\r\\n        uint256 totalEarnedInterest;\\r\\n    }\\r\\n    \\r\\n    modifier onlyMultisig(){\\r\\n        require(msg.sender == MULTISIG, \\\"not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinters(){\\r\\n        require(minters[msg.sender], \\\"not a minter\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!sync, \\\"Sync lock\\\");\\r\\n        sync = true;\\r\\n        _;\\r\\n        sync = false;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        admins[_p1] = true;\\r\\n        admins[_p2] = true;\\r\\n        //mint founder tokens\\r\\n        mintFounderTokens(_maxSupply.mul(20).div(100));//20% of max supply\\r\\n        //create uni exchange\\r\\n        uniETHHXB = uniFactoryInterface.createExchange(address(this));\\r\\n        uniHXBInterface = UniswapExchangeInterface(uniETHHXB);\\r\\n    }\\r\\n\\r\\n    //fallback for eth sent to contract - auto distribute as donation\\r\\n    receive() external payable{\\r\\n        donate();\\r\\n    }\\r\\n\\r\\n    function _initialLiquidity()\\r\\n        public\\r\\n        payable\\r\\n        onlyAdmins\\r\\n        synchronized\\r\\n    {\\r\\n        require(msg.value \\u003e= 0.001 ether, \\\"eth value too low\\\");\\r\\n        //add liquidity\\r\\n        uint heartsForEth = uniHEXInterface.getEthToTokenInputPrice(msg.value);//price of eth value in hex\\r\\n        uint hxb = heartsForEth / mintRatio;\\r\\n        _mint(address(this), hxb);//mint tokens to this contract\\r\\n        this.safeApprove(uniETHHXB, hxb);//approve uni exchange contract\\r\\n        uniHXBInterface.addLiquidity{value:msg.value}(0, hxb, (now + 15 minutes)); //send tokens and eth to uni as liquidity*/\\r\\n    }\\r\\n    \\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply unless mintBLock is true\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        uint256 amt = amount;\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        if(!mintBlock){\\r\\n            if(_totalSupply \\u003c _maxSupply){\\r\\n                if(_totalSupply.add(amt) \\u003e _maxSupply){\\r\\n                    amt = _maxSupply.sub(_totalSupply);\\r\\n                    _totalSupply = _maxSupply;\\r\\n                    mintBlock = true;\\r\\n                }\\r\\n                else{\\r\\n                    _totalSupply = _totalSupply.add(amt);\\r\\n                    if(_totalSupply \\u003e= _maxSupply.mul(30).div(100)){\\r\\n                        mintRatio = 2000;\\r\\n                        if(_totalSupply \\u003e= _maxSupply.mul(40).div(100)){\\r\\n                            mintRatio = 3000;\\r\\n                            if(_totalSupply \\u003e= _maxSupply.mul(50).div(100)){\\r\\n                                mintRatio = 4000;\\r\\n                                if(_totalSupply \\u003e= _maxSupply.mul(60).div(100)){\\r\\n                                    mintRatio = 5000;\\r\\n                                    if(_totalSupply \\u003e= _maxSupply.mul(70).div(100)){\\r\\n                                        mintRatio = 6000;\\r\\n                                        if(_totalSupply \\u003e= _maxSupply.mul(80).div(100)){\\r\\n                                            mintRatio = 8000;\\r\\n                                            if(_totalSupply \\u003e= _maxSupply.mul(90).div(100)){\\r\\n                                                mintRatio = 10000;\\r\\n                                            }\\r\\n                                        }\\r\\n                                    }\\r\\n                                 }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                _balances[account] = _balances[account].add(amt);\\r\\n                emit Transfer(address(0), account, amt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //mint HXB  to founders (only ever called in constructor)\\r\\n    function mintFounderTokens(uint tokens)\\r\\n        internal\\r\\n        synchronized\\r\\n        returns(bool)\\r\\n    {\\r\\n        require(tokens \\u003c= _maxSupply.mul(20).div(100), \\\"founder tokens cannot be over 20%\\\");\\r\\n        _mint(_p1, tokens/4);//mint HXB\\r\\n        _mint(_p2, tokens/4);//mint HXB\\r\\n        _mint(address(this), tokens/2);//mint HXB to be locked for 10 years, 10% unlocked every year\\r\\n        founderLock(tokens/2);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function founderLock(uint tokens)\\r\\n        internal\\r\\n    {\\r\\n        founderLockStartTimestamp = now;\\r\\n        founderLockedTokens = tokens;\\r\\n        allFounderLocked = tokens;\\r\\n        emit FounderLock(tokens, founderLockStartTimestamp);\\r\\n    }\\r\\n\\r\\n    function unlock()\\r\\n        public\\r\\n        onlyAdmins\\r\\n        synchronized\\r\\n    {\\r\\n        uint sixMonths = founderLockDayLength/10;\\r\\n        require(unlockLvl \\u003c 10, \\\"token unlock complete\\\");\\r\\n        require(founderLockStartTimestamp.add(sixMonths.mul(daySeconds)) \\u003c= now, \\\"tokens cannot be unlocked yet\\\");//must be at least over 6 months\\r\\n        uint value = allFounderLocked/10;\\r\\n        if(founderLockStartTimestamp.add((sixMonths).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 0){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 2).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 1){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 3).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 2){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 4).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 3){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 5).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 4){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 6).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 5){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 7).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 6){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 8).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 7)\\r\\n        {\\r\\n            unlockLvl++;     \\r\\n            founderLockedTokens = founderLockedTokens.sub(value);      \\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 9).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 8){\\r\\n            unlockLvl++;\\r\\n            founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else if(founderLockStartTimestamp.add((sixMonths * 10).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 9){\\r\\n            unlockLvl++;\\r\\n            if(founderLockedTokens \\u003e= value){\\r\\n                founderLockedTokens = founderLockedTokens.sub(value);\\r\\n            }\\r\\n            else{\\r\\n                value = founderLockedTokens;\\r\\n                founderLockedTokens = 0;\\r\\n            }\\r\\n            transfer(_p1, value.div(2));\\r\\n            transfer(_p2, value.div(2));\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n        emit FounderUnlock(value, now);\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - HXB CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n\\r\\n    //lock HXB tokens to contract\\r\\n    function LockTokens(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(tokenBalance() \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isLockFinished(msg.sender)){\\r\\n            UnlockTokens();//unlocks all currently locked tokens + profit\\r\\n        }\\r\\n        //update balances\\r\\n        tokenLockedBalances[msg.sender] = tokenLockedBalances[msg.sender].add(amt);\\r\\n        totalLocked = totalLocked.add(amt);\\r\\n        locked[msg.sender].lockStartTimestamp = now;\\r\\n        _transfer(msg.sender, address(this), amt);//make transfer\\r\\n        emit TokenLock(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    //unlock HXB tokens from contract\\r\\n    function UnlockTokens()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(tokenLockedBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient locked balance\\\");//ensure user has enough locked funds\\r\\n        require(isLockFinished(msg.sender), \\\"tokens cannot be unlocked yet. min 7 day lock\\\");\\r\\n        uint amt = tokenLockedBalances[msg.sender];\\r\\n        uint256 interest = calcLockingRewards(msg.sender);\\r\\n        _mint(msg.sender, interest);//mint HXB - total unlocked / 1000 * (minLockDayLength + days past)\\r\\n        locked[msg.sender].totalEarnedInterest += interest;\\r\\n        tokenLockedBalances[msg.sender] = 0;\\r\\n        locked[msg.sender].lockStartTimestamp = 0;\\r\\n        totalLocked = totalLocked.sub(amt);\\r\\n        _transfer(address(this), msg.sender, amt);//make transfer\\r\\n        emit TokenUnlock(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    //returns locking reward in hxb\\r\\n    function calcLockingRewards(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        return (tokenLockedBalances[_user].div(2500) * (minLockDayLength + daysPastMinLockTime()));\\r\\n    }\\r\\n    \\r\\n    //returns amount of days locked past min lock time of 7 days\\r\\n    function daysPastMinLockTime()\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        uint daysPast = now.sub(locked[msg.sender].lockStartTimestamp).div(daySeconds);\\r\\n        if(daysPast \\u003e= minLockDayLength){\\r\\n            return daysPast - minLockDayLength;// returns 0 if under 1 day passed\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //mint HXB to address ( for use in external contracts within the ecosystem)\\r\\n    function mintHXB(uint value, address receiver)\\r\\n        public\\r\\n        onlyMinters\\r\\n        returns(bool)\\r\\n    {\\r\\n        uint amt = value.div(mintRatio);\\r\\n        address minter = receiver;\\r\\n        _mint(minter, amt);//mint HXB\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //allows addition of contract addresses that can call this contracts mint function.\\r\\n    function addMinter(address minter)\\r\\n        public\\r\\n        onlyMultisig\\r\\n        returns (bool)\\r\\n    {        \\r\\n        minters[minter] = true;\\r\\n        minterAddresses.push(minter);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //total HXB locked in contract\\r\\n    function totalLockedTokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return totalLocked;\\r\\n    }\\r\\n\\r\\n    //HXB balance of caller\\r\\n    function tokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function isLockFinished(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(locked[_user].lockStartTimestamp == 0){\\r\\n            return false;\\r\\n        }\\r\\n        else{\\r\\n           return locked[_user].lockStartTimestamp.add((minLockDayLength).mul(daySeconds)) \\u003c= now;               \\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function donate() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        bool success = false;\\r\\n        uint256 balance = msg.value;\\r\\n        //distribute\\r\\n        uint256 share = balance.div(2);\\r\\n        (success, ) =  _p1.call{value:share}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p2.call{value:share}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxbAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FounderLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxbAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcLockingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysPastMinLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isLockFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnedInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintHXB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minterAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniETHHXB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HEXBET","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://005545448900d6ee922e705ddb74eaaf714880f81def8cde51acb2085b69d217"}]}