{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Sikoba Network SKO utility token\r\n//\r\n// For details, please visit: https://www.sikoba.com\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    event AdminChange(address indexed _admin, bool _status);\r\n\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n    modifier onlyAdmin { require(isAdmin[msg.sender]); _; }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        isAdmin[owner] = true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferProposed(owner, _newOwner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function addAdmin(address _a) public onlyOwner {\r\n        require(isAdmin[_a] == false);\r\n        isAdmin[_a] = true;\r\n        emit AdminChange(_a, true);\r\n    }\r\n\r\n    function removeAdmin(address _a) public onlyOwner {\r\n        require(isAdmin[_a] == true);\r\n        isAdmin[_a] = false;\r\n        emit AdminChange(_a, false);\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC20Interface\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public tokensIssuedTotal;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return tokensIssuedTotal;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        require(_to != 0x0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        require(_to != 0x0);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Sikoba SKO utility token\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SikobaToken is ERC20Token {\r\n\r\n    /*\r\n\r\n    Token sales will be done by minting tokens using this contract and sending \r\n    these tokens to external token sale smart contracts. Unsold tokens can \r\n    be burned afterwards, if necessary.\r\n\r\n    */\r\n\r\n\r\n    // Utility variable\r\n\r\n    uint constant E18 = 10**18;\r\n\r\n    // Basic token data\r\n\r\n    string public constant name = \"Sikoba Token\";\r\n    string public constant symbol = \"SKO\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // SKO1 token migration\r\n\r\n    address public SKO1_ADDRESS = 0x4994e81897a920c0FEA235eb8CEdEEd3c6fFF697;\r\n    uint public constant SKO1_SUPPLY = 1510676914269009862443250;\r\n    uint public sko1ExchangeReserve = 1510676914269009862443250;\r\n    uint public sko1ExchangeDeadline = 1609459200; // 01-JAN-2021 00:00 UTC\r\n\r\n    // Token parameters and minting\r\n\r\n    uint public constant MAX_TOTAL_TOKEN_SUPPLY = 10**8 * E18; // 100,000,000\r\n    uint public ownerMinted = 0;\r\n    bool public mintingComplete = false;\r\n\r\n    // Trade control and Locking\r\n\r\n    bool public tokensTradeable = false;\r\n    mapping (address => bool) public unlocked;\r\n\r\n    // Migration control\r\n\r\n    bool public isMigrationPhaseOpen = false;\r\n    uint public tokensMigrated;\r\n\r\n\r\n    // Events -----------------------------------------------------------------\r\n\r\n    event Unlocked(address _account);\r\n    event Minted(address _account, uint _tokens);\r\n    event Burned(address _account, uint _tokens);\r\n    event Sko1TokensExchanged(address _sender, uint _amount);\r\n    event ExchangeReserveReleased(uint _amount);\r\n    event TokenMigrationRequested(address _sender, uint _amount, uint _total);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Basic Functions\r\n\r\n    constructor() public {}\r\n\r\n    function () public {}\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Owner Functions\r\n\r\n\r\n    // Locking\r\n\r\n    function unlock(address _account) public onlyAdmin {\r\n        unlocked[_account] = true;\r\n        emit Unlocked(_account);\r\n    }\r\n\r\n    function unlockMultiple(address[] _accounts) public onlyAdmin {\r\n        require(_accounts.length <= 100);\r\n        for (uint j; j < _accounts.length; j++) {\r\n            unlocked[_accounts[j]] = true;\r\n        }\r\n    }\r\n    \r\n    // Declare Minting Complete\r\n    \r\n    function declareMintingComplete() public onlyOwner {\r\n        mintingComplete = true;\r\n    }\r\n\r\n    // Declare Tradeable\r\n\r\n    function makeTradeable() public onlyOwner {\r\n        tokensTradeable = true;\r\n    }\r\n\r\n    // Declare Migration to Mainnet \r\n\r\n    function openMigrationPhase() public onlyOwner {\r\n        isMigrationPhaseOpen = true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Minting\r\n\r\n    function mint(address _account, uint _tokens) public onlyOwner {\r\n        _mint(_account, _tokens);\r\n    }\r\n\r\n    function mintMultiple(address[] _accounts, uint[] _tokens) public onlyOwner {\r\n        require(_accounts.length <= 100);\r\n        require(_accounts.length == _tokens.length);\r\n        for (uint j; j < _accounts.length; j++) {\r\n            _mint(_accounts[j], _tokens[j]);\r\n        }\r\n    }\r\n\r\n    function availableToMint() public view returns(uint){\r\n        return MAX_TOTAL_TOKEN_SUPPLY.sub(ownerMinted).sub(sko1ExchangeReserve);\r\n    }\r\n\r\n    function _mint(address _account, uint _tokens) private {\r\n        require(mintingComplete == false);\r\n        require(_account != 0x0);\r\n        require(_tokens > 0);\r\n        require(_tokens <= availableToMint());\r\n\r\n        // update\r\n        balances[_account] = balances[_account].add(_tokens);\r\n        ownerMinted = ownerMinted.add(_tokens);\r\n        tokensIssuedTotal = tokensIssuedTotal.add(_tokens);\r\n\r\n        // log event\r\n        emit Transfer(0x0, _account, _tokens);\r\n        emit Minted(_account, _tokens);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // SKO1 Exchange\r\n    //\r\n    // SKO1 token holder needs to call approve() before calling exchangeSKO1tokens()\r\n    //\r\n    // Burns sent SKO1 tokens, issues SKO tokens, reduces sko1ExchangeReserve\r\n\r\n\r\n    function exchangeSKO1tokens(uint _tokens) public {\r\n        require(now <= sko1ExchangeDeadline);\r\n        require(sko1ExchangeReserve >= _tokens);\r\n        require(ERC20Interface(SKO1_ADDRESS).transferFrom(msg.sender, 0x0, _tokens));\r\n        sko1ExchangeReserve = sko1ExchangeReserve.sub(_tokens);\r\n        _mint(msg.sender, _tokens);\r\n        emit Sko1TokensExchanged(msg.sender, _tokens);\r\n    }\r\n\r\n    function releaseSKO1reserve() public onlyOwner {\r\n        require(now > sko1ExchangeDeadline);\r\n        emit ExchangeReserveReleased(sko1ExchangeReserve);\r\n        sko1ExchangeReserve = 0;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Burn tokens\r\n\r\n    function burn(uint _tokens) public {\r\n        require(_tokens > 0);\r\n        require(_tokens <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_tokens);\r\n        tokensIssuedTotal = tokensIssuedTotal.sub(_tokens);\r\n        \r\n        emit Transfer(msg.sender, 0x0, _tokens);\r\n        emit Burned(msg.sender, _tokens);        \r\n    }\r\n\r\n    function burnAll() public {\r\n        burn(balances[msg.sender]);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Token Migration => Mainnet\r\n\r\n    function requestTokenMigrationAll() public {\r\n        requestTokenMigration(balances[msg.sender]);\r\n    }\r\n\r\n    function requestTokenMigration(uint _tokens) public {\r\n        require(isMigrationPhaseOpen);\r\n        require(_tokens > 0);\r\n        require(_tokens <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_tokens);\r\n        tokensIssuedTotal = tokensIssuedTotal.sub(_tokens);\r\n        tokensMigrated = tokensMigrated.add(_tokens);\r\n\r\n        emit Transfer(msg.sender, 0x0, _tokens);\r\n        emit TokenMigrationRequested(msg.sender, _tokens, tokensMigrated);\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // ERC20 functions\r\n\r\n\r\n    /* Transfer out any accidentally sent ERC20 tokens */\r\n\r\n    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_token_address).transfer(owner, _amount);\r\n    }\r\n\r\n    /* Override \"transfer\" */\r\n\r\n    function transfer(address _to, uint _amount) public returns (bool success) {\r\n        require(tokensTradeable || unlocked[msg.sender]);\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    /* Override \"transferFrom\" */\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n        require(tokensTradeable || unlocked[_from]);\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    /* Multiple token transfers from one address to save gas */\r\n\r\n    function transferMultiple(address[] _addresses, uint[] _amounts) external {\r\n        require(_addresses.length <= 100);\r\n        require(_addresses.length == _amounts.length);\r\n        for (uint j; j < _addresses.length; j++) {\r\n            transfer(_addresses[j], _amounts[j]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sko1ExchangeReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareMintingComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sko1ExchangeDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SKO1_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"exchangeSKO1tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openMigrationPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTradeable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationPhaseOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"unlockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensTradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestTokenMigrationAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SKO1_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"requestTokenMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseSKO1reserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sko1TokensExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeReserveReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"TokenMigrationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AdminChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SikobaToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eb31bdd79deb791a2994fcc6ab75f2b5c79b3400467e55300a461c338513f6a2"}]}