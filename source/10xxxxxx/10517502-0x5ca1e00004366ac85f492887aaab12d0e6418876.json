{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\n/**\r\n ******************************************************************\r\n *\r\n *                    ██████████████████\r\n *                  ██                  ██\r\n *                ██  ██████████████████  ██\r\n *              ██  ██████████████████████  ██\r\n *            ██  ██████████████████████████  ██\r\n *          ██  ██████████████████████████████  ██\r\n *        ██  ██████████████████████████████████  ██\r\n *      ██  ██████████████████████████████████████  ██\r\n *      ██  ██████    ██      ████  ████    ██████  ██\r\n *      ██  ████  ████████  ████  ██  ██  ██  ████  ██\r\n *      ██  ████  ████████  ████  ██  ██  ██  ████  ██\r\n *      ██  ██████  ██████  ████  ██  ██    ██████  ██\r\n *      ██  ████████  ████  ████  ██  ██  ████████  ██\r\n *      ██  ████████  ████  ████  ██  ██  ████████  ██\r\n *      ██  ████    ██████  ██████  ████  ████████  ██\r\n *      ██  ██████████████████████████████████████  ██\r\n *        ██  ██████████████████████████████████  ██\r\n *          ██  ██████████████████████████████  ██\r\n *            ██  ██████████████████████████  ██\r\n *              ██  ██████████████████████  ██\r\n *                ██  ██████████████████  ██\r\n *                  ██                  ██\r\n *                    ██████████████████\r\n *\r\n ******************************************************************\r\n *                   DO NOT SEND ETH HERE!\r\n ****************************************************************** \r\n */ \r\n\r\n/**\r\n * @title DoNotSendFundsHere\r\n * @dev This contract is a stub to recover mainnet funds sent to the Prysmatic Labs testnet address. \r\n * The testnet contract is deployed on Goerli, not on Ethereum's main network. Do not send funds here!\r\n * If you sent funds here by mistake, please email contact at prysmaticlabs.com with \r\n * proof that you are the originator of the lost funds.\r\n */\r\ncontract DoNotSendFundsHere {\r\n    address payable public owner;\r\n\r\n    /// @dev Initialize the contract with the contract creator as the owner.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /// @dev Modifier to require the message sender to be the owner.\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Sender not authorized.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /// @dev Change the sole owner of the contract.\r\n    /// @param _newOwner the address of the new owner of this contract.\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    /// @dev Send all ETH held by the contract to the contract owner.\r\n    function recoverETHFunds() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    /// @dev Approve ERC20 spending for a particular ERC20 token.\r\n    /// @param _token The ERC20 token address.\r\n    /// @param _spender The spender address to authorize spending on behalf of this contract.\r\n    /// @param _value The amount authorized for the _spender.\r\n    function approveERC20Funds(ERC20 _token, address _spender, uint _value) public onlyOwner {\r\n        _token.approve(_spender, _value);\r\n    }\r\n    \r\n    /// @dev Send all of the ERC20 token owned by this contract to the contract owner.\r\n    /// @param _token The ERC20 token address.\r\n    function recoverERC20Funds(ERC20 _token) public onlyOwner {\r\n        _token.transfer(owner, _token.balanceOf(address(this)));\r\n    }\r\n    \r\n    /// @dev Fallback payable. DO NOT SEND ETH HERE!!! The reason this does not reject any non-zero transaction\r\n    /// is that users sending directly from centralized exchanges may experience a total loss if their transaction\r\n    /// is rejected. Do not send ETH here.\r\n    receive() external payable { }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveERC20Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverERC20Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DoNotSendFundsHere","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b42870d00cc30edaad21582eaf5b461592998036ed7c840d5b40ea2ca659ae90"}]}