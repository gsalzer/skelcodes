{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * This source code belongs to Augur\r\n */\r\n/**\r\n * @title SafeMathInt256\r\n * @dev Int256 math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMathInt256 {\r\n    // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)\r\n    int256 private constant INT256_MIN = -2**(255);\r\n    int256 private constant INT256_MAX = (2**(255) - 1);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // No need to check for dividing by 0 -- Solidity automatically throws on division by 0\r\n        int256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        require(((a >= 0) && (b >= a - INT256_MAX)) || ((a < 0) && (b <= a - INT256_MIN)));\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        require(((a >= 0) && (b <= INT256_MAX - a)) || ((a < 0) && (b >= INT256_MIN - a)));\r\n        return a + b;\r\n    }\r\n\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        if (a <= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        if (a >= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        if (a < 0) {\r\n            return -a;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    function getInt256Min() internal pure returns (int256) {\r\n        return INT256_MIN;\r\n    }\r\n\r\n    function getInt256Max() internal pure returns (int256) {\r\n        return INT256_MAX;\r\n    }\r\n\r\n    // Float [fixed point] Operations\r\n    function fxpMul(int256 a, int256 b, int256 base) internal pure returns (int256) {\r\n        return div(mul(a, b), base);\r\n    }\r\n\r\n    function fxpDiv(int256 a, int256 b, int256 base) internal pure returns (int256) {\r\n        return div(mul(a, base), b);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract FinalBondingCurve {\r\n    using SafeMath for uint;\r\n    using SafeMathInt256 for int;\r\n\r\n    uint constant private MAX_INT = 2**255-1;\r\n    uint constant private bisectionPrecision = 0.01 ether; \r\n    int constant private displacement = 2e15;\r\n    int constant private B = 4*3.2000e40;\r\n    int constant private A = 1250000;\r\n    \r\n    uint public cap;\r\n\r\n    constructor(uint _cap) public {\r\n        cap = _cap;\r\n    }\r\n\r\n    function computeSaleParameters(\r\n        uint a, // Tokens sold up to now\r\n        uint R // Reserve currency amount that you are willing to spend\r\n    ) \r\n        public   \r\n        view\r\n        returns (\r\n            uint T, // T = b - a, amount of tokens\r\n            uint finalExpenditure\r\n        )\r\n    {\r\n        \r\n        uint b_cap = cap;\r\n        uint b = b_cap;\r\n        uint best_b;\r\n        uint lower = a;\r\n        uint iterations;\r\n\r\n        uint Rr;  // R(sub)r stands for required reserve currency: amount that is needed to purchase b - a tokens\r\n\r\n        while(iterations < 20) {\r\n            Rr = evaluateIntegral(safeCastUintToInt(b), safeCastUintToInt(a));\r\n            if(Rr > R) {\r\n                // If the required value is more than what is attached, \r\n                // we need to find a lower value than R\r\n                b_cap = b;\r\n                b = ((b.sub(lower)).div(2)).add(lower); // b = lower + [b - lower] / 2\r\n            } else {\r\n                finalExpenditure = Rr;\r\n                best_b = b;\r\n                lower = best_b;\r\n\r\n                if(R.sub(Rr) > bisectionPrecision) {\r\n                    if(b == b_cap) {\r\n                        break;\r\n                    }\r\n                    b = ((b_cap.sub(b)).div(2)).add(b);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            iterations++;\r\n        }\r\n\r\n        require(\r\n            finalExpenditure <= R, \r\n            \"FinalBondingCurve.computeSaleParameters() - Not enough ether\"\r\n        );\r\n\r\n        if(finalExpenditure > 0) {\r\n            T = best_b.sub(a);\r\n        }\r\n        require(T > 0, \"FinalBondingCurve.computeSaleParameters() - Returned 0 tokens\");\r\n    }\r\n\r\n    function evaluateIntegral(int b, int a) public pure returns (uint) {\r\n        int _displacement = displacement;\r\n\r\n        int _b;\r\n        int _a;\r\n\r\n        int b_delta = b.sub(_displacement);\r\n        int a_delta = a.sub(_displacement);\r\n\r\n        int _b_fourthComponent = power(uint(SafeMathInt256.abs(b_delta)), uint32(4), false).div(B);\r\n        int _b_firstComponent = A.mul(b_delta);\r\n\r\n        _b = _b_fourthComponent.add(_b_firstComponent);\r\n\r\n        _a = power(uint(SafeMathInt256.abs(a_delta)), uint32(4), false).div(B)\r\n            .add(A.mul(a_delta));\r\n\r\n        require(\r\n            _b > _a, \r\n            \"FinalBondingCurve.evaluateIntegral() - Negative price computed\"\r\n        );\r\n\r\n        int result = _b.sub(_a);\r\n        return uint(result);\r\n        \r\n    }\r\n\r\n    function power(\r\n        uint256 base,\r\n        uint32 exp,\r\n        bool negativeBase // true if base is negative\r\n    ) \r\n        public\r\n        pure\r\n        returns (int) \r\n    {\r\n        // (uint result, uint8 precision) = Power.power(base, 1, exp, 1);\r\n        // result = result.div(2**uint(precision));\r\n\r\n        uint result = u_pow(base, uint(exp));\r\n        if(negativeBase) {\r\n            return safeCastUintToInt(result) * int(-1);\r\n        } else {\r\n            return safeCastUintToInt(result);\r\n        }\r\n    }\r\n\r\n    function u_pow(uint a, uint b) public pure returns (uint r) {\r\n        r = 1;\r\n        while(true) {\r\n            if(b % 2 == 1) r = r.mul(a);\r\n            \r\n            b /= 2;\r\n            if(b == 0) break;\r\n            a = a.mul(a);\r\n        }\r\n    }\r\n    \r\n    function safeCastUintToInt(uint value) public pure returns (int) {\r\n        require(value <= 2**255-1, \"FinalBondingCurve.castUintToInt - Overflow\");\r\n        return int(value);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\r\n *\r\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\r\n * contract implement this interface (contract holders can be their own\r\n * implementer) and registering it on the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\r\n *\r\n * See {IERC1820Registry} and {ERC1820Implementer}.\r\n */\r\ninterface IERC777Recipient {\r\n    /**\r\n     * @dev Called by an {IERC777} token contract whenever tokens are being\r\n     * moved or created into a registered account (`to`). The type of operation\r\n     * is conveyed by `from` being the zero address or not.\r\n     *\r\n     * This call occurs _after_ the token contract's state is updated, so\r\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the global ERC1820 Registry, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\r\n * implementers for interfaces in this registry, as well as query support.\r\n *\r\n * Implementers may be shared by multiple accounts, and can also implement more\r\n * than a single interface for each account. Contracts can implement interfaces\r\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\r\n * contract.\r\n *\r\n * {IERC165} interfaces can also be queried via the registry.\r\n *\r\n * For an in-depth explanation and source code analysis, see the EIP text.\r\n */\r\ninterface IERC1820Registry {\r\n    /**\r\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\r\n     * account is able to set interface implementers for it.\r\n     *\r\n     * By default, each account is its own manager. Passing a value of `0x0` in\r\n     * `newManager` will reset the manager to this initial state.\r\n     *\r\n     * Emits a {ManagerChanged} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     */\r\n    function setManager(address account, address newManager) external;\r\n\r\n    /**\r\n     * @dev Returns the manager for `account`.\r\n     *\r\n     * See {setManager}.\r\n     */\r\n    function getManager(address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\r\n     * `interfaceHash`.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     * The zero address can also be used in `implementer` to remove an old one.\r\n     *\r\n     * See {interfaceHash} to learn how these are created.\r\n     *\r\n     * Emits an {InterfaceImplementerSet} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\r\n     * end in 28 zeroes).\r\n     * - `implementer` must implement {IERC1820Implementer} and return true when\r\n     * queried for support, unless `implementer` is the caller. See\r\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    /**\r\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\r\n     * implementer is registered, returns the zero address.\r\n     *\r\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\r\n     * zeroes), `account` will be queried for support of it.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     */\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\r\n     * corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\r\n     */\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    /**\r\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\r\n     *  @param account Address of the contract for which to update the cache.\r\n     *  @param interfaceId ERC165 interface for which to update the cache.\r\n     */\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\r\n     *  If the result is not cached a direct lookup on the contract address is performed.\r\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\r\n     *  {updateERC165Cache} with the contract address.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\n\r\nabstract contract ERC777Receiver is IERC777Recipient {\r\n\r\n    // Needed constants to accept ERC777 tokens in deposit\r\n    IERC1820Registry constant private _erc1820 = // See EIP1820\r\n        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH = // See EIP777\r\n        keccak256(\"ERC777TokensRecipient\");\r\n\r\n    constructor() public {\r\n        // Register as a token receiver\r\n        _erc1820.setInterfaceImplementer(\r\n            address(this), \r\n            TOKENS_RECIPIENT_INTERFACE_HASH, \r\n            address(this)\r\n        );\r\n    }\r\n\r\n    address private token;\r\n\r\n    //  @dev: This hook is called when the contract receives GeoTokens.\r\n    //  The contract can only receive GeoTokens from the owner\r\n    function tokensReceived(\r\n        address /*operator*/,\r\n        address from,\r\n        address /*to*/,\r\n        uint256 ,\r\n        bytes calldata /*userData*/,\r\n        bytes calldata /*operatorData*/\r\n    ) external override {\r\n        require(msg.sender == getToken(), \"GeoPreSale.tokensReceived() - Wrong token\");\r\n        require(from == getOwner(), \"GeoPreSale.tokensReceived() - Only owner\");\r\n    }\r\n\r\n    function getOwner() virtual public view returns(address);\r\n\r\n    function getToken() virtual public view returns(address);\r\n}\r\n\r\n\r\ncontract Withdrawable is Ownable {\r\n\r\n    event EtherWithdrawn(\r\n        address sender,\r\n        uint amount\r\n    );\r\n\r\n    receive() external virtual payable {}\r\n\r\n    // @dev: allows the owner to withdraw the eth that has been deposited in the contract\r\n    function withdrawEth() external onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        uint bal;\r\n        assembly {\r\n            bal := selfbalance()\r\n        }\r\n        require(\r\n            bal > 0, \r\n            \"Withdrawable withdrawEth() - No ether balance in the contract\"\r\n        );\r\n        (bool success, ) = to.call{value: bal}(\"\");\r\n        require(\r\n            success,\r\n            \"Withdrawable withdrawEth() - Could not withdraw eth\"\r\n        );\r\n\r\n        emit EtherWithdrawn(\r\n            msg.sender,\r\n            bal\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract GeoSale is \r\n    ERC777Receiver,\r\n    Withdrawable,\r\n    FinalBondingCurve {\r\n\r\n    uint constant private PEAK_PRICE = 1500000; // WEI / GAGEO\r\n\r\n    address public token;\r\n\r\n    uint public startSaleTimestamp; // Unix timestamp\r\n    uint public duration; // Seconds\r\n    uint public price = 1000000; // WEI / GAGEO\r\n    uint public tokensSold; // in nanoGeos (gaGeos)\r\n\r\n    event PurchasedGeoTokens(\r\n        address indexed sender,\r\n        uint ethAmount,\r\n        uint geoAmount,\r\n        uint returnedEth\r\n    );\r\n\r\n    event RemainingGeoTokensWithdrawn(\r\n        address sender,\r\n        uint amount\r\n    );\r\n\r\n    constructor(\r\n        uint _startSaleTimestamp,\r\n        uint _duration,\r\n        uint _cap,\r\n        address _token\r\n    )\r\n        FinalBondingCurve(_cap)\r\n        public \r\n    {\r\n        require(cap > 0);\r\n        require(_token != address(0));\r\n        require(_duration > 0);\r\n        startSaleTimestamp = _startSaleTimestamp;\r\n        duration = _duration;\r\n        token = _token;\r\n    }\r\n\r\n    fallback() external {\r\n        revert(\"GeoPreSale - Fallback function called\");\r\n    }\r\n\r\n    receive() external payable override {\r\n        swapEtherForGeo();\r\n    }\r\n\r\n    function setStartSaleTimestamp(uint timestamp) external onlyOwner {\r\n        startSaleTimestamp = timestamp;\r\n    }\r\n\r\n    function setDuration(uint _duration) external onlyOwner {\r\n        require(_duration > 0);\r\n        duration = _duration;\r\n    }\r\n\r\n    function setToken(address _token) external onlyOwner {\r\n        require(_token != address(0));\r\n        token = _token;\r\n    }\r\n\r\n    function setCap(uint _cap) external onlyOwner {\r\n        require(_cap > 0);\r\n        FinalBondingCurve.cap = _cap;\r\n    }\r\n\r\n    // @dev: allows the owner to withdraw GeoTokens that have not been sold out\r\n    // after the sale has ended\r\n    function withdrawGeo() external onlyOwner {\r\n        require(saleIsOver(), \"GeoSale.withdrawGeo() - Sale is not over\");\r\n\r\n        IERC20 _token = IERC20(getToken());\r\n        uint remainingTokens = _token.balanceOf(address(this));\r\n        _token.transfer(msg.sender, remainingTokens);\r\n\r\n        emit RemainingGeoTokensWithdrawn(\r\n            msg.sender,\r\n            remainingTokens\r\n        );\r\n    }\r\n\r\n    function swapEtherForGeo() public payable returns (bool) {\r\n        require(saleStarted(), \"GeoSale.swapEtherForGeo() - Sale has not started\");\r\n        require(!saleIsOver(), \"GeoSale.swapEtherForGeo() - Sale is over\");\r\n\r\n        uint _tokensSold = tokensSold;\r\n        uint _cap = cap;\r\n        uint tokensBought;\r\n        uint finalExpenditure;\r\n\r\n        if(_tokensSold < _cap) {\r\n            (tokensBought, finalExpenditure) = computeSaleParameters(_tokensSold, msg.value);\r\n            _tokensSold = _tokensSold.add(tokensBought);\r\n\r\n            if(_tokensSold >= _cap && msg.value > finalExpenditure) {\r\n                uint tokensBoughtAtFixexRate = purchaseAtFixedRate(msg.value.sub(finalExpenditure));\r\n                finalExpenditure = finalExpenditure.add(tokensBoughtAtFixexRate.mul(PEAK_PRICE));\r\n                tokensBought = tokensBought.add(tokensBoughtAtFixexRate);\r\n                _tokensSold = _tokensSold.add(tokensBoughtAtFixexRate);\r\n            }\r\n        } else {\r\n            tokensBought = purchaseAtFixedRate(msg.value);\r\n            finalExpenditure = tokensBought.mul(PEAK_PRICE);\r\n            _tokensSold = _tokensSold.add(tokensBought);\r\n        }\r\n\r\n        price = finalExpenditure.div(tokensBought);\r\n        tokensSold = _tokensSold;\r\n        uint returnedEth = msg.value.sub(finalExpenditure);\r\n\r\n        // Up to this moment, computations were done in nanoGeos.\r\n        // So we perform a conversion to attoGeos by multiplying by 10^9\r\n        tokensBought = tokensBought.mul(10**9);\r\n        require(IERC20(getToken()).transfer(msg.sender, tokensBought));\r\n        address payable to = payable(msg.sender);\r\n        (bool success, ) = to.call{value: returnedEth}(\"\");\r\n        require(\r\n            success,\r\n            \"GeoSale.swapEtherForGeo - Could not return eth\"\r\n        );\r\n\r\n        emit PurchasedGeoTokens(\r\n            msg.sender,\r\n            finalExpenditure,\r\n            tokensBought,\r\n            returnedEth\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function precomputePurchase(uint value) \r\n        external \r\n        view \r\n        returns(uint tokensBought, uint finalExpenditure, uint _price) \r\n    {\r\n        if(!saleStarted()) {\r\n            return (0,0,0);\r\n        }\r\n\r\n        if(saleIsOver()) {\r\n            return (0,0,0);\r\n        }\r\n\r\n        uint _tokensSold = tokensSold;\r\n        uint _cap = cap;\r\n\r\n        if(_tokensSold < _cap) {\r\n            (tokensBought, finalExpenditure) = computeSaleParameters(_tokensSold, value);\r\n            _tokensSold = _tokensSold.add(tokensBought);\r\n\r\n            if(_tokensSold >= _cap && value > finalExpenditure) {\r\n                uint tokensBoughtAtFixexRate = purchaseAtFixedRate(value.sub(finalExpenditure));\r\n                finalExpenditure = finalExpenditure.add(tokensBoughtAtFixexRate.mul(PEAK_PRICE));\r\n                tokensBought = tokensBought.add(tokensBoughtAtFixexRate);\r\n                _tokensSold = _tokensSold.add(tokensBoughtAtFixexRate);\r\n            }\r\n        } else {\r\n            tokensBought = purchaseAtFixedRate(value);\r\n            finalExpenditure = tokensBought.mul(PEAK_PRICE);\r\n            _tokensSold = _tokensSold.add(tokensBought);\r\n        }\r\n\r\n        // Up to this moment, computations were done in nanoGeos.\r\n        // So we perform a conversion to attoGeos by multiplying by 10^9\r\n        tokensBought = tokensBought.mul(10**9);\r\n        \r\n        _price = finalExpenditure.div(tokensBought);\r\n    }\r\n\r\n    function purchaseAtFixedRate(uint value) internal pure returns (uint) {\r\n        return value.div(PEAK_PRICE);\r\n    }\r\n\r\n    function getToken() public view override returns (address) {\r\n        return token;\r\n    }\r\n\r\n    function getOwner() public view override returns (address) {\r\n        return Ownable.owner();\r\n    }\r\n\r\n    function getPrice() public view returns (uint) {\r\n        return price;\r\n    }\r\n\r\n    function getTokensSold() public view returns (uint) {\r\n        return tokensSold;\r\n    }\r\n\r\n    function getStartSaleTimestamp() public view returns (uint) {\r\n        return startSaleTimestamp;\r\n    }\r\n\r\n    function endSaleTimestamp() public view returns (uint) {\r\n        return now + duration;\r\n    }\r\n\r\n    function getEndSaletimestamp() public view returns (uint) {\r\n        return now + duration;\r\n    }\r\n\r\n    function saleStarted() public view returns (bool) {\r\n        return now > startSaleTimestamp;\r\n    }\r\n\r\n    function saleIsOver() public view returns (bool) {\r\n        return now > startSaleTimestamp + duration;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startSaleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"geoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedEth\",\"type\":\"uint256\"}],\"name\":\"PurchasedGeoTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemainingGeoTokensWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R\",\"type\":\"uint256\"}],\"name\":\"computeSaleParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalExpenditure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"evaluateIntegral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndSaletimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"exp\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"negativeBase\",\"type\":\"bool\"}],\"name\":\"power\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"precomputePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalExpenditure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeCastUintToInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEtherForGeo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"u_pow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGeo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GeoSale","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005f43abc0000000000000000000000000000000000000000000000000000000000003f480000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000000147faf8de9d8d8daae129b187f0d02d819126750","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d75079de5df22ffc168636b4e30efb8f64e9f316a5c973b550318cab839028ff"}]}