{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value \\u003c= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"DFAToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\u0027./StandardToken.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\n\\r\\ncontract DFAToken is StandardToken, Ownable {\\r\\n\\r\\n    string public name = \\u0027DEFI ASSETS\\u0027;\\r\\n    string public symbol = \\u0027DFA\\u0027;\\r\\n    uint8 public decimals = 6;\\r\\n    // A_total_of_300_million\\r\\n    uint public INITIAL_SUPPLY = 300000000 * (10 ** uint(decimals));\\r\\n    \\r\\n\\r\\n    //Array for release days. \\r\\n    //The following 10 years, tokens will be release on a monthly basis based on the days recorded\\r\\n    uint[] public releaseDays;\\r\\n    \\r\\n    // 10% initial Address\\r\\n    address public initialAddress = 0x35c4a0A5331B00E8E3e8af2d6bF87391B735C21E;\\r\\n    // Fundpool\\r\\n    uint[] public fundsPool;\\r\\n    \\r\\n    // White List\\r\\n    address[] public whiteList;\\r\\n\\r\\n    // Creation_time\\r\\n    uint public createTime = 0;\\r\\n    \\r\\n    //DFA_fundpool_retrieving_event\\r\\n    event WithdrawDFA(uint256 _value);\\r\\n\\r\\n    // \\r\\n    event Burn(address _from, uint256 _value);\\r\\n    \\r\\n    constructor() public {\\r\\n        // totalSupply 300000000\\r\\n        totalSupply_ = INITIAL_SUPPLY;\\r\\n        // 10%_supply\\r\\n        balances[initialAddress] = INITIAL_SUPPLY / 10;\\r\\n        emit Transfer(0x0, initialAddress, INITIAL_SUPPLY / 10);\\r\\n        \\r\\n        // Initial_fundpool_usage\\r\\n        // 15%_team_and_consultant(distributed_across_five_years)\\r\\n        fundsPool.push(INITIAL_SUPPLY * 15 / 100);\\r\\n        // 35%_ecosystem_development(distributed_across_ten_years)\\r\\n        fundsPool.push(INITIAL_SUPPLY * 35 / 100);\\r\\n        // 40%_temporarily_be_used_for_upgrading_of_the_mainnet_with_the_burning_of_the_original_tokens(completed_in_one_year)\\r\\n        fundsPool.push(INITIAL_SUPPLY * 40 / 100);\\r\\n        \\r\\n        // Initial_whitelist\\r\\n        whiteList.push(0x35c4a0A5331B00E8E3e8af2d6bF87391B735C21E);  \\r\\n        whiteList.push(0x75e2cc6cdfB4f3EF49fCcBFe0E2F7A7Ad4dDCFf1);  \\r\\n        whiteList.push(0xff40C95213f5908F315B036e73879B647f2b4167);  \\r\\n        whiteList.push(0xfEe93971c484886AA661751C5C971B72f4547c8E);  \\r\\n        whiteList.push(0x1016C70A8A7181aa3EEA84880bCE854f07E91410);  \\r\\n        whiteList.push(0xc4DA6E5Fa98926656A604068B56DAf4eBf0E5cd5);  \\r\\n        whiteList.push(0x3aDc956184eC3266c2c90760c8c6A60AfBF5A279);  \\r\\n        whiteList.push(0x8b95f4b54d8DdB969156e34adC992Bdcb051fb36);  \\r\\n        whiteList.push(0x4BB8Be7369f145917A9AC475df3F79B9640366b0);  \\r\\n        whiteList.push(0xdac18fAD59198b02Cc967BB5edC75B6e8881a851);  \\r\\n        whiteList.push(0xA7cf173Af2143acD11330fa2c8748B19B79E3AA6);  \\r\\n        whiteList.push(0xDA5Dd9Ca94cc689C4c5Ce42708b65BAE25279c74);  \\r\\n        whiteList.push(0xfCCa5A8d5Ef0C6BA23AcbDBf2652565e8Bd1269b);  \\r\\n        whiteList.push(0x20c1C8B34D96c312060a758f8f7440F7D6F9779d);  \\r\\n        whiteList.push(0x11D8bE6c73FAF023117C226d08A08fF380571617);  \\r\\n        whiteList.push(0x60a08Ba2688F1F94A8Ea3CB7e1F917c514E45f54);  \\r\\n        whiteList.push(0x461cf291ecAa62A2eb682DBFF8d2b4B530334CD5);  \\r\\n        whiteList.push(0x479Fd5A1c96a0109799Ecb9408d23f6F3CFA8613);  \\r\\n        whiteList.push(0xbD05ACD1875e10aDCFF18897AA20a02c1EC51ec6);  \\r\\n        whiteList.push(0x61Fd74d003FF9d557a5aF5a470611714ECDb5e45);  \\r\\n        whiteList.push(0xF7fF79a41c7020361660d09312BAA67B659E7D4D);  \\r\\n        \\r\\n        // Recorded_creation_time\\r\\n        createTime = now;\\r\\n\\r\\n      \\r\\n        // initialize the release time array (the nth element represents how much has passed since createTime Day is considered to be an array of days per month for the next 10 years after n+1 months, used to calculate the release time)\\r\\n        releaseDays = [31,62,92,123,153,184,215,243,274,304,335,365,396,427,457,488,518,549,580,608,639,669,700,730,761,792,822,853,883,914,945,973,1004,1034,1065,1095,1126,1157,1187,1218,1248,1279,1310,1339,1370,1400,1431,1461,1492,1523,1553,1584,1614,1645,1676,1704,1735,1765,1796,1826,1857,1888,1918,1949,1979,2010,2041,2069,2100,2130,2161,2191,2222,2253,2283,2314,2344,2375,2406,2434,2465,2495,2526,2556,2587,2618,2648,2679,2709,2740,2771,2800,2831,2861,2892,2922,2953,2984,3014,3045,3075,3106,3137,3165,3196,3226,3257,3287,3318,3349,3379,3410,3440,3471,3502,3530,3561,3591,3622,3652];\\r\\n    }\\r\\n    \\r\\n   // Only_the_contract_creator_has_the_right_to_allocate_DFA_from_fundpool\\r\\n    function allocateDFA(\\r\\n        address _receiver,\\r\\n        uint256 _value,\\r\\n        uint8 _poolIndex\\r\\n    )\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_value \\u003e 0, \\\"Allocating 0 DFA is not allowed.\\\");\\r\\n        require(_poolIndex \\u003e= 0 \\u0026\\u0026 _poolIndex \\u003c 3, \\\"Pool index 0,1,2 is valid.\\\");\\r\\n        // Automatic zero padding\\r\\n        _value = _value * (10 ** uint(decimals));\\r\\n        // Search_whether_the_receiver_is_in_the_whitelist\\r\\n        bool inWhiteList = false;\\r\\n        for (uint i = 0; i \\u003c whiteList.length; i++) {\\r\\n            if (whiteList[i] == _receiver) {\\r\\n                inWhiteList = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(inWhiteList, \\\"The receiver is not in the whitelist\\\");\\r\\n        \\r\\n      \\r\\n        //calculate_the_number_of_months_after_the_contract_announced\\r\\n        uint d = (now - createTime) / 1 days;\\r\\n        \\r\\n        //calculated the month from the release time array,\\r\\n        uint months = 0;\\r\\n        while (months \\u003c 120) {\\r\\n            if (d \\u003c releaseDays[months]) {\\r\\n                break;\\r\\n            } else {\\r\\n                months++;\\r\\n            }\\r\\n        }\\r\\n      \\r\\n\\r\\n       // Leftover_DFA_amount_in_fundpool\\r\\n        uint remain = fundsPool[_poolIndex];\\r\\n       // Calculate_the_locked_DFA_amount\\r\\n        uint locked = 0;\\r\\n        // amount of DFAs  can be allocated at this time\\r\\n        uint allocatableDFA = 0;\\r\\n        // Calculate_the_allocated_DFA_amount\\r\\n        if (_poolIndex == 0) { //  // split_into_five_years,_60_months\\r\\n            locked = (60 \\u003e= months ? 60 - months : 0) * (INITIAL_SUPPLY * 15 / 100 / 60);\\r\\n            allocatableDFA = remain \\u003e= locked ? remain - locked : 0;\\r\\n        } else if (_poolIndex == 1) { //  split_into_ten_years,_120_months\\r\\n            locked = (120 \\u003e= months ? 120 - months : 0) * (INITIAL_SUPPLY * 35 / 100 / 120);\\r\\n            allocatableDFA = remain \\u003e= locked ? remain - locked : 0;\\r\\n        } else if (_poolIndex == 2) { // Lock_for_one_year_and_available_after_one_year\\r\\n            allocatableDFA = months \\u003e= 12 ? remain : 0;\\r\\n        } else { // should not go to here\\r\\n            allocatableDFA = 0;\\r\\n        }\\r\\n        \\r\\n       // Allocate_DFAs_when_there_are_sufficient_DFAs_in_the_fundpool\\r\\n        require(allocatableDFA \\u003e= _value, \\\"Not enough DFAs to distribute in the fundpool\\\");\\r\\n        fundsPool[_poolIndex] = fundsPool[_poolIndex] - _value;\\r\\n        balances[_receiver] = balances[_receiver].add(_value);\\r\\n        emit Transfer(0x0, _receiver, _value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // The_contract_creator_has_the_right_to_destroy_DFA_in_the_fundpool\\r\\n    function withdrawDFA(\\r\\n        uint256 _value\\r\\n    )\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_value \\u003e 0, \\\"Retrieving 0 DFA is not allowed.\\\");\\r\\n        // Automatic zero padding\\r\\n        _value = _value * (10 ** uint(decimals));\\r\\n        require(fundsPool[2] \\u003e= _value, \\\"The amount of DFA in the fundpool is insufficient to retrieve.\\\");\\r\\n        fundsPool[2] = fundsPool[2] - _value;\\r\\n        totalSupply_ = totalSupply_ - _value;\\r\\n        emit WithdrawDFA(_value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n       // _owner destroy DFA\\r\\n    function burn(uint256 _value) public returns (bool success) {\\r\\n        require(balances[msg.sender] \\u003e= _value);                 // Check if the sender has enough\\r\\n        balances[msg.sender] = balances[msg.sender] - _value;    // Subtract from the sender\\r\\n        totalSupply_ = totalSupply_ - _value;                    // Updates totalSupply_\\r\\n        emit Burn(msg.sender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Destroy DFA\\r\\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\\r\\n        require(balances[_from] \\u003e= _value);                                       // Check if the targeted balance is enough\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);                            // Check allowance\\r\\n        balances[_from] = balances[_from] - _value;                               // Subtract from the targeted balance\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;         // Subtract from the sender\\u0027s allowance\\r\\n        totalSupply_ = totalSupply_ - _value;                                     // Update totalSupply_\\r\\n        emit Burn(_from, _value);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n  address public owner;\\r\\n\\r\\n\\r\\n  event OwnershipRenounced(address indexed previousOwner);\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n   * account.\\r\\n   */\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to relinquish control of the contract.\\r\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\r\\n   * It will not be possible to call the functions with the `onlyOwner`\\r\\n   * modifier anymore.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipRenounced(owner);\\r\\n    owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param _newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(address _newOwner) public onlyOwner {\\r\\n    _transferOwnership(_newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers control of the contract to a newOwner.\\r\\n   * @param _newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function _transferOwnership(address _newOwner) internal {\\r\\n    require(_newOwner != address(0));\\r\\n    emit OwnershipTransferred(owner, _newOwner);\\r\\n    owner = _newOwner;\\r\\n  }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\\u0027t hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b \\u003c= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c \\u003e= _a);\\n    return c;\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_poolIndex\",\"type\":\"uint8\"}],\"name\":\"allocateDFA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundsPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawDFA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawDFA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DFAToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e4172cf695dd2c8d6bfa43294eae4b61832c900cf50de0644cd84eaea64646ce"}]}