{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/Donation.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC721Collection {\r\n    function issueToken(address _beneficiary, string calldata _wearableId) external;\r\n    function getWearableKey(string calldata _wearableId) external view returns (bytes32);\r\n    function issued(bytes32 _wearableKey) external view returns (uint256);\r\n    function maxIssuance(bytes32 _wearableKey) external view returns (uint256);\r\n    function issueTokens(address[] calldata _beneficiaries, bytes32[] calldata _wearableIds) external;\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ncontract ClaimWearable {\r\n    using SafeMath for uint256;\r\n\r\n    event ClaimedNFT(\r\n        address indexed _caller,\r\n        string _wearable\r\n    );\r\n\r\n     /**\r\n     * @dev Claim an NFTs.\r\n     * @notice Claim a `_wearableId` NFT.\r\n     * @param _erc721Collection - collection address\r\n     * @param _wearableId - wearable id\r\n     */\r\n    function claimNFT(ERC721Collection _erc721Collection, string calldata _wearableId) external payable {\r\n        require(_erc721Collection.balanceOf(msg.sender) == 0, \"The sender has already an NFT\");\r\n        require(\r\n            canMint(_erc721Collection, _wearableId, 1),\r\n            \"The amount of wearables to issue is higher than its available supply\"\r\n        );\r\n\r\n        _erc721Collection.issueToken(msg.sender, _wearableId);\r\n\r\n        emit ClaimedNFT(msg.sender, _wearableId);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the wearable can be minted.\r\n    * @param _erc721Collection - collection address\r\n    * @param _wearableId - wearable id\r\n    * @return whether a wearable can be minted\r\n    */\r\n    function canMint(ERC721Collection _erc721Collection, string memory _wearableId, uint256 _amount) public view returns (bool) {\r\n        uint256 balance = balanceOf(_erc721Collection, _wearableId);\r\n\r\n        return balance >= _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a wearable's available supply .\r\n     * Throws if the option ID does not exist. May return 0.\r\n     * @param _erc721Collection - collection address\r\n     * @param _wearableId - wearable id\r\n     * @return wearable's available supply\r\n     */\r\n    function balanceOf(ERC721Collection _erc721Collection, string memory _wearableId) public view returns (uint256) {\r\n        bytes32 wearableKey = _erc721Collection.getWearableKey(_wearableId);\r\n\r\n        uint256 issued = _erc721Collection.issued(wearableKey);\r\n        uint256 maxIssuance = _erc721Collection.maxIssuance(wearableKey);\r\n\r\n        return maxIssuance.sub(issued);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC721Collection\",\"name\":\"_erc721Collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_wearableId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC721Collection\",\"name\":\"_erc721Collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_wearableId\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC721Collection\",\"name\":\"_erc721Collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_wearableId\",\"type\":\"string\"}],\"name\":\"claimNFT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_wearable\",\"type\":\"string\"}],\"name\":\"ClaimedNFT\",\"type\":\"event\"}]","ContractName":"ClaimWearable","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2b73e9c0a0c3f8d83eb9e173594585b1d5c45256be6def46a1c33cfe202168eb"}]}