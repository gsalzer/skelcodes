{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\EgorasMicrofinanceInterface.sol\r\n\r\npragma solidity >=0.4.0 <0.7.0;\r\n// SPDX-License-Identifier: MIT\r\ninterface EgorasMicrofinanceInterface {\r\n    struct Loan{\r\n        uint amount;\r\n        string title;\r\n        uint length;\r\n        uint min_weekly_returns;\r\n        uint total_returns;\r\n        string image_url;\r\n        string companyName;\r\n        uint totalWeeks;\r\n        uint numWeekspaid;\r\n        uint totalPayment;\r\n        bool isApproved;\r\n        uint loanFee;\r\n        address creator;\r\n    }\r\nevent LoanCreated(uint newLoanID, uint _amount, string _title, uint _length, uint _min_weekly_returns, uint _total_returns,  \r\nstring _image_url, string _companyName, uint getTotalWeeks, uint _loanFee, uint countDown, address _creator);\r\n \r\n    struct Company{\r\n        bool isApproved;\r\n        uint positiveVote;\r\n        uint negativeVote;\r\n        uint votingPeriod;\r\n        bool stale;\r\n        string companyName;\r\n        uint registeredDate;\r\n    }\r\n\r\n    event Rewarded(\r\n        address voter, \r\n        uint share, \r\n        uint currentVotingPeriod, \r\n        uint time\r\n        );\r\n        \r\n      \r\n    event CompanyCreated(\r\n        address owner,\r\n        string companyName,\r\n        uint votingPeriod\r\n    );\r\n    event VotedForRequest(\r\n        address _voter,\r\n        uint _requestID,\r\n        uint _positiveVote,\r\n        uint _negativeVote,\r\n        bool _accept\r\n    );\r\n    event RequestCreated(\r\n      address _creator,\r\n      uint _requestType,\r\n      uint _changeTo,\r\n      string _reason,\r\n      uint _positiveVote,\r\n      uint _negativeVote,\r\n      uint _powerUsed,\r\n      bool _stale,\r\n      uint _votingPeriod,\r\n      uint _requestID\r\n      );\r\n    event CompanyApproved(\r\n    address companyAddress,\r\n    uint now,\r\n    bool state,\r\n    address _initiator\r\n    );\r\n    event VoteInCompany(\r\n    address _company,\r\n    address voter,\r\n    bool _accept,\r\n    uint _negativeVote,\r\n    uint _positiveVote);\r\n  \r\n    event ApproveLoan(uint _loanID, bool state, address initiator, uint time);\r\n    event ApproveRequest(uint _requestID, bool _state, address _initiator);    \r\n    event LoanRepayment(\r\n        uint loanID,\r\n        uint amount,\r\n        address remitter,\r\n        uint time\r\n    );\r\n    \r\n    event Refunded(uint amount, address voterAddress, uint _loanID, uint time);\r\n\r\n    event Voted(address voter,  uint loanID, uint _positiveVote, uint _negativeVote, bool _accept);\r\n    event Repay(uint _amount, uint _time, uint _week, uint _loanID);\r\n\r\n    function applyForLoan(\r\n        uint _amount,\r\n        string calldata _title,\r\n        uint _length,\r\n        string calldata _image_url\r\n        ) external;\r\n\r\n    function approveLoanCompany(address companyAddress) external;\r\n    function registerLoanCompany(string calldata companyName) external;\r\n    function getLoanByID(uint _loanID) external view returns(uint _amount, uint _min_weekly_returns, uint _totalWeeks, \r\n    uint _length, string memory _title, uint _total_returns, string memory _image_url, string memory _companyName,  uint _numWeekspaid, uint _totalPayment, bool _isApproved, address _creator);\r\n    function claimable() external view returns (bool);\r\n    function isDue(uint _loanID) external view returns (bool);\r\n    function getVotesByLoanID(uint _loanID) external view returns(uint _accepted, uint _declined);\r\n    function repayLoan(uint _loanID) external;\r\n    function approveLoan(uint _loanID) external;\r\n    function rewardHoldersByVotePower() external;\r\n    function distributeFee() external;\r\n    function vote(uint _loanID, uint _votePower, bool _accept) external;\r\n    function voteinCompany(address _company, uint _votePower, bool _accept) external;\r\n    function createRequest(uint _requestType, uint _changeTo, string calldata _reason, bool _withdrawEGR) external;\r\n    function governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) external;\r\n    function validateRequest(uint _requestID) external;\r\n    \r\n}\r\n\r\n// File: contracts\\EgorasLending.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0 <0.7.0;\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view  returns (uint256);\r\n    function balanceOf(address account) external view  returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external  returns (bool);\r\n    function allowance(address owner, address spender) external  view returns (uint256);\r\n    function approve(address spender, uint256 amount) external  returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount)  external  returns (bool);\r\n    function mint(address account, uint256 amount) external  returns (bool);\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\ncontract EgorasMicrofinance is EgorasMicrofinanceInterface {\r\n    mapping(uint => bool) activeRequest;\r\n    mapping(uint => mapping(address => uint)) requestPower;\r\n    mapping(address => mapping(address => uint)) VoteInCompanyPower;\r\n    uint private totalLoans;\r\n    uint private loanInterestRate;\r\n    mapping(address => Company) company;\r\n    mapping (address => bool) companyExist;\r\n    struct Votters{\r\n      address payable voter;\r\n    }\r\n    \r\n     struct Requests{\r\n      address creator;\r\n      uint requestType;\r\n      uint changeTo;\r\n      string reason;\r\n      uint positiveVote;\r\n      uint negativeVote;\r\n      uint powerUsed;\r\n      bool  withdrawEGR;\r\n      bool stale;\r\n      uint votingPeriod;\r\n    }\r\n    \r\n    Requests[] requests;\r\n    mapping(uint => Requests[]) listOfrequests;\r\n    mapping(uint => Votters[]) listOfvoters;\r\n    mapping(uint => Votters[]) etherActiveVotters;\r\n    mapping(uint => Votters[]) activeVoters;\r\n    mapping(uint => Votters[]) activeRequestVoters;\r\n    mapping(address => Votters[]) activeLoanCompanyVoters;\r\n    mapping(uint => mapping(address => bool)) hasVoted;\r\n    mapping(uint => mapping(address => bool)) manageRequestVoters;\r\n    mapping(address => mapping(address => bool)) manageLoanCompanyVoters;\r\n    mapping(address => mapping(uint => bool)) isCurrentVotter;\r\n    mapping(address => mapping(uint => bool)) isCurrentEtherVotter;\r\n    mapping(uint => bool) stale;\r\n    mapping(uint => mapping(address => uint)) votePower;\r\n    mapping(address => uint) totalVotePower;\r\n    mapping(uint => uint) positiveVote;\r\n    mapping(uint => uint) voteCountDown;\r\n    mapping(uint => uint) negativeVote;\r\n    mapping (uint => bool) isLoanApproved;\r\n    mapping(uint => uint) currentTotalVotePower;\r\n    mapping(uint => uint) currentTotalVotePower2;\r\n    uint public nextClaimDate;\r\n    mapping(address => mapping(uint => uint)) userCurrentVotePower;\r\n    mapping(address => mapping(uint => uint)) userCurrentVotePower2;\r\n    Loan[] loans;\r\n    Votters[] voters;\r\n    using SafeMath for uint256;\r\n    address private NGNC;\r\n    address private egorasEGR;\r\n    uint private loanFee;\r\n    uint private systemFeeBalance;\r\n     \r\n    uint private currentVotingPeriod;\r\n    uint private requestCreationPower;\r\n    uint private currentEtherVotingPeriod;\r\n    uint public totalIncentive;\r\n    uint public weeklyIncentive;\r\n    uint public treasuryCut;\r\n    constructor(address _NGNC, address _egorasEgr, uint _initialLoanFee, uint _totalIncentive, uint _weeklyIncentive, uint _initialRequestPower\r\n    , uint _treasuryCut)  public {\r\n        egorasEGR = _egorasEgr;\r\n        NGNC = _NGNC;\r\n        loanFee = _initialLoanFee;\r\n        currentVotingPeriod = currentVotingPeriod.add(1);\r\n        currentEtherVotingPeriod = currentEtherVotingPeriod.add(1);\r\n        totalIncentive = _totalIncentive;\r\n        weeklyIncentive = _weeklyIncentive;\r\n        nextClaimDate = block.timestamp.add(8 days);\r\n        requestCreationPower = _initialRequestPower;\r\n        treasuryCut = _treasuryCut;\r\n    }\r\n\r\n/// Request\r\nfunction createRequest(uint _requestType, uint _changeTo, string memory _reason, bool _withdrawEGR) public override{\r\n    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  \"Invalid request type!\");\r\n    require(!activeRequest[_requestType], \"Another request is still active\");\r\n    IERC20 iERC20 = IERC20(egorasEGR);\r\n    require(iERC20.allowance(msg.sender, address(this)) >= requestCreationPower, \"Insufficient EGR allowance for vote!\");\r\n    iERC20.transferFrom(msg.sender, address(this), requestCreationPower);\r\n    Requests memory _request = Requests({\r\n      creator: msg.sender,\r\n      requestType: _requestType,\r\n      changeTo: _changeTo,\r\n      reason: _reason,\r\n      positiveVote: 0,\r\n      negativeVote: 0,\r\n      powerUsed: requestCreationPower,\r\n      withdrawEGR: _withdrawEGR,\r\n      stale: false,\r\n      votingPeriod: block.timestamp.add(3 days)\r\n    });\r\n    \r\n    requests.push(_request);\r\n    uint256 newRequestID = requests.length - 1;\r\n     Requests memory request = requests[newRequestID];\r\n    emit RequestCreated(\r\n      request.creator,\r\n      request.requestType,\r\n      request.changeTo,\r\n      request.reason,\r\n      request.positiveVote,\r\n      request.negativeVote,\r\n      request.powerUsed,\r\n      request.stale,\r\n      request.votingPeriod,\r\n      newRequestID\r\n      );\r\n}\r\n\r\nfunction governanceVote(uint _requestType, uint _requestID, uint _votePower, bool _accept) public override{\r\n    Requests storage request = requests[_requestID];\r\n    require(request.votingPeriod >= block.timestamp, \"Voting period ended\");\r\n    require(_votePower > 0, \"Power must be greater than zero!\");\r\n    require(_requestType == 0 || _requestType == 1 || _requestType == 2,  \"Invalid request type!\");\r\n    IERC20 iERC20 = IERC20(egorasEGR);\r\n    require(iERC20.allowance(msg.sender, address(this)) >= _votePower, \"Insufficient EGR allowance for vote!\");\r\n    iERC20.transferFrom(msg.sender, address(this), _votePower);\r\n    requestPower[_requestType][msg.sender] = requestPower[_requestType][msg.sender].add(_votePower);\r\n     \r\n     \r\n       if(_accept){\r\n            request.positiveVote = request.positiveVote.add(_votePower);\r\n        }else{\r\n            request.negativeVote = request.negativeVote.add(_votePower);  \r\n        }\r\n      \r\n           \r\n            if(manageRequestVoters[_requestID][msg.sender] == false){\r\n                manageRequestVoters[_requestID][msg.sender] = true;\r\n                activeRequestVoters[_requestID].push(Votters(msg.sender));\r\n            }\r\n       \r\n           updateVotingStats(_votePower, msg.sender);\r\n    \r\n    emit VotedForRequest(msg.sender, _requestID, request.positiveVote, request.negativeVote, _accept);\r\n    \r\n}\r\n\r\nfunction validateRequest(uint _requestID) public override{\r\n    Requests storage request = requests[_requestID];\r\n    require(block.timestamp >= request.votingPeriod, \"Voting period still active\");\r\n    require(!request.stale, \"This has already been validated\");\r\n    IERC20 ngnc = IERC20(NGNC);\r\n    IERC20 egr = IERC20(egorasEGR);\r\n    if(request.requestType == 0){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            loanFee = request.changeTo;\r\n            request.stale = true;\r\n            \r\n        }\r\n        \r\n    }else if(request.requestType == 1){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            requestCreationPower = request.changeTo;\r\n            request.stale = true;\r\n            \r\n            \r\n        }\r\n        \r\n    }else if(request.requestType == 2){\r\n        if(request.positiveVote >= request.negativeVote){\r\n            if(request.withdrawEGR){\r\n               require(egr.transfer(request.creator, request.changeTo), \"Fail to transfer fund\");\r\n               }else{\r\n                require(ngnc.transfer(request.creator, request.changeTo), \"Fail to transfer fund\");\r\n               }\r\n            \r\n            request.stale = true;\r\n            \r\n        }\r\n    }\r\n    \r\n   \r\n    \r\n   \r\n    \r\n    for (uint256 i = 0; i < activeRequestVoters[_requestID].length; i++) {\r\n           address voterAddress = activeRequestVoters[_requestID][i].voter;\r\n           uint amount = requestPower[request.requestType][voterAddress];\r\n           require(egr.transfer(voterAddress, amount), \"Fail to refund voter\");\r\n           requestPower[request.requestType][voterAddress] = 0;\r\n           emit Refunded(amount, voterAddress, _requestID, now);\r\n    }\r\n    \r\n     require(egr.transfer(request.creator, request.powerUsed), \"Fail to transfer fund\");\r\n    emit ApproveRequest(_requestID, request.positiveVote >= request.negativeVote, msg.sender);\r\n}\r\n  // Loan\r\n\r\n    function applyForLoan(\r\n        uint _amount,\r\n        string memory _title,\r\n        uint _length,\r\n        string memory _image_url\r\n        ) public override {\r\n            require(_amount > 0, \"Loan amount should be greater than zero\");\r\n            require(_length > 0, \"Loan duration should be greater than zero\");\r\n            require(bytes(_title).length > 3, \"Loan title should more than three characters long\");\r\n            require(companyExist[msg.sender], \"Company does not exist\");\r\n            Company memory comp = company[msg.sender];\r\n            require(comp.isApproved, \"This company is not eligible to create loan!\");\r\n            string memory name_of_loan_company = company[msg.sender].companyName;\r\n            uint getTotalWeeks = _length.div(6);\r\n            uint amount = _amount.div(getTotalWeeks);\r\n            uint fee = uint(int256(amount) / int256(10000) * int256(loanFee));\r\n            uint  weekly_payment = fee.add(amount);\r\n         Loan memory _loan = Loan({\r\n         amount: _amount,\r\n         title: _title,\r\n         length: _length,\r\n         min_weekly_returns: weekly_payment,\r\n         total_returns: weekly_payment.mul(getTotalWeeks),\r\n         image_url: _image_url,\r\n         companyName: name_of_loan_company,\r\n         totalWeeks: getTotalWeeks,\r\n         numWeekspaid: 0,\r\n         totalPayment: 0,\r\n         isApproved: false,\r\n         loanFee: loanFee,\r\n         creator: msg.sender\r\n        });\r\n             loans.push(_loan);\r\n             uint256 newLoanID = loans.length - 1;\r\n             voteCountDown[newLoanID] = block.timestamp.add(3 days);\r\n             emit LoanCreated(newLoanID, _amount, _title, _length, weekly_payment, weekly_payment.mul(getTotalWeeks),_image_url,  name_of_loan_company, getTotalWeeks, loanFee, block.timestamp.add(3 days), msg.sender);\r\n        }\r\n\r\n    function getLoanByID(uint _loanID) external override view returns(uint _amount, uint _min_weekly_returns, uint _totalWeeks, \r\n    uint _length, string memory _title, uint _total_returns, string memory _image_url, string memory _companyName, uint _numWeekspaid, uint _totalPayment, bool _isApproved, address _creator){\r\n         Loan memory loan = loans[_loanID];\r\n         return (loan.amount, loan.min_weekly_returns,loan.totalWeeks, loan.length, \r\n         loan.title, loan.total_returns, loan.image_url, loan.companyName, loan.numWeekspaid, loan.totalPayment, loan.isApproved,\r\n          loan.creator);\r\n     }\r\n     \r\n     function getVotesByLoanID(uint _loanID) external override view returns(uint _accepted, uint _declined){\r\n            return (positiveVote[_loanID], negativeVote[_loanID]);\r\n        }\r\n\r\nfunction vote(uint _loanID, uint _votePower, bool _accept) external override{\r\n            require(_votePower > 0, \"Power must be greater than zero!\");\r\n            IERC20 iERC20 = IERC20(egorasEGR);\r\n            require(iERC20.allowance(msg.sender, address(this)) >= _votePower, \"Insufficient EGR allowance for vote!\");\r\n            iERC20.transferFrom(msg.sender, address(this), _votePower);\r\n            if(_accept){\r\n                positiveVote[_loanID] = positiveVote[_loanID].add(_votePower);\r\n            }else{\r\n              negativeVote[_loanID] = negativeVote[_loanID].add(_votePower);  \r\n            }\r\n            \r\n             \r\n             votePower[_loanID][msg.sender] = votePower[_loanID][msg.sender].add(_votePower);\r\n           \r\n           \r\n            if(hasVoted[_loanID][msg.sender] == false){\r\n                hasVoted[_loanID][msg.sender] = true;\r\n                listOfvoters[_loanID].push(Votters(msg.sender));\r\n            }\r\n          updateVotingStats(_votePower, msg.sender);\r\n     \r\n            \r\n            emit Voted(msg.sender, _loanID,  positiveVote[_loanID],negativeVote[_loanID], _accept);\r\n    } \r\n       \r\nfunction repayLoan(uint _loanID) external override{\r\n   Loan storage loan = loans[_loanID];\r\n   require(loan.isApproved, \"This loan is not approved yet.\");\r\n   require(loan.creator == msg.sender, \"Unauthorized.\");\r\n   IERC20 iERC20 = IERC20(NGNC);\r\n   require(loan.totalWeeks > loan.numWeekspaid, \"The loan fully paid!\");\r\n   uint fee = uint(int256(loan.min_weekly_returns) / int256(10000) * int256(loan.loanFee));\r\n   require(iERC20.allowance(msg.sender, address(this)) >= loan.min_weekly_returns, \"Insufficient EUSD allowance for repayment!\");\r\n   require(iERC20.transferFrom(msg.sender, address(this), fee), \"Fail to transfer\");\r\n   iERC20.burnFrom(msg.sender, loan.min_weekly_returns.sub(fee));\r\n   loan.totalPayment = loan.totalPayment.add(loan.min_weekly_returns);\r\n  \r\n   systemFeeBalance = systemFeeBalance.add(fee);\r\n   loan.numWeekspaid = loan.numWeekspaid.add(1);\r\n   emit Repay(loan.min_weekly_returns, now, loan.numWeekspaid, _loanID);\r\n}\r\n\r\nfunction approveLoan(uint _loanID) external override{\r\n     require(isDue(_loanID), \"Voting is not over yet!\");\r\n     require(!stale[_loanID], \"The loan is either approve/declined\");\r\n     bool state = false;\r\n     Loan storage loan = loans[_loanID];\r\n     IERC20 ngnc = IERC20(NGNC);\r\n     IERC20 egr = IERC20(egorasEGR);\r\n     if(positiveVote[_loanID] > negativeVote[_loanID]){\r\n     require(ngnc.mint(loan.creator, loan.amount), \"Fail to transfer fund\");\r\n     loan.isApproved = true;\r\n     state = true;\r\n     }\r\n    \r\n    for (uint256 i = 0; i < listOfvoters[_loanID].length; i++) {\r\n           address voterAddress = listOfvoters[_loanID][i].voter;\r\n           uint amount = votePower[_loanID][voterAddress];\r\n           require(egr.transfer(voterAddress, amount), \"Fail to refund voter\");\r\n           emit Refunded(amount, voterAddress, _loanID, now);\r\n    }\r\n    \r\n    stale[_loanID] = true;\r\n    ApproveLoan(_loanID, state, msg.sender, now);\r\n}\r\n\r\n\r\n// Company\r\n\r\n        function registerLoanCompany(string calldata _companyName) external override{\r\n            require(!companyExist[msg.sender], \"Company already exist!\");\r\n            Company storage comp = company[msg.sender];\r\n            uint countDown = block.timestamp.add(3 days);\r\n            comp.isApproved = false;\r\n            comp.companyName = _companyName;\r\n            comp.registeredDate = now;\r\n            comp.votingPeriod = countDown;\r\n            companyExist[msg.sender] = true;\r\n            emit CompanyCreated(msg.sender, _companyName, countDown);\r\n        }\r\n\r\n        function approveLoanCompany(address companyAddress) external override{\r\n            require(companyExist[companyAddress], \"Company does not exist!\");\r\n            bool state = false;\r\n            Company storage comp = company[companyAddress];\r\n            IERC20 egr = IERC20(egorasEGR);\r\n           require( block.timestamp >= comp.votingPeriod, \"Voting period still active\");\r\n            require(!comp.stale, \"This has already been validated\");\r\n            if(comp.positiveVote >= comp.negativeVote){\r\n                comp.isApproved = true;\r\n                state = true;\r\n            }\r\n            \r\n            for (uint256 i = 0; i < activeLoanCompanyVoters[companyAddress].length; i++) {\r\n                address voterAddress = activeLoanCompanyVoters[companyAddress][i].voter;\r\n                uint amount = VoteInCompanyPower[companyAddress][voterAddress];\r\n                require(egr.transfer(voterAddress, amount), \"Fail to refund voter\");\r\n            }\r\n            comp.stale = true;\r\n            emit CompanyApproved(companyAddress, now, state, msg.sender);\r\n              \r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        \r\n   \r\n        \r\n        \r\n    function voteinCompany(address _company, uint _votePower, bool _accept) external override{\r\n           require(_votePower > 0, \"Power must be greater than zero!\");   \r\n            IERC20 iERC20 = IERC20(egorasEGR);\r\n            require(iERC20.allowance(msg.sender, address(this)) >= _votePower, \"Insufficient EGR allowance for vote!\");\r\n             iERC20.transferFrom(msg.sender, address(this), _votePower);\r\n             Company storage comp = company[_company];\r\n              if(_accept){\r\n                comp.positiveVote = comp.positiveVote.add(_votePower);\r\n            }else{\r\n              comp.negativeVote = comp.negativeVote.add(_votePower);  \r\n            }\r\n            \r\n               VoteInCompanyPower[_company][msg.sender] = VoteInCompanyPower[_company][msg.sender].add(_votePower);\r\n               if(manageLoanCompanyVoters[_company][msg.sender] == false){\r\n                manageLoanCompanyVoters[_company][msg.sender] = true;\r\n                activeLoanCompanyVoters[_company].push(Votters(msg.sender));\r\n            }\r\n            \r\n           updateVotingStats(_votePower, msg.sender);\r\n           \r\n           emit VoteInCompany(_company,msg.sender, _accept, comp.negativeVote, comp.positiveVote);\r\n            \r\n    }\r\n    \r\n     \r\n\r\n\r\n\r\n function updateVotingStats(uint _power, address payable _voter) private {\r\n      currentTotalVotePower[currentVotingPeriod] = currentTotalVotePower[currentVotingPeriod].add(_power);\r\n      userCurrentVotePower[_voter][currentVotingPeriod] = userCurrentVotePower[_voter][currentVotingPeriod].add(_power);\r\n      currentTotalVotePower2[currentEtherVotingPeriod] = currentTotalVotePower2[currentEtherVotingPeriod].add(_power);\r\n      userCurrentVotePower2[_voter][currentEtherVotingPeriod] = userCurrentVotePower2[_voter][currentEtherVotingPeriod].add(_power);\r\n             if(isCurrentEtherVotter[_voter][currentEtherVotingPeriod] == false){\r\n                etherActiveVotters[currentEtherVotingPeriod].push(Votters(_voter));\r\n            }\r\n       \r\n        if(isCurrentVotter[_voter][currentVotingPeriod] == false){\r\n                activeVoters[currentVotingPeriod].push(Votters(_voter));\r\n            }\r\n            \r\n         totalVotePower[_voter] = totalVotePower[_voter].add(_power);\r\n          \r\n }     \r\n\r\n\r\nfunction claimable() public override view returns (bool) {\r\n        if (block.timestamp >= nextClaimDate)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\nfunction isDue(uint _loanID) public override view returns (bool) {\r\n        if (block.timestamp >= voteCountDown[_loanID])\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\nfunction rewardHoldersByVotePower() external override{\r\n      IERC20 iERC20 = IERC20(egorasEGR);\r\n       require(claimable(), \"Not yet time for reward\");\r\n       uint treasuryShare = uint(int256(weeklyIncentive) / int256(10000) * int256(treasuryCut));\r\n       uint votersShare = weeklyIncentive.sub(treasuryShare);\r\n       require(totalIncentive >= treasuryShare, \"No incentive left for distribution\");\r\n       \r\n      for (uint256 i = 0; i < activeVoters[currentVotingPeriod].length; i++) {\r\n            address _voter = activeVoters[currentVotingPeriod][i].voter;\r\n            uint totalUserVotePower = userCurrentVotePower[_voter][currentVotingPeriod].mul(1000);\r\n            uint currentTotalPower = currentTotalVotePower[currentVotingPeriod];\r\n            uint percentage = totalUserVotePower.div(currentTotalPower);\r\n            uint share = percentage.mul(votersShare).div(1000);\r\n            require(totalIncentive >= share, \"No incentive left for distribution\");\r\n            require(iERC20.mint(_voter, share), \"Unable to mint token\");\r\n            totalIncentive = totalIncentive.sub(share);\r\n            emit Rewarded(_voter, share, currentVotingPeriod, now);\r\n            \r\n        }\r\n        require(iERC20.mint(address(this), treasuryShare), \"Unable to mint token\");\r\n        \r\n         currentVotingPeriod = currentVotingPeriod.add(1);\r\n         nextClaimDate = block.timestamp.add(8 days);\r\n}\r\n\r\nfunction distributeFee() external override{ \r\n    uint minEther =  1 ether;\r\n    uint balance = address(this).balance;\r\n    require(balance >= minEther, \"Not enough balance\");\r\n\r\n        for (uint256 i = 0; i < etherActiveVotters[currentEtherVotingPeriod].length; i++) {\r\n            address payable _voter = etherActiveVotters[currentVotingPeriod][i].voter;\r\n            uint totalUserVotePower = userCurrentVotePower2[_voter][currentEtherVotingPeriod].mul(1000);\r\n            uint currentTotalPower = currentTotalVotePower[currentEtherVotingPeriod];\r\n            uint percentage = totalUserVotePower.div(currentTotalPower);\r\n            uint share = percentage.mul(balance).div(1000);\r\n            require(balance >= share, \"Non-sufficient funds\");\r\n           _voter.transfer(share);\r\n            \r\n            emit Rewarded(_voter, share, currentVotingPeriod, now);\r\n            \r\n        }\r\n        \r\n         currentEtherVotingPeriod = currentEtherVotingPeriod.add(1);\r\n         \r\n}\r\nfunction depositEther() public payable {\r\n}\r\n\r\nfunction systemInfo() public view  returns(uint _requestpower, uint _loanFee, uint _totalIncentive, uint _weeklyIncentive ,  uint _treasuryCut, uint _nextClaimDate){\r\n    return(requestCreationPower, loanFee, totalIncentive, weeklyIncentive, treasuryCut, nextClaimDate);\r\n}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NGNC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_egorasEgr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialLoanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialRequestPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryCut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ApproveLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"ApproveRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"CompanyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"CompanyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_min_weekly_returns\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_returns\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_image_url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_companyName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getTotalWeeks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loanFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LoanRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_changeTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_powerUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_stale\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"}],\"name\":\"VoteInCompany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positiveVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_negativeVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"VotedForRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image_url\",\"type\":\"string\"}],\"name\":\"applyForLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"approveLoanCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changeTo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_withdrawEGR\",\"type\":\"bool\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"getLoanByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_weekly_returns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_total_returns\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_numWeekspaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"getVotesByLoanID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accepted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_declined\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"governanceVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"isDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_companyName\",\"type\":\"string\"}],\"name\":\"registerLoanCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHoldersByVotePower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestpower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryCut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextClaimDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"voteinCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EgorasMicrofinance","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009534a50af8569a4411bbbb551bdb9561cbb5595600000000000000000000000073cee8348b9bdd48c64e13452b8a6fbc8163057300000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000fe84613902712ca2400000000000000000000000000000000000000000000204fce5e3e250261100000000000000000000000000000000000000000000000000000000000000000001f40","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d36ebee566ab6ec126ef28c261d283704a283f7753ce37f66ae6bca429b60ab0"}]}