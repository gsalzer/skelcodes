{"status":"1","message":"OK","result":[{"SourceCode":"// File: UniswapV2Router.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n// File: OpenZepplinReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n// File: Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n// File: Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: OpenZepplinOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: OpenZepplinSafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: browser/UniswapV2_ETH_ERC_Zap_In_V2.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n}\r\n\r\n// import \"@uniswap/lib/contracts/libraries/Babylonian.sol\";\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the number of decimals.\r\n     */\r\n    function decimals() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IUniswapV1Factory {\r\n    function getExchange(address token)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IUniswapExchange {\r\n    // converting ERC20 to ERC20 and transfer\r\n    function tokenToTokenTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function getEthToTokenInputPrice(uint256 eth_sold)\r\n        external\r\n        view\r\n        returns (uint256 tokens_bought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokens_sold)\r\n        external\r\n        view\r\n        returns (uint256 eth_bought);\r\n\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokens_bought);\r\n\r\n    function ethToTokenTransferInput(\r\n        uint256 min_tokens,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external payable returns (uint256 tokens_bought);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) external returns (bool success);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\ncontract UniswapV2_ZapIn_General_V2 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    bool private stopped = false;\r\n    uint16 public goodwill;\r\n    address public dzgoodwillAddress;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    IUniswapV1Factory public UniSwapV1FactoryAddress = IUniswapV1Factory(\r\n        0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\r\n    );\r\n\r\n    IUniswapV2Factory public UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n    address wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    constructor(\r\n        uint16 _goodwill,\r\n        address _dzgoodwillAddress\r\n    ) public {\r\n        goodwill = _goodwill;\r\n        dzgoodwillAddress = _dzgoodwillAddress;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens\r\n    @param _FromTokenContractAddress The ERC20 token used for investment (address(0x00) if ether)\r\n    @param _ToUnipoolToken0 The Uniswap V2 pair token0 address\r\n    @param _ToUnipoolToken1 The Uniswap V2 pair token1 address\r\n    @param _amount The amount of fromToken to invest\r\n    @param _minPoolTokens Reverts if less tokens received than this\r\n    @return Amount of LP bought\r\n     */\r\n    function ZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount,\r\n        uint _minPoolTokens\r\n    ) public payable nonReentrant stopInEmergency returns (uint256) {\r\n        uint256 toInvest;\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            require(msg.value > 0, \"Error: ETH not sent\");\r\n            toInvest = msg.value;\r\n        } else {\r\n            require(msg.value == 0, \"Error: ETH sent\");\r\n            require(_amount > 0, \"Error: Invalid ERC amount\");\r\n            TransferHelper.safeTransferFrom(\r\n                _FromTokenContractAddress,\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n            toInvest = _amount;\r\n        }\r\n\r\n        uint256 LPBought = _performZapIn(\r\n            _FromTokenContractAddress,\r\n            _ToUnipoolToken0,\r\n            _ToUnipoolToken1,\r\n            toInvest\r\n        );\r\n        \r\n        require(LPBought >= _minPoolTokens, \"ERR: High Slippage\");\r\n\r\n        //get pair address\r\n        address _ToUniPoolAddress = UniSwapV2FactoryAddress.getPair(\r\n            _ToUnipoolToken0,\r\n            _ToUnipoolToken1\r\n        );\r\n\r\n        //transfer goodwill\r\n        uint256 goodwillPortion = _transferGoodwill(\r\n            _ToUniPoolAddress,\r\n            LPBought\r\n        );\r\n\r\n        TransferHelper.safeTransfer(\r\n            _ToUniPoolAddress,\r\n            msg.sender,\r\n            SafeMath.sub(LPBought, goodwillPortion)\r\n        );\r\n        return SafeMath.sub(LPBought, goodwillPortion);\r\n    }\r\n\r\n    function _performZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 token0Bought;\r\n        uint256 token1Bought;\r\n\r\n        if (canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)) {\r\n            (token0Bought, token1Bought) = exchangeTokensV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                _amount\r\n            );\r\n        } else if (\r\n            canSwapFromV1(_ToUnipoolToken0, _ToUnipoolToken1, _amount, _amount)\r\n        ) {\r\n            (token0Bought, token1Bought) = exchangeTokensV1(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                _amount\r\n            );\r\n        }\r\n\r\n        require(token0Bought > 0 && token1Bought > 0, \"Could not exchange\");\r\n\r\n        TransferHelper.safeApprove(\r\n            _ToUnipoolToken0,\r\n            address(uniswapV2Router),\r\n            token0Bought\r\n        );\r\n\r\n        TransferHelper.safeApprove(\r\n            _ToUnipoolToken1,\r\n            address(uniswapV2Router),\r\n            token1Bought\r\n        );\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 LP) = uniswapV2Router\r\n            .addLiquidity(\r\n            _ToUnipoolToken0,\r\n            _ToUnipoolToken1,\r\n            token0Bought,\r\n            token1Bought,\r\n            1,\r\n            1,\r\n            address(this),\r\n            now + 60\r\n        );\r\n\r\n        uint256 residue;\r\n        if (SafeMath.sub(token0Bought, amountA) > 0) {\r\n            if (canSwapFromV2(_ToUnipoolToken0, _FromTokenContractAddress)) {\r\n                residue = swapFromV2(\r\n                    _ToUnipoolToken0,\r\n                    _FromTokenContractAddress,\r\n                    SafeMath.sub(token0Bought, amountA)\r\n                );\r\n            } else {\r\n                TransferHelper.safeTransfer(\r\n                    _ToUnipoolToken0,\r\n                    msg.sender,\r\n                    SafeMath.sub(token0Bought, amountA)\r\n                );\r\n            }\r\n        }\r\n\r\n        if (SafeMath.sub(token1Bought, amountB) > 0) {\r\n            if (canSwapFromV2(_ToUnipoolToken1, _FromTokenContractAddress)) {\r\n                residue += swapFromV2(\r\n                    _ToUnipoolToken1,\r\n                    _FromTokenContractAddress,\r\n                    SafeMath.sub(token1Bought, amountB)\r\n                );\r\n            } else {\r\n                TransferHelper.safeTransfer(\r\n                    _ToUnipoolToken1,\r\n                    msg.sender,\r\n                    SafeMath.sub(token1Bought, amountB)\r\n                );\r\n            }\r\n        }\r\n\r\n        if (residue > 0) {\r\n            TransferHelper.safeTransfer(\r\n                _FromTokenContractAddress,\r\n                msg.sender,\r\n                residue\r\n            );\r\n        }\r\n        \r\n        return LP;\r\n    }\r\n\r\n    function exchangeTokensV1(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount\r\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        );\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            token0Bought = _eth2Token(_ToUnipoolToken0, _amount);\r\n            uint256 amountToSwap = calculateSwapInAmount(res0, token0Bought);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token0Bought, 2);\r\n            token1Bought = _eth2Token(_ToUnipoolToken1, amountToSwap);\r\n            token0Bought = SafeMath.sub(token0Bought, amountToSwap);\r\n        } else {\r\n            if (_ToUnipoolToken0 == _FromTokenContractAddress) {\r\n                uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\r\n                //if no reserve or a new pair is created\r\n                if (amountToSwap <= 0) amountToSwap = SafeMath.div(_amount, 2);\r\n                token1Bought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    address(this),\r\n                    _ToUnipoolToken1,\r\n                    amountToSwap\r\n                );\r\n\r\n                token0Bought = SafeMath.sub(_amount, amountToSwap);\r\n            } else if (_ToUnipoolToken1 == _FromTokenContractAddress) {\r\n                uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\r\n                //if no reserve or a new pair is created\r\n                if (amountToSwap <= 0) amountToSwap = SafeMath.div(_amount, 2);\r\n                token0Bought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    address(this),\r\n                    _ToUnipoolToken0,\r\n                    amountToSwap\r\n                );\r\n\r\n                token1Bought = SafeMath.sub(_amount, amountToSwap);\r\n            } else {\r\n                token0Bought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    address(this),\r\n                    _ToUnipoolToken0,\r\n                    _amount\r\n                );\r\n                uint256 amountToSwap = calculateSwapInAmount(\r\n                    res0,\r\n                    token0Bought\r\n                );\r\n                //if no reserve or a new pair is created\r\n                if (amountToSwap <= 0) amountToSwap = SafeMath.div(_amount, 2);\r\n\r\n                token1Bought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    address(this),\r\n                    _ToUnipoolToken1,\r\n                    amountToSwap\r\n                );\r\n                token0Bought = SafeMath.sub(token0Bought, amountToSwap);\r\n            }\r\n        }\r\n    }\r\n\r\n    function exchangeTokensV2(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount\r\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        );\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (\r\n            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken0) &&\r\n            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        ) {\r\n            token0Bought = swapFromV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken0,\r\n                _amount\r\n            );\r\n            uint256 amountToSwap = calculateSwapInAmount(res0, token0Bought);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token0Bought, 2);\r\n            token1Bought = swapFromV2(\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                amountToSwap\r\n            );\r\n            token0Bought = SafeMath.sub(token0Bought, amountToSwap);\r\n        } else if (\r\n            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken1) &&\r\n            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        ) {\r\n            token1Bought = swapFromV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken1,\r\n                _amount\r\n            );\r\n            uint256 amountToSwap = calculateSwapInAmount(res1, token1Bought);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token1Bought, 2);\r\n            token0Bought = swapFromV2(\r\n                _ToUnipoolToken1,\r\n                _ToUnipoolToken0,\r\n                amountToSwap\r\n            );\r\n            token1Bought = SafeMath.sub(token1Bought, amountToSwap);\r\n        }\r\n    }\r\n\r\n    //checks if tokens can be exchanged with UniV1\r\n    function canSwapFromV1(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    ) public view returns (bool) {\r\n        require(\r\n            _fromToken != address(0) || _toToken != address(0),\r\n            \"Invalid Exchange values\"\r\n        );\r\n\r\n        if (_fromToken == address(0)) {\r\n            IUniswapExchange toExchange = IUniswapExchange(\r\n                UniSwapV1FactoryAddress.getExchange(_toToken)\r\n            );\r\n            uint256 tokenBalance = IERC20(_toToken).balanceOf(\r\n                address(toExchange)\r\n            );\r\n            uint256 ethBalance = address(toExchange).balance;\r\n            if (tokenBalance > toAmount && ethBalance > fromAmount) return true;\r\n        } else if (_toToken == address(0)) {\r\n            IUniswapExchange fromExchange = IUniswapExchange(\r\n                UniSwapV1FactoryAddress.getExchange(_fromToken)\r\n            );\r\n            uint256 tokenBalance = IERC20(_fromToken).balanceOf(\r\n                address(fromExchange)\r\n            );\r\n            uint256 ethBalance = address(fromExchange).balance;\r\n            if (tokenBalance > fromAmount && ethBalance > toAmount) return true;\r\n        } else {\r\n            IUniswapExchange toExchange = IUniswapExchange(\r\n                UniSwapV1FactoryAddress.getExchange(_toToken)\r\n            );\r\n            IUniswapExchange fromExchange = IUniswapExchange(\r\n                UniSwapV1FactoryAddress.getExchange(_fromToken)\r\n            );\r\n            uint256 balance1 = IERC20(_fromToken).balanceOf(\r\n                address(fromExchange)\r\n            );\r\n            uint256 balance2 = IERC20(_toToken).balanceOf(address(toExchange));\r\n            if (balance1 > fromAmount && balance2 > toAmount) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //checks if tokens can be exchanged with UniV2\r\n    function canSwapFromV2(address _fromToken, address _toToken)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _fromToken != address(0) || _toToken != address(0),\r\n            \"Invalid Exchange values\"\r\n        );\r\n\r\n        if (_fromToken == _toToken) return true;\r\n\r\n        if (_fromToken == address(0) || _fromToken == wethTokenAddress) {\r\n            if (_toToken == wethTokenAddress || _toToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n            );\r\n            if (_haveReserve(pair)) return true;\r\n        } else if (_toToken == address(0) || _toToken == wethTokenAddress) {\r\n            if (_fromToken == wethTokenAddress || _fromToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n            );\r\n            if (_haveReserve(pair)) return true;\r\n        } else {\r\n            IUniswapV2Pair pair1 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n            );\r\n            IUniswapV2Pair pair2 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n            );\r\n            IUniswapV2Pair pair3 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\r\n            );\r\n            if (_haveReserve(pair1) && _haveReserve(pair2)) return true;\r\n            if (_haveReserve(pair3)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //checks if the UNI v2 contract have reserves to swap tokens\r\n    function _haveReserve(IUniswapV2Pair pair) internal view returns (bool) {\r\n        if (address(pair) != address(0)) {\r\n            (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n            if (res0 > 0 && res1 > 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            Babylonian\r\n                .sqrt(\r\n                reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))\r\n            )\r\n                .sub(reserveIn.mul(1997)) / 1994;\r\n    }\r\n\r\n    //swaps _fromToken for _toToken\r\n    //for eth, address(0) otherwise ERC token address\r\n    function swapFromV2(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        require(\r\n            _fromToken != address(0) || _toToken != address(0),\r\n            \"Invalid Exchange values\"\r\n        );\r\n        if (_fromToken == _toToken) return amount;\r\n\r\n        require(canSwapFromV2(_fromToken, _toToken), \"Cannot be exchanged\");\r\n        require(amount > 0, \"Invalid amount\");\r\n\r\n        if (_fromToken == address(0)) {\r\n            if (_toToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).deposit.value(amount)();\r\n                return amount;\r\n            }\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _toToken;\r\n\r\n            uint256[] memory amounts = uniswapV2Router\r\n                .swapExactETHForTokens\r\n                .value(amount)(0, path, address(this), now + 180);\r\n            return amounts[1];\r\n        } else if (_toToken == address(0)) {\r\n            if (_fromToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).withdraw(amount);\r\n                return amount;\r\n            }\r\n            address[] memory path = new address[](2);\r\n            TransferHelper.safeApprove(\r\n                _fromToken,\r\n                address(uniswapV2Router),\r\n                amount\r\n            );\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n\r\n            uint256[] memory amounts = uniswapV2Router.swapExactTokensForETH(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[1];\r\n        } else {\r\n            TransferHelper.safeApprove(\r\n                _fromToken,\r\n                address(uniswapV2Router),\r\n                amount\r\n            );\r\n            uint256 returnedAmount = _swapTokenToTokenV2(\r\n                _fromToken,\r\n                _toToken,\r\n                amount\r\n            );\r\n            require(returnedAmount > 0, \"Error in swap\");\r\n            return returnedAmount;\r\n        }\r\n    }\r\n\r\n    //swaps 2 ERC tokens (UniV2)\r\n    function _swapTokenToTokenV2(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        IUniswapV2Pair pair1 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n        );\r\n        IUniswapV2Pair pair2 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n        );\r\n        IUniswapV2Pair pair3 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\r\n        );\r\n\r\n        uint256[] memory amounts;\r\n\r\n        if (_haveReserve(pair3)) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = _fromToken;\r\n            path[1] = _toToken;\r\n\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[1];\r\n        } else if (_haveReserve(pair1) && _haveReserve(pair2)) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n            path[2] = _toToken;\r\n\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[2];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to buy tokens from eth\r\n    @param _tokenContractAddress Token address which we want to buy\r\n    @param _amount The amount of eth we want to exchange\r\n    @return The quantity of token bought\r\n     */\r\n    function _eth2Token(\r\n        address _tokenContractAddress,\r\n        uint256 _amount\r\n    ) internal returns (uint256 tokenBought) {\r\n        IUniswapExchange FromUniSwapExchangeContractAddress = IUniswapExchange(\r\n            UniSwapV1FactoryAddress.getExchange(_tokenContractAddress)\r\n        );\r\n\r\n        tokenBought = FromUniSwapExchangeContractAddress\r\n            .ethToTokenSwapInput\r\n            .value(_amount)(0, SafeMath.add(now, 300));\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap token with ETH\r\n    @param _FromTokenContractAddress The token address to swap from\r\n    @param tokens2Trade The quantity of tokens to swap\r\n    @return The amount of eth bought\r\n     */\r\n    function _token2Eth(\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        address _toWhomToIssue\r\n    ) internal returns (uint256 ethBought) {\r\n        IUniswapExchange FromUniSwapExchangeContractAddress = IUniswapExchange(\r\n            UniSwapV1FactoryAddress.getExchange(_FromTokenContractAddress)\r\n        );\r\n\r\n        TransferHelper.safeApprove(\r\n            _FromTokenContractAddress,\r\n            address(FromUniSwapExchangeContractAddress),\r\n            tokens2Trade\r\n        );\r\n\r\n        ethBought = FromUniSwapExchangeContractAddress.tokenToEthTransferInput(\r\n            tokens2Trade,\r\n            0,\r\n            SafeMath.add(now, 300),\r\n            _toWhomToIssue\r\n        );\r\n        require(ethBought > 0, \"Error in swapping Eth: 1\");\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap tokens\r\n    @param _FromTokenContractAddress The token address to swap from\r\n    @param _ToWhomToIssue The address to transfer after swap\r\n    @param _ToTokenContractAddress The token address to swap to\r\n    @param tokens2Trade The quantity of tokens to swap\r\n    @return The amount of tokens returned after swap\r\n     */\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToWhomToIssue,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 tokenBought) {\r\n        IUniswapExchange FromUniSwapExchangeContractAddress = IUniswapExchange(\r\n            UniSwapV1FactoryAddress.getExchange(_FromTokenContractAddress)\r\n        );\r\n\r\n        TransferHelper.safeApprove(\r\n            _FromTokenContractAddress,\r\n            address(FromUniSwapExchangeContractAddress),\r\n            tokens2Trade\r\n        );\r\n\r\n        tokenBought = FromUniSwapExchangeContractAddress\r\n            .tokenToTokenTransferInput(\r\n            tokens2Trade,\r\n            0,\r\n            0,\r\n            SafeMath.add(now, 300),\r\n            _ToWhomToIssue,\r\n            _ToTokenContractAddress\r\n        );\r\n        require(tokenBought > 0, \"Error in swapping ERC: 1\");\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to calculate and transfer goodwill\r\n    @param _tokenContractAddress Token in which goodwill is deducted\r\n    @param tokens2Trade The total amount of tokens to be zapped in\r\n    @return The quantity of goodwill deducted\r\n     */\r\n    function _transferGoodwill(\r\n        address _tokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 goodwillPortion) {\r\n        goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(tokens2Trade, goodwill),\r\n            10000\r\n        );\r\n\r\n        if (goodwillPortion == 0) {\r\n            return 0;\r\n        }\r\n\r\n        TransferHelper.safeTransfer(\r\n            _tokenContractAddress,\r\n            dzgoodwillAddress,\r\n            goodwillPortion\r\n        );\r\n    }\r\n\r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_new_dzgoodwillAddress(address _new_dzgoodwillAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dzgoodwillAddress = _new_dzgoodwillAddress;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        TransferHelper.safeTransfer(address(_TokenAddress), owner(), qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dzgoodwillAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniSwapV1FactoryAddress\",\"outputs\":[{\"internalType\":\"contract IUniswapV1Factory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniSwapV2FactoryAddress\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToUnipoolToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToUnipoolToken1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIn\",\"type\":\"uint256\"}],\"name\":\"calculateSwapInAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"canSwapFromV1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"canSwapFromV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dzgoodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_dzgoodwillAddress\",\"type\":\"address\"}],\"name\":\"set_new_dzgoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV2_ZapIn_General_V2","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e737b6afec2320f616297e59445b60a11e3ef75f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0566c1ace9e63322cffb7acfdd1b5c5e14d1e8cc28b312231e5c69e4250bb796"}]}