{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\n//ERC20 Interface\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    }\r\n// Uniswap Factory Interface\r\ninterface UniswapFactory {\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function tokenToExchange(address token) external view returns (address exchange);\r\n    }\r\n// Uniswap Exchange Interface\r\ninterface UniswapExchange {\r\n    function tokenToEthTransferInput(uint tokens_sold,uint min_eth,uint deadline, address recipient) external returns (uint  eth_bought);\r\n    }\r\n    //======================================VETHER=========================================//\r\ncontract Vether is ERC20 {\r\n    // ERC-20 Parameters\r\n    string public name; string public symbol;\r\n    uint public decimals; uint public override totalSupply;\r\n    // ERC-20 Mappings\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n    // Public Parameters\r\n    uint public emission;\r\n    uint public currentEra; uint public currentDay;\r\n    uint public daysPerEra; uint public secondsPerDay;\r\n    uint public genesis; uint public nextEraTime; uint public nextDayTime;\r\n    address payable public burnAddress;\r\n    address[2] public registryAddrArray;\r\n    uint public totalFees; uint public totalBurnt;\r\n    // Public Mappings\r\n    mapping(uint=>uint) public mapEra_Emission;                                           // Era->Emission\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_Units;                         // Era,Days->Units\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_UnitsRemaining;                // Era,Days->TotalUnits\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_Emission;                      // Era,Days->Emission\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_EmissionRemaining;             // Era,Days->Emission\r\n    mapping(uint=>mapping(uint=>mapping(address=>uint))) public mapEraDay_MemberUnits; // Era,Days,Member->Units\r\n    mapping(address=>mapping(uint=>uint[])) public mapMemberEra_Days;                        // Member,Era->Days[]\r\n    mapping(address=>bool) public mapAddress_Excluded;                                          // Address->Excluded\r\n    // Events\r\n    event NewEra(uint era, uint emission, uint time);\r\n    event NewDay(uint era, uint day, uint time);\r\n    event Burn(address indexed payer, address indexed member, uint era, uint day, uint units);\r\n    event Withdrawal(address indexed caller, address indexed member, uint era, uint day, uint value);\r\n\r\n    //=====================================CREATION=========================================//\r\n    // Constructor\r\n    constructor() public {\r\n        // mainnet\r\n        name = \"valuetest\"; symbol = \"valt\"; decimals = 18; totalSupply = 1000000*10**decimals;\r\n        emission = 2048*10**decimals; currentEra = 1; currentDay = 1;               // Set emission, Era and Day\r\n        genesis = now; daysPerEra = 3; secondsPerDay = 60;                          // Set genesis time\r\n        burnAddress = 0x000000000000000000000000000000000000dEaD;                                                        // Set Burn Address\r\n        registryAddrArray[0] = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;               // Set UniSwap V1 Mainnet\r\n        registryAddrArray[1] = 0xfB02641a0752B4d53DAbB8B2d75C92C1858a7a4E;               // Set DefSwap Mainnet\r\n        \r\n        balanceOf[address(this)] = totalSupply; \r\n        emit Transfer(address(0), address(this), totalSupply);                              // Mint the total supply to this address\r\n        nextEraTime = genesis + (secondsPerDay * daysPerEra);                               // Set next time for coin era\r\n        nextDayTime = genesis + secondsPerDay;                                              // Set next time for coin day\r\n        mapAddress_Excluded[address(this)] = true;                                          // Add this address to be excluded from fees\r\n        mapEra_Emission[currentEra] = emission;                                             // Map Starting emission\r\n        mapEraDay_EmissionRemaining[currentEra][currentDay] = emission; \r\n        mapEraDay_Emission[currentEra][currentDay] = emission;\r\n    }\r\n    //========================================ERC20=========================================//\r\n    // ERC20 Transfer function\r\n    function transfer(address to, uint value) public override returns (bool success) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    // ERC20 Approve function\r\n    function approve(address spender, uint value) public override returns (bool success) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    // ERC20 TransferFrom function\r\n    function transferFrom(address from, address to, uint value) public override returns (bool success) {\r\n        require(value <= allowance[from][msg.sender], 'Must not send more than allowance');\r\n        allowance[from][msg.sender] -= value;\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    // Internal transfer function which includes the Fee\r\n    function _transfer(address _from, address _to, uint _value) private {\r\n        require(balanceOf[_from] >= _value, 'Must not send more than balance');\r\n        require(balanceOf[_to] + _value >= balanceOf[_to], 'Balance overflow');\r\n        balanceOf[_from] -= _value;\r\n        uint _fee = _getFee(_from, _to, _value);                                              // Get fee amount                                      // Subtract from sender\r\n        balanceOf[_to] += (_value - _fee);                                                  // Add to receiver\r\n        balanceOf[address(this)] += _fee;                                                   // Add fee to self\r\n        totalFees += _fee;                                                                  // Track fees collected\r\n        emit Transfer(_from, _to, (_value - _fee));                                         // Transfer event\r\n        if (!mapAddress_Excluded[_from] || !mapAddress_Excluded[_to]) {\r\n            emit Transfer(_from, address(this), _fee);                                      // Fee Transfer event\r\n        }\r\n    }\r\n    // Calculate Fee amount\r\n    function _getFee(address _from, address _to, uint _value) private view returns (uint) {\r\n        if (mapAddress_Excluded[_from] || mapAddress_Excluded[_to]) {\r\n           return 0;                                                                        // No fee if excluded\r\n        } else {\r\n            return (_value / 1000);                                                         // Fee amount = 0.1%\r\n        }\r\n    }\r\n    //==================================PROOF-OF-VALUE======================================//\r\n    // Calls when sending Ether\r\n    receive() external payable {\r\n        burnAddress.call.value(msg.value)(\"\");                                              // Burn ether\r\n        _recordBurn(msg.sender, msg.sender, currentEra, currentDay, msg.value);             // Record Burn\r\n    }\r\n    // Burn ether for nominated member\r\n    function burnEtherForMember(address member) external payable {\r\n        burnAddress.call.value(msg.value)(\"\");                                              // Burn ether\r\n        _recordBurn(msg.sender, member, currentEra, currentDay, msg.value);                 // Record Burn\r\n    }\r\n    // Burn ERC-20 Tokens\r\n    function burnTokens(address token, uint amount) external {\r\n        _burnTokens(token, amount, msg.sender);                                             // Record Burn\r\n    }\r\n    // Burn tokens for nominated member\r\n    function burnTokensForMember(address token, uint amount, address member) external {\r\n        _burnTokens(token, amount, member);                                                 // Record Burn\r\n    }\r\n    // Calls when sending Tokens\r\n    function _burnTokens (address _token, uint _amount, address _member) private {\r\n        uint _eth; address _ex = getExchange(_token);                                    // Get exchange\r\n        if (_ex == address(0)) {                                                            // Handle Token without Exchange\r\n            uint _startGas = gasleft();                                                  // Start counting gas\r\n            ERC20(_token).transferFrom(msg.sender, address(this), _amount);                 // Must collect tokens\r\n            ERC20(_token).transfer(burnAddress, _amount);                                   // Burn token\r\n            uint gasPrice = tx.gasprice; uint _endGas = gasleft();                    // Stop counting gas\r\n            uint _gasUsed = (_startGas - _endGas) + 20000;                               // Calculate gas and add gas overhead\r\n            _eth = _gasUsed * gasPrice;                                                     // Attribute gas burnt\r\n        } else {\r\n            ERC20(_token).transferFrom(msg.sender, address(this), _amount);                 // Must collect tokens\r\n            ERC20(_token).approve(_ex, _amount);                                            // Approve Exchange contract to transfer\r\n            _eth = UniswapExchange(_ex).tokenToEthTransferInput(\r\n                    _amount, 1, block.timestamp + 10, burnAddress);                         // Uniswap Exchange Transfer function\r\n        }\r\n        _recordBurn(msg.sender, _member, currentEra, currentDay, _eth);\r\n    }\r\n    // Get Token Exchange\r\n    function getExchange(address token ) public view returns (address){\r\n        address exchangeToReturn = address(0);\r\n        address exchangeFound = UniswapFactory(registryAddrArray[0]).getExchange(token);    // Try UniSwap V1\r\n        if (exchangeFound != address(0)) {\r\n            exchangeToReturn = exchangeFound;\r\n        } else {\r\n            exchangeToReturn = UniswapFactory(registryAddrArray[1]).tokenToExchange(token);     // Try DefSwap\r\n        }\r\n        return exchangeToReturn;\r\n    }\r\n    // Internal - Records burn\r\n    function _recordBurn(address _payer, address _member, uint _era, uint _day, uint _eth) private {\r\n        if (mapEraDay_MemberUnits[_era][_day][_member] == 0){                               // If hasn't contributed to this Day yet\r\n            mapMemberEra_Days[_member][_era].push(_day);                                    // Add it\r\n        }\r\n        mapEraDay_MemberUnits[_era][_day][_member] += _eth;                                 // Add member's share\r\n        mapEraDay_UnitsRemaining[_era][_day] += _eth;                                       // Add to total historicals\r\n        mapEraDay_Units[_era][_day] += _eth;                                                // Add to total outstanding\r\n        totalBurnt += _eth;                                                                 // Add to total burnt\r\n        emit Burn(_payer, _member, _era, _day, _eth);                                       // Burn event\r\n        _updateEmission();                                                                  // Update emission Schedule\r\n    }\r\n    // Allows adding an excluded address, once per Era\r\n    function addExcluded(address excluded) external {                   \r\n        _transfer(msg.sender, address(this), mapEra_Emission[1]/2);                     // Pay fee of 1024 Vether\r\n        mapAddress_Excluded[excluded] = true;                                           // Add desired address\r\n    }\r\n    //======================================WITHDRAWAL======================================//\r\n    // Used to efficiently track participation in each era\r\n    function getDaysContributedForEra(address member, uint era) public view returns(uint){\r\n        return mapMemberEra_Days[member][era].length;\r\n    }\r\n    // Call to withdraw a claim\r\n    function withdrawShare(uint era, uint day) external {\r\n        _withdrawShare(era, day, msg.sender);                           \r\n    }\r\n    // Call to withdraw a claim for another member\r\n    function withdrawShareForMember(uint era, uint day, address member) external {\r\n        _withdrawShare(era, day, member);\r\n    }\r\n    // Internal - withdraw function\r\n    function _withdrawShare (uint _era, uint _day, address _member) private {                                                                 // Update emission Schedule\r\n        _updateEmission();\r\n        if (_era < currentEra) {                                                            // Allow if in previous era\r\n            _processWithdrawal(_era, _day, _member);                                        // Process Withdrawal\r\n        } else if (_era == currentEra) {                                                    // Handle if in current era\r\n            if (_day < currentDay) {                                                        // Allow only if in previous day\r\n                _processWithdrawal(_era, _day, _member);                                    // Process Withdrawal\r\n            }\r\n        }   \r\n    }\r\n    // Internal - Withdrawal function\r\n    function _processWithdrawal (uint _era, uint _day, address _member) private {\r\n        uint memberUnits = mapEraDay_MemberUnits[_era][_day][_member];                   // Get Member Units\r\n        if (memberUnits == 0) {                                                             // Do nothing if 0 (prevents revert)\r\n        } else {\r\n            uint emissionToTransfer = getEmissionShare(_era, _day, _member);             // Get the emission Share for Member\r\n            mapEraDay_MemberUnits[_era][_day][_member] = 0;                                 // Set to 0 since it will be withdrawn\r\n            mapEraDay_UnitsRemaining[_era][_day] -= memberUnits;                            // Decrement Member Units\r\n            mapEraDay_EmissionRemaining[_era][_day] -= emissionToTransfer;                  // Decrement emission\r\n            _transfer(address(this), _member, emissionToTransfer);                          // ERC20 transfer function\r\n            emit Withdrawal(msg.sender, _member, _era, _day, emissionToTransfer);           // Withdrawal Event\r\n        }\r\n    }\r\n         // Get emission Share function\r\n    function getEmissionShare(uint era, uint day, address member) public view returns (uint emissionShare) {\r\n        uint memberUnits = mapEraDay_MemberUnits[era][day][member];                      // Get Member Units\r\n        if (memberUnits == 0) {\r\n            return 0;                                                                       // If 0, return 0\r\n        } else {\r\n            uint totalUnits = mapEraDay_UnitsRemaining[era][day];                        // Get Total Units\r\n            uint emissionRemaining = mapEraDay_EmissionRemaining[era][day];              // Get emission remaining for Day\r\n            uint balance = balanceOf[address(this)];                                     // Find remaining balance\r\n            if (emissionRemaining > balance) { emissionRemaining = balance; }               // In case less than required emission\r\n            emissionShare = (emissionRemaining * memberUnits) / totalUnits;                 // Calculate share\r\n            return  emissionShare;                            \r\n        }\r\n    }\r\n    //======================================EMISSION========================================//\r\n    // Internal - Update emission function\r\n    function _updateEmission() private {\r\n        uint _now = now;                                                                 // Find now()\r\n        if (_now >= nextDayTime) {                                                          // If time passed the next Day time\r\n            if (currentDay >= daysPerEra) {                                                 // If time passed the next Era time\r\n                currentEra += 1; currentDay = 0;                                            // Increment Era, reset Day\r\n                nextEraTime = _now + (secondsPerDay * daysPerEra);                          // Set next Era time\r\n                emission = getNextEraEmission();                                            // Get correct emission\r\n                mapEra_Emission[currentEra] = emission;                                     // Map emission to Era\r\n                emit NewEra(currentEra, emission, nextEraTime);                             // Emit Event\r\n            }\r\n            currentDay += 1;                                                                // Increment Day\r\n            nextDayTime = _now + secondsPerDay;                                             // Set next Day time\r\n            emission = getDayEmission();                                                    // Check daily Dmission\r\n            mapEraDay_Emission[currentEra][currentDay] = emission;                          // Map emission to Day\r\n            mapEraDay_EmissionRemaining[currentEra][currentDay] = emission;                 // Map emission to Day\r\n            emit NewDay(currentEra, currentDay, nextDayTime);                               // Emit Event\r\n        }\r\n    }\r\n    // Calculate Era emission\r\n    function getNextEraEmission() public view returns (uint) {\r\n        uint _1 = 1*10**18;\r\n        if (emission > _1) {                                                                // Normal emission Schedule\r\n            return emission / 2;                                                            // emissions: 2048 -> 1.0\r\n        } else{                                                                             // Enters Fee Era\r\n            return _1;                                                                      // Return 1.0 from fees\r\n        }\r\n    }\r\n    // Calculate Day emission\r\n    function getDayEmission() public view returns (uint) {\r\n        uint balance = balanceOf[address(this)];                                         // Find remaining balance\r\n        if (balance > emission) {                                                           // Balance is sufficient\r\n            return emission;                                                                // Return emission\r\n        } else {                                                                            // Balance has dropped low\r\n            return balance;                                                                 // Return full balance\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewEra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excluded\",\"type\":\"address\"}],\"name\":\"addExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"burnEtherForMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"burnTokensForMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysPerEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDayEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"}],\"name\":\"getDaysContributedForEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getEmissionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"emissionShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEraEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddress_Excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_Emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_EmissionRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraDay_MemberUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_Units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_UnitsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEra_Emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberEra_Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEraTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registryAddrArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"withdrawShareForMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Vether","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db7c1aadb115dce27dd93634ad43c2ff87aa49af8f713149c05770f64c955745"}]}