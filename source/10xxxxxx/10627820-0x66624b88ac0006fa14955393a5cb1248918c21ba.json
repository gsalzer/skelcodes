{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IIdleRebalancerV3.sol\r\n\r\n/**\r\n * @title: Idle Rebalancer interface\r\n * @author: Idle Labs Inc., idle.finance\r\n */\r\npragma solidity 0.5.16;\r\n\r\ninterface IIdleRebalancerV3 {\r\n  function getAllocations() external view returns (uint256[] memory _allocations);\r\n  function setAllocations(uint256[] calldata _allocations, address[] calldata _addresses) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IdleRebalancerV3_1.sol\r\n\r\n/**\r\n * @title: Idle Rebalancer contract\r\n * @summary: Used for calculating amounts to lend on each implemented protocol.\r\n *           This implementation works with Compound and Fulcrum only,\r\n *           when a new protocol will be added this should be replaced\r\n * @author: Idle Labs Inc., idle.finance\r\n */\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\ncontract IdleRebalancerV3_1 is IIdleRebalancerV3, Ownable {\r\n  using SafeMath for uint256;\r\n  uint256[] public lastAmounts;\r\n  address[] public lastAmountsAddresses;\r\n  address public rebalancerManager;\r\n  address public idleToken;\r\n  uint256 private constant MAX_PERC = 100000;\r\n\r\n  /**\r\n   * @param _protocolTokens : array of interest bearing tokens\r\n   * @param _rebalancerManager : rebalancerManager address\r\n   */\r\n  constructor(address[] memory _protocolTokens, address _rebalancerManager) public {\r\n    require(_rebalancerManager != address(0), 'manager addr is 0');\r\n    rebalancerManager = _rebalancerManager;\r\n    lastAmounts = new uint256[](_protocolTokens.length);\r\n    lastAmountsAddresses = new address[](_protocolTokens.length);\r\n\r\n    lastAmounts[0] = MAX_PERC;\r\n    lastAmountsAddresses[0] = _protocolTokens[0];\r\n    for(uint256 i = 1; i < _protocolTokens.length; i++) {\r\n      require(_protocolTokens[i] != address(0), 'some addr is 0');\r\n      // Initially 100% on first lending protocol\r\n      lastAmountsAddresses[i] = _protocolTokens[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than rebalancerManager.\r\n   */\r\n  modifier onlyRebalancerAndIdle() {\r\n    require(msg.sender == rebalancerManager || msg.sender == idleToken, \"Only rebalacer and IdleToken\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the allowed rebalancer address\r\n   *\r\n   * @param _rebalancerManager : rebalance manager address\r\n   */\r\n  function setRebalancerManager(address _rebalancerManager)\r\n    external onlyOwner {\r\n      require(_rebalancerManager != address(0), \"_rebalancerManager addr is 0\");\r\n\r\n      rebalancerManager = _rebalancerManager;\r\n  }\r\n\r\n  function setIdleToken(address _idleToken)\r\n    external onlyOwner {\r\n      require(idleToken == address(0), \"idleToken addr already set\");\r\n      require(_idleToken != address(0), \"_idleToken addr is 0\");\r\n      idleToken = _idleToken;\r\n  }\r\n\r\n  /**\r\n   * It adds a new token address to lastAmountsAddresses list\r\n   *\r\n   * @param _newToken : new interest bearing token address\r\n   */\r\n  function setNewToken(address _newToken)\r\n    external onlyOwner {\r\n      require(_newToken != address(0), \"New token should be != 0\");\r\n      for (uint256 i = 0; i < lastAmountsAddresses.length; i++) {\r\n        if (lastAmountsAddresses[i] == _newToken) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      lastAmountsAddresses.push(_newToken);\r\n      lastAmounts.push(0);\r\n  }\r\n  // end onlyOwner\r\n\r\n  /**\r\n   * Used by Rebalance manager to set the new allocations\r\n   *\r\n   * @param _allocations : array with allocations in percentages (100% => MAX_PERC)\r\n   * @param _addresses : array with addresses of tokens used, should be equal to lastAmountsAddresses\r\n   */\r\n  function setAllocations(uint256[] calldata _allocations, address[] calldata _addresses)\r\n    external onlyRebalancerAndIdle\r\n  {\r\n    require(_allocations.length == lastAmounts.length, \"Alloc lengths are different, allocations\");\r\n    require(_allocations.length == _addresses.length, \"Alloc lengths are different, addresses\");\r\n\r\n    uint256 total;\r\n    for (uint256 i = 0; i < _allocations.length; i++) {\r\n      require(_addresses[i] == lastAmountsAddresses[i], \"Addresses do not match\");\r\n      total = total.add(_allocations[i]);\r\n      lastAmounts[i] = _allocations[i];\r\n    }\r\n    require(total == MAX_PERC, \"Not allocating 100%\");\r\n  }\r\n\r\n  function getAllocations()\r\n    external view returns (uint256[] memory _allocations) {\r\n    return lastAmounts;\r\n  }\r\n\r\n  function getAllocationsLength()\r\n    external view returns (uint256) {\r\n    return lastAmounts.length;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_protocolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_rebalancerManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllocationsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAmountsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebalancerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_idleToken\",\"type\":\"address\"}],\"name\":\"setIdleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancerManager\",\"type\":\"address\"}],\"name\":\"setRebalancerManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdleRebalancerV3_1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"30000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b3c8e5534f0063545cbbb7ce86854bf42db8872b0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc90000000000000000000000008326645f3aa6de6420102fdb7da9e3a91855045b00000000000000000000000071fc860f7d3a592a4a98740e39db31d25db65ae8","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cbb5d192b767be122180b6b34ea1323613f34d977e751b0197297f141a7c65bd"}]}