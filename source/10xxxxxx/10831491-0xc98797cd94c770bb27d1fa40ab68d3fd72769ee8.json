{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ncontract IERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IWethERC20 is IWeth, IERC20 {}\r\n\r\ncontract Constants {\r\n\r\n    uint256 internal constant WEI_PRECISION = 10**18;\r\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\r\n\r\n    uint256 internal constant DAYS_IN_A_YEAR = 365;\r\n    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\r\n\r\n    string internal constant UserRewardsID = \"UserRewards\";\r\n\r\n    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\r\n    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\r\n}\r\n\r\n/**\r\n * @dev Library for managing loan sets\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\r\n *\r\n */\r\nlibrary EnumerableBytes32Set {\r\n\r\n    struct Bytes32Set {\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) index;\r\n        bytes32[] values;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an address value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return addBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)){\r\n            set.index[value] = set.values.push(value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return removeBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (contains(set, value)){\r\n            uint256 toDeleteIndex = set.index[value] - 1;\r\n            uint256 lastIndex = set.values.length - 1;\r\n\r\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set.values[lastIndex];\r\n\r\n                // Move the last value to the index where the deleted value is\r\n                set.values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            }\r\n\r\n            // Delete the index entry for the deleted value\r\n            delete set.index[value];\r\n\r\n            // Delete the old entry for the moved value\r\n            set.values.pop();\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function containsAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all values in the set. O(N).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     * WARNING: This function may run out of gas on large sets: use {length} and\r\n     * {get} instead in these cases.\r\n     */\r\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory output)\r\n    {\r\n        uint256 end = start + count;\r\n        require(end >= start, \"addition overflow\");\r\n        end = set.values.length < end ? set.values.length : end;\r\n        if (end == 0 || start >= end) {\r\n            return output;\r\n        }\r\n\r\n        output = new bytes32[](end-start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            output[i-start] = set.values[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements on the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set.values.length;\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function get(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set.values[index];\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function getAddress(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 value = set.values[index];\r\n        address addrvalue;\r\n        assembly {\r\n            addrvalue := value\r\n        }\r\n        return addrvalue;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\r\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\r\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\r\n\r\n    /// @dev Constant for locked guard state\r\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\r\n\r\n    /**\r\n    * @dev We use a single lock for the whole contract.\r\n    */\r\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\r\n\r\n    /**\r\n    * @dev Prevents a contract from calling itself, directly or indirectly.\r\n    * If you mark a function `nonReentrant`, you should also\r\n    * mark it `external`. Calling one `nonReentrant` function from\r\n    * another is not supported. Instead, you can implement a\r\n    * `private` function doing the actual work, and an `external`\r\n    * wrapper marked as `nonReentrant`.\r\n    */\r\n    modifier nonReentrant() {\r\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\r\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\r\n        _;\r\n        reentrancyLock = REENTRANCY_GUARD_FREE;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divCeil(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = ((a - 1) / b) + 1;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract LoanStruct {\r\n    struct Loan {\r\n        bytes32 id;                 // id of the loan\r\n        bytes32 loanParamsId;       // the linked loan params id\r\n        bytes32 pendingTradesId;    // the linked pending trades id\r\n        uint256 principal;          // total borrowed amount outstanding\r\n        uint256 collateral;         // total collateral escrowed for the loan\r\n        uint256 startTimestamp;     // loan start time\r\n        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\r\n        uint256 startMargin;        // initial margin when the loan opened\r\n        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\r\n        address borrower;           // borrower of this loan\r\n        address lender;             // lender of this loan\r\n        bool active;                // if false, the loan has been fully closed\r\n    }\r\n}\r\n\r\ncontract LoanParamsStruct {\r\n    struct LoanParams {\r\n        bytes32 id;                 // id of loan params object\r\n        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\r\n        address owner;              // owner of this object\r\n        address loanToken;          // the token being loaned\r\n        address collateralToken;    // the required collateral token\r\n        uint256 minInitialMargin;   // the minimum allowed initial margin\r\n        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\r\n        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term)\r\n    }\r\n}\r\n\r\ncontract OrderStruct {\r\n    struct Order {\r\n        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\r\n        uint256 interestRate;           // interest rate defined by the creator of this order\r\n        uint256 minLoanTerm;            // minimum loan term allowed\r\n        uint256 maxLoanTerm;            // maximum loan term allowed\r\n        uint256 createdTimestamp;       // timestamp when this order was created\r\n        uint256 expirationTimestamp;    // timestamp when this order expires\r\n    }\r\n}\r\n\r\ncontract LenderInterestStruct {\r\n    struct LenderInterest {\r\n        uint256 principalTotal;     // total borrowed amount outstanding of asset\r\n        uint256 owedPerDay;         // interest owed per day for all loans of asset\r\n        uint256 owedTotal;          // total interest owed for all loans of asset (assuming they go to full term)\r\n        uint256 paidTotal;          // total interest paid so far for asset\r\n        uint256 updatedTimestamp;   // last update\r\n    }\r\n}\r\n\r\ncontract LoanInterestStruct {\r\n    struct LoanInterest {\r\n        uint256 owedPerDay;         // interest owed per day for loan\r\n        uint256 depositTotal;       // total escrowed interest for loan\r\n        uint256 updatedTimestamp;   // last update\r\n    }\r\n}\r\n\r\ncontract Objects is\r\n    LoanStruct,\r\n    LoanParamsStruct,\r\n    OrderStruct,\r\n    LenderInterestStruct,\r\n    LoanInterestStruct\r\n{}\r\n\r\ncontract State is Constants, Objects, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\r\n\r\n    address public priceFeeds;                                                              // handles asset reference price lookups\r\n    address public swapsImpl;                                                               // handles asset swaps using dex liquidity\r\n\r\n    mapping (bytes4 => address) public logicTargets;                                        // implementations of protocol functions\r\n\r\n    mapping (bytes32 => Loan) public loans;                                                 // loanId => Loan\r\n    mapping (bytes32 => LoanParams) public loanParams;                                      // loanParamsId => LoanParams\r\n\r\n    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                    // lender => orderParamsId => Order\r\n    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;                  // borrower => orderParamsId => Order\r\n\r\n    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;                // loanId => delegated => approved\r\n\r\n    // Interest\r\n    mapping (address => mapping (address => LenderInterest)) public lenderInterest;         // lender => loanToken => LenderInterest object\r\n    mapping (bytes32 => LoanInterest) public loanInterest;                                  // loanId => LoanInterest object\r\n\r\n    // Internals\r\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                               // implementations set\r\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                                // active loans set\r\n\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;           // lender loans set\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;         // borrow loans set\r\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;        // user loan params set\r\n\r\n    address public feesController;                                                          // address controlling fee withdrawals\r\n\r\n    uint256 public lendingFeePercent = 10 ether; // 10% fee                                 // fee taken from lender interest payments\r\n    mapping (address => uint256) public lendingFeeTokensHeld;                               // total interest fees received and not withdrawn per asset\r\n    mapping (address => uint256) public lendingFeeTokensPaid;                               // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\r\n\r\n    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                             // fee paid for each trade\r\n    mapping (address => uint256) public tradingFeeTokensHeld;                               // total trading fees received and not withdrawn per asset\r\n    mapping (address => uint256) public tradingFeeTokensPaid;                               // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\r\n\r\n    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                           // origination fee paid for each loan\r\n    mapping (address => uint256) public borrowingFeeTokensHeld;                             // total borrowing fees received and not withdrawn per asset\r\n    mapping (address => uint256) public borrowingFeeTokensPaid;                             // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\r\n\r\n    uint256 public protocolTokenHeld;                                                       // current protocol token deposit balance\r\n    uint256 public protocolTokenPaid;                                                       // lifetime total payout of protocol token\r\n\r\n    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                         // fee share for affiliate program\r\n\r\n    mapping (address => mapping (address => uint256)) public liquidationIncentivePercent;   // percent discount on collateral for liquidators per loanToken and collateralToken\r\n\r\n    mapping (address => address) public loanPoolToUnderlying;                               // loanPool => underlying\r\n    mapping (address => address) public underlyingToLoanPool;                               // underlying => loanPool\r\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                                  // loan pools set\r\n\r\n    mapping (address => bool) public supportedTokens;                                       // supported tokens for swaps\r\n\r\n    uint256 public maxDisagreement = 5 ether;                                               // % disagreement between swap rate and reference rate\r\n\r\n    uint256 public sourceBufferPercent = 5 ether;                                           // used to estimate kyber swap source amount\r\n\r\n    uint256 public maxSwapSize = 1500 ether;                                                // maximum supported swap size in ETH\r\n\r\n\r\n    function _setTarget(\r\n        bytes4 sig,\r\n        address target)\r\n        internal\r\n    {\r\n        logicTargets[sig] = target;\r\n\r\n        if (target != address(0)) {\r\n            logicTargetsSet.addBytes32(bytes32(sig));\r\n        } else {\r\n            logicTargetsSet.removeBytes32(bytes32(sig));\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPriceFeeds {\r\n    function queryRate(\r\n        address sourceToken,\r\n        address destToken)\r\n        external\r\n        view\r\n        returns (uint256 rate, uint256 precision);\r\n\r\n    function queryPrecision(\r\n        address sourceToken,\r\n        address destToken)\r\n        external\r\n        view\r\n        returns (uint256 precision);\r\n\r\n    function queryReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceAmount)\r\n        external\r\n        view\r\n        returns (uint256 destAmount);\r\n\r\n    function checkPriceDisagreement(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceAmount,\r\n        uint256 destAmount,\r\n        uint256 maxSlippage)\r\n        external\r\n        view\r\n        returns (uint256 sourceToDestSwapRate);\r\n\r\n    function amountInEth(\r\n        address Token,\r\n        uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 ethAmount);\r\n\r\n    function getMaxDrawdown(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount,\r\n        uint256 maintenanceMargin)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getCurrentMarginAndCollateralSize(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount)\r\n        external\r\n        view\r\n        returns (uint256 currentMargin, uint256 collateralInEthAmount);\r\n\r\n    function getCurrentMargin(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount)\r\n        external\r\n        view\r\n        returns (uint256 currentMargin, uint256 collateralToLoanRate);\r\n\r\n    function shouldLiquidate(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount,\r\n        uint256 maintenanceMargin)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getFastGasPrice(\r\n        address payToken)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract FeesEvents {\r\n\r\n    event PayLendingFee(\r\n        address indexed payer,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    event PayTradingFee(\r\n        address indexed payer,\r\n        address indexed token,\r\n        bytes32 indexed loanId,\r\n        uint256 amount\r\n    );\r\n\r\n    event PayBorrowingFee(\r\n        address indexed payer,\r\n        address indexed token,\r\n        bytes32 indexed loanId,\r\n        uint256 amount\r\n    );\r\n\r\n    event EarnReward(\r\n        address indexed receiver,\r\n        address indexed token,\r\n        bytes32 indexed loanId,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\ncontract FeesHelper is State, FeesEvents {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // calculate trading fee\r\n    function _getTradingFee(\r\n        uint256 feeTokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return feeTokenAmount\r\n            .mul(tradingFeePercent)\r\n            .divCeil(WEI_PERCENT_PRECISION);\r\n    }\r\n\r\n    // calculate loan origination fee\r\n    function _getBorrowingFee(\r\n        uint256 feeTokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return feeTokenAmount\r\n            .mul(borrowingFeePercent)\r\n            .divCeil(WEI_PERCENT_PRECISION);\r\n    }\r\n\r\n    // settle trading fee\r\n    function _payTradingFee(\r\n        address user,\r\n        bytes32 loanId,\r\n        address feeToken,\r\n        uint256 tradingFee)\r\n        internal\r\n    {\r\n        if (tradingFee != 0) {\r\n            tradingFeeTokensHeld[feeToken] = tradingFeeTokensHeld[feeToken]\r\n                .add(tradingFee);\r\n\r\n            emit PayTradingFee(\r\n                user,\r\n                feeToken,\r\n                loanId,\r\n                tradingFee\r\n            );\r\n\r\n            _payFeeReward(\r\n                user,\r\n                loanId,\r\n                feeToken,\r\n                tradingFee\r\n            );\r\n        }\r\n    }\r\n\r\n    // settle loan origination fee\r\n    function _payBorrowingFee(\r\n        address user,\r\n        bytes32 loanId,\r\n        address feeToken,\r\n        uint256 borrowingFee)\r\n        internal\r\n    {\r\n        if (borrowingFee != 0) {\r\n            borrowingFeeTokensHeld[feeToken] = borrowingFeeTokensHeld[feeToken]\r\n                .add(borrowingFee);\r\n\r\n            emit PayBorrowingFee(\r\n                user,\r\n                feeToken,\r\n                loanId,\r\n                borrowingFee\r\n            );\r\n\r\n            _payFeeReward(\r\n                user,\r\n                loanId,\r\n                feeToken,\r\n                borrowingFee\r\n            );\r\n        }\r\n    }\r\n\r\n    // settle lender (interest) fee\r\n    function _payLendingFee(\r\n        address user,\r\n        address feeToken,\r\n        uint256 lendingFee)\r\n        internal\r\n    {\r\n        if (lendingFee != 0) {\r\n            lendingFeeTokensHeld[feeToken] = lendingFeeTokensHeld[feeToken]\r\n                .add(lendingFee);\r\n\r\n            emit PayLendingFee(\r\n                user,\r\n                feeToken,\r\n                lendingFee\r\n            );\r\n\r\n             //// NOTE: Lenders do not receive a fee reward ////\r\n        }\r\n    }\r\n\r\n    // settles and pays borrowers based on the fees generated by their interest payments\r\n    function _settleFeeRewardForInterestExpense(\r\n        LoanInterest storage loanInterestLocal,\r\n        bytes32 loanId,\r\n        address feeToken,\r\n        address user,\r\n        uint256 interestTime)\r\n        internal\r\n    {\r\n        uint256 updatedTimestamp = loanInterestLocal.updatedTimestamp;\r\n\r\n        uint256 interestExpenseFee;\r\n        if (updatedTimestamp != 0) {\r\n            // this represents the fee generated by a borrower's interest payment\r\n            interestExpenseFee = interestTime\r\n                .sub(updatedTimestamp)\r\n                .mul(loanInterestLocal.owedPerDay)\r\n                .mul(lendingFeePercent)\r\n                .div(1 days * WEI_PERCENT_PRECISION);\r\n        }\r\n\r\n        loanInterestLocal.updatedTimestamp = interestTime;\r\n\r\n        if (interestExpenseFee != 0) {\r\n            _payFeeReward(\r\n                user,\r\n                loanId,\r\n                feeToken,\r\n                interestExpenseFee\r\n            );\r\n        }\r\n    }\r\n\r\n    // pay protocolToken reward to user\r\n    function _payFeeReward(\r\n        address user,\r\n        bytes32 loanId,\r\n        address feeToken,\r\n        uint256 feeAmount)\r\n        internal\r\n    {\r\n        // The protocol is designed to allow positions and loans to be closed, if for whatever reason\r\n        // the price lookup is failing, returning 0, or is otherwise paused. Therefore, we allow this\r\n        // call to fail silently, rather than revert, to allow the transaction to continue without a\r\n        // BZRX token reward.\r\n        uint256 rewardAmount;\r\n        address _priceFeeds = priceFeeds;\r\n        (bool success, bytes memory data) = _priceFeeds.staticcall(\r\n            abi.encodeWithSelector(\r\n                IPriceFeeds(_priceFeeds).queryReturn.selector,\r\n                feeToken,\r\n                bzrxTokenAddress, // price rewards using BZRX price rather than vesting token price\r\n                feeAmount / 2  // 50% of fee value\r\n            )\r\n        );\r\n        assembly {\r\n            if eq(success, 1) {\r\n                rewardAmount := mload(add(data, 32))\r\n            }\r\n        }\r\n\r\n        if (rewardAmount != 0) {\r\n            uint256 tokenBalance = protocolTokenHeld;\r\n            if (rewardAmount > tokenBalance) {\r\n                rewardAmount = tokenBalance;\r\n            }\r\n            if (rewardAmount != 0) {\r\n                protocolTokenHeld = tokenBalance\r\n                    .sub(rewardAmount);\r\n\r\n                bytes32 slot = keccak256(abi.encodePacked(user, UserRewardsID));\r\n                assembly {\r\n                    sstore(slot, add(sload(slot), rewardAmount))\r\n                }\r\n\r\n                emit EarnReward(\r\n                    user,\r\n                    vbzrxTokenAddress, // rewardToken\r\n                    loanId,\r\n                    rewardAmount\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract VaultController is Constants {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event VaultDeposit(\r\n        address indexed asset,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n    event VaultWithdraw(\r\n        address indexed asset,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    function vaultEtherDeposit(\r\n        address from,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        IWethERC20 _wethToken = wethToken;\r\n        _wethToken.deposit.value(value)();\r\n\r\n        emit VaultDeposit(\r\n            address(_wethToken),\r\n            from,\r\n            value\r\n        );\r\n    }\r\n\r\n    function vaultEtherWithdraw(\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        if (value != 0) {\r\n            IWethERC20 _wethToken = wethToken;\r\n            uint256 balance = address(this).balance;\r\n            if (value > balance) {\r\n                _wethToken.withdraw(value - balance);\r\n            }\r\n            Address.sendValue(to, value);\r\n\r\n            emit VaultWithdraw(\r\n                address(_wethToken),\r\n                to,\r\n                value\r\n            );\r\n        }\r\n    }\r\n\r\n    function vaultDeposit(\r\n        address token,\r\n        address from,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        if (value != 0) {\r\n            IERC20(token).safeTransferFrom(\r\n                from,\r\n                address(this),\r\n                value\r\n            );\r\n\r\n            emit VaultDeposit(\r\n                token,\r\n                from,\r\n                value\r\n            );\r\n        }\r\n    }\r\n\r\n    function vaultWithdraw(\r\n        address token,\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        if (value != 0) {\r\n            IERC20(token).safeTransfer(\r\n                to,\r\n                value\r\n            );\r\n\r\n            emit VaultWithdraw(\r\n                token,\r\n                to,\r\n                value\r\n            );\r\n        }\r\n    }\r\n\r\n    function vaultTransfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        if (value != 0) {\r\n            if (from == address(this)) {\r\n                IERC20(token).safeTransfer(\r\n                    to,\r\n                    value\r\n                );\r\n            } else {\r\n                IERC20(token).safeTransferFrom(\r\n                    from,\r\n                    to,\r\n                    value\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function vaultApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value)\r\n        internal\r\n    {\r\n        if (value != 0 && IERC20(token).allowance(address(this), to) != 0) {\r\n            IERC20(token).safeApprove(to, 0);\r\n        }\r\n        IERC20(token).safeApprove(to, value);\r\n    }\r\n}\r\n\r\ncontract InterestUser is State, VaultController, FeesHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function _payInterest(\r\n        address lender,\r\n        address interestToken)\r\n        internal\r\n    {\r\n        LenderInterest storage lenderInterestLocal = lenderInterest[lender][interestToken];\r\n\r\n        uint256 interestOwedNow = 0;\r\n        if (lenderInterestLocal.owedPerDay != 0 && lenderInterestLocal.updatedTimestamp != 0) {\r\n            interestOwedNow = block.timestamp\r\n                .sub(lenderInterestLocal.updatedTimestamp)\r\n                .mul(lenderInterestLocal.owedPerDay)\r\n                .div(1 days);\r\n\r\n            lenderInterestLocal.updatedTimestamp = block.timestamp;\r\n\r\n            if (interestOwedNow > lenderInterestLocal.owedTotal)\r\n\t            interestOwedNow = lenderInterestLocal.owedTotal;\r\n\r\n            if (interestOwedNow != 0) {\r\n                lenderInterestLocal.paidTotal = lenderInterestLocal.paidTotal\r\n                    .add(interestOwedNow);\r\n                lenderInterestLocal.owedTotal = lenderInterestLocal.owedTotal\r\n                    .sub(interestOwedNow);\r\n\r\n                _payInterestTransfer(\r\n                    lender,\r\n                    interestToken,\r\n                    interestOwedNow\r\n                );\r\n            }\r\n        } else {\r\n            lenderInterestLocal.updatedTimestamp = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _payInterestTransfer(\r\n        address lender,\r\n        address interestToken,\r\n        uint256 interestOwedNow)\r\n        internal\r\n    {\r\n        uint256 lendingFee = interestOwedNow\r\n            .mul(lendingFeePercent)\r\n            .divCeil(WEI_PERCENT_PRECISION);\r\n\r\n        _payLendingFee(\r\n            lender,\r\n            interestToken,\r\n            lendingFee\r\n        );\r\n\r\n        // transfers the interest to the lender, less the interest fee\r\n        vaultWithdraw(\r\n            interestToken,\r\n            lender,\r\n            interestOwedNow\r\n                .sub(lendingFee)\r\n        );\r\n    }\r\n}\r\n\r\ncontract SwapsEvents {\r\n\r\n    event LoanSwap(\r\n        bytes32 indexed loanId,\r\n        address indexed sourceToken,\r\n        address indexed destToken,\r\n        address borrower,\r\n        uint256 sourceAmount,\r\n        uint256 destAmount\r\n    );\r\n\r\n    event ExternalSwap(\r\n        address indexed user,\r\n        address indexed sourceToken,\r\n        address indexed destToken,\r\n        uint256 sourceAmount,\r\n        uint256 destAmount\r\n    );\r\n}\r\n\r\ninterface ISwapsImpl {\r\n    function dexSwap(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        address returnToSenderAddress,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount)\r\n        external\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\r\n\r\n    function dexExpectedRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 sourceTokenAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract SwapsUser is State, SwapsEvents, FeesHelper {\r\n\r\n    function _loanSwap(\r\n        bytes32 loanId,\r\n        address sourceToken,\r\n        address destToken,\r\n        address user,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount,\r\n        bool bypassFee,\r\n        bytes memory loanDataBytes)\r\n        internal\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed, uint256 sourceToDestSwapRate)\r\n    {\r\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\r\n            [\r\n                sourceToken,\r\n                destToken,\r\n                address(this), // receiver\r\n                address(this), // returnToSender\r\n                user\r\n            ],\r\n            [\r\n                minSourceTokenAmount,\r\n                maxSourceTokenAmount,\r\n                requiredDestTokenAmount\r\n            ],\r\n            loanId,\r\n            bypassFee,\r\n            loanDataBytes\r\n        );\r\n\r\n        // will revert if swap size too large\r\n        _checkSwapSize(sourceToken, sourceTokenAmountUsed);\r\n\r\n        // will revert if disagreement found\r\n        sourceToDestSwapRate = IPriceFeeds(priceFeeds).checkPriceDisagreement(\r\n            sourceToken,\r\n            destToken,\r\n            sourceTokenAmountUsed,\r\n            destTokenAmountReceived,\r\n            maxDisagreement\r\n        );\r\n\r\n        emit LoanSwap(\r\n            loanId,\r\n            sourceToken,\r\n            destToken,\r\n            user,\r\n            sourceTokenAmountUsed,\r\n            destTokenAmountReceived\r\n        );\r\n    }\r\n\r\n    function _swapsCall(\r\n        address[5] memory addrs,\r\n        uint256[3] memory vals,\r\n        bytes32 loanId,\r\n        bool miscBool, // bypassFee\r\n        bytes memory loanDataBytes)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        //addrs[0]: sourceToken\r\n        //addrs[1]: destToken\r\n        //addrs[2]: receiver\r\n        //addrs[3]: returnToSender\r\n        //addrs[4]: user\r\n        //vals[0]:  minSourceTokenAmount\r\n        //vals[1]:  maxSourceTokenAmount\r\n        //vals[2]:  requiredDestTokenAmount\r\n\r\n        require(vals[0] != 0, \"sourceAmount == 0\");\r\n\r\n        uint256 destTokenAmountReceived;\r\n        uint256 sourceTokenAmountUsed;\r\n\r\n        uint256 tradingFee;\r\n        if (!miscBool) { // bypassFee\r\n            if (vals[2] == 0) {\r\n                // condition: vals[0] will always be used as sourceAmount\r\n\r\n                tradingFee = _getTradingFee(vals[0]);\r\n                if (tradingFee != 0) {\r\n                    _payTradingFee(\r\n                        addrs[4], // user\r\n                        loanId,\r\n                        addrs[0], // sourceToken\r\n                        tradingFee\r\n                    );\r\n\r\n                    vals[0] = vals[0]\r\n                        .sub(tradingFee);\r\n                }\r\n            } else {\r\n                // condition: unknown sourceAmount will be used\r\n\r\n                tradingFee = _getTradingFee(vals[2]);\r\n\r\n                if (tradingFee != 0) {\r\n                    vals[2] = vals[2]\r\n                        .add(tradingFee);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vals[1] == 0) {\r\n            vals[1] = vals[0];\r\n        } else {\r\n            require(vals[0] <= vals[1], \"min greater than max\");\r\n        }\r\n\r\n        require(loanDataBytes.length == 0, \"invalid state\");\r\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall_internal(\r\n            addrs,\r\n            vals\r\n        );\r\n\r\n        if (vals[2] == 0) {\r\n            // there's no minimum destTokenAmount, but all of vals[0] (minSourceTokenAmount) must be spent, and amount spent can't exceed vals[0]\r\n            require(sourceTokenAmountUsed == vals[0], \"swap too large to fill\");\r\n\r\n            if (tradingFee != 0) {\r\n                sourceTokenAmountUsed = sourceTokenAmountUsed + tradingFee; // will never overflow\r\n            }\r\n        } else {\r\n            // there's a minimum destTokenAmount required, but sourceTokenAmountUsed won't be greater than vals[1] (maxSourceTokenAmount)\r\n            require(sourceTokenAmountUsed <= vals[1], \"swap fill too large\");\r\n            require(destTokenAmountReceived >= vals[2], \"insufficient swap liquidity\");\r\n\r\n            if (tradingFee != 0) {\r\n                _payTradingFee(\r\n                    addrs[4], // user\r\n                    loanId, // loanId,\r\n                    addrs[1], // destToken\r\n                    tradingFee\r\n                );\r\n\r\n                destTokenAmountReceived = destTokenAmountReceived - tradingFee; // will never overflow\r\n            }\r\n        }\r\n\r\n        return (destTokenAmountReceived, sourceTokenAmountUsed);\r\n    }\r\n\r\n    function _swapsCall_internal(\r\n        address[5] memory addrs,\r\n        uint256[3] memory vals)\r\n        internal\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\r\n    {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            ISwapsImpl(swapsImpl).dexSwap.selector,\r\n            addrs[0], // sourceToken\r\n            addrs[1], // destToken\r\n            addrs[2], // receiverAddress\r\n            addrs[3], // returnToSenderAddress\r\n            vals[0],  // minSourceTokenAmount\r\n            vals[1],  // maxSourceTokenAmount\r\n            vals[2]   // requiredDestTokenAmount\r\n        );\r\n\r\n        bool success;\r\n        (success, data) = swapsImpl.delegatecall(data);\r\n        require(success, \"swap failed\");\r\n\r\n        (destTokenAmountReceived, sourceTokenAmountUsed) = abi.decode(data, (uint256, uint256));\r\n    }\r\n\r\n    function _swapsExpectedReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceTokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 tradingFee = _getTradingFee(sourceTokenAmount);\r\n        if (tradingFee != 0) {\r\n            sourceTokenAmount = sourceTokenAmount\r\n                .sub(tradingFee);\r\n        }\r\n\r\n        uint256 sourceToDestRate = ISwapsImpl(swapsImpl).dexExpectedRate(\r\n            sourceToken,\r\n            destToken,\r\n            sourceTokenAmount\r\n        );\r\n        uint256 sourceToDestPrecision = IPriceFeeds(priceFeeds).queryPrecision(\r\n            sourceToken,\r\n            destToken\r\n        );\r\n\r\n        return sourceTokenAmount\r\n            .mul(sourceToDestRate)\r\n            .div(sourceToDestPrecision);\r\n    }\r\n\r\n    function _checkSwapSize(\r\n        address tokenAddress,\r\n        uint256 amount)\r\n        internal\r\n        view\r\n    {\r\n        uint256 _maxSwapSize = maxSwapSize;\r\n        if (_maxSwapSize != 0) {\r\n            uint256 amountInEth;\r\n            if (tokenAddress == address(wethToken)) {\r\n                amountInEth = amount;\r\n            } else {\r\n                amountInEth = IPriceFeeds(priceFeeds).amountInEth(tokenAddress, amount);\r\n            }\r\n            require(amountInEth <= _maxSwapSize, \"swap too large\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract LoanOpeningsEvents {\r\n\r\n    event Borrow(\r\n        address indexed user,\r\n        address indexed lender,\r\n        bytes32 indexed loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        uint256 newCollateral,\r\n        uint256 interestRate,\r\n        uint256 interestDuration,\r\n        uint256 collateralToLoanRate,\r\n        uint256 currentMargin\r\n    );\r\n\r\n    event Trade(\r\n        address indexed user,\r\n        address indexed lender,\r\n        bytes32 indexed loanId,\r\n        address collateralToken,\r\n        address loanToken,\r\n        uint256 positionSize,\r\n        uint256 borrowedAmount,\r\n        uint256 interestRate,\r\n        uint256 settlementDate,\r\n        uint256 entryPrice, // one unit of collateralToken, denominated in loanToken\r\n        uint256 entryLeverage,\r\n        uint256 currentLeverage\r\n    );\r\n\r\n    event DelegatedManagerSet(\r\n        bytes32 indexed loanId,\r\n        address indexed delegator,\r\n        address indexed delegated,\r\n        bool isActive\r\n    );\r\n}\r\n\r\ncontract LoanOpenings is State, LoanOpeningsEvents, VaultController, InterestUser, SwapsUser {\r\n\r\n    function initialize(\r\n        address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _setTarget(this.borrowOrTradeFromPool.selector, target);\r\n        _setTarget(this.setDelegatedManager.selector, target);\r\n        _setTarget(this.getEstimatedMarginExposure.selector, target);\r\n        _setTarget(this.getRequiredCollateral.selector, target);\r\n        _setTarget(this.getRequiredCollateralByParams.selector, target);\r\n        _setTarget(this.getBorrowAmount.selector, target);\r\n        _setTarget(this.getBorrowAmountByParams.selector, target);\r\n    }\r\n\r\n    // Note: Only callable by loan pools (iTokens)\r\n    function borrowOrTradeFromPool(\r\n        bytes32 loanParamsId,\r\n        bytes32 loanId, // if 0, start a new loan\r\n        bool isTorqueLoan,\r\n        uint256 initialMargin,\r\n        address[4] calldata sentAddresses,\r\n            // lender: must match loan if loanId provided\r\n            // borrower: must match loan if loanId provided\r\n            // receiver: receiver of funds (address(0) assumes borrower address)\r\n            // manager: delegated manager of loan unless address(0)\r\n        uint256[5] calldata sentValues,\r\n            // newRate: new loan interest rate\r\n            // newPrincipal: new loan size (borrowAmount + any borrowed interest)\r\n            // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\r\n            // loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\r\n            // collateralTokenReceived: total collateralToken deposit\r\n        bytes calldata loanDataBytes)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns (uint256 newPrincipal, uint256 newCollateral)\r\n    {\r\n        require(msg.value == 0 || loanDataBytes.length != 0, \"loanDataBytes required with ether\");\r\n\r\n        // only callable by loan pools\r\n        require(loanPoolToUnderlying[msg.sender] != address(0), \"not authorized\");\r\n\r\n        LoanParams memory loanParamsLocal = loanParams[loanParamsId];\r\n        require(loanParamsLocal.id != 0, \"loanParams not exists\");\r\n\r\n        if (initialMargin == 0) {\r\n            require(isTorqueLoan, \"initialMargin == 0\");\r\n            initialMargin = loanParamsLocal.minInitialMargin;\r\n        }\r\n\r\n        // get required collateral\r\n        uint256 collateralAmountRequired = _getRequiredCollateral(\r\n            loanParamsLocal.loanToken,\r\n            loanParamsLocal.collateralToken,\r\n            sentValues[1],\r\n            initialMargin,\r\n            isTorqueLoan\r\n        );\r\n        require(collateralAmountRequired != 0, \"collateral is 0\");\r\n\r\n        return _borrowOrTrade(\r\n            loanParamsLocal,\r\n            loanId,\r\n            isTorqueLoan,\r\n            collateralAmountRequired,\r\n            initialMargin,\r\n            sentAddresses,\r\n            sentValues,\r\n            loanDataBytes\r\n        );\r\n    }\r\n\r\n    function setDelegatedManager(\r\n        bytes32 loanId,\r\n        address delegated,\r\n        bool toggle)\r\n        external\r\n    {\r\n        require(loans[loanId].borrower == msg.sender, \"unauthorized\");\r\n\r\n        _setDelegatedManager(\r\n            loanId,\r\n            msg.sender,\r\n            delegated,\r\n            toggle\r\n        );\r\n    }\r\n\r\n    function getEstimatedMarginExposure(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanTokenSent,\r\n        uint256 collateralTokenSent,\r\n        uint256 interestRate,\r\n        uint256 newPrincipal)\r\n        external\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        uint256 maxLoanTerm = 2419200; // 28 days\r\n\r\n        uint256 owedPerDay = newPrincipal\r\n            .mul(interestRate)\r\n            .div(DAYS_IN_A_YEAR * WEI_PERCENT_PRECISION);\r\n\r\n        uint256 interestAmountRequired = maxLoanTerm\r\n            .mul(owedPerDay)\r\n            .div(1 days);\r\n\r\n        value = _swapsExpectedReturn(\r\n            loanToken,\r\n            collateralToken,\r\n            loanTokenSent\r\n                .sub(interestAmountRequired)\r\n        );\r\n        if (value != 0) {\r\n            return collateralTokenSent\r\n                .add(value);\r\n        }\r\n    }\r\n\r\n    function getRequiredCollateral(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan)\r\n        public\r\n        view\r\n        returns (uint256 collateralAmountRequired)\r\n    {\r\n        if (marginAmount != 0) {\r\n            collateralAmountRequired = _getRequiredCollateral(\r\n                loanToken,\r\n                collateralToken,\r\n                newPrincipal,\r\n                marginAmount,\r\n                isTorqueLoan\r\n            );\r\n\r\n            uint256 feePercent = isTorqueLoan ?\r\n                borrowingFeePercent :\r\n                tradingFeePercent;\r\n            if (collateralAmountRequired != 0 && feePercent != 0) {\r\n                collateralAmountRequired = collateralAmountRequired\r\n                    .mul(WEI_PERCENT_PRECISION)\r\n                    .divCeil(\r\n                        WEI_PERCENT_PRECISION - feePercent // never will overflow\r\n                    );\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRequiredCollateralByParams(\r\n        bytes32 loanParamsId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        bool isTorqueLoan)\r\n        public\r\n        view\r\n        returns (uint256 collateralAmountRequired)\r\n    {\r\n        return getRequiredCollateral(\r\n            loanToken,\r\n            collateralToken,\r\n            newPrincipal,\r\n            loanParams[loanParamsId].minInitialMargin, // marginAmount\r\n            isTorqueLoan\r\n        );\r\n    }\r\n\r\n    function getBorrowAmount(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 collateralTokenAmount,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan)\r\n        public\r\n        view\r\n        returns (uint256 borrowAmount)\r\n    {\r\n        if (marginAmount != 0) {\r\n            if (isTorqueLoan) {\r\n                marginAmount = marginAmount\r\n                    .add(WEI_PERCENT_PRECISION); // adjust for over-collateralized loan\r\n            }\r\n\r\n            if (loanToken == collateralToken) {\r\n                borrowAmount = collateralTokenAmount\r\n                    .mul(WEI_PERCENT_PRECISION)\r\n                    .div(marginAmount);\r\n            } else {\r\n                (uint256 sourceToDestRate, uint256 sourceToDestPrecision) = IPriceFeeds(priceFeeds).queryRate(\r\n                    collateralToken,\r\n                    loanToken\r\n                );\r\n                if (sourceToDestPrecision != 0) {\r\n                    borrowAmount = collateralTokenAmount\r\n                        .mul(WEI_PERCENT_PRECISION)\r\n                        .mul(sourceToDestRate)\r\n                        .div(marginAmount)\r\n                        .div(sourceToDestPrecision);\r\n                }\r\n            }\r\n\r\n            uint256 feePercent = isTorqueLoan ?\r\n                borrowingFeePercent :\r\n                tradingFeePercent;\r\n            if (borrowAmount != 0 && feePercent != 0) {\r\n                borrowAmount = borrowAmount\r\n                    .mul(\r\n                        WEI_PERCENT_PRECISION - feePercent // never will overflow\r\n                    )\r\n                    .div(WEI_PERCENT_PRECISION);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBorrowAmountByParams(\r\n        bytes32 loanParamsId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 collateralTokenAmount,\r\n        bool isTorqueLoan)\r\n        public\r\n        view\r\n        returns (uint256 borrowAmount)\r\n    {\r\n        return getBorrowAmount(\r\n            loanToken,\r\n            collateralToken,\r\n            collateralTokenAmount,\r\n            loanParams[loanParamsId].minInitialMargin, // marginAmount\r\n            isTorqueLoan\r\n        );\r\n    }\r\n\r\n    function _borrowOrTrade(\r\n        LoanParams memory loanParamsLocal,\r\n        bytes32 loanId, // if 0, start a new loan\r\n        bool isTorqueLoan,\r\n        uint256 collateralAmountRequired,\r\n        uint256 initialMargin,\r\n        address[4] memory sentAddresses,\r\n            // lender: must match loan if loanId provided\r\n            // borrower: must match loan if loanId provided\r\n            // receiver: receiver of funds (address(0) assumes borrower address)\r\n            // manager: delegated manager of loan unless address(0)\r\n        uint256[5] memory sentValues,\r\n            // newRate: new loan interest rate\r\n            // newPrincipal: new loan size (borrowAmount + any borrowed interest)\r\n            // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\r\n            // loanTokenReceived: total loanToken deposit\r\n            // collateralTokenReceived: total collateralToken deposit\r\n        bytes memory loanDataBytes)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        require (loanParamsLocal.collateralToken != loanParamsLocal.loanToken, \"collateral/loan match\");\r\n        require (initialMargin >= loanParamsLocal.minInitialMargin, \"initialMargin too low\");\r\n\r\n        // maxLoanTerm == 0 indicates a Torqueloan and requres that torqueInterest != 0\r\n        require(loanParamsLocal.maxLoanTerm != 0 ||\r\n            sentValues[2] != 0, // torqueInterest\r\n            \"invalid interest\");\r\n\r\n        // initialize loan\r\n        Loan storage loanLocal = _initializeLoan(\r\n            loanParamsLocal,\r\n            loanId,\r\n            initialMargin,\r\n            sentAddresses,\r\n            sentValues\r\n        );\r\n\r\n        // get required interest\r\n        uint256 amount = _initializeInterest(\r\n            loanParamsLocal,\r\n            loanLocal,\r\n            sentValues[0], // newRate\r\n            sentValues[1], // newPrincipal,\r\n            sentValues[2]  // torqueInterest\r\n        );\r\n\r\n        // substract out interest from usable loanToken sent\r\n        sentValues[3] = sentValues[3]\r\n            .sub(amount);\r\n\r\n        if (isTorqueLoan) {\r\n            require(sentValues[3] == 0, \"surplus loan token\");\r\n\r\n            // fee based off required collateral (amount variable repurposed)\r\n            amount = _getBorrowingFee(collateralAmountRequired);\r\n            if (amount != 0) {\r\n                _payBorrowingFee(\r\n                    sentAddresses[1], // borrower\r\n                    loanLocal.id,\r\n                    loanParamsLocal.collateralToken,\r\n                    amount\r\n                );\r\n            }\r\n        } else {\r\n            amount = 0; // repurposed\r\n\r\n            // update collateral after trade\r\n            // sentValues[3] is repurposed to hold loanToCollateralSwapRate to avoid stack too deep error\r\n            uint256 receivedAmount;\r\n            (receivedAmount,,sentValues[3]) = _loanSwap(\r\n                loanId,\r\n                loanParamsLocal.loanToken,\r\n                loanParamsLocal.collateralToken,\r\n                sentAddresses[1], // borrower\r\n                sentValues[3], // loanTokenUsable (minSourceTokenAmount)\r\n                0, // maxSourceTokenAmount (0 means minSourceTokenAmount)\r\n                0, // requiredDestTokenAmount (enforces that all of loanTokenUsable is swapped)\r\n                false, // bypassFee\r\n                loanDataBytes\r\n            );\r\n            sentValues[4] = sentValues[4] // collateralTokenReceived\r\n                .add(receivedAmount);\r\n        }\r\n\r\n        // settle collateral\r\n        require(\r\n            _isCollateralSatisfied(\r\n                loanParamsLocal,\r\n                loanLocal,\r\n                initialMargin,\r\n                sentValues[4],\r\n                collateralAmountRequired,\r\n                amount // borrowingFee\r\n            ),\r\n            \"collateral insufficient\"\r\n        );\r\n\r\n        loanLocal.collateral = loanLocal.collateral\r\n            .add(sentValues[4])\r\n            .sub(amount); // borrowingFee\r\n\r\n        if (isTorqueLoan) {\r\n            // reclaiming varaible -> interestDuration\r\n            sentValues[2] = loanLocal.endTimestamp.sub(block.timestamp);\r\n        } else {\r\n            // reclaiming varaible -> entryLeverage = 100 / initialMargin\r\n            sentValues[2] = SafeMath.div(WEI_PRECISION * WEI_PERCENT_PRECISION, initialMargin);\r\n        }\r\n\r\n        _finalizeOpen(\r\n            loanParamsLocal,\r\n            loanLocal,\r\n            sentAddresses,\r\n            sentValues,\r\n            isTorqueLoan\r\n        );\r\n\r\n        return (sentValues[1], sentValues[4]); // newPrincipal, newCollateral\r\n    }\r\n\r\n    function _finalizeOpen(\r\n        LoanParams memory loanParamsLocal,\r\n        Loan storage loanLocal,\r\n        address[4] memory sentAddresses,\r\n        uint256[5] memory sentValues,\r\n        bool isTorqueLoan)\r\n        internal\r\n    {\r\n        (uint256 initialMargin, uint256 collateralToLoanRate) = IPriceFeeds(priceFeeds).getCurrentMargin(\r\n            loanParamsLocal.loanToken,\r\n            loanParamsLocal.collateralToken,\r\n            loanLocal.principal,\r\n            loanLocal.collateral\r\n        );\r\n        require(\r\n            initialMargin > loanParamsLocal.maintenanceMargin,\r\n            \"unhealthy position\"\r\n        );\r\n\r\n        if (loanLocal.startTimestamp == block.timestamp) {\r\n            loanLocal.startRate = collateralToLoanRate;\r\n        }\r\n\r\n        _emitOpeningEvents(\r\n            loanParamsLocal,\r\n            loanLocal,\r\n            sentAddresses,\r\n            sentValues,\r\n            collateralToLoanRate,\r\n            initialMargin,\r\n            isTorqueLoan\r\n        );\r\n    }\r\n\r\n    function _emitOpeningEvents(\r\n        LoanParams memory loanParamsLocal,\r\n        Loan memory loanLocal,\r\n        address[4] memory sentAddresses,\r\n        uint256[5] memory sentValues,\r\n        uint256 collateralToLoanRate,\r\n        uint256 margin,\r\n        bool isTorqueLoan)\r\n        internal\r\n    {\r\n        if (isTorqueLoan) {\r\n            emit Borrow(\r\n                sentAddresses[1],                               // user (borrower)\r\n                sentAddresses[0],                               // lender\r\n                loanLocal.id,                                   // loanId\r\n                loanParamsLocal.loanToken,                      // loanToken\r\n                loanParamsLocal.collateralToken,                // collateralToken\r\n                sentValues[1],                                  // newPrincipal\r\n                sentValues[4],                                  // newCollateral\r\n                sentValues[0],                                  // interestRate\r\n                sentValues[2],                                  // interestDuration\r\n                collateralToLoanRate,                           // collateralToLoanRate,\r\n                margin                                          // currentMargin\r\n            );\r\n        } else {\r\n            // currentLeverage = 100 / currentMargin\r\n            margin = SafeMath.div(WEI_PRECISION * WEI_PERCENT_PRECISION, margin);\r\n\r\n            emit Trade(\r\n                sentAddresses[1],                               // user (trader)\r\n                sentAddresses[0],                               // lender\r\n                loanLocal.id,                                   // loanId\r\n                loanParamsLocal.collateralToken,                // collateralToken\r\n                loanParamsLocal.loanToken,                      // loanToken\r\n                sentValues[4],                                  // positionSize\r\n                sentValues[1],                                  // borrowedAmount\r\n                sentValues[0],                                  // interestRate,\r\n                loanLocal.endTimestamp,                         // settlementDate\r\n                sentValues[3],                                  // entryPrice (loanToCollateralSwapRate)\r\n                sentValues[2],                                  // entryLeverage\r\n                margin                                          // currentLeverage\r\n            );\r\n        }\r\n    }\r\n\r\n    function _setDelegatedManager(\r\n        bytes32 loanId,\r\n        address delegator,\r\n        address delegated,\r\n        bool toggle)\r\n        internal\r\n    {\r\n        delegatedManagers[loanId][delegated] = toggle;\r\n\r\n        emit DelegatedManagerSet(\r\n            loanId,\r\n            delegator,\r\n            delegated,\r\n            toggle\r\n        );\r\n    }\r\n\r\n    function _isCollateralSatisfied(\r\n        LoanParams memory loanParamsLocal,\r\n        Loan memory loanLocal,\r\n        uint256 initialMargin,\r\n        uint256 newCollateral,\r\n        uint256 collateralAmountRequired,\r\n        uint256 borrowingFee)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // allow at most 2% under-collateralized\r\n        collateralAmountRequired = collateralAmountRequired\r\n            .mul(98 ether)\r\n            .div(100 ether)\r\n            .add(borrowingFee);\r\n\r\n        if (newCollateral < collateralAmountRequired) {\r\n            // check that existing collateral is sufficient coverage\r\n            if (loanLocal.collateral != 0) {\r\n                uint256 maxDrawdown = IPriceFeeds(priceFeeds).getMaxDrawdown(\r\n                    loanParamsLocal.loanToken,\r\n                    loanParamsLocal.collateralToken,\r\n                    loanLocal.principal,\r\n                    loanLocal.collateral,\r\n                    initialMargin\r\n                );\r\n                return newCollateral\r\n                    .add(maxDrawdown) >= collateralAmountRequired;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _initializeLoan(\r\n        LoanParams memory loanParamsLocal,\r\n        bytes32 loanId,\r\n        uint256 initialMargin,\r\n        address[4] memory sentAddresses,\r\n        uint256[5] memory sentValues)\r\n        internal\r\n        returns (Loan storage sloanLocal)\r\n    {\r\n        require(loanParamsLocal.active, \"loanParams disabled\");\r\n\r\n        address lender = sentAddresses[0];\r\n        address borrower = sentAddresses[1];\r\n        address manager = sentAddresses[3];\r\n        uint256 newPrincipal = sentValues[1];\r\n\r\n        if (loanId == 0) {\r\n            loanId = keccak256(abi.encodePacked(\r\n                loanParamsLocal.id,\r\n                lender,\r\n                borrower,\r\n                block.timestamp\r\n            ));\r\n\r\n            sloanLocal = loans[loanId];\r\n            require(sloanLocal.id == 0, \"loan exists\");\r\n\r\n            sloanLocal.id = loanId;\r\n            sloanLocal.loanParamsId = loanParamsLocal.id;\r\n            sloanLocal.principal = newPrincipal;\r\n            sloanLocal.startTimestamp = block.timestamp;\r\n            sloanLocal.startMargin = initialMargin;\r\n            sloanLocal.borrower = borrower;\r\n            sloanLocal.lender = lender;\r\n            sloanLocal.active = true;\r\n            //sloanLocal.pendingTradesId = 0;\r\n            //sloanLocal.collateral = 0; // calculated later\r\n            //sloanLocal.endTimestamp = 0; // calculated later\r\n            //sloanLocal.startRate = 0; // queried later\r\n\r\n            activeLoansSet.addBytes32(loanId);\r\n            lenderLoanSets[lender].addBytes32(loanId);\r\n            borrowerLoanSets[borrower].addBytes32(loanId);\r\n        } else {\r\n            sloanLocal = loans[loanId];\r\n            require(sloanLocal.active && block.timestamp < sloanLocal.endTimestamp, \"loan has ended\");\r\n            require(sloanLocal.borrower == borrower, \"borrower mismatch\");\r\n            require(sloanLocal.lender == lender, \"lender mismatch\");\r\n            require(sloanLocal.loanParamsId == loanParamsLocal.id, \"loanParams mismatch\");\r\n\r\n            sloanLocal.principal = sloanLocal.principal\r\n                .add(newPrincipal);\r\n        }\r\n\r\n        if (manager != address(0)) {\r\n            _setDelegatedManager(\r\n                loanId,\r\n                borrower,\r\n                manager,\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    function _initializeInterest(\r\n        LoanParams memory loanParamsLocal,\r\n        Loan storage loanLocal,\r\n        uint256 newRate,\r\n        uint256 newPrincipal,\r\n        uint256 torqueInterest) // ignored for fixed-term loans\r\n        internal\r\n        returns (uint256 interestAmountRequired)\r\n    {\r\n        // pay outstanding interest to lender\r\n        _payInterest(\r\n            loanLocal.lender,\r\n            loanParamsLocal.loanToken\r\n        );\r\n\r\n        LoanInterest storage loanInterestLocal = loanInterest[loanLocal.id];\r\n        LenderInterest storage lenderInterestLocal = lenderInterest[loanLocal.lender][loanParamsLocal.loanToken];\r\n\r\n        uint256 maxLoanTerm = loanParamsLocal.maxLoanTerm;\r\n\r\n        _settleFeeRewardForInterestExpense(\r\n            loanInterestLocal,\r\n            loanLocal.id,\r\n            loanParamsLocal.loanToken,\r\n            loanLocal.borrower,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 previousDepositRemaining;\r\n        if (maxLoanTerm == 0 && loanLocal.endTimestamp != 0) {\r\n            previousDepositRemaining = loanLocal.endTimestamp\r\n                .sub(block.timestamp) // block.timestamp < endTimestamp was confirmed earlier\r\n                .mul(loanInterestLocal.owedPerDay)\r\n                .div(1 days);\r\n        }\r\n\r\n        uint256 owedPerDay = newPrincipal\r\n            .mul(newRate)\r\n            .div(DAYS_IN_A_YEAR * WEI_PERCENT_PRECISION);\r\n\r\n        // update stored owedPerDay\r\n        loanInterestLocal.owedPerDay = loanInterestLocal.owedPerDay\r\n            .add(owedPerDay);\r\n        lenderInterestLocal.owedPerDay = lenderInterestLocal.owedPerDay\r\n            .add(owedPerDay);\r\n\r\n        if (maxLoanTerm == 0) {\r\n            // indefinite-term (Torque) loan\r\n\r\n            // torqueInterest != 0 was confirmed earlier\r\n            loanLocal.endTimestamp = torqueInterest\r\n                .add(previousDepositRemaining)\r\n                .mul(1 days)\r\n                .div(loanInterestLocal.owedPerDay)\r\n                .add(block.timestamp);\r\n\r\n            maxLoanTerm = loanLocal.endTimestamp\r\n                .sub(block.timestamp);\r\n\r\n            // loan term has to at least be greater than one hour\r\n            require(maxLoanTerm > 1 hours, \"loan too short\");\r\n\r\n            interestAmountRequired = torqueInterest;\r\n        } else {\r\n            // fixed-term loan\r\n\r\n            if (loanLocal.endTimestamp == 0) {\r\n                loanLocal.endTimestamp = block.timestamp\r\n                    .add(maxLoanTerm);\r\n            }\r\n\r\n            interestAmountRequired = loanLocal.endTimestamp\r\n                .sub(block.timestamp)\r\n                .mul(owedPerDay)\r\n                .div(1 days);\r\n        }\r\n\r\n        loanInterestLocal.depositTotal = loanInterestLocal.depositTotal\r\n            .add(interestAmountRequired);\r\n\r\n        // update remaining lender interest values\r\n        lenderInterestLocal.principalTotal = lenderInterestLocal.principalTotal\r\n            .add(newPrincipal);\r\n        lenderInterestLocal.owedTotal = lenderInterestLocal.owedTotal\r\n            .add(interestAmountRequired);\r\n    }\r\n\r\n    function _getRequiredCollateral(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan)\r\n        internal\r\n        view\r\n        returns (uint256 collateralTokenAmount)\r\n    {\r\n        if (loanToken == collateralToken) {\r\n            collateralTokenAmount = newPrincipal\r\n                .mul(marginAmount)\r\n                .divCeil(WEI_PERCENT_PRECISION);\r\n        } else {\r\n            (uint256 sourceToDestRate, uint256 sourceToDestPrecision) = IPriceFeeds(priceFeeds).queryRate(\r\n                collateralToken,\r\n                loanToken\r\n            );\r\n            if (sourceToDestRate != 0) {\r\n                collateralTokenAmount = newPrincipal\r\n                    .mul(sourceToDestPrecision)\r\n                    .mul(marginAmount)\r\n                    .divCeil(sourceToDestRate * WEI_PERCENT_PRECISION);\r\n            }\r\n        }\r\n\r\n        if (isTorqueLoan && collateralTokenAmount != 0) {\r\n            collateralTokenAmount = collateralTokenAmount\r\n                .mul(WEI_PERCENT_PRECISION)\r\n                .divCeil(marginAmount)\r\n                .add(collateralTokenAmount);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"DelegatedManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"LoanSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBorrowingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayLendingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryLeverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLeverage\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultWithdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isTorqueLoan\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"initialMargin\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"sentAddresses\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[5]\",\"name\":\"sentValues\",\"type\":\"uint256[5]\"},{\"internalType\":\"bytes\",\"name\":\"loanDataBytes\",\"type\":\"bytes\"}],\"name\":\"borrowOrTradeFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCollateral\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTorqueLoan\",\"type\":\"bool\"}],\"name\":\"getBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTorqueLoan\",\"type\":\"bool\"}],\"name\":\"getBorrowAmountByParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrincipal\",\"type\":\"uint256\"}],\"name\":\"getEstimatedMarginExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTorqueLoan\",\"type\":\"bool\"}],\"name\":\"getRequiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountRequired\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTorqueLoan\",\"type\":\"bool\"}],\"name\":\"getRequiredCollateralByParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountRequired\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegated\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setDelegatedManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBufferPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vbzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWethERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanOpenings","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a16aface1f006e50a4e3b633b7eaec1ccf673859140e7a2d44a78ab99192affa"}]}