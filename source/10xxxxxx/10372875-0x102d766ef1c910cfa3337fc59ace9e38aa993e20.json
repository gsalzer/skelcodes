{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.8;\r\n\r\n\r\nlibrary Math {\r\n\r\n    // return a + b\r\n    function add(uint256 a, uint256 b) public pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"add overflow\");\r\n        return c;\r\n    }\r\n\r\n    // return a - b\r\n    function sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n        require(b <= a, \"sub underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    // return a * b\r\n    function mul(uint256 a, uint256 b) public pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n        return c;\r\n    }\r\n\r\n    // return a / b\r\n    function div(uint256 a, uint256 b) public pure returns (uint256) {\r\n        require(b != 0, \"div zero\");\r\n        return a / b;\r\n    }\r\n\r\n    // return the greatest uint256 less than or equal to the square root of a\r\n    function sqrt(uint256 a) public pure returns (uint256) {\r\n        uint256 result = 0;\r\n        uint256 bit = 1 << 254; // the second to top bit\r\n        while (bit > a) {\r\n            bit >>= 2;\r\n        }\r\n        while (bit != 0) {\r\n            uint256 sum = result + bit;\r\n            result >>= 1;\r\n            if (a >= sum) {\r\n                a -= sum;\r\n                result += bit;\r\n            }\r\n            bit >>= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\ninterface Erc20 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Exchange {\r\n    using Math for uint256;\r\n\r\n    address public token;\r\n    uint256 private maxAmount = 5*10**24;\r\n\r\n    event Buy(address _buyer, uint256 _wei);\r\n\r\n    event Sell(address _seller, uint256 _wei);\r\n\r\n    constructor(address _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    // any unknown function will be interpreted as purchase\r\n    fallback() external payable {\r\n        buy();\r\n    }\r\n\r\n    // incoming eth will be used for purchase\r\n    receive() external payable {\r\n        buy();\r\n    }\r\n\r\n    /// @notice purchases tokens using all incoming eth; reverts if there is not enough tokens,\r\n    /// or balance of the exchange is greater than 5*10^24 tokens\r\n    function buy() public payable {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        uint256 tokensAfter = v(tokensBefore, true, msg.value);\r\n        Erc20(token).transfer(msg.sender, tokensBefore.sub(tokensAfter));\r\n        emit Buy(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @dev call token.approve(this, _tokens) before this\r\n    /// @notice sells tokens for eth; if there is not enough eth in the exchange,\r\n    /// or amount of tokens is too big, only appropriate amount of tokens will be used for sale;\r\n    /// reverts if balance of the exchange is greater than 5*10^24 tokens\r\n    function sell(uint256 _tokens) public {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        uint256 tokensAfter = tokensBefore.add(_tokens);\r\n        if (tokensAfter > maxAmount) {\r\n            tokensAfter = maxAmount;\r\n            _tokens = tokensAfter.sub(tokensBefore);\r\n        }\r\n\r\n        uint256 sum = s(tokensBefore, tokensAfter);\r\n        if (sum > address(this).balance) {\r\n            sum = address(this).balance;\r\n            tokensAfter = v(tokensBefore, false, sum);\r\n            _tokens = tokensAfter.sub(tokensBefore);\r\n        }\r\n\r\n        Erc20(token).transferFrom(msg.sender, address(this), _tokens);\r\n        msg.sender.transfer(sum);\r\n        emit Sell(msg.sender, sum);\r\n    }\r\n\r\n    /// @notice feel free to clean from all spam tokens,\r\n    /// grab free tokens if there is too much of them\r\n    function clean(address _contract, uint256 _value) public {\r\n        if (_contract == token) {\r\n            uint256 tokens = Erc20(token).balanceOf(address(this));\r\n            require(tokens > maxAmount, \"no free tokens\");\r\n            require(_value <= tokens.sub(maxAmount), \"big _value\");\r\n        }\r\n        Erc20(_contract).transfer(msg.sender, _value);\r\n    }\r\n\r\n    /// @dev reverts if balance of the exchange is greater than 5*10^24 tokens\r\n    /// @return current price in wei/token*10^18\r\n    function price() public view returns (uint256) {\r\n        uint256 tokens = Erc20(token).balanceOf(address(this));\r\n        return Math.sub(10**18, tokens.div(5000000));\r\n    }\r\n\r\n    /// @dev reverts if there is not enough tokens,\r\n    /// or balance of the exchange is greater than 5*10^24 tokens\r\n    /// @return eth/10^18 required to buy provided number of tokens/10^18\r\n    function tokensToEthForPurchase(uint256 _tokens) public view returns (uint256) {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        uint256 tokensAfter = tokensBefore.sub(_tokens);\r\n        return s(tokensAfter, tokensBefore);\r\n    }\r\n\r\n    /// @dev reverts if there is not enough tokens,\r\n    /// or balance of the exchange is greater than 5*10^24 tokens\r\n    /// @return amount of tokens/10^18 to receive from purchase using provided amount of eth/10^18\r\n    function ethToTokensForPurchase(uint256 _eth) public view returns (uint256) {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        uint256 tokensAfter = v(tokensBefore, true, _eth);\r\n        return tokensBefore.sub(tokensAfter);\r\n    }\r\n\r\n    /// @dev reverts if balance of the exchange is greater than 5*10^24 tokens\r\n    /// @return eth/10^18 to receive from sale of provided number of tokens/10^18\r\n    function tokensToEthForSale(uint256 _tokens) public view returns (uint256) {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        uint256 tokensAfter = tokensBefore.add(_tokens);\r\n        if (tokensAfter > maxAmount) {\r\n            tokensAfter = maxAmount;\r\n        }\r\n\r\n        uint256 sum = s(tokensBefore, tokensAfter);\r\n        if (sum > address(this).balance) {\r\n            return address(this).balance;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /// @dev reverts if there is not enough eth in the exchange,\r\n    /// or amount of tokens is too big,\r\n    /// or balance of the exchange is greater than 5*10^24 tokens\r\n    /// @return amount of tokens/10^18 required to get desired amount of eth/10^18\r\n    function ethToTokensForSale(uint256 _eth) public view returns (uint256) {\r\n        uint256 tokensBefore = Erc20(token).balanceOf(address(this));\r\n        require(tokensBefore <= maxAmount, \"big balance\");\r\n        require(_eth <= address(this).balance, \"big _eth\");\r\n        uint256 tokensAfter = v(tokensBefore, false, _eth);\r\n        return tokensAfter.sub(tokensBefore);\r\n    }\r\n\r\n    // v - volume in tokens\r\n    // require vL <= vR <= 5*10^24, check this before!\r\n    // returns sum in wei between vL and vR, rounded to zero\r\n    function s(uint256 vL, uint256 vR) private pure returns (uint256) {\r\n        return vR.sub(vL).mul(Math.sub(10**25, vR).sub(vL)).div(10**25);\r\n    }\r\n\r\n    // v0 - current volume in tokens\r\n    // require v0 <= 5*10^24, check this before!\r\n    // isV0Right - bool, if true, returns v <= v0, else returns v >= v0\r\n    // s - sum in wei\r\n    // returns volume v in tokens, reverts if s is too big\r\n    // 0 <= v <= 5*10^24\r\n    function v(uint256 v0, bool isV0Right, uint256 s) private pure returns (uint256) {\r\n        uint256 d = 10**50;\r\n        if (isV0Right) {\r\n            d = d.add(s.mul(4*10**25)).sub(Math.sub(10**25, v0).mul(v0).mul(4));\r\n        } else {\r\n            d = d.sub(s.mul(4*10**25)).sub(Math.sub(10**25, v0).mul(v0).mul(4));\r\n        }\r\n        return Math.sub(5*10**24, d.sqrt().div(2));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"ethToTokensForPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"ethToTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthForPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Exchange","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b9076bb251285aa70e05d38fb1c061474aefdb7a","EVMVersion":"Default","Library":"Math:732703b9b933e7f8c2ede40f12416dd44e1a2e99","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1b2b5ae4151229e532094b35b79327bb78abe407e8edc0936647e22623acb34a"}]}