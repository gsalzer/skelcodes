{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title Node assignment contract\r\n */\r\ncontract NEST_NodeAssignment {\r\n    \r\n    using SafeMath for uint256;\r\n    IBMapping mappingContract;                              //  Mapping contract\r\n    IBNEST nestContract;                                    //  NEST contract\r\n    SuperMan supermanContract;                              //  NestNode contract\r\n    NEST_NodeSave nodeSave;                                 //  NestNode save contract\r\n    NEST_NodeAssignmentData nodeAssignmentData;             //  NestNode data assignment contract\r\n\r\n    /**\r\n    * @dev Initialization method\r\n    * @param map Voting contract address\r\n    */\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        supermanContract = SuperMan(address(mappingContract.checkAddress(\"nestNode\")));\r\n        nodeSave = NEST_NodeSave(address(mappingContract.checkAddress(\"nestNodeSave\")));\r\n        nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress(\"nodeAssignmentData\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param map Voting contract address\r\n    */\r\n    function changeMapping(address map) public onlyOwner{\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\"nest\")));\r\n        supermanContract = SuperMan(address(mappingContract.checkAddress(\"nestNode\")));\r\n        nodeSave = NEST_NodeSave(address(mappingContract.checkAddress(\"nestNodeSave\")));\r\n        nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress(\"nodeAssignmentData\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Deposit NEST token\r\n    * @param amount Amount of deposited NEST\r\n    */\r\n    function bookKeeping(uint256 amount) public {\r\n        require(amount > 0);\r\n        require(nestContract.transferFrom(address(msg.sender), address(nodeSave), amount));\r\n        nodeAssignmentData.addNest(amount);\r\n    }\r\n    \r\n    // NestNode receive and settlement\r\n    function nodeGet() public {\r\n        require(address(msg.sender) == address(tx.origin));\r\n        require(supermanContract.balanceOf(address(msg.sender)) > 0);\r\n        uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n        uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));\r\n        uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);\r\n        require(nestContract.balanceOf(address(nodeSave)) >= getAmount);\r\n        nodeSave.turnOut(getAmount,address(msg.sender));\r\n        nodeAssignmentData.addNodeLatestAmount(address(msg.sender),allAmount);\r\n    }\r\n    \r\n    // NestNode transfer settlement\r\n    function nodeCount(address fromAdd, address toAdd) public {\r\n        require(address(supermanContract) == address(msg.sender));\r\n        require(supermanContract.balanceOf(address(fromAdd)) > 0);\r\n        uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n        uint256 amountFrom = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(fromAdd)));\r\n        uint256 getAmountFrom = amountFrom.mul(supermanContract.balanceOf(address(fromAdd))).div(1500);\r\n        if (nestContract.balanceOf(address(nodeSave)) >= getAmountFrom) {\r\n            nodeSave.turnOut(getAmountFrom,address(fromAdd));\r\n            nodeAssignmentData.addNodeLatestAmount(address(fromAdd),allAmount);\r\n        }\r\n        uint256 amountTo = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(toAdd)));\r\n        uint256 getAmountTo = amountTo.mul(supermanContract.balanceOf(address(toAdd))).div(1500);\r\n        if (nestContract.balanceOf(address(nodeSave)) >= getAmountTo) {\r\n            nodeSave.turnOut(getAmountTo,address(toAdd));\r\n            nodeAssignmentData.addNodeLatestAmount(address(toAdd),allAmount);\r\n        }\r\n    }\r\n    \r\n    // NestNode receivable amount\r\n    function checkNodeNum() public view returns (uint256) {\r\n         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();\r\n         uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));\r\n         uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);\r\n         return getAmount; \r\n    }\r\n    \r\n    // Administrator only\r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\n// Mapping contract\r\ncontract IBMapping {\r\n    // Check address\r\n\tfunction checkAddress(string memory name) public view returns (address contractAddress);\r\n\t// Check whether an administrator\r\n\tfunction checkOwners(address man) public view returns (bool);\r\n}\r\n\r\n// NEST node save contract\r\ncontract NEST_NodeSave {\r\n    function turnOut(uint256 amount, address to) public returns(uint256);\r\n}\r\n\r\n// NestNode assignment data contract\r\ncontract NEST_NodeAssignmentData {\r\n    function addNest(uint256 amount) public;\r\n    function addNodeLatestAmount(address add ,uint256 amount) public;\r\n    function checkNodeAllAmount() public view returns (uint256);\r\n    function checkNodeLatestAmount(address add) public view returns (uint256);\r\n}\r\n\r\n// NestNode contract\r\ninterface SuperMan {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// NEST contract\r\ncontract IBNEST {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n    function transfer( address to, uint256 value) external;\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"nodeGet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bookKeeping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAdd\",\"type\":\"address\"},{\"name\":\"toAdd\",\"type\":\"address\"}],\"name\":\"nodeCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkNodeNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"map\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"NEST_NodeAssignment","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://79ffbb4077cc1933d646e26e5dba5bb17e0316398063d90dd5eadd491f2efddc"}]}