{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/AcexDeFi.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract TetherToken {\r\n    function transfer(address _to, uint _value) public {}\r\n    function transferFrom(address _from, address _to, uint _value) public {}\r\n}\r\n\r\nlibrary Lending {\r\n    \r\n    /*\r\n     * 4 stages:\r\n     * \r\n     * Funding Stage: Before \"startTime\"\r\n     * Lending Stage: Between \"startTime\" and \"startTime + duration\"\r\n     * Processing Stage: Between \"startTime + duration\" and \"startTime + duration + 3 days\"\r\n     * Redeem Stage: After \"startTime + duration + 3 days\"\r\n     *\r\n     * --- Funding --- | --- Lending --- | --- Processing --- | --- Redeem ---\r\n     *            startTime\r\n     *                 |     duration    |       3 days       |\r\n     *\r\n     */\r\n    \r\n    struct Round {\r\n        uint256 startTime;\r\n        uint256 duration;\r\n        uint256 apr; // in thousands (80 for 8%, 100 for 10%)\r\n        uint256 softCap; // 5,000 USDT\r\n        uint256 hardCap; // 1,000,000 USDT\r\n        uint256 personalCap; // 2,000 USDT\r\n        \r\n        uint256 totalLendingAmount;\r\n        bool withdrawn;\r\n        bool disabled;\r\n    }\r\n    \r\n    struct PersonalRound {\r\n        Round round;\r\n        \r\n        uint256 lendingAmount;\r\n        bool redeemed;\r\n    }\r\n}\r\n\r\ncontract AcexDeFi is\r\n    Ownable,\r\n    ReentrancyGuard\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    address private _usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // Mainnet USDT\r\n    TetherToken private _usdtContract = TetherToken(_usdtAddress);\r\n    uint256 public _minAmount = 0;\r\n    uint256 public _processPeriod = 3 days;\r\n    \r\n    Lending.Round[] private _rounds;\r\n    mapping (uint256 => mapping (address => uint256)) private _lendingAmounts;\r\n    mapping (uint256 => mapping (address => bool)) private _redeemed;\r\n    \r\n    event Lend (\r\n        address indexed lender,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n    \r\n    event Redeem (\r\n        address indexed lender,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n    \r\n    function addRound (\r\n        uint256 startTime,\r\n        uint256 duration,\r\n        uint256 apr,\r\n        uint256 softCap,\r\n        uint256 hardCap,\r\n        uint256 personalCap\r\n    )\r\n        public\r\n        onlyOwner \r\n    {\r\n        _rounds.push(Lending.Round(\r\n            startTime,\r\n            duration,\r\n            apr,\r\n            softCap,\r\n            hardCap,\r\n            personalCap,\r\n            0,\r\n            false,\r\n            false\r\n        ));\r\n    }\r\n    \r\n    function ownerUpdateMinAmount(uint256 minAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _minAmount = minAmount;\r\n    }\r\n    \r\n    function ownerUpdateProcessPeriod(uint256 processPeriod)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _processPeriod = processPeriod;\r\n    }\r\n    \r\n    function ownerWithdrawRound(uint256 index)\r\n        public\r\n        onlyOwner\r\n    {\r\n        Lending.Round storage round = _rounds[index];\r\n        \r\n        // Check round withdrawn\r\n        require(!round.withdrawn, \"ACEX DeFi: Round already withdrawn\");\r\n        \r\n        // Check current time (after startTime)\r\n        require(now > round.startTime, \"ACEX DeFi: Cannot redeem in funding phase.\");\r\n        \r\n        // Check soft cap\r\n        require(round.totalLendingAmount >= round.softCap, \"ACEX DeFi: Cannot redeem for failed round (lower than SoftCap).\");\r\n        \r\n        round.withdrawn = true;\r\n        _usdtContract.transfer(msg.sender, round.totalLendingAmount);\r\n    }\r\n    \r\n    function ownerDisableRound(uint256 index)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _rounds[index].disabled = true;\r\n    }\r\n    \r\n    // Safety method in case user sends in ETH\r\n    function ownerWithdrawAllETH()\r\n        public\r\n        onlyOwner\r\n    {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function getRounds()\r\n        public\r\n        view\r\n        returns (Lending.Round[] memory rounds)\r\n    {\r\n        return _rounds;\r\n    }\r\n    \r\n    function getPersonalRounds()\r\n        public\r\n        view\r\n        returns (Lending.PersonalRound[] memory rounds)\r\n    {\r\n        rounds = new Lending.PersonalRound[](_rounds.length);\r\n        \r\n        for(uint i = 0; i < _rounds.length; i++) {\r\n            rounds[i].round = _rounds[i];\r\n            rounds[i].lendingAmount = _lendingAmounts[i][msg.sender];\r\n            rounds[i].redeemed = _redeemed[i][msg.sender];\r\n        }\r\n        \r\n        return rounds;\r\n    }\r\n    \r\n    function lend (\r\n        uint256 index,\r\n        uint256 amount\r\n    )\r\n        public\r\n        nonReentrant\r\n    {\r\n        Lending.Round storage round = _rounds[index];\r\n        \r\n        // Check if round is disabled\r\n        require(!round.disabled, \"ACEX DeFi: Round is disabled.\");\r\n        \r\n        // Check current time (funding phase)\r\n        require(now < round.startTime, \"ACEX DeFi: Funding phase has passed.\");\r\n        \r\n        // Check minimum amount\r\n        require(amount > _minAmount, \"ACEX DeFi: Amount too low\");\r\n        \r\n        // Check personal cap\r\n        uint256 personalLendingAmount = _lendingAmounts[index][msg.sender].add(amount);\r\n        require(personalLendingAmount <= round.personalCap, \"ACEX DeFi: Exceeds personal cap.\");\r\n        \r\n        // Check hard cap\r\n        uint256 totalLendingAmount = round.totalLendingAmount.add(amount);\r\n        require(totalLendingAmount <= round.hardCap, \"ACEX DeFi: Exceeds round hard cap.\");\r\n        \r\n        _usdtContract.transferFrom(msg.sender, address(this), amount);\r\n        _lendingAmounts[index][msg.sender] = personalLendingAmount;\r\n        round.totalLendingAmount = totalLendingAmount;\r\n        \r\n        emit Lend(msg.sender, amount, index);\r\n    }\r\n    \r\n    function redeem (\r\n        uint256 index\r\n    )\r\n        public\r\n        nonReentrant\r\n    {\r\n        Lending.Round storage round = _rounds[index];\r\n        \r\n        // Check if round is disabled\r\n        require(!round.disabled, \"ACEX DeFi: Round is disabled.\");\r\n        \r\n        // Check current time (after startTime)\r\n        require(now > round.startTime, \"ACEX DeFi: Cannot redeem in funding phase.\");\r\n        \r\n        // Check if user has redeemed\r\n        require(!_redeemed[index][msg.sender], \"ACEX DeFi: Already redeemed.\");\r\n        \r\n        if (round.totalLendingAmount < round.softCap) {\r\n            // Did not reach softCap, users can redeem after \"startTime\"\r\n            \r\n            // Pay back to user\r\n            uint256 originalAmount = _lendingAmounts[index][msg.sender];\r\n            \r\n            _usdtContract.transfer(msg.sender, originalAmount);\r\n            _redeemed[index][msg.sender] = true;\r\n            emit Redeem(msg.sender, originalAmount, index);\r\n        } else {\r\n            // Reached softCap, users can redeem \"amount + interest\" after \"startTime + duration + 3 days\"\r\n            \r\n            // Check current time (redeem phase)\r\n            require(now > round.startTime.add(round.duration).add(_processPeriod), \"ACEX DeFi: Not redeem phase yet.\");\r\n            \r\n            uint256 originalAmount = _lendingAmounts[index][msg.sender];\r\n            \r\n            // Interest = original * (apr * duration / 1 year in seconds)\r\n            uint256 interestAmount = originalAmount.mul(round.apr).mul(round.duration).div(1000).div(365 days);\r\n            uint256 totalAmount = originalAmount + interestAmount;\r\n            \r\n            _usdtContract.transfer(msg.sender, totalAmount);\r\n            _redeemed[index][msg.sender] = true;\r\n            emit Redeem(msg.sender, totalAmount, index);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_processPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalCap\",\"type\":\"uint256\"}],\"name\":\"addRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPersonalRounds\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"internalType\":\"struct Lending.Round\",\"name\":\"round\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"internalType\":\"struct Lending.PersonalRound[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"internalType\":\"struct Lending.Round[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ownerDisableRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processPeriod\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateProcessPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AcexDeFi","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://708962e3f8ee72b7528498182b366068a2f4c1ebc60bb6ab47b53d4157b5f42d"}]}