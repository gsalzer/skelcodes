{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20FeeProxy\r\n * @notice This contract performs an ERC20 token transfer, with a Fee sent to a third address and stores a reference\r\n */\r\ncontract ERC20FeeProxy {\r\n  // Event to declare a transfer with a reference\r\n  event TransferWithReferenceAndFee(\r\n    address tokenAddress,\r\n    address to,\r\n    uint256 amount,\r\n    bytes indexed paymentReference,\r\n    uint256 feeAmount,\r\n    address feeAddress\r\n  );\r\n\r\n  // Fallback function returns funds to the sender\r\n  function() external payable {\r\n    revert(\"not payable fallback\");\r\n  }\r\n\r\n  /**\r\n    * @notice Performs a ERC20 token transfer with a reference and a transfer to a second address for the payment of a fee\r\n    * @param _tokenAddress Address of the ERC20 token smart contract\r\n    * @param _to Transfer recipient\r\n    * @param _amount Amount to transfer\r\n    * @param _paymentReference Reference of the payment related\r\n    * @param _feeAmount The amount of the payment fee\r\n    * @param _feeAddress The fee recipient\r\n    */\r\n  function transferFromWithReferenceAndFee(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _amount,\r\n    bytes calldata _paymentReference,\r\n    uint256 _feeAmount,\r\n    address _feeAddress\r\n    ) external\r\n    {\r\n    require(safeTransferFrom(_tokenAddress, _to, _amount), \"payment transferFrom() failed\");\r\n    if (_feeAmount > 0 && _feeAddress != address(0)) {\r\n      require(safeTransferFrom(_tokenAddress, _feeAddress, _feeAmount), \"fee transferFrom() failed\");\r\n    }\r\n    emit TransferWithReferenceAndFee(\r\n      _tokenAddress,\r\n      _to,\r\n      _amount,\r\n      _paymentReference,\r\n      _feeAmount,\r\n      _feeAddress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\r\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\r\n   * @return The return value of the ERC20 call, returning true for non-standard tokens\r\n   */\r\n  function safeTransferFrom(address _tokenAddress, address _to, uint256 _amount) internal returns (bool result) {\r\n    /* solium-disable security/no-inline-assembly */\r\n    // check if the address is a contract\r\n    assembly {\r\n      if iszero(extcodesize(_tokenAddress)) { revert(0, 0) }\r\n    }\r\n    \r\n    // solium-disable-next-line security/no-low-level-calls\r\n    (bool success, ) = _tokenAddress.call(abi.encodeWithSignature(\r\n      \"transferFrom(address,address,uint256)\",\r\n      msg.sender,\r\n      _to,\r\n      _amount\r\n    ));\r\n\r\n    assembly {\r\n        switch returndatasize()\r\n        case 0 { // not a standard erc20\r\n            result := 1\r\n        }\r\n        case 32 { // standard erc20\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n        }\r\n        default { // anything else, should revert for safety\r\n            revert(0, 0)\r\n        }\r\n    }\r\n\r\n    require(success, \"transferFrom() has been reverted\");\r\n\r\n    /* solium-enable security/no-inline-assembly */\r\n    return result;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"TransferWithReferenceAndFee\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"transferFromWithReferenceAndFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20FeeProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c6f132923802b0fe75b088b51751fdfa1deca9f04c82c451d7dddabd87426047"}]}