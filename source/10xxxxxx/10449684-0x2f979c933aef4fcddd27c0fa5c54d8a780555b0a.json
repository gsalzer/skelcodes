{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title Mining contract\r\n * @dev Mining pool + mining logic\r\n */\r\ncontract Nest_3_MiningContract {\r\n    \r\n    using address_make_payable for address;\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 _blockAttenuation = 2400000;                 //  Block decay time interval\r\n    uint256[10] _attenuationAmount;                      //  Mining decay amount\r\n    uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount\r\n    uint256 _firstBlockNum;                              //  Starting mining block\r\n    uint256 _latestMining;                               //  Latest offering block\r\n    Nest_3_VoteFactory _voteFactory;                     //  Voting contract\r\n    ERC20 _nestContract;                                 //  NEST contract address\r\n    address _offerFactoryAddress;                        //  Offering contract address\r\n    \r\n    // Current block, current block mining amount\r\n    event OreDrawingLog(uint256 nowBlock, uint256 blockAmount);\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory  voting contract address\r\n    */\r\n    constructor(address voteFactory) public {\r\n        _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  \r\n        _offerFactoryAddress = address(_voteFactory.checkAddress(\"nest.v3.offerMain\"));\r\n        _nestContract = ERC20(address(_voteFactory.checkAddress(\"nest\")));\r\n        // Initiate mining parameters\r\n        _firstBlockNum = 6236588;\r\n        _latestMining = block.number;\r\n        uint256 blockAmount = 400 ether;\r\n        for (uint256 i = 0; i < 10; i ++) {\r\n            _attenuationAmount[i] = blockAmount;\r\n            blockAmount = blockAmount.mul(8).div(10);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n        _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  \r\n        _offerFactoryAddress = address(_voteFactory.checkAddress(\"nest.v3.offerMain\"));\r\n        _nestContract = ERC20(address(_voteFactory.checkAddress(\"nest\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Offering mining\r\n    * @return Current block mining amount\r\n    */\r\n    function oreDrawing() public returns (uint256) {\r\n        require(address(msg.sender) == _offerFactoryAddress, \"No authority\");\r\n        //  Update mining amount list\r\n        uint256 miningAmount = changeBlockAmountList();\r\n        //  Transfer NEST\r\n        if (_nestContract.balanceOf(address(this)) < miningAmount){\r\n            miningAmount = _nestContract.balanceOf(address(this));\r\n        }\r\n        if (miningAmount > 0) {\r\n            _nestContract.transfer(address(msg.sender), miningAmount);\r\n            emit OreDrawingLog(block.number,miningAmount);\r\n        }\r\n        return miningAmount;\r\n    }\r\n    \r\n    /**\r\n    * @dev Update mining amount list\r\n    */\r\n    function changeBlockAmountList() private returns (uint256) {\r\n        uint256 createBlock = _firstBlockNum;\r\n        uint256 recentlyUsedBlock = _latestMining;\r\n        uint256 attenuationPointNow = block.number.sub(createBlock).div(_blockAttenuation);\r\n        uint256 miningAmount = 0;\r\n        uint256 attenuation;\r\n        if (attenuationPointNow > 9) {\r\n            attenuation = _afterMiningAmount;\r\n        } else {\r\n            attenuation = _attenuationAmount[attenuationPointNow];\r\n        }\r\n        miningAmount = attenuation.mul(block.number.sub(recentlyUsedBlock));\r\n        _latestMining = block.number;\r\n        return miningAmount;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer all NEST\r\n    * @param target Transfer target address\r\n    */\r\n    function takeOutNest(address target) public onlyOwner {\r\n        _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));\r\n    }\r\n\r\n    // Check block decay time interval\r\n    function checkBlockAttenuation() public view returns(uint256) {\r\n        return _blockAttenuation;\r\n    }\r\n    \r\n    // Check latest offering block\r\n    function checkLatestMining() public view returns(uint256) {\r\n        return _latestMining;\r\n    }\r\n    \r\n    // Check mining amount decay\r\n    function checkAttenuationAmount(uint256 num) public view returns(uint256) {\r\n        return _attenuationAmount[num];\r\n    }\r\n    \r\n    // Check NEST balance\r\n    function checkNestBalance() public view returns(uint256) {\r\n        return _nestContract.balanceOf(address(this));\r\n    }\r\n    \r\n    // Modify block decay time interval\r\n    function changeBlockAttenuation(uint256 blockNum) public onlyOwner {\r\n        require(blockNum > 0);\r\n        _blockAttenuation = blockNum;\r\n    }\r\n    \r\n    // Modify mining amount decay\r\n    function changeAttenuationAmount(uint256 firstAmount, uint256 top, uint256 bottom) public onlyOwner {\r\n        uint256 blockAmount = firstAmount;\r\n        for (uint256 i = 0; i < 10; i ++) {\r\n            _attenuationAmount[i] = blockAmount;\r\n            blockAmount = blockAmount.mul(top).div(bottom);\r\n        }\r\n    }\r\n    \r\n    // Administrator only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Voting contract\r\ninterface Nest_3_VoteFactory {\r\n    // Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t// Check whether administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\n// EC20\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nowBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockAmount\",\"type\":\"uint256\"}],\"name\":\"OreDrawingLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bottom\",\"type\":\"uint256\"}],\"name\":\"changeAttenuationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"changeBlockAttenuation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"checkAttenuationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBlockAttenuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLatestMining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkNestBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oreDrawing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"takeOutNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nest_3_MiningContract","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://28edb0240734441bf8d3bdef66077bf3438b43888baca7fd03161274ede913cf"}]}