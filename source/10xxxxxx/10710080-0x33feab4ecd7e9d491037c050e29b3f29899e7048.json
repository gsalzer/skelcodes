{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        if (to == address(0)) { // burn\r\n            totalSupply = totalSupply.sub(value);\r\n        }\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract UpgradableProduct {\r\n    address public impl;\r\n\r\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\r\n\r\n    constructor() public {\r\n        impl = msg.sender;\r\n    }\r\n\r\n    modifier requireImpl() {\r\n        require(msg.sender == impl, 'FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function upgradeImpl(address _newImpl) public requireImpl {\r\n        require(_newImpl != address(0), 'INVALID_ADDRESS');\r\n        require(_newImpl != impl, 'NO_CHANGE');\r\n        address lastImpl = impl;\r\n        impl = _newImpl;\r\n        emit ImplChanged(lastImpl, _newImpl);\r\n    }\r\n}\r\n\r\ncontract UpgradableGovernance {\r\n    address public governor;\r\n\r\n    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\r\n\r\n    constructor() public {\r\n        governor = msg.sender;\r\n    }\r\n\r\n    modifier requireGovernor() {\r\n        require(msg.sender == governor, 'FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\r\n        require(_newGovernor != address(0), 'INVALID_ADDRESS');\r\n        require(_newGovernor != governor, 'NO_CHANGE');\r\n        address lastGovernor = governor;\r\n        governor = _newGovernor;\r\n        emit GovernorChanged(lastGovernor, _newGovernor);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n\tThe Objective of MintToken is to implement a decentralized staking mechanism, which calculates users' share\r\n\tby accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\r\n\r\n        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\r\n       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\r\n       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\r\n\r\n*/\r\ncontract MintToken is ERC20Token, UpgradableProduct, UpgradableGovernance {\r\n    using SafeMath for uint;\r\n\r\n    uint public mintCumulation;\r\n\r\n    struct Production {\r\n        uint amount;        \t// how many tokens could be produced on block basis\r\n        uint total;\t\t\t\t// total produced tokens\r\n        uint block;\t\t        // last updated block number\r\n    }\r\n\r\n    Production public grossProduct = Production(0, 0, 0);\r\n\r\n    struct Productivity {\r\n        uint product;           // user's productivity\r\n        uint total;             // total productivity\r\n        uint block;             // record's block number\r\n        uint user;              // accumulated products\r\n        uint global;            // global accumulated products\r\n        uint gross;             // global gross products\r\n    }\r\n\r\n    Productivity public global;\r\n    mapping(address => Productivity)    public users;\r\n\r\n    event AmountPerBlockChanged\t(uint oldValue, uint newValue);\r\n    event ProductivityIncreased\t(address indexed user, uint value);\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n\r\n    uint private unlocked = 1;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n\t// When calling _computeBlockProduct() it calculates the area of productivity * time since last time and accumulate it.\r\n    function _computeBlockProduct() private view returns (uint) {\r\n        uint elapsed = block.number.sub(grossProduct.block);\r\n        return grossProduct.amount.mul(elapsed);\r\n    }\r\n\r\n    // compute productivity returns total productivity of a user.\r\n    function _computeProductivity(Productivity memory user) private view returns (uint) {\r\n        uint blocks = block.number.sub(user.block);\r\n        return user.total.mul(blocks);\r\n    }\r\n\r\n    // update users' productivity by value with boolean value indicating increase  or decrease.\r\n    function _updateProductivity(Productivity storage user, uint value, bool increase) private {\r\n        user.product      = user.product.add(_computeProductivity(user));\r\n        global.product    = global.product.add(_computeProductivity(global));\r\n\r\n        require(global.product <= uint(-1), 'GLOBAL_PRODUCT_OVERFLOW');\r\n\r\n        user.block      = block.number;\r\n        global.block    = block.number;\r\n        if(increase) {\r\n            user.total   = user.total.add(value);\r\n            global.total = global.total.add(value);\r\n        }\r\n        else {\r\n            user.total   = user.total.sub(value);\r\n            global.total = global.total.sub(value);\r\n        }\r\n    }\r\n\r\n    // External function call\r\n    // This function adjust how many token will be produced by each block, eg:\r\n    // changeAmountPerBlock(100)\r\n    // will set the produce rate to 100/block.\r\n    function changeAmountPerBlock(uint value) external requireGovernor returns (bool) {\r\n        uint old = grossProduct.amount;\r\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\r\n\r\n        uint product                = _computeBlockProduct();\r\n        grossProduct.total          = grossProduct.total.add(product);\r\n        grossProduct.block          = block.number;\r\n        grossProduct.amount         = value;\r\n        require(grossProduct.total <= uint(-1), 'BLOCK_PRODUCT_OVERFLOW');\r\n\r\n        emit AmountPerBlockChanged(old, value);\r\n        return true;\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function increaseProductivity(address user, uint value) external requireImpl returns (bool) {\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n        Productivity storage product        = users[user];\r\n\r\n        if (product.block == 0) {\r\n            product.gross = grossProduct.total.add(_computeBlockProduct());\r\n        }\r\n        \r\n        _updateProductivity(product, value, true);\r\n        emit ProductivityIncreased(user, value);\r\n        return true;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function decreaseProductivity(address user, uint value) external requireImpl returns (bool) {\r\n        Productivity storage product = users[user];\r\n\r\n        require(value > 0 && product.total >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        _updateProductivity(product, value, false);\r\n        emit ProductivityDecreased(user, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function mint() external lock returns (uint) {\r\n        (uint gp, uint userProduct, uint globalProduct, uint amount) = _computeUserProduct();\r\n        require(amount > 0, 'NO_PRODUCTIVITY');\r\n        Productivity storage product = users[msg.sender];\r\n        product.gross   = gp;\r\n        product.user    = userProduct;\r\n        product.global  = globalProduct;\r\n\r\n        balanceOf[msg.sender]   = balanceOf[msg.sender].add(amount);\r\n        totalSupply             = totalSupply.add(amount);\r\n        mintCumulation          = mintCumulation.add(amount);\r\n\r\n        emit Transfer(address(0), msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many token he will be able to mint.\r\n    function _computeUserProduct() private view returns (uint gp, uint userProduct, uint globalProduct, uint amount) {\r\n        Productivity memory product    = users[msg.sender];\r\n\r\n        gp              = grossProduct.total.add(_computeBlockProduct());\r\n        userProduct     = product.product.add(_computeProductivity(product));\r\n        globalProduct   = global.product.add(_computeProductivity(global));\r\n\r\n        uint deltaBlockProduct  = gp.sub(product.gross);\r\n        uint numerator          = userProduct.sub(product.user);\r\n        uint denominator        = globalProduct.sub(product.global);\r\n\r\n        if (denominator > 0) {\r\n            amount = deltaBlockProduct.mul(numerator) / denominator;\r\n        }\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) external view returns (uint, uint) {\r\n        return (users[user].total, global.total);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function amountPerBlock() external view returns (uint) {\r\n        return grossProduct.amount;\r\n    }\r\n\r\n    // Returns how much a user could earn.\r\n    function take() external view returns (uint) {\r\n        (, , , uint amount) = _computeUserProduct();\r\n        return amount;\r\n    }\r\n\r\n    // Returns how much a user could earn plus the giving block number.\r\n    function takes() external view returns (uint, uint) {\r\n        (, , , uint amount) = _computeUserProduct();\r\n        return (amount, block.number);\r\n    }\r\n}\r\n\r\ncontract Dgas is MintToken {\r\n\r\n    constructor() UpgradableProduct() UpgradableGovernance() public {\r\n        name        = 'Demax Gas';\r\n        symbol      = 'DGAS';\r\n        decimals    = 18;\r\n        grossProduct.amount = 100 * (10 ** 18);\r\n        grossProduct.block  = block.number;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"AmountPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeAmountPerBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseProductivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gross\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grossProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseProductivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"upgradeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"upgradeImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gross\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Dgas","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91819ac6416a60ad84e778cfb881cc2c3ef91accb2df0f41a916bcfa8bbb3a1f"}]}