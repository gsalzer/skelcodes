{"status":"1","message":"OK","result":[{"SourceCode":"// File: solidity-common/contracts/interface/IERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ninterface IERC20 {\r\n    /**\r\n    * 可选方法\r\n    */\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * 必须方法\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: solidity-common/contracts/library/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * 算术操作\r\n */\r\nlibrary SafeMath {\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function wad() public pure returns (uint256) {\r\n        return WAD;\r\n    }\r\n\r\n    function ray() public pure returns (uint256) {\r\n        return RAY;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function sqrt(uint256 a) internal pure returns (uint256 b) {\r\n        if (a > 3) {\r\n            b = a;\r\n            uint256 x = a / 2 + 1;\r\n            while (x < b) {\r\n                b = x;\r\n                x = (a / x + x) / 2;\r\n            }\r\n        } else if (a != 0) {\r\n            b = 1;\r\n        }\r\n    }\r\n\r\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / WAD;\r\n    }\r\n\r\n    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / RAY;\r\n    }\r\n\r\n    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, b), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, WAD), b);\r\n    }\r\n\r\n    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, WAD), b / 2) / b;\r\n    }\r\n\r\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(mul(a, RAY), b);\r\n    }\r\n\r\n    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, RAY), b / 2) / b;\r\n    }\r\n\r\n    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = WAD;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = wmul(result, x);\r\n            }\r\n            x = wmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\r\n        uint256 result = RAY;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = rmul(result, x);\r\n            }\r\n            x = rmul(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: solidity-common/contracts/library/Array.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * 数组工具包\r\n */\r\nlibrary Array {\r\n    // 从字节数组array中删除指定的bytes32\r\n    function remove(bytes32[] storage array, bytes32 element) internal returns (bool) {\r\n        for (uint256 index = 0; index < array.length; index++) {\r\n            if (array[index] == element) {\r\n                delete array[index];\r\n                array[index] = array[array.length - 1];\r\n                array.length--;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 从地址数组array中删除指定的address\r\n    function remove(address[] storage array, address element) internal returns (bool) {\r\n        for (uint256 index = 0; index < array.length; index++) {\r\n            if (array[index] == element) {\r\n                delete array[index];\r\n                array[index] = array[array.length - 1];\r\n                array.length--;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: solidity-common/contracts/library/Roles.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * 多角色管理逻辑\r\n */\r\nlibrary Roles {\r\n    // 存储角色授权数据\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    // 增加一个不存在的地址\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    // 删除一个存在的地址\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    // 判断地址是否有权限\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: solidity-common/contracts/common/Ownable.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * 合约Owner机制\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\n// File: solidity-common/contracts/access/BlacklistedRole.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  由owner控制，具备黑名单的合约\r\n */\r\ncontract BlacklistedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using Array for address[];\r\n\r\n    Roles.Role private _blacklisteds;\r\n    address[] public blacklisteds;\r\n\r\n    constructor () internal {}\r\n\r\n    function _addBlacklisted(address account) internal {\r\n        _blacklisteds.add(account);\r\n        blacklisteds.push(account);\r\n        emit BlacklistedAdded(account);\r\n    }\r\n\r\n    function addBlacklisted(address account) public onlyOwner {\r\n        _addBlacklisted(account);\r\n    }\r\n\r\n    function addBlacklisted(address[] memory accounts) public onlyOwner {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _addBlacklisted(accounts[index]);\r\n        }\r\n    }\r\n\r\n    function _delBlacklisted(address account) internal {\r\n        _blacklisteds.remove(account);\r\n\r\n        if (blacklisteds.remove(account)) {\r\n            emit BlacklistedRemoved(account);\r\n        }\r\n    }\r\n\r\n    function delBlacklisted(address account) public onlyOwner {\r\n        _delBlacklisted(account);\r\n    }\r\n\r\n    function getBlacklistedsLength() public view returns (uint256) {\r\n        return blacklisteds.length;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklisteds.has(account);\r\n    }\r\n\r\n\r\n    modifier onlyBlacklisted() {\r\n        require(isBlacklisted(msg.sender), \"BlacklistedRole: caller does not have the blacklisted role\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotBlacklisted(address account) {\r\n        require(!isBlacklisted(account), \"BlacklistedRole: account has the blacklisted role\");\r\n        _;\r\n    }\r\n\r\n\r\n    event BlacklistedAdded(address indexed account);\r\n    event BlacklistedRemoved(address indexed account);\r\n}\r\n\r\n// File: solidity-common/contracts/common/DailyLimit.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * 代币每日转账额度控制机制\r\n */\r\ncontract DailyLimit is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => UserDailyLimit) public dailyLimits;      // 用户额度信息\r\n\r\n    struct UserDailyLimit {\r\n        uint256 spent;                                          // 今日已用额度\r\n        uint256 today;                                          // 今日开始时间\r\n        uint256 limit;                                          // 今日总共额度\r\n    }\r\n\r\n    constructor () internal {}\r\n\r\n    /**\r\n     * 查询用户每日额度信息\r\n     */\r\n    function getDailyLimit(address account) public view returns (uint256, uint256, uint256){\r\n        UserDailyLimit memory dailyLimit = dailyLimits[account];\r\n        return (dailyLimit.spent, dailyLimit.today, dailyLimit.limit);\r\n    }\r\n\r\n    /**\r\n     * 设置用户每日总共额度\r\n     */\r\n    function _setDailyLimit(address account, uint256 limit) internal {\r\n        require(account != address(0), \"DailyLimit: account is the zero address\");\r\n        require(limit != 0, \"DailyLimit: limit can not be zero\");\r\n\r\n        dailyLimits[account].limit = limit;\r\n    }\r\n\r\n    function setDailyLimit(address[] memory accounts, uint256[] memory limits) public onlyOwner {\r\n        require(accounts.length == limits.length, \"DailyLimit: accounts and limits length mismatched\");\r\n\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _setDailyLimit(accounts[index], limits[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 今日开始时间\r\n     */\r\n    function today() public view returns (uint256){\r\n        return now - (now % 1 days);\r\n    }\r\n\r\n    /**\r\n     * 是否小于限制\r\n     */\r\n    function isUnderLimit(address account, uint256 amount) internal returns (bool){\r\n        UserDailyLimit storage dailyLimit = dailyLimits[account];\r\n\r\n        if (today() > dailyLimit.today) {\r\n            dailyLimit.today = today();\r\n            dailyLimit.spent = 0;\r\n        }\r\n\r\n        // A).limit为0，不用做限制 B).limit非0，需满足限制\r\n        return (dailyLimit.limit == 0 || dailyLimit.spent.add(amount) <= dailyLimit.limit);\r\n    }\r\n\r\n\r\n    modifier onlyUnderLimit(address account, uint256 amount){\r\n        require(isUnderLimit(account, amount), \"DailyLimit: user's spent exceeds daily limit\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: solidity-common/contracts/access/PauserRole.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 由owner控制，具备可暂停的合约\r\n */\r\ncontract PauserRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using Array for address[];\r\n\r\n    Roles.Role private _pausers;\r\n    address[] public pausers;\r\n\r\n    constructor () internal {}\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        pausers.push(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyOwner {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function addPauser(address[] memory accounts) public onlyOwner {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _addPauser(accounts[index]);\r\n        }\r\n    }\r\n\r\n    function _delPauser(address account) internal {\r\n        _pausers.remove(account);\r\n\r\n        if (pausers.remove(account)) {\r\n            emit PauserRemoved(account);\r\n        }\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _delPauser(msg.sender);\r\n    }\r\n\r\n    function delPauser(address account) public onlyOwner {\r\n        _delPauser(account);\r\n    }\r\n\r\n    function getPausersLength() public view returns (uint256) {\r\n        return pausers.length;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the pauser role\");\r\n        _;\r\n    }\r\n\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n}\r\n\r\n// File: solidity-common/contracts/common/Pausable.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n/**\r\n * 紧急暂停机制\r\n */\r\ncontract Pausable is PauserRole {\r\n    bool private _paused;               // 系统暂停标识\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    // 暂停标识 true-禁用, false-启用\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    // 授权的访客在系统启用时，变更系统为禁用\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    // 授权的访客在系统禁用时，变更系统为启用\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    event Paused(address indexed pauser);\r\n    event Unpaused(address indexed pauser);\r\n}\r\n\r\n// File: solidity-common/contracts/erc20/ERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * ERC20全实现合约\r\n */\r\ncontract ERC20 is IERC20, BlacklistedRole, DailyLimit, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public whenNotPaused onlyNotBlacklisted(msg.sender) onlyNotBlacklisted(recipient) onlyUnderLimit(msg.sender, amount) returns (bool) {\r\n        dailyLimits[msg.sender].spent = dailyLimits[msg.sender].spent.add(amount);\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused onlyNotBlacklisted(msg.sender) onlyNotBlacklisted(sender) onlyNotBlacklisted(recipient) onlyUnderLimit(sender, amount) returns (bool) {\r\n        uint256 delta = _allowances[sender][msg.sender].sub(amount, \"ERC20: decreased allowance below zero\");\r\n        dailyLimits[sender].spent = dailyLimits[sender].spent.add(amount);\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, delta);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused onlyNotBlacklisted(msg.sender) onlyNotBlacklisted(spender) returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused onlyNotBlacklisted(msg.sender) onlyNotBlacklisted(spender) returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) whenNotPaused onlyNotBlacklisted(msg.sender) onlyNotBlacklisted(spender) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: solidity-common/contracts/access/WhitelistedRole.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  由owner控制，具备白名单的合约\r\n */\r\ncontract WhitelistedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using Array for address[];\r\n\r\n    Roles.Role private _whitelisteds;\r\n    address[] public whitelisteds;\r\n\r\n    constructor () internal {}\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        whitelisteds.push(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyOwner {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function addWhitelisted(address[] memory accounts) public onlyOwner {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _addWhitelisted(accounts[index]);\r\n        }\r\n    }\r\n\r\n    function _delWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n\r\n        if (whitelisteds.remove(account)) {\r\n            emit WhitelistedRemoved(account);\r\n        }\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _delWhitelisted(msg.sender);\r\n    }\r\n\r\n    function delWhitelisted(address account) public onlyOwner {\r\n        _delWhitelisted(account);\r\n    }\r\n\r\n    function getWhitelistedsLength() public view returns (uint256) {\r\n        return whitelisteds.length;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \"WhitelistedRole: caller does not have the whitelisted role\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisting(address account) {\r\n        require(isWhitelisted(account), \"WhitelistedRole: caller does not have the whitelisted role\");\r\n        _;\r\n    }\r\n\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n}\r\n\r\n// File: solidity-common/contracts/access/MinterRole.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  由owner控制，具备动态矿工的合约\r\n */\r\ncontract MinterRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using Array for address[];\r\n\r\n    Roles.Role private _minters;\r\n    address[] public minters;\r\n\r\n    constructor () internal {}\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        minters.push(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function addMinter(address[] memory accounts) public onlyOwner {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            _addMinter(accounts[index]);\r\n        }\r\n    }\r\n\r\n    function _delMinter(address account) internal {\r\n        _minters.remove(account);\r\n\r\n        if (minters.remove(account)) {\r\n            emit MinterRemoved(account);\r\n        }\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _delMinter(msg.sender);\r\n    }\r\n\r\n    function delMinter(address account) public onlyOwner {\r\n        _delMinter(account);\r\n    }\r\n\r\n    function getMintersLength() public view returns (uint256) {\r\n        return minters.length;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n}\r\n\r\n// File: contracts/interface/IBtswapFactory.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ninterface IBtswapFactory {\r\n    function FEE_RATE_DENOMINATOR() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function feeRateNumerator() external view returns (uint256);\r\n\r\n    function initCodeHash() external view returns (bytes32);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setRouter(address) external;\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setFeeRateNumerator(uint256) external;\r\n\r\n    function setInitCodeHash(bytes32) external;\r\n\r\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function getReserves(address factory, address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(address factory, uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(address factory, uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n}\r\n\r\n// File: contracts/interface/IBtswapPairToken.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ninterface IBtswapPairToken {\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function router() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address, address) external;\r\n\r\n    function price(address token) external view returns (uint256);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n}\r\n\r\n// File: contracts/interface/IBtswapRouter02.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ninterface IBtswapRouter02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function BT() external pure returns (address);\r\n\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function weth(address token) external view returns (uint256);\r\n\r\n    function onTransfer(address sender, address recipient) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/interface/IBtswapToken.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ninterface IBtswapToken {\r\n    function swap(address account, address input, uint256 amount, address output) external returns (bool);\r\n\r\n    function liquidity(address account, address pair) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/interface/IBtswapWhitelistedRole.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ninterface IBtswapWhitelistedRole {\r\n    function getWhitelistedsLength() external view returns (uint256);\r\n\r\n    function isWhitelisted(address) external view returns (bool);\r\n\r\n    function whitelisteds(uint256) external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/biz/BtswapToken.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BtswapToken is IBtswapToken, WhitelistedRole, MinterRole, ERC20 {\r\n    uint256 public constant MINT_DECAY_DURATION = 8409600;\r\n    uint256 public INITIAL_BLOCK_REWARD = SafeMath.wad().mul(56);\r\n    uint256 public PERCENTAGE_FOR_TAKER = SafeMath.wad().mul(60).div(100);\r\n    uint256 public PERCENTAGE_FOR_MAKER = SafeMath.wad().mul(30).div(100);\r\n    address public constant TAKER_ADDRESS = 0x0000000000000000000000000000000000000001;\r\n    address public constant MAKER_ADDRESS = 0x0000000000000000000000000000000000000002;\r\n    address public constant GROUP_ADDRESS = 0x0000000000000000000000000000000000000003;\r\n\r\n    IBtswapRouter02 private _router;\r\n\r\n    uint256 private _initMintBlock;\r\n    uint256 private _lastMintBlock;\r\n    mapping(address => uint256) private _weights;\r\n\r\n    Pool public taker;\r\n    Pool public maker;\r\n\r\n    struct Pool {\r\n        uint256 timestamp;\r\n        uint256 quantity;\r\n        uint256 deposit;\r\n        mapping(address => User) users;\r\n    }\r\n\r\n    struct User {\r\n        uint256 timestamp;\r\n        uint256 quantity;\r\n        uint256 deposit;\r\n        mapping(address => uint256) deposits;\r\n    }\r\n\r\n    constructor () public ERC20(\"BTswap Token\", \"BT\", 18) {\r\n        _setInitMintBlock(block.number);\r\n        _setLastMintBlock(block.number);\r\n        _mint(msg.sender, 50000000 * 1e18);\r\n    }\r\n\r\n\r\n    /**\r\n     * dao\r\n     */\r\n    function router() public view returns (IBtswapRouter02) {\r\n        return _router;\r\n    }\r\n\r\n    function setRouter(IBtswapRouter02 newRouter) public onlyOwner {\r\n        require(address(newRouter) != address(0), \"BtswapToken: new router is the zero address\");\r\n        _router = newRouter;\r\n    }\r\n\r\n    function initMintBlock() public view returns (uint256) {\r\n        return _initMintBlock;\r\n    }\r\n\r\n    function _setInitMintBlock(uint256 blockNumber) internal {\r\n        _initMintBlock = blockNumber;\r\n    }\r\n\r\n    function lastMintBlock() public view returns (uint256) {\r\n        return _lastMintBlock;\r\n    }\r\n\r\n    function _setLastMintBlock(uint256 blockNumber) internal {\r\n        _lastMintBlock = blockNumber;\r\n    }\r\n\r\n    function weightOf(address token) public view returns (uint256) {\r\n        uint256 _weight = _weights[token];\r\n\r\n        if (_weight > 0) {\r\n            return _weight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    function setWeight(address newToken, uint256 newWeight) public onlyOwner {\r\n        require(address(newToken) != address(0), \"BtswapToken: new token is the zero address\");\r\n        _weights[newToken] = newWeight;\r\n    }\r\n\r\n\r\n    /**\r\n     * miner\r\n     */\r\n    function phase(uint256 blockNumber) public view returns (uint256) {\r\n        uint256 _phase = 0;\r\n\r\n        if (blockNumber > initMintBlock()) {\r\n            _phase = (blockNumber.sub(initMintBlock()).sub(1)).div(MINT_DECAY_DURATION);\r\n        }\r\n\r\n        return _phase;\r\n    }\r\n\r\n    function phase() public view returns (uint256) {\r\n        return phase(block.number);\r\n    }\r\n\r\n    function reward(uint256 blockNumber) public view returns (uint256) {\r\n        uint256 _phase = phase(blockNumber);\r\n        if (_phase >= 10) {\r\n            return 0;\r\n        }\r\n\r\n        return INITIAL_BLOCK_REWARD.div(2 ** _phase);\r\n    }\r\n\r\n    function reward() public view returns (uint256) {\r\n        return reward(block.number);\r\n    }\r\n\r\n    function mintable(uint256 blockNumber) public view returns (uint256) {\r\n        uint256 _mintable = 0;\r\n        uint256 lastMintableBlock = lastMintBlock();\r\n        uint256 n = phase(lastMintBlock());\r\n        uint256 m = phase(blockNumber);\r\n\r\n        while (n < m) {\r\n            n++;\r\n            uint256 r = n.mul(MINT_DECAY_DURATION).add(initMintBlock());\r\n            _mintable = _mintable.add((r.sub(lastMintableBlock)).mul(reward(r)));\r\n            lastMintableBlock = r;\r\n        }\r\n        _mintable = _mintable.add((blockNumber.sub(lastMintableBlock)).mul(reward(blockNumber)));\r\n\r\n        return _mintable;\r\n    }\r\n\r\n    function mint() public returns (bool) {\r\n        if (!isMintable()) {\r\n            return false;\r\n        }\r\n\r\n        uint256 _mintable = mintable(block.number);\r\n        if (_mintable <= 0) {\r\n            return false;\r\n        }\r\n\r\n        _setLastMintBlock(block.number);\r\n\r\n        uint256 takerMintable = _mintable.wmul(PERCENTAGE_FOR_TAKER);\r\n        uint256 makerMintable = _mintable.wmul(PERCENTAGE_FOR_MAKER);\r\n        uint256 groupMintable = _mintable.sub(takerMintable).sub(makerMintable);\r\n\r\n        _mint(TAKER_ADDRESS, takerMintable);\r\n        _mint(MAKER_ADDRESS, makerMintable);\r\n        _mint(GROUP_ADDRESS, groupMintable);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * oracle\r\n     */\r\n    function weth(address token, uint256 amount) public view returns (uint256) {\r\n        uint256 _weth = router().weth(token);\r\n        if (_weth <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _weth.wmul(amount);\r\n    }\r\n\r\n    function rebalance(address account, address pair) public view returns (uint256) {\r\n        if (!isWhitelisted(IBtswapPairToken(pair).token0()) || !isWhitelisted(IBtswapPairToken(pair).token1())) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 m = IBtswapPairToken(pair).totalSupply();\r\n        uint256 n = IBtswapPairToken(pair).balanceOf(account);\r\n        if (n <= 0 || m <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        (uint112 reserve0, uint112 reserve1,) = IBtswapPairToken(pair).getReserves();\r\n        uint256 _weth0 = weth(IBtswapPairToken(pair).token0(), uint256(reserve0));\r\n        uint256 _weight0 = weightOf(IBtswapPairToken(pair).token0());\r\n        uint256 _weth1 = weth(IBtswapPairToken(pair).token1(), uint256(reserve1));\r\n        uint256 _weight1 = weightOf(IBtswapPairToken(pair).token1());\r\n\r\n        uint256 _weth = _weth0.mul(_weight0).add(_weth1.mul(_weight1));\r\n\r\n        return _weth.mul(n).div(m);\r\n    }\r\n\r\n\r\n    /**\r\n     * taker\r\n     */\r\n    function shareOf(address account) public view returns (uint256, uint256) {\r\n        uint256 m = takerQuantityOfPool();\r\n        uint256 n = takerQuantityOf(account);\r\n\r\n        return (m, n);\r\n    }\r\n\r\n    function takerQuantityOfPool() public view returns (uint256) {\r\n        return taker.quantity;\r\n    }\r\n\r\n    function takerTimestampOfPool() public view returns (uint256) {\r\n        return taker.timestamp;\r\n    }\r\n\r\n    function takerQuantityOf(address account) public view returns (uint256) {\r\n        return taker.users[account].quantity;\r\n    }\r\n\r\n    function takerTimestampOf(address account) public view returns (uint256) {\r\n        return taker.users[account].timestamp;\r\n    }\r\n\r\n    function takerBalanceOf() public view returns (uint256) {\r\n        return balanceOf(TAKER_ADDRESS);\r\n    }\r\n\r\n    function takerBalanceOf(address account) public view returns (uint256) {\r\n        (uint256 m, uint256 n) = shareOf(account);\r\n        if (n <= 0 || m <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (n == m) {\r\n            return takerBalanceOf();\r\n        }\r\n\r\n        return takerBalanceOf().mul(n).div(m);\r\n    }\r\n\r\n    function swap(address account, address input, uint256 amount, address output) public onlyMinter returns (bool) {\r\n        require(account != address(0), \"BtswapToken: taker swap account is the zero address\");\r\n        require(input != address(0), \"BtswapToken: taker swap input is the zero address\");\r\n        require(output != address(0), \"BtswapToken: taker swap output is the zero address\");\r\n\r\n        if (!isWhitelisted(input) || !isWhitelisted(output)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 quantity = weth(input, amount);\r\n        if (quantity <= 0) {\r\n            return false;\r\n        }\r\n\r\n        mint();\r\n\r\n        taker.timestamp = block.timestamp;\r\n        taker.quantity = takerQuantityOfPool().add(quantity);\r\n\r\n        User storage user = taker.users[account];\r\n        user.timestamp = block.timestamp;\r\n        user.quantity = takerQuantityOf(account).add(quantity);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _takerWithdraw(uint256 quantity) internal returns (bool) {\r\n        require(quantity > 0, \"BtswapToken: taker withdraw quantity is the zero value\");\r\n        require(takerBalanceOf() >= quantity, \"BtswapToken: taker withdraw quantity exceeds taker balance\");\r\n\r\n        uint256 delta = takerQuantityOfPool();\r\n        if (takerBalanceOf() != quantity) {\r\n            delta = takerQuantityOfPool().mul(quantity).div(takerBalanceOf());\r\n        }\r\n\r\n        taker.timestamp = block.timestamp;\r\n        taker.quantity = takerQuantityOfPool().sub(delta);\r\n\r\n        User storage user = taker.users[msg.sender];\r\n        user.timestamp = block.timestamp;\r\n        user.quantity = takerQuantityOf(msg.sender).sub(delta);\r\n\r\n        _transfer(TAKER_ADDRESS, msg.sender, quantity);\r\n\r\n        return true;\r\n    }\r\n\r\n    function takerWithdraw(uint256 quantity) public returns (bool) {\r\n        mint();\r\n\r\n        uint256 balance = takerBalanceOf(msg.sender);\r\n        if (quantity <= balance) {\r\n            return _takerWithdraw(quantity);\r\n        }\r\n\r\n        return _takerWithdraw(balance);\r\n    }\r\n\r\n    function takerWithdraw() public returns (bool) {\r\n        mint();\r\n\r\n        uint256 balance = takerBalanceOf(msg.sender);\r\n\r\n        return _takerWithdraw(balance);\r\n    }\r\n\r\n\r\n    /**\r\n     * maker\r\n     */\r\n    function liquidityOf(address account) public view returns (uint256, uint256) {\r\n        uint256 m = makerQuantityOfPool().add(makerDepositOfPool().mul(block.number.sub(makerTimestampOfPool())));\r\n        uint256 n = makerQuantityOf(account).add(makerDepositOf(account).mul(block.number.sub(makerTimestampOf(account))));\r\n\r\n        return (m, n);\r\n    }\r\n\r\n    function makerQuantityOfPool() public view returns (uint256) {\r\n        return maker.quantity;\r\n    }\r\n\r\n    function makerDepositOfPool() public view returns (uint256) {\r\n        return maker.deposit;\r\n    }\r\n\r\n    function makerTimestampOfPool() public view returns (uint256) {\r\n        return maker.timestamp;\r\n    }\r\n\r\n    function makerQuantityOf(address account) public view returns (uint256) {\r\n        return maker.users[account].quantity;\r\n    }\r\n\r\n    function makerDepositOf(address account) public view returns (uint256) {\r\n        return maker.users[account].deposit;\r\n    }\r\n\r\n    function makerLastDepositOf(address account, address pair) public view returns (uint256) {\r\n        return maker.users[account].deposits[pair];\r\n    }\r\n\r\n    function makerTimestampOf(address account) public view returns (uint256) {\r\n        return maker.users[account].timestamp;\r\n    }\r\n\r\n    function _makerBalanceAndLiquidityOf(address account) internal view returns (uint256, uint256, uint256) {\r\n        (uint256 m, uint256 n) = liquidityOf(account);\r\n        if (n <= 0 || m <= 0) {\r\n            return (0, m, n);\r\n        }\r\n\r\n        if (n == m) {\r\n            return (makerBalanceOf(), m, n);\r\n        }\r\n\r\n        return (makerBalanceOf().mul(n).div(m), m, n);\r\n    }\r\n\r\n    function makerBalanceOf() public view returns (uint256) {\r\n        return balanceOf(MAKER_ADDRESS);\r\n    }\r\n\r\n    function makerBalanceOf(address account) public view returns (uint256) {\r\n        (uint256 balance, ,) = _makerBalanceAndLiquidityOf(account);\r\n        return balance;\r\n    }\r\n\r\n    function liquidity(address account, address pair) public onlyRouter returns (bool) {\r\n        require(account != address(0), \"BtswapToken: maker liquidity account is the zero address\");\r\n        require(pair != address(0), \"BtswapToken: maker liquidity pair is the zero address\");\r\n\r\n        mint();\r\n        \r\n        User storage user = maker.users[account];\r\n        uint256 deposit = rebalance(account, pair);\r\n        uint256 previous = makerLastDepositOf(account, pair);\r\n\r\n        (uint256 m, uint256 n) = liquidityOf(account);\r\n        maker.quantity = m;\r\n        maker.timestamp = block.number;\r\n        maker.deposit = makerDepositOfPool().add(deposit).sub(previous);\r\n\r\n        user.quantity = n;\r\n        user.timestamp = block.number;\r\n        user.deposit = makerDepositOf(account).add(deposit).sub(previous);\r\n        user.deposits[pair] = deposit;\r\n\r\n        return true;\r\n    }\r\n\r\n    function _makerWithdraw(address account) internal returns (bool) {\r\n        require(account != address(0), \"BtswapToken: maker withdraw account is the zero address\");\r\n\r\n        (uint256 withdrawn, uint256 m, uint256 n) = _makerBalanceAndLiquidityOf(account);\r\n        if (withdrawn <= 0) {\r\n            return false;\r\n        }\r\n\r\n        User storage user = maker.users[account];\r\n        maker.timestamp = block.number;\r\n        maker.quantity = m.sub(n);\r\n        user.timestamp = block.number;\r\n        user.quantity = 0;\r\n\r\n        _transfer(MAKER_ADDRESS, account, withdrawn);\r\n\r\n        return true;\r\n    }\r\n\r\n    function makerWithdraw() public returns (bool) {\r\n        mint();\r\n\r\n        return _makerWithdraw(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * group\r\n     */\r\n    function groupBalanceOf() public view returns (uint256) {\r\n        return balanceOf(GROUP_ADDRESS);\r\n    }\r\n\r\n    function groupWithdraw(address account, uint256 amount) public onlyOwner returns (bool) {\r\n        require(account != address(0), \"BtswapToken: group withdraw account is the zero address\");\r\n        require(amount > 0, \"BtswapToken: group withdraw amount is the zero value\");\r\n        require(groupBalanceOf() >= amount, \"BtswapToken: group withdraw amount exceeds group balance\");\r\n\r\n        _transfer(GROUP_ADDRESS, account, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * modifier\r\n     */\r\n    function isMintable() public view returns (bool) {\r\n        if (block.number.sub(lastMintBlock()) > 0 && reward(lastMintBlock()) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isRouter(address account) public view returns (bool) {\r\n        return account == address(router());\r\n    }\r\n\r\n    modifier onlyRouter() {\r\n        require(isRouter(msg.sender), \"BtswapToken: caller is not the router\");\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"GROUP_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_BLOCK_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_DECAY_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTAGE_FOR_MAKER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTAGE_FOR_TAKER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TAKER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blacklisteds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"today\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlacklistedsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPausersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistedsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"groupWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"makerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"makerDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerDepositOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"makerLastDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"makerQuantityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerQuantityOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"makerTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerTimestampOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makerWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IBtswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IBtswapRouter02\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"takerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"takerQuantityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerQuantityOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"takerTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerTimestampOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takerWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"takerWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"weightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelisteds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BtswapToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"SafeMath:e65c81b1da1db81876ddc85ccaf283865d9dbc28","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ccdbdd13765edc639af561398563999881afbf2f2929b7cd3ace2be0a2fec7de"}]}