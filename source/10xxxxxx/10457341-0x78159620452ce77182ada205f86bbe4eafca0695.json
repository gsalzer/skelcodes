{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  \r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    \r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract SALESFIRE is Owned{\r\n    \r\n    \r\n  using SafeMath for uint;\r\n  ERC20Interface public token;\r\n\r\n  mapping(uint => uint) public Stage;\r\n  mapping(address => uint) public HoldersID;\r\n  mapping(uint => address) public Holders;\r\n  mapping(address => address) public HoldersRef;\r\n  mapping(address => bool) public purchased;\r\n   \r\n  uint public currentStage = 1;\r\n  uint256 public _tkns;\r\n  uint256 public currID; \r\n  address refer;\r\n  address tokensalepool;\r\n  uint256 public tSales;\r\n  uint public otc;\r\n\r\n \r\n  constructor(ERC20Interface _token) public {\r\n      \r\n     token = _token;\r\n     owner = msg.sender;\r\n     \r\n     Stage[1] = 0.005 ether;\r\n     Stage[2] = 0.008 ether;\r\n     Stage[3] = 0.03 ether;\r\n     \r\n  }\r\n\r\n function _setStage(uint _value) public onlyOwner{\r\n        \r\n        currentStage = _value;\r\n }\r\n \r\n function _setSalesPool(address _setPool, uint _OTC) public onlyOwner{\r\n        \r\n        tokensalepool = _setPool;\r\n        otc = _OTC*10**18;\r\n }\r\n    \r\n function () external payable {\r\n    //revert();\r\n    \r\n    require(tokensalepool != 0x0000000000000000000000000000000000000000, \"Salespool not yet set\");\r\n    require(msg.value <= 15 ether, \"Amount is over the maximum purchase limit\");\r\n    require(msg.value != 0 ether, \"Insufficient ether balance\");\r\n    \r\n    uint _eth = msg.value;\r\n    _tkns = (_eth / Stage[currentStage])*10**18;\r\n   require(token.allowance(tokensalepool, address(this)) >= _tkns, \"Insufficient tokens allowed from pool\");\r\n   require(token.balanceOf(tokensalepool) >= _tkns, \"Insufficient tokens in the pool\");\r\n   require(tSales <= otc, \"Maximum Sales Cap is reached\");\r\n    \r\n    if(HoldersID[msg.sender] == 0){\r\n    \r\n    currID ++;\r\n    Holders[currID] = msg.sender;\r\n    HoldersID[msg.sender] = currID;\r\n    HoldersRef[msg.sender] = 0x0000000000000000000000000000000000000000;\r\n    refer = 0x0000000000000000000000000000000000000000;\r\n    \r\n    \r\n    }else{\r\n        \r\n    refer = HoldersRef[msg.sender];\r\n    \r\n    }\r\n    \r\n    \r\n    if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){\r\n      token.transferFrom(tokensalepool, refer, _tkns/10);\r\n      tSales += _tkns/10;\r\n    }\r\n    \r\n    token.transferFrom(tokensalepool, msg.sender, _tkns);\r\n    purchased[msg.sender] = true;\r\n    tSales += _tkns;\r\n    \r\n    \r\n    \r\n    \r\n  }\r\n  \r\n   function tokenSale(address _refer) public payable returns (bool success){\r\n    \r\n    require(tokensalepool != 0x0000000000000000000000000000000000000000, \"Salespool not yet set\");\r\n    require(msg.value <= 15 ether, \"Amount is over the maximum purchase limit\");\r\n    require(msg.value != 0 ether, \"Insufficient ether balance\");\r\n    \r\n    uint _eth = msg.value;\r\n    _tkns = (_eth / Stage[currentStage])*10**18;\r\n   require(token.allowance(tokensalepool, address(this)) >= _tkns, \"Insufficient tokens allowed from pool\");\r\n   require(token.balanceOf(tokensalepool) >= _tkns, \"Insufficient tokens in the pool\");\r\n   require(tSales <= otc, \"Maximum Sales Cap is reached\");\r\n    \r\n    if(HoldersID[msg.sender] == 0){\r\n    \r\n    currID ++;\r\n    Holders[currID] = msg.sender;\r\n    HoldersID[msg.sender] = currID;\r\n    HoldersRef[msg.sender] = _refer;\r\n    refer = _refer;\r\n    \r\n    \r\n    }else{\r\n        \r\n    refer = HoldersRef[msg.sender];\r\n    \r\n    }\r\n    \r\n    \r\n    if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){\r\n      token.transferFrom(tokensalepool, refer, _tkns/10);\r\n      tSales += _tkns/10;\r\n    }\r\n    \r\n    token.transferFrom(tokensalepool, msg.sender, _tkns);\r\n    purchased[msg.sender] = true;\r\n    tSales += _tkns;\r\n    \r\n    return true;\r\n    \r\n  }\r\n  \r\n  function clearTokens() public onlyOwner() {\r\n    address  _owner = msg.sender;\r\n    token.transfer(_owner, token.balanceOf(address(this)));\r\n  }\r\n  \r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  \r\n  \r\n  \r\n//   function contractBalance() public view onlyOwner()returns(uint){\r\n//       return address(this).balance;\r\n//   }\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"HoldersID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"HoldersRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_OTC\",\"type\":\"uint256\"}],\"name\":\"_setSalesPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_setStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tkns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"tokenSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SALESFIRE","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f8a2f7bcd70e7f7bdd3fbb079c11d073588dea2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1002b16826143b81037466c95d128d63c262e74f8cbefc1ebd352bb45f489513"}]}