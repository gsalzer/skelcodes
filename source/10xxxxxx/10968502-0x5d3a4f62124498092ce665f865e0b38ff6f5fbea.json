{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSE\r\npragma solidity 0.7.0;\r\n\r\n//SafeMath library for calculations.\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c){\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c){\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c){\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c){\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n//ideaology main contract code.\r\ncontract ideaology is SafeMath{\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public sale_token; //need function\r\n    uint public total_sold_token;\r\n    uint public totalSupply; //need function\r\n    address public owner;\r\n    uint[] public salesAmount;\r\n    \r\n    //sale struct declare\r\n    struct sale{\r\n        uint startDate;\r\n        uint endDate;\r\n        uint256 saletoken;\r\n        uint256 price;\r\n        uint256 softcap;\r\n        uint256 hardcap;\r\n        uint256 total_sold;\r\n    }\r\n    \r\n    sale[] public sale_detail;\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(string => uint256) internal allSupplies;\r\n    mapping(string => uint256) internal RewardDestribution;\r\n    mapping(string => uint256) internal token_sale;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    //constructor to define all fields\r\n    constructor(){\r\n        symbol = \"IDEA\";\r\n        name = \"IDEAOLOGY\";\r\n        decimals = 18;\r\n        totalSupply = 500000000 * 10 ** uint256(18);\r\n        sale_token =  219160000 * 10 ** uint256(18);\r\n        owner = msg.sender;\r\n        \r\n        //sale data\r\n         salesAmount = [0, 6000000 * 10 ** uint256(18), 19160000 * 10 ** uint256(18), 194000000 * 10 ** uint256(18)];\r\n        \r\n        //initialize supplies\r\n        allSupplies['operation'] = 10000000 * 10 ** uint256(18);\r\n        allSupplies['plateform_developement'] = 150000000 * 10 ** uint256(18);\r\n        allSupplies['marketing'] = 25000000 * 10 ** uint256(18);\r\n        allSupplies['team'] = 15000000 * 10 ** uint256(18);\r\n        \r\n        //initialize RewardDestribution\r\n    \tRewardDestribution['twitter'] = 2990000 * 10 ** uint256(18);\r\n        RewardDestribution['facebook'] = 3450000 * 10 ** uint256(18);\r\n        RewardDestribution['content'] = 6900000 * 10 ** uint256(18);\r\n        RewardDestribution['youtube'] = 2760000 * 10 ** uint256(18);\r\n        RewardDestribution['telegram'] = 4600000 * 10 ** uint256(18);\r\n        RewardDestribution['instagram'] = 2300000 * 10 ** uint256(18);\r\n        RewardDestribution['event'] = 1000000 * 10 ** uint256(18);\r\n        RewardDestribution['quiz'] = 500000 * 10 ** uint256(18);\r\n        RewardDestribution['partnership'] = 5500000 * 10 ** uint256(18);\r\n        \r\n        //initialize balance\r\n        balances[owner] = totalSupply - sale_token - (200000000 * 10 ** uint256(18)) - (30000000 * 10 ** uint256(18));\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Only Access By Admin!!\");\r\n        _;\r\n    }\r\n    \r\n    //Fucntion to Get Owner Address\r\n    function getOwnerAddress() public view returns(address ownerAddress){\r\n        return owner;\r\n    }\r\n    \r\n    //Function to Transfer the Ownership\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        uint _value = balances[msg.sender];\r\n        balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n        balances[newOwner] = safeAdd(balances[newOwner], _value);\r\n        emit Transfer(msg.sender, newOwner, _value);\r\n    }\r\n    \r\n    //Fucntion to Start Pre-Sale.\r\n    function start_sale(uint _startdate, uint _enddate, uint _price, uint _softcap, uint _hardcap) public onlyOwner returns (bool status){\r\n        uint chck = sale_detail.length;\r\n        if( chck == 3) {\r\n            revert(\"All private sale is set\");\r\n        }\r\n        uint _softcapToken = safeDiv(_softcap, _price);\r\n        uint _hardcapToken = safeDiv(_hardcap, _price); \r\n        \r\n        \r\n        if(_startdate < _enddate && _startdate > block.timestamp && _softcap < _hardcap && _softcapToken < salesAmount[chck + 1] && _hardcapToken < salesAmount[chck + 1]){\r\n            \r\n            sale memory p1= sale(_startdate, _enddate, salesAmount[chck + 1], _price, _softcap, _hardcap, 0);\r\n            sale_detail.push(p1);\r\n            sale_token = safeSub(sale_token, salesAmount[chck + 1]);\r\n        }\r\n        else{\r\n            revert(\"Invalid data provided to start presale\");\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    //Function to transfer token from different supply    \r\n    function transferFromAllSupplies(address receiver, uint numTokens, string memory _supply) public onlyOwner returns (bool status) {\r\n        require(numTokens <= allSupplies[_supply], \"Token amount is larger than token distribution allocation\");\r\n        allSupplies[_supply] = safeSub(allSupplies[_supply], numTokens);\r\n        balances[receiver] = safeAdd(balances[receiver],numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n     \r\n    //Function to transfer token from reward   \r\n    function transferRewards(address receiver, uint numTokens, string memory community) public onlyOwner returns (bool status) {\r\n        require(numTokens <= RewardDestribution[community], \"Token amount is larger than token distribution allocation\");\r\n        RewardDestribution[community] = safeSub(RewardDestribution[community], numTokens);\r\n        balances[receiver] = safeAdd(balances[receiver],numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    //Function to purchase token.\r\n    function purchase (address _account,uint _token) onlyOwner public returns (bool status){\r\n        bool isSend = false;\r\n        for (uint i=0; i < sale_detail.length; i++){\r\n            if (block.timestamp >= sale_detail[i].startDate && block.timestamp <=sale_detail[i].endDate){\r\n                if(_token <= sale_detail[i].saletoken){\r\n                    sale_detail[i].saletoken = safeSub(sale_detail[i].saletoken, _token);\r\n                    balances[_account] = safeAdd(balances[_account], _token);\r\n                    total_sold_token = safeAdd(total_sold_token, _token);\r\n                    sale_detail[i].total_sold = safeAdd(sale_detail[i].total_sold,_token);\r\n                    emit Transfer(msg.sender, _account, _token);\r\n                    isSend = true;\r\n                    return true;\r\n                }\r\n                else{\r\n                    revert(\"Check available token balances\");\r\n                }\r\n            }\r\n        }\r\n        if(!isSend){\r\n            require (balances[msg.sender] >= _token,\"All Token Sold!\");\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _token);\r\n            balances[_account] = safeAdd(balances[_account], _token);\r\n            total_sold_token = safeAdd(total_sold_token, _token);\r\n            emit Transfer(msg.sender, _account, _token);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    //Function to burn the token from his account.\r\n    function burn(uint256 value) onlyOwner public returns (bool success){\r\n        require(balances[owner] >= value);\r\n        balances[owner] =safeSub(balances[owner], value);\r\n        emit Transfer(msg.sender, address(0), value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n    \r\n    //Function to transfer token by owner.\r\n    function transfer(address to, uint tokens) public returns (bool success){\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        total_sold_token = safeAdd(total_sold_token, tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    //Function to Approve user to spend token.\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    //Fucntion to transfer token from address.\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    //Fucntion to stop reciving ETH\r\n    fallback() external {\r\n       revert('contract does not accept ether'); // Reject any accidental Ether transfer\r\n    }\r\n\r\n    //Function for Allowance.\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    //Function to get presale length\r\n    function getsaleDetails() public view returns (uint presalelength) {\r\n        return sale_detail.length;\r\n    }\r\n    \r\n    //Function to check balance.\r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    //Function to display reward balance\r\n    function viewReward() public view returns (uint twitterToken, uint facebookToken, uint contentToken, uint youtubeToken, uint telegramToken, uint instagramToken, uint quizToken, uint partnershipToken){\r\n        return (RewardDestribution['twitter'],RewardDestribution['facebook'], RewardDestribution['content'], RewardDestribution['youtube'], RewardDestribution['telegram'], RewardDestribution['instagram'], RewardDestribution['quiz'], RewardDestribution['partnership']);\r\n    }\r\n    \r\n    //Function to display supplies balance\r\n    function viewSupplies() public view returns (uint operationToken, uint plateform_developementToken, uint marketingToken, uint teamToken){\r\n        return (allSupplies['operation'],allSupplies['plateform_developement'], allSupplies['marketing'], allSupplies['team']);\r\n    }\r\n    \r\n    //Function to get presale length\r\n    function countTotalSales() public view returns (uint count) {\r\n        return sale_detail.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTotalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsaleDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"presalelength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sale_detail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saletoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_sold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sale_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enddate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"start_sale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_sold_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_supply\",\"type\":\"string\"}],\"name\":\"transferFromAllSupplies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"community\",\"type\":\"string\"}],\"name\":\"transferRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"twitterToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"facebookToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contentToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"youtubeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"telegramToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instagramToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quizToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnershipToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operationToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plateform_developementToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ideaology","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://798e502948c9da444def068dc40c251b1e2a04ef804098edb34d3d246e82ae27"}]}