{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Crowdsharing {\r\n    \r\n    using SafeMath for *;\r\n    \r\n    address public ownerWallet;\r\n    address public wallet1; //3%\r\n    address public wallet2; //15%\r\n\r\n\r\n    \r\n   struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        uint directSponsor;\r\n        uint referralCounter;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n\r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 60 days;\r\n    uint private adminFees = 3;\r\n    uint private directSponsorFees = 15;\r\n    uint private earnings = 82;\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event getSponsorBonusEvent(address indexed _sponsor, address indexed _user, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint number);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner, address _wallet1, address _wallet2) public {\r\n        ownerWallet = msg.sender;\r\n        wallet1 = _wallet1;\r\n        wallet2 = _wallet2;\r\n\r\n        LEVEL_PRICE[1] = 0.1 ether;\r\n        LEVEL_PRICE[2] = 0.2 ether;\r\n        LEVEL_PRICE[3] = 0.5 ether;\r\n        LEVEL_PRICE[4] = 3 ether;\r\n        LEVEL_PRICE[5] = 10 ether;\r\n        LEVEL_PRICE[6] = 30 ether;\r\n        LEVEL_PRICE[7] = 15 ether;\r\n        LEVEL_PRICE[8] = 35 ether;\r\n        LEVEL_PRICE[9] = 100 ether;\r\n        LEVEL_PRICE[10] = 250 ether;\r\n        LEVEL_PRICE[11] = 500 ether;\r\n        LEVEL_PRICE[12] = 1000 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0),\r\n            directSponsor: 0,\r\n            referralCounter: 0\r\n        });\r\n        users[_owner] = userStruct;\r\n        userList[currUserID] = _owner;\r\n\r\n        for(uint i = 1; i <= 12; i++) {\r\n            users[_owner].levelExpired[i] = 55555555555;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n        else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n        else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n        else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n        else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n        else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n        else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n        else if(msg.value == LEVEL_PRICE[8]) level = 8;\r\n        else if(msg.value == LEVEL_PRICE[9]) level = 9;\r\n        else if(msg.value == LEVEL_PRICE[10]) level = 10;\r\n        else if(msg.value == LEVEL_PRICE[11]) level = 11;\r\n        else if(msg.value == LEVEL_PRICE[12]) level = 12;\r\n        \r\n        else revert('Incorrect Value send');\r\n\r\n        if(users[msg.sender].isExist) buyLevel(level);\r\n        else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(users[referrer].isExist) refId = users[referrer].id;\r\n            else revert('Incorrect referrer');\r\n\r\n            regUser(refId);\r\n        }\r\n        else revert('Please buy first level for 0.03 ETH');\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n       \r\n        require(!users[msg.sender].isExist, 'User exist');\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n        require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n\r\n        uint tempReferrerID = _referrerID;\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT) \r\n            _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0),\r\n            directSponsor: tempReferrerID,\r\n            referralCounter: 0\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender,userList[_referrerID]);\r\n        \r\n        //increase the referral counter;\r\n        users[userList[tempReferrerID]].referralCounter++;\r\n\r\n        emit regLevelEvent(msg.sender, userList[tempReferrerID], now);\r\n    }\r\n    \r\n    function regAdmins(address [] memory _adminAddress) public  {\r\n        \r\n        require(msg.sender == ownerWallet,\"You are not authorized\");\r\n        require(currUserID <= 8, \"No more admins can be registered\");\r\n        \r\n        UserStruct memory userStruct;\r\n        \r\n        for(uint i = 0; i < _adminAddress.length; i++){\r\n            \r\n            currUserID++;\r\n\r\n            uint _referrerID = 1;\r\n            uint tempReferrerID = _referrerID;\r\n    \r\n            if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT) \r\n                _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n    \r\n            userStruct = UserStruct({\r\n                isExist: true,\r\n                id: currUserID,\r\n                referrerID: _referrerID,\r\n                referral: new address[](0),\r\n                directSponsor: tempReferrerID,\r\n                referralCounter: 0\r\n            });\r\n    \r\n            users[_adminAddress[i]] = userStruct;\r\n            userList[currUserID] = _adminAddress[i];\r\n            \r\n            for(uint j = 1; j <= 12; j++) {\r\n                users[_adminAddress[i]].levelExpired[j] = 55555555555;\r\n            }\r\n    \r\n            users[userList[_referrerID]].referral.push(_adminAddress[i]);\r\n    \r\n            //increase the referral counter;\r\n            users[userList[tempReferrerID]].referralCounter++;\r\n    \r\n            emit regLevelEvent(msg.sender, userList[tempReferrerID], now);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist'); \r\n        require(_level > 0 && _level <= 12, 'Incorrect level');\r\n\r\n        if(_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        }\r\n        else {\r\n            require(msg.value == LEVEL_PRICE[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0) users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            else users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n        }\r\n\r\n        payForLevel(_level, msg.sender, userList[users[msg.sender].directSponsor]);\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    \r\n   \r\n    function payForLevel(uint _level, address _user, address _sponsor) internal {\r\n        address actualReferer;\r\n        address referer1;\r\n        address referer2;\r\n        \r\n\r\n        if(_level == 1)\r\n            actualReferer = userList[users[_user].directSponsor];\r\n        \r\n        else if(_level == 7) {\r\n            actualReferer = userList[users[_user].referrerID];\r\n        }\r\n        else if(_level == 2 || _level == 8) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            actualReferer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 3 || _level == 9) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            actualReferer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 4 || _level == 10) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer1 = userList[users[referer2].referrerID];\r\n            actualReferer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 5 || _level == 11) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer1 = userList[users[referer2].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            actualReferer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 6 || _level == 12) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer1 = userList[users[referer2].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer1 = userList[users[referer2].referrerID];\r\n            actualReferer = userList[users[referer1].referrerID];\r\n        }\r\n\r\n        if(!users[actualReferer].isExist) actualReferer = userList[1];\r\n\r\n        bool sent = false;\r\n        \r\n        if(_level == 1) {\r\n            if(users[actualReferer].levelExpired[_level] >= now) {\r\n                sent = address(uint160(actualReferer)).send(LEVEL_PRICE[_level]);\r\n                if (sent) {\r\n                    emit getSponsorBonusEvent(actualReferer, msg.sender, _level, now);\r\n                }\r\n            }\r\n            else {\r\n                address(uint160(wallet2)).transfer(LEVEL_PRICE[_level]);\r\n                emit lostMoneyForLevelEvent(actualReferer, msg.sender, _level, now,1);\r\n            }\r\n        }\r\n        else {\r\n            if(users[actualReferer].levelExpired[_level] >= now) {\r\n                sent = address(uint160(actualReferer)).send(LEVEL_PRICE[_level].mul(earnings).div(100));\r\n\r\n                if (sent) {\r\n                    \r\n                    if(users[_sponsor].levelExpired[_level] >= now) {\r\n                        address(uint160(_sponsor)).transfer(LEVEL_PRICE [_level].mul(directSponsorFees).div(100));\r\n                        emit getSponsorBonusEvent(_sponsor, msg.sender, _level, now);\r\n                    }\r\n                    else{\r\n                        address(uint160(wallet2)).transfer(LEVEL_PRICE [_level].mul(directSponsorFees).div(100));\r\n                        emit lostMoneyForLevelEvent(_sponsor, msg.sender, _level, now, 1);\r\n                    }   \r\n                    address(uint160(wallet1)).transfer(LEVEL_PRICE[_level].mul(adminFees).div(100));\r\n                    emit getMoneyForLevelEvent(actualReferer, msg.sender, _level, now);\r\n                    \r\n                }\r\n            }\r\n            \r\n            if(!sent) {\r\n                emit lostMoneyForLevelEvent(actualReferer, msg.sender, _level, now, 2);\r\n    \r\n                payForLevel(_level, actualReferer, _sponsor);\r\n            }\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n        address[] memory referrals = new address[](1022);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 1022; i++) {\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if(i < 62) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external {\r\n        \r\n        require(msg.sender == ownerWallet,\"You are not authorized\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n     /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        emit OwnershipTransferred(ownerWallet, newOwner);\r\n        ownerWallet = newOwner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adminAddress\",\"type\":\"address[]\"}],\"name\":\"regAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directSponsor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getSponsorBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsharing","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000538682b5ba140351db74b094cf779fe59dfc600e000000000000000000000000652a423f01a381c3976c3046a1ab46fb4a24e48100000000000000000000000045ab3edc0a9a2ccff731b811b7cdf9241f9ed4d6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8c54dc2e8e81c0816c1d02a3cd1b2cafd6be5dede2bebf610b3187b6fb43d39d"}]}