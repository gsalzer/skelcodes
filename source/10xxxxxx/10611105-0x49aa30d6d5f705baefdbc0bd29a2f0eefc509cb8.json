{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract CC9{\r\n    \r\n    uint public entryAmount;\r\n    uint public level3Prices;\r\n    uint public payout3Price;\r\n    uint public compTransfer;\r\n    uint public votingpoolAmount = 0;\r\n    \r\n    address ownerAddress=0x7cf28a64934C1BF9A9680AE4576CdF732b3dc296; //\r\n    \r\n    address TokenContract=0x884322742bF47CA4B9fCB228E2E234595Be9ba18;\r\n    address SlotContract=0x5cB4c65c8Cd4787109E6891B526D121a9A8A3144;\r\n    address CompanyMatrixContract=0x3B0DF5305d416fBb091E939550036D103C563a13;\r\n    address TwoLevelMatrix=0x22D109fE80CcedC7AE87aD539D80c8c784eC6D3A;\r\n    \r\n    Callee1 c = Callee1(TokenContract); // Token Contract\r\n    Callee2 d = Callee2(SlotContract); // Slot Contract\r\n    Callee3 e = Callee3(CompanyMatrixContract); // companyMatrix\r\n    Callee4 f = Callee4(TwoLevelMatrix);\r\n    uint8 public rentryID=0;\r\n    uint8 public currentUserId = 0;\r\n    mapping(address => uint) public TotalEarning;\r\n    /*\r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint8 => uint) public level1Prize;\r\n    mapping(uint8 => uint) public level2Prize;\r\n    mapping(uint8 => uint) public payoutPrice;\r\n    */\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        address referrer;\r\n        uint balances;\r\n        uint xbalances;\r\n        //uint ybalances; \r\n        //uint zbalances;\r\n        //uint abalances;\r\n        //uint bbalances;\r\n        bytes32 username;\r\n        /////////////////\r\n        mapping(uint8 => bool) activeX39Levels;\r\n        mapping(uint8 => X39) x39Matrix;\r\n        ////////////////\r\n        mapping(uint8 => bool) activeX100Levels;\r\n        mapping(uint => X100) x100Matrix;\r\n    }\r\n    struct X39 {\r\n        address currentReferrer;\r\n        address[] directReferrerals;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        address[] thirdLevelReferrals;\r\n        uint8 reEntryCount;\r\n        bool reEntry;\r\n    }\r\n    struct X100{\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        uint8 reEntryCount;\r\n        bool reEntry;\r\n        bool upgrade;\r\n        bool upgraded;\r\n    }\r\n    mapping(address => address) public currentReferrerfor100;\r\n    mapping (address => UserStruct) public users;\r\n    ////////////////////////////\r\n    ////////////////////////////\r\n    mapping(bytes32 => bool) public nameExist;\r\n    mapping(bytes32 => address) public nameToAddress;\r\n    /////////////////////////////\r\n    //////////////////////////////\r\n    \r\n    \r\n    function setEntryPrice(uint8 entryprice ,uint8 distribution,uint8 payoutOutPrice , uint8 companytransfer) public{\r\n            require(msg.sender==ownerAddress);\r\n            entryAmount=entryprice;\r\n            level3Prices=distribution;\r\n            payout3Price=payoutOutPrice; // RENTRY PRICE\r\n            compTransfer=companytransfer;\r\n    }\r\n    \r\n    constructor() public{\r\n        /////////////////\r\n        entryAmount=1875;\r\n        level3Prices=375;\r\n        payout3Price=1875; // RENTRY PRICE\r\n        compTransfer=500;\r\n        /////////////////\r\n        \r\n        //////////////////\r\n        UserStruct memory user=UserStruct({\r\n            isExist:true,\r\n            referrer:address(0),\r\n            balances:0,\r\n            xbalances:0,\r\n            //ybalances:0,\r\n            //zbalances:0,\r\n            //abalances:0,\r\n            //bbalances:0,\r\n            username:'cuckoo'\r\n        });\r\n        ////////////////////////\r\n        nameExist['cuckoo']=true;\r\n        nameToAddress['cuckoo']=ownerAddress;\r\n        /////////////////////////\r\n        \r\n        users[ownerAddress] = user;\r\n        \r\n        users[ownerAddress].activeX39Levels[1] = true;\r\n        users[ownerAddress].x39Matrix[1].reEntryCount=1;\r\n        /////////100 matrix\r\n        users[ownerAddress].activeX100Levels[1] = true;\r\n        \r\n     }\r\n     /////////////////////////////////////////////////vote***********************************************\r\n    \r\n    function voteResult() public{\r\n        require(msg.sender==ownerAddress);\r\n        //c.transfer(SlotContract,votingpoolAmount*1000000000000000000);\r\n        votingpoolAmount=0;\r\n        //d.selectWinners(msg.sender,votingpoolAmount);\r\n    }\r\n    \r\n///////////////////////////////////////////////////\r\n    \r\n    \r\n    function enter(uint amount,address referrerAddress , bytes32 uname) public{\r\n        require(!nameExist[uname],\"UserName Exist\");\r\n        require(amount==entryAmount,\"Invalid Amount\");\r\n        require(!users[msg.sender].isExist,\"User Exists\");\r\n        require(users[referrerAddress].isExist,\"Referrer Doesnot Exists\");\r\n        c.transferFrom(msg.sender,address(this),amount*1000000000000000000);\r\n        d.saveUsers(msg.sender,referrerAddress); // Vote Contract\r\n        f.SaveUsers2LevelMAtrix(msg.sender,referrerAddress);//Level2Matrix\r\n        //e.updateCompanyMatrix(msg.sender,referrerAddress);\r\n        \r\n        UserStruct memory user = UserStruct({\r\n            isExist:true,\r\n            referrer: referrerAddress,\r\n            balances:0,           \r\n            xbalances:0,\r\n            //ybalances:0,\r\n            //zbalances:0,\r\n            //abalances:0,\r\n            //bbalances:0,\r\n            username:uname\r\n        });\r\n        users[msg.sender]=user;\r\n        //username[name]=true;\r\n        //////////////////////////\r\n        nameExist[uname]=true;\r\n        nameToAddress[uname]=msg.sender;\r\n        /////////////////////////\r\n        /////////////////////////////////////////////\r\n        users[msg.sender].activeX39Levels[1] = true;\r\n        users[msg.sender].x39Matrix[1].reEntryCount=1;\r\n        updateX39Referrer(msg.sender,referrerAddress ,1);\r\n        \r\n        //////////save directReferrer\r\n        users[referrerAddress].x39Matrix[1].directReferrerals.push(msg.sender);\r\n        currentReferrerfor100[msg.sender]=referrerAddress;\r\n        \r\n        votingpoolAmount = votingpoolAmount + entryAmount*8/100;\r\n        /////////////////////////////////////////////\r\n        //users[msg.sender].x39Matrix[level].currentReferrer = referrerAddress;\r\n        users[msg.sender].x39Matrix[1].currentReferrer = referrerAddress;\r\n    }\r\n   \r\n    function updateX39Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX39Levels[level], \"Referrer not active\");\r\n        ///////////////////////////// companyMatrix\r\n        c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n        e.updateCompanyMatrix(userAddress,referrerAddress);\r\n        \r\n        /////////////////////////////////////////////\r\n         \r\n         if (users[referrerAddress].x39Matrix[level].firstLevelReferrals.length < 3){\r\n            users[referrerAddress].x39Matrix[level].firstLevelReferrals.push(userAddress);\r\n            //Send Balance\r\n            users[referrerAddress].balances=users[referrerAddress].balances+level3Prices;\r\n            //////reentry\r\n            if(users[referrerAddress].balances>=payout3Price){\r\n                users[referrerAddress].balances=users[referrerAddress].balances-payout3Price;\r\n                /////////////\r\n                TotalEarning[referrerAddress]=TotalEarning[referrerAddress]+payout3Price;\r\n                //////////////\r\n                if(users[referrerAddress].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,referrerAddress,level);\r\n                    ///////////////////////////   \r\n                    e.companyMatrix(referrerAddress,referrerAddress);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    users[referrerAddress].x39Matrix[1].reEntry=false;\r\n                    users[referrerAddress].x39Matrix[1].reEntryCount=users[referrerAddress].x39Matrix[1].reEntryCount+1;\r\n                    updateX39Referrer(referrerAddress,referrerAddress,level);\r\n                    ////////////////////////////\r\n                    }\r\n                else{\r\n                    users[referrerAddress].x39Matrix[1].reEntry=true;\r\n                    c.transfer(referrerAddress,payout3Price*1000000000000000000);\r\n                    }\r\n                \r\n            }\r\n            \r\n\r\n            if (referrerAddress == ownerAddress) {\r\n                return;\r\n            }\r\n            //level 2\r\n            address ref = users[referrerAddress].x39Matrix[level].currentReferrer;            \r\n            users[ref].x39Matrix[level].secondLevelReferrals.push(userAddress); \r\n                //Send Balance\r\n                users[ref].balances=users[ref].balances+level3Prices;\r\n            ///////reentry\r\n            if(users[ref].balances>=payout3Price){\r\n                users[ref].balances=users[ref].balances-payout3Price;\r\n                ///////////\r\n                TotalEarning[ref]=TotalEarning[ref]+payout3Price;\r\n                ///////////\r\n                if(users[ref].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,ref,level);\r\n                     ///////////////////////////////;     \r\n                    users[ref].x39Matrix[1].reEntry=false;\r\n                    users[ref].x39Matrix[1].reEntryCount=users[ref].x39Matrix[1].reEntryCount+1;\r\n                    e.companyMatrix(ref,ref);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    updateX39Referrer(ref,ref,level);\r\n                    ///////////////////////////////\r\n                    }\r\n                else{\r\n                    users[ref].x39Matrix[1].reEntry=true;\r\n                    c.transfer(ref,payout3Price*1000000000000000000);\r\n                    }\r\n            }\r\n            ///////////////////\r\n            if (ref == ownerAddress) {\r\n                return;\r\n            }\r\n            //level 3\r\n            address refref = users[ref].x39Matrix[level].currentReferrer;\r\n            users[refref].x39Matrix[level].thirdLevelReferrals.push(userAddress);\r\n                //Send Balance\r\n                users[refref].balances=users[refref].balances+level3Prices;\r\n            ///////////reentry\r\n            if(users[refref].balances>=payout3Price){\r\n                users[refref].balances=users[refref].balances-payout3Price;\r\n                ////////\r\n                 TotalEarning[refref]=TotalEarning[refref]+payout3Price;\r\n                ///////\r\n                 if(users[refref].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,refref,level);\r\n                    ////////////////////////////////////\r\n                    users[refref].x39Matrix[1].reEntryCount=users[refref].x39Matrix[1].reEntryCount+1;\r\n                    users[refref].x39Matrix[1].reEntry=false;\r\n                    e.companyMatrix(refref,refref);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    updateX39Referrer(refref,refref,level);\r\n                    ///////////////////////////////////\r\n                    }\r\n                else{\r\n                    users[refref].x39Matrix[1].reEntry=true;\r\n                    c.transfer(refref,payout3Price*1000000000000000000);\r\n                }\r\n            }\r\n            if(ref == ownerAddress){\r\n                return;\r\n            }\r\n            \r\n            \r\n            else{\r\n                \r\n            }\r\n            ///////////////////\r\n         }\r\n         \r\n         else if(users[referrerAddress].x39Matrix[level].secondLevelReferrals.length < 9){\r\n            users[referrerAddress].x39Matrix[level].secondLevelReferrals.push(userAddress);\r\n            //users[userAddress].x39Matrix[level].currentReferrer = referrerAddress;\r\n                //Send Balance\r\n                users[referrerAddress].balances=users[referrerAddress].balances+level3Prices;\r\n            ///////reentry\r\n            if(users[referrerAddress].balances>=payout3Price){\r\n                users[referrerAddress].balances=users[referrerAddress].balances-payout3Price;\r\n                //////////\r\n                    TotalEarning[referrerAddress]=TotalEarning[referrerAddress]+payout3Price;\r\n                //////////\r\n                if(users[referrerAddress].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,referrerAddress,level);\r\n                    ///////////////////////////////////////////////     \r\n                    users[referrerAddress].x39Matrix[1].reEntryCount=users[referrerAddress].x39Matrix[1].reEntryCount+1;\r\n                    users[referrerAddress].x39Matrix[1].reEntry=false;   \r\n                    e.companyMatrix(referrerAddress,referrerAddress);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    updateX39Referrer(referrerAddress,referrerAddress,level);\r\n                    ///////////////////////////////////////////////\r\n                    }\r\n                else{\r\n                    users[referrerAddress].x39Matrix[1].reEntry=true;\r\n                    c.transfer(referrerAddress,payout3Price*1000000000000000000);\r\n                }\r\n            }\r\n            else{\r\n               \r\n            }\r\n            ///////////////////\r\n            if (referrerAddress == ownerAddress) {\r\n                return;\r\n            }\r\n            \r\n            //////////////////\r\n            \r\n            address ref2 = users[referrerAddress].x39Matrix[level].currentReferrer;\r\n            users[ref2].x39Matrix[level].thirdLevelReferrals.push(userAddress); \r\n            //Send Balance\r\n                users[ref2].balances=users[ref2].balances+level3Prices;\r\n            //reEntry\r\n            if(users[ref2].balances>=payout3Price){\r\n                users[ref2].balances=users[ref2].balances-payout3Price;\r\n                ///////////////////\r\n                TotalEarning[ref2]=TotalEarning[ref2]+payout3Price;\r\n                ///////////////////\r\n                if(users[ref2].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,ref2,level);\r\n                    //////////////////////////////////////\r\n                    users[ref2].x39Matrix[1].reEntryCount=users[ref2].x39Matrix[1].reEntryCount+1;\r\n                    users[ref2].x39Matrix[1].reEntry=false;\r\n                    e.companyMatrix(ref2,ref2);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    updateX39Referrer(ref2,ref2,level);\r\n                    /////////////////////////////////////////\r\n                    }\r\n                else{\r\n                    users[ref2].x39Matrix[1].reEntry=true;\r\n                    c.transfer(ref2,payout3Price*1000000000000000000);\r\n                }\r\n            }\r\n            else{\r\n                \r\n            }\r\n            ///////////////////\r\n            \r\n         }\r\n         \r\n         else if(users[referrerAddress].x39Matrix[level].thirdLevelReferrals.length < 27){\r\n             //users[userAddress].x39Matrix[level].currentReferrer = referrerAddress;\r\n            users[referrerAddress].x39Matrix[level].thirdLevelReferrals.push(userAddress);\r\n            \r\n            //Send Balance\r\n                users[referrerAddress].balances=users[referrerAddress].balances+level3Prices;\r\n            //reEntry\r\n             if(users[referrerAddress].balances>=payout3Price){\r\n                 users[referrerAddress].balances=users[referrerAddress].balances-payout3Price;\r\n                 /////////\r\n                    TotalEarning[referrerAddress]=TotalEarning[referrerAddress]+payout3Price;\r\n                 ////////\r\n                 if(users[referrerAddress].x39Matrix[1].reEntry)\r\n                    {\r\n                    //reentryx39(userAddress,referrerAddress,level);\r\n                    ///////////////////////////////////////////////\r\n                    users[referrerAddress].x39Matrix[1].reEntryCount=users[referrerAddress].x39Matrix[1].reEntryCount+1;\r\n                    users[referrerAddress].x39Matrix[1].reEntry=false;\r\n                    e.companyMatrix(referrerAddress,referrerAddress);\r\n                    c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n                    updateX39Referrer(referrerAddress,referrerAddress,level);\r\n                    //////////////////////////////////////////////\r\n                    }\r\n                else{\r\n                    users[referrerAddress].x39Matrix[1].reEntry=true;\r\n                    c.transfer(referrerAddress,payout3Price*1000000000000000000);\r\n                }\r\n            }\r\n            else{\r\n               \r\n            }\r\n            ///////////////////\r\n         }\r\n         else{\r\n             //updateX39Referrer(userAddress,referrerAddress, users[referrerAddress].x39Matrix[1].reEntryCount);\r\n            \r\n             for(uint8 i=2;i<=users[referrerAddress].x39Matrix[1].reEntryCount;i++){\r\n             if(users[referrerAddress].activeX39Levels[i]&&((users[referrerAddress].x39Matrix[i].firstLevelReferrals.length+users[referrerAddress].x39Matrix[i].secondLevelReferrals.length+users[referrerAddress].x39Matrix[i].thirdLevelReferrals.length)<39)){\r\n                 return updateX39Referrer(userAddress,referrerAddress, i);\r\n                }\r\n             }\r\n            ////////////////////////////////////////////////////\r\n            users[referrerAddress].x39Matrix[1].reEntryCount= users[referrerAddress].x39Matrix[1].reEntryCount+1;\r\n            uint8 levelnew = users[referrerAddress].x39Matrix[1].reEntryCount;\r\n            users[referrerAddress].activeX39Levels[levelnew] = true;\r\n            \r\n            e.companyMatrix(referrerAddress,referrerAddress);\r\n            c.transfer(CompanyMatrixContract,compTransfer*1000000000000000000);\r\n            \r\n            return updateX39Referrer(userAddress,referrerAddress,levelnew);\r\n            /////////////////////////////////////////////////////\r\n         }\r\n         \r\n     }\r\n     \r\n     /*\r\n     ///////////////////////////////////////////////////////////////\r\n     //////////////////////////////////////////////////////////////\r\n     \r\n   */\r\n   \r\n    function Drain(uint amount) public{\r\n        require(msg.sender==ownerAddress);\r\n        c.transfer(ownerAddress,amount*1000000000000000000);\r\n    }\r\n    function resetpool() public{\r\n        require(msg.sender==ownerAddress);\r\n        votingpoolAmount=0;\r\n        \r\n    }\r\n    function usersX39Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, address[] memory,uint8,bool) {\r\n        return (users[userAddress].x39Matrix[level].currentReferrer,\r\n                users[userAddress].x39Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x39Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x39Matrix[level].thirdLevelReferrals,\r\n                users[userAddress].x39Matrix[level].reEntryCount,\r\n                users[userAddress].x39Matrix[level].reEntry);\r\n    }\r\n    \r\n   \r\n    \r\n    function users2level(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory,uint8,bool) {\r\n        return (users[userAddress].x100Matrix[level].currentReferrer,\r\n                users[userAddress].x100Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x100Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x100Matrix[level].reEntryCount,\r\n                users[userAddress].x100Matrix[level].reEntry);\r\n    }\r\n    \r\n    function checkName(bytes32 usrname) public view returns(bool){\r\n        return (nameExist[usrname]);\r\n    }\r\n    \r\n    function nametoadd(bytes32 usname) public view returns(address){\r\n        return (nameToAddress[usname]);\r\n    }\r\n  \r\n     \r\n}\r\ncontract Callee4{\r\n    function SaveUsers2LevelMAtrix(address useraddress , address referrerAddress)public;\r\n}\r\ncontract Callee3{\r\n    function updateCompanyMatrix(address useraddress,address referrerAddress) public;\r\n    function companyMatrix(address userAddress, address referrerAddress) public;\r\n}\r\n\r\ncontract Callee2{\r\n    function saveUsers(address useraddress,address referrerAddress) public;\r\n    //function selectWinners(address sender ,uint VotePoolAmount) public;\r\n}\r\n\r\ncontract Callee1 {\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    function transfer(address to, uint value) public;\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TotalEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"usrname\",\"type\":\"bytes32\"}],\"name\":\"checkName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentReferrerfor100\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uname\",\"type\":\"bytes32\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"level3Prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"usname\",\"type\":\"bytes32\"}],\"name\":\"nametoadd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payout3Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rentryID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetpool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"entryprice\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"distribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"payoutOutPrice\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"companytransfer\",\"type\":\"uint8\"}],\"name\":\"setEntryPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xbalances\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"users2level\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX39Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingpoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CC9","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://868b24f2d20e547ae8ed39f0ad00eb7e96515766b0f31d38cd9d102642ba0007"}]}