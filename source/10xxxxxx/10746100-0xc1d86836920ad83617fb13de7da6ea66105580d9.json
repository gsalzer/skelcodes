{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n██╗     ███████╗██╗  ██╗\r\n██║     ██╔════╝╚██╗██╔╝\r\n██║     █████╗   ╚███╔╝ \r\n██║     ██╔══╝   ██╔██╗ \r\n███████╗███████╗██╔╝ ██╗\r\n╚══════╝╚══════╝╚═╝  ╚═╝\r\n █████╗ ██╗██████╗      \r\n██╔══██╗██║██╔══██╗     \r\n███████║██║██████╔╝     \r\n██╔══██║██║██╔══██╗     \r\n██║  ██║██║██║  ██║     \r\n╚═╝  ╚═╝╚═╝╚═╝  ╚═╝*/\r\npragma solidity 0.5.17;\r\n\r\ninterface IERC20 { // brief interface for erc20 token tx\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract LexAIR {\r\n    address public accessToken;\r\n    address public governance;\r\n    address[] private registrations;\r\n    string public message;\r\n    mapping(address => Registry) private registryList;\r\n    \r\n    event Register(address indexed account, bytes32 indexed message);\r\n    event Deregister(address indexed account, bytes32 message);\r\n    event UpdateAccessToken(address indexed accessToken);\r\n    event UpdateGovernance(address indexed governance);\r\n    event UpdateMessage(string indexed message);\r\n    \r\n    struct Registry {\r\n        uint256 accountIndex;\r\n        bool registered;\r\n    }\r\n    \r\n    constructor (address[] memory _account, address _accessToken, address _governance, string memory _message) public {\r\n        for (uint256 i = 0; i < _account.length; i++) {\r\n            registryList[_account[i]].accountIndex = registrations.push(_account[i]) - 1;\r\n            registryList[_account[i]].registered = true;\r\n        }\r\n        \r\n        accessToken = _accessToken;\r\n        governance = _governance;\r\n        message = _message;\r\n    }\r\n    \r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n    \r\n    /****************\r\n    LISTING FUNCTIONS\r\n    ****************/\r\n    function deregister(address[] calldata _account, bytes32 _message) external {\r\n        require(IERC20(accessToken).balanceOf(msg.sender) >= 1, \"!access\");\r\n        \r\n        for (uint256 i = 0; i < _account.length; i++) {\r\n            require(registryList[_account[i]].registered, \"!registered\");\r\n            \r\n            uint256 accountToUnlist = registryList[_account[i]].accountIndex;\r\n            address acct = registrations[registrations.length - 1];\r\n            registrations[accountToUnlist] = acct;\r\n            registryList[acct].accountIndex = accountToUnlist;\r\n            registryList[_account[i]].registered = false;\r\n            registrations.length--;\r\n            \r\n            emit Deregister(_account[i], _message);\r\n        }\r\n    }\r\n    \r\n    function register(address[] calldata _account, bytes32 _message) external { \r\n        require(IERC20(accessToken).balanceOf(msg.sender) >= 1, \"!access\");\r\n        \r\n        for (uint256 i = 0; i < _account.length; i++) {\r\n            require(!registryList[_account[i]].registered, \"registered\");\r\n            \r\n            registryList[_account[i]].accountIndex = registrations.push(_account[i]) - 1;\r\n            registryList[_account[i]].registered = true;\r\n            \r\n            emit Register(_account[i], _message);\r\n        }\r\n    }\r\n    \r\n    function updateAccessToken(address _accessToken) external onlyGovernance {\r\n        accessToken = _accessToken;\r\n        \r\n        emit UpdateAccessToken(accessToken);\r\n    }\r\n    \r\n    \r\n    function updateGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n        \r\n        emit UpdateGovernance(governance);\r\n    }\r\n    \r\n    function updateMessage(string calldata _message) external onlyGovernance {\r\n        message = _message;\r\n        \r\n        emit UpdateMessage(message);\r\n    }\r\n    \r\n    // *******\r\n    // GETTERS\r\n    // *******\r\n    function accountCount() external view returns (uint256) {\r\n        return registrations.length;\r\n    }\r\n    \r\n    function isRegistered(address _account) external view returns (bool) {\r\n        if(registrations.length == 0) return false;\r\n        return (registrations[registryList[_account].accountIndex] == _account);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_accessToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Deregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accessToken\",\"type\":\"address\"}],\"name\":\"UpdateAccessToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"UpdateGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UpdateMessage\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"deregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessToken\",\"type\":\"address\"}],\"name\":\"updateAccessToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexAIR","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000800000000000000000000000003e6d94f5eb600a83366eeedb1ac374972ed8f763000000000000000000000000057e820d740d5aaaffa3c6de08c5c98d990db00d00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000005e793ce0c6027323ac150f6d45c2344d28b60190000000000000000000000000000000000000000000000000000000000000031e29a94efb88f5f4c657844414f204163637265646974656420496e766573746f722052656769737472795fe29a94efb88f000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a93e7401b348cd34ab81a968bbbf8dbba167820b45529786520678623e766f4e"}]}