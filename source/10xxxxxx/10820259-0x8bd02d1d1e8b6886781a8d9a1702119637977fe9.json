{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/sol6/IERC20.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 digits);\r\n\r\n    function totalSupply() external view returns (uint256 supply);\r\n}\r\n\r\n\r\n// to support backward compatible contract name -- so function signature remains same\r\nabstract contract ERC20 is IERC20 {\r\n\r\n}\r\n\r\n// File: contracts/sol6/reserves/IConversionRates.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IConversionRates {\r\n\r\n    function recordImbalance(\r\n        IERC20 token,\r\n        int buyAmount,\r\n        uint256 rateUpdateBlock,\r\n        uint256 currentBlock\r\n    ) external;\r\n\r\n    function getRate(\r\n        IERC20 token,\r\n        uint256 currentBlockNumber,\r\n        bool buy,\r\n        uint256 qty\r\n    ) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/sol6/reserves/IWeth.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IWeth is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// File: contracts/sol6/IKyberSanity.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IKyberSanity {\r\n    function getSanityRate(IERC20 src, IERC20 dest) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/sol6/IKyberReserve.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IKyberReserve {\r\n    function trade(\r\n        IERC20 srcToken,\r\n        uint256 srcAmount,\r\n        IERC20 destToken,\r\n        address payable destAddress,\r\n        uint256 conversionRate,\r\n        bool validate\r\n    ) external payable returns (bool);\r\n\r\n    function getConversionRate(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty,\r\n        uint256 blockNumber\r\n    ) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/sol6/utils/Utils5.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n/**\r\n * @title Kyber utility file\r\n * mostly shared constants and rate calculation helpers\r\n * inherited by most of kyber contracts.\r\n * previous utils implementations are for previous solidity versions.\r\n */\r\ncontract Utils5 {\r\n    IERC20 internal constant ETH_TOKEN_ADDRESS = IERC20(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n    uint256 internal constant PRECISION = (10**18);\r\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\r\n    uint256 internal constant MAX_RATE = (PRECISION * 10**7); // up to 10M tokens per eth\r\n    uint256 internal constant MAX_DECIMALS = 18;\r\n    uint256 internal constant ETH_DECIMALS = 18;\r\n    uint256 constant BPS = 10000; // Basic Price Steps. 1 step = 0.01%\r\n    uint256 internal constant MAX_ALLOWANCE = uint256(-1); // token.approve inifinite\r\n\r\n    mapping(IERC20 => uint256) internal decimals;\r\n\r\n    function getUpdateDecimals(IERC20 token) internal returns (uint256) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint256 tokenDecimals = decimals[token];\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if (tokenDecimals == 0) {\r\n            tokenDecimals = token.decimals();\r\n            decimals[token] = tokenDecimals;\r\n        }\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function setDecimals(IERC20 token) internal {\r\n        if (decimals[token] != 0) return; //already set\r\n\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            decimals[token] = ETH_DECIMALS;\r\n        } else {\r\n            decimals[token] = token.decimals();\r\n        }\r\n    }\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(IERC20 token, address user) internal view returns (uint256) {\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            return user.balance;\r\n        } else {\r\n            return token.balanceOf(user);\r\n        }\r\n    }\r\n\r\n    function getDecimals(IERC20 token) internal view returns (uint256) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint256 tokenDecimals = decimals[token];\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if (tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDestAmount(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcAmount,\r\n        uint256 rate\r\n    ) internal view returns (uint256) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 destAmount,\r\n        uint256 rate\r\n    ) internal view returns (uint256) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcDstQty(\r\n        uint256 srcQty,\r\n        uint256 srcDecimals,\r\n        uint256 dstDecimals,\r\n        uint256 rate\r\n    ) internal pure returns (uint256) {\r\n        require(srcQty <= MAX_QTY, \"srcQty > MAX_QTY\");\r\n        require(rate <= MAX_RATE, \"rate > MAX_RATE\");\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \"dst - src > MAX_DECIMALS\");\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \"src - dst > MAX_DECIMALS\");\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(\r\n        uint256 dstQty,\r\n        uint256 srcDecimals,\r\n        uint256 dstDecimals,\r\n        uint256 rate\r\n    ) internal pure returns (uint256) {\r\n        require(dstQty <= MAX_QTY, \"dstQty > MAX_QTY\");\r\n        require(rate <= MAX_RATE, \"rate > MAX_RATE\");\r\n\r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint256 numerator;\r\n        uint256 denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \"src - dst > MAX_DECIMALS\");\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \"dst - src > MAX_DECIMALS\");\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n\r\n    function calcRateFromQty(\r\n        uint256 srcAmount,\r\n        uint256 destAmount,\r\n        uint256 srcDecimals,\r\n        uint256 dstDecimals\r\n    ) internal pure returns (uint256) {\r\n        require(srcAmount <= MAX_QTY, \"srcAmount > MAX_QTY\");\r\n        require(destAmount <= MAX_QTY, \"destAmount > MAX_QTY\");\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \"dst - src > MAX_DECIMALS\");\r\n            return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \"src - dst > MAX_DECIMALS\");\r\n            return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);\r\n        }\r\n    }\r\n\r\n    function minOf(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x > y ? y : x;\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/utils/PermissionGroups3.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ncontract PermissionGroups3 {\r\n    uint256 internal constant MAX_GROUP_SIZE = 50;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address => bool) internal operators;\r\n    mapping(address => bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n\r\n    event AdminClaimed(address newAdmin, address previousAdmin);\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    event AlerterAdded(address newAlerter, bool isAdd);\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin 0\");\r\n        admin = _admin;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"only operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender], \"only alerter\");\r\n        _;\r\n    }\r\n\r\n    function getOperators() external view returns (address[] memory) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters() external view returns (address[] memory) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0), \"new admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0), \"admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        emit AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender, \"not pending\");\r\n        emit AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter], \"alerter exists\"); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE, \"max alerters\");\r\n\r\n        emit AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter(address alerter) public onlyAdmin {\r\n        require(alerters[alerter], \"not alerter\");\r\n        alerters[alerter] = false;\r\n\r\n        for (uint256 i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.pop();\r\n                emit AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator], \"operator exists\"); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE, \"max operators\");\r\n\r\n        emit OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator(address operator) public onlyAdmin {\r\n        require(operators[operator], \"not operator\");\r\n        operators[operator] = false;\r\n\r\n        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.pop();\r\n                emit OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/utils/Withdrawable3.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ncontract Withdrawable3 is PermissionGroups3 {\r\n    constructor(address _admin) public PermissionGroups3(_admin) {}\r\n\r\n    event TokenWithdraw(IERC20 token, uint256 amount, address sendTo);\r\n\r\n    event EtherWithdraw(uint256 amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all IERC20 compatible tokens\r\n     * @param token IERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address sendTo\r\n    ) external onlyAdmin {\r\n        token.transfer(sendTo, amount);\r\n        emit TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint256 amount, address payable sendTo) external onlyAdmin {\r\n        (bool success, ) = sendTo.call{value: amount}(\"\");\r\n        require(success);\r\n        emit EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/utils/zeppelin/SafeMath.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/utils/zeppelin/Address.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/utils/zeppelin/SafeERC20.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/reserves/KyberFprReserveV2.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title KyberFprReserve version 2\r\n/// Allow Reserve to work work with either weth or eth.\r\n/// for working with weth should specify external address to hold weth.\r\n/// Allow Reserve to set maxGasPriceWei to trade with\r\ncontract KyberFprReserveV2 is IKyberReserve, Utils5, Withdrawable3 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(bytes32 => bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\r\n    mapping(address => address) public tokenWallet;\r\n\r\n    struct ConfigData {\r\n        bool tradeEnabled;\r\n        bool doRateValidation; // whether to do rate validation in trade func\r\n        uint128 maxGasPriceWei;\r\n    }\r\n\r\n    address public kyberNetwork;\r\n    ConfigData internal configData;\r\n\r\n    IConversionRates public conversionRatesContract;\r\n    IKyberSanity public sanityRatesContract;\r\n    IWeth public weth;\r\n\r\n    event DepositToken(IERC20 indexed token, uint256 amount);\r\n    event TradeExecute(\r\n        address indexed origin,\r\n        IERC20 indexed src,\r\n        uint256 srcAmount,\r\n        IERC20 indexed destToken,\r\n        uint256 destAmount,\r\n        address payable destAddress\r\n    );\r\n    event TradeEnabled(bool enable);\r\n    event MaxGasPriceUpdated(uint128 newMaxGasPrice);\r\n    event DoRateValidationUpdated(bool doRateValidation);\r\n    event WithdrawAddressApproved(IERC20 indexed token, address indexed addr, bool approve);\r\n    event NewTokenWallet(IERC20 indexed token, address indexed wallet);\r\n    event WithdrawFunds(IERC20 indexed token, uint256 amount, address indexed destination);\r\n    event SetKyberNetworkAddress(address indexed network);\r\n    event SetConversionRateAddress(IConversionRates indexed rate);\r\n    event SetWethAddress(IWeth indexed weth);\r\n    event SetSanityRateAddress(IKyberSanity indexed sanity);\r\n\r\n    constructor(\r\n        address _kyberNetwork,\r\n        IConversionRates _ratesContract,\r\n        IWeth _weth,\r\n        uint128 _maxGasPriceWei,\r\n        bool _doRateValidation,\r\n        address _admin\r\n    ) public Withdrawable3(_admin) {\r\n        require(_kyberNetwork != address(0), \"kyberNetwork 0\");\r\n        require(_ratesContract != IConversionRates(0), \"ratesContract 0\");\r\n        require(_weth != IWeth(0), \"weth 0\");\r\n        kyberNetwork = _kyberNetwork;\r\n        conversionRatesContract = _ratesContract;\r\n        weth = _weth;\r\n        configData = ConfigData({\r\n            tradeEnabled: true,\r\n            maxGasPriceWei: _maxGasPriceWei,\r\n            doRateValidation: _doRateValidation\r\n        });\r\n    }\r\n\r\n    receive() external payable {\r\n        emit DepositToken(ETH_TOKEN_ADDRESS, msg.value);\r\n    }\r\n\r\n    function trade(\r\n        IERC20 srcToken,\r\n        uint256 srcAmount,\r\n        IERC20 destToken,\r\n        address payable destAddress,\r\n        uint256 conversionRate,\r\n        bool /* validate */\r\n    ) external override payable returns (bool) {\r\n        require(msg.sender == kyberNetwork, \"wrong sender\");\r\n        ConfigData memory data = configData;\r\n        require(data.tradeEnabled, \"trade not enable\");\r\n        require(tx.gasprice <= uint256(data.maxGasPriceWei), \"gas price too high\");\r\n\r\n        doTrade(\r\n            srcToken,\r\n            srcAmount,\r\n            destToken,\r\n            destAddress,\r\n            conversionRate,\r\n            data.doRateValidation\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function enableTrade() external onlyAdmin {\r\n        configData.tradeEnabled = true;\r\n        emit TradeEnabled(true);\r\n    }\r\n\r\n    function disableTrade() external onlyAlerter {\r\n        configData.tradeEnabled = false;\r\n        emit TradeEnabled(false);\r\n    }\r\n\r\n    function setMaxGasPrice(uint128 newMaxGasPrice) external onlyOperator {\r\n        configData.maxGasPriceWei = newMaxGasPrice;\r\n        emit MaxGasPriceUpdated(newMaxGasPrice);\r\n    }\r\n\r\n    function setDoRateValidation(bool _doRateValidation) external onlyAdmin {\r\n        configData.doRateValidation = _doRateValidation;\r\n        emit DoRateValidationUpdated(_doRateValidation);\r\n    }\r\n\r\n    function approveWithdrawAddress(\r\n        IERC20 token,\r\n        address addr,\r\n        bool approve\r\n    ) external onlyAdmin {\r\n        approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), addr))] = approve;\r\n        setDecimals(token);\r\n        emit WithdrawAddressApproved(token, addr, approve);\r\n    }\r\n\r\n    /// @dev allow set tokenWallet[token] back to 0x0 address\r\n    /// @dev in case of using weth from external wallet, must call set token wallet for weth\r\n    ///      tokenWallet for weth must be different from this reserve address\r\n    function setTokenWallet(IERC20 token, address wallet) external onlyAdmin {\r\n        tokenWallet[address(token)] = wallet;\r\n        setDecimals(token);\r\n        emit NewTokenWallet(token, wallet);\r\n    }\r\n\r\n    /// @dev withdraw amount of token to an approved destination\r\n    ///      if reserve is using weth instead of eth, should call withdraw weth\r\n    /// @param token token to withdraw\r\n    /// @param amount amount to withdraw\r\n    /// @param destination address to transfer fund to\r\n    function withdraw(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address destination\r\n    ) external onlyOperator {\r\n        require(\r\n            approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), destination))],\r\n            \"destination is not approved\"\r\n        );\r\n\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            (bool success, ) = destination.call{value: amount}(\"\");\r\n            require(success, \"withdraw eth failed\");\r\n        } else {\r\n            address wallet = getTokenWallet(token);\r\n            if (wallet == address(this)) {\r\n                token.safeTransfer(destination, amount);\r\n            } else {\r\n                token.safeTransferFrom(wallet, destination, amount);\r\n            }\r\n        }\r\n\r\n        emit WithdrawFunds(token, amount, destination);\r\n    }\r\n\r\n    function setKyberNetwork(address _newNetwork) external onlyAdmin {\r\n        require(_newNetwork != address(0), \"kyberNetwork 0\");\r\n        kyberNetwork = _newNetwork;\r\n        emit SetKyberNetworkAddress(_newNetwork);\r\n    }\r\n\r\n    function setConversionRate(IConversionRates _newConversionRate) external onlyAdmin {\r\n        require(_newConversionRate != IConversionRates(0), \"conversionRates 0\");\r\n        conversionRatesContract = _newConversionRate;\r\n        emit SetConversionRateAddress(_newConversionRate);\r\n    }\r\n\r\n    /// @dev weth is unlikely to be changed, but added this function to keep the flexibilty\r\n    function setWeth(IWeth _newWeth) external onlyAdmin {\r\n        require(_newWeth != IWeth(0), \"weth 0\");\r\n        weth = _newWeth;\r\n        emit SetWethAddress(_newWeth);\r\n    }\r\n\r\n    /// @dev sanity rate can be set to 0x0 address to disable sanity rate check\r\n    function setSanityRate(IKyberSanity _newSanity) external onlyAdmin {\r\n        sanityRatesContract = _newSanity;\r\n        emit SetSanityRateAddress(_newSanity);\r\n    }\r\n\r\n    function getConversionRate(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty,\r\n        uint256 blockNumber\r\n    ) external override view returns (uint256) {\r\n        ConfigData memory data = configData;\r\n        if (!data.tradeEnabled) return 0;\r\n        if (tx.gasprice > uint256(data.maxGasPriceWei)) return 0;\r\n        if (srcQty == 0) return 0;\r\n\r\n        IERC20 token;\r\n        bool isBuy;\r\n\r\n        if (ETH_TOKEN_ADDRESS == src) {\r\n            isBuy = true;\r\n            token = dest;\r\n        } else if (ETH_TOKEN_ADDRESS == dest) {\r\n            isBuy = false;\r\n            token = src;\r\n        } else {\r\n            return 0; // pair is not listed\r\n        }\r\n\r\n        uint256 rate;\r\n        try conversionRatesContract.getRate(token, blockNumber, isBuy, srcQty) returns(uint256 r) {\r\n            rate = r;\r\n        } catch {\r\n            return 0;\r\n        }\r\n        uint256 destQty = calcDestAmount(src, dest, srcQty, rate);\r\n\r\n        if (getBalance(dest) < destQty) return 0;\r\n\r\n        if (sanityRatesContract != IKyberSanity(0)) {\r\n            uint256 sanityRate = sanityRatesContract.getSanityRate(src, dest);\r\n            if (rate > sanityRate) return 0;\r\n        }\r\n\r\n        return rate;\r\n    }\r\n\r\n    function isAddressApprovedForWithdrawal(IERC20 token, address addr)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return approvedWithdrawAddresses[keccak256(abi.encodePacked(address(token), addr))];\r\n    }\r\n\r\n    function tradeEnabled() external view returns (bool) {\r\n        return configData.tradeEnabled;\r\n    }\r\n\r\n    function maxGasPriceWei() external view returns (uint128) {\r\n        return configData.maxGasPriceWei;\r\n    }\r\n\r\n    function doRateValidation() external view returns (bool) {\r\n        return configData.doRateValidation;\r\n    }\r\n\r\n    /// @dev return available balance of a token that reserve can use\r\n    ///      if using weth, call getBalance(eth) will return weth balance\r\n    ///      if using wallet for token, will return min of balance and allowance\r\n    /// @param token token to get available balance that reserve can use\r\n    function getBalance(IERC20 token) public view returns (uint256) {\r\n        address wallet = getTokenWallet(token);\r\n        IERC20 usingToken;\r\n\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            if (wallet == address(this)) {\r\n                // reserve should be using eth instead of weth\r\n                return address(this).balance;\r\n            }\r\n            // reserve is using weth instead of eth\r\n            usingToken = weth;\r\n        } else {\r\n            if (wallet == address(this)) {\r\n                // not set token wallet or reserve is the token wallet, no need to check allowance\r\n                return token.balanceOf(address(this));\r\n            }\r\n            usingToken = token;\r\n        }\r\n\r\n        uint256 balanceOfWallet = usingToken.balanceOf(wallet);\r\n        uint256 allowanceOfWallet = usingToken.allowance(wallet, address(this));\r\n\r\n        return minOf(balanceOfWallet, allowanceOfWallet);\r\n    }\r\n\r\n    /// @dev return wallet that holds the token\r\n    ///      if token is ETH, check tokenWallet of WETH instead\r\n    ///      if wallet is 0x0, consider as this reserve address\r\n    function getTokenWallet(IERC20 token) public view returns (address wallet) {\r\n        wallet = (token == ETH_TOKEN_ADDRESS)\r\n            ? tokenWallet[address(weth)]\r\n            : tokenWallet[address(token)];\r\n        if (wallet == address(0)) {\r\n            wallet = address(this);\r\n        }\r\n    }\r\n\r\n    /// @dev do a trade, re-validate the conversion rate, remove trust assumption with network\r\n    /// @param srcToken Src token\r\n    /// @param srcAmount Amount of src token\r\n    /// @param destToken Destination token\r\n    /// @param destAddress Destination address to send tokens to\r\n    /// @param validateRate re-validate rate or not\r\n    function doTrade(\r\n        IERC20 srcToken,\r\n        uint256 srcAmount,\r\n        IERC20 destToken,\r\n        address payable destAddress,\r\n        uint256 conversionRate,\r\n        bool validateRate\r\n    ) internal {\r\n        require(conversionRate > 0, \"rate is 0\");\r\n\r\n        bool isBuy = srcToken == ETH_TOKEN_ADDRESS;\r\n        if (isBuy) {\r\n            require(msg.value == srcAmount, \"wrong msg value\");\r\n        } else {\r\n            require(msg.value == 0, \"bad msg value\");\r\n        }\r\n\r\n        if (validateRate) {\r\n            uint256 rate = conversionRatesContract.getRate(\r\n                isBuy ? destToken : srcToken,\r\n                block.number,\r\n                isBuy,\r\n                srcAmount\r\n            );\r\n            // re-validate conversion rate\r\n            require(rate >= conversionRate, \"reserve rate lower then network requested rate\");\r\n            if (sanityRatesContract != IKyberSanity(0)) {\r\n                // sanity rate check\r\n                uint256 sanityRate = sanityRatesContract.getSanityRate(srcToken, destToken);\r\n                require(rate <= sanityRate, \"rate should not be greater than sanity rate\" );\r\n            }\r\n        }\r\n\r\n        uint256 destAmount = calcDestAmount(srcToken, destToken, srcAmount, conversionRate);\r\n        require(destAmount > 0, \"dest amount is 0\");\r\n\r\n        address srcTokenWallet = getTokenWallet(srcToken);\r\n        address destTokenWallet = getTokenWallet(destToken);\r\n\r\n        if (isBuy) {\r\n            // add to imbalance\r\n            conversionRatesContract.recordImbalance(\r\n                destToken,\r\n                int256(destAmount),\r\n                0,\r\n                block.number\r\n            );\r\n            // if reserve is using weth, convert eth to weth and transfer weth to its' tokenWallet\r\n            if (srcTokenWallet != address(this)) {\r\n                weth.deposit{value: msg.value}();\r\n                IERC20(weth).safeTransfer(srcTokenWallet, msg.value);\r\n            }\r\n            // transfer dest token from tokenWallet to destAddress\r\n            if (destTokenWallet == address(this)) {\r\n                destToken.safeTransfer(destAddress, destAmount);\r\n            } else {\r\n                destToken.safeTransferFrom(destTokenWallet, destAddress, destAmount);\r\n            }\r\n        } else {\r\n            // add to imbalance\r\n            conversionRatesContract.recordImbalance(\r\n                srcToken,\r\n                -1 * int256(srcAmount),\r\n                0,\r\n                block.number\r\n            );\r\n            // collect src token from sender\r\n            srcToken.safeTransferFrom(msg.sender, srcTokenWallet, srcAmount);\r\n            // if reserve is using weth, reserve needs to collect weth from tokenWallet,\r\n            // then convert it to eth\r\n            if (destTokenWallet != address(this)) {\r\n                IERC20(weth).safeTransferFrom(destTokenWallet, address(this), destAmount);\r\n                weth.withdraw(destAmount);\r\n            }\r\n            // transfer eth to destAddress\r\n            (bool success, ) = destAddress.call{value: destAmount}(\"\");\r\n            require(success, \"transfer eth from reserve to destAddress failed\");\r\n        }\r\n\r\n        emit TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberNetwork\",\"type\":\"address\"},{\"internalType\":\"contract IConversionRates\",\"name\":\"_ratesContract\",\"type\":\"address\"},{\"internalType\":\"contract IWeth\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_maxGasPriceWei\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"_doRateValidation\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"doRateValidation\",\"type\":\"bool\"}],\"name\":\"DoRateValidationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newMaxGasPrice\",\"type\":\"uint128\"}],\"name\":\"MaxGasPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"NewTokenWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConversionRates\",\"name\":\"rate\",\"type\":\"address\"}],\"name\":\"SetConversionRateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"}],\"name\":\"SetKyberNetworkAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IKyberSanity\",\"name\":\"sanity\",\"type\":\"address\"}],\"name\":\"SetSanityRateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IWeth\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"SetWethAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"TradeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"destAddress\",\"type\":\"address\"}],\"name\":\"TradeExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"WithdrawAddressApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"approveWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedWithdrawAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionRatesContract\",\"outputs\":[{\"internalType\":\"contract IConversionRates\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doRateValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAddressApprovedForWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPriceWei\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanityRatesContract\",\"outputs\":[{\"internalType\":\"contract IKyberSanity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConversionRates\",\"name\":\"_newConversionRate\",\"type\":\"address\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doRateValidation\",\"type\":\"bool\"}],\"name\":\"setDoRateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNetwork\",\"type\":\"address\"}],\"name\":\"setKyberNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxGasPrice\",\"type\":\"uint128\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberSanity\",\"name\":\"_newSanity\",\"type\":\"address\"}],\"name\":\"setSanityRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTokenWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"_newWeth\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KyberFprReserveV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009cb7bb6d4795a281860b9bfb7b1441361cc9a7940000000000000000000000009cb7bb6d4795a281860b9bfb7b1441361cc9a794000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000003a352944000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a57bd00134b2850b2a1c55860c9e9ea100fdd6cf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b076000d7c092765c094dfc8c4a253abe8fa21b757e5813a94f763e53386c850"}]}