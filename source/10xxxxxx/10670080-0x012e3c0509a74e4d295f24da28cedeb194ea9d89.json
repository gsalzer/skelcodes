{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\n\ninterface IRealityCards {\n\n    function collectRentAllTokens() external;\n    function numberOfTokens() external view returns(uint); \n    function ownerOf(uint) external view returns(address);\n    function currentOwnerRemainingDeposit(uint) external view returns(uint);\n\n}\n\ncontract rentCollector {\n    IRealityCards rc1 = IRealityCards(0x148Bb64E8910422E74f79feF1A2E830BDe0BB938); //election\n    IRealityCards rc2 = IRealityCards(0xf30a16DdFDfbA014789E577bC59c6e2E89cEE0f5); //boxing\n    IRealityCards rc3 = IRealityCards(0x231C66E7474FC300b000b35E1CF321D2405bb9f0); //curve\n    \n    function collectRentAllTokensAllMarkets() public \n    {\n        bool expired = false;\n        \n        //rc1:\n        expired = false;\n        for (uint i = 0; i < rc1.numberOfTokens(); i++) {\n            if (rc1.currentOwnerRemainingDeposit(i) == 0) {\n                expired = true;\n            }\n        if (expired) {\n            rc1.collectRentAllTokens(); \n            }\n        }\n        \n        // //rc2:\n        // expired = false;\n        // for (uint i = 0; i < rc2.numberOfTokens(); i++) {\n        //     if (rc2.currentOwnerRemainingDeposit(i) == 0) {\n        //         expired = true;\n        //     }\n        // if (expired) {\n        //     rc2.collectRentAllTokens(); \n        //     }\n        // }\n        \n        // //rc3:\n        // expired = false;\n        // for (uint i = 0; i < rc3.numberOfTokens(); i++) {\n        //     if (rc3.currentOwnerRemainingDeposit(i) == 0) {\n        //         expired = true;\n        //     }\n        // if (expired) {\n        //     rc3.collectRentAllTokens(); \n        //     }\n        // }\n        \n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"collectRentAllTokensAllMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"rentCollector","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}