{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\ncontract Owned {\r\n\r\n  address payable public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\ncontract Whitelisted is Owned {\r\n\r\n  bool public whitelistEnabled;\r\n  mapping(address => bool) public whitelisted;\r\n\r\n  event AddedToWhitelist(address user);\r\n  event RemovedFromWhitelist(address user);\r\n  event WhitelistEnabled();\r\n  event WhitelistDisabled();\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    whitelistEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an address to the whitelist\r\n   * @param _user The address to whitelist\r\n   */\r\n  function addToWhitelist(address _user) external onlyOwner() {\r\n    whitelisted[_user] = true;\r\n    emit AddedToWhitelist(_user);\r\n  }\r\n\r\n  /**\r\n   * @notice Removes an address from the whitelist\r\n   * @param _user The address to remove\r\n   */\r\n  function removeFromWhitelist(address _user) external onlyOwner() {\r\n    delete whitelisted[_user];\r\n    emit RemovedFromWhitelist(_user);\r\n  }\r\n\r\n  /**\r\n   * @notice makes the whitelist check enforced\r\n   */\r\n  function enableWhitelist()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    whitelistEnabled = true;\r\n\r\n    emit WhitelistEnabled();\r\n  }\r\n\r\n  /**\r\n   * @notice makes the whitelist check unenforced\r\n   */\r\n  function disableWhitelist()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    whitelistEnabled = false;\r\n\r\n    emit WhitelistDisabled();\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if the caller is not whitelisted\r\n   */\r\n  modifier isWhitelisted() {\r\n    require(whitelisted[msg.sender] || !whitelistEnabled, \"Not whitelisted\");\r\n    _;\r\n  }\r\n}\r\ninterface HistoricAggregatorInterface {\r\n  function latestAnswer() external returns (int256);\r\n  function latestTimestamp() external returns (uint256);\r\n  function latestRound() external returns (uint256);\r\n  function getAnswer(uint256 roundId) external returns (int256);\r\n  function getTimestamp(uint256 roundId) external returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\ninterface AggregatorInterface is HistoricAggregatorInterface {\r\n  function decimals() external returns (uint8);\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n}\r\ncontract AggregatorProxy is AggregatorInterface, Owned {\r\n\r\n  AggregatorInterface public aggregator;\r\n\r\n  constructor(address _aggregator) public Owned() {\r\n    setAggregator(_aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   */\r\n  function latestAnswer()\r\n    external\r\n    virtual\r\n    override\r\n    returns (int256)\r\n  {\r\n    return _latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the last updated height from aggregator delegated to.\r\n   */\r\n  function latestTimestamp()\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (int256)\r\n  {\r\n    return _getAnswer(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _getTimestamp(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated\r\n   */\r\n  function latestRound()\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _latestRound();\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorInterface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _getRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorInterface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    external\r\n    virtual\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _latestRoundData();\r\n  }\r\n\r\n  /**\r\n   * @notice represents the number of decimals the aggregator responses represent.\r\n   */\r\n  function decimals()\r\n    external\r\n    override\r\n    returns (uint8)\r\n  {\r\n    return aggregator.decimals();\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to update the aggregator address.\r\n   * @param _aggregator The new address for the aggregator contract\r\n   */\r\n  function setAggregator(address _aggregator)\r\n    public\r\n    onlyOwner()\r\n  {\r\n    aggregator = AggregatorInterface(_aggregator);\r\n  }\r\n\r\n  /*\r\n   * Internal\r\n   */\r\n\r\n  function _latestAnswer()\r\n    internal\r\n    returns (int256)\r\n  {\r\n    return aggregator.latestAnswer();\r\n  }\r\n\r\n  function _latestTimestamp()\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    return aggregator.latestTimestamp();\r\n  }\r\n\r\n  function _getAnswer(uint256 _roundId)\r\n    internal\r\n    returns (int256)\r\n  {\r\n    return aggregator.getAnswer(_roundId);\r\n  }\r\n\r\n  function _getTimestamp(uint256 _roundId)\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    return aggregator.getTimestamp(_roundId);\r\n  }\r\n\r\n  function _latestRound()\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    return aggregator.latestRound();\r\n  }\r\n\r\n  function _getRoundData(uint256 _roundId)\r\n    internal\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return aggregator.getRoundData(_roundId);\r\n  }\r\n\r\n  function _latestRoundData()\r\n    internal\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return aggregator.latestRoundData();\r\n  }\r\n}\r\ncontract WhitelistedAggregatorProxy is AggregatorProxy, Whitelisted {\r\n\r\n  constructor(address _aggregator) public AggregatorProxy(_aggregator) {\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   * @dev overridden function to add the isWhitelisted() modifier\r\n   */\r\n  function latestAnswer()\r\n    external\r\n    override\r\n    isWhitelisted()\r\n    returns (int256)\r\n  {\r\n    return _latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the last updated height from aggregator delegated to.\r\n   * @dev overridden function to add the isWhitelisted() modifier\r\n   */\r\n  function latestTimestamp()\r\n    external\r\n    override\r\n    isWhitelisted()\r\n    returns (uint256)\r\n  {\r\n    return _latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   * @dev overridden function to add the isWhitelisted() modifier\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    external\r\n    override\r\n    isWhitelisted()\r\n    returns (int256)\r\n  {\r\n    return _getAnswer(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   * @dev overridden function to add the isWhitelisted() modifier\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    external\r\n    override\r\n    isWhitelisted()\r\n    returns (uint256)\r\n  {\r\n    return _getTimestamp(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated\r\n   * @dev overridden function to add the isWhitelisted() modifier\r\n   */\r\n  function latestRound()\r\n    external\r\n    override\r\n    isWhitelisted()\r\n    returns (uint256)\r\n  {\r\n    return _latestRound();\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorInterface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    isWhitelisted()\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _getRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorInterface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorInterface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    external\r\n    isWhitelisted()\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _latestRoundData();\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answeredInRound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answeredInRound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WhitelistedAggregatorProxy","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ca946a2d9b5d6e505378516e4184dc109340b1c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3aaa61f3a2dcc810b66b70336aca27281f9336b07f9908514576384e3e3b203e"}]}