{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/lib/Select.sol\n\npragma solidity 0.5.17;\n\n\n\n/**\n * @title Select\n * @dev Median Selection Library\n */\nlibrary Select {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Sorts the input array up to the denoted size, and returns the median.\n     * @param array Input array to compute its median.\n     * @param size Number of elements in array to compute the median for.\n     * @return Median of array.\n     */\n    function computeMedian(uint256[] memory array, uint256 size)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(size > 0 && array.length >= size);\n        for (uint256 i = 1; i < size; i++) {\n            for (uint256 j = i; j > 0 && array[j-1] > array[j]; j--) {\n                uint256 tmp = array[j];\n                array[j] = array[j-1];\n                array[j-1] = tmp;\n            }\n        }\n        if (size % 2 == 1) {\n            return array[size / 2];\n        } else {\n            return array[size / 2].add(array[size / 2 - 1]) / 2;\n        }\n    }\n}\n\n// File: contracts/IOracle.sol\n\npragma solidity 0.5.17;\n\n\ninterface IOracle {\n    function getData() external returns (uint256, bool);\n    function pushReport(uint256 payload) external;\n}\n\n// File: contracts/MedianOracle.sol\n\npragma solidity 0.5.17;\n\n\n\n\n\n\n/**\n * @title Median Oracle\n *\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\n *         providers.\n */\ncontract MedianOracle is Ownable, IOracle {\n    using SafeMath for uint256;\n\n    struct Report {\n        uint256 timestamp;\n        uint256 payload;\n    }\n\n    // Addresses of providers authorized to push reports.\n    address[] public providers;\n\n    // Reports indexed by provider address. Report[0].timestamp > 0\n    // indicates provider existence.\n    mapping (address => Report[2]) public providerReports;\n\n    event ProviderAdded(address provider);\n    event ProviderRemoved(address provider);\n    event ReportTimestampOutOfRange(address provider);\n    event ProviderReportPushed(address indexed provider, uint256 payload, uint256 timestamp);\n\n    // The number of seconds after which the report is deemed expired.\n    uint256 public reportExpirationTimeSec;\n\n    // The number of seconds since reporting that has to pass before a report\n    // is usable.\n    uint256 public reportDelaySec;\n\n    // The minimum number of providers with valid reports to consider the\n    // aggregate report valid.\n    uint256 public minimumProviders;\n\n    // Timestamp of 1 is used to mark uninitialized and invalidated data.\n    // This is needed so that timestamp of 1 is always considered expired.\n    uint256 private maxReportExpirationTime;\n\n     /**\n     * @notice Sets the report expiration period.\n     * @param reportExpirationTimeSec_ The number of seconds after which the\n     *        report is deemed expired.\n     */\n    function setReportExpirationTimeSec(uint256 reportExpirationTimeSec_)\n        external\n        onlyOwner\n    {\n        require(reportExpirationTimeSec_ <= maxReportExpirationTime);\n        reportExpirationTimeSec = reportExpirationTimeSec_;\n    }\n\n    /**\n    * @notice Sets the time period since reporting that has to pass before a\n    *         report is usable.\n    * @param reportDelaySec_ The new delay period in seconds.\n    */\n    function setReportDelaySec(uint256 reportDelaySec_)\n        external\n        onlyOwner\n    {\n        reportDelaySec = reportDelaySec_;\n    }\n\n    /**\n    * @notice Sets the minimum number of providers with valid reports to\n    *         consider the aggregate report valid.\n    * @param minimumProviders_ The new minimum number of providers.\n    */\n    function setMinimumProviders(uint256 minimumProviders_)\n        external\n        onlyOwner\n    {\n        require(minimumProviders_ > 0);\n        minimumProviders = minimumProviders_;\n    }\n\n    /**\n     * @notice Pushes a report for the calling provider.\n     * @param payload is expected to be 18 decimal fixed point number.\n     */\n    function pushReport(uint256 payload) external\n    {\n        address providerAddress = msg.sender;\n        Report[2] storage reports = providerReports[providerAddress];\n        uint256[2] memory timestamps = [reports[0].timestamp, reports[1].timestamp];\n\n        require(timestamps[0] > 0);\n\n        uint8 indexRecent = timestamps[0] >= timestamps[1] ? 0 : 1;\n        uint8 indexPast = 1 - indexRecent;\n\n        // Check that the push is not too soon after the last one.\n        require(timestamps[indexRecent].add(reportDelaySec) <= now);\n\n        reports[indexPast].timestamp = now;\n        reports[indexPast].payload = payload;\n\n        emit ProviderReportPushed(providerAddress, payload, now);\n    }\n\n    /**\n    * @notice Invalidates the reports of the calling provider.\n    */\n    function purgeReports() external\n    {\n        address providerAddress = msg.sender;\n        require(providerReports[providerAddress][0].timestamp > 0);\n        providerReports[providerAddress][0].timestamp = 1;\n        providerReports[providerAddress][1].timestamp = 1;\n    }\n\n    /**\n    * @notice Computes median of provider reports whose timestamps are in the\n    *         valid timestamp range.\n    * @return AggregatedValue: Median of providers reported values.\n    *         valid: Boolean indicating an aggregated value was computed successfully.\n    */\n    function getData()\n        external\n        returns (uint256, bool)\n    {\n        uint256 reportsCount = providers.length;\n        uint256[] memory validReports = new uint256[](reportsCount);\n        uint256 size = 0;\n        uint256 minValidTimestamp =  now.sub(reportExpirationTimeSec);\n        uint256 maxValidTimestamp =  now.sub(reportDelaySec);\n\n        for (uint256 i = 0; i < reportsCount; i++) {\n            address providerAddress = providers[i];\n            Report[2] memory reports = providerReports[providerAddress];\n\n            uint8 indexRecent = reports[0].timestamp >= reports[1].timestamp ? 0 : 1;\n            uint8 indexPast = 1 - indexRecent;\n            uint256 reportTimestampRecent = reports[indexRecent].timestamp;\n            if (reportTimestampRecent > maxValidTimestamp) {\n                // Recent report is too recent.\n                uint256 reportTimestampPast = providerReports[providerAddress][indexPast].\n                    timestamp;\n                if (reportTimestampPast < minValidTimestamp) {\n                    // Past report is too old.\n                    emit ReportTimestampOutOfRange(providerAddress);\n                } else if (reportTimestampPast > maxValidTimestamp) {\n                    // Past report is too recent.\n                    emit ReportTimestampOutOfRange(providerAddress);\n                } else {\n                    // Using past report.\n                    validReports[size++] = providerReports[providerAddress][indexPast].payload;\n                }\n            } else {\n                // Recent report is not too recent.\n                if (reportTimestampRecent < minValidTimestamp) {\n                    // Recent report is too old.\n                    emit ReportTimestampOutOfRange(providerAddress);\n                } else {\n                    // Using recent report.\n                    validReports[size++] = providerReports[providerAddress][indexRecent].payload;\n                }\n            }\n        }\n\n        if (size < minimumProviders) {\n            return (0, false);\n        }\n\n        return (Select.computeMedian(validReports, size), true);\n    }\n\n    /**\n     * @notice Authorizes a provider.\n     * @param provider Address of the provider.\n     */\n    function addProvider(address provider)\n        external\n        onlyOwner\n    {\n        require(providerReports[provider][0].timestamp == 0);\n        providers.push(provider);\n        providerReports[provider][0].timestamp = 1;\n        emit ProviderAdded(provider);\n    }\n\n    /**\n     * @notice Revokes provider authorization.\n     * @param provider Address of the provider.\n     */\n    function removeProvider(address provider)\n        external\n        onlyOwner\n    {\n        delete providerReports[provider];\n        for (uint256 i = 0; i < providers.length; i++) {\n            if (providers[i] == provider) {\n                if (i + 1 != providers.length) {\n                    providers[i] = providers[providers.length-1];\n                }\n                providers.length--;\n                emit ProviderRemoved(provider);\n                break;\n            }\n        }\n    }\n\n    /**\n     * @return The number of authorized providers.\n     */\n    function providersSize()\n        external\n        view\n        returns (uint256)\n    {\n        return providers.length;\n    }\n\n    /**\n    * @param reportExpirationTimeSec_ The number of seconds after which the\n    *                                 report is deemed expired.\n    * @param reportDelaySec_ The number of seconds since reporting that has to\n    *                        pass before a report is usable\n    * @param minimumProviders_ The minimum number of providers with valid\n    *                          reports to consider the aggregate report valid.\n    */\n    function initialize(\n            address owner_,\n            uint256 reportExpirationTimeSec_,\n            uint256 reportDelaySec_,\n            uint256 minimumProviders_\n        )\n        public\n        initializer\n    {\n        Ownable.initialize(owner_);\n\n        minimumProviders = 1;\n        maxReportExpirationTime = 520 weeks;\n\n        require(reportExpirationTimeSec_ <= maxReportExpirationTime);\n        require(minimumProviders_ > 0);\n\n        reportExpirationTimeSec = reportExpirationTimeSec_;\n        reportDelaySec = reportDelaySec_;\n        minimumProviders = minimumProviders_;\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProviderReportPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ReportTimestampOutOfRange\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"addProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportDelaySec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providerReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"}],\"name\":\"pushReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportDelaySec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportExpirationTimeSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"name\":\"setMinimumProviders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportDelaySec_\",\"type\":\"uint256\"}],\"name\":\"setReportDelaySec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"}],\"name\":\"setReportExpirationTimeSec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MedianOracle","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}