{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract XForsage {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        mapping(uint8 => bool) activeYo3Levels;\r\n        mapping(uint8 => bool) activeYo4Levels;\r\n        mapping(uint8 => Yo3Manual) Yo3Matrix;\r\n        mapping(uint8 => Yo4Auto) Yo4Matrix;\r\n    }\r\n    \r\n    struct Yo3Manual {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Yo4Auto {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    bool public lockStatus;\r\n    uint8 public constant LAST_LEVEL = 12;\r\n    uint public lastUserId = 2;\r\n    address public ownerAddress;\r\n    \r\n    mapping (uint8 => uint) public levelPrice;\r\n    mapping (address => User) public users;\r\n    mapping (uint => address) public userIds;\r\n    mapping (address => mapping (uint8 => mapping (uint8 => uint))) public earnedEth; \r\n    mapping (address => mapping (uint8 => uint)) public totalEarnedEth;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress,\"only Owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier isLock() {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        _;\r\n    }\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId, uint time);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level , uint time);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 indexed level, uint time);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place, uint time);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level, uint time);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level, uint time);\r\n    \r\n    constructor() public {\r\n\r\n        levelPrice[1] = 0.020 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        ownerAddress = msg.sender;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n       \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeYo3Levels[i] = true;\r\n            users[ownerAddress].activeYo4Levels[i] = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    // external functions\r\n    function() external payable {\r\n        revert(\"Invalid Contract Transaction\");\r\n    }\r\n    \r\n    function registrationExt(address referrerAddress) isLock external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) isLock external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeYo3Levels[level], \"level already activated\");\r\n            if (users[msg.sender].Yo3Matrix[level-1].blocked) {\r\n                users[msg.sender].Yo3Matrix[level-1].blocked = false;\r\n            }\r\n            address freeYo3Referrer = findFreeYo3Referrer(msg.sender, level);\r\n            users[msg.sender].Yo3Matrix[level].currentReferrer = freeYo3Referrer;\r\n            users[msg.sender].activeYo3Levels[level] = true;\r\n            updateYo3Referrer(msg.sender, freeYo3Referrer, level);\r\n            emit Upgrade(msg.sender, freeYo3Referrer, 1, level, now);\r\n        } else {\r\n            require(!users[msg.sender].activeYo4Levels[level], \"level already activated\"); \r\n            if (users[msg.sender].Yo4Matrix[level-1].blocked) {\r\n                users[msg.sender].Yo4Matrix[level-1].blocked = false;\r\n            }\r\n            address freeYo4Referrer = findFreeYo4Referrer(msg.sender, level);\r\n            users[msg.sender].activeYo4Levels[level] = true;\r\n            updateYo4Referrer(msg.sender, freeYo4Referrer, level);\r\n            emit Upgrade(msg.sender, freeYo4Referrer, 2, level, now);\r\n        }\r\n    }   \r\n    \r\n    // public functions\r\n    function failSafe(address payable _toUser, uint _amount) onlyOwner public returns (bool) {\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function contractLock(bool _lockStatus) onlyOwner public returns(bool) {\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function findFreeYo3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeYo3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeYo4Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeYo4Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveYo3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeYo3Levels[level];\r\n    }\r\n\r\n    function usersActiveYo4Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeYo4Levels[level];\r\n    }\r\n\r\n    function usersYo3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory,uint, bool) {\r\n        return (users[userAddress].Yo3Matrix[level].currentReferrer,\r\n                users[userAddress].Yo3Matrix[level].referrals,\r\n                users[userAddress].Yo3Matrix[level].reinvestCount,\r\n                users[userAddress].Yo3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersYo4Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address,uint) {\r\n        return (users[userAddress].Yo4Matrix[level].currentReferrer,\r\n                users[userAddress].Yo4Matrix[level].firstLevelReferrals,\r\n                users[userAddress].Yo4Matrix[level].secondLevelReferrals,\r\n                users[userAddress].Yo4Matrix[level].blocked,\r\n                users[userAddress].Yo4Matrix[level].closedPart,\r\n                users[userAddress].Yo4Matrix[level].reinvestCount);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    //private functions\r\n    function registration(address userAddress, address referrerAddress) isLock private {\r\n        require(msg.value == levelPrice[1].mul(2), \"Invalid registration cost\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract .. \");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeYo3Levels[1] = true; \r\n        users[userAddress].activeYo4Levels[1] = true;\r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeYo3Referrer = findFreeYo3Referrer(userAddress, 1);\r\n        users[userAddress].Yo3Matrix[1].currentReferrer = freeYo3Referrer;\r\n        updateYo3Referrer(userAddress, freeYo3Referrer, 1);\r\n\r\n        updateYo4Referrer(userAddress, findFreeYo4Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id, now);\r\n    }\r\n    \r\n    function updateYo3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].Yo3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].Yo3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].Yo3Matrix[level].referrals.length), now);\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3, now);\r\n        //close matrix\r\n        users[referrerAddress].Yo3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeYo3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].Yo3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != ownerAddress) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeYo3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].Yo3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].Yo3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            users[referrerAddress].Yo3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level, now);\r\n            updateYo3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(ownerAddress, userAddress, 1, level);\r\n            users[ownerAddress].Yo3Matrix[level].reinvestCount++;\r\n            emit Reinvest(ownerAddress, address(0), userAddress, 1, level, now);\r\n        }\r\n    }\r\n\r\n    function updateYo4Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeYo4Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.length), now);\r\n            \r\n            //set current level\r\n            users[userAddress].Yo4Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == ownerAddress) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].Yo4Matrix[level].currentReferrer;            \r\n            users[ref].Yo4Matrix[level].secondLevelReferrals.push(userAddress); \r\n            uint len = users[ref].Yo4Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].Yo4Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].Yo4Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                users[ref].Yo4Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4, now);\r\n                }\r\n            } else if (len == 2 && users[ref].Yo4Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }\r\n            return updateYo4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].Yo4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].Yo4Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].Yo4Matrix[level].closedPart)) {\r\n                updateYo4(userAddress, referrerAddress, level, true);\r\n                return updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].Yo4Matrix[level].closedPart) {\r\n                updateYo4(userAddress, referrerAddress, level, true);\r\n                return updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateYo4(userAddress, referrerAddress, level, false);\r\n                return updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateYo4(userAddress, referrerAddress, level, false);\r\n            return updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateYo4(userAddress, referrerAddress, level, true);\r\n            return updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0]].Yo4Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1]].Yo4Matrix[level].firstLevelReferrals.length) {\r\n            updateYo4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateYo4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateYo4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateYo4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0]].Yo4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0]].Yo4Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0]].Yo4Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].Yo4Matrix[level].currentReferrer = users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1]].Yo4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1]].Yo4Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1]].Yo4Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].Yo4Matrix[level].currentReferrer = users[referrerAddress].Yo4Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateYo4ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].Yo4Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory Yo4 = users[users[referrerAddress].Yo4Matrix[level].currentReferrer].Yo4Matrix[level].firstLevelReferrals;\r\n        \r\n        if (Yo4.length == 2) {\r\n            if (Yo4[0] == referrerAddress ||\r\n                Yo4[1] == referrerAddress) {\r\n                users[users[referrerAddress].Yo4Matrix[level].currentReferrer].Yo4Matrix[level].closedPart = referrerAddress;\r\n            } else if (Yo4.length == 1) {\r\n                if (Yo4[0] == referrerAddress) {\r\n                    users[users[referrerAddress].Yo4Matrix[level].currentReferrer].Yo4Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        users[referrerAddress].Yo4Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].Yo4Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].Yo4Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeYo4Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].Yo4Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].Yo4Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != ownerAddress) {\r\n            address freeReferrerAddress = findFreeYo4Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level, now);\r\n            updateYo4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(ownerAddress, address(0), userAddress, 2, level, now);\r\n            sendETHDividends(ownerAddress, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].Yo3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].Yo3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].Yo4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].Yo4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n            \r\n        require(address(uint160(receiver)).send(levelPrice[level]), \"Invalid Transaction\");\r\n        earnedEth[receiver][matrix][level] = earnedEth[receiver][matrix][level].add(levelPrice[level]);\r\n        totalEarnedEth[receiver][matrix] = totalEarnedEth[receiver][matrix].add(levelPrice[level]);\r\n       \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level, now);\r\n        }\r\n    }\r\n    \r\n    function getYo3TotalEarnedEth() public view returns(uint) {\r\n        uint256 yo3TotalEarn;\r\n        \r\n        for(uint i=1; i<=lastUserId;i++) {\r\n            yo3TotalEarn = yo3TotalEarn.add(totalEarnedEth[userIds[i]][1]);\r\n        }\r\n        \r\n        return yo3TotalEarn;\r\n        \r\n    }\r\n    \r\n    function getYo4TotalEarnedEth() public view returns(uint) {\r\n        uint256 yo4TotalEarn;\r\n        \r\n        for(uint i=1; i<=lastUserId;i++) {\r\n            yo4TotalEarn = yo4TotalEarn.add(totalEarnedEth[userIds[i]][2]);\r\n        }\r\n        \r\n        return yo4TotalEarn;\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"earnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeYo3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeYo4Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getYo3TotalEarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getYo4TotalEarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalEarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveYo3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveYo4Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersYo3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersYo4Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XForsage","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://77d8cf7b3256773ed1450aee945541237e827eb7b03e9a559f561dc788be31bb"}]}