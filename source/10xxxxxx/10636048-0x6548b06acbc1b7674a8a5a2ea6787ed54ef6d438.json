{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.6.8;\r\n\r\n// ERC20 Interface\r\ninterface ERC20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract PerlinXRewards {\r\n    using SafeMath for uint256;\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    address public PERL;\r\n    address public treasury;\r\n\r\n    address[] public arrayAdmins;\r\n    address[] public arrayPerlinPools;\r\n    address[] public arraySynths;\r\n    address[] public arrayMembers;\r\n\r\n    uint256 public currentEra;\r\n\r\n    mapping(address => bool) public isAdmin; // Tracks admin status\r\n    mapping(address => bool) public poolIsListed; // Tracks current listing status\r\n    mapping(address => bool) public poolHasMembers; // Tracks current staking status\r\n    mapping(address => bool) public poolWasListed; // Tracks if pool was ever listed\r\n    mapping(address => uint256) public mapAsset_Rewards; // Maps rewards for each asset (PERL, BAL, UNI etc)\r\n    mapping(address => uint256) public poolWeight; // Allows a reward weight to be applied; 100 = 1.0\r\n    mapping(uint256 => uint256) public mapEra_Total; // Total PERL staked in each era\r\n    mapping(uint256 => bool) public eraIsOpen; // Era is open of collecting rewards\r\n    mapping(uint256 => mapping(address => uint256)) public mapEraAsset_Reward; // Reward allocated for era\r\n    mapping(uint256 => mapping(address => uint256)) public mapEraPool_Balance; // Perls in each pool, per era\r\n    mapping(uint256 => mapping(address => uint256)) public mapEraPool_Share; // Share of reward for each pool, per era\r\n    mapping(uint256 => mapping(address => uint256)) public mapEraPool_Claims; // Total LP tokens locked for each pool, per era\r\n\r\n    mapping(address => address) public mapPool_Asset; // Uniswap pools provide liquidity to non-PERL asset\r\n    mapping(address => address) public mapSynth_EMP; // Synthetic Assets have a management contract\r\n\r\n    mapping(address => bool) public isMember; // Is Member\r\n    mapping(address => uint256) public mapMember_poolCount; // Total number of Pools member is in\r\n    mapping(address => address[]) public mapMember_arrayPools; // Array of pools for member\r\n    mapping(address => mapping(address => uint256))\r\n        public mapMemberPool_Balance; // Member's balance in pool\r\n    mapping(address => mapping(address => bool)) public mapMemberPool_Added; // Member's balance in pool\r\n    mapping(address => mapping(uint256 => bool))\r\n        public mapMemberEra_hasRegistered; // Member has registered\r\n    mapping(address => mapping(uint256 => mapping(address => uint256)))\r\n        public mapMemberEraPool_Claim; // Value of claim per pool, per era\r\n    mapping(address => mapping(uint256 => mapping(address => bool)))\r\n        public mapMemberEraAsset_hasClaimed; // Boolean claimed\r\n\r\n    // Events\r\n    event Snapshot(\r\n        address indexed admin,\r\n        uint256 indexed era,\r\n        uint256 rewardForEra,\r\n        uint256 perlTotal,\r\n        uint256 validPoolCount,\r\n        uint256 validMemberCount,\r\n        uint256 date\r\n    );\r\n    event NewPool(\r\n        address indexed admin,\r\n        address indexed pool,\r\n        address indexed asset,\r\n        uint256 assetWeight\r\n    );\r\n    event NewSynth(\r\n        address indexed pool,\r\n        address indexed synth,\r\n        address indexed expiringMultiParty\r\n    );\r\n    event MemberLocks(\r\n        address indexed member,\r\n        address indexed pool,\r\n        uint256 amount,\r\n        uint256 indexed currentEra\r\n    );\r\n    event MemberUnlocks(\r\n        address indexed member,\r\n        address indexed pool,\r\n        uint256 balance,\r\n        uint256 indexed currentEra\r\n    );\r\n    event MemberRegisters(\r\n        address indexed member,\r\n        address indexed pool,\r\n        uint256 amount,\r\n        uint256 indexed currentEra\r\n    );\r\n    event MemberClaims(address indexed member, uint256 indexed era, uint256 totalClaim);\r\n\r\n    // Only Admin can execute\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender], \"Must be Admin\");\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    constructor() public {\r\n        arrayAdmins.push(msg.sender);\r\n        isAdmin[msg.sender] = true;\r\n        PERL = 0xb5A73f5Fc8BbdbcE59bfD01CA8d35062e0dad801;\r\n        treasury = 0x7786B620937af5F6F24Bf4fefA4ab7c544a59Ca6; \r\n        currentEra = 1;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    //==============================ADMIN================================//\r\n\r\n    // Lists a synth and its parent EMP address\r\n    function listSynth(\r\n        address pool,\r\n        address synth,\r\n        address emp,\r\n        uint256 weight\r\n    ) public onlyAdmin {\r\n        require(emp != address(0), \"Must pass address validation\");\r\n        if (!poolWasListed[pool]) {\r\n            arraySynths.push(synth); // Add new synth\r\n        }\r\n        listPool(pool, synth, weight); // List like normal pool\r\n        mapSynth_EMP[synth] = emp; // Maps the EMP contract for look-up\r\n        emit NewSynth(pool, synth, emp);\r\n    }\r\n\r\n    // Lists a pool and its non-PERL asset (can work for Balance or Uniswap V2)\r\n    // Use \"100\" to be a normal weight of \"1.0\"\r\n    function listPool(\r\n        address pool,\r\n        address asset,\r\n        uint256 weight\r\n    ) public onlyAdmin {\r\n        require(\r\n            (asset != PERL) && (asset != address(0)) && (pool != address(0)),\r\n            \"Must pass address validation\"\r\n        );\r\n        require(\r\n            weight >= 10 && weight <= 1000,\r\n            \"Must be greater than 0.1, less than 10\"\r\n        );\r\n        if (!poolWasListed[pool]) {\r\n            arrayPerlinPools.push(pool);\r\n        }\r\n        poolIsListed[pool] = true; // Tracking listing\r\n        poolWasListed[pool] = true; // Track if ever was listed\r\n        poolWeight[pool] = weight; // Note: weight of 120 = 1.2\r\n        mapPool_Asset[pool] = asset; // Map the pool to its non-perl asset\r\n        emit NewPool(msg.sender, pool, asset, weight);\r\n    }\r\n\r\n    function delistPool(address pool) public onlyAdmin {\r\n        poolIsListed[pool] = false;\r\n    }\r\n\r\n    // Quorum Action 1\r\n    function addAdmin(address newAdmin) public onlyAdmin {\r\n        require(\r\n            (isAdmin[newAdmin] == false) && (newAdmin != address(0)),\r\n            \"Must pass address validation\"\r\n        );\r\n        arrayAdmins.push(newAdmin);\r\n        isAdmin[newAdmin] = true;\r\n    }\r\n\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(\r\n            (isAdmin[newAdmin] == false) && (newAdmin != address(0)),\r\n            \"Must pass address validation\"\r\n        );\r\n        arrayAdmins.push(newAdmin);\r\n        isAdmin[msg.sender] = false;\r\n        isAdmin[newAdmin] = true;\r\n    }\r\n\r\n    // Snapshot a new Era, allocating any new rewards found on the address, increment Era\r\n    // Admin should send reward funds first\r\n    function snapshot(address rewardAsset) public onlyAdmin {\r\n        snapshotInEra(rewardAsset, currentEra); // Snapshots PERL balances\r\n        currentEra = currentEra.add(1); // Increment the eraCount, so users can't register in a previous era.\r\n    }\r\n\r\n    // Snapshot a particular rewwardAsset, but don't increment Era (like Balancer Rewards)\r\n    // Do this after snapshotPools()\r\n    function snapshotInEra(address rewardAsset, uint256 era) public onlyAdmin {\r\n        uint256 start = 0;\r\n        uint256 end = poolCount();\r\n        snapshotInEraWithOffset(rewardAsset, era, start, end);\r\n    }\r\n\r\n    // Snapshot with offset (in case runs out of gas)\r\n    function snapshotWithOffset(\r\n        address rewardAsset,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public onlyAdmin {\r\n        snapshotInEraWithOffset(rewardAsset, currentEra, start, end); // Snapshots PERL balances\r\n        currentEra = currentEra.add(1); // Increment the eraCount, so users can't register in a previous era.\r\n    }\r\n\r\n    // Snapshot a particular rewwardAsset, with offset\r\n    function snapshotInEraWithOffset(\r\n        address rewardAsset,\r\n        uint256 era,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public onlyAdmin {\r\n        require(rewardAsset != address(0), \"Address must not be 0x0\");\r\n        require(\r\n            (era >= currentEra - 1) && (era <= currentEra),\r\n            \"Must be current or previous era only\"\r\n        );\r\n        uint256 amount = ERC20(rewardAsset).balanceOf(address(this)).sub(\r\n            mapAsset_Rewards[rewardAsset]\r\n        );\r\n        require(amount > 0, \"Amount must be non-zero\");\r\n        mapAsset_Rewards[rewardAsset] = mapAsset_Rewards[rewardAsset].add(\r\n            amount\r\n        );\r\n        mapEraAsset_Reward[era][rewardAsset] = mapEraAsset_Reward[era][rewardAsset]\r\n            .add(amount);\r\n        eraIsOpen[era] = true;\r\n        updateRewards(era, amount, start, end); // Snapshots PERL balances\r\n    }\r\n\r\n    // Note, due to EVM gas limits, poolCount should be less than 100 to do this before running out of gas\r\n    function updateRewards(\r\n        uint256 era,\r\n        uint256 rewardForEra,\r\n        uint256 start,\r\n        uint256 end\r\n    ) internal {\r\n        // First snapshot balances of each pool\r\n        uint256 perlTotal;\r\n        uint256 validPoolCount;\r\n        uint256 validMemberCount;\r\n        for (uint256 i = start; i < end; i++) {\r\n            address pool = arrayPerlinPools[i];\r\n            if (poolIsListed[pool] && poolHasMembers[pool]) {\r\n                validPoolCount = validPoolCount.add(1);\r\n                uint256 weight = poolWeight[pool];\r\n                uint256 weightedBalance = (\r\n                    ERC20(PERL).balanceOf(pool).mul(weight)).div(100); // (depth * weight) / 100\r\n                perlTotal = perlTotal.add(weightedBalance);\r\n                mapEraPool_Balance[era][pool] = weightedBalance;\r\n            }\r\n        }\r\n        mapEra_Total[era] = perlTotal;\r\n        // Then snapshot share of the reward for the era\r\n        for (uint256 i = start; i < end; i++) {\r\n            address pool = arrayPerlinPools[i];\r\n            if (poolIsListed[pool] && poolHasMembers[pool]) {\r\n                validMemberCount = validMemberCount.add(1);\r\n                uint256 part = mapEraPool_Balance[era][pool];\r\n                mapEraPool_Share[era][pool] = getShare(\r\n                    part,\r\n                    perlTotal,\r\n                    rewardForEra\r\n                );\r\n            }\r\n        }\r\n        emit Snapshot(\r\n            msg.sender,\r\n            era,\r\n            rewardForEra,\r\n            perlTotal,\r\n            validPoolCount,\r\n            validMemberCount,\r\n            now\r\n        );\r\n    }\r\n\r\n    // Quorum Action\r\n    // Remove unclaimed rewards and disable era for claiming\r\n    function removeReward(uint256 era, address rewardAsset) public onlyAdmin {\r\n      uint256 amount = mapEraAsset_Reward[era][rewardAsset];\r\n      mapEraAsset_Reward[era][rewardAsset] = 0;\r\n      mapAsset_Rewards[rewardAsset] = mapAsset_Rewards[rewardAsset].sub(\r\n          amount\r\n      );\r\n      eraIsOpen[era] = false;\r\n      require(\r\n            ERC20(rewardAsset).transfer(treasury, amount),\r\n            \"Must transfer\"\r\n        );\r\n    }\r\n\r\n    // Quorum Action - Reuses adminApproveEraAsset() logic since unlikely to collide\r\n    // Use in anger to sweep off assets (such as accidental airdropped tokens)\r\n    function sweep(address asset, uint256 amount) public onlyAdmin {\r\n      require(\r\n            ERC20(asset).transfer(treasury, amount),\r\n            \"Must transfer\"\r\n        );\r\n    }\r\n\r\n    //============================== USER - LOCK/UNLOCK ================================//\r\n    // Member locks some LP tokens\r\n    function lock(address pool, uint256 amount) public nonReentrant {\r\n        require(poolIsListed[pool] == true, \"Must be listed\");\r\n        if (!isMember[msg.sender]) {\r\n            // Add new member\r\n            arrayMembers.push(msg.sender);\r\n            isMember[msg.sender] = true;\r\n        }\r\n        if (!poolHasMembers[pool]) {\r\n            // Records existence of member\r\n            poolHasMembers[pool] = true;\r\n        }\r\n        if (!mapMemberPool_Added[msg.sender][pool]) {\r\n            // Record all the pools member is in\r\n            mapMember_poolCount[msg.sender] = mapMember_poolCount[msg.sender]\r\n                .add(1);\r\n            mapMember_arrayPools[msg.sender].push(pool);\r\n            mapMemberPool_Added[msg.sender][pool] = true;\r\n        }\r\n        require(\r\n            ERC20(pool).transferFrom(msg.sender, address(this), amount),\r\n            \"Must transfer\"\r\n        ); // Uni/Bal LP tokens return bool\r\n        mapMemberPool_Balance[msg.sender][pool] = mapMemberPool_Balance[msg.sender][pool]\r\n            .add(amount); // Record total pool balance for member\r\n        registerClaim(msg.sender, pool, amount); // Register claim\r\n        emit MemberLocks(msg.sender, pool, amount, currentEra);\r\n    }\r\n\r\n    // Member unlocks all from a pool\r\n    function unlock(address pool) public nonReentrant {\r\n        uint256 balance = mapMemberPool_Balance[msg.sender][pool];\r\n        require(balance > 0, \"Must have a balance to claim\");\r\n        mapMemberPool_Balance[msg.sender][pool] = 0; // Zero out balance\r\n        require(ERC20(pool).transfer(msg.sender, balance), \"Must transfer\"); // Then transfer\r\n        if (ERC20(pool).balanceOf(address(this)) == 0) {\r\n            poolHasMembers[pool] = false; // If nobody is staking any more\r\n        }\r\n        emit MemberUnlocks(msg.sender, pool, balance, currentEra);\r\n    }\r\n\r\n    //============================== USER - CLAIM================================//\r\n    // Member registers claim in a single pool\r\n    function registerClaim(\r\n        address member,\r\n        address pool,\r\n        uint256 amount\r\n    ) internal {\r\n        mapMemberEraPool_Claim[member][currentEra][pool] += amount;\r\n        mapEraPool_Claims[currentEra][pool] = mapEraPool_Claims[currentEra][pool]\r\n            .add(amount);\r\n        emit MemberRegisters(member, pool, amount, currentEra);\r\n    }\r\n\r\n    // Member registers claim in all pools\r\n    function registerAllClaims(address member) public {\r\n        require(\r\n            mapMemberEra_hasRegistered[msg.sender][currentEra] == false,\r\n            \"Must not have registered in this era already\"\r\n        );\r\n        for (uint256 i = 0; i < mapMember_poolCount[member]; i++) {\r\n            address pool = mapMember_arrayPools[member][i];\r\n            // first deduct any previous claim\r\n            mapEraPool_Claims[currentEra][pool] = mapEraPool_Claims[currentEra][pool]\r\n                .sub(mapMemberEraPool_Claim[member][currentEra][pool]);\r\n            uint256 amount = mapMemberPool_Balance[member][pool]; // then get latest balance\r\n            mapMemberEraPool_Claim[member][currentEra][pool] = amount; // then update the claim\r\n            mapEraPool_Claims[currentEra][pool] = mapEraPool_Claims[currentEra][pool]\r\n                .add(amount); // then add to total\r\n            emit MemberRegisters(member, pool, amount, currentEra);\r\n        }\r\n        mapMemberEra_hasRegistered[msg.sender][currentEra] = true;\r\n    }\r\n\r\n    // Member claims in a era\r\n    function claim(uint256 era, address rewardAsset)\r\n        public\r\n        nonReentrant\r\n    {\r\n        require(\r\n            mapMemberEraAsset_hasClaimed[msg.sender][era][rewardAsset] == false,\r\n            \"Reward asset must not have been claimed\"\r\n        );\r\n        require(eraIsOpen[era], \"Era must be opened\");\r\n        uint256 totalClaim = checkClaim(msg.sender, era);\r\n        if (totalClaim > 0) {\r\n            mapMemberEraAsset_hasClaimed[msg.sender][era][rewardAsset] = true; // Register claim\r\n            mapEraAsset_Reward[era][rewardAsset] = mapEraAsset_Reward[era][rewardAsset]\r\n                .sub(totalClaim); // Decrease rewards for that era\r\n            mapAsset_Rewards[rewardAsset] = mapAsset_Rewards[rewardAsset].sub(\r\n                totalClaim\r\n            ); // Decrease rewards in total\r\n            require(\r\n                ERC20(rewardAsset).transfer(msg.sender, totalClaim),\r\n                \"Must transfer\"\r\n            ); // Then transfer\r\n        }\r\n        emit MemberClaims(msg.sender, era, totalClaim);\r\n        if (mapMemberEra_hasRegistered[msg.sender][currentEra] == false) {\r\n            registerAllClaims(msg.sender); // Register another claim\r\n        }\r\n    }\r\n\r\n    // Member checks claims in all pools\r\n    function checkClaim(address member, uint256 era)\r\n        public\r\n        view\r\n        returns (uint256 totalClaim)\r\n    {\r\n        for (uint256 i = 0; i < mapMember_poolCount[member]; i++) {\r\n            address pool = mapMember_arrayPools[member][i];\r\n            totalClaim += checkClaimInPool(member, era, pool);\r\n        }\r\n        return totalClaim;\r\n    }\r\n\r\n    // Member checks claim in a single pool\r\n    function checkClaimInPool(\r\n        address member,\r\n        uint256 era,\r\n        address pool\r\n    ) public view returns (uint256 claimShare) {\r\n        uint256 poolShare = mapEraPool_Share[era][pool]; // Requires admin snapshotting for era first, else 0\r\n        uint256 memberClaimInEra = mapMemberEraPool_Claim[member][era][pool]; // Requires member registering claim in the era\r\n        uint256 totalClaimsInEra = mapEraPool_Claims[era][pool]; // Sum of all claims in a era\r\n        if (totalClaimsInEra > 0) {\r\n            // Requires non-zero balance of the pool tokens\r\n            claimShare = getShare(\r\n                memberClaimInEra,\r\n                totalClaimsInEra,\r\n                poolShare\r\n            );\r\n        } else {\r\n            claimShare = 0;\r\n        }\r\n        return claimShare;\r\n    }\r\n\r\n    //==============================UTILS================================//\r\n    // Get the share of a total\r\n    function getShare(\r\n        uint256 part,\r\n        uint256 total,\r\n        uint256 amount\r\n    ) public pure returns (uint256 share) {\r\n        return (amount.mul(part)).div(total);\r\n    }\r\n\r\n    function adminCount() public view returns (uint256) {\r\n        return arrayAdmins.length;\r\n    }\r\n\r\n    function poolCount() public view returns (uint256) {\r\n        return arrayPerlinPools.length;\r\n    }\r\n\r\n    function synthCount() public view returns (uint256) {\r\n        return arraySynths.length;\r\n    }\r\n\r\n    function memberCount() public view returns (uint256) {\r\n        return arrayMembers.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"name\":\"MemberClaims\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentEra\",\"type\":\"uint256\"}],\"name\":\"MemberLocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentEra\",\"type\":\"uint256\"}],\"name\":\"MemberRegisters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentEra\",\"type\":\"uint256\"}],\"name\":\"MemberUnlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetWeight\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expiringMultiParty\",\"type\":\"address\"}],\"name\":\"NewSynth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardForEra\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perlTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validPoolCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validMemberCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayAdmins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayPerlinPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arraySynths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"}],\"name\":\"checkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"checkClaimInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"delistPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eraIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"listPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"listSynth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAsset_Rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraAsset_Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraPool_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraPool_Claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraPool_Share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEra_Total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberEraAsset_hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberEraPool_Claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberEra_hasRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberPool_Added\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberPool_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMember_arrayPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMember_poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapPool_Asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapSynth_EMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolHasMembers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolIsListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWasListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"registerAllClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"}],\"name\":\"snapshotInEra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"snapshotInEraWithOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"snapshotWithOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PerlinXRewards","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3565323a165c472f5db6126ce1ffbc91f86b0e0f29e2d377f91a0020f9c1a696"}]}