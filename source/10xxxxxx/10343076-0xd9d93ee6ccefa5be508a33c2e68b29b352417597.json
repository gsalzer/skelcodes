{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-07\r\n*/\r\n\r\npragma solidity ^ 0.4.26;\r\n\r\nlibrary SafeMath {\r\n\r\n function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n  if (a == 0) {\r\n   return 0;\r\n  }\r\n  c = a * b;\r\n  assert(c / a == b);\r\n  return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n  return a / b;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n  assert(b <= a);\r\n  return a - b;\r\n }\r\n\r\n function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n  c = a + b;\r\n  assert(c >= a);\r\n  return c;\r\n }\r\n\r\n}\r\n\r\ncontract TOKEN {\r\n function totalSupply() external view returns(uint256);\r\n function balanceOf(address account) external view returns(uint256);\r\n function transfer(address recipient, uint256 amount) external returns(bool);\r\n function allowance(address owner, address spender) external view returns(uint256);\r\n function approve(address spender, uint256 amount) external returns(bool);\r\n function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n}\r\n\r\ncontract H3RainX {\r\n\r\n mapping(address => bool) internal ambassadors_;\r\n uint256 constant internal ambassadorMaxPurchase_ = 1000000e18;\r\n mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n bool public onlyAmbassadors = true;\r\n uint256 ACTIVATION_TIME = 1593241200;\r\n\r\n modifier antiEarlyWhale(uint256 _amountOfH3RX, address _customerAddress) {\r\n  if (now >= ACTIVATION_TIME) {\r\n   onlyAmbassadors = false;\r\n  }\r\n\r\n  if (onlyAmbassadors) {\r\n   require((ambassadors_[_customerAddress] == true && (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfH3RX) <= ambassadorMaxPurchase_));\r\n   ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfH3RX);\r\n   _;\r\n  } else {\r\n   if (now < (ACTIVATION_TIME + 60 seconds)) {\r\n    require(tx.gasprice <= 0.1 szabo);\r\n   }\r\n\r\n   onlyAmbassadors = false;\r\n   _;\r\n  }\r\n }\r\n\r\n modifier onlyTokenHolders {\r\n  require(myTokens() > 0);\r\n  _;\r\n }\r\n\r\n modifier onlyDivis {\r\n  require(myDividends(true) > 0);\r\n  _;\r\n }\r\n\r\n event onTokenPurchase(\r\n  address indexed customerAddress,\r\n  uint256 incomingH3RX,\r\n  uint256 tokensMinted,\r\n  address indexed referredBy,\r\n  uint timestamp\r\n );\r\n\r\n event onTokenSell(\r\n  address indexed customerAddress,\r\n  uint256 tokensBurned,\r\n  uint256 h3rxEarned,\r\n  uint timestamp\r\n );\r\n\r\n event onReinvestment(\r\n  address indexed customerAddress,\r\n  uint256 h3rxReinvested,\r\n  uint256 tokensMinted\r\n );\r\n\r\n event onWithdraw(\r\n  address indexed customerAddress,\r\n  uint256 h3rxWithdrawn\r\n );\r\n\r\n event Transfer(\r\n  address indexed from,\r\n  address indexed to,\r\n  uint256 tokens\r\n );\r\n\r\n string public name = \"H3RainX\";\r\n string public symbol = \"H3RX\";\r\n uint8 constant public decimals = 18;\r\n uint256 internal entryFee_ = 10; // 10%\r\n uint256 internal transferFee_ = 1;\r\n uint256 internal exitFee_ = 10; // 10%\r\n uint256 internal referralFee_ = 20; // 2% of the 10% fee\r\n uint256 constant internal magnitude = 2 ** 64;\r\n mapping(address => uint256) internal tokenBalanceLedger_;\r\n mapping(address => uint256) internal referralBalance_;\r\n mapping(address => int256) internal payoutsTo_;\r\n mapping(address => uint256) internal invested_;\r\n uint256 internal tokenSupply_;\r\n uint256 internal profitPerShare_;\r\n uint256 public stakingRequirement = 1e18; // 1 H3X + 4 RAIN\r\n uint256 public totalHolder = 0;\r\n uint256 public totalDonation = 0;\r\n uint256 constant internal rainMultiplier = 4;\r\n uint256 constant internal h3xMultiplier = 1;\r\n TOKEN erc20Rain;\r\n TOKEN erc20H3x;\r\n\r\n constructor() public {\r\n  ambassadors_[0x4ea0d6576E606778Cc9dcC329d06Ec70c3906CC2] = true;\r\n  erc20Rain = TOKEN(address(0x61cDb66e56FAD942a7b5cE3F419FfE9375E31075));\r\n  erc20H3x = TOKEN(address(0x85eBa557C06c348395fD49e35d860F58a4F7c95a));\r\n }\r\n\r\n function getAmountAfterTokenTax(uint256 _amount, uint256 _taxPct) private pure returns(uint256) {\r\n   return SafeMath.div(\r\n      SafeMath.mul(\r\n        _amount,\r\n        100\r\n      ),\r\n      SafeMath.sub(\r\n        100,_taxPct\r\n      )\r\n    );\r\n }\r\n\r\n function checkAndTransferH3RX(uint256 _amount) private {\r\n  require(erc20Rain.transferFrom(msg.sender, address(this), SafeMath.mul(getAmountAfterTokenTax(_amount, 1), rainMultiplier)) == true, \"transfer must succeed\");\r\n  require(erc20H3x.transferFrom(msg.sender, address(this), SafeMath.mul(getAmountAfterTokenTax(_amount, 10), h3xMultiplier)) == true, \"transfer must succeed\");\r\n }\r\n\r\n function buy(uint256 _amount, address _referredBy) public returns(uint256) {\r\n  checkAndTransferH3RX(_amount);\r\n  return purchaseTokens(_referredBy, msg.sender, _amount);\r\n }\r\n\r\n function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\r\n  checkAndTransferH3RX(_amount);\r\n  return purchaseTokens(_referredBy, _customerAddress, _amount);\r\n }\r\n\r\n function() payable public {\r\n  revert();\r\n }\r\n\r\n function reinvest() onlyDivis public {\r\n  address _customerAddress = msg.sender;\r\n  uint256 _dividends = myDividends(false);\r\n  payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n  _dividends += referralBalance_[_customerAddress];\r\n  referralBalance_[_customerAddress] = 0;\r\n  uint256 _tokens = purchaseTokens(0x0, _customerAddress, _dividends);\r\n  emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n }\r\n\r\n function exit() external {\r\n  address _customerAddress = msg.sender;\r\n  uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n  if (_tokens > 0) sell(_tokens);\r\n  withdraw();\r\n }\r\n\r\n function withdraw() onlyDivis public {\r\n  address _customerAddress = msg.sender;\r\n  uint256 _dividends = myDividends(false);\r\n  payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n  _dividends += referralBalance_[_customerAddress];\r\n  referralBalance_[_customerAddress] = 0;\r\n  erc20Rain.transfer(_customerAddress, SafeMath.mul(_dividends, rainMultiplier));\r\n  erc20H3x.transfer(_customerAddress, SafeMath.mul(_dividends, h3xMultiplier));\r\n  emit onWithdraw(_customerAddress, _dividends);\r\n }\r\n\r\n function sell(uint256 _amountOfTokens) onlyTokenHolders public {\r\n  address _customerAddress = msg.sender;\r\n  require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n  uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfTokens, exitFee_), 100);\r\n  uint256 _taxedH3RX = SafeMath.sub(_amountOfTokens, _dividends);\r\n\r\n  tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\r\n  tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n  int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens + (_taxedH3RX * magnitude));\r\n  payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n  if (tokenSupply_ > 0) {\r\n   profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n  }\r\n\r\n  emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n  emit onTokenSell(_customerAddress, _amountOfTokens, _taxedH3RX, now);\r\n }\r\n\r\n function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {\r\n  address _customerAddress = msg.sender;\r\n  require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n  if (myDividends(true) > 0) {\r\n   withdraw();\r\n  }\r\n\r\n  uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n  uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n  uint256 _dividends = _tokenFee;\r\n\r\n  tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n  tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n  tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n  payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);\r\n  payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);\r\n\r\n  profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n  emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n  return true;\r\n }\r\n\r\n function totalSupply() public view returns(uint256) {\r\n  return tokenSupply_;\r\n }\r\n\r\n function myTokens() public view returns(uint256) {\r\n  address _customerAddress = msg.sender;\r\n  return balanceOf(_customerAddress);\r\n }\r\n\r\n function myDividends(bool _includeReferralBonus) public view returns(uint256) {\r\n  address _customerAddress = msg.sender;\r\n  return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\r\n }\r\n\r\n function balanceOf(address _customerAddress) public view returns(uint256) {\r\n  return tokenBalanceLedger_[_customerAddress];\r\n }\r\n\r\n function dividendsOf(address _customerAddress) public view returns(uint256) {\r\n  return (uint256)((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n }\r\n\r\n function getInvested() public view returns(uint256) {\r\n  return invested_[msg.sender];\r\n }\r\n\r\n\r\n  function totalH3xTokenBalance() public view returns(uint256) {\r\n   return erc20H3x.balanceOf(address(this));\r\n  }\r\n\r\n  function totalRainTokenBalance() public view returns(uint256) {\r\n   return erc20Rain.balanceOf(address(this));\r\n  }\r\n\r\n function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingH3RX) internal antiEarlyWhale(_incomingH3RX, _customerAddress) returns(uint256) {\r\n  if (getInvested() == 0) {\r\n   totalHolder++;\r\n  }\r\n\r\n  invested_[msg.sender] += _incomingH3RX;\r\n\r\n  uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingH3RX, entryFee_), 100);\r\n\r\n  uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);\r\n\r\n  uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n  uint256 _amountOfTokens = SafeMath.sub(_incomingH3RX, _undividedDividends);\r\n  uint256 _fee = _dividends * magnitude;\r\n\r\n  require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n  if (_referredBy != address(0) && _referredBy != _customerAddress && tokenBalanceLedger_[_referredBy] >= stakingRequirement) {\r\n   referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n  } else {\r\n   _dividends = SafeMath.add(_dividends, _referralBonus);\r\n   _fee = _dividends * magnitude;\r\n  }\r\n\r\n  if (tokenSupply_ > 0) {\r\n   tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n   profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n   _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n  } else {\r\n   tokenSupply_ = _amountOfTokens;\r\n  }\r\n\r\n  tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n  int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens - _fee);\r\n  payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n  emit Transfer(address(0), msg.sender, _amountOfTokens);\r\n  emit onTokenPurchase(_customerAddress, _incomingH3RX, _amountOfTokens, _referredBy, now);\r\n\r\n  return _amountOfTokens;\r\n }\r\n\r\n function multiData()\r\n public\r\n view\r\n returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n  return (\r\n\r\n   // [0] Total H3X in contract\r\n   totalH3xTokenBalance(),\r\n\r\n   // [0] Total Rain in contract\r\n   totalRainTokenBalance(),\r\n\r\n   // [1] Total H3RX supply\r\n   totalSupply(),\r\n\r\n   // [2] User H3RX balance\r\n   balanceOf(msg.sender),\r\n\r\n   // [3] User RAIN balance\r\n   erc20Rain.balanceOf(msg.sender),\r\n\r\n   // [4] User H3X balance\r\n   erc20H3x.balanceOf(msg.sender),\r\n\r\n   // [5] User divs\r\n   dividendsOf(msg.sender)\r\n\r\n\r\n  );\r\n }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRainTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalH3xTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingH3RX\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"h3rxEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"h3rxReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"h3rxWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"H3RainX","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a1e99358828f5f65c07e1eebad0f3291974f4ff5768fafc3e6a4a7d5f4c36f4e"}]}