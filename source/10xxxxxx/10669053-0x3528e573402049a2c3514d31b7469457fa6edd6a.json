{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\n\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary AddressArrayLib {\n    /**\n      @notice It adds an address value to the array.\n      @param self current array.\n      @param newItem new item to add.\n      @return the current array with the new item.\n    */\n    function add(address[] storage self, address newItem)\n        internal\n        returns (address[] memory)\n    {\n        require(newItem != address(0x0), \"EMPTY_ADDRESS_NOT_ALLOWED\");\n        self.push(newItem);\n        return self;\n    }\n\n    /**\n      @notice It removes the value at the given index in an array.\n      @param self the current array.\n      @param index remove an item in a specific index.\n      @return the current array without the item removed.\n    */\n    function removeAt(address[] storage self, uint256 index)\n        internal\n        returns (address[] memory)\n    {\n        if (index >= self.length) return self;\n\n        if (index == self.length - 1) {\n            delete self[self.length - 1];\n            self.length--;\n            return self;\n        }\n\n        address temp = self[self.length - 1];\n        self[self.length - 1] = self[index];\n        self[index] = temp;\n\n        delete self[self.length - 1];\n        self.length--;\n\n        return self;\n    }\n\n    /**\n      @notice It gets the index for a given item.\n      @param self the current array.\n      @param item to get the index.\n      @return indexAt the current index for a given item.\n      @return found true if the item was found. Otherwise it returns false.\n    */\n    function getIndex(address[] storage self, address item)\n        internal\n        view\n        returns (bool found, uint256 indexAt)\n    {\n        found = false;\n        for (indexAt = 0; indexAt < self.length; indexAt++) {\n            found = self[indexAt] == item;\n            if (found) {\n                return (found, indexAt);\n            }\n        }\n        return (found, indexAt);\n    }\n\n    /**\n      @notice It removes an address value to the array.\n      @param self current array.\n      @param item the item to remove.\n      @return the current array without the removed item.\n    */\n    function remove(address[] storage self, address item)\n        internal\n        returns (address[] memory)\n    {\n        (bool found, uint256 indexAt) = getIndex(self, item);\n        if (!found) return self;\n\n        return removeAt(self, indexAt);\n    }\n}\n\nlibrary AddressLib {\n    address public constant ADDRESS_EMPTY = address(0x0);\n\n    /**\n     * @dev Checks if this address is all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isEmpty(address self) internal pure returns (bool) {\n        return self == ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Checks if this address is the same as another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isEqualTo(address self, address other) internal pure returns (bool) {\n        return self == other;\n    }\n\n    /**\n     * @dev Checks if this address is different to another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isNotEqualTo(address self, address other) internal pure returns (bool) {\n        return self != other;\n    }\n\n    /**\n     * @dev Checks if this address is not all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isNotEmpty(address self) internal pure returns (bool) {\n        return self != ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Throws an error if address is all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is all 0s\n     */\n    function requireNotEmpty(address self, string memory message) internal pure {\n        require(isNotEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is not all 0s\n     */\n    function requireEmpty(address self, string memory message) internal pure {\n        require(isEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are not the same\n     */\n    function requireEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isEqualTo(self, other), message);\n    }\n\n    /**\n     * @dev Throws an error if address is the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are the same\n     */\n    function requireNotEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isNotEqualTo(self, other), message);\n    }\n}\n\ncontract TInitializable {\n    /* State Variables */\n\n    bool private _isInitialized;\n\n    /** Modifiers */\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is initialized.\n     */\n    modifier isNotInitialized() {\n        require(!_isInitialized, \"CONTRACT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is not initialized.\n     */\n    modifier isInitialized() {\n        require(_isInitialized, \"CONTRACT_NOT_INITIALIZED\");\n        _;\n    }\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /**\n        @notice Gets if the contract is initialized.\n        @return true if contract is initialized. Otherwise it returns false.\n     */\n    function initialized() external view returns (bool) {\n        return _isInitialized;\n    }\n\n    /** Internal functions */\n\n    /**\n        @notice It initializes this contract.\n     */\n    function _initialize() internal {\n        _isInitialized = true;\n    }\n\n    /** Private functions */\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract SignerRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    function initialize(address sender) public initializer {\n        if (!isSigner(sender)) {\n            _addSigner(sender);\n        }\n    }\n\n    modifier onlySigner() {\n        require(isSigner(_msgSender()), \"SignerRole: caller does not have the Signer role\");\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(_msgSender());\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n\n    uint256[50] private ______gap;\n}\n\ninterface IATMGovernance {\n    /* Events */\n\n    /**\n        @notice Emitted when a new ATM General Setting was added.\n        @param sender transaction sender address.\n        @param settingName name of the newly added setting.\n        @param settingValue value of the newly added setting.  \n     */\n    event GeneralSettingAdded(\n        address indexed sender,\n        bytes32 indexed settingName,\n        uint256 settingValue\n    );\n\n    /**\n        @notice Emitted when an ATM General Setting was updated.\n        @param sender transaction sender address.\n        @param settingName name of the newly added setting.\n        @param oldValue previous value of this setting.  \n        @param newValue new value of this setting.  \n     */\n    event GeneralSettingUpdated(\n        address indexed sender,\n        bytes32 indexed settingName,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice Emitted when an ATM General Setting was removed.\n        @param sender transaction sender address.\n        @param settingName name of the setting removed.\n        @param settingValue value of the setting removed.  \n     */\n    event GeneralSettingRemoved(\n        address indexed sender,\n        bytes32 indexed settingName,\n        uint256 settingValue\n    );\n\n    /**\n        @notice Emitted when a new Asset Setting was added for an specific Market.\n        @param sender transaction sender address.\n        @param asset asset address this setting was created for.\n        @param settingName name of the added setting.\n        @param settingValue value of the added setting.\n     */\n    event AssetMarketSettingAdded(\n        address indexed sender,\n        address indexed asset,\n        bytes32 indexed settingName,\n        uint256 settingValue\n    );\n\n    /**\n        @notice Emitted when an Asset Setting was updated for an specific Market.\n        @param sender transaction sender address.\n        @param asset asset address this setting was updated for.\n        @param settingName name of the updated setting.\n        @param oldValue previous value of this setting.\n        @param newValue new value of this setting.\n     */\n    event AssetMarketSettingUpdated(\n        address indexed sender,\n        address indexed asset,\n        bytes32 indexed settingName,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice Emitted when an Asset Setting was removed for an specific Market.\n        @param sender transaction sender address.\n        @param asset asset address this setting was removed for.\n        @param settingName name of the removed setting.\n        @param oldValue previous value of the removed setting.\n     */\n    event AssetMarketSettingRemoved(\n        address indexed sender,\n        address indexed asset,\n        bytes32 indexed settingName,\n        uint256 oldValue\n    );\n\n    /**\n        @notice Emitted when a new Data Provider was added to this ATM.\n        @param sender transaction sender address.\n        @param dataTypeIndex index of this data type.\n        @param amountDataProviders amount of data providers for this data type.\n        @param dataProvider address of the added Data Provider.\n     */\n    event DataProviderAdded(\n        address indexed sender,\n        uint8 indexed dataTypeIndex,\n        uint256 amountDataProviders,\n        address dataProvider\n    );\n\n    /**\n        @notice Emitted when a Data Provider was updated on this ATM.\n        @param sender transaction sender address.\n        @param dataTypeIndex index of this data type.\n        @param dataProviderIndex index of this data provider.\n        @param oldDataProvider previous address of the Data Provider.\n        @param newDataProvider new address of the Data Provider.\n     */\n    event DataProviderUpdated(\n        address indexed sender,\n        uint8 indexed dataTypeIndex,\n        uint256 indexed dataProviderIndex,\n        address oldDataProvider,\n        address newDataProvider\n    );\n\n    /**\n        @notice Emitted when a Data Provider was removed on this ATM.\n        @param sender transaction sender address.\n        @param dataTypeIndex index of this data type.\n        @param dataProviderIndex index of this data provider inside this data type.\n        @param dataProvider address of the Data Provider.\n     */\n    event DataProviderRemoved(\n        address indexed sender,\n        uint8 indexed dataTypeIndex,\n        uint256 indexed dataProviderIndex,\n        address dataProvider\n    );\n\n    /**\n        @notice Emitted when a new CRA - Credit Risk Algorithm is set.\n        @param sender transaction sender address.\n        @param craCommitHash github commit hash with the new CRA implementation.\n     */\n    event CRASet(address indexed sender, string craCommitHash);\n\n    /* External Functions */\n\n    /**\n        @notice Adds a new General Setting to this ATM.\n        @param settingName name of the setting to be added.\n        @param settingValue value of the setting to be added.\n     */\n    function addGeneralSetting(bytes32 settingName, uint256 settingValue) external;\n\n    /**\n        @notice Updates an existing General Setting on this ATM.\n        @param settingName name of the setting to be modified.\n        @param newValue new value to be set for this settingName. \n     */\n    function updateGeneralSetting(bytes32 settingName, uint256 newValue) external;\n\n    /**\n        @notice Removes a General Setting from this ATM.\n        @param settingName name of the setting to be removed.\n     */\n    function removeGeneralSetting(bytes32 settingName) external;\n\n    /**\n        @notice Adds a new Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n        @param settingValue value of the setting to be added.\n     */\n    function addAssetMarketSetting(\n        address asset,\n        bytes32 settingName,\n        uint256 settingValue\n    ) external;\n\n    /**\n        @notice Updates an existing Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n        @param newValue value of the setting to be added.\n     */\n    function updateAssetMarketSetting(\n        address asset,\n        bytes32 settingName,\n        uint256 newValue\n    ) external;\n\n    /**\n        @notice Removes an existing Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n     */\n    function removeAssetMarketSetting(address asset, bytes32 settingName) external;\n\n    /**\n        @notice Adds a new Data Provider on a specific Data Type array.\n            This function would accept duplicated data providers for the same data type.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProvider data provider address.\n     */\n    function addDataProvider(uint8 dataTypeIndex, address dataProvider) external;\n\n    /**\n        @notice Updates an existing Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param providerIndex previous data provider index.\n        @param newProvider new data provider address.\n     */\n    function updateDataProvider(\n        uint8 dataTypeIndex,\n        uint256 providerIndex,\n        address newProvider\n    ) external;\n\n    /**\n        @notice Removes an existing Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProvider data provider index.\n     */\n    function removeDataProvider(uint8 dataTypeIndex, uint256 dataProvider) external;\n\n    /**\n        @notice Sets the CRA - Credit Risk Algorithm to be used on this specific ATM.\n                CRA is represented by a Github commit hash of the newly proposed algorithm.\n     */\n    function setCRA(string calldata cra) external;\n\n    /* External Constant functions */\n\n    /**\n        @notice Returns a General Setting value from this ATM.\n        @param settingName name of the setting to be returned.\n     */\n    function getGeneralSetting(bytes32 settingName) external view returns (uint256);\n\n    /**\n        @notice Returns an existing Asset Setting value from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be returned.\n     */\n    function getAssetMarketSetting(address asset, bytes32 settingName)\n        external\n        view\n        returns (uint256);\n\n    /**\n        @notice Returns a Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProviderIndex data provider index number.\n     */\n    function getDataProvider(uint8 dataTypeIndex, uint256 dataProviderIndex)\n        external\n        view\n        returns (address);\n\n    /**\n        @notice Returns current CRA - Credit Risk Algorithm that is being used on this specific ATM.\n                CRA is represented by a Github commit hash of the newly proposed algorithm.\n     */\n    function getCRA() external view returns (string memory);\n}\n\ncontract ATMGovernance is SignerRole, IATMGovernance, TInitializable {\n    using AddressArrayLib for address[];\n    using AddressLib for address;\n    using Address for address;\n\n    /* Constants */\n\n    /* State Variables */\n\n    // List of general ATM settings. We don't accept settings equal to zero.\n    // Example: supplyToDebtRatio  => 5044 = percentage 50.44\n    // Example: supplyToDebtRatio => 1 = percentage 00.01\n    mapping(bytes32 => uint256) public generalSettings;\n\n    // List of Market specific Asset settings on this ATM\n    // Asset address => Asset setting name => Asset setting value\n    // Example 1: USDC address => Risk Premium => 2500 (25%)\n    // Example 2: DAI address => Risk Premium => 3500 (35%)\n    mapping(address => mapping(bytes32 => uint256)) public assetMarketSettings;\n\n    // List of ATM Data providers per data type\n    mapping(uint8 => address[]) public dataProviders;\n\n    // Unique CRA - Credit Risk Algorithm github hash to use in this ATM\n    string public cra;\n\n    /* External Functions */\n\n    /**\n        @notice Adds a new General Setting to this ATM.\n        @param settingName name of the setting to be added.\n        @param settingValue value of the setting to be added.\n     */\n    function addGeneralSetting(bytes32 settingName, uint256 settingValue)\n        external\n        onlySigner()\n    // TODO Do we need to add isInitialized() (the same for other functions)?\n    {\n        require(settingValue > 0, \"GENERAL_SETTING_MUST_BE_POSITIVE\");\n        require(settingName != \"\", \"GENERAL_SETTING_MUST_BE_PROVIDED\");\n        require(generalSettings[settingName] == 0, \"GENERAL_SETTING_ALREADY_EXISTS\");\n        generalSettings[settingName] = settingValue;\n        emit GeneralSettingAdded(msg.sender, settingName, settingValue);\n    }\n\n    /**\n        @notice Updates an existing General Setting on this ATM.\n        @param settingName name of the setting to be modified.\n        @param newValue new value to be set for this settingName. \n     */\n    function updateGeneralSetting(bytes32 settingName, uint256 newValue)\n        external\n        onlySigner()\n    {\n        require(newValue > 0, \"GENERAL_SETTING_MUST_BE_POSITIVE\");\n        require(settingName != \"\", \"GENERAL_SETTING_MUST_BE_PROVIDED\");\n        uint256 oldValue = generalSettings[settingName];\n        require(oldValue != newValue, \"GENERAL_SETTING_EQUAL_PREVIOUS\");\n        generalSettings[settingName] = newValue;\n        emit GeneralSettingUpdated(msg.sender, settingName, oldValue, newValue);\n    }\n\n    /**\n        @notice Removes a General Setting from this ATM.\n        @param settingName name of the setting to be removed.\n     */\n    function removeGeneralSetting(bytes32 settingName) external onlySigner() {\n        require(settingName != \"\", \"GENERAL_SETTING_MUST_BE_PROVIDED\");\n        require(generalSettings[settingName] > 0, \"GENERAL_SETTING_NOT_FOUND\");\n        uint256 previousValue = generalSettings[settingName];\n        delete generalSettings[settingName];\n        emit GeneralSettingRemoved(msg.sender, settingName, previousValue);\n    }\n\n    /**\n        @notice Adds a new Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n        @param settingValue value of the setting to be added.\n     */\n    function addAssetMarketSetting(\n        address asset,\n        bytes32 settingName,\n        uint256 settingValue\n    ) external onlySigner() {\n        asset.requireNotEmpty(\"ASSET_ADDRESS_IS_REQUIRED\");\n        require(asset.isContract(), \"ASSET_MUST_BE_A_CONTRACT\");\n        require(settingValue > 0, \"ASSET_SETTING_MUST_BE_POSITIVE\");\n        require(settingName != \"\", \"ASSET_SETTING_MUST_BE_PROVIDED\");\n        require(\n            assetMarketSettings[asset][settingName] == 0,\n            \"ASSET_SETTING_ALREADY_EXISTS\"\n        );\n        assetMarketSettings[asset][settingName] = settingValue;\n        emit AssetMarketSettingAdded(msg.sender, asset, settingName, settingValue);\n    }\n\n    /**\n        @notice Updates an existing Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n        @param newValue value of the setting to be added.\n     */\n    function updateAssetMarketSetting(\n        address asset,\n        bytes32 settingName,\n        uint256 newValue\n    ) external onlySigner() {\n        require(settingName != \"\", \"ASSET_SETTING_MUST_BE_PROVIDED\");\n        require(assetMarketSettings[asset][settingName] > 0, \"ASSET_SETTING_NOT_FOUND\");\n        require(\n            newValue != assetMarketSettings[asset][settingName],\n            \"NEW_VALUE_SAME_AS_OLD\"\n        );\n        uint256 oldValue = assetMarketSettings[asset][settingName];\n        assetMarketSettings[asset][settingName] = newValue;\n        emit AssetMarketSettingUpdated(\n            msg.sender,\n            asset,\n            settingName,\n            oldValue,\n            newValue\n        );\n    }\n\n    /**\n        @notice Removes an existing Asset Setting from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be added.\n     */\n    function removeAssetMarketSetting(address asset, bytes32 settingName)\n        external\n        onlySigner()\n    {\n        require(settingName != \"\", \"ASSET_SETTING_MUST_BE_PROVIDED\");\n        require(assetMarketSettings[asset][settingName] > 0, \"ASSET_SETTING_NOT_FOUND\");\n        uint256 oldValue = assetMarketSettings[asset][settingName];\n        delete assetMarketSettings[asset][settingName];\n        emit AssetMarketSettingRemoved(msg.sender, asset, settingName, oldValue);\n    }\n\n    /**\n        @notice Adds a new Data Provider on a specific Data Type array.\n            This function would accept duplicated data providers for the same data type.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProvider data provider address.\n     */\n    function addDataProvider(uint8 dataTypeIndex, address dataProvider)\n        external\n        onlySigner()\n    {\n        require(dataProvider.isContract(), \"DATA_PROVIDER_MUST_BE_A_CONTRACT\");\n        dataProviders[dataTypeIndex].add(dataProvider);\n        uint256 amountDataProviders = dataProviders[dataTypeIndex].length;\n        emit DataProviderAdded(\n            msg.sender,\n            dataTypeIndex,\n            amountDataProviders,\n            dataProvider\n        );\n    }\n\n    /**\n        @notice Updates an existing Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param providerIndex previous data provider index.\n        @param newProvider new data provider address.\n     */\n    function updateDataProvider(\n        uint8 dataTypeIndex,\n        uint256 providerIndex,\n        address newProvider\n    ) external onlySigner() {\n        require(\n            dataProviders[dataTypeIndex].length > providerIndex,\n            \"DATA_PROVIDER_OUT_RANGE\"\n        );\n        require(newProvider.isContract(), \"DATA_PROVIDER_MUST_BE_A_CONTRACT\");\n        address oldProvider = dataProviders[dataTypeIndex][providerIndex];\n        require(oldProvider != newProvider, \"DATA_PROVIDER_SAME_OLD\");\n        dataProviders[dataTypeIndex][providerIndex] = newProvider;\n        emit DataProviderUpdated(\n            msg.sender,\n            dataTypeIndex,\n            providerIndex,\n            oldProvider,\n            newProvider\n        );\n    }\n\n    /**\n        @notice Removes an existing Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProviderIndex data provider index.\n     */\n    function removeDataProvider(uint8 dataTypeIndex, uint256 dataProviderIndex)\n        external\n        onlySigner()\n    {\n        require(\n            dataProviders[dataTypeIndex].length > dataProviderIndex,\n            \"DATA_PROVIDER_OUT_RANGE\"\n        );\n        address oldDataProvider = dataProviders[dataTypeIndex][dataProviderIndex];\n        dataProviders[dataTypeIndex].removeAt(dataProviderIndex);\n        emit DataProviderRemoved(\n            msg.sender,\n            dataTypeIndex,\n            dataProviderIndex,\n            oldDataProvider\n        );\n    }\n\n    /**\n        @notice Sets the CRA - Credit Risk Algorithm to be used on this specific ATM.\n                CRA is represented by a Github commit hash of the newly proposed algorithm.\n        @param _cra Credit Risk Algorithm github commit hash.\n     */\n    function setCRA(string calldata _cra) external onlySigner() {\n        bytes memory tempEmptyStringTest = bytes(_cra);\n        require(tempEmptyStringTest.length > 0, \"CRA_CANT_BE_EMPTY\");\n        require(\n            keccak256(abi.encodePacked(cra)) != keccak256(abi.encodePacked(_cra)),\n            \"CRA_SAME_AS_OLD\"\n        );\n        cra = _cra;\n        emit CRASet(msg.sender, cra);\n    }\n\n    /**\n        @notice It initializes this ATM Governance instance.\n        @param ownerAddress the owner address for this ATM Governance.\n     */\n    function initialize(address ownerAddress) public isNotInitialized() {\n        SignerRole.initialize(ownerAddress);\n        TInitializable._initialize();\n    }\n\n    /* External Constant functions */\n\n    /**\n        @notice Returns a General Setting value from this ATM.\n        @param settingName name of the setting to be returned.\n     */\n    function getGeneralSetting(bytes32 settingName) external view returns (uint256) {\n        return generalSettings[settingName];\n    }\n\n    /**\n        @notice Returns an existing Asset Setting value from a specific Market on this ATM.\n        @param asset market specific asset address.\n        @param settingName name of the setting to be returned.\n     */\n    function getAssetMarketSetting(address asset, bytes32 settingName)\n        external\n        view\n        returns (uint256)\n    {\n        return assetMarketSettings[asset][settingName];\n    }\n\n    /**\n        @notice Returns a Data Provider on a specific Data Type array.\n        @param dataTypeIndex array index for this Data Type.\n        @param dataProviderIndex data provider index number.\n     */\n    function getDataProvider(uint8 dataTypeIndex, uint256 dataProviderIndex)\n        external\n        view\n        returns (address)\n    {\n        if (dataProviders[dataTypeIndex].length > dataProviderIndex) {\n            return dataProviders[dataTypeIndex][dataProviderIndex];\n        }\n        return address(0x0);\n    }\n\n    /**\n        @notice Returns current CRA - Credit Risk Algorithm that is being used on this specific ATM.\n                CRA is represented by a Github commit hash of the newly proposed algorithm.\n     */\n    function getCRA() external view returns (string memory) {\n        return cra;\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settingValue\",\"type\":\"uint256\"}],\"name\":\"AssetMarketSettingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"AssetMarketSettingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"AssetMarketSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"craCommitHash\",\"type\":\"string\"}],\"name\":\"CRASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDataProviders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"}],\"name\":\"DataProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dataProviderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"}],\"name\":\"DataProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dataProviderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDataProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDataProvider\",\"type\":\"address\"}],\"name\":\"DataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settingValue\",\"type\":\"uint256\"}],\"name\":\"GeneralSettingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settingValue\",\"type\":\"uint256\"}],\"name\":\"GeneralSettingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"GeneralSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"settingValue\",\"type\":\"uint256\"}],\"name\":\"addAssetMarketSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"}],\"name\":\"addDataProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"settingValue\",\"type\":\"uint256\"}],\"name\":\"addGeneralSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assetMarketSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cra\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"generalSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"getAssetMarketSetting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCRA\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dataProviderIndex\",\"type\":\"uint256\"}],\"name\":\"getDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"getGeneralSetting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"removeAssetMarketSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dataProviderIndex\",\"type\":\"uint256\"}],\"name\":\"removeDataProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"removeGeneralSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cra\",\"type\":\"string\"}],\"name\":\"setCRA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAssetMarketSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"dataTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"providerIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"}],\"name\":\"updateDataProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGeneralSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ATMGovernance","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}