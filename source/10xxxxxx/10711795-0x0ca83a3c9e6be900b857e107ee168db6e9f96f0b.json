{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Cow is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    modifier validRecipient(address account) {\r\n        require(account != address(0x0));\r\n        require(account != address(this));\r\n        _;\r\n    }\r\n\r\n    struct Breeder {\r\n        uint256 snapshotPeriod;\r\n        uint256 snapshotBalance;\r\n    }\r\n\r\n    // events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event LogWhitelisted(address indexed addr);\r\n    event LogUnlocked(uint256 timestamp);\r\n    event LogBandits(uint256 totalSupply);\r\n    event LogBreed(uint256 indexed period, uint256 candidatesLength, uint256 estimatedBreeders, uint256 breededToken, uint256 availableUnits);\r\n\r\n    // public constants\r\n    string public constant name = \"Cowboy.Finance\";\r\n    string public constant symbol = \"COW\";\r\n    uint256 public constant decimals = 9;\r\n\r\n    // private constants\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_TOKENS = 21 * 10**6;\r\n    uint256 private constant INITIAL_SUPPLY = INITIAL_TOKENS * 10**decimals;\r\n    uint256 private constant TOTAL_UNITS = MAX_UINT256 - (MAX_UINT256 % INITIAL_SUPPLY);\r\n    uint256 private constant POOL_SIZE = 50; // 50%\r\n    uint256 private constant INIT_POOL_FACTOR = 60;\r\n    uint256 private constant BREED_MIN_BALANCE = 100 * 10**decimals;\r\n    uint256 private constant BREED_ADDRESS_LIMIT = 1000;\r\n    uint256 private constant TIMELOCK_TIME = 24 hours;\r\n    uint256 private constant HALVING_PERIOD = 30;\r\n\r\n    // mappings\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => bool) private _whitelist;\r\n    mapping(address => Breeder) private _breeders;\r\n    mapping(address => bool) private _knownAddresses;\r\n    mapping(uint256 => address) private _addresses;\r\n    uint256 _addressesLength;\r\n\r\n    // ints\r\n    uint256 private _totalSupply;\r\n    uint256 private _unitsPerToken;\r\n    uint256 private _initialPoolToken;\r\n    uint256 private _poolBalance;\r\n    uint256 private _poolFactor;\r\n\r\n    uint256 private _period;\r\n    uint256 private _timelockBreeding;\r\n    uint256 private _timelockBandits;\r\n\r\n    // bools\r\n    bool private _lockTransfer;\r\n    bool private _lockBreeding;\r\n\r\n\r\n    constructor() public override {\r\n        _owner = msg.sender;\r\n\r\n        // set toal supply = initial supply\r\n        _totalSupply = INITIAL_SUPPLY;\r\n        // set units per token based on total supply\r\n        _unitsPerToken = TOTAL_UNITS.div(_totalSupply);\r\n\r\n        // set pool balance = TOTAL_UNITS / 100 * POOL_SIZE\r\n        _poolBalance = TOTAL_UNITS / 100 * POOL_SIZE;\r\n        // set initial pool token balance\r\n        _initialPoolToken = _poolBalance.div(_unitsPerToken);\r\n        // set initial pool factor\r\n        _poolFactor = INIT_POOL_FACTOR;\r\n\r\n        // set owner balance\r\n        _balances[_owner] = TOTAL_UNITS - _poolBalance;\r\n\r\n        // init locks & set defaults\r\n        _lockTransfer = true;\r\n        _lockBreeding = true;\r\n\r\n        emit Transfer(address(0x0), _owner, _totalSupply.sub(_initialPoolToken));\r\n    }\r\n\r\n\r\n    function whitelistAdd(address addr) external onlyOwner {\r\n        _whitelist[addr] = true;\r\n        emit LogWhitelisted(addr);\r\n    }\r\n\r\n    // main unlock function\r\n    // 1. set period\r\n    // 2. set timelocks\r\n    // 3. allow token transfer\r\n    function unlock() external onlyOwner {\r\n        require(_period == 0, \"contract is unlocked\");\r\n        _period = 1;\r\n        _timelockBreeding = now.add(TIMELOCK_TIME);\r\n        _timelockBandits = now.add(TIMELOCK_TIME);\r\n        _lockTransfer = false;\r\n        _lockBreeding = false;\r\n        emit LogUnlocked(block.timestamp);\r\n    }\r\n\r\n\r\n    // bandits stuff\r\n    function bandits() external onlyOwner {\r\n        require(_lockTransfer == false, \"contract is locked\");\r\n        require(_timelockBandits < now, \"also bandits need time to rest\");\r\n        _timelockBandits = now.add(TIMELOCK_TIME);\r\n        _totalSupply = _totalSupply.sub(_totalSupply.div(100));\r\n        _unitsPerToken = TOTAL_UNITS.div(_totalSupply);\r\n        emit LogBandits(_totalSupply);\r\n    }\r\n\r\n    function getSnapshotBalance(address addr) private view returns (uint256) {\r\n        if (_breeders[addr].snapshotPeriod < _period) {\r\n            return _balances[addr];\r\n        }\r\n        return  _breeders[addr].snapshotBalance;\r\n    }\r\n\r\n    // breed\r\n    function breed() external onlyOwner {\r\n        require(_lockTransfer == false, \"contract is locked\");\r\n        require(_timelockBreeding < now, \"timelock is active\");\r\n        _timelockBreeding = now.add(TIMELOCK_TIME);\r\n\r\n        // need the sum of all breeder balances to calculate share in breed\r\n        uint256 totalBreedersBalance = 0;\r\n\r\n        // check if address is candidate\r\n        address[] memory candidates = new address[](_addressesLength);\r\n        uint256 candidatesLength = 0;\r\n        for (uint256 i = 0; i < _addressesLength; i++) {\r\n            address addr = _addresses[i];\r\n            uint256 snapbalance = getSnapshotBalance(addr);\r\n            // dont put it on the list if too low\r\n            if (snapbalance < BREED_MIN_BALANCE.mul(_unitsPerToken)) {\r\n                continue;\r\n            }\r\n            // put it on the list if on of both conditions are true\r\n            // 1. snapshot is old [no coins moved]\r\n            // 2. balance >= snapshot balance [no tokens out]\r\n            if ((_breeders[addr].snapshotPeriod < _period) || (_balances[addr] >= snapbalance)) {\r\n                candidates[candidatesLength] = addr;\r\n                candidatesLength++;\r\n            }\r\n        }\r\n\r\n        uint256 estimatedBreeders = 0;\r\n        uint256 breededUnits = 0;\r\n        uint256 availableUnits = _initialPoolToken.div(_poolFactor).mul(_unitsPerToken);\r\n        if(candidatesLength > 0) {\r\n            estimatedBreeders = 1;\r\n            // get lucky candidates breeders\r\n            uint256 randomNumber = uint256(keccak256(abi.encodePacked((_addressesLength + _poolBalance + _period), now, blockhash(block.number))));\r\n            uint256 randomIndex = randomNumber % 10;\r\n            uint256 randomOffset = 0;\r\n            if (candidatesLength >= 10) {\r\n                estimatedBreeders = (candidatesLength - randomIndex - 1) / 10 + 1;\r\n            }\r\n            if (estimatedBreeders > BREED_ADDRESS_LIMIT) {\r\n                randomOffset = (randomNumber / 100) % estimatedBreeders;\r\n                estimatedBreeders = BREED_ADDRESS_LIMIT;\r\n            }\r\n            address[] memory breeders = new address[](estimatedBreeders);\r\n            uint256 breedersLength = 0;\r\n            for (uint256 i = 0; i < estimatedBreeders; i++) {\r\n                address addr = candidates[(randomIndex + (i + randomOffset) * 10) % candidatesLength];\r\n                breeders[breedersLength] = addr;\r\n                breedersLength++;\r\n                totalBreedersBalance = totalBreedersBalance.add(getSnapshotBalance(addr).div(_unitsPerToken));\r\n            }\r\n\r\n\r\n            for (uint256 i = 0; i < breedersLength; i++) {\r\n                address addr = breeders[i];\r\n                uint256 snapbalance = getSnapshotBalance(addr);\r\n                uint256 tokensToAdd = availableUnits.div(_unitsPerToken).mul(snapbalance.div(_unitsPerToken)).div(totalBreedersBalance);\r\n                uint256 unitsToAdd = tokensToAdd.mul(_unitsPerToken);\r\n                _balances[addr] = _balances[addr].add(unitsToAdd);\r\n                breededUnits = breededUnits.add(unitsToAdd);\r\n            }\r\n\r\n            if ((breededUnits < availableUnits) && (breedersLength > 0)) {\r\n                address addr = breeders[breedersLength-1];\r\n                uint256 rest = availableUnits.sub(breededUnits);\r\n                _balances[addr] = _balances[addr].add(rest);\r\n                breededUnits = breededUnits.add(rest);\r\n            }\r\n            if (breededUnits > 0) {\r\n                _poolBalance = _poolBalance.sub(breededUnits);\r\n            }\r\n        }\r\n\r\n        uint256 breededTokens = 0;\r\n        if(breededUnits > 0) {\r\n            breededTokens = breededUnits.div(_unitsPerToken);\r\n        }\r\n        emit LogBreed(_period, candidatesLength, estimatedBreeders, breededTokens, availableUnits);\r\n\r\n        if(_period % HALVING_PERIOD == 0) {\r\n            _poolFactor = _poolFactor.add(_poolFactor);\r\n        }\r\n        _period = _period.add(1);\r\n    }\r\n\r\n\r\n    function calcShareInTokens(uint256 snapshotToken, uint256 totalBreedersToken, uint256 availableToken) private pure returns(uint256) {\r\n        return availableToken.mul(snapshotToken).div(totalBreedersToken);\r\n    }\r\n\r\n    function isOwnerOrWhitelisted(address addr) private view returns (bool) {\r\n        if (addr == _owner) {\r\n            return true;\r\n        }\r\n        return _whitelist[addr];\r\n    }\r\n\r\n    function acquaintAddress(address candidate) private returns (bool) {\r\n        if((_knownAddresses[candidate] != true) && (candidate != _owner)) {\r\n            _knownAddresses[candidate] = true;\r\n            _addresses[_addressesLength] = candidate;\r\n            _addressesLength++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function period() public view returns (uint256) {\r\n        return _period;\r\n    }\r\n\r\n    function poolBalance() public view returns (uint256) {\r\n        return _poolBalance.div(_unitsPerToken);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account].div(_unitsPerToken);\r\n    }\r\n\r\n    function processBreedersBeforeTransfer(address from, address to, uint256 units) private {\r\n\r\n        // process sender\r\n        // if we have no current snapshot, make it\r\n        // snapshot is balance before sending\r\n        if(_breeders[from].snapshotPeriod < _period) {\r\n            _breeders[from].snapshotBalance = _balances[from];\r\n            _breeders[from].snapshotPeriod = _period;\r\n        } else {\r\n            // snapshot is same period, set balance reduced by units (= current balance)\r\n            _breeders[from].snapshotBalance = _balances[from].sub(units);\r\n        }\r\n\r\n        // process receiver\r\n        // if we have no current snapshot, make it\r\n        // snapshot is balance before receiving\r\n        if(_breeders[to].snapshotPeriod < _period) {\r\n            _breeders[to].snapshotBalance = _balances[to];\r\n            _breeders[to].snapshotPeriod = _period;\r\n        } else {\r\n            // snapshot is same period, nothing to do -> new tokens have to rest at least 1 period\r\n            // later in breeding we have also to check the snapshort period and update the balance if < to take care of no transfer/no updated snapshot balance situation\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 value) public validRecipient(recipient) returns (bool) {\r\n        require(((_lockTransfer == false) || isOwnerOrWhitelisted(msg.sender)), 'token transfer is locked');\r\n        uint256 units = value.mul(_unitsPerToken);\r\n        uint256 newSenderBalance = _balances[msg.sender].sub(units);\r\n        processBreedersBeforeTransfer(msg.sender, recipient, units);\r\n        _balances[msg.sender] = newSenderBalance;\r\n        _balances[recipient] = _balances[recipient].add(units);\r\n        acquaintAddress(recipient);\r\n        emit Transfer(msg.sender, recipient, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public validRecipient(to) returns (bool) {\r\n        require(((_lockTransfer == false) || isOwnerOrWhitelisted(msg.sender)), 'token transfer is locked');\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\r\n        uint256 units = value.mul(_unitsPerToken);\r\n        processBreedersBeforeTransfer(from, to, units);\r\n        uint256 newSenderBalance = _balances[from].sub(units);\r\n        _balances[from] = newSenderBalance;\r\n        _balances[to] = _balances[to].add(units);\r\n        acquaintAddress(to);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogBandits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"candidatesLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedBreeders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"breededToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableUnits\",\"type\":\"uint256\"}],\"name\":\"LogBreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bandits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelistAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Cow","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://58662f97ec9323341da2abedd5fcff7dee8ce21f2367f5990af1c7117be1dc8d"}]}