{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/ProportionalLiquidity.sol\r\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.7 <0.6.0;\r\n\r\n////// lib/abdk-libraries-solidity/src/ABDKMath64x64.sol\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n/* pragma solidity ^0.5.7; */\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /**\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /**\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x >= 0);\r\n    return uint64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) << 64;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n        y <= 0x1000000000000000000000000000000000000000000000000);\r\n      return -y << 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <=\r\n          0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <=\r\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x >= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n    uint256 hi = uint256 (x) * (y >> 128);\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi <<= 64;\r\n\r\n    require (hi <=\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) << 64) / y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x < 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y < 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result <= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x < 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) >> 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m >= 0);\r\n    require (m <\r\n        0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x >= 0) {\r\n      absoluteResult = powu (uint256 (x) << 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\r\n      negativeResult = y & 1 > 0;\r\n    }\r\n\r\n    absoluteResult >>= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x >= 0);\r\n    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 << 64;\r\n    uint256 ux = uint256 (x) << 127 - msb;\r\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux >> 255;\r\n      ux >>= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x & 0x8000000000000000 > 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n    if (x & 0x4000000000000000 > 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n    if (x & 0x2000000000000000 > 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n    if (x & 0x1000000000000000 > 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n    if (x & 0x800000000000000 > 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n    if (x & 0x400000000000000 > 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n    if (x & 0x200000000000000 > 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n    if (x & 0x100000000000000 > 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n    if (x & 0x80000000000000 > 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n    if (x & 0x40000000000000 > 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n    if (x & 0x20000000000000 > 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n    if (x & 0x10000000000000 > 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n    if (x & 0x8000000000000 > 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n    if (x & 0x4000000000000 > 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n    if (x & 0x2000000000000 > 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n    if (x & 0x1000000000000 > 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n    if (x & 0x800000000000 > 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n    if (x & 0x400000000000 > 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n    if (x & 0x200000000000 > 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n    if (x & 0x100000000000 > 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n    if (x & 0x80000000000 > 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n    if (x & 0x40000000000 > 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n    if (x & 0x20000000000 > 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n    if (x & 0x10000000000 > 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n    if (x & 0x8000000000 > 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n    if (x & 0x4000000000 > 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n    if (x & 0x2000000000 > 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n    if (x & 0x1000000000 > 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n    if (x & 0x800000000 > 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n    if (x & 0x400000000 > 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n    if (x & 0x200000000 > 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n    if (x & 0x100000000 > 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n    if (x & 0x80000000 > 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n    if (x & 0x40000000 > 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n    if (x & 0x20000000 > 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n    if (x & 0x10000000 > 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n    if (x & 0x8000000 > 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n    if (x & 0x4000000 > 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n    if (x & 0x2000000 > 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n    if (x & 0x1000000 > 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n    if (x & 0x800000 > 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n    if (x & 0x400000 > 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n    if (x & 0x200000 > 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n    if (x & 0x100000 > 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n    if (x & 0x80000 > 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n    if (x & 0x40000 > 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n    if (x & 0x20000 > 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n    if (x & 0x10000 > 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n    if (x & 0x8000 > 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n    if (x & 0x4000 > 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n    if (x & 0x2000 > 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n    if (x & 0x1000 > 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n    if (x & 0x800 > 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n    if (x & 0x400 > 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n    if (x & 0x200 > 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n    if (x & 0x100 > 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n    if (x & 0x80 > 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n    if (x & 0x40 > 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n    if (x & 0x20 > 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n    if (x & 0x10 > 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n    if (x & 0x8 > 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n    if (x & 0x4 > 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n    if (x & 0x2 > 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n    if (x & 0x1 > 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n    result >>= 63 - (x >> 64);\r\n    require (result <= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (\r\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x << 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x >> 192;\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y >> 128);\r\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x >> 192;\r\n      uint256 xl = x << 64;\r\n\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi << 128;\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi >> 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe > 0) x >>= xe;\r\n      else x <<= -xe;\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y > 0) {\r\n        if (y & 1 > 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result >>= 128;\r\n            re += 1;\r\n          } else result >>= 127;\r\n          if (re < -127) return 0; // Underflow\r\n          require (re < 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y >>= 1;\r\n          xe <<= 1;\r\n          if (x >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x >>= 128;\r\n            xe += 1;\r\n          } else x >>= 127;\r\n          if (xe < -127) return 0; // Underflow\r\n          require (xe < 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re > 0) result <<= re;\r\n      else if (re < 0) result >>= -re;\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      require (r > 0);\r\n      while (true) {\r\n        uint256 rr = x / r;\r\n        if (r == rr || r + 1 == rr) return uint128 (r);\r\n        else if (r == rr + 1) return uint128 (rr);\r\n        r = r + rr + 1 >> 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n////// src/interfaces/IAssimilator.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\ninterface IAssimilator {\r\n    function intakeRaw (uint256 amount) external returns (int128);\r\n    function intakeRawAndGetBalance (uint256 amount) external returns (int128, int128);\r\n    function intakeNumeraire (int128 amount) external returns (uint256);\r\n    function outputRaw (address dst, uint256 amount) external returns (int128);\r\n    function outputRawAndGetBalance (address dst, uint256 amount) external returns (int128, int128);\r\n    function outputNumeraire (address dst, int128 amount) external returns (uint256);\r\n    function viewRawAmount (int128) external view returns (uint256);\r\n    function viewNumeraireAmount (uint256) external view returns (int128);\r\n    function viewNumeraireBalance (address) external view returns (int128);\r\n    function viewNumeraireAmountAndBalance (address, uint256) external view returns (int128, int128);\r\n}\r\n////// src/Assimilators.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./interfaces/IAssimilator.sol\"; */\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary Assimilators {\r\n\r\n    using ABDKMath64x64 for int128;\r\n    IAssimilator constant iAsmltr = IAssimilator(address(0));\r\n\r\n    function delegate(address _callee, bytes memory _data) internal returns (bytes memory) {\r\n\r\n        (bool _success, bytes memory returnData_) = _callee.delegatecall(_data);\r\n\r\n        assembly { if eq(_success, 0) { revert(add(returnData_, 0x20), returndatasize()) } }\r\n\r\n        return returnData_;\r\n\r\n    }\r\n\r\n    function viewRawAmount (address _assim, int128 _amt) internal view returns (uint256 amount_) {\r\n\r\n        amount_ = IAssimilator(_assim).viewRawAmount(_amt);\r\n\r\n    }\r\n\r\n    function viewNumeraireAmount (address _assim, uint256 _amt) internal view returns (int128 amt_) {\r\n\r\n        amt_ = IAssimilator(_assim).viewNumeraireAmount(_amt);\r\n\r\n    }\r\n\r\n    function viewNumeraireAmountAndBalance (address _assim, uint256 _amt) internal view returns (int128 amt_, int128 bal_) {\r\n\r\n        ( amt_, bal_ ) = IAssimilator(_assim).viewNumeraireAmountAndBalance(address(this), _amt);\r\n\r\n    }\r\n\r\n    function viewNumeraireBalance (address _assim) internal view returns (int128 bal_) {\r\n\r\n        bal_ = IAssimilator(_assim).viewNumeraireBalance(address(this));\r\n\r\n    }\r\n\r\n    function intakeRaw (address _assim, uint256 _amt) internal returns (int128 amt_) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeRaw.selector, _amt);\r\n\r\n        amt_ = abi.decode(delegate(_assim, data), (int128));\r\n\r\n    }\r\n\r\n    function intakeRawAndGetBalance (address _assim, uint256 _amt) internal returns (int128 amt_, int128 bal_) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeRawAndGetBalance.selector, _amt);\r\n\r\n        ( amt_, bal_ ) = abi.decode(delegate(_assim, data), (int128,int128));\r\n\r\n    }\r\n\r\n    function intakeNumeraire (address _assim, int128 _amt) internal returns (uint256 amt_) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeNumeraire.selector, _amt);\r\n\r\n        amt_ = abi.decode(delegate(_assim, data), (uint256));\r\n\r\n    }\r\n\r\n    function outputRaw (address _assim, address _dst, uint256 _amt) internal returns (int128 amt_ ) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputRaw.selector, _dst, _amt);\r\n\r\n        amt_ = abi.decode(delegate(_assim, data), (int128));\r\n\r\n        amt_ = amt_.neg();\r\n\r\n    }\r\n\r\n    function outputRawAndGetBalance (address _assim, address _dst, uint256 _amt) internal returns (int128 amt_, int128 bal_) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputRawAndGetBalance.selector, _dst, _amt);\r\n\r\n        ( amt_, bal_ ) = abi.decode(delegate(_assim, data), (int128,int128));\r\n\r\n        amt_ = amt_.neg();\r\n\r\n    }\r\n\r\n    function outputNumeraire (address _assim, address _dst, int128 _amt) internal returns (uint256 amt_) {\r\n\r\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputNumeraire.selector, _dst, _amt.abs());\r\n\r\n        amt_ = abi.decode(delegate(_assim, data), (uint256));\r\n\r\n    }\r\n\r\n}\r\n////// src/UnsafeMath64x64.sol\r\n/* pragma solidity ^0.5.0; */\r\n\r\nlibrary UnsafeMath64x64 {\r\n\r\n  /**\r\n   * Calculate x * y rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n\r\n  function us_mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n\r\n  function us_div (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = (int256 (x) << 64) / y;\r\n    return int128 (result);\r\n  }\r\n\r\n}\r\n\r\n////// src/PartitionedLiquidity.sol\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./UnsafeMath64x64.sol\"; */\r\n\r\nlibrary PartitionedLiquidity {\r\n\r\n    using ABDKMath64x64 for uint;\r\n    using ABDKMath64x64 for int128;\r\n    using UnsafeMath64x64 for int128;\r\n\r\n    event PoolPartitioned(bool);\r\n\r\n    event PartitionRedeemed(address indexed token, address indexed redeemer, uint value);\r\n\r\n    int128 constant ONE = 0x10000000000000000;\r\n\r\n    function partition (\r\n        ShellStorage.Shell storage shell,\r\n        mapping (address => ShellStorage.PartitionTicket) storage partitionTickets\r\n    ) external {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        ShellStorage.PartitionTicket storage totalSupplyTicket = partitionTickets[address(this)];\r\n\r\n        totalSupplyTicket.initialized = true;\r\n\r\n        for (uint i = 0; i < _length; i++) totalSupplyTicket.claims.push(shell.totalSupply);\r\n\r\n        emit PoolPartitioned(true);\r\n\r\n    }\r\n\r\n    function viewPartitionClaims (\r\n        ShellStorage.Shell storage shell,\r\n        mapping (address => ShellStorage.PartitionTicket) storage partitionTickets,\r\n        address _addr\r\n    ) external view returns (\r\n        uint[] memory claims_\r\n    ) {\r\n\r\n        ShellStorage.PartitionTicket storage ticket = partitionTickets[_addr];\r\n\r\n        if (ticket.initialized) return ticket.claims;\r\n\r\n        uint _length = shell.assets.length;\r\n        uint[] memory claims_ = new uint[](_length);\r\n        uint _balance = shell.balances[msg.sender];\r\n\r\n        for (uint i = 0; i < _length; i++) claims_[i] = _balance;\r\n\r\n        return claims_;\r\n\r\n    }\r\n\r\n    function partitionedWithdraw (\r\n        ShellStorage.Shell storage shell,\r\n        mapping (address => ShellStorage.PartitionTicket) storage partitionTickets,\r\n        address[] calldata _derivatives,\r\n        uint[] calldata _withdrawals\r\n    ) external returns (\r\n        uint[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n        uint _balance = shell.balances[msg.sender];\r\n\r\n        ShellStorage.PartitionTicket storage totalSuppliesTicket = partitionTickets[address(this)];\r\n        ShellStorage.PartitionTicket storage ticket = partitionTickets[msg.sender];\r\n\r\n        if (!ticket.initialized) {\r\n\r\n            for (uint i = 0; i < _length; i++) ticket.claims.push(_balance);\r\n            ticket.initialized = true;\r\n\r\n        }\r\n\r\n        _length = _derivatives.length;\r\n\r\n        uint[] memory withdrawals_ = new uint[](_length);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            ShellStorage.Assimilator memory _assim = shell.assimilators[_derivatives[i]];\r\n\r\n            require(totalSuppliesTicket.claims[_assim.ix] >= _withdrawals[i], \"Shell/burn-exceeds-total-supply\");\r\n            \r\n            require(ticket.claims[_assim.ix] >= _withdrawals[i], \"Shell/insufficient-balance\");\r\n\r\n            require(_assim.addr != address(0), \"Shell/unsupported-asset\");\r\n\r\n            int128 _reserveBalance = Assimilators.viewNumeraireBalance(_assim.addr);\r\n\r\n            int128 _multiplier = _withdrawals[i].divu(1e18)\r\n                .div(totalSuppliesTicket.claims[_assim.ix].divu(1e18));\r\n\r\n            totalSuppliesTicket.claims[_assim.ix] = totalSuppliesTicket.claims[_assim.ix] - _withdrawals[i];\r\n\r\n            ticket.claims[_assim.ix] = ticket.claims[_assim.ix] - _withdrawals[i];\r\n\r\n            uint _withdrawal = Assimilators.outputNumeraire(\r\n                _assim.addr,\r\n                msg.sender,\r\n                _reserveBalance.mul(_multiplier)\r\n            );\r\n\r\n            withdrawals_[i] = _withdrawal;\r\n\r\n            emit PartitionRedeemed(_derivatives[i], msg.sender, withdrawals_[i]);\r\n\r\n        }\r\n\r\n        return withdrawals_;\r\n\r\n    }\r\n\r\n}\r\n////// src/ProportionalLiquidity.sol\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./UnsafeMath64x64.sol\"; */\r\n\r\n/* import \"./ShellMath.sol\"; */\r\n\r\n\r\nlibrary ProportionalLiquidity {\r\n\r\n    using ABDKMath64x64 for uint;\r\n    using ABDKMath64x64 for int128;\r\n    using UnsafeMath64x64 for int128;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    int128 constant ONE = 0x10000000000000000;\r\n    int128 constant ONE_WEI = 0x12;\r\n\r\n    function proportionalDeposit (\r\n        ShellStorage.Shell storage shell,\r\n        uint256 _deposit\r\n    ) external returns (\r\n        uint256 shells_,\r\n        uint[] memory\r\n    ) {\r\n\r\n        int128 __deposit = _deposit.divu(1e18);\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        uint[] memory deposits_ = new uint[](_length);\r\n        \r\n        ( int128 _oGLiq, int128[] memory _oBals ) = getGrossLiquidityAndBalances(shell);\r\n\r\n        if (_oGLiq == 0) {\r\n\r\n            for (uint i = 0; i < _length; i++) {\r\n\r\n                deposits_[i] = Assimilators.intakeNumeraire(shell.assets[i].addr, __deposit.mul(shell.weights[i]));\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            int128 _multiplier = __deposit.div(_oGLiq);\r\n\r\n            for (uint i = 0; i < _length; i++) {\r\n\r\n                deposits_[i] = Assimilators.intakeNumeraire(shell.assets[i].addr, _oBals[i].mul(_multiplier));\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        int128 _totalShells = shell.totalSupply.divu(1e18);\r\n        \r\n        int128 _newShells = _totalShells > 0\r\n            ? __deposit.div(_oGLiq).mul(_totalShells)\r\n            : __deposit;\r\n\r\n        requireLiquidityInvariant(\r\n            shell, \r\n            _totalShells,\r\n            _newShells, \r\n            _oGLiq, \r\n            _oBals\r\n        );        \r\n\r\n        mint(shell, msg.sender, shells_ = _newShells.mulu(1e18));\r\n\r\n        return (shells_, deposits_);\r\n\r\n    }\r\n    \r\n    \r\n    function viewProportionalDeposit (\r\n        ShellStorage.Shell storage shell,\r\n        uint256 _deposit\r\n    ) external view returns (\r\n        uint shells_,\r\n        uint[] memory\r\n    ) {\r\n\r\n        int128 __deposit = _deposit.divu(1e18);\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        ( int128 _oGLiq, int128[] memory _oBals ) = getGrossLiquidityAndBalances(shell);\r\n\r\n        uint[] memory deposits_ = new uint[](_length);\r\n\r\n        if (_oGLiq == 0) {\r\n\r\n            for (uint i = 0; i < _length; i++) {\r\n\r\n                deposits_[i] = Assimilators.viewRawAmount(\r\n                    shell.assets[i].addr,\r\n                    __deposit.mul(shell.weights[i])\r\n                );\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            int128 _multiplier = __deposit.div(_oGLiq);\r\n\r\n            for (uint i = 0; i < _length; i++) {\r\n\r\n                deposits_[i] = Assimilators.viewRawAmount(\r\n                    shell.assets[i].addr,\r\n                    _oBals[i].mul(_multiplier)\r\n                );\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        int128 _totalShells = shell.totalSupply.divu(1e18);\r\n        \r\n        int128 _newShells = _totalShells > 0\r\n            ? __deposit.div(_oGLiq).mul(_totalShells)\r\n            : __deposit;\r\n        \r\n        shells_ = _newShells.mulu(1e18);\r\n\r\n        return ( shells_, deposits_ );\r\n\r\n    }\r\n\r\n    function proportionalWithdraw (\r\n        ShellStorage.Shell storage shell,\r\n        uint256 _withdrawal\r\n    ) external returns (\r\n        uint[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        ( int128 _oGLiq, int128[] memory _oBals ) = getGrossLiquidityAndBalances(shell);\r\n\r\n        uint[] memory withdrawals_ = new uint[](_length);\r\n        \r\n        int128 _totalShells = shell.totalSupply.divu(1e18);\r\n        int128 __withdrawal = _withdrawal.divu(1e18);\r\n\r\n        int128 _multiplier = __withdrawal\r\n            .mul(ONE - shell.epsilon)\r\n            .div(_totalShells);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            withdrawals_[i] = Assimilators.outputNumeraire(\r\n                shell.assets[i].addr,\r\n                msg.sender,\r\n                _oBals[i].mul(_multiplier)\r\n            );\r\n\r\n        }\r\n\r\n        requireLiquidityInvariant(\r\n            shell, \r\n            _totalShells, \r\n            __withdrawal.neg(), \r\n            _oGLiq, \r\n            _oBals\r\n        );\r\n        \r\n        burn(shell, msg.sender, _withdrawal);\r\n\r\n        return withdrawals_;\r\n\r\n    }\r\n    \r\n    function viewProportionalWithdraw (\r\n        ShellStorage.Shell storage shell,\r\n        uint256 _withdrawal\r\n    ) external view returns (\r\n        uint[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        ( int128 _oGLiq, int128[] memory _oBals ) = getGrossLiquidityAndBalances(shell);\r\n\r\n        uint[] memory withdrawals_ = new uint[](_length);\r\n\r\n        int128 _multiplier = _withdrawal.divu(1e18)\r\n            .mul(ONE - shell.epsilon)\r\n            .div(shell.totalSupply.divu(1e18));\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            withdrawals_[i] = Assimilators.viewRawAmount(shell.assets[i].addr, _oBals[i].mul(_multiplier));\r\n\r\n        }\r\n\r\n        return withdrawals_;\r\n\r\n    }\r\n\r\n    function getGrossLiquidityAndBalances (\r\n        ShellStorage.Shell storage shell\r\n    ) internal view returns (\r\n        int128 grossLiquidity_,\r\n        int128[] memory\r\n    ) {\r\n        \r\n        uint _length = shell.assets.length;\r\n\r\n        int128[] memory balances_ = new int128[](_length);\r\n        \r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            int128 _bal = Assimilators.viewNumeraireBalance(shell.assets[i].addr);\r\n            \r\n            balances_[i] = _bal;\r\n            grossLiquidity_ += _bal;\r\n            \r\n        }\r\n        \r\n        return (grossLiquidity_, balances_);\r\n\r\n    }\r\n    \r\n    function requireLiquidityInvariant (\r\n        ShellStorage.Shell storage shell,\r\n        int128 _shells,\r\n        int128 _newShells,\r\n        int128 _oGLiq,\r\n        int128[] memory _oBals\r\n    ) private {\r\n    \r\n        ( int128 _nGLiq, int128[] memory _nBals ) = getGrossLiquidityAndBalances(shell);\r\n        \r\n        int128 _beta = shell.beta;\r\n        int128 _delta = shell.delta;\r\n        int128[] memory _weights = shell.weights;\r\n        \r\n        int128 _omega = ShellMath.calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\r\n\r\n        int128 _psi = ShellMath.calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\r\n\r\n        ShellMath.enforceLiquidityInvariant(_shells, _newShells, _oGLiq, _nGLiq, _omega, _psi);\r\n        \r\n    }\r\n\r\n    function burn (ShellStorage.Shell storage shell, address account, uint256 amount) private {\r\n\r\n        shell.balances[account] = burn_sub(shell.balances[account], amount);\r\n\r\n        shell.totalSupply = burn_sub(shell.totalSupply, amount);\r\n\r\n        emit Transfer(msg.sender, address(0), amount);\r\n\r\n    }\r\n\r\n    function mint (ShellStorage.Shell storage shell, address account, uint256 amount) private {\r\n\r\n        shell.totalSupply = mint_add(shell.totalSupply, amount);\r\n\r\n        shell.balances[account] = mint_add(shell.balances[account], amount);\r\n\r\n        emit Transfer(address(0), msg.sender, amount);\r\n\r\n    }\r\n\r\n    function mint_add(uint x, uint y) private pure returns (uint z) {\r\n\r\n        require((z = x + y) >= x, \"Shell/mint-overflow\");\r\n\r\n    }\r\n\r\n    function burn_sub(uint x, uint y) private pure returns (uint z) {\r\n\r\n        require((z = x - y) <= x, \"Shell/burn-underflow\");\r\n\r\n    }\r\n\r\n\r\n}\r\n////// src/SelectiveLiquidity.sol\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./ShellMath.sol\"; */\r\n\r\n/* import \"./UnsafeMath64x64.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\n\r\nlibrary SelectiveLiquidity {\r\n\r\n    using ABDKMath64x64 for int128;\r\n    using UnsafeMath64x64 for int128;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    int128 constant ONE = 0x10000000000000000;\r\n\r\n    function selectiveDeposit (\r\n        ShellStorage.Shell storage shell,\r\n        address[] calldata _derivatives,\r\n        uint[] calldata _amounts,\r\n        uint _minShells\r\n    ) external returns (\r\n        uint shells_\r\n    ) {\r\n\r\n        (   int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals ) = getLiquidityDepositData(shell, _derivatives, _amounts);\r\n\r\n        int128 _shells = ShellMath.calculateLiquidityMembrane(shell, _oGLiq, _nGLiq, _oBals, _nBals);\r\n\r\n        shells_ = _shells.mulu(1e18);\r\n\r\n        require(_minShells < shells_, \"Shell/under-minimum-shells\");\r\n\r\n        mint(shell, msg.sender, shells_);\r\n\r\n    }\r\n\r\n    function viewSelectiveDeposit (\r\n        ShellStorage.Shell storage shell,\r\n        address[] calldata _derivatives,\r\n        uint[] calldata _amounts\r\n    ) external view returns (\r\n        uint shells_\r\n    ) {\r\n\r\n        (   int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals ) = viewLiquidityDepositData(shell, _derivatives, _amounts);\r\n\r\n        int128 _shells = ShellMath.calculateLiquidityMembrane(shell, _oGLiq, _nGLiq, _oBals, _nBals);\r\n\r\n        shells_ = _shells.mulu(1e18);\r\n\r\n    }\r\n\r\n    function selectiveWithdraw (\r\n        ShellStorage.Shell storage shell,\r\n        address[] calldata _derivatives,\r\n        uint[] calldata _amounts,\r\n        uint _maxShells\r\n    ) external returns (\r\n        uint256 shells_\r\n    ) {\r\n\r\n        (   int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals ) = getLiquidityWithdrawData(shell, _derivatives, msg.sender, _amounts);\r\n\r\n        int128 _shells = ShellMath.calculateLiquidityMembrane(shell, _oGLiq, _nGLiq, _oBals, _nBals);\r\n\r\n        _shells = _shells.neg().us_mul(ONE + shell.epsilon);\r\n\r\n        shells_ = _shells.mulu(1e18);\r\n\r\n        require(shells_ < _maxShells, \"Shell/above-maximum-shells\");\r\n\r\n        burn(shell, msg.sender, shells_);\r\n\r\n    }\r\n\r\n    function viewSelectiveWithdraw (\r\n        ShellStorage.Shell storage shell,\r\n        address[] calldata _derivatives,\r\n        uint[] calldata _amounts\r\n    ) external view returns (\r\n        uint shells_\r\n    ) {\r\n\r\n        (   int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals ) = viewLiquidityWithdrawData(shell, _derivatives, _amounts);\r\n\r\n        int128 _shells = ShellMath.calculateLiquidityMembrane(shell, _oGLiq, _nGLiq, _oBals, _nBals);\r\n\r\n        _shells = _shells.neg().us_mul(ONE + shell.epsilon);\r\n\r\n        shells_ = _shells.mulu(1e18);\r\n\r\n    }\r\n\r\n    function getLiquidityDepositData (\r\n        ShellStorage.Shell storage shell,\r\n        address[] memory _derivatives,\r\n        uint[] memory _amounts\r\n    ) private returns (\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.weights.length;\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _derivatives.length; i++) {\r\n\r\n            ShellStorage.Assimilator memory _assim = shell.assimilators[_derivatives[i]];\r\n\r\n            require(_assim.addr != address(0), \"Shell/unsupported-derivative\");\r\n\r\n            if ( nBals_[_assim.ix] == 0 && 0 == oBals_[_assim.ix]) {\r\n\r\n                ( int128 _amount, int128 _balance ) = Assimilators.intakeRawAndGetBalance(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = _balance;\r\n\r\n                oBals_[_assim.ix] = _balance.sub(_amount);\r\n\r\n            } else {\r\n\r\n                int128 _amount = Assimilators.intakeRaw(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = nBals_[_assim.ix].add(_amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return completeLiquidityData(shell, oBals_, nBals_);\r\n\r\n    }\r\n\r\n    function getLiquidityWithdrawData (\r\n        ShellStorage.Shell storage shell,\r\n        address[] memory _derivatives,\r\n        address _rcpnt,\r\n        uint[] memory _amounts\r\n    ) private returns (\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.weights.length;\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _derivatives.length; i++) {\r\n\r\n            ShellStorage.Assimilator memory _assim = shell.assimilators[_derivatives[i]];\r\n\r\n            require(_assim.addr != address(0), \"Shell/unsupported-derivative\");\r\n\r\n            if ( nBals_[_assim.ix] == 0 && 0 == oBals_[_assim.ix]) {\r\n\r\n                ( int128 _amount, int128 _balance ) = Assimilators.outputRawAndGetBalance(_assim.addr, _rcpnt, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = _balance;\r\n                oBals_[_assim.ix] = _balance.sub(_amount);\r\n\r\n            } else {\r\n\r\n                int128 _amount = Assimilators.outputRaw(_assim.addr, _rcpnt, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = nBals_[_assim.ix].add(_amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return completeLiquidityData(shell, oBals_, nBals_);\r\n\r\n    }\r\n\r\n    function viewLiquidityDepositData (\r\n        ShellStorage.Shell storage shell,\r\n        address[] memory _derivatives,\r\n        uint[] memory _amounts\r\n    ) private view returns (\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _derivatives.length; i++) {\r\n\r\n            ShellStorage.Assimilator memory _assim = shell.assimilators[_derivatives[i]];\r\n\r\n            require(_assim.addr != address(0), \"Shell/unsupported-derivative\");\r\n\r\n            if ( nBals_[_assim.ix] == 0 && 0 == oBals_[_assim.ix]) {\r\n\r\n                ( int128 _amount, int128 _balance ) = Assimilators.viewNumeraireAmountAndBalance(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = _balance.add(_amount);\r\n\r\n                oBals_[_assim.ix] = _balance;\r\n\r\n            } else {\r\n\r\n                int128 _amount = Assimilators.viewNumeraireAmount(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = nBals_[_assim.ix].add(_amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return completeLiquidityData(shell, oBals_, nBals_);\r\n\r\n    }\r\n\r\n    function viewLiquidityWithdrawData (\r\n        ShellStorage.Shell storage shell,\r\n        address[] memory _derivatives,\r\n        uint[] memory _amounts\r\n    ) private view returns (\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _derivatives.length; i++) {\r\n\r\n            ShellStorage.Assimilator memory _assim = shell.assimilators[_derivatives[i]];\r\n\r\n            require(_assim.addr != address(0), \"Shell/unsupported-derivative\");\r\n\r\n            if ( nBals_[_assim.ix] == 0 && 0 == oBals_[_assim.ix]) {\r\n\r\n                ( int128 _amount, int128 _balance ) = Assimilators.viewNumeraireAmountAndBalance(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = _balance.sub(_amount);\r\n\r\n                oBals_[_assim.ix] = _balance;\r\n\r\n            } else {\r\n\r\n                int128 _amount = Assimilators.viewNumeraireAmount(_assim.addr, _amounts[i]);\r\n\r\n                nBals_[_assim.ix] = nBals_[_assim.ix].sub(_amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return completeLiquidityData(shell, oBals_, nBals_);\r\n\r\n    }\r\n\r\n    function completeLiquidityData (\r\n        ShellStorage.Shell storage shell,\r\n        int128[] memory oBals_,\r\n        int128[] memory nBals_\r\n    ) private view returns (\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = oBals_.length;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            if (oBals_[i] == 0 && 0 == nBals_[i]) {\r\n\r\n                nBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(shell.assets[i].addr);\r\n                \r\n            }\r\n\r\n            oGLiq_ += oBals_[i];\r\n            nGLiq_ += nBals_[i];\r\n\r\n        }\r\n\r\n        return ( oGLiq_, nGLiq_, oBals_, nBals_ );\r\n\r\n    }\r\n\r\n    function burn (ShellStorage.Shell storage shell, address account, uint256 amount) private {\r\n\r\n        shell.balances[account] = burn_sub(shell.balances[account], amount);\r\n\r\n        shell.totalSupply = burn_sub(shell.totalSupply, amount);\r\n\r\n        emit Transfer(msg.sender, address(0), amount);\r\n\r\n    }\r\n\r\n    function mint (ShellStorage.Shell storage shell, address account, uint256 amount) private {\r\n\r\n        shell.totalSupply = mint_add(shell.totalSupply, amount);\r\n\r\n        shell.balances[account] = mint_add(shell.balances[account], amount);\r\n\r\n        emit Transfer(address(0), msg.sender, amount);\r\n\r\n    }\r\n\r\n    function mint_add(uint x, uint y) private pure returns (uint z) {\r\n        require((z = x + y) >= x, \"Shell/mint-overflow\");\r\n    }\r\n\r\n    function burn_sub(uint x, uint y) private pure returns (uint z) {\r\n        require((z = x - y) <= x, \"Shell/burn-underflow\");\r\n    }\r\n\r\n}\r\n////// src/Shells.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary Shells {\r\n\r\n    using ABDKMath64x64 for int128;\r\n\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function add(uint x, uint y, string memory errorMessage) private pure returns (uint z) {\r\n        require((z = x + y) >= x, errorMessage);\r\n    }\r\n\r\n    function sub(uint x, uint y, string memory errorMessage) private pure returns (uint z) {\r\n        require((z = x - y) <= x, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(ShellStorage.Shell storage shell, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(shell, msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(ShellStorage.Shell storage shell, address spender, uint256 amount) external returns (bool) {\r\n        _approve(shell, msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`\r\n     */\r\n    function transferFrom(ShellStorage.Shell storage shell, address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(shell, msg.sender, recipient, amount);\r\n        _approve(shell, sender, msg.sender, sub(shell.allowances[sender][msg.sender], amount, \"Shell/insufficient-allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(ShellStorage.Shell storage shell, address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(shell, msg.sender, spender, add(shell.allowances[msg.sender][spender], addedValue, \"Shell/approval-overflow\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(ShellStorage.Shell storage shell, address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(shell, msg.sender, spender, sub(shell.allowances[msg.sender][spender], subtractedValue, \"Shell/allowance-decrease-underflow\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is public function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(ShellStorage.Shell storage shell, address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        shell.balances[sender] = sub(shell.balances[sender], amount, \"Shell/insufficient-balance\");\r\n        shell.balances[recipient] = add(shell.balances[recipient], amount, \"Shell/transfer-overflow\");\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `_owner`s tokens.\r\n     *\r\n     * This is public function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(ShellStorage.Shell storage shell, address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        shell.allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n}\r\n////// src/Swaps.sol\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./ShellMath.sol\"; */\r\n\r\n/* import \"./UnsafeMath64x64.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary Swaps {\r\n\r\n    using ABDKMath64x64 for int128;\r\n    using UnsafeMath64x64 for int128;\r\n\r\n    event Trade(address indexed trader, address indexed origin, address indexed target, uint256 originAmount, uint256 targetAmount);\r\n\r\n    int128 constant ONE = 0x10000000000000000;\r\n\r\n    function getOriginAndTarget (\r\n        ShellStorage.Shell storage shell,\r\n        address _o,\r\n        address _t\r\n    ) private view returns (\r\n        ShellStorage.Assimilator memory,\r\n        ShellStorage.Assimilator memory\r\n    ) {\r\n\r\n        ShellStorage.Assimilator memory o_ = shell.assimilators[_o];\r\n        ShellStorage.Assimilator memory t_ = shell.assimilators[_t];\r\n\r\n        require(o_.addr != address(0), \"Shell/origin-not-supported\");\r\n        require(t_.addr != address(0), \"Shell/target-not-supported\");\r\n\r\n        return ( o_, t_ );\r\n\r\n    }\r\n\r\n\r\n    function originSwap (\r\n        ShellStorage.Shell storage shell,\r\n        address _origin,\r\n        address _target,\r\n        uint256 _originAmount,\r\n        address _recipient\r\n    ) external returns (\r\n        uint256 tAmt_\r\n    ) {\r\n\r\n        (   ShellStorage.Assimilator memory _o,\r\n            ShellStorage.Assimilator memory _t  ) = getOriginAndTarget(shell, _origin, _target);\r\n\r\n        if (_o.ix == _t.ix) return Assimilators.outputNumeraire(_t.addr, _recipient, Assimilators.intakeRaw(_o.addr, _originAmount));\r\n\r\n        (   int128 _amt,\r\n            int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals ) = getOriginSwapData(shell, _o.ix, _t.ix, _o.addr, _originAmount);\r\n\r\n        _amt = ShellMath.calculateTrade(shell, _oGLiq, _nGLiq, _oBals, _nBals, _amt, _t.ix);\r\n\r\n        _amt = _amt.us_mul(ONE - shell.epsilon);\r\n\r\n        tAmt_ = Assimilators.outputNumeraire(_t.addr, _recipient, _amt);\r\n\r\n        emit Trade(msg.sender, _origin, _target, _originAmount, tAmt_);\r\n\r\n    }\r\n\r\n    function viewOriginSwap (\r\n        ShellStorage.Shell storage shell,\r\n        address _origin,\r\n        address _target,\r\n        uint256 _originAmount\r\n    ) external view returns (\r\n        uint256 tAmt_\r\n    ) {\r\n\r\n        (   ShellStorage.Assimilator memory _o,\r\n            ShellStorage.Assimilator memory _t  ) = getOriginAndTarget(shell, _origin, _target);\r\n\r\n        if (_o.ix == _t.ix) return Assimilators.viewRawAmount(_t.addr, Assimilators.viewNumeraireAmount(_o.addr, _originAmount));\r\n\r\n        (   int128 _amt,\r\n            int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _nBals,\r\n            int128[] memory _oBals ) = viewOriginSwapData(shell, _o.ix, _t.ix, _originAmount, _o.addr);\r\n\r\n        _amt = ShellMath.calculateTrade(shell, _oGLiq, _nGLiq, _oBals, _nBals, _amt, _t.ix);\r\n\r\n        _amt = _amt.us_mul(ONE - shell.epsilon);\r\n\r\n        tAmt_ = Assimilators.viewRawAmount(_t.addr, _amt.abs());\r\n\r\n    }\r\n\r\n    function targetSwap (\r\n        ShellStorage.Shell storage shell,\r\n        address _origin,\r\n        address _target,\r\n        uint256 _targetAmount,\r\n        address _recipient\r\n    ) external returns (\r\n        uint256 oAmt_\r\n    ) {\r\n\r\n        (   ShellStorage.Assimilator memory _o,\r\n            ShellStorage.Assimilator memory _t  ) = getOriginAndTarget(shell, _origin, _target);\r\n\r\n        if (_o.ix == _t.ix) return Assimilators.intakeNumeraire(_o.addr, Assimilators.outputRaw(_t.addr, _recipient, _targetAmount));\r\n\r\n        (   int128 _amt,\r\n            int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _oBals,\r\n            int128[] memory _nBals) = getTargetSwapData(shell, _t.ix, _o.ix, _t.addr, _recipient, _targetAmount);\r\n\r\n        _amt = ShellMath.calculateTrade(shell, _oGLiq, _nGLiq, _oBals, _nBals, _amt, _o.ix);\r\n\r\n        _amt = _amt.us_mul(ONE + shell.epsilon);\r\n\r\n        oAmt_ = Assimilators.intakeNumeraire(_o.addr, _amt);\r\n\r\n        emit Trade(msg.sender, _origin, _target, oAmt_, _targetAmount);\r\n\r\n    }\r\n\r\n    function viewTargetSwap (\r\n        ShellStorage.Shell storage shell,\r\n        address _origin,\r\n        address _target,\r\n        uint256 _targetAmount\r\n    ) external view returns (\r\n        uint256 oAmt_\r\n    ) {\r\n\r\n        (   ShellStorage.Assimilator memory _o,\r\n            ShellStorage.Assimilator memory _t  ) = getOriginAndTarget(shell, _origin, _target);\r\n\r\n        if (_o.ix == _t.ix) return Assimilators.viewRawAmount(_o.addr, Assimilators.viewNumeraireAmount(_t.addr, _targetAmount));\r\n\r\n        (   int128 _amt,\r\n            int128 _oGLiq,\r\n            int128 _nGLiq,\r\n            int128[] memory _nBals,\r\n            int128[] memory _oBals ) = viewTargetSwapData(shell, _t.ix, _o.ix, _targetAmount, _t.addr);\r\n\r\n        _amt = ShellMath.calculateTrade(shell, _oGLiq, _nGLiq, _oBals, _nBals, _amt, _o.ix);\r\n\r\n        _amt = _amt.us_mul(ONE + shell.epsilon);\r\n\r\n        oAmt_ = Assimilators.viewRawAmount(_o.addr, _amt);\r\n\r\n    }\r\n\r\n    function getOriginSwapData (\r\n        ShellStorage.Shell storage shell,\r\n        uint _inputIx,\r\n        uint _outputIx,\r\n        address _assim,\r\n        uint _amt\r\n    ) private returns (\r\n        int128 amt_,\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n        ShellStorage.Assimilator[] memory _reserves = shell.assets;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            if (i != _inputIx) nBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(_reserves[i].addr);\r\n            else {\r\n\r\n                int128 _bal;\r\n                ( amt_, _bal ) = Assimilators.intakeRawAndGetBalance(_assim, _amt);\r\n\r\n                oBals_[i] = _bal.sub(amt_);\r\n                nBals_[i] = _bal;\r\n\r\n            }\r\n\r\n            oGLiq_ += oBals_[i];\r\n            nGLiq_ += nBals_[i];\r\n\r\n        }\r\n\r\n        nGLiq_ = nGLiq_.sub(amt_);\r\n        nBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\r\n\r\n        return ( amt_, oGLiq_, nGLiq_, oBals_, nBals_ );\r\n\r\n    }\r\n\r\n    function getTargetSwapData (\r\n        ShellStorage.Shell storage shell,\r\n        uint _inputIx,\r\n        uint _outputIx,\r\n        address _assim,\r\n        address _recipient,\r\n        uint _amt\r\n    ) private returns (\r\n        int128 amt_,\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        int128[] memory oBals_ = new int128[](_length);\r\n        int128[] memory nBals_ = new int128[](_length);\r\n        ShellStorage.Assimilator[] memory _reserves = shell.assets;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            if (i != _inputIx) nBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(_reserves[i].addr);\r\n            else {\r\n\r\n                int128 _bal;\r\n                ( amt_, _bal ) = Assimilators.outputRawAndGetBalance(_assim, _recipient, _amt);\r\n\r\n                oBals_[i] = _bal.sub(amt_);\r\n                nBals_[i] = _bal;\r\n\r\n            }\r\n\r\n            oGLiq_ += oBals_[i];\r\n            nGLiq_ += nBals_[i];\r\n\r\n        }\r\n\r\n        nGLiq_ = nGLiq_.sub(amt_);\r\n        nBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\r\n\r\n        return ( amt_, oGLiq_, nGLiq_, oBals_, nBals_ );\r\n\r\n    }\r\n\r\n    function viewOriginSwapData (\r\n        ShellStorage.Shell storage shell,\r\n        uint _inputIx,\r\n        uint _outputIx,\r\n        uint _amt,\r\n        address _assim\r\n    ) private view returns (\r\n        int128 amt_,\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n        int128[] memory nBals_ = new int128[](_length);\r\n        int128[] memory oBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            if (i != _inputIx) nBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(shell.assets[i].addr);\r\n            else {\r\n\r\n                int128 _bal;\r\n                ( amt_, _bal ) = Assimilators.viewNumeraireAmountAndBalance(_assim, _amt);\r\n\r\n                oBals_[i] = _bal;\r\n                nBals_[i] = _bal.add(amt_);\r\n\r\n            }\r\n\r\n            oGLiq_ += oBals_[i];\r\n            nGLiq_ += nBals_[i];\r\n\r\n        }\r\n\r\n        nGLiq_ = nGLiq_.sub(amt_);\r\n        nBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\r\n\r\n        return ( amt_, oGLiq_, nGLiq_, nBals_, oBals_ );\r\n\r\n    }\r\n\r\n    function viewTargetSwapData (\r\n        ShellStorage.Shell storage shell,\r\n        uint _inputIx,\r\n        uint _outputIx,\r\n        uint _amt,\r\n        address _assim\r\n    ) private view returns (\r\n        int128 amt_,\r\n        int128 oGLiq_,\r\n        int128 nGLiq_,\r\n        int128[] memory,\r\n        int128[] memory\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n        int128[] memory nBals_ = new int128[](_length);\r\n        int128[] memory oBals_ = new int128[](_length);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            if (i != _inputIx) nBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(shell.assets[i].addr);\r\n            else {\r\n\r\n                int128 _bal;\r\n                ( amt_, _bal ) = Assimilators.viewNumeraireAmountAndBalance(_assim, _amt);\r\n                amt_ = amt_.neg();\r\n\r\n                oBals_[i] = _bal;\r\n                nBals_[i] = _bal.add(amt_);\r\n\r\n            }\r\n\r\n            oGLiq_ += oBals_[i];\r\n            nGLiq_ += nBals_[i];\r\n\r\n        }\r\n\r\n        nGLiq_ = nGLiq_.sub(amt_);\r\n        nBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\r\n\r\n\r\n        return ( amt_, oGLiq_, nGLiq_, nBals_, oBals_ );\r\n\r\n    }\r\n\r\n}\r\n////// src/ViewLiquidity.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary ViewLiquidity {\r\n\r\n    using ABDKMath64x64 for int128;\r\n\r\n    function viewLiquidity (\r\n        ShellStorage.Shell storage shell\r\n    ) external view returns (\r\n        uint total_,\r\n        uint[] memory individual_\r\n    ) {\r\n\r\n        uint _length = shell.assets.length;\r\n\r\n        uint[] memory individual_ = new uint[](_length);\r\n        uint total_;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            uint _liquidity = Assimilators.viewNumeraireBalance(shell.assets[i].addr).mulu(1e18);\r\n\r\n            total_ += _liquidity;\r\n            individual_[i] = _liquidity;\r\n\r\n        }\r\n\r\n        return (total_, individual_);\r\n\r\n    }\r\n\r\n}\r\n////// src/ShellStorage.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\n/* import \"./Orchestrator.sol\"; */\r\n\r\n/* import \"./PartitionedLiquidity.sol\"; */\r\n\r\n/* import \"./ProportionalLiquidity.sol\"; */\r\n\r\n/* import \"./SelectiveLiquidity.sol\"; */\r\n\r\n/* import \"./Shells.sol\"; */\r\n\r\n/* import \"./Swaps.sol\"; */\r\n\r\n/* import \"./ViewLiquidity.sol\"; */\r\n\r\ncontract ShellStorage {\r\n\r\n    address public owner;\r\n\r\n    string  public constant name = \"Shells\";\r\n    string  public constant symbol = \"SHL\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    Shell public shell;\r\n\r\n    struct Shell {\r\n        int128 alpha;\r\n        int128 beta;\r\n        int128 delta;\r\n        int128 epsilon;\r\n        int128 lambda;\r\n        int128[] weights;\r\n        uint totalSupply;\r\n        Assimilator[] assets;\r\n        mapping (address => Assimilator) assimilators;\r\n        mapping (address => uint) balances;\r\n        mapping (address => mapping (address => uint)) allowances;\r\n    }\r\n\r\n    struct Assimilator {\r\n        address addr;\r\n        uint8 ix;\r\n    }\r\n\r\n    mapping (address => PartitionTicket) public partitionTickets;\r\n\r\n    struct PartitionTicket {\r\n        uint[] claims;\r\n        bool initialized;\r\n    }\r\n\r\n    address[] public derivatives;\r\n    address[] public numeraires;\r\n    address[] public reserves;\r\n\r\n    bool public partitioned = false;\r\n\r\n    bool public frozen = false;\r\n\r\n    bool internal notEntered = true;\r\n\r\n}\r\n////// src/ShellMath.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./UnsafeMath64x64.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary ShellMath {\r\n\r\n    int128 constant ONE = 0x10000000000000000;\r\n    int128 constant MAX = 0x4000000000000000; // .25 in layman's terms\r\n    int128 constant MAX_DIFF = -0x10C6F7A0B5EE;\r\n    int128 constant ONE_WEI = 0x12;\r\n\r\n    using ABDKMath64x64 for int128;\r\n    using UnsafeMath64x64 for int128;\r\n    using ABDKMath64x64 for uint256;\r\n\r\n    function calculateFee (\r\n        int128 _gLiq,\r\n        int128[] memory _bals,\r\n        int128 _beta,\r\n        int128 _delta,\r\n        int128[] memory _weights\r\n    ) internal pure returns (int128 psi_) {\r\n\r\n        uint _length = _bals.length;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            int128 _ideal = _gLiq.us_mul(_weights[i]);\r\n\r\n            psi_ += calculateMicroFee(_bals[i], _ideal, _beta, _delta);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function calculateMicroFee (\r\n        int128 _bal,\r\n        int128 _ideal,\r\n        int128 _beta,\r\n        int128 _delta\r\n    ) private pure returns (int128 fee_) {\r\n\r\n        if (_bal < _ideal) {\r\n\r\n            int128 _threshold = _ideal.us_mul(ONE - _beta);\r\n\r\n            if (_bal < _threshold) {\r\n\r\n                int128 _feeMargin = _threshold - _bal;\r\n\r\n                fee_ = _feeMargin.us_div(_ideal);\r\n                fee_ = fee_.us_mul(_delta);\r\n\r\n                if (fee_ > MAX) fee_ = MAX;\r\n\r\n                fee_ = fee_.us_mul(_feeMargin);\r\n\r\n            } else fee_ = 0;\r\n\r\n        } else {\r\n\r\n            int128 _threshold = _ideal.us_mul(ONE + _beta);\r\n\r\n            if (_bal > _threshold) {\r\n\r\n                int128 _feeMargin = _bal - _threshold;\r\n\r\n                fee_ = _feeMargin.us_div(_ideal);\r\n                fee_ = fee_.us_mul(_delta);\r\n\r\n                if (fee_ > MAX) fee_ = MAX;\r\n\r\n                fee_ = fee_.us_mul(_feeMargin);\r\n\r\n            } else fee_ = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function calculateTrade (\r\n        ShellStorage.Shell storage shell,\r\n        int128 _oGLiq,\r\n        int128 _nGLiq,\r\n        int128[] memory _oBals,\r\n        int128[] memory _nBals,\r\n        int128 _inputAmt,\r\n        uint _outputIndex\r\n    ) internal view returns (int128 outputAmt_) {\r\n\r\n        outputAmt_ = - _inputAmt;\r\n\r\n        int128 _lambda = shell.lambda;\r\n        int128 _beta = shell.beta;\r\n        int128 _delta = shell.delta;\r\n        int128[] memory _weights = shell.weights;\r\n\r\n        int128 _omega = calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\r\n        int128 _psi;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n\r\n            _psi = calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\r\n\r\n            if (( outputAmt_ = _omega < _psi\r\n                    ? - ( _inputAmt + _omega - _psi )\r\n                    : - ( _inputAmt + _lambda.us_mul(_omega - _psi) )\r\n                ) / 1e13 == outputAmt_ / 1e13 ) {\r\n\r\n                _nGLiq = _oGLiq + _inputAmt + outputAmt_;\r\n\r\n                _nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\r\n\r\n                enforceHalts(shell, _oGLiq, _nGLiq, _oBals, _nBals, _weights);\r\n                \r\n                enforceSwapInvariant(_oGLiq, _omega, _nGLiq, _psi);\r\n\r\n                return outputAmt_;\r\n\r\n            } else {\r\n\r\n                _nGLiq = _oGLiq + _inputAmt + outputAmt_;\r\n\r\n                _nBals[_outputIndex] = _oBals[_outputIndex].add(outputAmt_);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        revert(\"Shell/swap-convergence-failed\");\r\n\r\n    }\r\n    \r\n    function enforceSwapInvariant (\r\n        int128 _oGLiq,\r\n        int128 _omega,\r\n        int128 _nGLiq,\r\n        int128 _psi\r\n    ) private pure {\r\n\r\n        int128 _nextUtil = _nGLiq - _psi;\r\n\r\n        int128 _prevUtil = _oGLiq - _omega;\r\n\r\n        int128 _diff = _nextUtil - _prevUtil;\r\n\r\n        require(0 < _diff || _diff >= MAX_DIFF, \"Shell/swap-invariant-violation\");\r\n        \r\n    }\r\n\r\n    function calculateLiquidityMembrane (\r\n        ShellStorage.Shell storage shell,\r\n        int128 _oGLiq,\r\n        int128 _nGLiq,\r\n        int128[] memory _oBals,\r\n        int128[] memory _nBals\r\n    ) internal view returns (int128 shells_) {\r\n\r\n        enforceHalts(shell, _oGLiq, _nGLiq, _oBals, _nBals, shell.weights);\r\n        \r\n        int128 _omega;\r\n        int128 _psi;\r\n        \r\n        {\r\n            \r\n            int128 _beta = shell.beta;\r\n            int128 _delta = shell.delta;\r\n            int128[] memory _weights = shell.weights;\r\n\r\n            _omega = calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\r\n            _psi = calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\r\n\r\n        }\r\n\r\n        int128 _feeDiff = _psi.sub(_omega);\r\n        int128 _liqDiff = _nGLiq.sub(_oGLiq);\r\n        int128 _oUtil = _oGLiq.sub(_omega);\r\n        int128 _totalShells = shell.totalSupply.divu(1e18);\r\n        int128 _shellMultiplier;\r\n\r\n        if (_totalShells == 0) {\r\n\r\n            shells_ = _nGLiq.sub(_psi);\r\n\r\n        } else if (_feeDiff >= 0) {\r\n\r\n            _shellMultiplier = _liqDiff.sub(_feeDiff).div(_oUtil);\r\n\r\n        } else {\r\n            \r\n            _shellMultiplier = _liqDiff.sub(shell.lambda.mul(_feeDiff));\r\n            \r\n            _shellMultiplier = _shellMultiplier.div(_oUtil);\r\n\r\n        }\r\n\r\n        if (_totalShells != 0) {\r\n\r\n            shells_ = _totalShells.us_mul(_shellMultiplier);\r\n            \r\n            enforceLiquidityInvariant(_totalShells, shells_, _oGLiq, _nGLiq, _omega, _psi);\r\n\r\n        }\r\n\r\n    }\r\n    \r\n    function enforceLiquidityInvariant (\r\n        int128 _totalShells,\r\n        int128 _newShells,\r\n        int128 _oGLiq,\r\n        int128 _nGLiq,\r\n        int128 _omega,\r\n        int128 _psi\r\n    ) internal view {\r\n        \r\n        if (_totalShells == 0 || 0 == _totalShells + _newShells) return;\r\n        \r\n        int128 _prevUtilPerShell = _oGLiq\r\n            .sub(_omega)\r\n            .div(_totalShells);\r\n            \r\n        int128 _nextUtilPerShell = _nGLiq\r\n            .sub(_psi)\r\n            .div(_totalShells.add(_newShells));\r\n\r\n        int128 _diff = _nextUtilPerShell - _prevUtilPerShell;\r\n\r\n        require(0 < _diff || _diff >= MAX_DIFF, \"Shell/liquidity-invariant-violation\");\r\n        \r\n    }\r\n\r\n    function enforceHalts (\r\n        ShellStorage.Shell storage shell,\r\n        int128 _oGLiq,\r\n        int128 _nGLiq,\r\n        int128[] memory _oBals,\r\n        int128[] memory _nBals,\r\n        int128[] memory _weights\r\n    ) private view {\r\n\r\n        uint256 _length = _nBals.length;\r\n        int128 _alpha = shell.alpha;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            int128 _nIdeal = _nGLiq.us_mul(_weights[i]);\r\n\r\n            if (_nBals[i] > _nIdeal) {\r\n\r\n                int128 _upperAlpha = ONE + _alpha;\r\n\r\n                int128 _nHalt = _nIdeal.us_mul(_upperAlpha);\r\n\r\n                if (_nBals[i] > _nHalt){\r\n\r\n                    int128 _oHalt = _oGLiq.us_mul(_weights[i]).us_mul(_upperAlpha);\r\n\r\n                    if (_oBals[i] < _oHalt) revert(\"Shell/upper-halt\");\r\n                    if (_nBals[i] - _nHalt > _oBals[i] - _oHalt) revert(\"Shell/upper-halt\");\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                int128 _lowerAlpha = ONE - _alpha;\r\n\r\n                int128 _nHalt = _nIdeal.us_mul(_lowerAlpha);\r\n\r\n                if (_nBals[i] < _nHalt){\r\n\r\n                    int128 _oHalt = _oGLiq.us_mul(_weights[i]).us_mul(_lowerAlpha);\r\n\r\n                    if (_oBals[i] > _oHalt) revert(\"Shell/lower-halt\");\r\n                    if (_nHalt - _nBals[i] > _oHalt - _oBals[i]) revert(\"Shell/lower-halt\");\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n////// src/Orchestrator.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.5.0; */\r\n\r\n/* import \"./Assimilators.sol\"; */\r\n\r\n/* import \"./ShellMath.sol\"; */\r\n\r\n/* import \"./ShellStorage.sol\"; */\r\n\r\n/* import \"abdk-libraries-solidity/ABDKMath64x64.sol\"; */\r\n\r\nlibrary Orchestrator {\r\n\r\n    using ABDKMath64x64 for int128;\r\n    using ABDKMath64x64 for uint256;\r\n\r\n    int128 constant ONE_WEI = 0x12;\r\n\r\n    event ParametersSet(uint256 alpha, uint256 beta, uint256 delta, uint256 epsilon, uint256 lambda);\r\n\r\n    event AssetIncluded(address indexed numeraire, address indexed reserve, uint weight);\r\n\r\n    event AssimilatorIncluded(address indexed derivative, address indexed numeraire, address indexed reserve, address assimilator);\r\n\r\n    function setParams (\r\n        ShellStorage.Shell storage shell,\r\n        uint256 _alpha,\r\n        uint256 _beta,\r\n        uint256 _feeAtHalt,\r\n        uint256 _epsilon,\r\n        uint256 _lambda\r\n    ) external {\r\n\r\n        require(0 < _alpha && _alpha < 1e18, \"Shell/parameter-invalid-alpha\");\r\n\r\n        require(0 <= _beta && _beta < _alpha, \"Shell/parameter-invalid-beta\");\r\n\r\n        require(_feeAtHalt <= .5e18, \"Shell/parameter-invalid-max\");\r\n\r\n        require(0 <= _epsilon && _epsilon <= .01e18, \"Shell/parameter-invalid-epsilon\");\r\n\r\n        require(0 <= _lambda && _lambda <= 1e18, \"Shell/parameter-invalid-lambda\");\r\n\r\n        int128 _omega = getFee(shell);\r\n\r\n        shell.alpha = (_alpha + 1).divu(1e18);\r\n\r\n        shell.beta = (_beta + 1).divu(1e18);\r\n\r\n        shell.delta = ( _feeAtHalt ).divu(1e18).div(uint(2).fromUInt().mul(shell.alpha.sub(shell.beta))) + ONE_WEI;\r\n\r\n        shell.epsilon = (_epsilon + 1).divu(1e18);\r\n\r\n        shell.lambda = (_lambda + 1).divu(1e18);\r\n        \r\n        int128 _psi = getFee(shell);\r\n        \r\n        require(_omega >= _psi, \"Shell/parameters-increase-fee\");\r\n\r\n        emit ParametersSet(_alpha, _beta, shell.delta.mulu(1e18), _epsilon, _lambda);\r\n\r\n    }\r\n\r\n    function getFee (\r\n        ShellStorage.Shell storage shell\r\n    ) private view returns (\r\n        int128 fee_\r\n    ) {\r\n\r\n        int128 _gLiq;\r\n\r\n        int128[] memory _bals = new int128[](shell.assets.length);\r\n\r\n        for (uint i = 0; i < _bals.length; i++) {\r\n\r\n            int128 _bal = Assimilators.viewNumeraireBalance(shell.assets[i].addr);\r\n\r\n            _bals[i] = _bal;\r\n\r\n            _gLiq += _bal;\r\n\r\n        }\r\n\r\n        fee_ = ShellMath.calculateFee(_gLiq, _bals, shell.beta, shell.delta, shell.weights);\r\n\r\n    }\r\n    \r\n \r\n    function initialize (\r\n        ShellStorage.Shell storage shell,\r\n        address[] storage numeraires,\r\n        address[] storage reserves,\r\n        address[] storage derivatives,\r\n        address[] calldata _assets,\r\n        uint[] calldata _assetWeights,\r\n        address[] calldata _derivativeAssimilators\r\n    ) external {\r\n        \r\n        for (uint i = 0; i < _assetWeights.length; i++) {\r\n\r\n            uint ix = i*5;\r\n        \r\n            numeraires.push(_assets[ix]);\r\n            derivatives.push(_assets[ix]);\r\n\r\n            reserves.push(_assets[2+ix]);\r\n            if (_assets[ix] != _assets[2+ix]) derivatives.push(_assets[2+ix]);\r\n            \r\n            includeAsset(\r\n                shell,\r\n                _assets[ix],   // numeraire\r\n                _assets[1+ix], // numeraire assimilator\r\n                _assets[2+ix], // reserve\r\n                _assets[3+ix], // reserve assimilator\r\n                _assets[4+ix], // reserve approve to\r\n                _assetWeights[i]\r\n            );\r\n            \r\n        }\r\n        \r\n        for (uint i = 0; i < _derivativeAssimilators.length / 5; i++) {\r\n            \r\n            uint ix = i * 5;\r\n\r\n            derivatives.push(_derivativeAssimilators[ix]);\r\n\r\n            includeAssimilator(\r\n                shell,\r\n                _derivativeAssimilators[ix],   // derivative\r\n                _derivativeAssimilators[1+ix], // numeraire\r\n                _derivativeAssimilators[2+ix], // reserve\r\n                _derivativeAssimilators[3+ix], // assimilator\r\n                _derivativeAssimilators[4+ix]  // derivative approve to\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function includeAsset (\r\n        ShellStorage.Shell storage shell,\r\n        address _numeraire,\r\n        address _numeraireAssim,\r\n        address _reserve,\r\n        address _reserveAssim,\r\n        address _reserveApproveTo,\r\n        uint256 _weight\r\n    ) private {\r\n\r\n        require(_numeraire != address(0), \"Shell/numeraire-cannot-be-zeroth-adress\");\r\n\r\n        require(_numeraireAssim != address(0), \"Shell/numeraire-assimilator-cannot-be-zeroth-adress\");\r\n\r\n        require(_reserve != address(0), \"Shell/reserve-cannot-be-zeroth-adress\");\r\n\r\n        require(_reserveAssim != address(0), \"Shell/reserve-assimilator-cannot-be-zeroth-adress\");\r\n\r\n        require(_weight < 1e18, \"Shell/weight-must-be-less-than-one\");\r\n\r\n        if (_numeraire != _reserve) safeApprove(_numeraire, _reserveApproveTo, uint(-1));\r\n\r\n        ShellStorage.Assimilator storage _numeraireAssimilator = shell.assimilators[_numeraire];\r\n\r\n        _numeraireAssimilator.addr = _numeraireAssim;\r\n\r\n        _numeraireAssimilator.ix = uint8(shell.assets.length);\r\n\r\n        ShellStorage.Assimilator storage _reserveAssimilator = shell.assimilators[_reserve];\r\n\r\n        _reserveAssimilator.addr = _reserveAssim;\r\n\r\n        _reserveAssimilator.ix = uint8(shell.assets.length);\r\n\r\n        int128 __weight = _weight.divu(1e18).add(uint256(1).divu(1e18));\r\n\r\n        shell.weights.push(__weight);\r\n\r\n        shell.assets.push(_numeraireAssimilator);\r\n\r\n        emit AssetIncluded(_numeraire, _reserve, _weight);\r\n\r\n        emit AssimilatorIncluded(_numeraire, _numeraire, _reserve, _numeraireAssim);\r\n\r\n        if (_numeraireAssim != _reserveAssim) {\r\n\r\n            emit AssimilatorIncluded(_reserve, _numeraire, _reserve, _reserveAssim);\r\n\r\n        }\r\n\r\n    }\r\n    \r\n    function includeAssimilator (\r\n        ShellStorage.Shell storage shell,\r\n        address _derivative,\r\n        address _numeraire,\r\n        address _reserve,\r\n        address _assimilator,\r\n        address _derivativeApproveTo\r\n    ) private {\r\n\r\n        require(_derivative != address(0), \"Shell/derivative-cannot-be-zeroth-address\");\r\n\r\n        require(_numeraire != address(0), \"Shell/numeraire-cannot-be-zeroth-address\");\r\n\r\n        require(_reserve != address(0), \"Shell/numeraire-cannot-be-zeroth-address\");\r\n\r\n        require(_assimilator != address(0), \"Shell/assimilator-cannot-be-zeroth-address\");\r\n        \r\n        safeApprove(_numeraire, _derivativeApproveTo, uint(-1));\r\n\r\n        ShellStorage.Assimilator storage _numeraireAssim = shell.assimilators[_numeraire];\r\n\r\n        shell.assimilators[_derivative] = ShellStorage.Assimilator(_assimilator, _numeraireAssim.ix);\r\n\r\n        emit AssimilatorIncluded(_derivative, _numeraire, _reserve, _assimilator);\r\n\r\n    }\r\n\r\n    function safeApprove (\r\n        address _token,\r\n        address _spender,\r\n        uint256 _value\r\n    ) private {\r\n\r\n        ( bool success, bytes memory returndata ) = _token.call(abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _value));\r\n\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n    }\r\n\r\n    function viewShell (\r\n        ShellStorage.Shell storage shell\r\n    ) external view returns (\r\n        uint alpha_,\r\n        uint beta_,\r\n        uint delta_,\r\n        uint epsilon_,\r\n        uint lambda_\r\n    ) {\r\n\r\n        alpha_ = shell.alpha.mulu(1e18);\r\n\r\n        beta_ = shell.beta.mulu(1e18);\r\n\r\n        delta_ = shell.delta.mulu(1e18);\r\n\r\n        epsilon_ = shell.epsilon.mulu(1e18);\r\n\r\n        lambda_ = shell.lambda.mulu(1e18);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ProportionalLiquidity","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fd846c1e7d7bd336e530cc09baba53680bf9fdb506ac6f46c7d0493119a2ac59"}]}