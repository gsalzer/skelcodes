{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 9;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/ownership/MultOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MultOwnable {\r\n  address[] private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() internal {\r\n    _owner.push(msg.sender);\r\n    emit OwnershipTransferred(address(0), _owner[0]);\r\n  }\r\n\r\n  function checkOwner() private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function checkNewOwner(address _address) private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == _address) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  modifier isAnOwner() {\r\n    require(checkOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public isAnOwner {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        _owner[i] = address(0);\r\n        emit OwnershipTransferred(_owner[i], msg.sender);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOwners() public view returns (address[] memory) {\r\n    return _owner;\r\n  }\r\n\r\n  function addOwnerShip(address newOwner) public isAnOwner {\r\n    _addOwnerShip(newOwner);\r\n  }\r\n\r\n  function _addOwnerShip(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    require(checkNewOwner(newOwner), \"Owner already exists\");\r\n    _owner.push(newOwner);\r\n    emit OwnershipTransferred(_owner[_owner.length - 1], newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/TulipToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract TulipToken is MultOwnable, ERC20{\r\n    constructor (string memory name, string memory symbol) public ERC20(name, symbol) MultOwnable(){\r\n    }\r\n\r\n    function contractMint(address account, uint256 amount) external isAnOwner{\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function contractBurn(address account, uint256 amount) external isAnOwner{\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n     /* ========== RESTRICTED FUNCTIONS ========== */\r\n    function addOwner(address _newOwner) external isAnOwner {\r\n        addOwnerShip(_newOwner);\r\n    }\r\n\r\n    function getOwner() external view isAnOwner{\r\n        getOwners();\r\n    }\r\n\r\n    function renounceOwner() external isAnOwner {\r\n        renounceOwnership();\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/GardenContractV1.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GardenContractV1 is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for TulipToken;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /* ========== STATE VARIABLES ========== */\r\n  \r\n  uint256 private _epochBlockStart;\r\n\r\n  uint256 private _epochRedTulipStart;\r\n\r\n  uint8 private _pinkTulipDivider;\r\n\r\n  uint256 private _decimalConverter = 10**9;\r\n\r\n  struct  tulipToken{\r\n      TulipToken token;\r\n      uint256 totalSupply;\r\n      mapping(address => uint256)  balances;\r\n      mapping(address => uint256)  periodFinish;\r\n  }\r\n\r\n  tulipToken[3] private _tulipToken;\r\n\r\n  struct externalToken{\r\n      IERC20 token;\r\n      uint256 rewardsDuration;\r\n      uint256 rewardsMultiplier;\r\n      string rewardsMultiplierType;\r\n      uint256 totalSupply;\r\n      address tokenAddress;\r\n      mapping(address => uint256)  balances;\r\n      mapping(address => uint256)  periodFinish;\r\n  }\r\n\r\n  externalToken[] private _externalToken;\r\n\r\n  /* ========== CONSTRUCTOR ========== */\r\n\r\n  constructor(address _seedToken, address _basicTulipToken, address _advTulipToken) public Ownable() {\r\n    \r\n    _tulipToken[0].token = TulipToken(_seedToken);\r\n    _tulipToken[1].token = TulipToken(_basicTulipToken);\r\n    _tulipToken[2].token = TulipToken(_advTulipToken);\r\n    \r\n    _pinkTulipDivider = 100;\r\n    _epochBlockStart = 1600610400;\r\n    _epochRedTulipStart = _epochBlockStart;\r\n  }\r\n\r\n  /* ========== VIEWS ========== */\r\n\r\n      /* ========== internal ========== */\r\n\r\n  function totalSupply(string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);\r\n    return _tulipToken[i].totalSupply;\r\n  }\r\n\r\n  function durationRemaining(address account, string calldata name) external view returns (uint256) {\r\n    uint8 i = tulipType(name);\r\n    return _tulipToken[i].periodFinish[account].sub(now);\r\n  }\r\n\r\n  function balanceOf(address account, string calldata name) external view returns (uint256)\r\n  {\r\n    uint8 i = tulipType(name);\r\n    return _tulipToken[i].balances[account];\r\n  }\r\n\r\n      /* ========== external ========== */\r\n\r\n    function totalExternalSupply(address extToken) external view returns (uint256) {\r\n      uint8 i = externalTokenIndex(extToken);\r\n      return _externalToken[i].totalSupply;\r\n    }\r\n\r\n    function externalDurationRemaining(address account, address extToken) external view returns (uint256) {\r\n      uint8 i = externalTokenIndex(extToken);\r\n      return _externalToken[i].periodFinish[account].sub(now);\r\n    }\r\n\r\n    function externalBalanceOf(address account, address extToken) external view returns (uint256)\r\n    {\r\n      uint8 i = externalTokenIndex(extToken);\r\n      return  _externalToken[i].balances[account];\r\n    } \r\n\r\n  /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n      /* ========== internal garden ========== */\r\n  function plant(uint256 amount, string calldata name) external nonReentrant {    \r\n    require(now > _epochBlockStart, \"The garden is being set up!\");\r\n\r\n    uint8 i = tulipType(name);\r\n\r\n    require(i < 99, \"Not a valid tulip name\");\r\n    \r\n    require(amount >= 1, \"Cannot stake less than 1\");\r\n\r\n    if(i == 1){\r\n      uint256 modulo = amount % 100;\r\n      require(modulo == 0, \"If planting a pink tulip, has to be multiple of 100\");\r\n    }\r\n\r\n    require(_tulipToken[i].balances[msg.sender] == 0 && (_tulipToken[i].periodFinish[msg.sender] == 0 || now > _tulipToken[i].periodFinish[msg.sender]), \r\n    \"You must withdraw the previous crop before planting more!\");\r\n\r\n    _tulipToken[i].token.safeTransferFrom(msg.sender, address(this), amount.mul(_decimalConverter));\r\n\r\n    _tulipToken[i].totalSupply = _tulipToken[i].totalSupply.add(amount);\r\n\r\n    _tulipToken[i].balances[msg.sender] = _tulipToken[i].balances[msg.sender].add(amount);\r\n\r\n    setTimeStamp(i);\r\n\r\n    emit Staked(msg.sender, amount);\r\n  }\r\n\r\n  \r\n  function withdraw(string memory name) public nonReentrant {\r\n    uint8 i = tulipType(name);\r\n\r\n    require(i < 99, \"Not a valid tulip name\");\r\n\r\n    require(_tulipToken[i].balances[msg.sender] > 0, \"Cannot withdraw 0\");\r\n\r\n    _tulipToken[i].token.safeTransfer(msg.sender, _tulipToken[i].balances[msg.sender].mul(_decimalConverter));\r\n\r\n    emit Withdrawn(msg.sender,_tulipToken[i].balances[msg.sender]);\r\n\r\n    zeroHoldings(i);\r\n  }\r\n\r\n\r\n  function harvest(string memory name) public nonReentrant {\r\n    uint8 i = tulipType(name);\r\n\r\n    require(i < 99, \"Not a valid tulip name\");\r\n    \r\n    require(_tulipToken[i].balances[msg.sender] > 0, \"Cannot harvest 0\");\r\n    \r\n    require(now > _tulipToken[i].periodFinish[msg.sender], \"Cannot harvest until the flowers have bloomed!\");\r\n\r\n    uint256 tempAmount;\r\n\r\n    if (i == 2) {\r\n      tempAmount = setRedTulipRewardAmount();\r\n      _tulipToken[0].token.contractMint(msg.sender, tempAmount.mul(_decimalConverter));\r\n      _tulipToken[i].periodFinish[msg.sender] = now.add(7 days);\r\n    } \r\n    else {\r\n      _tulipToken[i].token.contractBurn(address(this), _tulipToken[i].balances[msg.sender].mul(_decimalConverter));\r\n      if(i == 1){\r\n        tempAmount = _tulipToken[i].balances[msg.sender].div(_pinkTulipDivider);\r\n      }\r\n      else{\r\n        tempAmount = _tulipToken[i].balances[msg.sender];\r\n      }\r\n      \r\n      _tulipToken[i + 1].token.contractMint(msg.sender, tempAmount.mul(_decimalConverter));\r\n\r\n      zeroHoldings(i);\r\n    }\r\n    emit RewardPaid(msg.sender, tempAmount);\r\n  }\r\n\r\n      /* ========== external garden ========== */\r\n\r\n  function externalPlant(uint256 amount, address tokenAddress) external nonReentrant {    \r\n    require(now > _epochBlockStart, \"The garden is being set up!\");\r\n\r\n    uint8 i = externalTokenIndex(tokenAddress);\r\n\r\n    require(i < 99, \"Not a valid token address\");\r\n\r\n    require(amount > 0, \"Cannot stake 0\");\r\n\r\n    require(_externalToken[i].balances[msg.sender] == 0 && (_externalToken[i].periodFinish[msg.sender] == 0 || now > _externalToken[i].periodFinish[msg.sender]), \r\n    \"You must withdraw the previous stake before planting more!\");\r\n\r\n    _externalToken[i].token.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    _externalToken[i].totalSupply = _externalToken[i].totalSupply.add(amount);\r\n\r\n    _externalToken[i].balances[msg.sender] = _externalToken[i].balances[msg.sender].add(amount);\r\n\r\n    _externalToken[i].periodFinish[msg.sender] = now.add(_externalToken[i].rewardsDuration);\r\n\r\n    emit Staked(msg.sender, amount);\r\n  }\r\n\r\n  \r\n  function externalWithdraw(address tokenAddress) public nonReentrant {\r\n    uint8 i = externalTokenIndex(tokenAddress);\r\n\r\n    require(i < 99, \"Not a valid token address\");\r\n\r\n    require(_externalToken[i].totalSupply > 0, \"Cannot withdraw 0\");\r\n\r\n    _externalToken[i].token.safeTransfer(msg.sender, _externalToken[i].balances[msg.sender]);\r\n\r\n    emit Withdrawn(msg.sender, _externalToken[i].balances[msg.sender]);\r\n\r\n     _externalToken[i].totalSupply = _externalToken[i].totalSupply - _externalToken[i].balances[msg.sender];\r\n     _externalToken[i].balances[msg.sender] = 0;\r\n     _externalToken[i].periodFinish[msg.sender] = 0;\r\n  }\r\n\r\n\r\n  function externalHarvest(address tokenAddress) public nonReentrant {\r\n    uint8 i = externalTokenIndex(tokenAddress);\r\n\r\n    require(i < 99, \"Not a valid token address\");\r\n\r\n    require(_externalToken[i].totalSupply > 0, \"Cannot harvest 0\");\r\n\r\n    require(now > _externalToken[i].periodFinish[msg.sender], \"Cannot harvest until the flowers have bloomed!\");\r\n\r\n    if(keccak256(abi.encodePacked(_externalToken[i].rewardsMultiplier)) == keccak256(abi.encodePacked(\"div\"))){\r\n      _tulipToken[0].token.contractMint(msg.sender, _externalToken[i].totalSupply.div(_externalToken[i].rewardsMultiplier));\r\n    }else{\r\n      _tulipToken[0].token.contractMint(msg.sender, _externalToken[i].totalSupply.mul(_externalToken[i].rewardsMultiplier));\r\n    }\r\n\r\n    _externalToken[i].periodFinish[msg.sender] = now.add(_externalToken[i].rewardsDuration);\r\n    \r\n    emit RewardPaid(msg.sender, _externalToken[i].totalSupply.mul(_externalToken[i].rewardsMultiplier));\r\n  }\r\n\r\n  /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n      /* ========== internal functions ========== */\r\n\r\n  function addTokenOwner(address _token, address _newOwner) external onlyOwner\r\n  {\r\n    require(now > _epochBlockStart.add(30 days), \"The admin functions are timelocked\");\r\n\r\n    TulipToken tempToken = TulipToken(_token);\r\n    tempToken.addOwner(_newOwner);\r\n  }\r\n\r\n  function renounceTokenOwner(address _token) external onlyOwner\r\n  {\r\n    require(now > _epochBlockStart.add(30 days), \"The admin functions are timelocked\");\r\n\r\n    TulipToken tempToken = TulipToken(_token);\r\n    tempToken.renounceOwner();\r\n  }\r\n\r\n  function changeOwner(address _newOwner) external onlyOwner {\r\n    transferOwnership(_newOwner);\r\n  }\r\n\r\n      /* ========== external functions ========== */\r\n\r\n  function changeExternalTokenDuration(address _tokenAddress, uint256 _newDuration) external onlyOwner {\r\n    uint8 i = externalTokenIndex(_tokenAddress);\r\n\r\n    _externalToken[i].rewardsDuration = _newDuration;\r\n  }\r\n\r\n\r\n  function changeExternalTokenMultiplier(address _tokenAddress, uint256 _newMultiplier, string calldata _multType) external onlyOwner {\r\n    uint8 i = externalTokenIndex(_tokenAddress);\r\n\r\n    _externalToken[i].rewardsMultiplierType = _multType;\r\n    _externalToken[i].rewardsMultiplier = _newMultiplier;\r\n  }\r\n\r\n\r\n  function addExternalToken(address _tokenAddress, uint256 _duration, uint256 _multiplier, string calldata _multiplierType ) external onlyOwner {\r\n    require(keccak256(abi.encodePacked(_multiplierType)) == keccak256(abi.encodePacked(\"div\"))|| keccak256(abi.encodePacked(_multiplierType)) == keccak256(abi.encodePacked(\"mul\")), \"Please enter a valid multiplier type\");\r\n   \r\n    for(uint8 i = 0; i < _externalToken.length; i++){\r\n      if(_externalToken[i].tokenAddress == _tokenAddress){\r\n        require(_externalToken[i].tokenAddress != _tokenAddress, \"This token has already been added!\");\r\n      }\r\n    }\r\n\r\n    _externalToken.push(externalToken(\r\n      IERC20(_tokenAddress),\r\n      _duration,\r\n      _multiplier,\r\n      _multiplierType,\r\n      0,\r\n       _tokenAddress\r\n    ));\r\n  }\r\n\r\n\r\n  /* ========== HELPER FUNCTIONS ========== */\r\n\r\n  function tulipType(string memory name) internal pure returns (uint8) {\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"sTLP\"))) {\r\n      return 0;\r\n    }\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"pTLP\"))) {\r\n      return 1;\r\n    }\r\n    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"rTLP\"))) {\r\n      return 2;\r\n    } else {\r\n      return 99;\r\n    }\r\n  }\r\n\r\n\r\n  function externalTokenIndex(address tokenAddress) internal view returns(uint8){\r\n    for (uint8 i = 0; i < _externalToken.length; i++){\r\n      if(_externalToken[i].tokenAddress == tokenAddress){\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function setTimeStamp(uint8 i) internal{\r\n    if (i == 0) {\r\n      setRewardDurationSeeds();\r\n    }\r\n    if (i == 1) {\r\n      setRewardDurationTulip();\r\n    }\r\n    if (i == 2) {\r\n      _tulipToken[i].periodFinish[msg.sender] = now.add(7 days);\r\n    }\r\n  }\r\n\r\n\r\n  function zeroHoldings(uint8 i) internal{\r\n    _tulipToken[i].totalSupply = _tulipToken[i].totalSupply - _tulipToken[i].balances[msg.sender];\r\n    _tulipToken[i].balances[msg.sender] = 0;\r\n    _tulipToken[i].periodFinish[msg.sender] = 0;\r\n  }\r\n\r\n  /* ========== REAL FUNCTIONS ========== */\r\n  \r\n  function setRewardDurationSeeds() internal returns (bool) {\r\n    uint256 timeSinceEpoch = ((now - _epochBlockStart) / 60 / 60 / 24 / 30) + 1;\r\n\r\n    if (timeSinceEpoch >= 7) {\r\n      _tulipToken[0].periodFinish[msg.sender] = now.add(7 days);\r\n      return true;\r\n    } else {\r\n      _tulipToken[0].periodFinish[msg.sender] = now.add(\r\n        timeSinceEpoch.mul(1 days)\r\n      );\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  function setRewardDurationTulip() internal returns (bool) {\r\n    uint256 timeSinceEpoch = ((now - _epochBlockStart) / 60 / 60 / 24) + 1;\r\n\r\n    if (timeSinceEpoch <= 2) {\r\n      _tulipToken[1].periodFinish[msg.sender] = now.add(2 days);\r\n      return true;\r\n    }\r\n    if (timeSinceEpoch > 2 && timeSinceEpoch <= 7) {\r\n      _tulipToken[1].periodFinish[msg.sender] = now.add(3 days);\r\n      return true;\r\n    }\r\n    if (timeSinceEpoch > 7 && timeSinceEpoch <= 14) {\r\n      _tulipToken[1].periodFinish[msg.sender] = now.add(7 days);\r\n      return true;\r\n    }\r\n    if (timeSinceEpoch > 14) {\r\n      uint256 tempInt = (timeSinceEpoch - 15 days) / 30;\r\n\r\n      if (tempInt >= 7) {\r\n        _tulipToken[1].periodFinish[msg.sender] = now.add(30 days);\r\n        return true;\r\n      } else {\r\n        _tulipToken[1].periodFinish[msg.sender] = now.add(\r\n          14 days + (tempInt.mul(2 days))\r\n        );\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function setRedTulipRewardAmount() internal view returns (uint256) {\r\n    uint256 timeSinceEpoch = (now - _tulipToken[2].periodFinish[msg.sender].sub(7 days)) / 60 / 60 / 24;\r\n    uint256 amountWeeks = timeSinceEpoch.div(7);\r\n    uint256 newtime = now;\r\n    uint256 value = 0;\r\n\r\n    for (uint256 i = amountWeeks; i != 0; i--) {\r\n      uint256 tempTime = newtime.sub(i.mul(7 days));\r\n\r\n      if (tempTime > _epochRedTulipStart && tempTime <= _epochRedTulipStart.add(7 days)) {\r\n        value = value.add(50);\r\n      }\r\n      if (tempTime > _epochRedTulipStart.add(7 days) && tempTime <= _epochRedTulipStart.add(21 days)) {\r\n        value = value.add(25);\r\n      }\r\n      if (tempTime > _epochRedTulipStart.add(21 days)) {\r\n        value = value.add(10);\r\n      }\r\n    }\r\n    return value * _tulipToken[2].balances[msg.sender];\r\n  }\r\n\r\n  /* ========== EVENTS ========== */\r\n  event Staked(address indexed user, uint256 amount);\r\n  event Withdrawn(address indexed user, uint256 amount);\r\n  event RewardPaid(address indexed user, uint256 reward);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basicTulipToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_advTulipToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_multiplierType\",\"type\":\"string\"}],\"name\":\"addExternalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"changeExternalTokenDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_multType\",\"type\":\"string\"}],\"name\":\"changeExternalTokenMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"durationRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extToken\",\"type\":\"address\"}],\"name\":\"externalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extToken\",\"type\":\"address\"}],\"name\":\"externalDurationRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"externalHarvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"externalPlant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"externalWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"plant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"renounceTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"extToken\",\"type\":\"address\"}],\"name\":\"totalExternalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GardenContractV1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003d1be3fef769399cce7e504e85324d622f23cf85000000000000000000000000d814e02e779a216c5abaa5789e624cc017fb0876000000000000000000000000f7070f533932b495ac859e910373d9f7bdf9569f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3ffdefe5f622f3de0f8fdecffb50a2beba99f9b7bc37cedb2931855e75046d3c"}]}