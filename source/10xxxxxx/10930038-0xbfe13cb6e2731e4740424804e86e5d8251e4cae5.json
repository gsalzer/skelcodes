{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/upgradeability/Initializable.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * Credit: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/account/Account.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice An account contracted created for each user address.\r\n * @dev Anyone can directy deposit assets to the Account contract.\r\n * @dev Only operators can withdraw asstes or perform operation from the Account contract.\r\n */\r\ncontract Account is Initializable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev Asset is withdrawn from the Account.\r\n     */\r\n    event Withdrawn(address indexed tokenAddress, address indexed targetAddress, uint256 amount);\r\n\r\n    /**\r\n     * @dev Spender is allowed to spend an asset.\r\n     */\r\n    event Approved(address indexed tokenAddress, address indexed targetAddress, uint256 amount);\r\n\r\n    /**\r\n     * @dev A transaction is invoked on the Account.\r\n     */\r\n    event Invoked(address indexed targetAddress, uint256 value, bytes data);\r\n\r\n    address public owner;\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public operators;\r\n\r\n    /**\r\n     * @dev Initializes the owner, admin and operator roles.\r\n     * @param _owner Address of the contract owner\r\n     * @param _initialAdmins The list of addresses that are granted the admin role.\r\n     */\r\n    function initialize(address _owner, address[] memory _initialAdmins) public initializer {\r\n        owner = _owner;\r\n        // Grant the admin role to the initial admins\r\n        for (uint256 i = 0; i < _initialAdmins.length; i++) {\r\n            admins[_initialAdmins[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account that does not have operator role.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"not operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of the account to another address.\r\n     * The new owner can be an zero address which means renouncing the ownership.\r\n     * @param _owner New owner address\r\n     */\r\n    function transferOwnership(address _owner) public {\r\n        require(msg.sender == owner, \"not owner\");\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants admin role to a new address.\r\n     * @param _account New admin address.\r\n     */\r\n    function grantAdmin(address _account) public {\r\n        require(msg.sender == owner, \"not owner\");\r\n        require(!admins[_account], \"already admin\");\r\n\r\n        admins[_account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes the admin role from an address. Only owner can revoke admin.\r\n     * @param _account The admin address to revoke.\r\n     */\r\n    function revokeAdmin(address _account) public {\r\n        require(msg.sender == owner, \"not owner\");\r\n        require(admins[_account], \"not admin\");\r\n\r\n        admins[_account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants operator role to a new address. Only owner or admin can grant operator roles.\r\n     * @param _account The new operator address.\r\n     */\r\n    function grantOperator(address _account) public {\r\n        require(msg.sender == owner || admins[msg.sender], \"not admin\");\r\n        require(!operators[_account], \"already operator\");\r\n\r\n        operators[_account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke operator role from an address. Only owner or admin can revoke operator roles.\r\n     * @param _account The operator address to revoke.\r\n     */\r\n    function revokeOperator(address _account) public {\r\n        require(msg.sender == owner || admins[msg.sender], \"not admin\");\r\n        require(operators[_account], \"not operator\");\r\n\r\n        operators[_account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows Account contract to receive ETH.\r\n     */\r\n    receive() payable external {}\r\n\r\n    /**\r\n     * @dev Checks whether a user is an operator of the contract.\r\n     * Since admin role can grant operator role and owner can grant admin role, we treat both\r\n     * admins and owner as operators!\r\n     * @param userAddress Address to check whether it's an operator.\r\n     */\r\n    function isOperator(address userAddress) public view returns (bool) {\r\n        return userAddress == owner || admins[userAddress] || operators[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ETH from the Account contract. Only operators can withdraw ETH.\r\n     * @param targetAddress Address to send the ETH to.\r\n     * @param amount Amount of ETH to withdraw.\r\n     */\r\n    function withdraw(address payable targetAddress, uint256 amount) public onlyOperator {\r\n        targetAddress.transfer(amount);\r\n        // Use address(-1) to represent ETH.\r\n        emit Withdrawn(address(-1), targetAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ERC20 token from the Account contract. Only operators can withdraw ERC20 tokens.\r\n     * @param tokenAddress Address of the ERC20 to withdraw.\r\n     * @param targetAddress Address to send the ERC20 to.\r\n     * @param amount Amount of ERC20 token to withdraw.\r\n     */\r\n    function withdrawToken(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\r\n        IERC20(tokenAddress).safeTransfer(targetAddress, amount);\r\n        emit Withdrawn(tokenAddress, targetAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ERC20 token from the Account contract. If the Account contract does not have sufficient balance,\r\n     * try to withdraw from the owner's address as well. This is useful if users wants to keep assets in their own wallet\r\n     * by setting adequate allowance to the Account contract.\r\n     * @param tokenAddress Address of the ERC20 to withdraw.\r\n     * @param targetAddress Address to send the ERC20 to.\r\n     * @param amount Amount of ERC20 token to withdraw.\r\n     */\r\n    function withdrawTokenFallThrough(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        // If we have enough token balance, send the token directly.\r\n        if (tokenBalance >= amount) {\r\n            IERC20(tokenAddress).safeTransfer(targetAddress, amount);\r\n            emit Withdrawn(tokenAddress, targetAddress, amount);\r\n        } else {\r\n            IERC20(tokenAddress).safeTransferFrom(owner, targetAddress, amount.sub(tokenBalance));\r\n            IERC20(tokenAddress).safeTransfer(targetAddress, tokenBalance);\r\n            emit Withdrawn(tokenAddress, targetAddress, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the spender address to spend up to the amount of token.\r\n     * @param tokenAddress Address of the ERC20 that can spend.\r\n     * @param targetAddress Address which can spend the ERC20.\r\n     * @param amount Amount of ERC20 that can be spent by the target address.\r\n     */\r\n    function approveToken(address tokenAddress, address targetAddress, uint256 amount) public onlyOperator {\r\n        IERC20(tokenAddress).safeApprove(targetAddress, 0);\r\n        IERC20(tokenAddress).safeApprove(targetAddress, amount);\r\n        emit Approved(tokenAddress, targetAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a generic transaction on the Account contract.\r\n     * @param target The address for the target contract.\r\n     * @param value The value of the transaction.\r\n     * @param data The data of the transaction.\r\n     */\r\n    function invoke(address target, uint256 value, bytes memory data) public onlyOperator returns (bytes memory result) {\r\n        bool success;\r\n        (success, result) = target.call{value: value}(data);\r\n        if (!success) {\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n        emit Invoked(target, value, data);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/upgradeability/Proxy.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n *\r\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/Proxy.sol\r\n */\r\nabstract contract Proxy {\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: contracts/libraries/upgradeability/BaseUpgradeabilityProxy.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n *\r\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/BaseUpgradeabilityProxy.sol\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n    /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n    function _implementation() internal override view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function _setImplementation(address newImplementation) internal {\r\n        require(\r\n            Address.isContract(newImplementation),\r\n            \"Implementation not set\"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n        emit Upgraded(newImplementation);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n * Credit: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n    _setImplementation(_logic);\r\n    _setAdmin(_admin);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external view returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function changeImplementation(address newImplementation) external ifAdmin {\r\n    _setImplementation(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/account/AccountFactory.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n/**\r\n * @notice Factory of Account contracts.\r\n */\r\ncontract AccountFactory {\r\n\r\n    /**\r\n     * @dev A new Account contract is created.\r\n     */\r\n    event AccountCreated(address indexed userAddress, address indexed accountAddress);\r\n\r\n    address public governance;\r\n    address public accountBase;\r\n    mapping(address => address) public accounts;\r\n\r\n    /**\r\n     * @dev Constructor for Account Factory.\r\n     * @param _accountBase Base account implementation.\r\n     */\r\n    constructor(address _accountBase) public {\r\n        require(_accountBase != address(0x0), \"account base not set\");\r\n        governance = msg.sender;\r\n        accountBase = _accountBase;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the base account implementation. Base account must be set.\r\n     */\r\n    function setAccountBase(address _accountBase) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        require(_accountBase != address(0x0), \"account base not set\");\r\n\r\n        accountBase = _accountBase;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the govenance address. Governance can be empty address which means\r\n     * renouncing the governance.\r\n     */\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new Account contract for the caller.\r\n     * Users can create multiple accounts by invoking this method multiple times. However,\r\n     * only the latest one is actively tracked and used by the platform.\r\n     * @param _initialAdmins The list of addresses that are granted the admin role.\r\n     */\r\n    function createAccount(address[] memory _initialAdmins) public returns (Account) {\r\n        AdminUpgradeabilityProxy proxy = new AdminUpgradeabilityProxy(accountBase, msg.sender);\r\n        Account account = Account(address(proxy));\r\n        account.initialize(msg.sender, _initialAdmins);\r\n        accounts[msg.sender] = address(account);\r\n\r\n        emit AccountCreated(msg.sender, address(account));\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrives the active account for a user. The active account is the last account created.\r\n     * @param _user Address of the owner of the Account contract.\r\n     */\r\n    function getAccount(address _user) public view returns (address) {\r\n         return accounts[_user];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/libraries/vaults/IStrategy.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @notice Interface for Strategies.\r\n */\r\ninterface IStrategy {\r\n\r\n    /**\r\n     * @dev Returns the token address that the strategy expects.\r\n     */\r\n    function want() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens deposited in this strategy.\r\n     */\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Deposits the token to start earning.\r\n     */\r\n    function deposit() external;\r\n\r\n    /**\r\n     * @dev Withdraws partial funds from the strategy.\r\n     */\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraws all funds from the strategy.\r\n     */\r\n    function withdrawAll() external returns (uint256);\r\n    \r\n    /**\r\n     * @dev Claims yield and convert it back to want token.\r\n     */\r\n    function harvest() external;\r\n}\r\n\r\n// File: contracts/libraries/vaults/Vault.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice YEarn's style vault which earns yield for a specific token.\r\n */\r\ncontract Vault is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    address public governance;\r\n    address public strategy;\r\n\r\n    event Deposited(address indexed user, address indexed token, uint256 amount, uint256 shareAmount);\r\n    event Withdrawn(address indexed user, address indexed token, uint256 amount, uint256 shareAmount);\r\n\r\n    constructor(address _token) public\r\n        ERC20(\r\n            string(abi.encodePacked(\"ACoconut \", ERC20(_token).name())),\r\n            string(abi.encodePacked(\"ac\", ERC20(_token).symbol()))\r\n        )\r\n    {\r\n        token = IERC20(_token);\r\n        governance = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total balance in both vault and strategy.\r\n     */\r\n    function balance() public view returns (uint256) {\r\n        return strategy == address(0x0) ? token.balanceOf(address(this)) :\r\n            token.balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the govenance address.\r\n     */\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the active strategy of the vault.\r\n     */\r\n    function setStrategy(address _strategy) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        // This also ensures that _strategy must be a valid strategy contract.\r\n        require(address(token) == IStrategy(_strategy).want(), \"different token\");\r\n\r\n        // If the vault has an existing strategy, withdraw all funds from it.\r\n        if (strategy != address(0x0)) {\r\n            IStrategy(strategy).withdrawAll();\r\n        }\r\n\r\n        strategy = _strategy;\r\n        // Starts earning once a new strategy is set.\r\n        earn();\r\n    }\r\n\r\n    /**\r\n     * @dev Starts earning and deposits all current balance into strategy.\r\n     */\r\n    function earn() public {\r\n        require(strategy != address(0x0), \"no strategy\");\r\n        uint256 _bal = token.balanceOf(address(this));\r\n        token.safeTransfer(strategy, _bal);\r\n        IStrategy(strategy).deposit();\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits all balance to the vault.\r\n     */\r\n    function depositAll() public virtual {\r\n        deposit(token.balanceOf(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit some balance to the vault.\r\n     */\r\n    function deposit(uint256 _amount) public virtual {\r\n        require(_amount > 0, \"zero amount\");\r\n        uint256 _pool = balance();\r\n        uint256 _before = token.balanceOf(address(this));\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 _after = token.balanceOf(address(this));\r\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n        uint256 shares = 0;\r\n        if (totalSupply() == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = (_amount.mul(totalSupply())).div(_pool);\r\n        }\r\n        _mint(msg.sender, shares);\r\n\r\n        emit Deposited(msg.sender, address(token), _amount, shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws all balance out of the vault.\r\n     */\r\n    function withdrawAll() public virtual {\r\n        withdraw(balanceOf(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws some balance out of the vault.\r\n     */\r\n    function withdraw(uint256 _shares) public virtual {\r\n        require(_shares > 0, \"zero amount\");\r\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\r\n        _burn(msg.sender, _shares);\r\n\r\n        // Check balance\r\n        uint256 b = token.balanceOf(address(this));\r\n        if (b < r) {\r\n            uint256 _withdraw = r.sub(b);\r\n            // Ideally this should not happen. Put here for extra safety.\r\n            require(strategy != address(0x0), \"no strategy\");\r\n            IStrategy(strategy).withdraw(_withdraw);\r\n            uint256 _after = token.balanceOf(address(this));\r\n            uint256 _diff = _after.sub(b);\r\n            if (_diff < _withdraw) {\r\n                r = b.add(_diff);\r\n            }\r\n        }\r\n\r\n        token.safeTransfer(msg.sender, r);\r\n        emit Withdrawn(msg.sender, address(token), r, _shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to salvage any token deposited into the vault by mistake.\r\n     * @param _tokenAddress Token address to salvage.\r\n     * @param _amount Amount of token to salvage.\r\n     */\r\n    function salvage(address _tokenAddress, uint256 _amount) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        require(_tokenAddress != address(token), \"cannot salvage\");\r\n        require(_amount > 0, \"zero amount\");\r\n        IERC20(_tokenAddress).safeTransfer(governance, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vault token per share is worth.\r\n     */\r\n    function getPricePerFullShare() public view returns (uint256) {\r\n        if (totalSupply() == 0) return 0;\r\n        return balance().mul(1e18).div(totalSupply());\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/vaults/RewardedVault.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice A vault with rewards.\r\n */\r\ncontract RewardedVault is Vault {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public rewardToken;\r\n    uint256 public constant DURATION = 7 days;      // Rewards are vested for a fixed duration of 7 days.\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public claims;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(address _vaultToken, address _rewardToken) public Vault(_vaultToken) {\r\n        require(_rewardToken != address(0x0), \"reward token not set\");\r\n        rewardToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint256) {\r\n        return\r\n            balanceOf(_account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\r\n                .div(1e18)\r\n                .add(rewards[_account]);\r\n    }\r\n\r\n    function deposit(uint256 _amount) public virtual override updateReward(msg.sender) {\r\n        super.deposit(_amount);\r\n    }\r\n\r\n    function depositAll() public virtual override updateReward(msg.sender) {\r\n        super.depositAll();\r\n    }\r\n\r\n    function withdraw(uint256 _shares) public virtual override updateReward(msg.sender) {\r\n        super.withdraw(_shares);\r\n    }\r\n\r\n    function withdrawAll() public virtual override updateReward(msg.sender) {\r\n        super.withdrawAll();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws all balance and all rewards from the vault.\r\n     */\r\n    function exit() external {\r\n        withdrawAll();\r\n        claimReward();\r\n    }\r\n\r\n    /**\r\n     * @dev Claims all rewards from the vault.\r\n     */\r\n    function claimReward() public updateReward(msg.sender) returns (uint256) {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            claims[msg.sender] = claims[msg.sender].add(reward);\r\n            rewards[msg.sender] = 0;\r\n            rewardToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n\r\n        return reward;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new rewards to the vault. All rewards will be distributed linearly in 7 days.\r\n     * @param _reward Amount of reward token to add.\r\n     */\r\n    function addRewardAmount(uint256 _reward) public updateReward(address(0)) {\r\n        require(msg.sender == governance, \"not governance\");\r\n        rewardToken.safeTransferFrom(msg.sender, address(this), _reward);\r\n\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = _reward.div(DURATION);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = _reward.add(leftover).div(DURATION);\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(DURATION);\r\n        emit RewardAdded(_reward);\r\n    }\r\n}\r\n\r\n// File: contracts/applications/StakingApplication.sol\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Application to help stake and get rewards.\r\n */\r\ncontract StakingApplication {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed staker, uint256 indexed vaultId, address indexed token, uint256 amount);\r\n    event Unstaked(address indexed staker, uint256 indexed vaultId, address indexed token, uint256 amount);\r\n    event Claimed(address indexed staker, uint256 indexed vaultId, address indexed token, uint256 amount);\r\n\r\n    address public governance;\r\n    address public accountFactory;\r\n    uint256 public numVaults;\r\n    mapping(uint256 => address) public vaults;\r\n\r\n    constructor(address _accountFactory) public {\r\n        require(_accountFactory != address(0x0), \"account factory not set\");\r\n        \r\n        governance = msg.sender;\r\n        accountFactory = _accountFactory;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the govenance address.\r\n     */\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the account factory.\r\n     */\r\n    function setAccountFactory(address _accountFactory) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        require(_accountFactory != address(0x0), \"account factory not set\");\r\n        accountFactory = _accountFactory;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new vault to the staking application.\r\n     */\r\n    function addVault(address _vault) public {\r\n        require(msg.sender == governance, \"not governance\");\r\n        require(_vault != address(0x0), \"vault not set\");\r\n\r\n        vaults[numVaults++] = _vault;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve the active account of the user.\r\n     */\r\n    function _getAccount() internal view returns (Account) {\r\n        address _account = AccountFactory(accountFactory).getAccount(msg.sender);\r\n        require(_account != address(0x0), \"no account\");\r\n        Account account = Account(payable(_account));\r\n        require(account.isOperator(address(this)), \"not operator\");\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * @dev Stake token into rewarded vault.\r\n     * @param _vaultId ID of the vault to stake.\r\n     * @param _amount Amount of token to stake.\r\n     */\r\n    function stake(uint256 _vaultId, uint256 _amount) public {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n        require(_amount > 0, \"zero amount\");\r\n\r\n        Account account = _getAccount();\r\n        RewardedVault vault = RewardedVault(vaults[_vaultId]);\r\n        IERC20 token = vault.token();\r\n        account.approveToken(address(token), address(vault), _amount);\r\n\r\n        bytes memory methodData = abi.encodeWithSignature(\"deposit(uint256)\", _amount);\r\n        account.invoke(address(vault), 0, methodData);\r\n\r\n        emit Staked(msg.sender, _vaultId, address(token), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake token out of RewardedVault.\r\n     * @param _vaultId ID of the vault to unstake.\r\n     * @param _amount Amount of token to unstake.\r\n     */\r\n    function unstake(uint256 _vaultId, uint256 _amount) public {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n        require(_amount > 0, \"zero amount\");\r\n\r\n        Account account = _getAccount();\r\n        RewardedVault vault = RewardedVault(vaults[_vaultId]);\r\n        IERC20 token = vault.token();\r\n\r\n        // Important: Need to convert token amount to vault share!\r\n        uint256 totalBalance = vault.balance();\r\n        uint256 totalSupply = vault.totalSupply();\r\n        uint256 shares = _amount.mul(totalSupply).div(totalBalance);\r\n        bytes memory methodData = abi.encodeWithSignature(\"withdraw(uint256)\", shares);\r\n        account.invoke(address(vault), 0, methodData);\r\n\r\n        emit Unstaked(msg.sender, _vaultId, address(token), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims rewards from RewardedVault.\r\n     * @param _vaultId ID of the vault to unstake.\r\n     */\r\n    function claimRewards(uint256 _vaultId) public {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n\r\n        Account account = _getAccount();\r\n        RewardedVault vault = RewardedVault(vaults[_vaultId]);\r\n        IERC20 rewardToken = vault.rewardToken();\r\n        bytes memory methodData = abi.encodeWithSignature(\"claimReward()\");\r\n        bytes memory methodResult = account.invoke(address(vault), 0, methodData);\r\n        uint256 claimAmount = abi.decode(methodResult, (uint256));\r\n\r\n        emit Claimed(msg.sender, _vaultId, address(rewardToken), claimAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the amount of token staked in RewardedVault.\r\n     * @param _vaultId ID of the vault to unstake.\r\n     */\r\n    function getStakeBalance(uint256 _vaultId) public view returns (uint256) {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n        address account = AccountFactory(accountFactory).getAccount(msg.sender);\r\n        require(account != address(0x0), \"no account\");\r\n\r\n        RewardedVault vault = RewardedVault(vaults[_vaultId]);\r\n        uint256 totalBalance = vault.balance();\r\n        uint256 totalSupply = vault.totalSupply();\r\n        uint256 share = vault.balanceOf(account);\r\n\r\n        return totalBalance.mul(share).div(totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the amount of unclaim rewards.\r\n     * @param _vaultId ID of the vault to unstake.\r\n     */\r\n    function getUnclaimedReward(uint256 _vaultId) public view returns (uint256) {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n        address account = AccountFactory(accountFactory).getAccount(msg.sender);\r\n        require(account != address(0x0), \"no account\");\r\n\r\n        return RewardedVault(vaults[_vaultId]).earned(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the amount of claim rewards.\r\n     * @param _vaultId ID of the vault to unstake.\r\n     */\r\n    function getClaimedReward(uint256 _vaultId) public view returns (uint256) {\r\n        require(vaults[_vaultId] != address(0x0), \"no vault\");\r\n        address account = AccountFactory(accountFactory).getAccount(msg.sender);\r\n        require(account != address(0x0), \"no account\");\r\n        \r\n        return RewardedVault(vaults[_vaultId]).claims(account);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getClaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountFactory\",\"type\":\"address\"}],\"name\":\"setAccountFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingApplication","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000027ee601bf94969f112487ff13acb6856ec86c8a2","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20ef2355a08c40c00b90b8bb3e31052a3b4fb766d3035ddf5701e862862a7c8d"}]}