{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract Stores {\n\n    /**\n     * @dev Return ethereum address\n     */\n    function getEthAddr() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return memory variable address\n     */\n    function getMemoryAddr() internal pure returns (address) {\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n    }\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() internal pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n    }\n\n    /**\n     * @dev Get Uint value from InstaMemory Contract.\n     */\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n    }\n\n    /**\n     * @dev Set Uint value in InstaMemory Contract.\n     */\n    function setUint(uint setId, uint val) internal {\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n    }\n\n    /**\n     * @dev emit event on event contract\n     */\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\n        (uint model, uint id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n    }\n\n    /**\n     * @dev Connector Details - needs to be changed before deployment\n     */\n    function connectorID() public pure returns(uint model, uint id) {\n        (model, id) = (0, 0);\n    }\n\n}\n\ncontract DSMath {\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n}\n\ninterface ICurve {\n    function get_virtual_price() external returns (uint256 out);\n\n    function underlying_coins(int128 tokenId) external view returns (address token);\n\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit) external returns (uint256 amount);\n\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\n\n    function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\n\n    // Used when there's an underlying token. Example:- cdai, cusdc, etc. If not then\n    function get_dy_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\n\n    function exchange(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\n\n    // Used when there's an underlying token. Example:- cdai, cusdc, etc.\n    function exchange_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\n\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_amounts) external;\n\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n}\n\ninterface ICurveZap {\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external returns (uint256 amount);\n\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount) external;\n\n}\n\ncontract CurveHelpers is Stores, DSMath {\n    /**\n     * @dev Return Curve Swap Address\n     */\n    function getCurveSwapAddr() internal pure returns (address) {\n        return 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\n    }\n\n    /**\n     * @dev Return Curve Token Address\n     */\n    function getCurveTokenAddr() internal pure returns (address) {\n        return 0xC25a3A3b969415c80451098fa907EC722572917F;\n    }\n\n    /**\n     * @dev Return Curve Zap Address\n     */\n    function getCurveZapAddr() internal pure returns (address) {\n        return 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n    }\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function getTokenI(address token) internal pure returns (int128 i) {\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\n            // DAI Token\n            i = 0;\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n            // USDC Token\n            i = 1;\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\n            // USDT Token\n            i = 2;\n        } else if (token == address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51)) {\n            // sUSD Token\n            i = 3;\n        } else {\n            revert(\"token-not-found.\");\n        }\n    }\n\n    function getTokenAddr(ICurve curve, uint256 i) internal view returns (address token) {\n        token = curve.underlying_coins(int128(i));\n        require(token != address(0), \"token-not-found.\");\n    }\n}\n\ncontract CurveProtocol is CurveHelpers {\n\n     event LogSell(\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n    event LogDeposit(address token, uint256 amt, uint256 mintAmt, uint256 getId, uint256 setId);\n    event LogWithdraw(address token, uint256 amt, uint256 burnAmt, uint256 getId,  uint256 setId);\n\n    function sell(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt,\n        uint unitAmt,\n        uint getId,\n        uint setId\n    ) external {\n        // uint _sellAmt = getUint(getId, sellAmt);\n        uint256 _sellAmt = (sellAmt);\n\n        ICurve curve = ICurve(getCurveSwapAddr());\n        TokenInterface _buyToken = TokenInterface(buyAddr);\n        TokenInterface _sellToken = TokenInterface(sellAddr);\n        _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\n        _sellToken.approve(address(curve), _sellAmt);\n\n        // uint _sellAmt18 = convertTo18(_sellToken.decimals(), _sellAmt);\n        // uint _slippageAmt = convert18ToDec(_buyToken.decimals(), wmul(unitAmt, _sellAmt18));\n        uint _slippageAmt = convert18ToDec(_buyToken.decimals(), wmul(unitAmt, convertTo18(_sellToken.decimals(), _sellAmt)));\n\n        uint _buyAmt = curve.get_dy(getTokenI(sellAddr), getTokenI(buyAddr), _sellAmt);\n\n        curve.exchange(getTokenI(sellAddr), getTokenI(buyAddr), _sellAmt, _slippageAmt);\n\n        // setUint(setId, _buyAmt);\n\n        emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n        // bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\n        // bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n\n    }\n\n    function deposit(\n        address token,\n        uint amt,\n        uint unitAmt,\n        uint getId,\n        uint setId\n    ) external {\n        // uint256 _amt = getUint(getId, amt);\n        uint256 _amt = (amt);\n        TokenInterface tokenContract = TokenInterface(token);\n\n        _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\n        uint[4] memory _amts;\n        _amts[uint(getTokenI(token))] = _amt;\n\n        tokenContract.approve(getCurveSwapAddr(), _amt);\n\n        uint _amt18 = convertTo18(tokenContract.decimals(), _amt);\n        uint _slippageAmt = wmul(unitAmt, _amt18);\n\n        TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\n        uint initialCurveBal = curveTokenContract.balanceOf(address(this));\n\n        ICurve(getCurveSwapAddr()).add_liquidity(_amts, _slippageAmt);\n\n        uint finalCurveBal = curveTokenContract.balanceOf(address(this));\n\n        uint mintAmt = sub(finalCurveBal, initialCurveBal);\n\n        // setUint(setId, mintAmt);\n\n        emit LogDeposit(token, _amt, mintAmt, getId, setId);\n        // bytes32 _eventCode = keccak256(\"LogDeposit(address,uint256,uint256,uint256,uint256)\");\n        // bytes memory _eventParam = abi.encode(_amt, mintAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n\n    function withdraw(address token, uint256 amt, uint256 unitAmt, uint getId, uint setId) external {\n        uint256 _amt = (amt);\n        // uint _amt = getUint(getId, amt);\n        int128 tokenId = getTokenI(token);\n\n        uint[4] memory _amts;\n        _amts[uint(getTokenI(token))] = _amt;\n\n        TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\n        ICurveZap curveZap = ICurveZap(getCurveZapAddr());\n\n        uint _curveAmt = _amt == uint(-1) ?\n            curveTokenContract.balanceOf(address(this)) :\n            ICurve(getCurveSwapAddr()).calc_token_amount(_amts, false);\n\n        _amt = _amt == uint(-1) ? curveZap.calc_withdraw_one_coin(_curveAmt, tokenId) : _amt;\n\n        _amts[uint(tokenId)] = _amt;\n\n        curveTokenContract.approve(getCurveSwapAddr(), _curveAmt);\n\n        uint _amt18 = convertTo18(TokenInterface(token).decimals(), _amt);\n        uint _slippageAmt = wmul(unitAmt, _amt18);\n\n        require(_curveAmt < _slippageAmt, \"excess-burning\");\n\n        curveZap.remove_liquidity_one_coin(_curveAmt, tokenId, _amt);\n\n        // setUint(setId, _curveAmt);\n\n        emit LogWithdraw(token, _amt, _curveAmt, getId, setId);\n        // bytes32 _eventCode = keccak256(\"LogWithdraw(address,uint256,uint256,uint256,uint256)\");\n        // bytes memory _eventParam = abi.encode(token, _amt, _curveAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n\n}\n\ncontract ConnectCurve is CurveProtocol {\n    string public name = \"Curve-v1\";\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveProtocol","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}