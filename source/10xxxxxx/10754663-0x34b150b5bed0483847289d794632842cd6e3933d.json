{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    mapping (uint256 => address) private _tokenOwner;\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][to] = approved;\r\n        emit ApprovalForAll(_msgSender(), to, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to].increment();\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner].decrement();\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n        _ownedTokensIndex[tokenId] = 0;\r\n\r\n        _removeTokenFromAllTokensEnumeration(tokenId);\r\n    }\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n        _ownedTokens[from].length--;\r\n    }\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n    }\r\n}\r\n\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    mapping(uint256 => string) private _tokenURIs;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // Even if there is a base URI, it is only appended to non-empty token-specific URIs\r\n        if (bytes(_tokenURI).length == 0) {\r\n            return \"\";\r\n        } else {\r\n            // abi.encodePacked is being used to concatenate strings\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n    }\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n    function _setBaseURI(string memory baseURI) internal {\r\n        _baseURI = baseURI;\r\n    }\r\n    function baseURI() external view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        _notEntered = true;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ninterface Pool1  {\r\n    function changeDependentContractAddress() external;\r\n    function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        external\r\n        payable;\r\n    function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        external;\r\n    function getWei(uint amount) external view returns(uint);\r\n    function sellNXMTokens(uint _amount) external  returns (bool);\r\n}\r\n\r\ncontract INXMMaster {\r\n    address public tokenAddress;\r\n    address public owner;\r\n    uint public pauseTime;\r\n    function masterInitialized() external view returns(bool);\r\n    function isPause() external view returns(bool check);\r\n    function isMember(address _add) external view returns(bool);\r\n    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\r\n}\r\n\r\ninterface DSValue {\r\n    function peek() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\ninterface PoolData {\r\n\r\n    struct ApiId {\r\n        bytes4 typeOf;\r\n        bytes4 currency;\r\n        uint id;\r\n        uint64 dateAdd;\r\n        uint64 dateUpd;\r\n    }\r\n\r\n    struct CurrencyAssets {\r\n        address currAddress;\r\n        uint baseMin;\r\n        uint varMin;\r\n    }\r\n\r\n    struct InvestmentAssets {\r\n        address currAddress;\r\n        bool status;\r\n        uint64 minHoldingPercX100;\r\n        uint64 maxHoldingPercX100;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct IARankDetails {\r\n        bytes4 maxIACurr;\r\n        uint64 maxRate;\r\n        bytes4 minIACurr;\r\n        uint64 minRate;\r\n    }\r\n\r\n    struct McrData {\r\n        uint mcrPercx100;\r\n        uint mcrEther;\r\n        uint vFull; //Pool funds\r\n        uint64 date;\r\n    }\r\n\r\n    function setCapReached(uint val) external;\r\n    function getInvestmentAssetDecimals(bytes4 curr) external returns(uint8 decimal);\r\n    function getCurrencyAssetAddress(bytes4 curr) external view returns(address);\r\n    function getInvestmentAssetAddress(bytes4 curr) external view returns(address);\r\n    function getInvestmentAssetStatus(bytes4 curr) external view returns(bool status);\r\n\r\n}\r\n\r\ninterface QuotationData {\r\n\r\n    enum HCIDStatus { NA, kycPending, kycPass, kycFailedOrRefunded, kycPassNoCover }\r\n    enum CoverStatus { Active, ClaimAccepted, ClaimDenied, CoverExpired, ClaimSubmitted, Requested }\r\n\r\n    struct Cover {\r\n        address payable memberAddress;\r\n        bytes4 currencyCode;\r\n        uint sumAssured;\r\n        uint16 coverPeriod;\r\n        uint validUntil;\r\n        address scAddress;\r\n        uint premiumNXM;\r\n    }\r\n\r\n    struct HoldCover {\r\n        uint holdCoverId;\r\n        address payable userAddress;\r\n        address scAddress;\r\n        bytes4 coverCurr;\r\n        uint[] coverDetails;\r\n        uint16 coverPeriod;\r\n    }\r\n\r\n    function getCoverLength() external returns(uint len);\r\n    function getAuthQuoteEngine() external returns(address _add);\r\n    function getAllCoversOfUser(address _add) external returns(uint[] memory allCover);\r\n    function getUserCoverLength(address _add) external returns(uint len);\r\n    function getCoverStatusNo(uint _cid) external returns(uint8);\r\n    function getCoverPeriod(uint _cid) external returns(uint32 cp);\r\n    function getCoverSumAssured(uint _cid) external returns(uint sa);\r\n    function getCurrencyOfCover(uint _cid) external returns(bytes4 curr);\r\n    function getValidityOfCover(uint _cid) external returns(uint date);\r\n    function getscAddressOfCover(uint _cid) external returns(uint, address);\r\n    function getCoverMemberAddress(uint _cid) external returns(address payable _add);\r\n    function getCoverPremiumNXM(uint _cid) external returns(uint _premiumNXM);\r\n    function getCoverDetailsByCoverID1(\r\n        uint _cid\r\n    )\r\n        external\r\n        returns (\r\n            uint cid,\r\n            address _memberAddress,\r\n            address _scAddress,\r\n            bytes4 _currencyCode,\r\n            uint _sumAssured,\r\n            uint premiumNXM\r\n        );\r\n    function getCoverDetailsByCoverID2(\r\n        uint _cid\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint cid,\r\n            uint8 status,\r\n            uint sumAssured,\r\n            uint16 coverPeriod,\r\n            uint validUntil\r\n        );\r\n    function getHoldedCoverDetailsByID1(\r\n        uint _hcid\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint hcid,\r\n            address scAddress,\r\n            bytes4 coverCurr,\r\n            uint16 coverPeriod\r\n        );\r\n    function getUserHoldedCoverLength(address _add) external returns (uint);\r\n    function getUserHoldedCoverByIndex(address _add, uint index) external returns (uint);\r\n    function getHoldedCoverDetailsByID2(\r\n        uint _hcid\r\n    )\r\n        external\r\n        returns (\r\n            uint hcid,\r\n            address payable memberAddress,\r\n            uint[] memory coverDetails\r\n        );\r\n    function getTotalSumAssuredSC(address _add, bytes4 _curr) external returns(uint amount);\r\n\r\n}\r\n\r\ncontract TokenData {\r\n    function lockTokenTimeAfterCoverExp() external returns (uint);\r\n}\r\n\r\ninterface Claims {\r\n    function getClaimbyIndex(uint _claimId) external view returns (\r\n        uint claimId,\r\n        uint status,\r\n        int8 finalVerdict,\r\n        address claimOwner,\r\n        uint coverId\r\n    );\r\n    function submitClaim(uint coverId) external;\r\n}\r\n\r\ncontract ClaimsData {\r\n    function actualClaimLength() external view returns(uint);\r\n}\r\n\r\ninterface NXMToken {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n}\r\n\r\ninterface MemberRoles {\r\n    function switchMembership(address) external;\r\n}\r\n\r\ncontract yInsure is\r\n    ERC721Full(\"yInsureNFT\", \"yNFT\"),\r\n    Ownable,\r\n    ReentrancyGuard {\r\n    \r\n    struct Token {\r\n        uint expirationTimestamp;\r\n        bytes4 coverCurrency;\r\n        uint coverAmount;\r\n        uint coverPrice;\r\n        uint coverPriceNXM;\r\n        uint expireTime;\r\n        uint generationTime;\r\n        uint coverId;\r\n        bool claimInProgress;\r\n        uint claimId;\r\n    }\r\n    \r\n    event ClaimRedeemed (\r\n        address receiver,\r\n        uint value,\r\n        bytes4 currency\r\n    );\r\n    \r\n    using SafeMath for uint;\r\n\r\n    INXMMaster constant public nxMaster = INXMMaster(0x3A2d0E5773dd6A345Eda543b14C6Ca6B51c6CC0A);\r\n    \r\n    enum CoverStatus {\r\n        Active,\r\n        ClaimAccepted,\r\n        ClaimDenied,\r\n        CoverExpired,\r\n        ClaimSubmitted,\r\n        Requested\r\n    }\r\n    \r\n    enum ClaimStatus {\r\n        PendingClaimAssessorVote, // 0\r\n        PendingClaimAssessorVoteDenied, // 1\r\n        PendingClaimAssessorVoteThresholdNotReachedAccept, // 2\r\n        PendingClaimAssessorVoteThresholdNotReachedDeny, // 3\r\n        PendingClaimAssessorConsensusNotReachedAccept, // 4\r\n        PendingClaimAssessorConsensusNotReachedDeny, // 5\r\n        FinalClaimAssessorVoteDenied, // 6\r\n        FinalClaimAssessorVoteAccepted, // 7\r\n        FinalClaimAssessorVoteDeniedMVAccepted, // 8\r\n        FinalClaimAssessorVoteDeniedMVDenied, // 9\r\n        FinalClaimAssessorVotAcceptedMVNoDecision, // 10\r\n        FinalClaimAssessorVoteDeniedMVNoDecision, // 11\r\n        ClaimAcceptedPayoutPending, // 12\r\n        ClaimAcceptedNoPayout, // 13\r\n        ClaimAcceptedPayoutDone // 14\r\n    }\r\n    \r\n    function _buyCover(\r\n        address coveredContractAddress,\r\n        bytes4 coverCurrency,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal returns (uint coverId) {\r\n    \r\n        uint coverPrice = coverDetails[1];\r\n        Pool1 pool1 = Pool1(nxMaster.getLatestAddress(\"P1\"));\r\n        if (coverCurrency == \"ETH\") {\r\n            pool1.makeCoverBegin.value(coverPrice)(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\r\n        } else {\r\n            address payable pool1Address = address(uint160(address(pool1)));\r\n            PoolData poolData = PoolData(nxMaster.getLatestAddress(\"PD\"));\r\n            IERC20 erc20 = IERC20(poolData.getCurrencyAssetAddress(coverCurrency));\r\n            erc20.approve(pool1Address, coverPrice);\r\n            pool1.makeCoverUsingCA(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\r\n        }\r\n    \r\n        QuotationData quotationData = QuotationData(nxMaster.getLatestAddress(\"QD\"));\r\n        // *assumes* the newly created claim is appended at the end of the list covers\r\n        coverId = quotationData.getCoverLength().sub(1);\r\n    }\r\n    \r\n    function _submitClaim(uint coverId) internal returns (uint) {\r\n        Claims claims = Claims(nxMaster.getLatestAddress(\"CL\"));\r\n        claims.submitClaim(coverId);\r\n    \r\n        ClaimsData claimsData = ClaimsData(nxMaster.getLatestAddress(\"CD\"));\r\n        uint claimId = claimsData.actualClaimLength() - 1;\r\n        return claimId;\r\n    }\r\n    \r\n    function getMemberRoles() public view returns (address) {\r\n        return nxMaster.getLatestAddress(\"MR\");\r\n    }\r\n    \r\n    function getCover(\r\n        uint coverId\r\n    ) internal view returns (\r\n        uint cid,\r\n        uint8 status,\r\n        uint sumAssured,\r\n        uint16 coverPeriod,\r\n        uint validUntil\r\n    ) {\r\n        QuotationData quotationData = QuotationData(nxMaster.getLatestAddress(\"QD\"));\r\n        return quotationData.getCoverDetailsByCoverID2(coverId);\r\n    }\r\n    \r\n    function _sellNXMTokens(uint amount) internal returns (uint ethValue) {\r\n        address payable pool1Address = nxMaster.getLatestAddress(\"P1\");\r\n        Pool1 p1 = Pool1(pool1Address);\r\n    \r\n        NXMToken nxmToken = NXMToken(nxMaster.tokenAddress());\r\n    \r\n        ethValue = p1.getWei(amount);\r\n        nxmToken.approve(pool1Address, amount);\r\n        p1.sellNXMTokens(amount);\r\n    }\r\n    \r\n    function _getCurrencyAssetAddress(bytes4 currency) internal view returns (address) {\r\n        PoolData pd = PoolData(nxMaster.getLatestAddress(\"PD\"));\r\n        return pd.getCurrencyAssetAddress(currency);\r\n    }\r\n    \r\n    function _getLockTokenTimeAfterCoverExpiry() internal returns (uint) {\r\n        TokenData tokenData = TokenData(nxMaster.getLatestAddress(\"TD\"));\r\n        return tokenData.lockTokenTimeAfterCoverExp();\r\n    }\r\n    \r\n    function _getTokenAddress() internal view returns (address) {\r\n        return nxMaster.tokenAddress();\r\n    }\r\n    \r\n    function _payoutIsCompleted(uint claimId) internal view returns (bool) {\r\n        uint256 status;\r\n        Claims claims = Claims(nxMaster.getLatestAddress(\"CL\"));\r\n        (, status, , , ) = claims.getClaimbyIndex(claimId);\r\n        return status == uint(ClaimStatus.FinalClaimAssessorVoteAccepted)\r\n            || status == uint(ClaimStatus.ClaimAcceptedPayoutDone);\r\n    }\r\n  \r\n    bytes4 internal constant ethCurrency = \"ETH\";\r\n    \r\n    uint public distributorFeePercentage;\r\n    uint256 internal issuedTokensCount;\r\n    mapping(uint256 => Token) public tokens;\r\n    \r\n    mapping(bytes4 => uint) public withdrawableTokens;\r\n    \r\n    constructor(uint _distributorFeePercentage) public {\r\n        distributorFeePercentage = _distributorFeePercentage;\r\n    }\r\n    \r\n    function switchMembership(address _newMembership) external onlyOwner {\r\n        MemberRoles(getMemberRoles()).switchMembership(_newMembership);\r\n    }\r\n    \r\n    // Arguments to be passed as coverDetails, from the quote api:\r\n    //    coverDetails[0] = coverAmount;\r\n    //    coverDetails[1] = coverPrice;\r\n    //    coverDetails[2] = coverPriceNXM;\r\n    //    coverDetails[3] = expireTime;\r\n    //    coverDetails[4] = generationTime;\r\n    function buyCover(\r\n        address coveredContractAddress,\r\n        bytes4 coverCurrency,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external payable {\r\n    \r\n        uint coverPrice = coverDetails[1];\r\n        uint requiredValue = distributorFeePercentage.mul(coverPrice).div(100).add(coverPrice);\r\n        if (coverCurrency == \"ETH\") {\r\n            require(msg.value == requiredValue, \"Incorrect value sent\");\r\n        } else {\r\n            IERC20 erc20 = IERC20(_getCurrencyAssetAddress(coverCurrency));\r\n            require(erc20.transferFrom(msg.sender, address(this), requiredValue), \"Transfer failed\");\r\n        }\r\n        \r\n        uint coverId = _buyCover(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\r\n        withdrawableTokens[coverCurrency] = withdrawableTokens[coverCurrency].add(requiredValue.sub(coverPrice));\r\n        \r\n        // mint token\r\n        uint256 nextTokenId = issuedTokensCount++;\r\n        uint expirationTimestamp = block.timestamp + _getLockTokenTimeAfterCoverExpiry() + coverPeriod * 1 days;\r\n        tokens[nextTokenId] = Token(expirationTimestamp,\r\n          coverCurrency,\r\n          coverDetails[0],\r\n          coverDetails[1],\r\n          coverDetails[2],\r\n          coverDetails[3],\r\n          coverDetails[4],\r\n          coverId, false, 0);\r\n        _mint(msg.sender, nextTokenId);\r\n    }\r\n    \r\n    function submitClaim(uint256 tokenId) external onlyTokenApprovedOrOwner(tokenId) {\r\n    \r\n        if (tokens[tokenId].claimInProgress) {\r\n            uint8 coverStatus;\r\n            (, coverStatus, , , ) = getCover(tokens[tokenId].coverId);\r\n            require(coverStatus == uint8(CoverStatus.ClaimDenied),\r\n            \"Can submit another claim only if the previous one was denied.\");\r\n        }\r\n        require(tokens[tokenId].expirationTimestamp > block.timestamp, \"Token is expired\");\r\n        \r\n        uint claimId = _submitClaim(tokens[tokenId].coverId);\r\n        \r\n        tokens[tokenId].claimInProgress = true;\r\n        tokens[tokenId].claimId = claimId;\r\n    }\r\n    \r\n    function redeemClaim(uint256 tokenId) public onlyTokenApprovedOrOwner(tokenId)  nonReentrant {\r\n        require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\r\n        uint8 coverStatus;\r\n        uint sumAssured;\r\n        (, coverStatus, sumAssured, , ) = getCover(tokens[tokenId].coverId);\r\n        \r\n        require(coverStatus == uint8(CoverStatus.ClaimAccepted), \"Claim is not accepted\");\r\n        require(_payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\r\n        \r\n        _burn(tokenId);\r\n        _sendAssuredSum(tokens[tokenId].coverCurrency, sumAssured);\r\n        emit ClaimRedeemed(msg.sender, sumAssured, tokens[tokenId].coverCurrency);\r\n    }\r\n    \r\n    function _sendAssuredSum(bytes4 coverCurrency, uint sumAssured) internal {\r\n        if (coverCurrency == ethCurrency) {\r\n            msg.sender.transfer(sumAssured);\r\n        } else {\r\n            IERC20 erc20 = IERC20(_getCurrencyAssetAddress(coverCurrency));\r\n            require(erc20.transfer(msg.sender, sumAssured), \"Transfer failed\");\r\n        }\r\n    }\r\n    \r\n    function getCoverStatus(uint256 tokenId) external view returns (uint8 coverStatus, bool payoutCompleted) {\r\n        (, coverStatus, , , ) = getCover(tokens[tokenId].coverId);\r\n        payoutCompleted = _payoutIsCompleted(tokenId);\r\n    }\r\n    \r\n    function nxmTokenApprove(address _spender, uint256 _value) public onlyOwner {\r\n        IERC20 nxmToken = IERC20(_getTokenAddress());\r\n        nxmToken.approve(_spender, _value);\r\n    }\r\n    \r\n    function withdrawEther(address payable _recipient, uint256 _amount) external onlyOwner nonReentrant {\r\n        require(withdrawableTokens[ethCurrency] >= _amount, \"Not enough ETH\");\r\n        withdrawableTokens[ethCurrency] = withdrawableTokens[ethCurrency].sub(_amount);\r\n        _recipient.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawTokens(address payable _recipient, uint256 _amount, bytes4 _currency) external onlyOwner nonReentrant {\r\n        require(withdrawableTokens[_currency] >= _amount, \"Not enough tokens\");\r\n        withdrawableTokens[_currency] = withdrawableTokens[_currency].sub(_amount);\r\n    \r\n        IERC20 erc20 = IERC20(_getCurrencyAssetAddress(_currency));\r\n        require(erc20.transfer(_recipient, _amount), \"Transfer failed\");\r\n    }\r\n    \r\n    function sellNXMTokens(uint amount) external onlyOwner {\r\n        uint ethValue = _sellNXMTokens(amount);\r\n        withdrawableTokens[ethCurrency] = withdrawableTokens[ethCurrency].add(ethValue);\r\n    }\r\n    \r\n    modifier onlyTokenApprovedOrOwner(uint256 tokenId) {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Not approved or owner\");\r\n        _;\r\n    }\r\n    \r\n    function () payable external {\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorFeePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"currency\",\"type\":\"bytes4\"}],\"name\":\"ClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"coveredContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"coverCurrency\",\"type\":\"bytes4\"},{\"internalType\":\"uint256[]\",\"name\":\"coverDetails\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyCover\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributorFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCoverStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"coverStatus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"payoutCompleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberRoles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxMaster\",\"outputs\":[{\"internalType\":\"contract INXMMaster\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"nxmTokenApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellNXMTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"submitClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMembership\",\"type\":\"address\"}],\"name\":\"switchMembership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"coverCurrency\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverPriceNXM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimInProgress\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_currency\",\"type\":\"bytes4\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"yInsure","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1bdb57a21a6a1f16a808cdae01445f315ea708263070bf04e007605416986dc4"}]}