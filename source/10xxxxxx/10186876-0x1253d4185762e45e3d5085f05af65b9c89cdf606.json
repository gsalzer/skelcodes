{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/managment/Constants.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract Constants {\r\n    // Permissions bit constants\r\n    uint256 public constant CAN_MINT_TOKENS = 0;\r\n    uint256 public constant CAN_BURN_TOKENS = 1;\r\n    uint256 public constant CAN_UPDATE_STATE = 2;\r\n    uint256 public constant CAN_LOCK_TOKENS = 3;\r\n    uint256 public constant CAN_UPDATE_PRICE = 4;\r\n    uint256 public constant CAN_INTERACT_WITH_ALLOCATOR = 5;\r\n    uint256 public constant CAN_SET_ALLOCATOR_MAX_SUPPLY = 6;\r\n    uint256 public constant CAN_PAUSE_TOKENS = 7;\r\n    uint256 public constant ECLIUDED_ADDRESSES = 8;\r\n    uint256 public constant WHITELISTED = 9;\r\n    uint256 public constant SIGNERS = 10;\r\n    uint256 public constant EXTERNAL_CONTRIBUTORS = 11;\r\n    uint256 public constant CAN_SEE_BALANCE = 12;\r\n    uint256 public constant CAN_CANCEL_TRANSACTION = 13;\r\n    uint256 public constant CAN_ALLOCATE_REFERRAL_TOKENS = 14;\r\n    uint256 public constant CAN_SET_REFERRAL_MAX_SUPPLY = 15;\r\n    uint256 public constant MANUAL_TOKENS_ALLOCATION = 16;\r\n    uint256 public constant CAN_SET_WHITELISTED = 17;\r\n\r\n    // Contract Registry keys\r\n    uint256 public constant CONTRACT_TOKEN = 1;\r\n    uint256 public constant CONTRACT_PRICING = 2;\r\n    uint256 public constant CONTRACT_CROWDSALE = 3;\r\n    uint256 public constant CONTRACT_ALLOCATOR = 4;\r\n    uint256 public constant CONTRACT_AGENT = 5;\r\n    uint256 public constant CONTRACT_FORWARDER = 6;\r\n    uint256 public constant CONTRACT_REFERRAL = 7;\r\n    uint256 public constant CONTRACT_STATS = 8;\r\n    uint256 public constant CONTRACT_LOCKUP = 9;\r\n\r\n    uint256 public constant YEAR_IN_SECONDS = 31556952;\r\n    uint256 public constant SIX_MONTHS =  15778476;\r\n    uint256 public constant MONTH_IN_SECONDS = 2629746;\r\n\r\n    string public constant ERROR_ACCESS_DENIED = \"ERROR_ACCESS_DENIED\";\r\n    string public constant ERROR_WRONG_AMOUNT = \"ERROR_WRONG_AMOUNT\";\r\n    string public constant ERROR_NO_CONTRACT = \"ERROR_NO_CONTRACT\";\r\n    string public constant ERROR_NOT_AVAILABLE = \"ERROR_NOT_AVAILABLE\";\r\n}\r\n\r\n// File: contracts/managment/Management.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract Management is Ownable, Constants {\r\n\r\n    // Contract Registry\r\n    mapping (uint256 => address payable) public contractRegistry;\r\n\r\n    // Permissions\r\n    mapping (address => mapping(uint256 => bool)) public permissions;\r\n\r\n    event PermissionsSet(\r\n        address subject, \r\n        uint256 permission, \r\n        bool value\r\n    );\r\n\r\n    event ContractRegistered(\r\n        uint256 key,\r\n        address source,\r\n        address target\r\n    );\r\n\r\n    function setPermission(\r\n        address _address, \r\n        uint256 _permission, \r\n        bool _value\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        permissions[_address][_permission] = _value;\r\n        emit PermissionsSet(_address, _permission, _value);\r\n    }\r\n\r\n    function registerContract(\r\n        uint256 _key, \r\n        address payable _target\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        contractRegistry[_key] = _target;\r\n        emit ContractRegistered(_key, address(0), _target);\r\n    }\r\n\r\n    function setWhitelisted(\r\n        address _address,\r\n        bool _value\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            permissions[msg.sender][CAN_SET_WHITELISTED] == true,\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n\r\n        permissions[_address][WHITELISTED] = _value;\r\n\r\n        emit PermissionsSet(_address, WHITELISTED, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/managment/Managed.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Managed is Ownable, Constants {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Management public management;\r\n\r\n    modifier requirePermission(uint256 _permissionBit) {\r\n        require(\r\n            hasPermission(msg.sender, _permissionBit),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canCallOnlyRegisteredContract(uint256 _key) {\r\n        require(\r\n            msg.sender == management.contractRegistry(_key),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requireContractExistsInRegistry(uint256 _key) {\r\n        require(\r\n            management.contractRegistry(_key) != address(0),\r\n            ERROR_NO_CONTRACT\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _managementAddress) public {\r\n        management = Management(_managementAddress);\r\n    }\r\n\r\n    function setManagementContract(address _management) public onlyOwner {\r\n        require(address(0) != _management, ERROR_NO_CONTRACT);\r\n\r\n        management = Management(_management);\r\n    }\r\n\r\n    function hasPermission(address _subject, uint256 _permissionBit)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return management.permissions(_subject, _permissionBit);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LockupContract.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract LockupContract is Managed {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PERCENT_ABS_MAX = 100;\r\n    bool public isPostponedStart;\r\n    uint256 public postponedStartDate;\r\n\r\n    mapping(address => uint256[]) public lockedAllocationData;\r\n\r\n    mapping(address => uint256) public manuallyLockedBalances;\r\n\r\n    event Lock(address holderAddress, uint256 amount);\r\n\r\n    constructor(address _management) public Managed(_management) {\r\n        isPostponedStart = true;\r\n    }\r\n\r\n    function isTransferAllowed(\r\n        address _address,\r\n        uint256 _value,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint256 unlockedBalance = getUnlockedBalance(\r\n            _address,\r\n            _time,\r\n            _holderBalance\r\n        );\r\n        if (unlockedBalance >= _value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function allocationLog(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 _startingAt,\r\n        uint256 _lockPeriodInSeconds,\r\n        uint256 _initialUnlockInPercent,\r\n        uint256 _releasePeriodInSeconds\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        lockedAllocationData[_address].push(_startingAt);\r\n        if (_initialUnlockInPercent > 0) {\r\n            _amount = _amount.mul(uint256(PERCENT_ABS_MAX)\r\n                .sub(_initialUnlockInPercent)).div(PERCENT_ABS_MAX);\r\n        }\r\n        lockedAllocationData[_address].push(_amount);\r\n        lockedAllocationData[_address].push(_lockPeriodInSeconds);\r\n        lockedAllocationData[_address].push(_releasePeriodInSeconds);\r\n        emit Lock(_address, _amount);\r\n    }\r\n\r\n    function getUnlockedBalance(\r\n        address _address,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 blockedAmount = manuallyLockedBalances[_address];\r\n\r\n        if (lockedAllocationData[_address].length == 0) {\r\n            return _holderBalance.sub(blockedAmount);\r\n        }\r\n        uint256[] memory  addressLockupData = lockedAllocationData[_address];\r\n        for (uint256 i = 0; i < addressLockupData.length / 4; i++) {\r\n            uint256 lockedAt = addressLockupData[i.mul(4)];\r\n            uint256 lockedBalance = addressLockupData[i.mul(4).add(1)];\r\n            uint256 lockPeriodInSeconds = addressLockupData[i.mul(4).add(2)];\r\n            uint256 _releasePeriodInSeconds = addressLockupData[\r\n                i.mul(4).add(3)\r\n            ];\r\n            if (lockedAt == 0 && true == isPostponedStart) {\r\n                if (postponedStartDate == 0) {\r\n                    blockedAmount = blockedAmount.add(lockedBalance);\r\n                    continue;\r\n                }\r\n                lockedAt = postponedStartDate;\r\n            }\r\n            if (lockedAt > _time) {\r\n                blockedAmount = blockedAmount.add(lockedBalance);\r\n                continue;\r\n            }\r\n            if (lockedAt.add(lockPeriodInSeconds) > _time) {\r\n                if (lockedBalance == 0) {\r\n                    blockedAmount = _holderBalance;\r\n                    break;\r\n                } else {\r\n                    uint256 tokensUnlocked;\r\n                    if (_releasePeriodInSeconds > 0) {\r\n                        uint256 duration = (_time.sub(lockedAt))\r\n                            .div(_releasePeriodInSeconds);\r\n                        tokensUnlocked = lockedBalance.mul(duration)\r\n                            .mul(_releasePeriodInSeconds)\r\n                            .div(lockPeriodInSeconds);\r\n                    }\r\n                    blockedAmount = blockedAmount\r\n                        .add(lockedBalance)\r\n                        .sub(tokensUnlocked);\r\n                }\r\n            }\r\n        }\r\n\r\n        return _holderBalance.sub(blockedAmount);\r\n    }\r\n\r\n    function setManuallyLockedForAddress (\r\n        address _holder,\r\n        uint256 _balance\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        manuallyLockedBalances[_holder] = _balance;\r\n    }\r\n\r\n    function setPostponedStartDate(uint256 _postponedStartDate)\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        postponedStartDate = _postponedStartDate;\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ALLOCATE_REFERRAL_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_BURN_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_CANCEL_TRANSACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_INTERACT_WITH_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_LOCK_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_MINT_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_PAUSE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_ALLOCATOR_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_REFERRAL_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_STATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_AGENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CROWDSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FORWARDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_PRICING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_STATS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECLIUDED_ADDRESSES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_ACCESS_DENIED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_AVAILABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NO_CONTRACT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_WRONG_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_CONTRIBUTORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANUAL_TOKENS_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_ABS_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialUnlockInPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releasePeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"allocationLog\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holderBalance\",\"type\":\"uint256\"}],\"name\":\"getUnlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPostponedStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holderBalance\",\"type\":\"uint256\"}],\"name\":\"isTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedAllocationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract Management\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manuallyLockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postponedStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"setManuallyLockedForAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postponedStartDate\",\"type\":\"uint256\"}],\"name\":\"setPostponedStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockupContract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005475379562cff40032733220128e8d58a917e058","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b37daacd1953882385aac91777eee7e89a002cf846950b4b03a1a9af6c70e345"}]}