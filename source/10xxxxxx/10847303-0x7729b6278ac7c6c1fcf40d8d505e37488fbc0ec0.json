{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\n\r\ncontract PV {\r\n\r\n    address owner;\r\n    bool initialized = false;\r\n    uint priceVault = 0.3 ether;\r\n    uint public numberSecuence = 0;\r\n    uint public vaultsCompleted = 0;\r\n    uint public totalRounds = 5;\r\n    uint public CountLevels = 30;\r\n\r\n    struct ConfigsStruct {\r\n        address developer;\r\n        address dev_1;\r\n        address fund;\r\n        uint lastUser;\r\n        uint earnings;\r\n        uint earningsVault;\r\n    }\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        bool pay;\r\n        uint id;\r\n        uint referrerID;\r\n        uint referredUsers;\r\n        uint buys;\r\n        uint earnings;\r\n        uint profit;\r\n        uint repurchase;\r\n        uint rounds;\r\n        uint finish;\r\n        bool grace;\r\n    }\r\n\r\n    struct UserVaultStruct {\r\n        bool isExist;\r\n        uint idVault;\r\n        uint total;\r\n    }\r\n\r\n    struct VaultUserStruct {\r\n        bool isExist;\r\n        bool pay;\r\n        address user;\r\n        uint sequence;\r\n        uint payment_received;\r\n    }\r\n\r\n    mapping (uint => ConfigsStruct) public configs;\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    mapping (uint => mapping (uint => address)) public userChild;\r\n    mapping (address => UserVaultStruct) public usersVault;\r\n    mapping (uint => VaultUserStruct) public vaultsUsers;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner{\r\n        require(owner == msg.sender, \"Only the owner\");\r\n        _;\r\n    }\r\n\r\n    function setAddrFund(address _addr) external onlyOwner {\r\n        configs[0].fund = _addr;\r\n    }\r\n\r\n    function setAddrDeveloper(address _addr) external onlyOwner {\r\n        configs[0].developer = _addr;\r\n    }\r\n\r\n    function changePrice(uint _price) external onlyOwner {\r\n        priceVault = _price;\r\n    }\r\n\r\n    function init(address _developer, address _dev_1, address _fund) external onlyOwner {\r\n        require(initialized == false, \"Error, the contract has already been initialized\");\r\n        ConfigsStruct memory configs_struct;\r\n        configs_struct = ConfigsStruct({\r\n            developer: _developer,\r\n            dev_1: _dev_1,\r\n            fund: _fund,\r\n            lastUser: 0,\r\n            earnings: 0,\r\n            earningsVault: 0\r\n        });\r\n        configs[0] = configs_struct;\r\n        createUser(0, _dev_1);\r\n        createVault(_dev_1, 0, true);\r\n        initialized = true;\r\n    }\r\n\r\n    function createUser(uint _sponsorID, address _user) private {\r\n        configs[0].lastUser++;\r\n        UserStruct memory userStruct;\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            pay: true,\r\n            id: configs[0].lastUser,\r\n            referrerID: _sponsorID,\r\n            referredUsers: 0,\r\n            buys: 1,\r\n            earnings: 0,\r\n            profit: 0,\r\n            repurchase: 0,\r\n            rounds: 0,\r\n            finish: now + 60 days,\r\n            grace: false\r\n        });\r\n        users[_user] = userStruct;\r\n        userList[configs[0].lastUser] = _user;\r\n        users[userList[_sponsorID]].referredUsers++;\r\n        userChild[_sponsorID][users[userList[_sponsorID]].referredUsers] = _user;\r\n    }\r\n\r\n    function sendEarning(address _addr_, uint _earning_, uint _action) private {\r\n        if(now <= users[_addr_].finish){\r\n            uint totalEarning = 0;\r\n            uint earningSendETH = 0;\r\n            uint restEarning = 0;\r\n            if(_action == 1){\r\n                totalEarning = users[_addr_].repurchase + _earning_;\r\n                if(totalEarning > priceVault){\r\n                    earningSendETH = totalEarning - priceVault;\r\n                    users[_addr_].earnings += earningSendETH;\r\n                    users[_addr_].profit += earningSendETH;\r\n                    users[_addr_].repurchase += _earning_ - earningSendETH;\r\n                    restEarning = earningSendETH;\r\n                } else {\r\n                    users[_addr_].repurchase += _earning_;\r\n                }\r\n                if(users[_addr_].repurchase >= priceVault){\r\n                    users[_addr_].pay = true;\r\n                    users[_addr_].profit = restEarning;\r\n                    users[_addr_].repurchase = 0;\r\n                    users[_addr_].buys += 1;\r\n                    users[_addr_].rounds++;\r\n                    if(users[_addr_].rounds >= totalRounds){\r\n                        if(users[_addr_].grace == false){\r\n                            users[_addr_].pay = false;\r\n                            users[_addr_].finish = now + 3 days;\r\n                            users[_addr_].grace = true;\r\n                        }\r\n                    }\r\n                }\r\n                if(earningSendETH > 0){\r\n                    sendEth(_addr_, earningSendETH);\r\n                }\r\n            } else {\r\n                totalEarning = users[_addr_].profit + _earning_;\r\n                if(totalEarning > (priceVault*1)){\r\n                    earningSendETH = priceVault - users[_addr_].profit;\r\n                    users[_addr_].earnings += earningSendETH;\r\n                    users[_addr_].profit += earningSendETH;\r\n                    restEarning = _earning_ - earningSendETH;\r\n                } else {\r\n                    earningSendETH = _earning_;\r\n                    users[_addr_].earnings += _earning_;\r\n                    users[_addr_].profit += _earning_;\r\n                }\r\n                if(users[_addr_].profit >= (priceVault*1)){\r\n                    users[_addr_].pay = false;\r\n                    users[_addr_].repurchase = restEarning;\r\n                }\r\n                if(earningSendETH > 0){\r\n                    sendEth(_addr_, earningSendETH);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setCountLevels(uint x) external onlyOwner {\r\n        CountLevels = x;\r\n    }\r\n\r\n    function searchUserActive(address _addr, uint _now, uint _count) public view returns (address) {\r\n        _addr = userList[users[_addr].referrerID];\r\n        if(users[_addr].isExist && _count < CountLevels){\r\n            if(_now <= users[_addr].finish){\r\n                if(users[_addr].pay){\r\n                    return _addr;\r\n                } else {\r\n                    _addr = searchUserActive(_addr, _now, (_count+1));\r\n                }\r\n            } else {\r\n                _addr = searchUserActive(_addr, _now, (_count+1));\r\n            }\r\n            return _addr;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function searchUserActiveNetwork(address _addr, uint _now, uint _count) public view returns (address) {\r\n        _addr = userList[users[_addr].referrerID];\r\n        if(users[_addr].isExist && _count < CountLevels){\r\n            if(getReferrerActives(_addr, _now) >= 3){\r\n                if(_now <= users[_addr].finish){\r\n                    if(users[_addr].pay){\r\n                        return _addr;\r\n                    } else {\r\n                        _addr = searchUserActiveNetwork(_addr, _now, (_count+1));\r\n                    }\r\n                } else {\r\n                    _addr = searchUserActiveNetwork(_addr, _now, (_count+1));\r\n                }\r\n            } else {\r\n                _addr = searchUserActiveNetwork(_addr, _now, (_count+1));\r\n            }\r\n            return _addr;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function sendPaymentsNetwork(uint _sponsorID, uint _now) private {\r\n        address referrerLevel = address(0);\r\n        uint percentageSponsor = 35;\r\n        address _addr_ = userList[_sponsorID];\r\n        uint _earning_ = (priceVault * percentageSponsor / 100);\r\n        if(_now <= users[_addr_].finish){\r\n            if(users[_addr_].pay == false){\r\n                sendEarning(_addr_, _earning_, 1);\r\n                _addr_ = searchUserActive(_addr_, _now, 0);\r\n            }\r\n        } else {\r\n            _addr_ = searchUserActive(_addr_, _now, 0);\r\n        }\r\n        if(_addr_ != address(0)){\r\n            sendEarning(_addr_, _earning_, 0);\r\n        }\r\n        referrerLevel = getUserReferrerLast(userList[_sponsorID]);\r\n        for(uint i = 1; i<=6; i++){\r\n            if(referrerLevel != address(0)){\r\n                if(i == 1){percentageSponsor = 6;}\r\n                else if(i == 2){percentageSponsor = 7;}\r\n                else if(i == 3){percentageSponsor = 8;}\r\n                else if(i == 4){percentageSponsor = 9;}\r\n                else if(i == 5){percentageSponsor = 10;}\r\n                else if(i == 6){percentageSponsor = 11;}\r\n                _earning_ = msg.value * percentageSponsor / 100;\r\n                address referrerAddress = referrerLevel;\r\n                if(getReferrerActives(referrerAddress, _now) < 3){\r\n                    referrerAddress = searchUserActiveNetwork(referrerAddress, _now, 0);\r\n                }\r\n                if(_now <= users[referrerAddress].finish){\r\n                    if(users[referrerAddress].pay == false){\r\n                        sendEarning(referrerAddress, _earning_, 1);\r\n                        referrerAddress = searchUserActiveNetwork(referrerAddress, _now, 0);\r\n                    }\r\n                } else {\r\n                    referrerAddress = searchUserActiveNetwork(referrerAddress, _now, 0);\r\n                }\r\n                if(referrerAddress != address(0)){\r\n                    sendEarning(referrerAddress, _earning_, 0);\r\n                }\r\n                referrerLevel = getUserReferrerLast(referrerLevel);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        address referrer = bytesToAddress(msg.data);\r\n        require(users[referrer].isExist, \"Sponsor not Exists\");\r\n        NewUser(users[referrer].id, msg.sender);\r\n    }\r\n\r\n    function Repurchase() external payable {\r\n        require(users[msg.sender].isExist, \"User not Exists\");\r\n        require(users[msg.sender].rounds >= 5, \"User not inactive\");\r\n        users[msg.sender].pay = true;\r\n        users[msg.sender].rounds = 0;\r\n        users[msg.sender].finish = now + 60 days;\r\n        users[msg.sender].profit = 0;\r\n        users[msg.sender].repurchase = 0;\r\n        users[msg.sender].grace = false;\r\n        configs[0].earnings += priceVault;\r\n        sendBalanceDeveloper();\r\n        sendPaymentsNetwork(users[msg.sender].referrerID, now);\r\n        sendBalanceFund();\r\n    }\r\n\r\n    function PayAnotherAccount(uint _sponsorID, address _user) external payable {\r\n        require(users[msg.sender].isExist, \"User Payment not Exists\");\r\n        NewUser(_sponsorID, _user);\r\n    }\r\n\r\n    function NewUser(uint _sponsorID, address _user) private {\r\n        require(!users[_user].isExist, \"User Exists\");\r\n        require(users[userList[_sponsorID]].isExist, \"Sponsor not Exists\");\r\n        require(msg.value == priceVault, 'Incorrect Value');\r\n        configs[0].earnings += priceVault;\r\n        createUser(_sponsorID, _user);\r\n        sendBalanceDeveloper();\r\n        sendPaymentsNetwork(_sponsorID, now);\r\n        sendBalanceFund();\r\n        emit eventNewUser(_user, userList[_sponsorID], now);\r\n    }\r\n\r\n    function createVault(address _user, uint _payment, bool _check) private {\r\n        if(_check == true){\r\n            UserVaultStruct memory user_vault_struct;\r\n            user_vault_struct = UserVaultStruct({\r\n                isExist: true,\r\n                idVault: numberSecuence,\r\n                total: 1\r\n            });\r\n            usersVault[_user] = user_vault_struct;\r\n        } else {\r\n            usersVault[_user].idVault = numberSecuence;\r\n            usersVault[_user].total++;\r\n        }\r\n        VaultUserStruct memory vault_user_struct;\r\n        vault_user_struct = VaultUserStruct({\r\n            isExist: true,\r\n            pay: true,\r\n            user: _user,\r\n            sequence: numberSecuence,\r\n            payment_received: _payment\r\n        });\r\n        vaultsUsers[numberSecuence] = vault_user_struct;\r\n        numberSecuence++;\r\n    }\r\n\r\n    function buyVault(address _user) external payable {\r\n        require(users[_user].isExist, \"User not Exists\");\r\n        require(!usersVault[_user].isExist, \"User Exists\");\r\n        require(msg.value == priceVault, 'Incorrect Value');\r\n        require(getReferrerActives(_user, now) >= 3, \"You need 3 direct users actives\");\r\n        configs[0].earningsVault += priceVault;\r\n        createVault(_user, 0, true);\r\n        sendBalanceDeveloper();\r\n        sendVaults();\r\n        sendBalanceFund();\r\n        emit eventBuyVault(_user, now);\r\n    }\r\n\r\n    function sendVaults() private {\r\n        uint totalVault = vaultsCompleted;\r\n        for(uint i = totalVault; i < (totalVault+3); i++){\r\n            if(vaultsUsers[i].pay == true && vaultsUsers[i].payment_received < 3){\r\n                sendPaymentVault(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendPaymentVault(uint i) private {\r\n        uint _amount = msg.value * 30 / 100;\r\n        sendEth(vaultsUsers[i].user, _amount);\r\n        vaultsUsers[i].payment_received++;\r\n        if(vaultsUsers[i].payment_received >= 3){\r\n            vaultsUsers[i].pay = false;\r\n            vaultsCompleted++;\r\n            createVault(vaultsUsers[i].user, 0, false);\r\n        }\r\n    }\r\n\r\n    function sendEth(address _user, uint _amount) private {\r\n        if( _amount > 0 ){\r\n            address(uint160(_user)).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    function sendBalanceDeveloper() private {\r\n        if(address(this).balance > 0){\r\n            uint _amount = address(this).balance * 10 / 100;\r\n            address(uint160(configs[0].developer)).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    function sendBalanceFund() private {\r\n        if(address(this).balance > 0){\r\n            address(uint160(configs[0].fund)).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function getUserReferrerLast(address _user) public view returns (address) {\r\n        if( users[_user].referrerID != 0 ){\r\n            return userList[users[_user].referrerID];\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function getReferrerActives(address _user, uint _now) public view returns (uint) {\r\n        if( users[_user].referredUsers < 3 ){\r\n            return users[_user].referredUsers;\r\n        } else {\r\n            uint total = 0;\r\n            for(uint i = 1; i<=users[_user].referredUsers; i++){\r\n                if(_now <= users[_user].finish){\r\n                    total++;\r\n                    if(total >= 3){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return total;\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function getUserStatusReferrers(address _user, uint _now) public view returns (bool) {\r\n        uint t_r = getReferrerActives(_user, _now);\r\n        if(t_r >= 3){\r\n            if(_now <= users[_user].finish){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    event eventNewUser(address _user, address indexed _sponsor, uint indexed _time);\r\n    event eventBuyVault(address indexed _user, uint indexed _time);\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"eventBuyVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"eventNewUser\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CountLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sponsorID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"PayAnotherAccount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Repurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyVault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev_1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningsVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getReferrerActives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrerLast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"getUserStatusReferrers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev_1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberSecuence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"searchUserActive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_now\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"searchUserActiveNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"setCountLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"grace\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"idVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultsCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultsUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pay\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sequence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PV","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://050be5860f736138047a6da734af3dd3f94a6722b083341492e2d936b7ed342b"}]}