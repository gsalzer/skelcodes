{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/BaseMintField.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n// import '../libraries/SafeMath.sol';\r\n\r\ncontract BaseMintField {\r\n    using SafeMath for uint;\r\n    struct Productivity {\r\n        uint product;           // user's productivity\r\n        uint total;             // total productivity\r\n        uint block;             // record's block number\r\n        uint user;              // accumulated products\r\n        uint global;            // global accumulated products\r\n    }\r\n\r\n    Productivity private global;\r\n    mapping(address => Productivity)    private users;\r\n\r\n    event AmountPerBlockChanged (uint oldValue, uint newValue);\r\n    event ProductivityIncreased (address indexed user, uint value);\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n\r\n    uint private unlocked = 1;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n\r\n    // compute productivity returns total productivity of a user.\r\n    function _computeProductivity(Productivity memory user) private view returns (uint) {\r\n        uint blocks = block.number.sub(user.block);\r\n        return user.product + user.total.mul(blocks);\r\n    }\r\n\r\n    // update users' productivity by value with boolean value indicating increase  or decrease.\r\n    function _updateProductivity(Productivity storage user, uint value, bool increase) private {\r\n        user.product      = _computeProductivity(user);\r\n        global.product    = _computeProductivity(global);\r\n\r\n        require(global.product <= uint(-1), 'BaseMintField: GLOBAL_PRODUCT_OVERFLOW');\r\n\r\n        user.block      = block.number;\r\n        global.block    = block.number;\r\n        if(increase) {\r\n            user.total   = user.total.add(value);\r\n            global.total = global.total.add(value);\r\n        }\r\n        else {\r\n            require(user.total >= value, 'BaseMintField: INVALID_DECREASE_USER_POWER');\r\n            require(global.total >= value, 'BaseMintField: INVALID_DECREASE_GLOBAL_POWER');\r\n            user.total   = user.total.sub(value);\r\n            global.total = global.total.sub(value);\r\n        }\r\n    }\r\n\r\n    function _increaseProductivity(address user, uint value) internal returns (bool) {\r\n        require(value > 0, 'BaseMintField: PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n        Productivity storage product        = users[user];\r\n        _updateProductivity(product, value, true);\r\n        emit ProductivityIncreased(user, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function _decreaseProductivity(address user, uint value) internal returns (bool) {\r\n        Productivity storage product = users[user];\r\n        require(value > 0 && product.total >= value, 'BaseMintField: INSUFFICIENT_PRODUCTIVITY');\r\n        _updateProductivity(product, value, false);\r\n        emit ProductivityDecreased(user, value);\r\n        return true;\r\n    }\r\n \r\n    function _updateProductValue() internal returns (bool) {\r\n        Productivity storage product = users[msg.sender];\r\n        \r\n        product.user  = _computeProductivity(product);\r\n        product.global = _computeProductivity(global);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function _computeUserPercentage() internal view returns (uint numerator, uint denominator) {\r\n        Productivity memory product    = users[msg.sender];\r\n        \r\n        uint userProduct     = _computeProductivity(product);\r\n        uint globalProduct   = _computeProductivity(global);\r\n\r\n        numerator          = userProduct.sub(product.user);\r\n        denominator        = globalProduct.sub(product.global);\r\n    }\r\n    \r\n}\r\n// Dependency file: contracts/interfaces/IDemaxCallee.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxCallee {\r\n    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IDgas.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDgas {\r\n    function amountPerBlock() external view returns (uint);\r\n    function changeAmountPerBlock(uint value) external returns (bool);\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n    function take() external view returns (uint);\r\n    function takes() external view returns (uint, uint);\r\n    function mint() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function upgradeImpl(address _newImpl) external  returns (uint);\r\n}\r\n// Dependency file: contracts/interfaces/IDemaxFactory.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function contractCodeHash() external view returns (bytes32);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function isPair(address pair) external view returns (bool);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function playerPairs(address player, uint index) external view returns (address pair);\r\n    function getPlayerPairCount(address player) external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function addPlayerPair(address player, address _pair) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/UQ112x112.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/Math.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IDemaxConfig.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxConfig {\r\n    function PERCENT_DENOMINATOR() external view returns (uint);\r\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\r\n    function getConfigValue(bytes32 _name) external view returns (uint);\r\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\r\n    function checkToken(address _token) external view returns(bool);\r\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\r\n    function listToken(address _token) external returns (bool);\r\n    function getDefaultListTokens() external returns (address[] memory);\r\n}\r\n// Dependency file: contracts/DemaxPair.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n\r\n// import './libraries/Math.sol';\r\n// import './libraries/UQ112x112.sol';\r\n// import './interfaces/IERC20.sol';\r\n// import './interfaces/IDemaxFactory.sol';\r\n// import './interfaces/IDgas.sol';\r\n// import './interfaces/IDemaxCallee.sol';\r\n// import './modules/BaseMintField.sol';\r\n\r\ncontract DemaxPair is BaseMintField {\r\n    uint public version = 1;\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    address public FACTORY;\r\n    address public PLATFROM;\r\n    address public DGAS;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n\r\n    uint256 public totalReward;\r\n    uint256 public remainReward;\r\n    mapping(address => uint256) public lastReward;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n    event MintDGAS(address indexed player, uint pariMint, uint userMint);\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Mint(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(from, address(0), value);\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DEMAX PAIR : TRANSFER_FAILED');\r\n    }\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        FACTORY = msg.sender;\r\n    }\r\n\r\n    modifier onlyPlatform {\r\n        require(msg.sender == PLATFROM, 'DEMAX PAIR : FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        address _platform,\r\n        address _dgas\r\n    ) external {\r\n        require(msg.sender == FACTORY, 'DEMAX PAIR : FORBIDDEN');\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        PLATFROM = _platform;\r\n        DGAS = _dgas;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'DEMAX PAIR : OVERFLOW');\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\r\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function mint(address to) external onlyPlatform lock returns (uint256 liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = _balanceOf(token0, address(this));\r\n        uint256 balance1 = _balanceOf(token1, address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\r\n        }\r\n        require(liquidity > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n        _increaseProductivity(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function burn(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyPlatform lock returns (uint256 amount0, uint256 amount1) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = _balanceOf(_token0, address(this));\r\n        uint256 balance1 = _balanceOf(_token1, address(this));\r\n        require(balanceOf[from] >= amount, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_AMOUNT');\r\n\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = amount.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = amount.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(from, amount);\r\n        _decreaseProductivity(from, amount);\r\n\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = _balanceOf(_token0, address(this));\r\n        balance1 = _balanceOf(_token1, address(this));\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external onlyPlatform lock {\r\n        require(amount0Out > 0 || amount1Out > 0, 'DEMAX PAIR : INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'DEMAX PAIR :  INSUFFICIENT_LIQUIDITY');\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, 'DEMAX PAIR : INVALID_TO');\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\r\n            if (data.length > 0) IDemaxCallee(to).demaxCall(msg.sender, amount0Out, amount1Out, data);\r\n            balance0 = _balanceOf(_token0, address(this));\r\n            balance1 = _balanceOf(_token1, address(this));\r\n        }\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        uint256 _amount0Out = amount0Out;\r\n        uint256 _amount1Out = amount1Out;\r\n        require(amount0In > 0 || amount1In > 0, 'DEMAX PAIR : INSUFFICIENT_INPUT_AMOUNT');\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);\r\n    }\r\n\r\n    function swapFee(\r\n        uint256 amount,\r\n        address token,\r\n        address to\r\n    ) external onlyPlatform {\r\n        if (amount == 0 || token == to) return;\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\r\n        require(to != token0 && to != token1, 'DEMAX PAIR : INVALID_TO');\r\n        _safeTransfer(token, to, amount);\r\n        uint256 balance0 = _balanceOf(token0, address(this));\r\n        uint256 balance1 = _balanceOf(token1, address(this));\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n    }\r\n\r\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber) {\r\n        (uint256 numerator, uint256 denominator) = _computeUserPercentage();\r\n        if (denominator > 0) {\r\n            uint256 deltaReward = totalReward.add(IDgas(DGAS).take()).sub(lastReward[msg.sender]);\r\n            rewardAmount = deltaReward.mul(numerator) / denominator;\r\n        }\r\n        blockNumber = block.number;\r\n    }\r\n\r\n    function mintReward() external lock returns (uint256 userReward) {\r\n        (uint256 numerator, uint256 denominator) = _computeUserPercentage();\r\n        require(numerator > 0 && denominator > 0, 'DEMAX PAIR : INVALID_REWARD_AMOUNT');\r\n\r\n        uint256 pairReward = IDgas(DGAS).mint();\r\n        totalReward = totalReward.add(pairReward);\r\n        uint256 deltaReward = totalReward.sub(lastReward[msg.sender]);\r\n        userReward = deltaReward.mul(numerator) / denominator;\r\n        _safeTransfer(DGAS, msg.sender, userReward);\r\n        _updateProductValue();\r\n        remainReward = remainReward.add(pairReward).sub(userReward);\r\n        lastReward[msg.sender] = totalReward;\r\n        emit MintDGAS(msg.sender, remainReward, userReward);\r\n    }\r\n\r\n    function skim(address to) external lock {\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        _safeTransfer(_token0, to, _balanceOf(_token0, address(this)).sub(reserve0));\r\n        _safeTransfer(_token1, to, _balanceOf(_token0, address(this)).sub(reserve1));\r\n    }\r\n\r\n    function getDGASReserve() public view returns (uint256) {\r\n        return _balanceOf(DGAS, address(this));\r\n    }\r\n\r\n    function _balanceOf(address token, address owner) internal view returns (uint256) {\r\n        if (token == DGAS && owner == address(this)) {\r\n            return IERC20(token).balanceOf(owner).sub(remainReward);\r\n        } else {\r\n            return IERC20(token).balanceOf(owner);\r\n        }\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(_balanceOf(token0, address(this)), _balanceOf(token1, address(this)), reserve0, reserve1);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >=0.6.6;\r\n\r\n// import './DemaxPair.sol';\r\n// import './interfaces/IDemaxConfig.sol';\r\n\r\ncontract DemaxFactory {\r\n    uint public version = 1;\r\n    address public DGAS;\r\n    address public CONFIG;\r\n    address public PLATFORM;\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    mapping(address => bool) public isPair;\r\n    address[] public allPairs;\r\n\r\n    mapping(address => address[]) public playerPairs;\r\n    mapping(address => mapping(address => bool)) isAddPlayerPair;\r\n\r\n    bytes32 public contractCodeHash;\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    constructor(\r\n        address _DGAS,\r\n        address _CONFIG,\r\n        address _PLATFORM\r\n    ) public {\r\n        DGAS = _DGAS;\r\n        CONFIG = _CONFIG;\r\n        PLATFORM = _PLATFORM;\r\n    }\r\n\r\n    function getPlayerPairCount(address player) external view returns (uint256) {\r\n        address[] storage existAddress = playerPairs[player];\r\n        if (existAddress.length == 0) return 0;\r\n        return existAddress.length;\r\n    }\r\n\r\n    function addPlayerPair(address _player, address _pair) external returns (bool) {\r\n        require(msg.sender == PLATFORM, 'DEMAX FACTORY: PERMISSION');\r\n        if (isAddPlayerPair[_player][_pair] == false) {\r\n            isAddPlayerPair[_player][_pair] = true;\r\n            playerPairs[_player].push(_pair);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allPairsLength() external view returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        require(tokenA != tokenB, 'DEMAX FACTORY: IDENTICAL_ADDRESSES');\r\n        require(\r\n            IDemaxConfig(CONFIG).checkToken(tokenA) && IDemaxConfig(CONFIG).checkToken(tokenB),\r\n            'DEMAX FACTORY: NOT LIST'\r\n        );\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'DEMAX FACTORY: ZERO_ADDRESS');\r\n        require(getPair[token0][token1] == address(0), 'DEMAX FACTORY: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(DemaxPair).creationCode;\r\n        if (uint256(contractCodeHash) == 0) {\r\n            contractCodeHash = keccak256(bytecode);\r\n        }\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        isPair[pair] = true;\r\n        DemaxPair(pair).initialize(token0, token1, PLATFORM, DGAS);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DGAS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CONFIG\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PLATFORM\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DGAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPlayerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DemaxFactory","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eabbdadb62ace537946f8e2cd6cb50d5ef034a8a000000000000000000000000fa47913d1cb14779d6d7d4b3a9f050f014ef5d1600000000000000000000000056e96d4ec3af03f1e92b744fd933c50978214943","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4709a4145325ff7d34ad5d4e77ff83d67fdaa94c1a5d750bacbd5842a112ccfa"}]}