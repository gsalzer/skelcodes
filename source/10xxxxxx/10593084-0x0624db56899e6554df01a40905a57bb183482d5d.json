{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  function totalSupply() pure public returns (uint256 supply);\r\n  function balanceOf(address _owner) pure public returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) pure public returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Lottery is Ownable {\r\n\r\n  address public tokenAddress;\r\n  Token public token;\r\n  uint256 public lotteryTicketValue;\r\n  uint public peopleToStart;\r\n\r\n  address[] public players;\r\n  address[] public lastWinners;\r\n\r\n  uint public charity;\r\n  uint public winnerPerson;\r\n  \r\n  constructor() public{\r\n    tokenAddress = 0x2F792C29e0aAC4759aCAdf485781E914A7f51bfa;\r\n    token = Token(tokenAddress); \r\n    lotteryTicketValue = 1e22;\r\n    peopleToStart = 30;\r\n    charity = 10;\r\n    winnerPerson = 85;\r\n  } \r\n  \r\n  function allInfoFor() public view returns (uint256 chrityShareInfo, uint256 winnerShareInfo, uint256 tokensToWin, uint howManyPlayers, uint256 howManyWinners, uint peopleToStartLottery, uint256 lotteryTicketValueInfo,  address[] allLastWinners) {\r\n\t\treturn (charity, winnerPerson, token.balanceOf(address(this)), players.length, lastWinners.length, peopleToStart, lotteryTicketValue, lastWinners);\r\n }\r\n \r\n  function winnerPrice(uint _charity, uint _winnerPerson) public onlyOwner{\r\n    charity = _charity;\r\n    winnerPerson = _winnerPerson;\r\n  } \r\n  \r\n  function setPeopleToStart(uint _peopleToStart) public onlyOwner{\r\n    peopleToStart = _peopleToStart;\r\n  } \r\n\r\n  function setlotteryTicketValue(uint256 _lotteryTicketValue) public onlyOwner{\r\n    lotteryTicketValue = _lotteryTicketValue;\r\n  } \r\n\r\n  function randomizer() private view returns (uint) {\r\n        return uint(keccak256(encodeData()));\r\n    }\r\n\r\n  function encodeData() private view returns (bytes memory) {\r\n      return abi.encodePacked(block.difficulty, now, players);\r\n  }\r\n  \r\n\t\r\n  function joinLottery() external payable {\r\n    uint256 playerBalance = token.balanceOf(msg.sender);\r\n   \r\n    require(playerBalance >= lotteryTicketValue, \"Insufficient tokens\");\r\n    \r\n    token.transferFrom(msg.sender, address(this), lotteryTicketValue);\r\n    \r\n    players.push(msg.sender);\r\n  }\r\n  \r\n  function chooseWinner() external payable{\r\n    require(players.length >= peopleToStart, \"There are not enough participants\");\r\n\r\n    uint256 winnerIndex = randomizer() % players.length;\r\n\r\n    address winner = players[winnerIndex];\r\n    uint256 liquidityBalance = token.balanceOf(address(this));\r\n    uint256 amountToTake = (winnerPerson * liquidityBalance / 100); \r\n    uint256 charityTaxes = (charity * liquidityBalance / 100); \r\n\r\n    token.transfer(winner, amountToTake);\r\n    token.transfer(owner(), charityTaxes);  \r\n\r\n    lastWinners.push(winner);\r\n    players = new address[](0);  \r\n  }\r\n\r\n  function () external payable {\r\n      revert(\"Don't accept ETH\");\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_charity\",\"type\":\"uint256\"},{\"name\":\"_winnerPerson\",\"type\":\"uint256\"}],\"name\":\"winnerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allInfoFor\",\"outputs\":[{\"name\":\"chrityShareInfo\",\"type\":\"uint256\"},{\"name\":\"winnerShareInfo\",\"type\":\"uint256\"},{\"name\":\"tokensToWin\",\"type\":\"uint256\"},{\"name\":\"howManyPlayers\",\"type\":\"uint256\"},{\"name\":\"howManyWinners\",\"type\":\"uint256\"},{\"name\":\"peopleToStartLottery\",\"type\":\"uint256\"},{\"name\":\"lotteryTicketValueInfo\",\"type\":\"uint256\"},{\"name\":\"allLastWinners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peopleToStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinLottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lotteryTicketValue\",\"type\":\"uint256\"}],\"name\":\"setlotteryTicketValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryTicketValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peopleToStart\",\"type\":\"uint256\"}],\"name\":\"setPeopleToStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"chooseWinner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://62a522139f1198f8811886529247c9d3d99e3b894e2b17bc776dccd93c736146"}]}