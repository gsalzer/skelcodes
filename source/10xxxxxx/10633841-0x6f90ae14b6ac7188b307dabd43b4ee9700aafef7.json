{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: Addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: Subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: Multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when divide by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: Modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function transfer(address _to, uint256 _value) external returns(bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ThinkBlockLearning is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    // Token Variables\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 private tokenSupply;\r\n    uint256 public burnedTokens;\r\n    address public tokenBurnAddress;\r\n    address public tokenReceivingAddress;\r\n    address payable public ownerAddress;\r\n    uint256 public ethToToken;\r\n    uint256 public bronzePack;\r\n    uint256 public silverPack;\r\n    uint256 public goldPack;\r\n    uint256 public platinumPack;\r\n    uint256 public diamondPack;\r\n    bool public pauseBuy;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // User Variables & Struct\r\n    uint256 public userCount;\r\n    uint256 public tokenToTime;\r\n\r\n    struct Users_Details {\r\n        bool isExist;\r\n        uint256 register_on;\r\n        uint256 access_expiry;\r\n    }\r\n    mapping (address => Users_Details) public users;\r\n    \r\n    mapping(address => bool) public authorized;\r\n    address[] public allAuthorized;\r\n\r\n    modifier onlyAuth() {\r\n        require(authorized[msg.sender] == true, \"Sender must be authorized.\");\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Default Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor (address _tokenBurnAddress, address _tokenReceivingAddress) public {\r\n        name = 'ThinkBlock Learning';\r\n        symbol = 'TBL';\r\n        decimals = 18;\r\n        tokenBurnAddress = _tokenBurnAddress;\r\n        tokenReceivingAddress = _tokenReceivingAddress;\r\n        ownerAddress = msg.sender;\r\n        tokenToTime = 60;\r\n        ethToToken = 0.0001 ether;\r\n        bronzePack = 1 ether;\r\n        silverPack = 1.03 ether;\r\n        goldPack = 1.05 ether;\r\n        platinumPack = 1.09 ether;\r\n        diamondPack = 1.12 ether;\r\n        pauseBuy = false;\r\n        \r\n        userCount = 0;\r\n        \r\n        authorized[msg.sender] = true;\r\n        allAuthorized.push(msg.sender);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner only access modifier\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Owner address only\");\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow user to subscribe/extend access expiry through contract\r\n    // ------------------------------------------------------------------------\r\n    function subscribeViaToken(uint256 _value) public  returns (bool) {\r\n\r\n        uint256 sentValue = _value.mul(1 ether);\r\n        require(sentValue <= balances[msg.sender], \"Insufficient balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(sentValue);\r\n        balances[tokenReceivingAddress] = balances[tokenReceivingAddress].add(sentValue);\r\n        emit Transfer(msg.sender, tokenReceivingAddress, sentValue);\r\n        // To add new user or extend access expiry\r\n        checkAndRegisterUser (msg.sender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to another account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_value <= balances[msg.sender], \"Insufficient balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        // To add new user or extend access expiry\r\n        if (_to == tokenReceivingAddress) {\r\n            balances[tokenReceivingAddress] = balances[tokenReceivingAddress].add(_value);\r\n            emit Transfer(msg.sender, tokenReceivingAddress, _value);\r\n            // To add new user or extend access expiry\r\n            checkAndRegisterUser (msg.sender, _value.div(10**18));\r\n        }\r\n        else {\r\n            uint256 burnFee = (_value.mul(1 ether)).div(10**20);\r\n            uint256 balanceFee = _value.sub(burnFee);\r\n            balances[tokenBurnAddress] = balances[tokenBurnAddress].add(burnFee);\r\n            balances[_to] = balances[_to].add(balanceFee);\r\n            burnedTokens = burnedTokens.add(burnFee);\r\n\r\n            emit Transfer(msg.sender, _to, balanceFee);\r\n            emit Transfer(msg.sender, tokenBurnAddress, burnFee);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from one account to another account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0), \"Invalid from address\");\r\n        require(_to != address(0), \"Invalid to address\");\r\n        require(_value <= balances[_from], \"Invalid balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"Invalid allowance\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        uint256 burnFee = (_value.mul(1 ether)).div(10**20);\r\n        uint256 balanceFee = _value.sub(burnFee);\r\n        balances[tokenBurnAddress] = balances[tokenBurnAddress].add(burnFee);\r\n        balances[msg.sender] = balances[msg.sender].add(balanceFee);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        burnedTokens = burnedTokens.add(burnFee);\r\n        \r\n        emit Transfer(_from, _to, balanceFee);\r\n        emit Transfer(_from, tokenBurnAddress, burnFee);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0), \"Null address\");\r\n        require(_value > 0, \"Invalid value\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Mint new tokens\r\n    // ------------------------------------------------------------------------\r\n    function mintTokens (address _receiver, uint256 _amount) public onlyAuth returns (bool) {\r\n        require(_receiver != address(0), \"Invalid address\");\r\n        require(_amount.mul(10**18) >= 0, \"Invalid amount\");\r\n        tokenSupply = tokenSupply.add(_amount.mul(10**18));\r\n        balances[_receiver] = balances[_receiver].add(_amount.mul(10**18));\r\n        emit Transfer(address(0), _receiver, _amount.mul(10**18));\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Bulk buy tokens via ETH\r\n    // ------------------------------------------------------------------------\r\n    function buyTokens () public payable returns (bool) {\r\n        require(pauseBuy == false,'Token buy currently unavailable.');\r\n        require(msg.sender != address(0), \"Invalid address\");\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        uint256 tokensToBuy;\r\n        if (msg.value < 1 ether) {\r\n            tokensToBuy = msg.value.mul(bronzePack).div(ethToToken);\r\n        }\r\n        else if (msg.value > 1 ether && msg.value <= 5 ether) {\r\n            tokensToBuy = msg.value.mul(silverPack).div(ethToToken);\r\n        }\r\n        else if (msg.value > 5 ether && msg.value <= 15 ether) {\r\n            tokensToBuy = msg.value.mul(goldPack).div(ethToToken);\r\n        }\r\n        else if (msg.value > 15 ether && msg.value <= 30 ether) {\r\n            tokensToBuy = msg.value.mul(platinumPack).div(ethToToken);\r\n        }\r\n        else {\r\n            tokensToBuy = msg.value.mul(diamondPack).div(ethToToken);\r\n        }\r\n\r\n        tokenSupply = tokenSupply.add(tokensToBuy);\r\n        balances[msg.sender] = balances[msg.sender].add(tokensToBuy);\r\n        ownerAddress.transfer(msg.value);\r\n        emit Transfer(address(0), msg.sender, tokensToBuy);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Register a new user\r\n    // ------------------------------------------------------------------------\r\n    function checkAndRegisterUser (address _account, uint256 _amount) private {\r\n        require(_amount > 0, 'Amount can not be zero');\r\n        if (!users[_account].isExist) {\r\n            //Create temp instance of User struct\r\n            Users_Details memory user;\r\n            user.register_on = now;\r\n            user.access_expiry = now + (_amount * tokenToTime);\r\n            user.isExist = true;\r\n            users[_account] = user;\r\n            userCount += 1;\r\n        }\r\n        else {\r\n            // Extend access expiry\r\n            extendUserAccess(_account, _amount);\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Check user access expiry\r\n    // ------------------------------------------------------------------------\r\n    function getUserAccessExpiry (address _account) public view returns(uint256) {\r\n        //require(users[_account].isExist,'User does not exists');\r\n        if (users[_account].isExist) {\r\n            // Create temp instance of User struct\r\n            Users_Details memory user;\r\n            user = users[_account];\r\n            return user.access_expiry;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Extend user access expiry\r\n    // ------------------------------------------------------------------------\r\n    function extendUserAccess (address _account, uint256 _amount) private {\r\n        require(users[_account].isExist,'User does not exists');\r\n        // Create temp instance of User struct\r\n        Users_Details memory user;\r\n        uint256 currentExpiry = users[_account].access_expiry;\r\n        uint256 extendedExpiry;\r\n        if (currentExpiry > now) {\r\n            extendedExpiry = currentExpiry + (_amount * tokenToTime);\r\n        }\r\n        else {\r\n            extendedExpiry = now + (_amount * tokenToTime);\r\n        }\r\n        user.isExist = true;\r\n        user.register_on = users[_account].register_on;\r\n        user.access_expiry = extendedExpiry;\r\n        users[_account] = user;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // To change contract owner\r\n    // ------------------------------------------------------------------------\r\n    function changeOwner(address payable _newOwnerAddress) public onlyOwner returns (bool) {\r\n        require(_newOwnerAddress != address(0), \"Invalid Address\");\r\n        ownerAddress = _newOwnerAddress;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Resume/Pause Token Buy\r\n    // ------------------------------------------------------------------------\r\n    function startStopBuy (bool _status) public onlyOwner returns (bool) {\r\n        pauseBuy = _status;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // To change token receiving address\r\n    // ------------------------------------------------------------------------\r\n    function changeTokenRecAdd(address payable _tokenReceivingAddress) public onlyOwner returns (bool) {\r\n        require(_tokenReceivingAddress != address(0), \"Invalid Address\");\r\n        tokenReceivingAddress = _tokenReceivingAddress;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // To change token burn address \r\n    // ------------------------------------------------------------------------\r\n    function changeBurnAddress (address _tokenBurnAddress) public onlyOwner returns (bool) {\r\n        require(_tokenBurnAddress != address(0), \"Invalid Address\");\r\n        tokenBurnAddress = _tokenBurnAddress;\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Change ETH to VLT Rates\r\n    // ------------------------------------------------------------------------\r\n    function changePackRates (uint256 _bronzePack, uint256 _silverPack, uint256 _goldPack, uint256 _platinumPack, uint256 _diamondPack) public onlyOwner returns (bool) {\r\n        require(_bronzePack > 0, 'Invalid bronze pack rate');\r\n        require(_silverPack > 0, 'Invalid silver pack rate');\r\n        require(_goldPack > 0, 'Invalid gold pack rate');\r\n        require(_platinumPack > 0, 'Invalid platinum pack rate');\r\n        require(_diamondPack > 0, 'Invalid diamond pack rate');\r\n\r\n        bronzePack = _bronzePack;\r\n        silverPack = _silverPack;\r\n        goldPack = _goldPack;\r\n        platinumPack = _platinumPack;\r\n        diamondPack = _diamondPack;\r\n        return true;\r\n    }\r\n\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change Token to Sec \r\n    // ------------------------------------------------------------------------\r\n    function changeTokenToTime(uint256 _tokenToTime) public onlyOwner returns (bool) {\r\n        tokenToTime = _tokenToTime;\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change ETH to Token \r\n    // ------------------------------------------------------------------------\r\n    function changeEthToToken(uint256 _ethToToken) public onlyOwner returns (bool) {\r\n        ethToToken = _ethToToken;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // FailSafe function\r\n    // ------------------------------------------------------------------------\r\n    function failSafe() public onlyOwner {\r\n        ownerAddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change Authorized address\r\n    // ------------------------------------------------------------------------\r\n    function changeAuth(address _newowner, bool status) onlyOwner public  {\r\n       authorized[_newowner] = status;\r\n       if(status == true)\r\n       allAuthorized.push(_newowner);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get Authorized address\r\n    // ------------------------------------------------------------------------\r\n    function getAuth() public view returns(address[] memory)  {\r\n       return allAuthorized;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    //Fallback function\r\n    // ------------------------------------------------------------------------\r\n    function () payable external {\r\n        buyTokens();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBurnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenReceivingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAuthorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bronzePack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newowner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBurnAddress\",\"type\":\"address\"}],\"name\":\"changeBurnAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToToken\",\"type\":\"uint256\"}],\"name\":\"changeEthToToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bronzePack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_silverPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goldPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platinumPack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_diamondPack\",\"type\":\"uint256\"}],\"name\":\"changePackRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenReceivingAddress\",\"type\":\"address\"}],\"name\":\"changeTokenRecAdd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenToTime\",\"type\":\"uint256\"}],\"name\":\"changeTokenToTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"diamondPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"failSafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuth\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserAccessExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platinumPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silverPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"startStopBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subscribeViaToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReceivingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenToTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"register_on\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"access_expiry\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ThinkBlockLearning","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dc9a7427c4b379c912ac608c333e029442beb2020000000000000000000000009c0b433445863c87bfbb9c1d1d299b33955408b5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2cdc47688f3fb7195e4efd6ad5acd9deb346bb9de86ec6dc161f1bbf9927269b"}]}