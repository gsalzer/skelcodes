{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/interface/IERC20.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interface/IWasabi.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IWasabi {\r\n    function getOffer(address  _lpToken,  uint index) external view returns (address offer);\r\n    function getOfferLength(address _lpToken) external view returns (uint length);\r\n    function pool(address _token) external view returns (uint);\r\n    function increaseProductivity(uint amount) external;\r\n    function decreaseProductivity(uint amount) external;\r\n    function tokenAddress() external view returns(address);\r\n    function addTakerOffer(address _offer, address _user) external returns (uint);\r\n    function getUserOffer(address _user, uint _index) external view returns (address);\r\n    function getUserOffersLength(address _user) external view returns (uint length);\r\n    function getTakerOffer(address _user, uint _index) external view returns (address);\r\n    function getTakerOffersLength(address _user) external view returns (uint length);\r\n    function offerStatus() external view returns(uint amountIn, address masterChef, uint sushiPid);\r\n    function cancel(address _from, address _sushi) external ;\r\n    function take(address taker,uint amountWasabi) external;\r\n    function payback(address _from) external;\r\n    function close(address _from, uint8 _state, address _sushi) external  returns (address tokenToOwner, address tokenToTaker, uint amountToOwner, uint amountToTaker);\r\n    function upgradeGovernance(address _newGovernor) external;\r\n    function acceptToken() external view returns(address);\r\n    function rewardAddress() external view returns(address);\r\n    function getTokensLength() external view returns (uint);\r\n    function tokens(uint _index) external view returns(address);\r\n    function offers(address _offer) external view returns(address tokenIn, address tokenOut, uint amountIn, uint amountOut, uint expire, uint interests, uint duration);\r\n    function getRateForOffer(address _offer) external view returns (uint offerFeeRate, uint offerInterestrate);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interface/IWasabiOffer.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IWasabiOffer {\r\n    function tokenIn() external view returns (address);\r\n    function tokenOut() external view returns (address);\r\n    function amountIn() external view returns (uint);\r\n    function amountOut() external view returns (uint);\r\n    function expire() external view returns (uint);\r\n    function interests() external view returns (uint);\r\n    function duration() external view returns (uint);\r\n    function owner() external view returns (address);\r\n    function taker() external view returns (address);\r\n    function state() external view returns (uint);\r\n    function pool() external view returns (address);\r\n    function getEstimatedWasabi() external view returns(uint amount);\r\n    function getEstimatedSushi() external view returns(uint amount);\r\n}\r\n\r\n\r\n// Root file: contracts/WasabiQuery.sol\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity >=0.6.6;\r\n\r\n// import 'contracts/interface/IERC20.sol';\r\n// import 'contracts/interface/IWasabi.sol';\r\n// import 'contracts/interface/IWasabiOffer.sol';\r\n\r\ncontract WasabiQuery {\r\n    address public wasabi;\r\n    address public owner;\r\n    enum OfferState { Created, Opened, Taken, Paidback, Expired, Closed }\r\n\r\n    struct OfferData {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint amountIn;\r\n        uint amountOut;\r\n        uint expire;\r\n        uint interests;\r\n        uint duration;\r\n        uint state;\r\n        uint feeRate;\r\n        uint interestrate;\r\n        uint wasabiReward;\r\n        uint sushiReward;\r\n        address owner;\r\n        address taker;\r\n    }\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    constructor(address _wasabi) public {\r\n        owner = msg.sender;\r\n        wasabi = _wasabi;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeWasabi(address _wasabi) public onlyOwner {\r\n        wasabi = _wasabi;\r\n    }\r\n\r\n    function iterateOffers(address _token, uint _start, uint _end) public view returns (address[] memory) {\r\n        if (_start > _end) return iterateReverseOffers(_token, _start, _end);\r\n\r\n        uint count = IWasabi(wasabi).getOfferLength(_token);\r\n        if (_end >= count) _end = count;\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_end-_start);\r\n        uint index = 0;\r\n        for (uint i = _start; i < _end; i++) {\r\n            res[index] = IWasabi(wasabi).getOffer(_token, i);\r\n            index++;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateReverseOffers(address _token, uint _start, uint _end) public view returns (address[] memory) {\r\n        uint count = IWasabi(wasabi).getOfferLength(_token);\r\n        if (_start >= count) _start = count;\r\n        require(_end <= _start && _end >= 0 && _start >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_start-_end);\r\n        if (_end == _start) return res;\r\n        uint index = 0;\r\n        uint len = 0;\r\n        for (uint i = _start-1; i >= _end; i--) {\r\n            res[index] = IWasabi(wasabi).getOffer(_token, i);\r\n            index++;\r\n            len++;\r\n            if (len>=_start - _end) break;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateUserOffers(uint _start, uint _end) public view returns (address[] memory) {\r\n        if (_start > _end) return iterateReverseUserOffers(_start, _end);\r\n\r\n        uint count = IWasabi(wasabi).getUserOffersLength(msg.sender);\r\n        if (_end >= count) _end = count;\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_end-_start);\r\n        uint index = 0;\r\n        for (uint i = _start; i < _end; i++) {\r\n            res[index] = IWasabi(wasabi).getUserOffer(msg.sender, i);\r\n            index++;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateReverseUserOffers(uint _start, uint _end) public view returns (address[] memory) {\r\n        uint count = IWasabi(wasabi).getUserOffersLength(msg.sender);\r\n        if (_start >= count) _start = count;\r\n        require(_end <= _start && _end >= 0 && _start >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_start-_end);\r\n        if (_end == _start) return res;\r\n        uint index = 0;\r\n        uint len = 0;\r\n        for (uint i = _start-1; i >= _end; i--) {\r\n            res[index] = IWasabi(wasabi).getUserOffer(msg.sender, i);\r\n            index++;\r\n            len++;\r\n            if (len>=_start - _end) break;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateTakerOffers(uint _start, uint _end) public view returns (address[] memory) {\r\n        if (_start > _end) return iterateReverseTakerOffers(_start, _end);\r\n\r\n        uint count = IWasabi(wasabi).getTakerOffersLength(msg.sender);\r\n        if (_end >= count) _end = count;\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](count);\r\n        uint index = 0;\r\n        for (uint i = _start; i < _end; i++) {\r\n            res[index] = IWasabi(wasabi).getTakerOffer(msg.sender, i);\r\n            index++;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateReverseTakerOffers(uint _start, uint _end) public view returns (address[] memory) {\r\n        uint count = IWasabi(wasabi).getTakerOffersLength(msg.sender);\r\n        if (_start >= count) _start = count;\r\n        require(_end <= _start && _end >= 0 && _start >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_start-_end);\r\n        if (_end == _start) return res;\r\n        uint index = 0;\r\n        uint len = 0;\r\n        for (uint i = _start-1; i >= _end; i--) {\r\n            res[index] = IWasabi(wasabi).getTakerOffer(msg.sender, i);\r\n            index++;\r\n            len++;\r\n            if (len>=_start - _end) break;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getOfferInfo(address _offer) external view returns (OfferData memory offer) {\r\n        (\r\n            offer.tokenIn,\r\n            offer.tokenOut,\r\n            offer.amountIn,\r\n            offer.amountOut,\r\n            offer.expire,\r\n            offer.interests,\r\n            offer.duration\r\n        ) = IWasabi(wasabi).offers(_offer);\r\n\r\n        (offer.feeRate, offer.interestrate) = IWasabi(wasabi).getRateForOffer(_offer);\r\n        offer.state = IWasabiOffer(_offer).state();\r\n        if (offer.state == uint(OfferState.Taken) && block.number >= offer.expire) {\r\n            offer.state = uint(OfferState.Expired);\r\n        }\r\n        offer.owner = IWasabiOffer(_offer).owner();\r\n        offer.taker = IWasabiOffer(_offer).taker();\r\n\r\n        offer.wasabiReward = IWasabiOffer(_offer).getEstimatedWasabi();\r\n        offer.sushiReward = IWasabiOffer(_offer).getEstimatedSushi();\r\n    }\r\n\r\n    function iterateTokens(uint _start, uint _end) external view returns (address[] memory) {\r\n        uint count = IWasabi(wasabi).getTokensLength();\r\n        if (_end >= count) _end = count;\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        address[] memory res = new address[](_end-_start);\r\n        uint index = 0;\r\n        for (uint i = _start; i < _end; i++) {\r\n            res[index] = IWasabi(wasabi).tokens(i);\r\n            index++;\r\n        }\r\n        return res;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wasabi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wasabi\",\"type\":\"address\"}],\"name\":\"changeWasabi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offer\",\"type\":\"address\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wasabiReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"internalType\":\"struct WasabiQuery.OfferData\",\"name\":\"offer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateReverseOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateReverseTakerOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateReverseUserOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateTakerOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateUserOffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasabi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WasabiQuery","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000976d1d061f282a672782ce913023e277a8652674","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d560a9abc73261932e7d8e8800ac555cd565ab4970e4a065b7b5f2867e40249d"}]}