{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with buidler v1.4.3 https://buidler.dev\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Pausable.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/introspection/IERC165.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/introspection/ERC165.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155TokenReceiver.sol@v5.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC-1155 Multi Token Standard, token receiver\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\r\n * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n     * This function MUST revert if it rejects the transfer.\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param id        The ID of the token being transferred\r\n     * @param value     The amount of tokens being transferred\r\n     * @param data      Additional data with no specified format\r\n     * @return bytes4   `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n     * This function MUST revert if it rejects the transfer(s).\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n     * @param data      Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/ERC1155TokenReceiver.sol@v5.0.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, ERC165 {\r\n\r\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\r\n\r\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\r\n\r\n    bytes4 internal constant _ERC1155_REJECTED = 0xffffffff;\r\n\r\n    constructor() internal {\r\n        _registerInterface(type(IERC1155TokenReceiver).interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/f1dt-ethereum-contracts/contracts/token/ERC1155721/NFTRepairCentre.sol@v0.4.0\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title NFTRepairCentre\r\n * This contract is used to manage F1 Delta Time defective tokens. Defective tokens are NFTs which were created with an incorrect id.\r\n * As the core metadata attributes are encoded in the token id, tokens with an incorrect id may not be usable some in ecosystem contracts.\r\n *\r\n * This contract has two missions:\r\n * - Publish a public list of defective tokens (through `repairList`) that ecosystem contracts relying on core metadata attributes can consult as a blacklist,\r\n * - Let the owners of the defective tokens swap them for replacement tokens. Defective tokens are sent to the `tokensGraveyard` when replaced.\r\n *\r\n * The owners of defective tokens who want to use them in these ecosystem contracts will have to repair them first,\r\n * but will be compensated for their trouble with `revvCompensation` REVVs for each repaired token.\r\n */\r\ncontract NFTRepairCentre is ERC1155TokenReceiver, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event TokensToRepairAdded(uint256[] defectiveTokens, uint256[] replacementTokens);\r\n    event RepairedSingle(uint256 defectiveToken, uint256 replacementToken);\r\n    event RepairedBatch(uint256[] defectiveTokens, uint256[] replacementTokens);\r\n\r\n    IDeltaTimeInventory inventoryContract;\r\n    address tokensGraveyard;\r\n    IREVV revvContract;\r\n    uint256 revvCompensation;\r\n\r\n    mapping(uint256 => uint256) repairList;\r\n\r\n    /**\r\n     * Constructor.\r\n     * @dev Reverts if one of the argument addresses is zero.\r\n     * @param inventoryContract_ the address of the DeltaTimeInventoryContract.\r\n     * @param tokensGraveyard_ the address of the tokens graveyard.\r\n     * @param revvContract_ the address of the REVV contract.\r\n     * @param revvCompensation_ the amount of REVV to compensate for each token replacement.\r\n     */\r\n    constructor(\r\n        address inventoryContract_,\r\n        address tokensGraveyard_,\r\n        address revvContract_,\r\n        uint256 revvCompensation_\r\n    ) public {\r\n        require(\r\n            inventoryContract_ != address(0) && tokensGraveyard_ != address(0) && revvContract_ != address(0),\r\n            \"RepairCentre: zero address\"\r\n        );\r\n        inventoryContract = IDeltaTimeInventory(inventoryContract_);\r\n        tokensGraveyard = tokensGraveyard_;\r\n        revvContract = IREVV(revvContract_);\r\n        revvCompensation = revvCompensation_;\r\n    }\r\n\r\n    /*                                             Public Admin Functions                                             */\r\n\r\n    /**\r\n     * @notice Adds tokens to the repair list and transfers the necessary amount of REVV for the compensations to the contract.\r\n     * @dev Reverts if not called by the owner.\r\n     * @dev Reverts if `defectiveTokens` and `replacementTokens` have inconsistent lengths.\r\n     * @dev Reverts if the REVV transfer fails.\r\n     * @dev Emits a TokensToRepairAdded event.\r\n     * @param defectiveTokens the list of defective tokens.\r\n     * @param replacementTokens the list of replacement tokens.\r\n     */\r\n    function addTokensToRepair(uint256[] calldata defectiveTokens, uint256[] calldata replacementTokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 length = defectiveTokens.length;\r\n        require(length != 0 && length == replacementTokens.length, \"RepairCentre: wrong lengths\");\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            repairList[defectiveTokens[i]] = replacementTokens[i];\r\n        }\r\n        revvContract.transferFrom(msg.sender, address(this), revvCompensation.mul(length));\r\n        emit TokensToRepairAdded(defectiveTokens, replacementTokens);\r\n    }\r\n\r\n    /**\r\n     * Removes this contract as minter for the inventory contract\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     */\r\n    function renounceMinter() external onlyOwner {\r\n        inventoryContract.renounceMinter();\r\n    }\r\n\r\n    /**\r\n     * Pauses the repair operations.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if the contract is paused already.\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Unpauses the repair operations.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if the contract is not paused.\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /*                                             ERC1155TokenReceiver                                             */\r\n\r\n    /**\r\n     * @notice ERC1155 single transfer receiver which repairs a single token and removes it from the repair list.\r\n     * @dev This contract must have been given a minter role for the inventory prior to caslling this function.\r\n     * @dev Reverts if the transfer was not operated through `inventoryContract`.\r\n     * @dev Reverts if `id` is not in the repair list.\r\n     * @dev Reverts if the defective token transfer to the graveyard fails.\r\n     * @dev Reverts if the replacement token minting to the owner fails.\r\n     * @dev Reverts if the REVV compensation transfer fails.\r\n     * @dev Emits an ERC1155 TransferSingle event for the defective token transfer to the graveyard.\r\n     * @dev Emits an ERC1155 TransferSingle event for the replacement token minting to the owner.\r\n     * @dev Emits an ERC20 Transfer event for the REVV compensation transfer.\r\n     * @dev Emits a RepairedSingle event.\r\n     * @param /operator the address which initiated the transfer (i.e. msg.sender).\r\n     * @param from the address which previously owned the token.\r\n     * @param defectiveToken the id of the token to repair.\r\n     * @param /value the amount of tokens being transferred.\r\n     * @param /data additional data with no specified format.\r\n     * @return bytes4 `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(\r\n        address, /*operator*/\r\n        address from,\r\n        uint256 defectiveToken,\r\n        uint256, /*value*/\r\n        bytes calldata /*data*/\r\n    ) external virtual override whenNotPaused returns (bytes4) {\r\n        require(msg.sender == address(inventoryContract), \"RepairCentre: wrong inventory\");\r\n\r\n        uint256 replacementToken = repairList[defectiveToken];\r\n        require(replacementToken != 0, \"RepairCentre: token not defective\");\r\n        delete repairList[defectiveToken];\r\n\r\n        inventoryContract.safeTransferFrom(address(this), tokensGraveyard, defectiveToken, 1, bytes(\"\"));\r\n\r\n        try inventoryContract.mintNonFungible(from, replacementToken, bytes32(\"\"), true)  {} catch {\r\n            inventoryContract.mintNonFungible(from, replacementToken, bytes32(\"\"), false);\r\n        }\r\n        revvContract.transfer(from, revvCompensation);\r\n\r\n        emit RepairedSingle(defectiveToken, replacementToken);\r\n\r\n        return _ERC1155_RECEIVED;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC1155 batch transfer receiver which repairs a batch of tokens and removes them from the repair list.\r\n     * @dev This contract must have been given a minter role for the inventory prior to caslling this function.\r\n     * @dev Reverts if `ids` is an empty array.\r\n     * @dev Reverts if the transfer was not operated through `inventoryContract`.\r\n     * @dev Reverts if `ids` contains an id not in the repair list.\r\n     * @dev Reverts if the defective tokens transfer to the graveyard fails.\r\n     * @dev Reverts if the replacement tokens minting to the owner fails.\r\n     * @dev Reverts if the REVV compensation transfer fails.\r\n     * @dev Emits an ERC1155 TransferBatch event for the defective tokens transfer to the graveyard.\r\n     * @dev Emits an ERC1155 TransferBatch event for the replacement tokens minting to the owner.\r\n     * @dev Emits an ERC20 Transfer event for the REVV compensation transfer.\r\n     * @dev Emits a RepairedBatch event.\r\n     * @param /operator the address which initiated the batch transfer (i.e. msg.sender).\r\n     * @param from the address which previously owned the token.\r\n     * @param defectiveTokens an array containing the ids of the defective tokens to repair.\r\n     * @param values an array containing amounts of each token being transferred (order and length must match _ids array).\r\n     * @param /data additional data with no specified format.\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address, /*operator*/\r\n        address from,\r\n        uint256[] calldata defectiveTokens,\r\n        uint256[] calldata values,\r\n        bytes calldata /*data*/\r\n    ) external virtual override whenNotPaused returns (bytes4) {\r\n        require(msg.sender == address(inventoryContract), \"RepairCentre: wrong inventory\");\r\n\r\n        uint256 length = defectiveTokens.length;\r\n        require(length != 0, \"RepairCentre: empty array\");\r\n\r\n        address[] memory recipients = new address[](length);\r\n        uint256[] memory replacementTokens = new uint256[](length);\r\n        bytes32[] memory uris = new bytes32[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 defectiveToken = defectiveTokens[i];\r\n            uint256 replacementToken = repairList[defectiveToken];\r\n            require(replacementToken != 0, \"RepairCentre: token not defective\");\r\n            delete repairList[defectiveToken];\r\n            recipients[i] = from;\r\n            replacementTokens[i] = replacementToken;\r\n        }\r\n\r\n        inventoryContract.safeBatchTransferFrom(address(this), tokensGraveyard, defectiveTokens, values, bytes(\"\"));\r\n\r\n        try inventoryContract.batchMint(recipients, replacementTokens, uris, values, true)  {} catch {\r\n            inventoryContract.batchMint(recipients, replacementTokens, uris, values, false);\r\n        }\r\n\r\n        revvContract.transfer(from, revvCompensation.mul(length));\r\n\r\n        emit RepairedBatch(defectiveTokens, replacementTokens);\r\n\r\n        return _ERC1155_BATCH_RECEIVED;\r\n    }\r\n\r\n    /*                                             Other Public Functions                                             */\r\n\r\n    /**\r\n     * @notice Verifies whether a list of tokens contains a defective token.\r\n     * This function can be used by contracts having logic based on NFTs core attributes, in which case the repair list is a blacklist.\r\n     * @param tokens an array containing the token ids to verify.\r\n     * @return true if the array contains a defective token, false otherwise.\r\n     */\r\n    function containsDefectiveToken(uint256[] calldata tokens) external view returns(bool) {\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            if (repairList[tokens[i]] != 0) {\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IDeltaTimeInventory {\r\n    /**\r\n     * @notice Transfers `value` amount of an `id` from  `from` to `to`  (with safety call).\r\n     * @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \"Approval\" section of the standard).\r\n     * MUST revert if `to` is the zero address.\r\n     * MUST revert if balance of holder for token `id` is lower than the `value` sent.\r\n     * MUST revert on any other error.\r\n     * MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n     * After the above conditions are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n     * @param from    Source address\r\n     * @param to      Target address\r\n     * @param id      ID of the token type\r\n     * @param value   Transfer amount\r\n     * @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `to`\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified (with safety call).\r\n     * @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \"Approval\" section of the standard).\r\n     * MUST revert if `to` is the zero address.\r\n     * MUST revert if length of `ids` is not the same as length of `values`.\r\n     * MUST revert if any of the balance(s) of the holder(s) for token(s) in `ids` is lower than the respective amount(s) in `values` sent to the recipient.\r\n     * MUST revert on any other error.\r\n     * MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n     * Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n     * After the above conditions for the transfer(s) in the batch are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n     * @param from    Source address\r\n     * @param to      Target address\r\n     * @param ids     IDs of each token type (order and length must match _values array)\r\n     * @param values  Transfer amounts per token type (order and length must match _ids array)\r\n     * @param data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `to`\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Public function to mint a batch of new tokens\r\n     * Reverts if some the given token IDs already exist\r\n     * @param to address[] List of addresses that will own the minted tokens\r\n     * @param ids uint256[] List of ids of the tokens to be minted\r\n     * @param uris bytes32[] Concatenated metadata URIs of nfts to be minted\r\n     * @param values uint256[] List of quantities of ft to be minted\r\n     */\r\n    function batchMint(\r\n        address[] calldata to,\r\n        uint256[] calldata ids,\r\n        bytes32[] calldata uris,\r\n        uint256[] calldata values,\r\n        bool safe\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Public function to mint one non fungible token id\r\n     * Reverts if the given token ID is not non fungible token id\r\n     * @param to address recipient that will own the minted tokens\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param byteUri bytes32 Concatenated metadata URI of nft to be minted\r\n     */\r\n    function mintNonFungible(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes32 byteUri,\r\n        bool safe\r\n    ) external;\r\n\r\n    /**\r\n     * Removes the minter role for the message sender\r\n     */\r\n    function renounceMinter() external;\r\n}\r\n\r\ninterface IREVV {\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inventoryContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokensGraveyard_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revvContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"revvCompensation_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"defectiveTokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"replacementTokens\",\"type\":\"uint256[]\"}],\"name\":\"RepairedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defectiveToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"replacementToken\",\"type\":\"uint256\"}],\"name\":\"RepairedSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"defectiveTokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"replacementTokens\",\"type\":\"uint256[]\"}],\"name\":\"TokensToRepairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"defectiveTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"replacementTokens\",\"type\":\"uint256[]\"}],\"name\":\"addTokensToRepair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"containsDefectiveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"defectiveTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defectiveToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTRepairCentre","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000002af75676692817d85121353f0d6e8e9ae6ad55760000000000000000000000003fe6c8fd6bb02d6f1567fa9530cd08bce18b8032000000000000000000000000557b933a7c2c45672b610f8954a3deb39a51a8ca0000000000000000000000000000000000000000000000056bc75e2d63100000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://df1538ec392757689f7f2e818015f30124572d152eefa652f5aa1937537d502d"}]}