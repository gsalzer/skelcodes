{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC721 {\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ncontract ERC721Checker {\r\n    struct Balance {\r\n        address contractAddress;\r\n        uint[] tokens;\r\n    }\r\n    \r\n    function balance(address owner, address[] calldata contracts) public view returns (Balance[] memory output) {\r\n        uint256 len = contracts.length;\r\n        output = new Balance[](len);\r\n        for(uint256 i = 0; i < len; i++){\r\n            ERC721 token = ERC721(contracts[i]);\r\n            uint256 tokenBalance = token.balanceOf(owner);\r\n            uint256[] memory _tokens = new uint256[](tokenBalance);\r\n            for(uint256 j = 0; j < tokenBalance; j++){\r\n                _tokens[j] = token.tokenOfOwnerByIndex(owner, j);\r\n            }\r\n            \r\n            Balance memory b = Balance({\r\n                contractAddress: contracts[i],\r\n                tokens: _tokens\r\n            });\r\n            \r\n            output[i] = b;    \r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"balance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ERC721Checker.Balance[]\",\"name\":\"output\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC721Checker","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e1b487fbddcaa707fd4ee6c69952d4311410bde39294da7499c5e3e6cffbc459"}]}