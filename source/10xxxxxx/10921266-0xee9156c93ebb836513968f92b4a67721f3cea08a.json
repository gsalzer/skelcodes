{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) internal virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// Stabilize Token Interface\r\ninterface StabilizeToken is IERC20 {\r\n\r\n    /// Controller is the only contract that can mint\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    // Operator has initiated the burn to start\r\n    function initiateBurn(uint256 rate) external returns (bool);\r\n    \r\n    // Owner call\r\n    function owner() external view returns (address);\r\n\r\n}\r\n\r\ninterface StabilizePriceOracle {\r\n    function getPrice(address _address) external returns (uint256);\r\n}\r\n\r\n// File: contracts/Operator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// Operator is the controller of Stabilize Token, it can mint each week and controls the eventual 1% emission\r\n// Operator ownership of the Stabilize Token cannot be changed once set, all controller modifications require a 24 hour timelock\r\n// Aave & Chainlink Price Oracles are used to update price data\r\n// \r\ncontract Operator is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for StabilizeToken;\r\n    using Address for address;\r\n    \r\n    // variables\r\n    uint256 constant duration = 604800; // Each reward period lasts for one week\r\n    uint256 private _periodFinished; // The UTC time that the current reward period ends\r\n    uint256 public protocolStart; // UTC time that the protocol begins to reward tokens\r\n    uint256 public lastOracleTime; // UTC time that oracle was last ran\r\n    uint256 constant minOracleRefresh = 21600; // The minimum amount of time we need to wait before refreshing the oracle prices\r\n    uint256 private targetPrice = 1000000000000000000; // The target price for the stablecoins in USD\r\n    StabilizeToken private StabilizeT; // A reference to the StabilizeToken\r\n    StabilizePriceOracle private oracleContract; // A reference to the price oracle contract\r\n    \r\n    uint256 private _currentWeek = 0; // Week 1 to 52 are bootstrap weeks that have emissions, after week 52, token burns\r\n    uint256 private _weekStart = 0; // This is the time that the current week starts, must be at least duration before starting a new week\r\n    uint256[] private _mintSchedule; // The pre-programmed schedule for minting tokens from contract\r\n    uint256 private weeklyReward; // The reward for the current week, this determines the reward rate\r\n    \r\n    // Reward variables\r\n    uint256 private _maxSupplyFirstYear = 1000000000000000000000000; // Max emission during the first year, max 1,000,000 Stablize Token\r\n    uint256 private _rewardPercentLP = 50000; // This is the percent of rewards reserved for LP pools. Represents 50% of all Stabilize Token rewards \r\n    uint256 constant _rewardPercentDev = 1000; // This percent of rewards going to development team during first year, 1%\r\n    uint256 private _emissionRateLong = 1000; // This is the minting rate after the first year, currently 1% per year\r\n    uint256 private _burnRateLong = 0; // This is the burn per transaction after the first year\r\n    uint256 private _earlyBurnRate = 0; // Optionally, the contract may burn tokens if extra not needed\r\n    uint256 constant divisionFactor = 100000;\r\n    \r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP/Stablecoin tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. The amount of rewards already given to depositer\r\n        uint256 unclaimedReward; // Total reward potential\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 sToken; // Address of LP/Stablecoin token contract.\r\n        uint256 rewardRate; // The rate at which Stabilize Token is earned per second\r\n        uint256 rewardPerTokenStored; // Reward per token stored which should gradually increase with time\r\n        uint256 lastUpdateTime; // Time the pool was last updated\r\n        uint256 totalSupply; // The total amount of LP/Stablecoin in the pool\r\n        bool active; // If active, the pool is earning rewards, otherwise its not\r\n        uint256 poolID; // ID for the pool\r\n        bool lpPool; // LP pools are calculated separate from stablecoin pools\r\n        uint256 price; // Oracle price of token in pool\r\n        uint256 poolWeight; // Weight of pool compared to the total\r\n    }\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] private totalPools;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) private userInfo;\r\n    // List of the active pools IDs\r\n    uint256[] private activePools;\r\n\r\n    // Events\r\n    event RewardAdded(uint256 pid, uint256 reward);\r\n    event Deposited(uint256 pid, address indexed user, uint256 amount);\r\n    event Withdrawn(uint256 pid, address indexed user, uint256 amount);\r\n    event RewardPaid(uint256 pid, address indexed user, uint256 reward);\r\n    event RewardDenied(uint256 pid, address indexed user, uint256 reward);\r\n    event NewWeek(uint256 weekNum, uint256 rewardAmount);\r\n\r\n    constructor(\r\n        StabilizeToken _stabilize,\r\n        StabilizePriceOracle _oracle,\r\n        uint256 startTime\r\n    ) public {\r\n        StabilizeT = _stabilize;\r\n        oracleContract = _oracle;\r\n        protocolStart = startTime;\r\n        setupEmissionSchedule(); // Publicize mint schedule\r\n    }\r\n    \r\n    // Modifiers\r\n    \r\n    modifier updateRewardEarned(uint256 _pid, address account) {\r\n        totalPools[_pid].rewardPerTokenStored = rewardPerToken(_pid);\r\n        totalPools[_pid].lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            userInfo[_pid][account].unclaimedReward = rewardEarned(_pid,account);\r\n            userInfo[_pid][account].rewardDebt = totalPools[_pid].rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Initialization functions\r\n    \r\n    function setupEmissionSchedule() internal {\r\n        // This function creates the initial schedule of emission of tokens during the first year, only called during construction\r\n        _mintSchedule.push(76000000000000000000000); // Week 1 emission\r\n        _mintSchedule.push(57000000000000000000000); // Week 2 emission\r\n        _mintSchedule.push(38000000000000000000000); // Week 3 emission\r\n        _mintSchedule.push(19000000000000000000000); // Week 4 emission\r\n        for(uint i = 4; i < 52; i++){\r\n            _mintSchedule.push(16875000000000000000000); // Week 5-52 emissions, can be adjusted\r\n        }\r\n    }\r\n    \r\n    // Anyone can call the mintNewWeek function, this may be a gas heavy function\r\n    function mintNewWeek() external {\r\n        require(now >= protocolStart,\"Too soon to start this protocol\");\r\n        if(_currentWeek > 0){\r\n            // We cannot mint a new week until the current week is over\r\n            require(now >= _periodFinished,\"Too early to start next week\");\r\n        }\r\n        require(StabilizeT.owner() == address(this),\"The Operator does not have permission to mint tokens\");\r\n        _currentWeek = _currentWeek.add(1);\r\n        // We will mint new tokens per the mint schedule, then the emission schedule\r\n        uint256 rewardAmount = 0;\r\n        if(_currentWeek < 53){\r\n            // Mint per mint schedule\r\n            uint256 devShare = 0;\r\n            if(_currentWeek > 1){\r\n                // First week was pre-allocated\r\n                // devShare from total allocation\r\n                devShare = _mintSchedule[_currentWeek-1].mul(_rewardPercentDev).div(divisionFactor);\r\n                _mintSchedule[_currentWeek-1] = _mintSchedule[_currentWeek-1].sub(devShare);\r\n                // Mint to the developer account\r\n                StabilizeT.mint(owner(),devShare); // The Operator will mint tokens to the developer\r\n            }else{\r\n                // This is the first week, let's activate all the pending pools\r\n                for(uint256 i = 0; i < totalPools.length; i++){\r\n                    activePools.push(totalPools[i].poolID);\r\n                    totalPools[i].active = true;\r\n                }             \r\n            }\r\n            rewardAmount = _mintSchedule[_currentWeek-1];\r\n            if(_earlyBurnRate > 0){\r\n                // This will be utilized only if the contract has called for an early burn to reduce token supply\r\n                rewardAmount = rewardAmount.sub(rewardAmount.mul(_earlyBurnRate).div(divisionFactor));\r\n            }\r\n        }else{\r\n            // Mint per emission schedule\r\n            if(_currentWeek == 53){\r\n                // Start the burn rate\r\n                StabilizeT.initiateBurn(_burnRateLong);\r\n                // Set the maximum supply to the real total supply rate now\r\n                _maxSupplyFirstYear = StabilizeT.totalSupply();\r\n            }\r\n            // No more devShare\r\n            // Emission rate divided per week\r\n            rewardAmount = _maxSupplyFirstYear.mul(_emissionRateLong).div(divisionFactor).div(52);\r\n        }\r\n        StabilizeT.mint(address(this),rewardAmount); // Mint at a set rate\r\n        // Now adjust the contract values\r\n        // Force update all the active pools before we extend the period\r\n        for(uint256 i = 0; i < activePools.length; i++){\r\n            forceUpdateRewardEarned(activePools[i],address(0));\r\n            totalPools[activePools[i]].rewardRate = 0; // Set the reward rate to 0 until pools rebalanced\r\n        }\r\n        _periodFinished = now + duration;\r\n        weeklyReward = rewardAmount; // This is this week's distribution\r\n        lastOracleTime = now - minOracleRefresh; // Force oracle price to update\r\n        rebalancePoolRewards(); // The pools will determine their reward rates based on the price\r\n        emit NewWeek(_currentWeek,weeklyReward);\r\n    }\r\n    \r\n    function currentWeek() external view returns (uint256){\r\n        return _currentWeek;\r\n    }\r\n    \r\n    function emissionRate() external view returns (uint256){\r\n        return _emissionRateLong;\r\n    }\r\n    \r\n    function periodFinished() external view returns (uint256){\r\n        return _periodFinished;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return totalPools.length;\r\n    }\r\n    \r\n    function rebalancePoolRewards() public {\r\n        // This function can only be called once every 6 hours, it updates all the active pools reward rates based on the prices\r\n        require(now >= lastOracleTime + minOracleRefresh, \"Cannot update the oracle prices now\");\r\n        require(_currentWeek > 0, \"Protocol has not started yet\");\r\n        require(oracleContract != StabilizePriceOracle(address(0)),\"No price oracle contract has been selected yet\");\r\n        lastOracleTime = now;\r\n        uint256 rewardPerSecond = weeklyReward.div(duration);\r\n        uint256 rewardLeft = 0;\r\n        uint256 timeLeft = 0;\r\n        if(now < _periodFinished){\r\n            timeLeft = _periodFinished.sub(now);\r\n            rewardLeft = timeLeft.mul(rewardPerSecond); // The amount of rewards left in this week\r\n        }\r\n        uint256 lpRewardLeft = rewardLeft.mul(_rewardPercentLP).div(divisionFactor);\r\n        uint256 sbRewardLeft = rewardLeft.sub(lpRewardLeft);\r\n        \r\n        // First figure out the pool splits for the lp tokens\r\n        // LP pools are split evenly\r\n        uint256 length = activePools.length;\r\n        require(length > 0,\"No active pools exist on the protocol\");\r\n        uint256 totalWeight = 0;\r\n        uint256 i = 0;\r\n        for(i = 0; i < length; i++){\r\n            if(totalPools[activePools[i]].lpPool == true){\r\n                totalPools[activePools[i]].poolWeight = 1;\r\n                totalWeight++;\r\n            }else{\r\n                // Get the prices of the non LP pools\r\n                uint256 price = oracleContract.getPrice(address(totalPools[activePools[i]].sToken));\r\n                if(price > 0){\r\n                    totalPools[activePools[i]].price = price;\r\n                }\r\n            }\r\n        }\r\n        // Now split the lpReward between the pools\r\n        for(i = 0; i < length; i++){\r\n            if(totalPools[activePools[i]].lpPool == true){\r\n                uint256 rewardPercent = totalPools[activePools[i]].poolWeight.mul(divisionFactor).div(totalWeight);\r\n                uint256 poolReward = lpRewardLeft.mul(rewardPercent).div(divisionFactor);\r\n                forceUpdateRewardEarned(activePools[i],address(0)); // Update the stored rewards for this pool before changing the rates\r\n                if(timeLeft > 0){\r\n                    totalPools[activePools[i]].rewardRate = poolReward.div(timeLeft); // The rate of return per second for this pool\r\n                }else{\r\n                    totalPools[activePools[i]].rewardRate = 0;\r\n                }               \r\n            }\r\n        }\r\n        \r\n        // Now we are going to rank the stablecoin pools from lowest price to highest and price closest to targetPrice\r\n        totalWeight = 0;\r\n        uint256 i2 = 0;\r\n        for(i = 0; i < length; i++){\r\n            if(totalPools[activePools[i]].lpPool == false){\r\n                uint256 amountBelow = 0;\r\n                for(i2 = 0; i2 < length; i2++){\r\n                    if(totalPools[activePools[i2]].lpPool == false){\r\n                        if(i != i2){ // Do not want to check itself\r\n                            if(totalPools[activePools[i]].price <= totalPools[activePools[i2]].price){\r\n                                amountBelow++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Rank would be total non-LP pools minus amountBelow\r\n                uint256 weight = (1 + amountBelow) * 100000;\r\n                uint256 diff = 0;\r\n                // Now multiply or divide the weight by its distance from the target price\r\n                if(totalPools[activePools[i]].price > targetPrice){\r\n                    diff = totalPools[activePools[i]].price - targetPrice;\r\n                    diff = diff.div(1e14); // Normalize the difference\r\n                    uint256 weightReduction = diff.mul(50); // Weight is reduced for each $0.0001 above target price\r\n                    if(weightReduction >= weight){\r\n                        weight = 1;\r\n                    }else{\r\n                        weight = weight.sub(weightReduction);\r\n                    }\r\n                }else if(totalPools[activePools[i]].price < targetPrice){\r\n                    diff = targetPrice - totalPools[activePools[i]].price;\r\n                    diff = diff.div(1e14); // Normalize the difference\r\n                    uint256 weightGain = diff.mul(50); // Weight is added for each $0.0001 below target price\r\n                    weight = weight.add(weightGain);      \r\n                }\r\n                totalPools[activePools[i]].poolWeight = weight;\r\n                totalWeight = totalWeight.add(weight);\r\n            }\r\n        }\r\n        // Now split the sbReward among the stablecoin pools\r\n        for(i = 0; i < length; i++){\r\n            if(totalPools[activePools[i]].lpPool == false){\r\n                uint256 rewardPercent = totalPools[activePools[i]].poolWeight.mul(divisionFactor).div(totalWeight);\r\n                uint256 poolReward = sbRewardLeft.mul(rewardPercent).div(divisionFactor);\r\n                forceUpdateRewardEarned(activePools[i],address(0)); // Update the stored rewards for this pool before changing the rates\r\n                if(timeLeft > 0){\r\n                    totalPools[activePools[i]].rewardRate = poolReward.div(timeLeft); // The rate of return per second for this pool\r\n                }else{\r\n                    totalPools[activePools[i]].rewardRate = 0;\r\n                }               \r\n            }\r\n        }\r\n    }\r\n    \r\n    function forceUpdateRewardEarned(uint256 _pid, address _address) internal updateRewardEarned(_pid, _address) {\r\n        \r\n    }\r\n    \r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return block.timestamp < _periodFinished ? block.timestamp : _periodFinished;\r\n    }\r\n    \r\n    function rewardRate(uint256 _pid) external view returns (uint256) {\r\n        return totalPools[_pid].rewardRate;\r\n    }\r\n    \r\n    function poolSize(uint256 _pid) external view returns (uint256) {\r\n        return totalPools[_pid].totalSupply;\r\n    }\r\n    \r\n    function poolBalance(uint256 _pid, address _address) external view returns (uint256) {\r\n        return userInfo[_pid][_address].amount;\r\n    }\r\n    \r\n    function poolTokenAddress(uint256 _pid) external view returns (address) {\r\n        return address(totalPools[_pid].sToken);\r\n    }\r\n\r\n    function rewardPerToken(uint256 _pid) public view returns (uint256) {\r\n        if (totalPools[_pid].totalSupply == 0) {\r\n            return totalPools[_pid].rewardPerTokenStored;\r\n        }\r\n        return\r\n            totalPools[_pid].rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(totalPools[_pid].lastUpdateTime)\r\n                    .mul(totalPools[_pid].rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalPools[_pid].totalSupply)\r\n            );\r\n    }\r\n\r\n    function rewardEarned(uint256 _pid, address account) public view returns (uint256) {\r\n        return\r\n            userInfo[_pid][account].amount\r\n                .mul(rewardPerToken(_pid).sub(userInfo[_pid][account].rewardDebt))\r\n                .div(1e18)\r\n                .add(userInfo[_pid][account].unclaimedReward);\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 amount) public updateRewardEarned(_pid, _msgSender()) {\r\n        require(amount > 0, \"Cannot deposit 0\");\r\n        if(_currentWeek > 0){\r\n            require(totalPools[_pid].active == true, \"This pool is no longer active\");\r\n        }      \r\n        totalPools[_pid].totalSupply = totalPools[_pid].totalSupply.add(amount);\r\n        userInfo[_pid][_msgSender()].amount = userInfo[_pid][_msgSender()].amount.add(amount);\r\n        totalPools[_pid].sToken.safeTransferFrom(_msgSender(), address(this), amount);\r\n        emit Deposited(_pid, _msgSender(), amount);\r\n    }\r\n\r\n    // User can withdraw without claiming reward tokens\r\n    function withdraw(uint256 _pid, uint256 amount) public updateRewardEarned(_pid, _msgSender()) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        totalPools[_pid].totalSupply = totalPools[_pid].totalSupply.sub(amount);\r\n        userInfo[_pid][_msgSender()].amount = userInfo[_pid][_msgSender()].amount.sub(amount);\r\n        totalPools[_pid].sToken.safeTransfer(_msgSender(), amount);\r\n        emit Withdrawn(_pid, _msgSender(), amount);\r\n    }\r\n\r\n    // Normally used to exit the contract and claim reward tokens\r\n    function exit(uint256 _pid, uint256 _amount) external {\r\n        withdraw(_pid, _amount);\r\n        getReward(_pid);\r\n    }\r\n\r\n    /// A push mechanism for accounts that have not claimed their rewards for a long time.\r\n    function pushReward(uint256 _pid, address recipient) external updateRewardEarned(_pid, recipient) onlyOwner {\r\n        uint256 reward = rewardEarned(_pid,recipient);\r\n        if (reward > 0) {\r\n            userInfo[_pid][recipient].unclaimedReward = 0;\r\n            // If it is a normal user and not smart contract,\r\n            // then the requirement will pass\r\n            // If it is a smart contract, it will fail as those contracts usually dump.\r\n            if (!recipient.isContract()) {\r\n                uint256 contractBalance = StabilizeT.balanceOf(address(this));\r\n                if(contractBalance < reward){ // This prevents a contract with zero balance locking up\r\n                    reward = contractBalance;\r\n                }\r\n                StabilizeT.safeTransfer(recipient, reward);\r\n                emit RewardPaid(_pid, recipient, reward);\r\n            } else {\r\n                emit RewardDenied(_pid, recipient, reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getReward(uint256 _pid) public updateRewardEarned(_pid, _msgSender()) {\r\n        uint256 reward = rewardEarned(_pid,_msgSender());\r\n        if (reward > 0) {\r\n            userInfo[_pid][_msgSender()].unclaimedReward = 0;\r\n            // If it is a normal user and not smart contract,\r\n            // then the requirement will pass\r\n            // If it is a smart contract, it will fail as those contracts usually dump.\r\n            if (tx.origin == _msgSender()) {\r\n                // Check the contract to make sure the reward exists\r\n                uint256 contractBalance = StabilizeT.balanceOf(address(this));\r\n                if(contractBalance < reward){ // This prevents a contract with zero balance locking up\r\n                    reward = contractBalance;\r\n                }\r\n                StabilizeT.safeTransfer(_msgSender(), reward);\r\n                emit RewardPaid(_pid, _msgSender(), reward);\r\n            } else {\r\n                emit RewardDenied(_pid, _msgSender(), reward);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Governance only functions\r\n    \r\n    // Timelock variables\r\n    // Timelock doesn't activate until protocol has started to distribute rewards\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant _timelockDuration = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    uint256 private _timelock_data_1;\r\n    address private _timelock_address_1;\r\n    bool private _timelock_bool_1;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        if(_currentWeek > 0){\r\n            // Timelock is only required after the protocol starts\r\n            require(now >= _timelockStart + _timelockDuration, \"Timelock time not met\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Due to no tokens existing, must mint some tokens to add into the initial liquidity pool \r\n    function bootstrapLiquidty() external onlyOwner {\r\n        require(StabilizeT.totalSupply() == 0, \"This token has already been bootstrapped\");\r\n        require(StabilizeT.owner() == address(this),\"The Operator does not have permission to mint tokens\");\r\n        // Take dev amount from the first week mint schedule\r\n        uint256 devAmount = _mintSchedule[0].mul(_rewardPercentDev).div(divisionFactor);\r\n        _mintSchedule[0] = _mintSchedule[0].sub(devAmount); // The first week doesn't give dev team any extra tokens\r\n        StabilizeT.mint(owner(),devAmount); // The Operator will mint tokens to the developer\r\n    }\r\n    \r\n    // Change the owner of the Operator contract\r\n    // --------------------\r\n    function startOwnerChange(address _address) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address_1 = _address;       \r\n    }\r\n    \r\n    function finishOwnerChange() external onlyOwner timelockConditionsMet(1) {\r\n        transferOwnership(_timelock_address_1);\r\n    }\r\n    // --------------------\r\n\r\n    // Used to reduce minting rate in first 52 weeks\r\n    // --------------------\r\n    function startChangeEarlyBurnRate(uint256 _percent) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeEarlyBurnRate() external onlyOwner timelockConditionsMet(2) {\r\n        _earlyBurnRate = _timelock_data_1;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the per transaction burn rate\r\n    // --------------------\r\n    function startChangeBurnRateLong(uint256 _percent) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeBurnRateLong() external onlyOwner timelockConditionsMet(3) {\r\n       _burnRateLong  = _timelock_data_1;\r\n       if(_currentWeek >= 53){\r\n           // Adjust the token's burn rate\r\n           StabilizeT.initiateBurn(_burnRateLong);\r\n       }\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the long term emission rate\r\n    // --------------------\r\n    function startChangeEmissionRateLong(uint256 _percent) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeEmissionRateLong() external onlyOwner timelockConditionsMet(4) {\r\n        _emissionRateLong =_timelock_data_1;\r\n    }\r\n    // --------------------\r\n\r\n    // Change the percent of rewards that is dedicated to LP providers\r\n    // --------------------\r\n    function startChangeRewardPercentLP(uint256 _percent) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeRewardPercentLP() external onlyOwner timelockConditionsMet(5) {\r\n        _rewardPercentLP = _timelock_data_1;\r\n    }\r\n    // --------------------\r\n\r\n    // Change the target price for the stablecoins, due to inflation issues\r\n    // --------------------\r\n    function startChangeTargetPrice(uint256 _price) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 6;\r\n        _timelock_data_1 = _price;\r\n    }\r\n    \r\n    function finishChangeTargetPrice() external onlyOwner timelockConditionsMet(6) {\r\n        targetPrice = _timelock_data_1;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the price oracle contract used, in case of upgrades\r\n    // --------------------\r\n    function startChangePriceOracle(address _address) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 7;\r\n        _timelock_address_1 = _address;\r\n    }\r\n    \r\n    function finishChangePriceOracle() external onlyOwner timelockConditionsMet(7) {\r\n        oracleContract = StabilizePriceOracle(_timelock_address_1);\r\n    }\r\n    // --------------------\r\n   \r\n    // Add a new token to the pool\r\n    // --------------------\r\n    function startAddNewPool(address _address, bool _lpPool) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 8;\r\n        _timelock_address_1 = _address;\r\n        _timelock_bool_1 = _lpPool;\r\n        if(_currentWeek == 0){\r\n            finishAddNewPool(); // Automatically add the pool if protocol hasn't started yet\r\n        }\r\n    }\r\n    \r\n    function finishAddNewPool() public onlyOwner timelockConditionsMet(8) {\r\n        // This adds a new pool to the pool lists\r\n        totalPools.push(\r\n            PoolInfo({\r\n                sToken: IERC20(_timelock_address_1),\r\n                poolID: poolLength(),\r\n                lpPool: _timelock_bool_1,\r\n                rewardRate: 0,\r\n                poolWeight: 0,\r\n                price: 0,\r\n                rewardPerTokenStored: 0,\r\n                lastUpdateTime: 0,\r\n                totalSupply: 0,\r\n                active: false\r\n            })\r\n        );\r\n    }\r\n    // --------------------\r\n    \r\n    // Select a pool to activate in rewards distribution\r\n    // --------------------\r\n    function startAddActivePool(uint256 _pid) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 9;\r\n        _timelock_data_1 = _pid;\r\n    }\r\n    \r\n    function finishAddActivePool() external onlyOwner timelockConditionsMet(9) {\r\n        require(totalPools[_timelock_data_1].active == false, \"This pool is already active\");\r\n        activePools.push(_timelock_data_1);\r\n        totalPools[_timelock_data_1].active = true;\r\n        // Rebalance the pools now that there is a new pool\r\n        if(_currentWeek > 0){\r\n            lastOracleTime = now - minOracleRefresh; // Force oracle price to update\r\n            rebalancePoolRewards();\r\n        }\r\n    }\r\n    // --------------------\r\n    \r\n    // Select a pool to deactivate from rewards distribution\r\n    // --------------------\r\n    function startRemoveActivePool(uint256 _pid) external onlyOwner {\r\n        _timelockStart = now;\r\n        _timelockType = 10;\r\n        _timelock_data_1 = _pid;\r\n    }\r\n    \r\n    function finishRemoveActivePool() external onlyOwner timelockConditionsMet(10) updateRewardEarned(_timelock_data_1, address(0)) {\r\n        uint256 length = activePools.length;\r\n        for(uint256 i = 0; i < length; i++){\r\n            if(totalPools[activePools[i]].poolID == _timelock_data_1){\r\n                // Move all the remaining elements down one\r\n                totalPools[activePools[i]].active = false;\r\n                totalPools[activePools[i]].rewardRate = 0; // Deactivate rewards but first make sure to store current rewards\r\n                for(uint256 i2 = i; i2 < length-1; i2++){\r\n                    activePools[i2] = activePools[i2 + 1]; // Shift the data down one\r\n                }\r\n                activePools.pop(); //Remove last element\r\n                break;\r\n            }\r\n        }\r\n        // Rebalance the remaining pools \r\n        if(_currentWeek > 0){\r\n            lastOracleTime = now - minOracleRefresh; // Force oracle price to update\r\n            rebalancePoolRewards();\r\n        }\r\n    }\r\n    // --------------------\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract StabilizeToken\",\"name\":\"_stabilize\",\"type\":\"address\"},{\"internalType\":\"contract StabilizePriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weekNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NewWeek\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bootstrapLiquidty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAddActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAddNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeBurnRateLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeEarlyBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeEmissionRateLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeRewardPercentLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTargetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishOwnerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishRemoveActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOracleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNewWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinished\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"pushReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"startAddActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_lpPool\",\"type\":\"bool\"}],\"name\":\"startAddNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeBurnRateLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeEarlyBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeEmissionRateLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeRewardPercentLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"startChangeTargetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startOwnerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"startRemoveActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Operator","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b987d48ed8f2c468d52d6405624eadba5e76d723000000000000000000000000b54e7175db55d0effcc974f146b3714910907a58000000000000000000000000000000000000000000000000000000005f727900","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c5760e5c4d24942598388cba54a0f1671f952f594365b644963eafd99da36016"}]}