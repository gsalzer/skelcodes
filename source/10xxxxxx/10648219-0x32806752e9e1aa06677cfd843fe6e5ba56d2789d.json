{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Initializable, Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary BasisPoints {\r\n    using SafeMath for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n\r\ncontract LidSimplifiedPresaleTimer is Initializable, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n    uint public hardCapTimer;\r\n    uint public softCap;\r\n    address public presale;\r\n\r\n    function initialize(\r\n        uint _startTime,\r\n        uint _hardCapTimer,\r\n        uint _softCap,\r\n        address _presale,\r\n        address owner\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n        startTime = _startTime;\r\n        hardCapTimer = _hardCapTimer;\r\n        softCap = _softCap;\r\n        presale = _presale;\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function setStartTime(uint time) external onlyOwner {\r\n        startTime = time;\r\n    }\r\n\r\n    function setEndTime(uint time) external onlyOwner {\r\n        endTime = time;\r\n    }\r\n\r\n    function updateEndTime() external returns (uint) {\r\n        if (endTime != 0) return endTime;\r\n        if (presale.balance >= softCap) {\r\n            endTime = now.add(hardCapTimer);\r\n            return endTime;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function isStarted() external view returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LidSimplifiedPresaleRedeemer is Initializable, Ownable {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public redeemBP;\r\n    uint public redeemInterval;\r\n\r\n    uint[] public bonusRangeStart;\r\n    uint[] public bonusRangeBP;\r\n    uint public currentBonusIndex;\r\n\r\n    uint public totalShares;\r\n    uint public totalDepositors;\r\n    mapping(address => uint) public accountDeposits;\r\n    mapping(address => uint) public accountShares;\r\n    mapping(address => uint) public accountClaimedTokens;\r\n\r\n    address private presale;\r\n\r\n    modifier onlyPresaleContract {\r\n        require(msg.sender == presale, \"Only callable by presale contract.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _redeemBP,\r\n        uint _redeemInterval,\r\n        uint[] calldata _bonusRangeStart,\r\n        uint[] calldata _bonusRangeBP,\r\n        address _presale,\r\n        address owner\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n\r\n        redeemBP = _redeemBP;\r\n        redeemInterval = _redeemInterval;\r\n        presale = _presale;\r\n\r\n        require(\r\n            _bonusRangeStart.length == _bonusRangeBP.length,\r\n            \"Must have equal values for bonus range start and BP\"\r\n        );\r\n        require(_bonusRangeStart.length <= 10, \"Cannot have more than 10 items in bonusRange\");\r\n        for (uint i = 0; i < _bonusRangeStart.length; ++i) {\r\n            bonusRangeStart.push(_bonusRangeStart[i]);\r\n        }\r\n        for (uint i = 0; i < _bonusRangeBP.length; ++i) {\r\n            bonusRangeBP.push(_bonusRangeBP[i]);\r\n        }\r\n\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function setClaimed(address account, uint amount) external onlyPresaleContract {\r\n        accountClaimedTokens[account] = accountClaimedTokens[account].add(amount);\r\n    }\r\n\r\n    function setDeposit(address account, uint deposit, uint postDepositEth) external onlyPresaleContract {\r\n        if (accountDeposits[account] == 0) totalDepositors = totalDepositors.add(1);\r\n        accountDeposits[account] = accountDeposits[account].add(deposit);\r\n        if (currentBonusIndex.add(1) > bonusRangeBP.length) {\r\n            //final bonus rate\r\n            accountShares[account] = accountShares[account].add(deposit.addBP(bonusRangeBP[currentBonusIndex]));\r\n        } else if (postDepositEth < bonusRangeStart[currentBonusIndex.add(1)]) {\r\n            //Purchase doesnt push to next start\r\n            accountShares[account] = accountShares[account].add(deposit.addBP(bonusRangeBP[currentBonusIndex]));\r\n        } else {\r\n            //purchase straddles next start\r\n            uint previousBonusBP = bonusRangeBP[currentBonusIndex];\r\n            uint newBonusBP = bonusRangeBP[currentBonusIndex.add(1)];\r\n            uint newBonusDeposit = postDepositEth.sub(bonusRangeStart[currentBonusIndex.add(1)]);\r\n            uint previousBonusDeposit = deposit.sub(newBonusDeposit);\r\n            accountShares[account] = accountShares[account].add(\r\n                newBonusDeposit.addBP(newBonusBP)\r\n            ).add(\r\n                previousBonusDeposit.addBP(previousBonusBP)\r\n            );\r\n            currentBonusIndex = currentBonusIndex.add(1);\r\n        }\r\n    }\r\n\r\n    function calculateRatePerEth(uint totalPresaleTokens, uint depositEth, uint hardCap) external view returns (uint) {\r\n\r\n        uint tokensPerEtherShare = totalPresaleTokens\r\n        .mul(1 ether)\r\n        .div(\r\n            getMaxShares(hardCap)\r\n        );\r\n\r\n        uint bp;\r\n        if (depositEth >= bonusRangeStart[bonusRangeStart.length.sub(1)]) {\r\n            bp = bonusRangeBP[bonusRangeBP.length.sub(1)];\r\n        } else {\r\n            for (uint i = 1; i < bonusRangeStart.length; ++i) {\r\n                if (bp == 0) {\r\n                    if (depositEth < bonusRangeStart[i]) {\r\n                        bp = bonusRangeBP[i.sub(1)];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return tokensPerEtherShare.addBP(bp);\r\n    }\r\n\r\n    function calculateReedemable(\r\n        address account,\r\n        uint finalEndTime,\r\n        uint totalPresaleTokens\r\n    ) external view returns (uint) {\r\n        if (finalEndTime == 0) return 0;\r\n        uint earnedTokens = accountShares[account].mul(totalPresaleTokens).div(accountShares[account]);\r\n        uint claimedTokens = accountClaimedTokens[account];\r\n        uint cycles = now.sub(finalEndTime).div(redeemInterval).add(1);\r\n        uint totalRedeemable = earnedTokens.mulBP(redeemBP).mul(cycles);\r\n        uint claimable;\r\n        if (totalRedeemable >= earnedTokens) {\r\n            claimable = earnedTokens.sub(claimedTokens);\r\n        } else {\r\n            claimable = totalRedeemable.sub(claimedTokens);\r\n        }\r\n        return claimable;\r\n    }\r\n\r\n    function getMaxShares(uint hardCap) public view returns (uint) {\r\n        uint maxShares;\r\n        for (uint i = 0; i < bonusRangeStart.length; ++i) {\r\n            uint amt;\r\n            if (i < bonusRangeStart.length.sub(1)) {\r\n                amt = bonusRangeStart[i.add(1)].sub(bonusRangeStart[i]);\r\n            } else {\r\n                amt = hardCap.sub(bonusRangeStart[i]);\r\n            }\r\n            maxShares = maxShares.add(amt.addBP(bonusRangeBP[i]));\r\n        }\r\n        return maxShares;\r\n    }\r\n}\r\n\r\n\r\ncontract LidSimplifiedPresale is Initializable, Ownable, ReentrancyGuard, Pausable {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public maxBuyPerAddress;\r\n    uint public maxBuyWithoutWhitelisting;\r\n\r\n    uint public referralBP;\r\n\r\n    uint public uniswapEthBP;\r\n    uint public lidEthBP;\r\n\r\n    uint public uniswapTokenBP;\r\n    uint public presaleTokenBP;\r\n    address[] public tokenPools;\r\n    uint[] public tokenPoolBPs;\r\n\r\n    uint public hardcap;\r\n    uint public totalTokens;\r\n\r\n    bool public hasSentToUniswap;\r\n    bool public hasIssuedTokens;\r\n\r\n    uint public finalEndTime;\r\n    uint public finalEth;\r\n\r\n    IERC20 private token;\r\n    IUniswapV2Router01 private uniswapRouter;\r\n    LidSimplifiedPresaleTimer private timer;\r\n    LidSimplifiedPresaleRedeemer private redeemer;\r\n    address payable private lidFund;\r\n\r\n    mapping(address => uint) public accountEthDeposit;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint) public earnedReferrals;\r\n\r\n    mapping(address => uint) public referralCounts;\r\n\r\n    modifier whenPresaleActive {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(!isPresaleEnded(), \"Presale has ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPresaleFinished {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(isPresaleEnded(), \"Presale has not yet ended.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _maxBuyPerAddress,\r\n        uint _maxBuyWithoutWhitelisting,\r\n        uint _uniswapEthBP,\r\n        uint _lidEthBP,\r\n        uint _referralBP,\r\n        uint _hardcap,\r\n        address owner,\r\n        LidSimplifiedPresaleTimer _timer,\r\n        LidSimplifiedPresaleRedeemer _redeemer,\r\n        IERC20 _token,\r\n        IUniswapV2Router01 _uniswapRouter,\r\n        address payable _lidFund\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n        Pausable.initialize(msg.sender);\r\n        ReentrancyGuard.initialize();\r\n\r\n        token = _token;\r\n        timer = _timer;\r\n        redeemer = _redeemer;\r\n        lidFund = _lidFund;\r\n\r\n        maxBuyPerAddress = _maxBuyPerAddress;\r\n        maxBuyWithoutWhitelisting = _maxBuyWithoutWhitelisting;\r\n\r\n        uniswapEthBP = _uniswapEthBP;\r\n        lidEthBP = _lidEthBP;\r\n\r\n        referralBP = _referralBP;\r\n        hardcap = _hardcap;\r\n\r\n        uniswapRouter = _uniswapRouter;\r\n        totalTokens = token.totalSupply();\r\n        token.approve(address(uniswapRouter), token.totalSupply());\r\n\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function deposit() external payable whenNotPaused {\r\n        deposit(address(0x0));\r\n    }\r\n\r\n    function setTokenPools(\r\n        uint _uniswapTokenBP,\r\n        uint _presaleTokenBP,\r\n        address[] calldata _tokenPools,\r\n        uint[] calldata _tokenPoolBPs\r\n    ) external onlyOwner whenNotPaused {\r\n        require(_tokenPools.length == _tokenPoolBPs.length, \"Must have exactly one tokenPool addresses for each BP.\");\r\n        delete tokenPools;\r\n        delete tokenPoolBPs;\r\n        uniswapTokenBP = _uniswapTokenBP;\r\n        presaleTokenBP = _presaleTokenBP;\r\n        for (uint i = 0; i < _tokenPools.length; ++i) {\r\n            tokenPools.push(_tokenPools[i]);\r\n        }\r\n        uint totalTokenPoolBPs = uniswapTokenBP.add(presaleTokenBP);\r\n        for (uint i = 0; i < _tokenPoolBPs.length; ++i) {\r\n            tokenPoolBPs.push(_tokenPoolBPs[i]);\r\n            totalTokenPoolBPs = totalTokenPoolBPs.add(_tokenPoolBPs[i]);\r\n        }\r\n        require(totalTokenPoolBPs == 10000, \"Must allocate exactly 100% (10000 BP) of tokens to pools\");\r\n    }\r\n\r\n    function sendToUniswap() external whenPresaleFinished nonReentrant whenNotPaused {\r\n        require(tokenPools.length > 0, \"Must have set token pools\");\r\n        require(!hasSentToUniswap, \"Has already sent to Uniswap.\");\r\n        finalEndTime = now;\r\n        finalEth = address(this).balance;\r\n        hasSentToUniswap = true;\r\n        uint uniswapTokens = totalTokens.mulBP(uniswapTokenBP);\r\n        uint uniswapEth = finalEth.mulBP(uniswapEthBP);\r\n        uniswapRouter.addLiquidityETH.value(uniswapEth)(\r\n            address(token),\r\n            uniswapTokens,\r\n            uniswapTokens,\r\n            uniswapEth,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            now\r\n        );\r\n    }\r\n\r\n    function issueTokens() external whenPresaleFinished whenNotPaused {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        require(!hasIssuedTokens, \"Has already issued tokens.\");\r\n        hasIssuedTokens = true;\r\n        for (uint i = 0; i < tokenPools.length; ++i) {\r\n            token.transfer(\r\n                tokenPools[i],\r\n                totalTokens.mulBP(tokenPoolBPs[i])\r\n            );\r\n        }\r\n    }\r\n\r\n    function releaseEthToAddress(address payable receiver, uint amount) external onlyOwner whenNotPaused returns(uint) {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    function setWhitelist(address account, bool value) external onlyOwner whenNotPaused {\r\n        whitelist[account] = value;\r\n    }\r\n\r\n    function setWhitelistForAll(address[] calldata account, bool value) external onlyOwner whenNotPaused {\r\n        for (uint i=0; i < account.length; i++) {\r\n            whitelist[account[i]] = value;\r\n        }\r\n    }\r\n\r\n    function redeem() external whenPresaleFinished whenNotPaused {\r\n        require(hasSentToUniswap, \"Must have sent to Uniswap before any redeems.\");\r\n        uint claimable = redeemer.calculateReedemable(msg.sender, timer.endTime(), totalTokens.mulBP(presaleTokenBP));\r\n        redeemer.setClaimed(msg.sender, claimable);\r\n        token.transfer(msg.sender, claimable);\r\n    }\r\n\r\n    function deposit(address payable referrer) public payable whenPresaleActive nonReentrant whenNotPaused {\r\n        require(timer.updateEndTime() <= now, \"Endtime past.\");\r\n        uint accountCurrentDeposit = redeemer.accountDeposits(msg.sender);\r\n        uint fee = msg.value.mulBP(referralBP);\r\n        //Remove fee in case final purchase needed to end sale without dust errors\r\n        if (msg.value < 0.01 ether) fee = 0;\r\n        if (whitelist[msg.sender]) {\r\n            require(\r\n                accountCurrentDeposit.add(msg.value) <= getMaxWhitelistedDeposit(),\r\n                \"Deposit exceeds max buy per address for whitelisted addresses.\"\r\n            );\r\n        } else {\r\n            require(\r\n                accountCurrentDeposit.add(msg.value) <= maxBuyWithoutWhitelisting,\r\n                \"Deposit exceeds max buy per address for non-whitelisted addresses.\"\r\n            );\r\n        }\r\n        require(address(this).balance.sub(fee) <= hardcap, \"Cannot deposit more than hardcap.\");\r\n\r\n        redeemer.setDeposit(msg.sender, msg.value.sub(fee), address(this).balance.sub(fee));\r\n\r\n        if (referrer != address(0x0) && referrer != msg.sender) {\r\n            earnedReferrals[referrer] = earnedReferrals[referrer].add(fee);\r\n            referralCounts[referrer] = referralCounts[referrer].add(1);\r\n            referrer.transfer(fee);\r\n        } else {\r\n            lidFund.transfer(fee);\r\n        }\r\n    }\r\n\r\n    function getMaxWhitelistedDeposit() public view returns (uint) {\r\n        return maxBuyPerAddress;\r\n    }\r\n\r\n    function isPresaleEnded() public view returns (bool) {\r\n        uint endTime =  timer.endTime();\r\n        return (\r\n            (address(this).balance >= hardcap) ||\r\n            (timer.isStarted() && (now > endTime && endTime != 0))\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountEthDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxWhitelistedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIssuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSentToUniswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyWithoutWhitelisting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniswapEthBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lidEthBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract LidSimplifiedPresaleTimer\",\"name\":\"_timer\",\"type\":\"address\"},{\"internalType\":\"contract LidSimplifiedPresaleRedeemer\",\"name\":\"_redeemer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_lidFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lidEthBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyWithoutWhitelisting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseEthToAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniswapTokenBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTokenBP\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokenPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPoolBPs\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPoolBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapEthBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LidSimplifiedPresale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad2992ece0558ddefe879056e3affecedad7514f74657f8fb301dc1cfa8bbe23"}]}