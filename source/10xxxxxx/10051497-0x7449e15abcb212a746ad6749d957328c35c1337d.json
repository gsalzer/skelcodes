{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPot {\r\n    function dsr() external view returns (uint256);\r\n\r\n    function chi() external view returns (uint256);\r\n\r\n    function rho() external view returns (uint256);\r\n\r\n    function drip() external returns (uint256);\r\n\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\ncontract ChaiInfo {\r\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n    uint256 private constant RAY = 10**27;\r\n    \r\n    function chaiPrice() public view returns(uint256) {\r\n        return chaiToDai(1e18);\r\n    }\r\n\r\n    function daiToChai(\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rdiv(amount, chi);\r\n    }\r\n\r\n    function chaiToDai(\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rmul(chi, amount);\r\n    }\r\n    \r\n    // Private:\r\n    \r\n    function potDrip() private view returns (uint256) {\r\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\r\n    }\r\n\r\n    function _mul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function _rmul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, y) / RAY;\r\n    }\r\n\r\n    function _rdiv(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n, uint256 base) private pure returns (uint256 z) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch x\r\n                case 0 {\r\n                    switch n\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := 0\r\n                        }\r\n                }\r\n                default {\r\n                    switch mod(n, 2)\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := x\r\n                        }\r\n                    let half := div(base, 2) // for rounding.\r\n                    for {\r\n                        n := div(n, 2)\r\n                    } n {\r\n                        n := div(n, 2)\r\n                    } {\r\n                        let xx := mul(x, x)\r\n                        if iszero(eq(div(xx, x), x)) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        x := div(xxRound, base)\r\n                        if mod(n, 2) {\r\n                            let zx := mul(z, x)\r\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\r\n                                revert(0, 0)\r\n                            }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) {\r\n                                revert(0, 0)\r\n                            }\r\n                            z := div(zxRound, base)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"chaiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chaiToDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"daiToChai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChaiInfo","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://37dc52b891df1ce6195597019b841fe36584ec0e8e295f52d658088cd05f79ef"}]}