{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IWETH9.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IWETH9 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n\r\n    function allowance(address, address) external view returns (uint);\r\n\r\n    receive() external payable;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint wad) external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n    external\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IAdvancedWETH.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/// @title Advanced WETH Interface\r\n/// @author Moody Salem\r\n/// @notice Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that\r\n///     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use.\r\n/// @dev The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is\r\n///     required to interact with many protocols. This contract enables a user to interact with protocols consuming\r\n///     ERC20 without additional approvals.\r\ninterface IAdvancedWETH {\r\n    /// @notice Returns the WETH contract that this Advanced WETH contract uses.\r\n    /// @dev Returns the WETH contract that this Advanced WETH contract uses.\r\n    /// @return the WETH contract used by this contract.\r\n    function weth() external view returns (address payable);\r\n\r\n    /// @notice Deposits any ETH sent to the contract, and transfers additional WETH from the caller,\r\n    ///     and then approves and calls another contract `to` with data `data`.\r\n    /// @dev Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as\r\n    ///     ETH. Note that either `amount` or `msg.value` may be 0, but not both.\r\n    /// @param amount The amount to transfer from the caller to this contract and approve for the `to` address, or 0.\r\n    /// @param to The address to approve and call after minting WETH\r\n    /// @param data The data to forward to the contract after minting WETH\r\n    function depositAndTransferFromThenCall(uint amount, address to, bytes calldata data) external payable;\r\n\r\n    /// @notice Unwrap and forward all WETH held by the contract to the given address. This should never be called\r\n    ///     directly, but rather as a callback from a contract call that results in sending WETH to this contract.\r\n    /// @dev Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.\r\n    /// @param to The address that should receive the unwrapped ETH.\r\n    function withdrawTo(address payable to) external;\r\n}\r\n\r\n// File: contracts/AdvancedWETH.sol\r\n\r\npragma solidity =0.6.7;\r\n\r\n\r\n\r\n// See interface for documentation.\r\ncontract AdvancedWETH is IAdvancedWETH {\r\n    address payable public override immutable weth;\r\n\r\n    constructor(address payable weth_) public {\r\n        weth = weth_;\r\n    }\r\n\r\n    // See interface for documentation.\r\n    function depositAndTransferFromThenCall(uint amount, address to, bytes calldata data) external override payable {\r\n        if (msg.value > 0) {\r\n            IWETH9(weth).deposit{value: msg.value}();\r\n        }\r\n        if (amount > 0) {\r\n            IWETH9(weth).transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        uint total = msg.value + amount;\r\n        require(total >= msg.value, 'OVERFLOW'); // nobody should be this rich.\r\n        require(total > 0, 'ZERO_INPUTS');\r\n        IWETH9(weth).approve(to, total);\r\n        (bool success,) = to.call(data);\r\n        require(success, 'TO_CALL_FAILED');\r\n        // unwrap and refund any unspent WETH.\r\n        withdrawTo(msg.sender);\r\n    }\r\n\r\n    // Only the WETH contract may send ETH via a call to withdraw.\r\n    receive() payable external { require(msg.sender == weth, 'WETH_ONLY'); }\r\n\r\n    // See interface for documentation.\r\n    function withdrawTo(address payable to) public override {\r\n        uint wethBalance = IWETH9(weth).balanceOf(address(this));\r\n        if (wethBalance > 0) {\r\n            IWETH9(weth).withdraw(wethBalance);\r\n            (bool success,) = to.call{value: wethBalance}('');\r\n            require(success, 'WITHDRAW_TO_CALL_FAILED');\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositAndTransferFromThenCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AdvancedWETH","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f9fc0fb27abca8da123377c3f2f38c5b4bcdf03a46c141d6117936155cf957a"}]}