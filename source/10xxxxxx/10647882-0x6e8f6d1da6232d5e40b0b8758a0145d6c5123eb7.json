{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.4\r\n\"\"\"\r\n@title Curve StableSwap Proxy\r\n@author Curve Finance\r\n@license MIT\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Burner:\r\n    def burn() -> bool: nonpayable\r\n    def burn_eth() -> bool: payable\r\n    def burn_coin(_coin: address)-> bool: nonpayable\r\n\r\ninterface Curve:\r\n    def withdraw_admin_fees(): nonpayable\r\n    def kill_me(): nonpayable\r\n    def unkill_me(): nonpayable\r\n    def commit_transfer_ownership(new_owner: address): nonpayable\r\n    def apply_transfer_ownership(): nonpayable\r\n    def revert_transfer_ownership(): nonpayable\r\n    def commit_new_parameters(amplification: uint256, new_fee: uint256, new_admin_fee: uint256): nonpayable\r\n    def apply_new_parameters(): nonpayable\r\n    def revert_new_parameters(): nonpayable\r\n    def commit_new_fee(new_fee: uint256, new_admin_fee: uint256): nonpayable\r\n    def apply_new_fee(): nonpayable\r\n    def ramp_A(_future_A: uint256, _future_time: uint256): nonpayable\r\n    def stop_ramp_A(): nonpayable\r\n    def set_aave_referral(referral_code: uint256): nonpayable\r\n    def donate_admin_fees(): nonpayable\r\n\r\n\r\nevent CommitAdmins:\r\n    ownership_admin: address\r\n    parameter_admin: address\r\n    emergency_admin: address\r\n\r\nevent ApplyAdmins:\r\n    ownership_admin: address\r\n    parameter_admin: address\r\n    emergency_admin: address\r\n\r\nevent AddBurner:\r\n    burner: address\r\n\r\n\r\nownership_admin: public(address)\r\nparameter_admin: public(address)\r\nemergency_admin: public(address)\r\n\r\nfuture_ownership_admin: public(address)\r\nfuture_parameter_admin: public(address)\r\nfuture_emergency_admin: public(address)\r\n\r\nburners: public(HashMap[address, address])\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.ownership_admin = msg.sender\r\n    self.parameter_admin = msg.sender\r\n    self.emergency_admin = msg.sender\r\n\r\n\r\n@external\r\ndef commit_set_admins(_o_admin: address, _p_admin: address, _e_admin: address):\r\n    \"\"\"\r\n    @notice Set ownership admin to `_o_admin`, parameter admin to `_p_admin` and emergency admin to `_e_admin`\r\n    @param _o_admin Ownership admin\r\n    @param _p_admin Parameter admin\r\n    @param _e_admin Emergency admin\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    self.future_ownership_admin = _o_admin\r\n    self.future_parameter_admin = _p_admin\r\n    self.future_emergency_admin = _e_admin\r\n\r\n    log CommitAdmins(_o_admin, _p_admin, _e_admin)\r\n\r\n\r\n@external\r\ndef apply_set_admins():\r\n    \"\"\"\r\n    @notice Apply the effects of `commit_set_admins`\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    _o_admin: address = self.future_ownership_admin\r\n    _p_admin: address = self.future_parameter_admin\r\n    _e_admin: address = self.future_emergency_admin\r\n    self.ownership_admin = _o_admin\r\n    self.parameter_admin = _p_admin\r\n    self.emergency_admin = _e_admin\r\n\r\n    log ApplyAdmins(_o_admin, _p_admin, _e_admin)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_burner(_token: address, _burner: address):\r\n    \"\"\"\r\n    @notice Set burner of `_token` to `_burner` address\r\n    @param _token Token address\r\n    @param _burner Burner contract address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n\r\n    _old_burner: address = self.burners[_token]\r\n\r\n    if _token != ZERO_ADDRESS:\r\n        if _old_burner != ZERO_ADDRESS:\r\n            ERC20(_token).approve(_old_burner, 0)\r\n        if _burner != ZERO_ADDRESS:\r\n            ERC20(_token).approve(_burner, MAX_UINT256)\r\n\r\n    self.burners[_token] = _burner\r\n\r\n    log AddBurner(_burner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw_admin_fees(_pool: address):\r\n    \"\"\"\r\n    @notice Withdraw admin fees from `_pool`\r\n    @param _pool Pool address to withdraw admin fees from\r\n    \"\"\"\r\n    Curve(_pool).withdraw_admin_fees()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef burn(_burner: address):\r\n    \"\"\"\r\n    @notice Burn CRV tokens using `_burner` contract\r\n    @param _burner Burner contract\r\n    \"\"\"\r\n    Burner(_burner).burn()  # dev: should implement burn()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef burn_coin(_coin: address):\r\n    \"\"\"\r\n    @notice Burn CRV tokens and buy `_coin`\r\n    @param _coin Coin address\r\n    \"\"\"\r\n    Burner(self.burners[_coin]).burn_coin(_coin)  # dev: should implement burn_coin()\r\n\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef burn_eth():\r\n    \"\"\"\r\n    @notice Burn the full ETH balance of this contract\r\n    \"\"\"\r\n    Burner(self.burners[ZERO_ADDRESS]).burn_eth(value=self.balance)  # dev: should implement burn_eth()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef kill_me(_pool: address):\r\n    \"\"\"\r\n    @notice Pause the pool `_pool` - only remove_liquidity will be callable\r\n    @param _pool Pool address to pause\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_admin, \"Access denied\"\r\n    Curve(_pool).kill_me()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef unkill_me(_pool: address):\r\n    \"\"\"\r\n    @notice Unpause the pool `_pool`, re-enabling all functionality\r\n    @param _pool Pool address to unpause\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_admin or msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).unkill_me()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_transfer_ownership(_pool: address, new_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership for `_pool` pool to `new_owner` address\r\n    @param _pool Pool which ownership is to be transferred\r\n    @param new_owner New pool owner address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).commit_transfer_ownership(new_owner)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_transfer_ownership(_pool: address):\r\n    \"\"\"\r\n    @notice Apply transferring ownership of `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).apply_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef revert_transfer_ownership(_pool: address):\r\n    \"\"\"\r\n    @notice Revert commited transferring ownership for `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).revert_transfer_ownership()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_new_parameters(_pool: address,\r\n                          amplification: uint256,\r\n                          new_fee: uint256,\r\n                          new_admin_fee: uint256):\r\n    \"\"\"\r\n    @notice Commit new parameters for `_pool`, A: `amplification`, fee: `new_fee` and admin fee: `new_admin_fee`\r\n    @param _pool Pool address\r\n    @param amplification Amplification coefficient\r\n    @param new_fee New fee\r\n    @param new_admin_fee New admin fee\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).commit_new_parameters(amplification, new_fee, new_admin_fee)  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_new_parameters(_pool: address):\r\n    \"\"\"\r\n    @notice Apply new parameters for `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).apply_new_parameters()  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef revert_new_parameters(_pool: address):\r\n    \"\"\"\r\n    @notice Revert comitted new parameters for `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).revert_new_parameters()  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef commit_new_fee(_pool: address, new_fee: uint256, new_admin_fee: uint256):\r\n    \"\"\"\r\n    @notice Commit new fees for `_pool` pool, fee: `new_fee` and admin fee: `new_admin_fee`\r\n    @param _pool Pool address\r\n    @param new_fee New fee\r\n    @param new_admin_fee New admin fee\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).commit_new_fee(new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef apply_new_fee(_pool: address):\r\n    \"\"\"\r\n    @notice Apply new fees for `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    Curve(_pool).apply_new_fee()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef ramp_A(_pool: address, _future_A: uint256, _future_time: uint256):\r\n    \"\"\"\r\n    @notice Start gradually increasing A of `_pool` reaching `_future_A` at `_future_time` time\r\n    @param _pool Pool address\r\n    @param _future_A Future A\r\n    @param _future_time Future time\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).ramp_A(_future_A, _future_time)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef stop_ramp_A(_pool: address):\r\n    \"\"\"\r\n    @notice Stop gradually increasing A of `_pool`\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.parameter_admin, \"Access denied\"\r\n    Curve(_pool).stop_ramp_A()\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_aave_referral(_pool: address, referral_code: uint256):\r\n    \"\"\"\r\n    @notice Set Aave referral for undelying tokens of `_pool` to `referral_code`\r\n    @param _pool Pool address\r\n    @param referral_code Aave referral code\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).set_aave_referral(referral_code)  # dev: if implemented by the pool\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef donate_admin_fees(_pool: address):\r\n    \"\"\"\r\n    @notice Donate admin fees of `_pool` pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.ownership_admin, \"Access denied\"\r\n    Curve(_pool).donate_admin_fees()  # dev: if implemented by the pool","ABI":"[{\"name\":\"CommitAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"parameter_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyAdmins\",\"inputs\":[{\"type\":\"address\",\"name\":\"ownership_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"parameter_admin\",\"indexed\":false},{\"type\":\"address\",\"name\":\"emergency_admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddBurner\",\"inputs\":[{\"type\":\"address\",\"name\":\"burner\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"commit_set_admins\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_o_admin\"},{\"type\":\"address\",\"name\":\"_p_admin\"},{\"type\":\"address\",\"name\":\"_e_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":108937},{\"name\":\"apply_set_admins\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":111286},{\"name\":\"set_burner\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_burner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":96865},{\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":57985},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_burner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":57330},{\"name\":\"burn_coin\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58287},{\"name\":\"burn_eth\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\",\"gas\":92172},{\"name\":\"kill_me\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59060},{\"name\":\"unkill_me\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59937},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"address\",\"name\":\"new_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59174},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58195},{\"name\":\"revert_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59180},{\"name\":\"commit_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"amplification\"},{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59255},{\"name\":\"apply_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58285},{\"name\":\"revert_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59270},{\"name\":\"commit_new_fee\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59330},{\"name\":\"apply_new_fee\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":58375},{\"name\":\"ramp_A\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"_future_A\"},{\"type\":\"uint256\",\"name\":\"_future_time\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59390},{\"name\":\"stop_ramp_A\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59390},{\"name\":\"set_aave_referral\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"uint256\",\"name\":\"referral_code\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59435},{\"name\":\"donate_admin_fees\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":59450},{\"name\":\"ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1781},{\"name\":\"parameter_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1811},{\"name\":\"emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1841},{\"name\":\"future_ownership_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1871},{\"name\":\"future_parameter_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1901},{\"name\":\"future_emergency_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1931},{\"name\":\"burners\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2115}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.4","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}