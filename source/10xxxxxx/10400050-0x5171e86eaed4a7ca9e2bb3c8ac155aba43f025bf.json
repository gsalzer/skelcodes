{"status":"1","message":"OK","result":[{"SourceCode":"//cDAI-COMP-cUSDT COMPfarming//\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Structs {\r\n    struct Val {\r\n        uint256 value;\r\n    }\r\n\r\n    enum ActionType {\r\n      Deposit,   // supply tokens\r\n      Withdraw,  // borrow tokens\r\n      Transfer,  // transfer balance between accounts\r\n      Buy,       // buy an amount of some token (externally)\r\n      Sell,      // sell an amount of some token (externally)\r\n      Trade,     // trade tokens against another account\r\n      Liquidate, // liquidate an undercollateralized or expiring account\r\n      Vaporize,  // use excess tokens to zero-out a completely negative account\r\n      Call       // send arbitrary data to an address\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei // the amount is denominated in wei\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta // the amount is given as a delta from the current value\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\ninterface Compound {\r\n  function mint(uint mintAmount) external returns (uint);\r\n  function redeem(uint redeemTokens) external returns (uint);\r\n  function borrow(uint borrowAmount) external returns (uint);\r\n  function repayBorrow(uint repayAmount) external returns (uint);\r\n}\r\n\r\ninterface Ceth {\r\n  function mint() payable external;\r\n  function redeem(uint redeemTokens) external returns (uint);\r\n  function borrow(uint borrowAmount) external returns (uint);\r\n  function repayBorrow(uint repayAmount) external returns (uint);\r\n}\r\n\r\ninterface Comptroller {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function checkMembership(address account, address cToken) external view returns (bool);\r\n}\r\n\r\ninterface Wrapped {\r\n  function withdraw(uint wad) external;\r\n  function deposit() payable external;\r\n}\r\n\r\ninterface Uniswap {\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface UniswapRouter {\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract DyDx is Structs {\r\n    function operate(Info[] memory, ActionArgs[] memory) public;\r\n}\r\n\r\ninterface Balancer {\r\n    function gulp(address token) external;\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n}\r\n\r\ncontract COMPfarming is Structs, Ownable  {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  constructor () public {\r\n\r\n  }\r\n\r\n  function claim() payable public {\r\n    Wrapped(weth).deposit.value(address(this).balance)();\r\n    IERC20(weth).approve(unirouter, uint(-1));\r\n\r\n    address[] memory path3 = new address[](2);\r\n        path3[0] = address(weth);\r\n        path3[1] = address(dai);\r\n\r\n    UniswapRouter(unirouter).swapExactTokensForTokens(1e6, 0, path3, address(this), now.add(1800));\r\n\r\n    Uniswap(unirouter).swap(400e18, 0, address(this), abi.encode(msg.sender));\r\n    IERC20(comp).transfer(msg.sender, IERC20(comp).balanceOf(address(this)));\r\n  }\r\n\r\n  address constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    //address constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    address constant unicomp = address(0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f);\r\n    address constant comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n\r\n    address constant cusdt = address(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9);\r\n    address constant usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant dydx = address(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    address constant unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant cdai = address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n\r\n    // Uniswap flash loan callback, triggered to get the COMP, starter function\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        // Got COMP, get rest of flash loans\r\n        setup();\r\n        uint256 _repay = amount0.add(amount0.mul(4).div(1320));\r\n        IERC20(comp).transfer(address(unicomp), _repay);\r\n    }\r\n\r\n        // Flash loans all available amounts from dydx to make sure we have no limitations\r\n    function setup() public {\r\n        // Grab max dydx positions to fix what we can borrow (also used for repayment later)\r\n        IERC20(weth).approve(dydx, uint(-1));\r\n\r\n        uint256 _weth = IERC20(weth).balanceOf(dydx);\r\n\r\n        ActionArgs[] memory args = new ActionArgs[](3);\r\n\r\n        Info[] memory infos = new Info[](1);\r\n        infos[0] = Info(address(this), 0);\r\n\r\n        // Withdraw WETH\r\n        ActionArgs memory _wweth;\r\n        _wweth.actionType = ActionType.Withdraw;\r\n        _wweth.accountId = 0;\r\n        _wweth.amount = AssetAmount(false, AssetDenomination.Wei, AssetReference.Delta, _weth);\r\n        _wweth.primaryMarketId = 0;\r\n        _wweth.otherAddress = address(this);\r\n\r\n        args[0] = _wweth;\r\n\r\n        // Callback for this contract to deposit into compound, balancer, and withdraw COMP\r\n        ActionArgs memory call;\r\n        call.actionType = ActionType.Call;\r\n        call.accountId = 0;\r\n        call.otherAddress = address(this);\r\n\r\n        args[1] = call;\r\n\r\n        // Deposit wETH with 1 smallest denominination added\r\n        ActionArgs memory _dweth;\r\n        _dweth.actionType = ActionType.Deposit;\r\n        _dweth.accountId = 0;\r\n        _dweth.amount = AssetAmount(true, AssetDenomination.Wei, AssetReference.Delta, _weth.add(1));\r\n        _dweth.primaryMarketId = 0;\r\n        _dweth.otherAddress = address(this);\r\n\r\n        args[2] = _dweth;\r\n\r\n        // With the array populated of what we want to do (borrow DAI, USDC, wETH), callback function, repay, we can call dydx\r\n        DyDx(dydx).operate(infos, args);\r\n    }\r\n\r\n    address constant ceth = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    address constant comptroller = address(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    uint256 usdtBorrow = 5000000;\r\n    uint256 daiBorrow = 5000000;\r\n\r\n    function () external payable {}\r\n\r\n    // This function is called after we receive all the funds and before we repay all the funds, here we do\r\n    // all the compound work and settle the funds to return\r\n    function callFunction(\r\n      address sender,\r\n      Info memory accountInfo,\r\n      bytes memory data\r\n    ) public {\r\n\r\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n        // Convert WETH to ETH\r\n        Wrapped(weth).withdraw(_weth);\r\n\r\n        IERC20(usdt).approve(cusdt, uint256(-1));\r\n        IERC20(dai).approve(cdai, uint256(-1));\r\n\r\n        Ceth(ceth).mint.value(address(this).balance)();\r\n\r\n\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = address(ceth);\r\n        Comptroller(comptroller).enterMarkets(markets);\r\n\r\n        Compound(cdai).borrow(daiBorrow.mul(1e18));\r\n        Compound(cusdt).borrow(usdtBorrow.mul(1e8));\r\n\r\n        Compound(cdai).mint(IERC20(dai).balanceOf(address(this)));\r\n\r\n        redeemAll();\r\n\r\n        Compound(cdai).redeem(IERC20(cdai).balanceOf(address(this)));\r\n\r\n        Compound(cusdt).repayBorrow(uint256(-1));\r\n        Compound(cdai).repayBorrow(uint256(-1));\r\n\r\n        Compound(ceth).redeem(IERC20(ceth).balanceOf(address(this)));\r\n        Wrapped(weth).deposit.value(address(this).balance)();\r\n    }\r\n\r\n    function redeemAll() internal {\r\n        redeem(0xCBdc3BDf78C1dF509F94F1F52cc5c5C093d4322b);\r\n    }\r\n\r\n    function redeem(address pool) internal {\r\n\r\n        IERC20(cdai).approve(pool, uint256(-1));\r\n        IERC20(comp).approve(pool, uint256(-1));\r\n        IERC20(usdt).approve(pool, uint256(-1));\r\n\r\n        uint256 _bal = IERC20(comp).balanceOf(address(this));\r\n        uint256 _pbal = IERC20(comp).balanceOf(pool);\r\n        uint256 _total = IERC20(pool).totalSupply();\r\n        uint256 _ratio = (((_total.mul(_bal)).div(_pbal)).mul(999)).div(1000);\r\n\r\n        uint[] memory maxAmounts = new uint[](3);\r\n            maxAmounts[0] = uint(-1);\r\n            maxAmounts[1] = uint(-1);\r\n            maxAmounts[2] = uint(-1);\r\n        Balancer(pool).joinPool(_ratio, maxAmounts);\r\n\r\n        Balancer(pool).gulp(comp);\r\n\r\n        uint[] memory minAmounts = new uint[](3);\r\n            minAmounts[0] = uint(0);\r\n            minAmounts[1] = uint(0);\r\n            minAmounts[2] = uint(0);\r\n        Balancer(pool).exitPool(IERC20(pool).balanceOf(address(this)), minAmounts);\r\n    }\r\n\r\n    // incase of half-way error\r\n  function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n      uint qty = _TokenAddress.balanceOf(address(this));\r\n      _TokenAddress.safeTransfer(msg.sender, qty);\r\n  }\r\n\r\n  // incase of half-way error\r\n  function inCaseETHGetsStuck() onlyOwner public{\r\n      (bool result, ) = msg.sender.call.value(address(this).balance)(\"\");\r\n      require(result, \"transfer of ETH failed\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inCaseETHGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"COMPfarming","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f42d1f7381f5d13765a59afb35775476f9e517117c6ac0c2b99afabfeb555400"}]}