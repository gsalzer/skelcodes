{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n\r\n  address newOwner;\r\n  mapping (address=>bool) owners;\r\n  address owner;\r\n\r\n// all events will be saved as log files\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner,string name);\r\n  event RemoveOwner(address owner);\r\n\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{\r\n    require(owners[_newOwner] == false);\r\n    require(newOwner != msg.sender);\r\n    owners[_newOwner] = true;\r\n    emit AddOwner(_newOwner,newOwnerName);\r\n  }\r\n\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender);  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract POOLS{\r\n    function totalInterest() public view returns(uint256);\r\n    function totalClaimInterest() public view returns(uint256);\r\n    // uint256 public supplyInterest;\r\n    function totalSupply() public view returns(uint256);\r\n    function totalBorrow() public view returns(uint256);\r\n    function startPools() public view returns(uint256);\r\n    function borrowInterest() public view returns(uint256);\r\n    \r\n    function getMaxDepositContract(address _addr) public view returns(uint256 _max);\r\n    function getAllDepositIdx(address _addr) public view returns(uint256[] memory _idx);\r\n    function getDepositDataIdx(uint256 idx) public view returns(uint256[] memory _data);\r\n    function minimumDeposit() public view returns(uint256);\r\n    \r\n    function getMaxInterestData() public view returns(uint256);\r\n    function interests(uint256 _idx) public view returns(uint256,uint256);\r\n}\r\n\r\n\r\n\r\n \r\n\r\n\r\ncontract LoanInterestCal is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public SECPYEAR = 31536000;\r\n    uint256 public version = 4;\r\n    \r\n    struct InterestStruct{\r\n        uint256 startTime;\r\n        uint256 interest;\r\n    }\r\n\r\n    // New version pay in advance\r\n     function _interest(uint256 _amount,uint256 _intPY,uint256 _time) public view returns(uint256 fullInt){\r\n      \r\n\r\n      fullInt = _intPY / SECPYEAR / 100;\r\n      fullInt = (fullInt * _time); //fullInt.mul(_amount,decimal);\r\n      fullInt = fullInt.mul(_amount,18);\r\n\r\n     }\r\n     \r\n    \r\n     function getInterest(address _contract,address _addr) public view returns(uint256){\r\n            POOLS  pool = POOLS(_contract);\r\n            uint256 maxIdx = pool.getMaxDepositContract(_addr);\r\n            uint256 maxInt = pool.getMaxInterestData();\r\n            \r\n            uint256[] memory idxs = new uint256[](maxIdx);\r\n            InterestStruct[] memory ints = new InterestStruct[](maxInt);\r\n            \r\n            \r\n            idxs = pool.getAllDepositIdx(_addr);\r\n            \r\n            for(uint256 i=0;i<maxInt;i++){\r\n                (ints[i].startTime,ints[i].interest) = pool.interests(i);\r\n            }\r\n            \r\n            uint256 totalInterest;\r\n            \r\n            uint256 _depositTime;\r\n            uint256[] memory _data = new uint256[](3);\r\n            \r\n        \r\n            for(uint256 i=0;i<maxIdx;i++){\r\n                _data = pool.getDepositDataIdx(idxs[i]-1);\r\n             \r\n                \r\n                if(maxInt == 1){\r\n                   _depositTime = now - _data[1];\r\n                   totalInterest += _interest(_data[0],ints[0].interest,_depositTime);\r\n                }\r\n                else\r\n                {\r\n                    for(uint256 j=1;j<maxInt;j++){\r\n                        if(ints[j].startTime > _data[1])\r\n                        {\r\n                            if(_data[1] >= ints[j-1].startTime){\r\n                                _depositTime = ints[j].startTime - _data[1];\r\n                                totalInterest += _interest(_data[0],ints[j-1].interest,_depositTime);\r\n                            }\r\n                            else\r\n                            {\r\n                                _depositTime = ints[j].startTime - ints[j-1].startTime; \r\n                                totalInterest += _interest(_data[0],ints[j-1].interest,_depositTime);\r\n                            }\r\n                            \r\n                            if(j== maxInt - 1)\r\n                            {\r\n                                _depositTime = now - ints[j].startTime;\r\n                                totalInterest += _interest(_data[0],ints[j].interest,_depositTime);\r\n                            }\r\n                        }else\r\n                        if(j == maxInt - 1){ // last index\r\n                             _depositTime = now - _data[1];\r\n                             totalInterest += _interest(_data[0],ints[j].interest,_depositTime);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n           \r\n              \r\n            }\r\n            return totalInterest;\r\n\r\n    }\r\n    \r\n    function getWithdrawInterest(address _contract,address _addr) public view returns(uint256){\r\n             POOLS  pool = POOLS(_contract);\r\n            uint256 maxIdx = pool.getMaxDepositContract(_addr);\r\n            uint256 maxInt = pool.getMaxInterestData();\r\n            \r\n            uint256[] memory idxs = new uint256[](maxIdx);\r\n            InterestStruct[] memory ints = new InterestStruct[](maxInt);\r\n            \r\n            \r\n            idxs = pool.getAllDepositIdx(_addr);\r\n            \r\n            for(uint256 i=0;i<maxInt;i++){\r\n                (ints[i].startTime,ints[i].interest) = pool.interests(i);\r\n            }\r\n            \r\n            uint256 totalInterest;\r\n            \r\n            uint256 _depositTime;\r\n            uint256[] memory _data = new uint256[](3);\r\n            \r\n        \r\n            for(uint256 i=0;i<maxIdx;i++){\r\n                _data = pool.getDepositDataIdx(idxs[i]-1);\r\n                if(_data[0] == 0) continue;\r\n                \r\n                if(maxInt == 1){\r\n                   _depositTime = now - _data[1];\r\n                   if(_depositTime >= _data[2])\r\n                     totalInterest += _interest(_data[0],ints[0].interest,_depositTime);\r\n                }\r\n                else\r\n                {\r\n                    for(uint256 j=1;j<maxInt;j++){\r\n                        _depositTime = now - _data[1];\r\n                        if(_depositTime < _data[2])\r\n                           continue;\r\n                           \r\n                        if(ints[j].startTime > _data[1])\r\n                        {\r\n                            if(_data[1] >= ints[j-1].startTime){\r\n                                _depositTime = ints[j].startTime - _data[1];\r\n                                totalInterest += _interest(_data[0],ints[j-1].interest,_depositTime);\r\n                            }\r\n                            else\r\n                            {\r\n                                _depositTime = ints[j].startTime - ints[j-1].startTime; \r\n                                totalInterest += _interest(_data[0],ints[j-1].interest,_depositTime);\r\n                            }\r\n                            \r\n                            if(j== maxInt - 1)\r\n                            {\r\n                                _depositTime = now - ints[j].startTime;\r\n                                totalInterest += _interest(_data[0],ints[j].interest,_depositTime);\r\n                            }\r\n                        }else\r\n                        if(j == maxInt - 1){ // last index\r\n                             _depositTime = now - _data[1];\r\n                             totalInterest += _interest(_data[0],ints[j].interest,_depositTime);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n     \r\n              \r\n            }\r\n            return totalInterest;\r\n\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECPYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"_interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullInt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getWithdrawInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanInterestCal","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6d17a07beca787303486a32909dfbcfcae9d09e5f7bc736b671dd24f498048d5"}]}