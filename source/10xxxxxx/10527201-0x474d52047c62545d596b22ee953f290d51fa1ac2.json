{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/*\r\nBuy HTK tokens by sending funds to this address, or visit www.HonestLabs.win\r\nThis is a Honest Token Sale Contract.\r\nThis contract holds HTK tokens and sell them at a given price (depending on if Pre-ICO, ICO or amount)\r\nThis contract holds HTK tokens because the HTK contract has mint them to this address.\r\n\r\n /$$   /$$                                          /$$           /$$                 /$$                \r\n| $$  | $$                                         | $$          | $$                | $$                \r\n| $$  | $$  /$$$$$$  /$$$$$$$   /$$$$$$   /$$$$$$$/$$$$$$        | $$        /$$$$$$ | $$$$$$$   /$$$$$$$\r\n| $$$$$$$$ /$$__  $$| $$__  $$ /$$__  $$ /$$_____/_  $$_/        | $$       |____  $$| $$__  $$ /$$_____/\r\n| $$__  $$| $$  \\ $$| $$  \\ $$| $$$$$$$$|  $$$$$$  | $$          | $$        /$$$$$$$| $$  \\ $$|  $$$$$$ \r\n| $$  | $$| $$  | $$| $$  | $$| $$_____/ \\____  $$ | $$ /$$      | $$       /$$__  $$| $$  | $$ \\____  $$\r\n| $$  | $$|  $$$$$$/| $$  | $$|  $$$$$$$ /$$$$$$$/ |  $$$$/      | $$$$$$$$|  $$$$$$$| $$$$$$$/ /$$$$$$$/\r\n|__/  |__/ \\______/ |__/  |__/ \\_______/|_______/   \\___/        |________/ \\_______/|_______/ |_______/ \r\n                                                                                                         \r\n                                                                                                         \r\n                                                                                                       \r\n                                                                                                                                                                              \r\nVisit our website and buy HTK using the ICO user interface at www.HonestLabs.win\r\nVisit our first game in www.HonestTree.win\r\n\r\nContact us in our Telegram Group: https://t.me/HonestLabs\r\n\r\n\r\n\r\n\r\n\r\nHTK token sale (ICO) contract address: (this)= 0x474d52047c62545d596b22ee953f290d51fa1ac2\r\n\r\nHTK token contract address: 0x24619b932ff015852a6f472f949a7c959650f21c\r\n\r\n\r\nIf you hold HTK, you will earn all dividends that will be paid to the token contract Address\r\nThe first project to do this is the Honest Tree Game\r\nVisit www.honesttree.win\r\n\r\n*/\r\n\r\n\r\n\r\n// File: contracts/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\r\n\r\n// Licence: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin-contracts/contracts/GSN/Context.sol\r\n\r\n// Licence: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin-contracts/contracts/access/Ownable.sol\r\n\r\n// Licence: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/HTK_Sale_Contract.sol\r\n// Licence: MIT\r\npragma solidity 0.6.10;\r\n\r\n// We first set an ERC20 contact interface with the functions that we'll use\r\ninterface HTK_Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool); //token transfer function\r\n    function decimals() external returns (uint256);\r\n    function withdrawFunds() external;\r\n}\r\n\r\n\r\n\r\n\r\ncontract HTK_TokenSale is ReentrancyGuard, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    HTK_Token public HTK_tokenContract;   // The HTK Token\r\n    address payable public HTK_tokenContract_address; // Is the same address, but now as an payable address object \r\n    \r\n    uint public pre_ICO_deadline;\r\n    uint public ICO_deadline;\r\n    \r\n    \r\n    uint256 public HTK_tokensSold;          // Number of tokens already sold\r\n\r\n    event HTK_tokenSold(address buyer, uint256 amount);\r\n    \r\n    constructor(HTK_Token _HTK_tokenContract, address payable _HTK_tokenContract_address) public {\r\n        HTK_tokenContract=_HTK_tokenContract;\r\n        HTK_tokenContract_address=_HTK_tokenContract_address;\r\n        HTK_tokensSold=0;\r\n        \r\n        \r\n        //Epoch timestamp:  1601510399\r\n        // Date and time (GMT): Wednesday, September 30, 2020 23:59:59 \r\n        pre_ICO_deadline=1601510399;\r\n        \r\n        \r\n        //Epoch timestamp: 1609459199\r\n        //Date and time (GMT): Thursday, December 31, 2020 23:59:59 \r\n        ICO_deadline=1609459199;\r\n        \r\n        // \r\n    }\r\n\r\n    fallback() external payable {\r\n        //The same Token Contract Address should not buy tokens itself :D\r\n        if (msg.sender !=HTK_tokenContract_address){\r\n            buyHTK_Tokens();\r\n        }\r\n        \r\n    }\r\n    \r\n    receive() external payable {\r\n        //The same Token Contract Address should not buy tokens itself :D\r\n        if (msg.sender !=HTK_tokenContract_address){\r\n            buyHTK_Tokens();\r\n        }\r\n    }\r\n\r\n    \r\n    function buyHTK_Tokens()\r\n        public\r\n        payable\r\n        nonReentrant {\r\n            uint _date = now;\r\n            uint256 _tokensAmount = getTokenAmount(msg.value, _date);\r\n            \r\n            require(HTK_tokenContract.balanceOf(address(this)) >= _tokensAmount,\r\n                'I dont have such amount, please check my balance and try to buy less tokens');\r\n    \r\n            emit HTK_tokenSold(msg.sender, _tokensAmount);\r\n            HTK_tokensSold = HTK_tokensSold.add(_tokensAmount);\r\n    \r\n            require(HTK_tokenContract.transfer(msg.sender, _tokensAmount),'Error while transfering tokens');\r\n    }\r\n    \r\n    \r\n    function getTokenAmount(uint256 _weiAmount, uint _date) public view returns(uint256){\r\n        if (_date<pre_ICO_deadline){\r\n            return _weiAmount.mul(1250); // 1ETH = 1250 HTK    \r\n        }\r\n        \r\n        else{ // During ICO, there are different bonuses:\r\n        \r\n            if (_weiAmount<=100000000000000000){ // from 0 to 0.1 ETH\r\n                return  _weiAmount.mul(1000); \r\n            }\r\n            else if ((_weiAmount>100000000000000000) && (_weiAmount<=1000000000000000000)){ // from 0.1 to 1 ETH\r\n                return  _weiAmount.mul(1100);  // 10% Bonus\r\n            }\r\n            else if ((_weiAmount>1000000000000000000) && (_weiAmount<=10000000000000000000)){ // from 1 to 10 ETH\r\n                return _weiAmount.mul(1200); // 20% Bonus\r\n            }\r\n            \r\n            else if ((_weiAmount>10000000000000000000)){ // More than 10 ETH\r\n                return _weiAmount.mul(1300); // 20% Bonus\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function withdrawICOFunds() public onlyOwner nonReentrant {\r\n        // funds will only be withdrawn after pre ICO\r\n        require(now>pre_ICO_deadline, 'Too early my friend');\r\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function endSale() public onlyOwner nonReentrant{\r\n        // Only after ICO deadline\r\n        require(now>ICO_deadline, 'Too early my friend');\r\n        require(HTK_tokenContract.transfer(owner(), HTK_tokenContract.balanceOf(address(this))));\r\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n    \r\n    function getDistributedFundsOfNotYesSoldTokens() public onlyOwner nonReentrant {\r\n        HTK_tokenContract.withdrawFunds();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n// Licence: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract HTK_Token\",\"name\":\"_HTK_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_HTK_tokenContract_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HTK_tokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"HTK_tokenContract\",\"outputs\":[{\"internalType\":\"contract HTK_Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HTK_tokenContract_address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HTK_tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICO_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyHTK_Tokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributedFundsOfNotYesSoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pre_ICO_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawICOFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HTK_TokenSale","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024619b932ff015852a6f472f949a7c959650f21c00000000000000000000000024619b932ff015852a6f472f949a7c959650f21c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38b768c3e4e3ea3714305234b059fec6834d2bc85df65bd1f96cc8b7301ad812"}]}