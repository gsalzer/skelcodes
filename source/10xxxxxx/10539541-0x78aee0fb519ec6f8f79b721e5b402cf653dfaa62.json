{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract EParadise {\r\n    \r\n  address private owner; \r\n  address insuranceAddr = address(0x84152212d2c139300A3271B86aE1F27c95645360);\r\n  address teamAddr = address(0x83db40eE5A3C1bbdf30a392201d8cA0A9BdBC13b);\r\n  address saintAddr = address(0xA028822B0425e61AF155f089cB6837deEffaddf1);\r\n   \r\n  struct Account {\r\n        address user;\r\n        uint256 depositTotal;\r\n        uint256 creditBalance;\r\n    }\r\n   \r\n  mapping (address => Account) public accounts;\r\n   \r\n  constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n   \r\n  modifier isRegister(address _user) {\r\n        require(accounts[_user].user!=address(0), \"Address not register!\");\r\n        _;\r\n    }\r\n    \r\n  modifier onlyRegisteredUser(address _user) {\r\n        require(accounts[_user].user == address(0), \"Address not register!\");\r\n        _;\r\n  }\r\n   \r\n  modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n  }\r\n    \r\n  function doInvest() public payable {\r\n    \r\n    if (accounts[msg.sender].user != 0) {\r\n        accounts[msg.sender].depositTotal += msg.value;\r\n        \r\n    }\r\n    else {\r\n        accounts[msg.sender].user = msg.sender;\r\n        accounts[msg.sender].depositTotal = msg.value;\r\n    }\r\n    \r\n    sendFee(msg.value);\r\n  }\r\n  \r\n  function sendFee(uint amount) private {\r\n        \r\n        uint256 c = amount * 10 / 100;\r\n        saintAddr.transfer(c);\r\n        \r\n        c = amount * 2 / 100;\r\n        insuranceAddr.transfer(c);\r\n        \r\n        c = amount * 5 / 100;\r\n        teamAddr.transfer(c);\r\n  }\r\n  \r\n  function sendRewards(address _user,uint256 amount) public onlyOwner returns(bool) {\r\n        if(_user==address(0)){\r\n            _user=owner;\r\n        }\r\n        \r\n        accounts[_user].creditBalance += amount;\r\n        return true;\r\n  }\r\n  \r\n  function getBalance(address _user) public view returns (uint256 balance, uint256 depositTotal) {\r\n     balance = accounts[_user].creditBalance;\r\n     depositTotal = accounts[_user].depositTotal;\r\n  }\r\n  \r\n  function WithdrawReward() public payable {\r\n     if(address(this).balance > accounts[msg.sender].creditBalance){\r\n        msg.sender.transfer(accounts[msg.sender].creditBalance);\r\n        accounts[msg.sender].creditBalance=0;\r\n    }\r\n  }\r\n  \r\n  function getTime() public view returns(uint256) {\r\n    return block.timestamp; \r\n  }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"doInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"name\":\"creditBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"depositTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EParadise","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a779b3528f52b165ec679069393f167b902d39433019cb89ec0d36b0c5d112ea"}]}