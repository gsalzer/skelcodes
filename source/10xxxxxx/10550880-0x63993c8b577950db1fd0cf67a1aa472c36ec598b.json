{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.7;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint) {\r\n    uint c = add(a,m);\r\n    uint d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\nabstract contract ERC20Token {\r\n  function totalSupply()  public virtual returns (uint);\r\n  function approve(address spender, uint value)  public virtual returns (bool);\r\n  function balanceOf(address owner) public virtual returns (uint);\r\n  function transferFrom (address from, address to, uint value) public virtual returns (bool);\r\n}\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ncontract TokenLocker  {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    uint ONE_DAY = 60*60*24;\r\n   \r\n    mapping(address => mapping(uint => lockedTokenSlot)) public lockedTokensData; //address to timestamp to data\r\n\r\n    struct lockedTokenSlot {\r\n        address tokenAddress;\r\n        uint quantity;\r\n        uint unlockTime;\r\n    }\r\n    \r\n    fallback()  external payable {\r\n        revert();\r\n    } \r\n    \r\n    function lockToken(uint slot, address tokenAddress, uint lockDays, uint lockQty) external {\r\n        require(lockedTokensData[msg.sender][slot].quantity == 0,\"slotIndexAlreadyTaken\");\r\n        //use bal before-after for FeeOnTransfer safety\r\n        uint oldBalance = ERC20Token(tokenAddress).balanceOf(address(this));\r\n        ERC20Token(tokenAddress).transferFrom(address(msg.sender), address(this), lockQty);\r\n        uint newBalance = ERC20Token(tokenAddress).balanceOf(address(this));\r\n        uint realAmount = newBalance.sub(oldBalance);\r\n        uint finishTime = now + (lockDays*ONE_DAY);\r\n        lockedTokensData[msg.sender][slot] = lockedTokenSlot(tokenAddress, realAmount, finishTime);\r\n    }\r\n    \r\n    function unlockToken(uint slot) external {\r\n        require(lockedTokensData[msg.sender][slot].unlockTime <= now, \"timeNotElapsed\");\r\n        uint withdrawAmount = lockedTokensData[msg.sender][slot].quantity;\r\n        lockedTokensData[msg.sender][slot].quantity = 0;\r\n        ERC20Token(lockedTokensData[msg.sender][slot].tokenAddress).approve(address(this),withdrawAmount);\r\n        ERC20Token(lockedTokensData[msg.sender][slot].tokenAddress).transferFrom(address(this),address(msg.sender),withdrawAmount);        \r\n    }\r\n}","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockQty\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokensData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenLocker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://41001a9365e87bc99589385618765dd3fd1be4160ab09d80fd3d868fee885809"}]}