{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IDODO.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IDODO {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function claimOwnership() external;\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\r\n\r\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllBase() external returns (uint256);\r\n\r\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllQuote() external returns (uint256);\r\n\r\n    function _BASE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n}\r\n\r\n// File: contracts/helper/CloneFactory.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/DODOZoo.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DODOZoo\r\n * @author DODO Breeder\r\n *\r\n * @notice Register of All DODO\r\n */\r\ncontract DODOZoo is Ownable {\r\n    address public _DODO_LOGIC_;\r\n    address public _CLONE_FACTORY_;\r\n\r\n    address public _DEFAULT_SUPERVISOR_;\r\n\r\n    mapping(address => mapping(address => address)) internal _DODO_REGISTER_;\r\n    address[] public _DODOs;\r\n\r\n    // ============ Events ============\r\n\r\n    event DODOBirth(address newBorn, address baseToken, address quoteToken);\r\n\r\n    // ============ Constructor Function ============\r\n\r\n    constructor(\r\n        address _dodoLogic,\r\n        address _cloneFactory,\r\n        address _defaultSupervisor\r\n    ) public {\r\n        _DODO_LOGIC_ = _dodoLogic;\r\n        _CLONE_FACTORY_ = _cloneFactory;\r\n        _DEFAULT_SUPERVISOR_ = _defaultSupervisor;\r\n    }\r\n\r\n    // ============ Admin Function ============\r\n\r\n    function setDODOLogic(address _dodoLogic) external onlyOwner {\r\n        _DODO_LOGIC_ = _dodoLogic;\r\n    }\r\n\r\n    function setCloneFactory(address _cloneFactory) external onlyOwner {\r\n        _CLONE_FACTORY_ = _cloneFactory;\r\n    }\r\n\r\n    function setDefaultSupervisor(address _defaultSupervisor) external onlyOwner {\r\n        _DEFAULT_SUPERVISOR_ = _defaultSupervisor;\r\n    }\r\n\r\n    function removeDODO(address dodo) external onlyOwner {\r\n        address baseToken = IDODO(dodo)._BASE_TOKEN_();\r\n        address quoteToken = IDODO(dodo)._QUOTE_TOKEN_();\r\n        require(isDODORegistered(baseToken, quoteToken), \"DODO_NOT_REGISTERED\");\r\n        _DODO_REGISTER_[baseToken][quoteToken] = address(0);\r\n        for (uint256 i = 0; i < _DODOs.length - 1; i++) {\r\n            if (_DODOs[i] == dodo) {\r\n                _DODOs[i] = _DODOs[_DODOs.length - 1];\r\n                _DODOs.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addDODO(address dodo) public onlyOwner {\r\n        address baseToken = IDODO(dodo)._BASE_TOKEN_();\r\n        address quoteToken = IDODO(dodo)._QUOTE_TOKEN_();\r\n        require(!isDODORegistered(baseToken, quoteToken), \"DODO_REGISTERED\");\r\n        _DODO_REGISTER_[baseToken][quoteToken] = dodo;\r\n        _DODOs.push(dodo);\r\n    }\r\n\r\n    // ============ Breed DODO Function ============\r\n\r\n    function breedDODO(\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external onlyOwner returns (address newBornDODO) {\r\n        require(!isDODORegistered(baseToken, quoteToken), \"DODO_REGISTERED\");\r\n        newBornDODO = ICloneFactory(_CLONE_FACTORY_).clone(_DODO_LOGIC_);\r\n        IDODO(newBornDODO).init(\r\n            _OWNER_,\r\n            _DEFAULT_SUPERVISOR_,\r\n            maintainer,\r\n            baseToken,\r\n            quoteToken,\r\n            oracle,\r\n            lpFeeRate,\r\n            mtFeeRate,\r\n            k,\r\n            gasPriceLimit\r\n        );\r\n        addDODO(newBornDODO);\r\n        emit DODOBirth(newBornDODO, baseToken, quoteToken);\r\n        return newBornDODO;\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function isDODORegistered(address baseToken, address quoteToken) public view returns (bool) {\r\n        if (\r\n            _DODO_REGISTER_[baseToken][quoteToken] == address(0) &&\r\n            _DODO_REGISTER_[quoteToken][baseToken] == address(0)\r\n        ) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getDODO(address baseToken, address quoteToken) external view returns (address) {\r\n        return _DODO_REGISTER_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOs() external view returns (address[] memory) {\r\n        return _DODOs;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultSupervisor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"DODOBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_SUPERVISOR_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_LOGIC_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_DODOs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dodo\",\"type\":\"address\"}],\"name\":\"addDODO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"breedDODO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newBornDODO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getDODO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDODOs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"isDODORegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dodo\",\"type\":\"address\"}],\"name\":\"removeDODO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"}],\"name\":\"setCloneFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoLogic\",\"type\":\"address\"}],\"name\":\"setDODOLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultSupervisor\",\"type\":\"address\"}],\"name\":\"setDefaultSupervisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DODOZoo","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f6a8e47daeeddcce297e7541523e27df2f167bf30000000000000000000000005e5a7b76462e4bdf83aa98795644281bdba80b880000000000000000000000009c59990ec0177d87ed7d60a56f584e6b06c639a2","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://858e3418b47c1cdc82da1bedf16332e4327c780546912171ffb5452fc48f8e21"}]}