{"status":"1","message":"OK","result":[{"SourceCode":"////////////////////////////////////////////////////\r\n//******** In the name of god **********************\r\n//******** https://Helixnebula.help  ***************\r\n////p2p blockchain based helping system/////////////\r\n////////////Lottery for EOG Holders/////////////////\r\n//This is an endless profitable cycle for everyone//\r\n////Contact us: support@helixnebula.help////////////\r\n////////////////////////////////////////////////////\r\n\r\npragma solidity ^0.5.0;\r\ncontract EIP20Interface {\r\n    \r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\ncontract EOGLottery\r\n{\r\n    address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;\r\n    address owner;\r\n    address public LastMaxWinner;\r\n    address public LastLotteryWinner;\r\n    uint public MinEOG = 5*10**18;\r\n    uint private seed;\r\n    uint public ChargedETH;\r\n    address payable[]  private Competitors;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    constructor() public {\r\n        owner=msg.sender;\r\n    }\r\n    function transferOwnership(address payable _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    function GetUserPoints(address _adr) external view returns(uint){\r\n        for(uint i=0 ;i < Competitors.length;i++){\r\n            if( _adr==Competitors[i]){\r\n                return EIP20Interface(EOGAddress).balanceOf(_adr);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function ChangeMinEog(uint _newval,uint _seed) external onlyOwner{\r\n        MinEOG=_newval;\r\n        seed=_seed;\r\n    }\r\n    \r\n    function GetPoints() public view returns(uint){\r\n        uint Maxrand=0;\r\n        for(uint i=0 ;i < Competitors.length;i++){\r\n            if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){\r\n                Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\r\n            }\r\n        }\r\n        return Maxrand;\r\n    }\r\n    function chargeLottery() public payable {\r\n        ChargedETH=msg.value;\r\n    }\r\n    function Random(uint max) public view returns(uint){\r\n        uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max;\r\n        return randomnumber;\r\n    }\r\n    function GetMaxHolder() public view returns(address payable){\r\n       address payable MaxHolder;\r\n       MaxHolder=Competitors[0];\r\n        for(uint i=1 ;i < Competitors.length;i++){\r\n            if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){\r\n                MaxHolder=Competitors[i];\r\n            }\r\n        }\r\n        return MaxHolder;\r\n    }\r\n    function StartLottery() external onlyOwner{\r\n        uint RandNum=Random(GetPoints());\r\n        uint counter=0;\r\n        for(uint i=0 ;i < Competitors.length;i++){\r\n            if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){\r\n                uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\r\n                if(RandNum < counter+tempnum && RandNum >= counter){\r\n                    //uint256 Balance=address(this).balance;\r\n                    if(Competitors[i] != LastLotteryWinner){\r\n                        Competitors[i].transfer((address(this).balance/4)*3);\r\n                        LastLotteryWinner=Competitors[i];\r\n                    }\r\n                    if(Competitors[i] != LastMaxWinner){\r\n                        address payable MaxHold=GetMaxHolder();\r\n                        MaxHold.transfer(address(this).balance);\r\n                        LastMaxWinner=MaxHold;\r\n                    }\r\n                }else{\r\n                    counter += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function ExistCompetitor(address _adr) internal view returns(bool){\r\n        for(uint i=0 ;i < Competitors.length;i++){\r\n            if(Competitors[i]==_adr){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function Register() public {\r\n        require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);\r\n        require(ExistCompetitor(msg.sender) == false);\r\n        Competitors.push(msg.sender);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"ChangeMinEog\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ChargedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaxHolder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"GetUserPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastLotteryWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastMaxWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinEOG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"chargeLottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EOGLottery","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://485d10546df3b86ddbb1be297173c2c9555d8b0b35a6f7c888f1c73cd11e5b77"}]}