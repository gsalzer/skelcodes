{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.1 <0.7.0;\r\n\r\ncontract KOwnerable {\r\n    address[] public _KContractOwners = [\r\n                address(0x7630A0f21Ac2FDe268eF62eBb1B06876DFe71909)\r\n    ];\r\n    constructor() public {\r\n        _KContractOwners.push(msg.sender);\r\n    }\r\n    modifier KOwnerOnly() {\r\n        bool exist = false;\r\n        for ( uint i = 0; i < _KContractOwners.length; i++ ) {\r\n            if ( _KContractOwners[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n        require(exist); _;\r\n    }\r\n    modifier KDAODefense() {\r\n        uint256 size;\r\n        address payable safeAddr = msg.sender;\r\n        assembly {size := extcodesize(safeAddr)}\r\n        require( size == 0, \"DAO_Warning\" );\r\n        _;\r\n    }\r\n}\r\ncontract KState is KOwnerable {\r\n    uint public _CIDXX;\r\n    Hosts public _KHost;\r\n    constructor(uint cidxx) public {\r\n        _CIDXX = cidxx;\r\n    }\r\n}\r\ncontract KContract is KState {\r\n    modifier readonly {_;}\r\n    modifier readwrite {_;}\r\n    function implementcall() internal {\r\n        (bool s, bytes memory r) = _KHost.getImplement(_CIDXX).delegatecall(msg.data);\r\n        require(s);\r\n        assembly {\r\n            return( add(r, 0x20), returndatasize )\r\n        }\r\n    }\r\n    function implementcall(uint subimplID) internal {\r\n        (bool s, bytes memory r) = _KHost.getImplementSub(_CIDXX, subimplID).delegatecall(msg.data);\r\n        require(s);\r\n        assembly {\r\n            return( add(r, 0x20), returndatasize )\r\n        }\r\n    }\r\n        function _D(bytes calldata, uint m) external KOwnerOnly returns (bytes memory) {\r\n        implementcall(m);\r\n    }\r\n}\r\npragma solidity >=0.5.0 <0.6.0;\r\ninterface USDTInterface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n        function transfer(address to, uint value) external;\r\n    function approve(address spender, uint value) external;\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface AssertPoolInterface{\r\n    enum AssertPoolName {\r\n        Nullable,\r\n                Prepare,\r\n                Treasure,\r\n                Awards,\r\n                Events\r\n    }\r\n        function PoolNameFromOperator(address operator) external returns (AssertPoolName);\r\n        function Allowance(address operator) external returns (uint);\r\n        function OperatorSend(address to, uint amount) external;\r\n        function Auth_RecipientDelegate(uint amount) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract AssertPoolState is AssertPoolInterface, KState(0xbdfa5467) {\r\n        uint[5] public matchings = [\r\n        0,\r\n        0.2 szabo,\r\n        0.2 szabo,\r\n        0.4 szabo,\r\n        0.2 szabo\r\n    ];\r\n        uint[5] public availTotalAmouns = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0\r\n    ];\r\n        address[5] public operators = [\r\n        address(0x0),\r\n        address(0x0),\r\n        address(0x0),\r\n        address(0x0),\r\n        address(0x0)\r\n    ];\r\n    USDTInterface internal usdtInterface;\r\n    address internal authAddress;\r\n}\r\ncontract Hosts {\r\n    address public owner;\r\n    mapping(uint => mapping(uint => address)) internal impls;\r\n    mapping(uint => uint) internal time;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n    function latestTime(uint CIDXX) external view restricted returns (uint) {\r\n        return time[CIDXX];\r\n    }\r\n    function setImplement(uint CIDXX, address implementer) external restricted {\r\n        time[uint(CIDXX)] = now;\r\n        impls[uint(CIDXX)][0] = implementer;\r\n    }\r\n    function setImplementSub(uint CIDXX, uint idx, address implementer) external restricted {\r\n        time[uint(CIDXX)] = now;\r\n        impls[uint(CIDXX)][idx] = implementer;\r\n    }\r\n    function getImplement(uint CIDXX) external view returns (address) {\r\n        return impls[uint(CIDXX)][0];\r\n    }\r\n    function getImplementSub(uint CIDXX, uint idx) external view returns (address) {\r\n        return impls[uint(CIDXX)][idx];\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract AssertPool is AssertPoolState, KContract {\r\n    constructor(\r\n        USDTInterface usdInc,\r\n        Hosts host\r\n    ) public {\r\n        _KHost = host;\r\n        usdtInterface = usdInc;\r\n    }\r\n        function OWNER_SetSwapInterface(address swapInc) external KOwnerOnly {\r\n        authAddress = swapInc;\r\n    }\r\n        function OWNER_SetOperator(address operator, AssertPoolName poolName) external KOwnerOnly {\r\n        operators[uint(poolName)] = operator;\r\n    }\r\n        function OWNER_SetMatchings( uint[4] calldata ms ) external KOwnerOnly {\r\n        require( ms[0] + ms[1] + ms[2] + ms[3] == 1 szabo );\r\n        matchings[1] = ms[0];\r\n        matchings[2] = ms[1];\r\n        matchings[3] = ms[2];\r\n        matchings[4] = ms[3];\r\n    }\r\n        function PoolNameFromOperator(address) external readonly returns (AssertPoolName) {\r\n        super.implementcall();\r\n    }\r\n        function Allowance(address) external readonly returns (uint) {\r\n        super.implementcall();\r\n    }\r\n        function OperatorSend(address, uint) external readwrite {\r\n        super.implementcall();\r\n    }\r\n        function Auth_RecipientDelegate(uint) external readwrite {\r\n        super.implementcall();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract USDTInterface\",\"name\":\"usdInc\",\"type\":\"address\"},{\"internalType\":\"contract Hosts\",\"name\":\"host\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Auth_RecipientDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"ms\",\"type\":\"uint256[4]\"}],\"name\":\"OWNER_SetMatchings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum AssertPoolInterface.AssertPoolName\",\"name\":\"poolName\",\"type\":\"uint8\"}],\"name\":\"OWNER_SetOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapInc\",\"type\":\"address\"}],\"name\":\"OWNER_SetSwapInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OperatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PoolNameFromOperator\",\"outputs\":[{\"internalType\":\"enum AssertPoolInterface.AssertPoolName\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_CIDXX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"_D\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_KContractOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_KHost\",\"outputs\":[{\"internalType\":\"contract Hosts\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availTotalAmouns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AssertPool","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000091d896557b12c59356ea5fe026810d2a32cc8d61","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d4226d343d8d000ad95ba67901e4658727180fabcf67641b5f5b0fdf5c11c6f"}]}