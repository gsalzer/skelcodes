{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() public view returns(uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n}\r\n\r\ncontract CERC20 is ERC20 {\r\n    function mint(uint256) external returns (uint256);\r\n    function exchangeRateStored() public view returns (uint256);\r\n    function supplyRatePerBlock() external returns (uint256);\r\n    function redeem(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ncontract DexProxyInterface {\r\n    function name() public view returns(string memory);\r\n    function getSwapQuantity(address src, address dst, uint256 srcQty) public view returns(uint256);\r\n    function getSwapRate(address src, address dst, uint256 srcQty) public view returns(uint256);\r\n    function executeSwap(address srcToken, uint256 srcQty, address dstToken, address dstAddress) public returns(bool);\r\n}\r\n\r\n\r\ncontract AdminRole {\r\n\r\n    mapping (address => bool) adminGroup;\r\n    address payable owner;\r\n\r\n    constructor () public {\r\n        adminGroup[msg.sender] = true;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(\r\n            isAdmin(msg.sender),\r\n            \"The caller is not Admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            owner == msg.sender,\r\n            \"The caller is not Owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address addr) external onlyAdmin {\r\n        adminGroup[addr] = true;\r\n    }\r\n    function delAdmin(address addr) external onlyAdmin {\r\n        adminGroup[addr] = false;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns(bool) {\r\n        return adminGroup[addr];\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is AdminRole {\r\n    /*\r\n     * External Function to withdraw founds -> Gas or Tokens\r\n     */\r\n    function withdrawTo (address payable dst, uint founds, address token) external onlyAdmin {\r\n        if (token == address(0))\r\n            require (address(this).balance >= founds);\r\n        else {\r\n            ERC20 erc20 = ERC20(token);\r\n            require (erc20.balanceOf(address(this)) >= founds);\r\n        }\r\n        sendFounds(dst,founds, token);\r\n    }\r\n\r\n    /*\r\n     * Function to send founds -> Gas or Tokens\r\n     */\r\n    function sendFounds(address payable dst, uint amount, address token) internal returns(bool) {\r\n        ERC20 erc20;\r\n        if (token == address(0))\r\n            require(address(dst).send(amount), \"Impossible send founds\");\r\n        else {\r\n            erc20 = ERC20(token);\r\n            require(erc20.transfer(dst, amount), \"Impossible send founds\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract cTokenKyberBridge is AdminRole {\r\n    string public name = \"cTokenKyberBridge\";\r\n    address public proxy;\r\n    mapping(address => bool) cTokens;\r\n\r\n    constructor() public {\r\n        cTokens[0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E] = true;\r\n        cTokens[0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643] = true;\r\n        cTokens[0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5] = true;\r\n        cTokens[0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1] = true;\r\n        cTokens[0xF5DCe57282A584D2746FaF1593d3121Fcac444dC] = true;\r\n        cTokens[0x39AA39c021dfbaE8faC545936693aC917d5E7563] = true;\r\n        cTokens[0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9] = true;\r\n        cTokens[0xC11b1268C1A384e55C48c2391d8d480264A3A7F4] = true;\r\n        cTokens[0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407] = true;\r\n        \r\n        proxy = 0x6c51AaBD10b939C1D607694571Fd6d6CF4DCd1F5;\r\n    }\r\n\r\n    function addcToken(address _cToken) external onlyAdmin {\r\n        cTokens[_cToken] = true;\r\n    }\r\n\r\n    function delcToken(address _cToken) external onlyAdmin {\r\n        cTokens[_cToken] = false; \r\n    }\r\n\r\n    function setProxy(address _proxy) external onlyAdmin {\r\n        proxy = _proxy;\r\n    }\r\n\r\n    function isCToken(address _token) internal view returns(bool) {\r\n        return cTokens[_token];\r\n    }\r\n\r\n    function getSwapQuantity(address src, address dst, uint256 srcQty) external view returns(uint256) {\r\n        address srcToken;\r\n        address dstToken;\r\n        uint256 srcQuantity;\r\n        uint256 dstDecimals;\r\n        uint256 dstExchangeRate;\r\n        uint256 dstQuantity;\r\n\r\n        if (isCToken(src)) {\r\n            // En este punto el souce es un cToken, hay que traer la direccion de su underlying\r\n            // y ademas calcular de acuerdo a su rate la cantidad a pasarle al proxy\r\n            CERC20 cToken = CERC20(src);\r\n            srcToken = cToken.underlying();\r\n            srcQuantity = (srcQty * cToken.exchangeRateStored()) / 10**18; \r\n        } else {\r\n            srcToken = src;\r\n            srcQuantity = srcQty;\r\n        }\r\n\r\n        if (isCToken(dst)) {\r\n            // En este punto el destino es un cToken, hay que traer la direccion de su underlying\r\n            CERC20 cToken = CERC20(dst);\r\n            dstToken = cToken.underlying();\r\n            dstDecimals = cToken.decimals();\r\n            dstExchangeRate = cToken.exchangeRateStored();\r\n        } else {\r\n            dstToken = dst;\r\n            dstDecimals = ERC20(dst).decimals();\r\n            dstExchangeRate = 1;\r\n        }\r\n\r\n        if (srcToken == dstToken) {\r\n            // Un token es el underlying del otro \r\n            if (isCToken(dst)) {\r\n                return (srcQuantity * 10**(36-dstDecimals)) / dstExchangeRate;\r\n            } else {\r\n                return (srcQuantity * 10**(18-dstDecimals));\r\n            }\r\n        }\r\n\r\n        dstQuantity = DexProxyInterface(proxy).getSwapQuantity(srcToken, dstToken, srcQuantity);\r\n\r\n        if (isCToken(dst)) {\r\n            dstQuantity = (dstQuantity * 10**(36-dstDecimals)) / dstExchangeRate;\r\n        }\r\n        return dstQuantity;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"addcToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"delcToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getSwapQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"cTokenKyberBridge","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cdb715cd23ec5f59efc9b7dcfb46e0466d7974513bacf921bf1a8f22ddc4b439"}]}