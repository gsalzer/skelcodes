{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interface/IWETH.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"Wrong useage of ETH.universalTransferFrom()\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            if (msg.value > amount) {\r\n                // Return remainder if exist\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount == 0) {\r\n                token.safeApprove(to, 0);\r\n                return;\r\n            }\r\n\r\n            uint256 allowance = token.allowance(address(this), to);\r\n            if (allowance < amount) {\r\n                if (allowance > 0) {\r\n                    token.safeApprove(to, 0);\r\n                }\r\n                token.safeApprove(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success || data.length == 0) {\r\n            (success, data) = address(token).staticcall.gas(10000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n\r\n    function notExist(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(-1));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Exchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Exchange {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256) {\r\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        return (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n\r\n// File: contracts/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n//\r\n//  [ msg.sender ]\r\n//       | |\r\n//       | |\r\n//       \\_/\r\n// +---------------+ ________________________________\r\n// | OneSplitAudit | _______________________________  \\\r\n// +---------------+                                 \\ \\\r\n//       | |                      ______________      | | (staticcall)\r\n//       | |                    /  ____________  \\    | |\r\n//       | | (call)            / /              \\ \\   | |\r\n//       | |                  / /               | |   | |\r\n//       \\_/                  | |               \\_/   \\_/\r\n// +--------------+           | |           +----------------------+\r\n// | OneSplitWrap |           | |           |   OneSplitViewWrap   |\r\n// +--------------+           | |           +----------------------+\r\n//       | |                  | |                     | |\r\n//       | | (delegatecall)   | | (staticcall)        | | (staticcall)\r\n//       \\_/                  | |                     \\_/\r\n// +--------------+           | |             +------------------+\r\n// |   OneSplit   |           | |             |   OneSplitView   |\r\n// +--------------+           | |             +------------------+\r\n//       | |                  / /\r\n//        \\ \\________________/ /\r\n//         \\__________________/\r\n//\r\n\r\n\r\ncontract IOneSplitConsts {\r\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_BANCOR + ...\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\r\n    uint256 internal constant DEPRECATED_FLAG_DISABLE_KYBER = 0x02; // Deprecated\r\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\r\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\r\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\r\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\r\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\r\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\r\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\r\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x800;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\r\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\r\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\r\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\r\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\r\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x10000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x20000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x40000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x80000000000000; // Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_COMP = 0x100000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_KYBER_ALL = 0x200000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_1 = 0x400000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_2 = 0x800000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_3 = 0x1000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_4 = 0x2000000000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN_BY_ORIGIN = 0x4000000000000000;\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n\r\ncontract IOneSplitMulti is IOneSplit {\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256[] memory parts,\r\n        uint256[] memory flags,\r\n        uint256[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256[] memory returnAmounts,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swapMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256[] memory flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: contracts/OneSplitAudit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IFreeFromUpTo is IERC20 {\r\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\r\n}\r\n\r\ninterface IReferralGasSponsor {\r\n    function makeGasDiscount(\r\n        uint256 gasSpent,\r\n        uint256 returnAmount,\r\n        bytes calldata msgSenderCalldata\r\n    ) external;\r\n}\r\n\r\n\r\nlibrary Array {\r\n    function first(IERC20[] memory arr) internal pure returns(IERC20) {\r\n        return arr[0];\r\n    }\r\n\r\n    function last(IERC20[] memory arr) internal pure returns(IERC20) {\r\n        return arr[arr.length - 1];\r\n    }\r\n}\r\n\r\n\r\n//\r\n// Security assumptions:\r\n// 1. It is safe to have infinite approves of any tokens to this smart contract,\r\n//    since it could only call `transferFrom()` with first argument equal to msg.sender\r\n// 2. It is safe to call `swap()` with reliable `minReturn` argument,\r\n//    if returning amount will not reach `minReturn` value whole swap will be reverted.\r\n// 3. Additionally CHI tokens could be burned from caller in case of FLAG_ENABLE_CHI_BURN (0x10000000000)\r\n//    presented in `flags` or from transaction origin in case of FLAG_ENABLE_CHI_BURN_BY_ORIGIN (0x4000000000000000)\r\n//    presented in `flags`. Burned amount would refund up to 43% of gas fees.\r\n//\r\ncontract OneSplitAudit is IOneSplit, Ownable {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n    using Array for IERC20[];\r\n\r\n    IWETH constant internal weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    IOneSplitMulti public oneSplitImpl;\r\n\r\n    event ImplementationUpdated(address indexed newImpl);\r\n\r\n    event Swapped(\r\n        IERC20 indexed fromToken,\r\n        IERC20 indexed destToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 destTokenAmount,\r\n        uint256 minReturn,\r\n        uint256[] distribution,\r\n        uint256[] flags,\r\n        address referral,\r\n        uint256 feePercent\r\n    );\r\n\r\n    constructor(IOneSplitMulti impl) public {\r\n        setNewImpl(impl);\r\n    }\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin, \"OneSplit: do not send ETH directly\");\r\n    }\r\n\r\n    function setNewImpl(IOneSplitMulti impl) public onlyOwner {\r\n        oneSplitImpl = impl;\r\n        emit ImplementationUpdated(address(impl));\r\n    }\r\n\r\n    /// @notice Calculate expected returning amount of `destToken`\r\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param parts (uint256) Number of pieces source volume could be splitted,\r\n    /// works like granularity, higly affects gas usage. Should be called offchain,\r\n    /// but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\r\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See contants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    /// @notice Calculate expected returning amount of `destToken`\r\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param parts (uint256) Number of pieces source volume could be splitted,\r\n    /// works like granularity, higly affects gas usage. Should be called offchain,\r\n    /// but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\r\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n    /// @param destTokenEthPriceTimesGasPrice (uint256) destToken price to ETH multiplied by gas price\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitImpl.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    /// @notice Calculate expected returning amount of first `tokens` element to\r\n    /// last `tokens` element through ann the middle tokens with corresponding\r\n    /// `parts`, `flags` and `destTokenEthPriceTimesGasPrices` array values of each step\r\n    /// @param tokens (IERC20[]) Address of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param parts (uint256[]) Number of pieces source volume could be splitted\r\n    /// @param flags (uint256[]) Flags for enabling and disabling some features, default 0\r\n    /// @param destTokenEthPriceTimesGasPrices (uint256[]) destToken price to ETH multiplied by gas price\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256[] memory parts,\r\n        uint256[] memory flags,\r\n        uint256[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256[] memory returnAmounts,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitImpl.getExpectedReturnWithGasMulti(\r\n            tokens,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrices\r\n        );\r\n    }\r\n\r\n    /// @notice Swap `amount` of `fromToken` to `destToken`\r\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param minReturn (uint256) Minimum expected return, else revert\r\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\r\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags // See contants in IOneSplit.sol\r\n    ) public payable returns(uint256) {\r\n        return swapWithReferral(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            minReturn,\r\n            distribution,\r\n            flags,\r\n            address(0),\r\n            0\r\n        );\r\n    }\r\n\r\n    /// @notice Swap `amount` of `fromToken` to `destToken`\r\n    /// param fromToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// param destToken (IERC20) Address of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param minReturn (uint256) Minimum expected return, else revert\r\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\r\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\r\n    /// @param referral (address) Address of referral\r\n    /// @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)\r\n    function swapWithReferral(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags, // See contants in IOneSplit.sol\r\n        address referral,\r\n        uint256 feePercent\r\n    ) public payable returns(uint256) {\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = fromToken;\r\n        tokens[1] = destToken;\r\n\r\n        uint256[] memory flagsArray = new uint256[](2);\r\n        flagsArray[0] = flags;\r\n        flagsArray[1] = flags;\r\n\r\n        swapWithReferralMulti(\r\n            tokens,\r\n            amount,\r\n            minReturn,\r\n            distribution,\r\n            flagsArray,\r\n            referral,\r\n            feePercent\r\n        );\r\n    }\r\n\r\n    /// @notice Swap `amount` of first element of `tokens` to the latest element of `destToken`\r\n    /// @param tokens (IERC20[]) Addresses of token or `address(0)` for Ether\r\n    /// @param amount (uint256) Amount for `fromToken`\r\n    /// @param minReturn (uint256) Minimum expected return, else revert\r\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\r\n    /// @param flags (uint256[]) Flags for enabling and disabling some features, default 0\r\n    /// @param referral (address) Address of referral\r\n    /// @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)\r\n    function swapWithReferralMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256[] memory flags,\r\n        address referral,\r\n        uint256 feePercent\r\n    ) public payable returns(uint256 returnAmount) {\r\n        require(tokens.length >= 2 && tokens.first() != tokens.last() && amount > 0, \"OneSplit: swap makes no sense\");\r\n        require((msg.value != 0) == tokens.first().isETH(), \"OneSplit: msg.value should be used only for ETH swap\");\r\n        require(feePercent <= 0.03e18, \"OneSplit: feePercent out of range\");\r\n\r\n        uint256 gasStart = gasleft();\r\n\r\n        Balances memory beforeBalances = _getFirstAndLastBalances(tokens);\r\n\r\n        // Transfer From\r\n        tokens.first().universalTransferFromSenderToThis(amount);\r\n        uint256 confirmed = tokens.first().universalBalanceOf(address(this)).sub(beforeBalances.ofFromToken);\r\n\r\n        // Swap\r\n        tokens.first().universalApprove(address(oneSplitImpl), confirmed);\r\n        oneSplitImpl.swapMulti.value(tokens.first().isETH() ? confirmed : 0)(\r\n            tokens,\r\n            confirmed,\r\n            minReturn,\r\n            distribution,\r\n            flags\r\n        );\r\n\r\n        Balances memory afterBalances = _getFirstAndLastBalances(tokens);\r\n\r\n        // Return\r\n        returnAmount = uint256(afterBalances.ofDestToken).sub(beforeBalances.ofDestToken);\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        tokens.last().universalTransfer(referral, returnAmount.mul(feePercent).div(1e18));\r\n        tokens.last().universalTransfer(msg.sender, returnAmount.sub(returnAmount.mul(feePercent).div(1e18)));\r\n\r\n        emit Swapped(\r\n            tokens.first(),\r\n            tokens.last(),\r\n            amount,\r\n            returnAmount,\r\n            minReturn,\r\n            distribution,\r\n            flags,\r\n            referral,\r\n            feePercent\r\n        );\r\n\r\n        // Return remainder\r\n        if (afterBalances.ofFromToken > beforeBalances.ofFromToken) {\r\n            tokens.first().universalTransfer(msg.sender, uint256(afterBalances.ofFromToken).sub(beforeBalances.ofFromToken));\r\n        }\r\n\r\n        if ((flags[0] & (FLAG_ENABLE_CHI_BURN | FLAG_ENABLE_CHI_BURN_BY_ORIGIN)) > 0) {\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            _chiBurnOrSell(\r\n                ((flags[0] & FLAG_ENABLE_CHI_BURN_BY_ORIGIN) > 0) ? tx.origin : msg.sender,\r\n                (gasSpent + 14154) / 41947\r\n            );\r\n        }\r\n        else if ((flags[0] & FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP) > 0) {\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            IReferralGasSponsor(referral).makeGasDiscount(gasSpent, returnAmount, msg.data);\r\n        }\r\n    }\r\n\r\n    function claimAsset(IERC20 asset, uint256 amount) public onlyOwner {\r\n        asset.universalTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function _chiBurnOrSell(address payable sponsor, uint256 amount) internal {\r\n        IUniswapV2Exchange exchange = IUniswapV2Exchange(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2);\r\n        uint256 sellRefund = UniswapV2ExchangeLib.getReturn(exchange, chi, weth, amount);\r\n        uint256 burnRefund = amount.mul(18_000).mul(tx.gasprice);\r\n\r\n        if (sellRefund < burnRefund.add(tx.gasprice.mul(36_000))) {\r\n            chi.freeFromUpTo(sponsor, amount);\r\n        }\r\n        else {\r\n            chi.transferFrom(sponsor, address(exchange), amount);\r\n            exchange.swap(0, sellRefund, address(this), \"\");\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n            sponsor.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    struct Balances {\r\n        uint128 ofFromToken;\r\n        uint128 ofDestToken;\r\n    }\r\n\r\n    function _getFirstAndLastBalances(IERC20[] memory tokens) internal view returns(Balances memory) {\r\n        return Balances({\r\n            ofFromToken: uint128(tokens.first().universalBalanceOf(address(this)).sub(msg.value)),\r\n            ofDestToken: uint128(tokens.last().universalBalanceOf(address(this)))\r\n        });\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOneSplitMulti\",\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256[]\"}],\"name\":\"getExpectedReturnWithGasMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneSplitImpl\",\"outputs\":[{\"internalType\":\"contract IOneSplitMulti\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IOneSplitMulti\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setNewImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"swapWithReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"swapWithReferralMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OneSplitAudit","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000efb448521341b476ae9b87b8bd06cf19a336b365","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad8f0acc65a9648a8eee9d5e6996ab7060953d107ed7c6f153ce5546ad991f1b"}]}