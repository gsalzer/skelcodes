{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner\r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts\r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address _owner;\r\n\r\n   event transferOwn(address _owner, address newOwner);\r\n\r\n\t\tmodifier onlyOwner() {\r\n\t\t\trequire(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isOwner(address account) public view returns (bool) {\r\n\t\t\treturn account == _owner;\r\n\t\t}\r\n\r\n\t\tfunction getOwner() public view returns (address) {\r\n\t\t\treturn _owner;\r\n\t\t}\r\n\r\n\t\t function transferOwnership(address newOwner) public onlyOwner returns (address) {\r\n\t         require( newOwner != address(0), \"new owner address is invalid\");\r\n\t\t\t emit transferOwn(_owner, newOwner);\r\n\t         _owner = newOwner;\r\n\t\t\t return _owner;\r\n      }\r\n}\r\n\r\n// File: contracts/TokenStorage.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n/**\r\n* @title TokenStorage\r\n*/\r\ncontract TokenStorage  is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n\t// variables\r\n\taddress internal _registryContract;\r\n\r\n\tuint8 internal _decimals;\r\n\tstring internal _name;\r\n\tstring internal _symbol;\r\n\tuint256 internal _supply;\r\n\r\n\tmapping( address => bool ) public whitelistedContracts;\r\n\r\n\t// struct\r\n\tstruct tkyc {\r\n\t\tbytes32 dochash;\r\n\t\tbool status;\r\n\t}\r\n\r\n\t// mapping\r\n\tmapping(address => mapping(address => uint256)) internal _allowances;\r\n\tmapping(address => uint256) internal _balances;\r\n\tmapping(address => tkyc) internal _kycs;\r\n\r\n\tconstructor() public {\r\n    \r\n\t\t_owner = msg.sender;\r\n\t\t_decimals = 18;\r\n\t\t_name = \"XFA\";\r\n\t\t_symbol = \"XFA\";\r\n\r\n\t\t_supply = 1000000000 * 10**18; // 18 decimal places are allowed\r\n\t\t_balances[_owner] = _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// proxy\r\n\tfunction _setRegistry(address _registry) public onlyOwner {\r\n\t\trequire(_registry != address(0), \"InvalidAddress: invalid address passed for proxy contract\");\r\n\t\t_registryContract = _registry;\r\n\t}\r\n\r\n\tfunction _getRegistry() public view returns (address) {\r\n\t\treturn _registryContract;\r\n\t}\r\n\r\n\tmodifier isRegistry() {\r\n\t\trequire(msg.sender == _registryContract, \"AccessDenied: This address is not allowed to access the storage\");\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// utils\r\n\tfunction _getName() public view isRegistry returns (string) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction _getSymbol() public view isRegistry returns (string) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction _getDecimals() public view isRegistry returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction _subSupply(uint256 _value) public isRegistry {\r\n\t\t_supply = _supply.sub(_value);\r\n\t}\r\n\r\n\tfunction _getSupply() public view isRegistry returns (uint256) {\r\n\t\treturn _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// allowance\r\n\tfunction _setAllowance(address _owner, address _spender, uint256 _value) public isRegistry {\r\n \r\n\t\t_allowances[_owner][_spender] = _value;\r\n\t}\r\n\r\n\tfunction _getAllowance(address _owner, address _spender) public view isRegistry returns (uint256) {\r\n\r\n\t\treturn _allowances[_owner][_spender];\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// balance\r\n\tfunction _addBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].add(_value);\r\n\t}\r\n\r\n\tfunction _subBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].sub(_value);\r\n\t}\r\n\r\n\tfunction _getBalance(address _addr) public view isRegistry returns (uint256) {\r\n\t\treturn _balances[_addr];\r\n\t}\r\n\r\n\r\n\r\n\t// kyc\r\n\tfunction _setKyc(address _addr, bytes32 _value) public isRegistry {\r\n\t\t tkyc memory item = tkyc( _value, true );\r\n\t\t_kycs[ _addr ] = item;\r\n\t}\r\n\r\n\tfunction _removeKyc(address _addr) public isRegistry {\r\n\t\t_kycs[_addr].dochash = \"0x0\";\r\n\t\t_kycs[_addr].status = false;\r\n\t}\r\n\r\n\tfunction _getKyc(address _addr) public view isRegistry returns (bytes32 dochash, bool status) {\r\n\t\treturn (_kycs[_addr].dochash, _kycs[_addr].status);\r\n\t}\r\n\r\n\tfunction _verifyKyc(address _from, address _to) public view isRegistry returns (bool) {\r\n\t\tif (_kycs[_from].status == true && _kycs[_to].status == true) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction addWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = true;\r\n\t}\r\n\r\n\tfunction removeWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = false;\r\n\t}\r\n\r\n\tfunction isWhitelistedContract( address _admin ) public view returns (bool) {\r\n\t\treturn whitelistedContracts[_admin];\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"_verifyKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"_setKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_removeKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"_setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_getKyc\",\"outputs\":[{\"name\":\"dochash\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_subSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"_getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_subBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwn\",\"type\":\"event\"}]","ContractName":"TokenStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://20cb273b92ac2745b4e271c597e527fa3476ca770c78157417ab941ebd739893"}]}