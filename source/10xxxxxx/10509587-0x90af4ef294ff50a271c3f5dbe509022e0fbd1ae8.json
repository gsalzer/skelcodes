{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function initReentrancyStatus() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n    event OwnerUpdate(address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(\r\n            msg.sender == newOwner,\r\n            \"AcceptOwnership: only new owner do this.\"\r\n        );\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_) public onlyOwner {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by owner account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is DSAuth {\r\n    bool public paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"whenPaused: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor() internal {\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to pause, triggers stopped state.\r\n     */\r\n    function pause() public whenNotPaused auth {\r\n        paused = true;\r\n        emit Paused(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to unpause, returns to normal state.\r\n     */\r\n    function unpause() public whenPaused auth {\r\n        paused = false;\r\n        emit Unpaused(owner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // This function is not a standard ERC20 interface, just for compitable with market.\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20SafeTransfer {\r\n    function doTransferOut(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transfer(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doTransferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transferFrom(_from, _to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doApprove(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.approve(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ninterface IDispatcher {\r\n    function getHandlers()\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory);\r\n\r\n    function getDepositStrategy(uint256 _amount)\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory);\r\n\r\n    function getWithdrawStrategy(address _token, uint256 _amount)\r\n        external\r\n        returns (address[] memory, uint256[] memory);\r\n\r\n    function isHandlerActive(address _handler) external view returns (bool);\r\n\r\n    function defaultHandler() external view returns (address);\r\n}\r\n\r\ninterface IHandler {\r\n    function deposit(address _token, uint256 _amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw(address _token, uint256 _amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function getRealBalance(address _token) external returns (uint256);\r\n\r\n    function getRealLiquidity(address _token) external returns (uint256);\r\n\r\n    function getBalance(address _token) external view returns (uint256);\r\n\r\n    function getLiquidity(address _token) external view returns (uint256);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function tokenIsEnabled(address _underlyingToken)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ncontract DToken is ReentrancyGuard, Pausable, ERC20SafeTransfer {\r\n    using SafeMath for uint256;\r\n    // --- Data ---\r\n    bool private initialized; // Flag of initialize data\r\n\r\n    struct DTokenData {\r\n        uint256 exchangeRate;\r\n        uint256 totalInterest;\r\n    }\r\n\r\n    DTokenData public data;\r\n\r\n    address public feeRecipient;\r\n    mapping(bytes4 => uint256) public originationFee; // Trade fee\r\n\r\n    address public dispatcher;\r\n    address public token;\r\n    address public swapModel;\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // --- ERC20 Data ---\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    struct Balance {\r\n        uint256 value;\r\n        uint256 exchangeRate;\r\n        uint256 interest;\r\n    }\r\n    mapping(address => Balance) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // --- User Triggered Event ---\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\r\n\r\n    event Interest(\r\n        address indexed src,\r\n        uint256 interest,\r\n        uint256 increase,\r\n        uint256 totalInterest\r\n    );\r\n\r\n    event Mint(\r\n        address indexed account,\r\n        uint256 indexed pie,\r\n        uint256 wad,\r\n        uint256 totalSupply,\r\n        uint256 exchangeRate\r\n    );\r\n\r\n    event Redeem(\r\n        address indexed account,\r\n        uint256 indexed pie,\r\n        uint256 wad,\r\n        uint256 totalSupply,\r\n        uint256 exchangeRate\r\n    );\r\n\r\n    // --- Admin Triggered Event ---\r\n    event Rebalance(\r\n        address[] withdraw,\r\n        uint256[] withdrawAmount,\r\n        address[] supply,\r\n        uint256[] supplyAmount\r\n    );\r\n\r\n    event TransferFee(address token, address feeRecipient, uint256 amount);\r\n\r\n    event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\r\n\r\n    event NewDispatcher(address oldDispatcher, address Dispatcher);\r\n    event NewSwapModel(address _oldSwapModel, address _newSwapModel);\r\n\r\n    event NewOriginationFee(\r\n        bytes4 sig,\r\n        uint256 oldOriginationFeeMantissa,\r\n        uint256 newOriginationFeeMantissa\r\n    );\r\n\r\n    /**\r\n     * The constructor is used here to ensure that the implementation\r\n     * contract is initialized. An uncontrolled implementation\r\n     * contract might lead to misleading state\r\n     * for users who accidentally interact with it.\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _token,\r\n        address _dispatcher\r\n    ) public {\r\n        initialize(_name, _symbol, _token, _dispatcher);\r\n    }\r\n\r\n    /************************/\r\n    /*** Admin Operations ***/\r\n    /************************/\r\n\r\n    // --- Init ---\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _token,\r\n        address _dispatcher\r\n    ) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        owner = msg.sender;\r\n        initReentrancyStatus();\r\n        feeRecipient = address(this);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        token = _token;\r\n        dispatcher = _dispatcher;\r\n        decimals = IERC20(_token).decimals();\r\n        data.exchangeRate = BASE;\r\n        initialized = true;\r\n\r\n        emit NewDispatcher(address(0), _dispatcher);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set a new dispatcher.\r\n     * @param _newDispatcher New dispatcher contract address.\r\n     */\r\n    function updateDispatcher(address _newDispatcher) external auth {\r\n        address _oldDispatcher = dispatcher;\r\n        require(\r\n            _newDispatcher != address(0) && _newDispatcher != _oldDispatcher,\r\n            \"updateDispatcher: dispatcher can be not set to 0 or the current one.\"\r\n        );\r\n\r\n        dispatcher = _newDispatcher;\r\n        emit NewDispatcher(_oldDispatcher, _newDispatcher);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set a new model contract to swap.\r\n     * @param _newSwapModel New model contract address.\r\n     */\r\n    function setSwapModel(address _newSwapModel) external auth {\r\n        address _oldSwapModel = swapModel;\r\n        require(\r\n            _newSwapModel != address(0) && _newSwapModel != _oldSwapModel,\r\n            \"setSwapModel: swap model can be not set to 0 or the current one.\"\r\n        );\r\n        swapModel = _newSwapModel;\r\n        emit NewSwapModel(_oldSwapModel, _newSwapModel);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set a new fee recipient.\r\n     * @param _newFeeRecipient The address allowed to collect fees.\r\n     */\r\n    function setFeeRecipient(address _newFeeRecipient) external auth {\r\n        address _oldFeeRecipient = feeRecipient;\r\n        require(\r\n            _newFeeRecipient != address(0) &&\r\n                _newFeeRecipient != _oldFeeRecipient,\r\n            \"setFeeRecipient: feeRecipient can be not set to 0 or the current one.\"\r\n        );\r\n\r\n        feeRecipient = _newFeeRecipient;\r\n        emit FeeRecipientSet(_oldFeeRecipient, feeRecipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set a new origination fee.\r\n     * @param _sig function signature.\r\n     * @param _newOriginationFee New trading fee ratio, scaled by 1e18.\r\n     */\r\n    function updateOriginationFee(bytes4 _sig, uint256 _newOriginationFee)\r\n        external\r\n        auth\r\n    {\r\n        require(\r\n            _newOriginationFee < BASE,\r\n            \"updateOriginationFee: incorrect fee.\"\r\n        );\r\n        uint256 _oldOriginationFee = originationFee[_sig];\r\n        require(\r\n            _oldOriginationFee != _newOriginationFee,\r\n            \"updateOriginationFee: fee has already set to this value.\"\r\n        );\r\n\r\n        originationFee[_sig] = _newOriginationFee;\r\n        emit NewOriginationFee(_sig, _oldOriginationFee, _newOriginationFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to swap airdrop tokens to increase yield.\r\n     * @param _token Airdrop token to swap from.\r\n     * @param _amount Amount to swap.\r\n     */\r\n    function swap(address _token, uint256 _amount) external auth {\r\n        require(swapModel != address(0), \"swap: no swap model available!\");\r\n\r\n        (bool success, ) = swapModel.delegatecall(\r\n            abi.encodeWithSignature(\"swap(address,uint256)\", _token, _amount)\r\n        );\r\n\r\n        require(success, \"swap: swap to another token failed!\");\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to transfer token out.\r\n     * @param _token The underlying token.\r\n     * @param _amount Amount to transfer.\r\n     */\r\n    function transferFee(address _token, uint256 _amount) external auth {\r\n        require(\r\n            feeRecipient != address(this),\r\n            \"transferFee: Can not transfer fee back to this contract.\"\r\n        );\r\n\r\n        require(\r\n            doTransferOut(_token, feeRecipient, _amount),\r\n            \"transferFee: Token transfer out of contract failed.\"\r\n        );\r\n\r\n        emit TransferFee(_token, feeRecipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to rebalance underlying token between handlers.\r\n     * @param _withdraw From which handlers to withdraw.\r\n     * @param _withdrawAmount Amounts to withdraw.\r\n     * @param _deposit To which handlers to deposit.\r\n     * @param _depositAmount Amounts to deposit.\r\n     */\r\n    function rebalance(\r\n        address[] calldata _withdraw,\r\n        uint256[] calldata _withdrawAmount,\r\n        address[] calldata _deposit,\r\n        uint256[] calldata _depositAmount\r\n    ) external auth {\r\n        require(\r\n            _withdraw.length == _withdrawAmount.length &&\r\n                _deposit.length == _depositAmount.length,\r\n            \"rebalance: the length of addresses and amounts must match.\"\r\n        );\r\n\r\n        address _token = token;\r\n        address _defaultHandler = IDispatcher(dispatcher).defaultHandler();\r\n\r\n        // Start withdrawing\r\n        uint256[] memory _realWithdrawAmount = new uint256[](\r\n            _withdrawAmount.length\r\n        );\r\n        for (uint256 i = 0; i < _withdraw.length; i++) {\r\n            // No need to withdraw from default handler, all withdrown tokens go to it\r\n            if (_withdrawAmount[i] == 0 || _defaultHandler == _withdraw[i])\r\n                continue;\r\n\r\n            // Check whether we want to withdraw all\r\n            _realWithdrawAmount[i] = _withdrawAmount[i] == uint256(-1)\r\n                ? IHandler(_withdraw[i]).getRealBalance(_token)\r\n                : _withdrawAmount[i];\r\n\r\n            // Ensure we get the exact amount we wanted\r\n            // Will fail if there is fee for withdraw\r\n            // For withdraw all (-1) we check agaist the real amount\r\n            require(\r\n                IHandler(_withdraw[i]).withdraw(_token, _withdrawAmount[i]) ==\r\n                    _realWithdrawAmount[i],\r\n                \"rebalance: actual withdrown amount does not match the wanted\"\r\n            );\r\n\r\n            // Transfer to the default handler\r\n            require(\r\n                doTransferFrom(\r\n                    _token,\r\n                    _withdraw[i],\r\n                    _defaultHandler,\r\n                    _realWithdrawAmount[i]\r\n                ),\r\n                \"rebalance: transfer to default handler failed\"\r\n            );\r\n        }\r\n\r\n        // Start depositing\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n            require(\r\n                IDispatcher(dispatcher).isHandlerActive(_deposit[i]) &&\r\n                    IHandler(_deposit[i]).tokenIsEnabled(_token),\r\n                \"rebalance: both handler and token must be enabled\"\r\n            );\r\n\r\n            // No need to deposit into default handler, it has been there already.\r\n            if (_depositAmount[i] == 0 || _defaultHandler == _deposit[i])\r\n                continue;\r\n\r\n            // Transfer from default handler to the target one.\r\n            require(\r\n                doTransferFrom(\r\n                    _token,\r\n                    _defaultHandler,\r\n                    _deposit[i],\r\n                    _depositAmount[i]\r\n                ),\r\n                \"rebalance: transfer to target handler failed\"\r\n            );\r\n\r\n            // Deposit into the target lending market\r\n            require(\r\n                IHandler(_deposit[i]).deposit(_token, _depositAmount[i]) ==\r\n                    _depositAmount[i],\r\n                \"rebalance: deposit to the target protocal failed\"\r\n            );\r\n        }\r\n\r\n        emit Rebalance(_withdraw, _withdrawAmount, _deposit, _depositAmount);\r\n    }\r\n\r\n    /*************************************/\r\n    /*** Helpers only for internal use ***/\r\n    /*************************************/\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(y) / BASE;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).div(y);\r\n    }\r\n\r\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).add(y.sub(1)).div(y);\r\n    }\r\n\r\n    /**\r\n     * @dev Current newest exchange rate, scaled by 1e18.\r\n     */\r\n    function getCurrentExchangeRate() internal returns (uint256) {\r\n        address[] memory _handlers = getHandlers();\r\n        return getCurrentExchangeRateByHandler(_handlers, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the exchange rate according to handlers and their token balance.\r\n     * @param _handlers The list of handlers.\r\n     * @param _token The underlying token.\r\n     * @return Current exchange rate between token and dToken.\r\n     */\r\n    function getCurrentExchangeRateByHandler(\r\n        address[] memory _handlers,\r\n        address _token\r\n    ) internal returns (uint256) {\r\n        uint256 _totalToken = 0;\r\n\r\n        // Get the total underlying token amount from handlers\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            _totalToken = _totalToken.add(\r\n                IHandler(_handlers[i]).getRealBalance(_token)\r\n            );\r\n\r\n        // Reset exchange rate to 1 when there is no dToken left\r\n        uint256 _exchangeRate = (totalSupply == 0)\r\n            ? BASE\r\n            : rdiv(_totalToken, totalSupply);\r\n\r\n        require(_exchangeRate > 0, \"Exchange rate should not be 0!\");\r\n\r\n        return _exchangeRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Update global and user's accrued interest.\r\n     * @param _account User account.\r\n     * @param _exchangeRate Current exchange rate.\r\n     */\r\n    function updateInterest(address _account, uint256 _exchangeRate) internal {\r\n        Balance storage _balance = balances[_account];\r\n\r\n        // There have been some interest since last time\r\n        if (\r\n            _balance.exchangeRate > 0 && _exchangeRate > _balance.exchangeRate\r\n        ) {\r\n            uint256 _interestIncrease = rmul(\r\n                _exchangeRate.sub(_balance.exchangeRate),\r\n                _balance.value\r\n            );\r\n\r\n            // Update user's accrued interst\r\n            _balance.interest = _balance.interest.add(_interestIncrease);\r\n\r\n            // Update global accrued interst\r\n            data.totalInterest = data.totalInterest.add(_interestIncrease);\r\n\r\n            emit Interest(\r\n                _account,\r\n                _balance.interest,\r\n                _interestIncrease,\r\n                data.totalInterest\r\n            );\r\n        }\r\n\r\n        // Update the exchange rate accordingly\r\n        _balance.exchangeRate = _exchangeRate;\r\n        data.exchangeRate = _exchangeRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to withdraw specific amount underlying token from handlers,\r\n     *    all tokens withdrown will be put into default handler.\r\n     * @param _defaultHandler default handler acting as temporary pool.\r\n     * @param _handlers list of handlers to withdraw.\r\n     * @param _amounts list of amounts to withdraw.\r\n     * @return The actual withdrown amount.\r\n     */\r\n    function withdrawFromHandlers(\r\n        address _defaultHandler,\r\n        address[] memory _handlers,\r\n        uint256[] memory _amounts\r\n    ) internal returns (uint256 _totalWithdrown) {\r\n        address _token = token;\r\n\r\n        uint256 _withdrown;\r\n        for (uint256 i = 0; i < _handlers.length; i++) {\r\n            if (_amounts[i] == 0) continue;\r\n\r\n            // The handler withdraw underlying token from the market.\r\n            _withdrown = IHandler(_handlers[i]).withdraw(_token, _amounts[i]);\r\n            require(\r\n                _withdrown > 0,\r\n                \"withdrawFromHandlers: handler withdraw failed\"\r\n            );\r\n\r\n            // Transfer token from other handlers to default handler\r\n            // Default handler acts as a temporary pool here\r\n            if (_defaultHandler != _handlers[i]) {\r\n                require(\r\n                    doTransferFrom(\r\n                        _token,\r\n                        _handlers[i],\r\n                        _defaultHandler,\r\n                        _withdrown\r\n                    ),\r\n                    \"withdrawFromHandlers: transfer to default handler failed\"\r\n                );\r\n            }\r\n\r\n            _totalWithdrown = _totalWithdrown.add(_withdrown);\r\n        }\r\n    }\r\n\r\n    /***********************/\r\n    /*** User Operations ***/\r\n    /***********************/\r\n\r\n    struct MintLocalVars {\r\n        address token;\r\n        address[] handlers;\r\n        uint256[] amounts;\r\n        uint256 exchangeRate;\r\n        uint256 originationFee;\r\n        uint256 fee;\r\n        uint256 netDepositAmount;\r\n        uint256 mintAmount;\r\n        uint256 wad;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit token to earn savings, but only when the contract is not paused.\r\n     * @param _dst Account who will get dToken.\r\n     * @param _pie Amount to deposit, scaled by 1e18.\r\n     */\r\n    function mint(address _dst, uint256 _pie)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        MintLocalVars memory _mintLocal;\r\n        _mintLocal.token = token;\r\n\r\n        // Charge the fee first\r\n        _mintLocal.originationFee = originationFee[msg.sig];\r\n        _mintLocal.fee = rmul(_pie, _mintLocal.originationFee);\r\n        if (_mintLocal.fee > 0)\r\n            require(\r\n                doTransferFrom(\r\n                    _mintLocal.token,\r\n                    msg.sender,\r\n                    feeRecipient,\r\n                    _mintLocal.fee\r\n                ),\r\n                \"mint: transferFrom fee failed\"\r\n            );\r\n\r\n        _mintLocal.netDepositAmount = _pie.sub(_mintLocal.fee);\r\n\r\n        // Get deposit strategy base on the deposit amount.\r\n        (_mintLocal.handlers, _mintLocal.amounts) = IDispatcher(dispatcher)\r\n            .getDepositStrategy(_mintLocal.netDepositAmount);\r\n        require(\r\n            _mintLocal.handlers.length > 0,\r\n            \"mint: no deposit strategy available, possibly due to a paused handler\"\r\n        );\r\n\r\n        // Get current exchange rate.\r\n        _mintLocal.exchangeRate = getCurrentExchangeRateByHandler(\r\n            _mintLocal.handlers,\r\n            _mintLocal.token\r\n        );\r\n\r\n        for (uint256 i = 0; i < _mintLocal.handlers.length; i++) {\r\n            // If deposit amount is 0 for this handler, then pass.\r\n            if (_mintLocal.amounts[i] == 0) continue;\r\n\r\n            // Transfer the calculated token amount from `msg.sender` to the `handler`.\r\n            require(\r\n                doTransferFrom(\r\n                    _mintLocal.token,\r\n                    msg.sender,\r\n                    _mintLocal.handlers[i],\r\n                    _mintLocal.amounts[i]\r\n                ),\r\n                \"mint: transfer token to handler failed.\"\r\n            );\r\n\r\n            // The `handler` deposit obtained token to corresponding market to earn savings.\r\n            // Add the returned amount to the acutal mint amount, there could be fee when deposit\r\n            _mintLocal.mintAmount = _mintLocal.mintAmount.add(\r\n                IHandler(_mintLocal.handlers[i]).deposit(\r\n                    _mintLocal.token,\r\n                    _mintLocal.amounts[i]\r\n                )\r\n            );\r\n        }\r\n\r\n        require(\r\n            _mintLocal.mintAmount <= _mintLocal.netDepositAmount,\r\n            \"mint: deposited more than intended\"\r\n        );\r\n\r\n        // Calculate amount of the dToken based on current exchange rate.\r\n        _mintLocal.wad = rdiv(_mintLocal.mintAmount, _mintLocal.exchangeRate);\r\n        require(\r\n            _mintLocal.wad > 0,\r\n            \"mint: can not mint the smallest unit with the given amount\"\r\n        );\r\n\r\n        updateInterest(_dst, _mintLocal.exchangeRate);\r\n\r\n        Balance storage _balance = balances[_dst];\r\n        _balance.value = _balance.value.add(_mintLocal.wad);\r\n        totalSupply = totalSupply.add(_mintLocal.wad);\r\n\r\n        emit Transfer(address(0), _dst, _mintLocal.wad);\r\n        emit Mint(\r\n            _dst,\r\n            _pie,\r\n            _mintLocal.wad,\r\n            totalSupply,\r\n            _mintLocal.exchangeRate\r\n        );\r\n    }\r\n\r\n    struct RedeemLocalVars {\r\n        address token;\r\n        address defaultHandler;\r\n        address[] handlers;\r\n        uint256[] amounts;\r\n        uint256 exchangeRate;\r\n        uint256 originationFee;\r\n        uint256 fee;\r\n        uint256 grossAmount;\r\n        uint256 redeemTotalAmount;\r\n        uint256 userAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem token according to input dToken amount,\r\n     *      but only when the contract is not paused.\r\n     * @param _src Account who will spend dToken.\r\n     * @param _wad Amount to burn dToken, scaled by 1e18.\r\n     */\r\n    function redeem(address _src, uint256 _wad)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        // Check the balance and allowance\r\n        Balance storage _balance = balances[_src];\r\n        require(_balance.value >= _wad, \"redeem: insufficient balance\");\r\n        if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\r\n            require(\r\n                allowance[_src][msg.sender] >= _wad,\r\n                \"redeem: insufficient allowance\"\r\n            );\r\n            allowance[_src][msg.sender] = allowance[_src][msg.sender].sub(_wad);\r\n        }\r\n\r\n        RedeemLocalVars memory _redeemLocal;\r\n        _redeemLocal.token = token;\r\n\r\n        // Get current exchange rate.\r\n        _redeemLocal.exchangeRate = getCurrentExchangeRate();\r\n        _redeemLocal.grossAmount = rmul(_wad, _redeemLocal.exchangeRate);\r\n\r\n        _redeemLocal.defaultHandler = IDispatcher(dispatcher).defaultHandler();\r\n        require(\r\n            _redeemLocal.defaultHandler != address(0) &&\r\n                IDispatcher(dispatcher).isHandlerActive(\r\n                    _redeemLocal.defaultHandler\r\n                ),\r\n            \"redeem: default handler is inactive\"\r\n        );\r\n\r\n        // Get `_token` best withdraw strategy base on the withdraw amount `_pie`.\r\n        (_redeemLocal.handlers, _redeemLocal.amounts) = IDispatcher(dispatcher)\r\n            .getWithdrawStrategy(_redeemLocal.token, _redeemLocal.grossAmount);\r\n        require(\r\n            _redeemLocal.handlers.length > 0,\r\n            \"redeem: no withdraw strategy available, possibly due to a paused handler\"\r\n        );\r\n\r\n        _redeemLocal.redeemTotalAmount = withdrawFromHandlers(\r\n            _redeemLocal.defaultHandler,\r\n            _redeemLocal.handlers,\r\n            _redeemLocal.amounts\r\n        );\r\n\r\n        // Market may charge some fee in withdraw, so the actual withdrown total amount\r\n        // could be less than what was intended\r\n        // Use the redeemTotalAmount as the baseline for further calculation\r\n        require(\r\n            _redeemLocal.redeemTotalAmount <= _redeemLocal.grossAmount,\r\n            \"redeem: redeemed more than intended\"\r\n        );\r\n\r\n        updateInterest(_src, _redeemLocal.exchangeRate);\r\n\r\n        // Update the balance and totalSupply\r\n        _balance.value = _balance.value.sub(_wad);\r\n        totalSupply = totalSupply.sub(_wad);\r\n\r\n        // Calculate fee\r\n        _redeemLocal.originationFee = originationFee[msg.sig];\r\n        _redeemLocal.fee = rmul(\r\n            _redeemLocal.redeemTotalAmount,\r\n            _redeemLocal.originationFee\r\n        );\r\n\r\n        // Transfer fee from the default handler(the temporary pool) to dToken.\r\n        if (_redeemLocal.fee > 0)\r\n            require(\r\n                doTransferFrom(\r\n                    _redeemLocal.token,\r\n                    _redeemLocal.defaultHandler,\r\n                    feeRecipient,\r\n                    _redeemLocal.fee\r\n                ),\r\n                \"redeem: transfer fee from default handler failed\"\r\n            );\r\n\r\n        // Subtracting the fee\r\n        _redeemLocal.userAmount = _redeemLocal.redeemTotalAmount.sub(\r\n            _redeemLocal.fee\r\n        );\r\n\r\n        // Transfer the remaining amount from the default handler to msg.sender.\r\n        if (_redeemLocal.userAmount > 0)\r\n            require(\r\n                doTransferFrom(\r\n                    _redeemLocal.token,\r\n                    _redeemLocal.defaultHandler,\r\n                    msg.sender,\r\n                    _redeemLocal.userAmount\r\n                ),\r\n                \"redeem: transfer from default handler to user failed\"\r\n            );\r\n\r\n        emit Transfer(_src, address(0), _wad);\r\n        emit Redeem(\r\n            _src,\r\n            _redeemLocal.redeemTotalAmount,\r\n            _wad,\r\n            totalSupply,\r\n            _redeemLocal.exchangeRate\r\n        );\r\n    }\r\n\r\n    struct RedeemUnderlyingLocalVars {\r\n        address token;\r\n        address defaultHandler;\r\n        address[] handlers;\r\n        uint256[] amounts;\r\n        uint256 exchangeRate;\r\n        uint256 originationFee;\r\n        uint256 fee;\r\n        uint256 consumeAmountWithFee;\r\n        uint256 redeemTotalAmount;\r\n        uint256 wad;\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem specific amount of underlying token, but only when the contract is not paused.\r\n     * @param _src Account who will spend dToken.\r\n     * @param _pie Amount to redeem, scaled by 1e18.\r\n     */\r\n    function redeemUnderlying(address _src, uint256 _pie)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        RedeemUnderlyingLocalVars memory _redeemLocal;\r\n        _redeemLocal.token = token;\r\n\r\n        // Here use the signature of redeem(), both functions should use the same fee rate\r\n        _redeemLocal.originationFee = originationFee[DToken(this)\r\n            .redeem\r\n            .selector];\r\n\r\n        _redeemLocal.consumeAmountWithFee = rdivup(\r\n            _pie,\r\n            BASE.sub(_redeemLocal.originationFee)\r\n        );\r\n\r\n        _redeemLocal.defaultHandler = IDispatcher(dispatcher).defaultHandler();\r\n        require(\r\n            _redeemLocal.defaultHandler != address(0) &&\r\n                IDispatcher(dispatcher).isHandlerActive(\r\n                    _redeemLocal.defaultHandler\r\n                ),\r\n            \"redeemUnderlying: default handler is inactive\"\r\n        );\r\n\r\n        // Get `_token` best withdraw strategy base on the redeem amount including fee.\r\n        (_redeemLocal.handlers, _redeemLocal.amounts) = IDispatcher(dispatcher)\r\n            .getWithdrawStrategy(\r\n            _redeemLocal.token,\r\n            _redeemLocal.consumeAmountWithFee\r\n        );\r\n        require(\r\n            _redeemLocal.handlers.length > 0,\r\n            \"redeemUnderlying: no withdraw strategy available, possibly due to a paused handler\"\r\n        );\r\n\r\n        // !!!DO NOT move up, we need the handlers to current exchange rate.\r\n        _redeemLocal.exchangeRate = getCurrentExchangeRateByHandler(\r\n            _redeemLocal.handlers,\r\n            _redeemLocal.token\r\n        );\r\n\r\n        _redeemLocal.redeemTotalAmount = withdrawFromHandlers(\r\n            _redeemLocal.defaultHandler,\r\n            _redeemLocal.handlers,\r\n            _redeemLocal.amounts\r\n        );\r\n\r\n        // Make sure enough token has been withdrown\r\n        // If the market charge fee in withdraw, there are 2 cases:\r\n        // 1) redeemed < intended, unlike redeem(), it should fail as user has demanded the specific amount;\r\n        // 2) redeemed == intended, it is okay, as fee was covered by consuming more underlying token\r\n        require(\r\n            _redeemLocal.redeemTotalAmount == _redeemLocal.consumeAmountWithFee,\r\n            \"redeemUnderlying: withdrown more than intended\"\r\n        );\r\n\r\n        // Calculate amount of the dToken based on current exchange rate.\r\n        _redeemLocal.wad = rdivup(\r\n            _redeemLocal.redeemTotalAmount,\r\n            _redeemLocal.exchangeRate\r\n        );\r\n\r\n        updateInterest(_src, _redeemLocal.exchangeRate);\r\n\r\n        // Check the balance and allowance\r\n        Balance storage _balance = balances[_src];\r\n        require(\r\n            _balance.value >= _redeemLocal.wad,\r\n            \"redeemUnderlying: insufficient balance\"\r\n        );\r\n        if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\r\n            require(\r\n                allowance[_src][msg.sender] >= _redeemLocal.wad,\r\n                \"redeemUnderlying: insufficient allowance\"\r\n            );\r\n            allowance[_src][msg.sender] = allowance[_src][msg.sender].sub(\r\n                _redeemLocal.wad\r\n            );\r\n        }\r\n\r\n        // Update the balance and totalSupply\r\n        _balance.value = _balance.value.sub(_redeemLocal.wad);\r\n        totalSupply = totalSupply.sub(_redeemLocal.wad);\r\n\r\n        // The calculated amount contains exchange token fee, if it exists.\r\n        _redeemLocal.fee = _redeemLocal.redeemTotalAmount.sub(_pie);\r\n\r\n        // Transfer fee from the default handler(the temporary pool) to dToken.\r\n        if (_redeemLocal.fee > 0)\r\n            require(\r\n                doTransferFrom(\r\n                    _redeemLocal.token,\r\n                    _redeemLocal.defaultHandler,\r\n                    feeRecipient,\r\n                    _redeemLocal.fee\r\n                ),\r\n                \"redeemUnderlying: transfer fee from default handler failed\"\r\n            );\r\n\r\n        // Transfer original amount _pie from the default handler to msg.sender.\r\n        require(\r\n            doTransferFrom(\r\n                _redeemLocal.token,\r\n                _redeemLocal.defaultHandler,\r\n                msg.sender,\r\n                _pie\r\n            ),\r\n            \"redeemUnderlying: transfer to user failed\"\r\n        );\r\n\r\n        emit Transfer(_src, address(0), _redeemLocal.wad);\r\n        emit Redeem(\r\n            _src,\r\n            _redeemLocal.redeemTotalAmount,\r\n            _redeemLocal.wad,\r\n            totalSupply,\r\n            _redeemLocal.exchangeRate\r\n        );\r\n    }\r\n\r\n    // --- ERC20 Standard Interfaces ---\r\n    function transfer(address _dst, uint256 _wad) external returns (bool) {\r\n        return transferFrom(msg.sender, _dst, _wad);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _src,\r\n        address _dst,\r\n        uint256 _wad\r\n    ) public nonReentrant whenNotPaused returns (bool) {\r\n        Balance storage _srcBalance = balances[_src];\r\n\r\n        // Check balance and allowance\r\n        require(\r\n            _srcBalance.value >= _wad,\r\n            \"transferFrom: insufficient balance\"\r\n        );\r\n        if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\r\n            require(\r\n                allowance[_src][msg.sender] >= _wad,\r\n                \"transferFrom: insufficient allowance\"\r\n            );\r\n            allowance[_src][msg.sender] = allowance[_src][msg.sender].sub(_wad);\r\n        }\r\n\r\n        // Update the accured interest for both\r\n        uint256 _exchangeRate = getCurrentExchangeRate();\r\n        updateInterest(_src, _exchangeRate);\r\n        updateInterest(_dst, _exchangeRate);\r\n\r\n        // Finally update the balance\r\n        Balance storage _dstBalance = balances[_dst];\r\n        _srcBalance.value = _srcBalance.value.sub(_wad);\r\n        _dstBalance.value = _dstBalance.value.add(_wad);\r\n\r\n        emit Transfer(_src, _dst, _wad);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _wad)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        allowance[msg.sender][_spender] = _wad;\r\n        emit Approval(msg.sender, _spender, _wad);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return approve(spender, allowance[msg.sender][spender].add(addedValue));\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return\r\n            approve(\r\n                spender,\r\n                allowance[msg.sender][spender].sub(subtractedValue)\r\n            );\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account].value;\r\n    }\r\n\r\n    /**\r\n     * @dev According to the current exchange rate, get user's corresponding token balance\r\n     *      based on the dToken amount, which has substracted dToken fee.\r\n     * @param _account Account to query token balance.\r\n     * @return Actual token balance based on dToken amount.\r\n     */\r\n    function getTokenBalance(address _account) external view returns (uint256) {\r\n        return rmul(balances[_account].value, getExchangeRate());\r\n    }\r\n\r\n    /**\r\n   * @dev According to the current exchange rate, get user's accrued interest until now,\r\n          it is an estimation, since it use the exchange rate in view instead of\r\n          the realtime one.\r\n   * @param _account Account to query token balance.\r\n   * @return Estimation of accrued interest till now.\r\n   */\r\n    function getCurrentInterest(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            balances[_account].interest.add(\r\n                rmul(\r\n                    getExchangeRate().sub(balances[_account].exchangeRate),\r\n                    balances[_account].value\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current list of the handlers.\r\n     */\r\n    function getHandlers() public view returns (address[] memory) {\r\n        (address[] memory _handlers, ) = IDispatcher(dispatcher).getHandlers();\r\n        return _handlers;\r\n    }\r\n\r\n    /**\r\n     * @dev Get all deposit token amount including interest.\r\n     */\r\n    function getTotalBalance() external view returns (uint256) {\r\n        address[] memory _handlers = getHandlers();\r\n        uint256 _tokenTotalBalance = 0;\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            _tokenTotalBalance = _tokenTotalBalance.add(\r\n                IHandler(_handlers[i]).getBalance(token)\r\n            );\r\n        return _tokenTotalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Get maximum valid token amount in the whole market.\r\n     */\r\n    function getLiquidity() external view returns (uint256) {\r\n        address[] memory _handlers = getHandlers();\r\n        uint256 _liquidity = 0;\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            _liquidity = _liquidity.add(\r\n                IHandler(_handlers[i]).getLiquidity(token)\r\n            );\r\n        return _liquidity;\r\n    }\r\n\r\n    /**\r\n     * @dev Current exchange rate, scaled by 1e18.\r\n     */\r\n    function getExchangeRate() public view returns (uint256) {\r\n        address[] memory _handlers = getHandlers();\r\n        address _token = token;\r\n        uint256 _totalToken = 0;\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            _totalToken = _totalToken.add(\r\n                IHandler(_handlers[i]).getBalance(_token)\r\n            );\r\n\r\n        return totalSupply == 0 ? BASE : rdiv(_totalToken, totalSupply);\r\n    }\r\n\r\n    function getBaseData()\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address[] memory _handlers = getHandlers();\r\n        uint256 _tokenTotalBalance = 0;\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            _tokenTotalBalance = _tokenTotalBalance.add(\r\n                IHandler(_handlers[i]).getRealBalance(token)\r\n            );\r\n        return (\r\n            decimals,\r\n            getCurrentExchangeRate(),\r\n            originationFee[DToken(this).mint.selector],\r\n            originationFee[DToken(this).redeem.selector],\r\n            _tokenTotalBalance\r\n        );\r\n    }\r\n\r\n    function getHandlerInfo()\r\n        external\r\n        returns (\r\n            address[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        address[] memory _handlers = getHandlers();\r\n        uint256[] memory _balances = new uint256[](_handlers.length);\r\n        uint256[] memory _liquidities = new uint256[](_handlers.length);\r\n        for (uint256 i = 0; i < _handlers.length; i++) {\r\n            _balances[i] = IHandler(_handlers[i]).getRealBalance(token);\r\n            _liquidities[i] = IHandler(_handlers[i]).getRealLiquidity(token);\r\n        }\r\n        return (_handlers, _balances, _liquidities);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"name\":\"Interest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pie\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Dispatcher\",\"type\":\"address\"}],\"name\":\"NewDispatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOriginationFeeMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOriginationFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"NewOriginationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldSwapModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSwapModel\",\"type\":\"address\"}],\"name\":\"NewSwapModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"withdraw\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"supply\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyAmount\",\"type\":\"uint256[]\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pie\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBaseData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCurrentInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getHandlerInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHandlers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pie\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"originationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_withdraw\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_deposit\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_depositAmount\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pie\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapModel\",\"type\":\"address\"}],\"name\":\"setSwapModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDispatcher\",\"type\":\"address\"}],\"name\":\"updateDispatcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_newOriginationFee\",\"type\":\"uint256\"}],\"name\":\"updateOriginationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DToken","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000eb269732ab75a6fd61ea60b06fe994cd32a835490000000000000000000000001cc5650ac8e218c3dcc5fae97733f02b662832a1000000000000000000000000000000000000000000000000000000000000000c64466f72636520546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664546f6b656e0000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://52ac78d1960977b3d718795965dfdb121d04e39d47a12f5b3959f55bb26b3ced"}]}