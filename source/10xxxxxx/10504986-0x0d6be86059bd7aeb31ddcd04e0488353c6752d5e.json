{"status":"1","message":"OK","result":[{"SourceCode":"/*  _______   ______   ___      ___     ______    _______    ______      ______    ___       \r\n /\"     \"| /    \" \\ |\"  \\    /\"  |   /    \" \\  |   __ \"\\  /    \" \\    /    \" \\  |\"  |      \r\n(: ______)// ____  \\ \\   \\  //   |  // ____  \\ (. |__) :)// ____  \\  // ____  \\ ||  |      \r\n \\/    | /  /    ) :)/\\\\  \\/.    | /  /    ) :)|:  ____//  /    ) :)/  /    ) :)|:  |      \r\n // ___)(: (____/ //|: \\.        |(: (____/ // (|  /   (: (____/ //(: (____/ //  \\  |___   \r\n(:  (    \\        / |.  \\    /:  | \\        / /|__/ \\   \\        /  \\        /  ( \\_|:  \\  \r\n \\__/     \\\"_____/  |___|\\__/|___|  \\\"_____/ (_______)   \\\"_____/    \\\"_____/    \\_______) \r\n \r\nPlay now : https://fomopool.com\r\n\r\n*/\r\n\r\npragma solidity 0.6.0;\r\n\r\ncontract FOMOPOOL {\r\n     address public ownerWallet = 0x2fF324915A980c8C82a0062a6B0f724249F3176d;\r\n     address public feesWallet = 0x6eC27978a98AfA20daA6B85B44De4653853a4816;\r\n      uint public currUserID = 0;\r\n      uint public pool1currUserID = 0;\r\n      uint public pool2currUserID = 0;\r\n      uint public pool3currUserID = 0;\r\n      uint public pool4currUserID = 0;\r\n      uint public pool5currUserID = 0;\r\n      uint public pool6currUserID = 0;\r\n      uint public pool7currUserID = 0;\r\n      uint public pool8currUserID = 0;\r\n\r\n      uint public pool1activeUserID = 0;\r\n      uint public pool2activeUserID = 0;\r\n      uint public pool3activeUserID = 0;\r\n      uint public pool4activeUserID = 0;\r\n      uint public pool5activeUserID = 0;\r\n      uint public pool6activeUserID = 0;\r\n      uint public pool7activeUserID = 0;\r\n      uint public pool8activeUserID = 0;\r\n\r\n      \r\n      uint public unlimited_level_price=0;\r\n     \r\n      struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint referredUsers;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n    \r\n     struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint payment_received; \r\n    }\r\n    \r\n     mapping (address => UserStruct) public users;\r\n     mapping (uint => address) public userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool1users;\r\n     mapping (uint => address) public pool1userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool2users;\r\n     mapping (uint => address) public pool2userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool3users;\r\n     mapping (uint => address) public pool3userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool4users;\r\n     mapping (uint => address) public pool4userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool5users;\r\n     mapping (uint => address) public pool5userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool6users;\r\n     mapping (uint => address) public pool6userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool7users;\r\n     mapping (uint => address) public pool7userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool8users;\r\n     mapping (uint => address) public pool8userList;\r\n  \r\n     \r\n     mapping(uint => uint) public LEVEL_PRICE;\r\n    \r\n   uint REGESTRATION_FESS=0.05 ether;\r\n   uint pool1_price=0.05 ether;\r\n   uint pool2_price=0.1 ether ;\r\n   uint pool3_price=0.2 ether;\r\n   uint pool4_price=0.5 ether;\r\n   uint pool5_price=1 ether;\r\n   uint pool6_price=2 ether;\r\n   uint pool7_price=5 ether ;\r\n   uint pool8_price=10 ether;\r\n   \r\n   \r\n\r\n   \r\n     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n     event regPoolEntry(address indexed _user,uint _level,   uint _time);\r\n     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n   \r\n     UserStruct[] public requests;\r\n     \r\n      constructor() public {\r\n          \r\n\r\n        LEVEL_PRICE[1] = 0.01 ether;\r\n        LEVEL_PRICE[2] = 0.005 ether;\r\n        LEVEL_PRICE[3] = 0.0025 ether;\r\n        LEVEL_PRICE[4] = 0.00025 ether;\r\n        unlimited_level_price=0.00025 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referredUsers:0\r\n           \r\n        });\r\n        \r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n       \r\n       \r\n        PoolUserStruct memory pooluserStruct;\r\n        \r\n        pool1currUserID++;\r\n\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n       pool1activeUserID=pool1currUserID;\r\n       pool1users[ownerWallet] = pooluserStruct;\r\n       pool1userList[pool1currUserID]=ownerWallet;\r\n      \r\n        \r\n        pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n       pool2activeUserID=pool2currUserID;\r\n       pool2users[ownerWallet] = pooluserStruct;\r\n       pool2userList[pool2currUserID]=ownerWallet;\r\n       \r\n       \r\n        pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n       pool3activeUserID=pool3currUserID;\r\n       pool3users[ownerWallet] = pooluserStruct;\r\n       pool3userList[pool3currUserID]=ownerWallet;\r\n       \r\n       \r\n        pool4currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n       pool4activeUserID=pool4currUserID;\r\n       pool4users[ownerWallet] = pooluserStruct;\r\n       pool4userList[pool4currUserID]=ownerWallet;\r\n\r\n        \r\n        pool5currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n       pool5activeUserID=pool5currUserID;\r\n       pool5users[ownerWallet] = pooluserStruct;\r\n       pool5userList[pool5currUserID]=ownerWallet;\r\n       \r\n       \r\n        pool6currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n       pool6activeUserID=pool6currUserID;\r\n       pool6users[ownerWallet] = pooluserStruct;\r\n       pool6userList[pool6currUserID]=ownerWallet;\r\n       \r\n        pool7currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool7currUserID,\r\n            payment_received:0\r\n        });\r\n       pool7activeUserID=pool7currUserID;\r\n       pool7users[ownerWallet] = pooluserStruct;\r\n       pool7userList[pool7currUserID]=ownerWallet;\r\n\r\n       pool8currUserID++;\r\n       pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool8currUserID,\r\n            payment_received:0\r\n        });\r\n       pool8activeUserID=pool8currUserID;\r\n       pool8users[ownerWallet] = pooluserStruct;\r\n       pool8userList[pool8currUserID]=ownerWallet;\r\n      \r\n       \r\n      }\r\n     \r\n       function regUser(uint _referrerID) public payable {\r\n       \r\n        require(!users[msg.sender].isExist, \"User Exists\");\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referral ID');\r\n        require(msg.value == REGESTRATION_FESS, 'Incorrect Value');\r\n       \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referredUsers:0\r\n        });\r\n   \r\n    \r\n       users[msg.sender] = userStruct;\r\n       userList[currUserID]=msg.sender;\r\n       \r\n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\r\n        \r\n       payReferral(1,msg.sender);\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n    \r\n   \r\n     function payReferral(uint _level, address _user) internal {\r\n        address referer;\r\n       \r\n        referer = userList[users[_user].referrerID];\r\n       \r\n       \r\n         bool sent = false;\r\n       \r\n            uint level_price_local=0;\r\n            if(_level>4){\r\n            level_price_local=unlimited_level_price;\r\n            }\r\n            else{\r\n            level_price_local=LEVEL_PRICE[_level];\r\n            }\r\n            sent = address(uint160(referer)).send(level_price_local);\r\n\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n                if(_level < 100 && users[referer].referrerID >= 1){\r\n                    payReferral(_level+1,referer);\r\n                }\r\n                else\r\n                {\r\n                    sendBalance();\r\n                }\r\n               \r\n            }\r\n       \r\n        if(!sent) {\r\n\r\n            payReferral(_level, referer);\r\n        }\r\n     }\r\n   \r\n       function buyPool1() public payable {\r\n           \r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool1users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool1_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool1Currentuser=pool1userList[pool1activeUserID];\r\n        \r\n        pool1currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool1users[msg.sender] = userStruct;\r\n       pool1userList[pool1currUserID]=msg.sender;\r\n       \r\n       if(pool1users[pool1Currentuser].payment_received < 1){\r\n                address(uint160(pool1Currentuser)).send(pool1_price);\r\n                pool1users[pool1Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\r\n\r\n       }\r\n             if(pool1users[pool1Currentuser].payment_received ==1)\r\n                {\r\n                    \r\n                      pool1currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool1currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool1users[pool1Currentuser] = userStruct;\r\n                      pool1userList[pool1currUserID]=pool1Currentuser;\r\n                      \r\n                      address pool1Currentuser=pool1userList[pool1activeUserID];\r\n                      address(uint160(pool1Currentuser)).send(pool1_price);\r\n                      emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\r\n                      \r\n                      pool1activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 1, now);\r\n    }\r\n    \r\n    \r\n      function buyPool2() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool2users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool2_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool2Currentuser=pool2userList[pool2activeUserID];\r\n        \r\n        pool2currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool2users[msg.sender] = userStruct;\r\n       pool2userList[pool2currUserID]=msg.sender;\r\n       \r\n       if(pool2users[pool2Currentuser].payment_received < 1){\r\n                address(uint160(pool2Currentuser)).send(pool2_price);\r\n                pool2users[pool2Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\r\n\r\n       }\r\n             if(pool2users[pool2Currentuser].payment_received ==1)\r\n                {\r\n                    \r\n                      pool2currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool2currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool2users[pool2Currentuser] = userStruct;\r\n                      pool2userList[pool2currUserID]=pool2Currentuser;\r\n                      \r\n                      address pool2Currentuser=pool2userList[pool2activeUserID];\r\n                      address(uint160(pool2Currentuser)).send(pool2_price);\r\n                      emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\r\n                      \r\n                      pool2activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 2, now);\r\n    }\r\n    \r\n    \r\n     function buyPool3() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool3users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool3_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool3Currentuser=pool3userList[pool3activeUserID];\r\n        \r\n        pool3currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool3users[msg.sender] = userStruct;\r\n       pool3userList[pool3currUserID]=msg.sender;\r\n       \r\n       if(pool3users[pool3Currentuser].payment_received < 1){\r\n                address(uint160(pool3Currentuser)).send(pool3_price);\r\n                pool3users[pool3Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\r\n\r\n       }\r\n             if(pool3users[pool3Currentuser].payment_received ==1)\r\n                {\r\n                    \r\n                      pool3currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool3currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool3users[pool3Currentuser] = userStruct;\r\n                      pool3userList[pool3currUserID]=pool3Currentuser;\r\n                      \r\n                      address pool3Currentuser=pool3userList[pool3activeUserID];\r\n                      address(uint160(pool3Currentuser)).send(pool3_price);\r\n                      emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\r\n                      \r\n                      pool3activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 3, now);\r\n    }\r\n    \r\n    \r\n    function buyPool4() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool4users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool4_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool4Currentuser=pool4userList[pool4activeUserID];\r\n        \r\n        pool4currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool4users[msg.sender] = userStruct;\r\n       pool4userList[pool4currUserID]=msg.sender;\r\n       \r\n       if(pool4users[pool4Currentuser].payment_received < 2){\r\n                address(uint160(pool4Currentuser)).send(pool4_price);\r\n                pool4users[pool4Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);\r\n\r\n       }\r\n             if(pool4users[pool4Currentuser].payment_received ==2)\r\n                {\r\n                    \r\n                      pool4currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool4currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool4users[pool4Currentuser] = userStruct;\r\n                      pool4userList[pool4currUserID]=pool4Currentuser;\r\n                      \r\n                      address pool4Currentuser=pool4userList[pool4activeUserID];\r\n                      address(uint160(pool4Currentuser)).send(pool4_price);\r\n                      emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);\r\n                      \r\n                      pool4activeUserID+=1;\r\n                \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 4, now);\r\n    }\r\n    \r\n    \r\n    \r\n    function buyPool5() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool5users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool5_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool5Currentuser=pool5userList[pool5activeUserID];\r\n        \r\n        pool5currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool5users[msg.sender] = userStruct;\r\n       pool5userList[pool5currUserID]=msg.sender;\r\n       \r\n       if(pool5users[pool5Currentuser].payment_received < 2){\r\n                address(uint160(pool5Currentuser)).send(pool5_price);\r\n                pool5users[pool5Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);\r\n\r\n       }\r\n             if(pool5users[pool5Currentuser].payment_received ==2)\r\n                {\r\n                    \r\n                      pool5currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool5currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool5users[pool5Currentuser] = userStruct;\r\n                      pool5userList[pool5currUserID]=pool5Currentuser;\r\n                      \r\n                      address pool5Currentuser=pool5userList[pool5activeUserID];\r\n                      address(uint160(pool5Currentuser)).send(pool5_price);\r\n                      emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);\r\n                      \r\n                      pool5activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 5, now);\r\n    }\r\n    \r\n    function buyPool6() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool6users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool6_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool6Currentuser=pool6userList[pool6activeUserID];\r\n        \r\n        pool6currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool6users[msg.sender] = userStruct;\r\n       pool6userList[pool6currUserID]=msg.sender;\r\n      \r\n       if(pool6users[pool6Currentuser].payment_received < 2){\r\n                address(uint160(pool6Currentuser)).send(pool6_price);\r\n                pool6users[pool6Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);\r\n\r\n       }\r\n             if(pool6users[pool6Currentuser].payment_received ==2)\r\n                {\r\n                    \r\n                      pool6currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool6currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool6users[pool6Currentuser] = userStruct;\r\n                      pool6userList[pool6currUserID]=pool6Currentuser;\r\n                     \r\n                      address pool6Currentuser=pool6userList[pool6activeUserID];\r\n                      address(uint160(pool6Currentuser)).send(pool6_price);\r\n                      emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);\r\n                      \r\n                      pool6activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 6, now);\r\n    }\r\n    \r\n    function buyPool7() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool7users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool7_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool7Currentuser=pool7userList[pool7activeUserID];\r\n        \r\n        pool7currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool7currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool7users[msg.sender] = userStruct;\r\n       pool7userList[pool7currUserID]=msg.sender;\r\n       \r\n       if(pool7users[pool7Currentuser].payment_received < 2){\r\n                address(uint160(pool7Currentuser)).send(pool7_price);\r\n                pool7users[pool7Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);\r\n\r\n       }\r\n             if(pool7users[pool7Currentuser].payment_received ==2)\r\n                {\r\n                    \r\n                      pool7currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool7currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool7users[pool7Currentuser] = userStruct;\r\n                      pool7userList[pool7currUserID]=pool7Currentuser;\r\n                      \r\n                      address pool7Currentuser=pool7userList[pool7activeUserID];\r\n                      address(uint160(pool7Currentuser)).send(pool7_price);\r\n                      emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);\r\n                      \r\n                      pool7activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 7, now);\r\n    }\r\n    \r\n    \r\n    function buyPool8() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(!pool8users[msg.sender].isExist, \"Already in AutoPool\");\r\n       require(msg.value == pool8_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool8Currentuser=pool8userList[pool8activeUserID];\r\n        \r\n        pool8currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool8currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool8users[msg.sender] = userStruct;\r\n       pool8userList[pool8currUserID]=msg.sender;\r\n       \r\n       if(pool8users[pool8Currentuser].payment_received < 2){\r\n                address(uint160(pool8Currentuser)).send(pool8_price);\r\n                pool8users[pool8Currentuser].payment_received+=1;\r\n                emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);\r\n\r\n       }\r\n             if(pool8users[pool8Currentuser].payment_received ==2)\r\n                {\r\n                    \r\n                      pool8currUserID++;\r\n\r\n                      userStruct = PoolUserStruct({\r\n                          isExist:true,\r\n                          id:pool8currUserID,\r\n                          payment_received:0\r\n                     });\r\n                     \r\n                      pool8users[pool8Currentuser] = userStruct;\r\n                      pool8userList[pool8currUserID]=pool8Currentuser;\r\n                      \r\n                      address pool8Currentuser=pool8userList[pool8activeUserID];\r\n                      address(uint160(pool8Currentuser)).send(pool8_price);\r\n                      emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);\r\n                      \r\n                      pool8activeUserID+=1;\r\n                    \r\n                }\r\n            \r\n       emit regPoolEntry(msg.sender, 8, now);\r\n    }\r\n\r\n    \r\n    function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n    }\r\n    \r\n    function sendBalance() private\r\n    {\r\n         if (!address(uint160(feesWallet)).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    }\r\n   \r\n   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool4\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool5\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool6\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool7\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool8\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool4userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool4users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool5activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool5currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool5userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool5users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool6activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool6currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool6userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool6users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool7activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool7currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool7userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool7users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool8activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool8currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool8userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool8users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlimited_level_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FOMOPOOL","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d6f903cb1b74a64bffc7c3048d14e30699f9ef4f677024cbcaa7e7aa3c9acc0b"}]}