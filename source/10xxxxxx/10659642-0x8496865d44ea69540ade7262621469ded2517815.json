{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n  /**\r\n   * @dev Return ethereum address\r\n   */\r\n  function getEthAddr() internal pure returns (address) {\r\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return memory variable address\r\n   */\r\n  function getMemoryAddr() internal pure returns (address) {\r\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return InstaEvent Address.\r\n   */\r\n  function getEventAddr() internal pure returns (address) {\r\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n  }\r\n\r\n  /**\r\n   * @dev Get Uint value from InstaMemory Contract.\r\n   */\r\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n  }\r\n\r\n  /**\r\n  * @dev Set Uint value in InstaMemory Contract.\r\n  */\r\n  function setUint(uint setId, uint val) virtual internal {\r\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n  }\r\n\r\n  /**\r\n  * @dev emit event on event contract\r\n  */\r\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\r\n    (uint model, uint id) = connectorID();\r\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n  }\r\n\r\n  /**\r\n  * @dev Connector Details.\r\n  */\r\n  function connectorID() public view returns(uint model, uint id) {\r\n    (model, id) = (1, 38);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n}\r\n\r\ninterface OneInchInterace {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        uint256 guaranteedAmount,\r\n        address payable referrer,\r\n        address[] calldata callAddresses,\r\n        bytes calldata callDataConcat,\r\n        uint256[] calldata starts,\r\n        uint256[] calldata gasLimitsAndValues\r\n    )\r\n    external\r\n    payable\r\n    returns (uint256 returnAmount);\r\n}\r\n\r\ninterface OneProtoInterface {\r\n    function swapWithReferral(\r\n        TokenInterface fromToken,\r\n        TokenInterface destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags, // See contants in IOneSplit.sol\r\n        address referral,\r\n        uint256 feePercent\r\n    ) external payable returns(uint256);\r\n\r\n    function swapWithReferralMulti(\r\n        TokenInterface[] calldata tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256[] calldata flags,\r\n        address referral,\r\n        uint256 feePercent\r\n    ) external payable returns(uint256 returnAmount);\r\n\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\ninterface OneProtoMappingInterface {\r\n    function oneProtoAddress() external view returns(address);\r\n}\r\n\r\n\r\ncontract OneHelpers is Stores, DSMath {\r\n\r\n    /**\r\n     * @dev Return 1proto mapping Address\r\n     */\r\n    function getOneProtoMappingAddress() internal pure returns (address payable) {\r\n        return 0x8d0287AFa7755BB5f2eFe686AA8d4F0A7BC4AE7F;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1proto Address\r\n     */\r\n    function getOneProtoAddress() internal view returns (address payable) {\r\n        return payable(OneProtoMappingInterface(getOneProtoMappingAddress()).oneProtoAddress());\r\n    }\r\n\r\n    /**\r\n     * @dev Return  1Inch Address\r\n     */\r\n    function getOneInchAddress() internal pure returns (address) {\r\n        return 0x11111254369792b2Ca5d084aB5eEA397cA8fa48B;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1inch Token Taker Address\r\n     */\r\n    function getOneInchTokenTaker() internal pure returns (address payable) {\r\n        return 0xE4C9194962532fEB467DCe8b3d42419641c6eD2E;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1inch swap function sig\r\n     */\r\n    function getOneInchSig() internal pure returns (bytes4) {\r\n        return 0xf88309d7;\r\n    }\r\n\r\n    function getReferralAddr() internal pure returns (address) {\r\n        return 0xa7615CD307F323172331865181DC8b80a2834324;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == getEthAddr() ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == getEthAddr() ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == getEthAddr() ?  18 : sellAddr.decimals();\r\n    }\r\n\r\n    function getSlippageAmt(\r\n        TokenInterface _buyAddr,\r\n        TokenInterface _sellAddr,\r\n        uint _sellAmt,\r\n        uint unitAmt\r\n    ) internal view returns(uint _slippageAmt) {\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\r\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\r\n        _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\r\n    }\r\n\r\n    function convertToTokenInterface(address[] memory tokens) internal pure returns(TokenInterface[] memory) {\r\n        TokenInterface[] memory _tokens = new TokenInterface[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _tokens[i] = TokenInterface(tokens[i]);\r\n        }\r\n        return _tokens;\r\n    }\r\n}\r\n\r\n\r\ncontract OneProtoResolver is OneHelpers {\r\n    struct OneProtoData {\r\n        TokenInterface sellToken;\r\n        TokenInterface buyToken;\r\n        uint _sellAmt;\r\n        uint _buyAmt;\r\n        uint unitAmt;\r\n        uint[] distribution;\r\n        uint disableDexes;\r\n    }\r\n\r\n    function oneProtoSwap(\r\n        OneProtoInterface oneProtoContract,\r\n        OneProtoData memory oneProtoData\r\n    ) internal returns (uint buyAmt) {\r\n        TokenInterface _sellAddr = oneProtoData.sellToken;\r\n        TokenInterface _buyAddr = oneProtoData.buyToken;\r\n        uint _sellAmt = oneProtoData._sellAmt;\r\n\r\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneProtoContract), _sellAmt);\r\n        }\r\n\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n        oneProtoContract.swapWithReferral.value(ethAmt)(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            _slippageAmt,\r\n            oneProtoData.distribution,\r\n            oneProtoData.disableDexes,\r\n            getReferralAddr(),\r\n            0\r\n        );\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n\r\n    struct OneProtoMultiData {\r\n        address[] tokens;\r\n        TokenInterface sellToken;\r\n        TokenInterface buyToken;\r\n        uint _sellAmt;\r\n        uint _buyAmt;\r\n        uint unitAmt;\r\n        uint[] distribution;\r\n        uint[] disableDexes;\r\n    }\r\n\r\n    function oneProtoSwapMulti(OneProtoMultiData memory oneProtoData) internal returns (uint buyAmt) {\r\n        TokenInterface _sellAddr = oneProtoData.sellToken;\r\n        TokenInterface _buyAddr = oneProtoData.buyToken;\r\n        uint _sellAmt = oneProtoData._sellAmt;\r\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\r\n\r\n        OneProtoInterface oneSplitContract = OneProtoInterface(getOneProtoAddress());\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\r\n        }\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n        oneSplitContract.swapWithReferralMulti.value(ethAmt)(\r\n            convertToTokenInterface(oneProtoData.tokens),\r\n            _sellAmt,\r\n            _slippageAmt,\r\n            oneProtoData.distribution,\r\n            oneProtoData.disableDexes,\r\n            getReferralAddr(),\r\n            0\r\n        );\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n}\r\n\r\ncontract OneInchResolver is OneProtoResolver {\r\n    function checkOneInchSig(bytes memory callData) internal pure returns(bool isOk) {\r\n        bytes memory _data = callData;\r\n        bytes4 sig;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            sig := mload(add(_data, 32))\r\n        }\r\n        isOk = sig == getOneInchSig();\r\n    }\r\n\r\n    struct OneInchData {\r\n        TokenInterface sellToken;\r\n        TokenInterface buyToken;\r\n        uint _sellAmt;\r\n        uint _buyAmt;\r\n        uint unitAmt;\r\n        bytes callData;\r\n    }\r\n\r\n    function oneInchSwap(\r\n        OneInchData memory oneInchData,\r\n        uint ethAmt\r\n    ) internal returns (uint buyAmt) {\r\n        TokenInterface buyToken = oneInchData.buyToken;\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(buyToken, oneInchData.sellToken);\r\n        uint _sellAmt18 = convertTo18(_sellDec, oneInchData._sellAmt);\r\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(oneInchData.unitAmt, _sellAmt18));\r\n\r\n        uint initalBal = getTokenBal(buyToken);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, ) = address(getOneInchAddress()).call.value(ethAmt)(oneInchData.callData);\r\n        if (!success) revert(\"1Inch-swap-failed\");\r\n\r\n        uint finalBal = getTokenBal(buyToken);\r\n\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n\r\n}\r\n\r\ncontract OneProtoEventResolver is OneInchResolver {\r\n    event LogSell(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSell(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        emit LogSell(\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\r\n        _eventParam = abi.encode(\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    event LogSellTwo(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSellTwo(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        emit LogSellTwo(\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        _eventCode = keccak256(\"LogSellTwo(address,address,uint256,uint256,uint256,uint256)\");\r\n        _eventParam = abi.encode(\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    event LogSellMulti(\r\n        address[] tokens,\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSellMulti(\r\n        OneProtoMultiData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        emit LogSellMulti(\r\n            oneProtoData.tokens,\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        _eventCode = keccak256(\"LogSellMulti(address[],address,address,uint256,uint256,uint256,uint256)\");\r\n        _eventParam = abi.encode(\r\n            oneProtoData.tokens,\r\n            address(oneProtoData.buyToken),\r\n            address(oneProtoData.sellToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData._sellAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract OneInchEventResolver is OneProtoEventResolver {\r\n    event LogSellThree(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSellThree(\r\n        OneInchData memory oneInchData,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        emit LogSellThree(\r\n            address(oneInchData.buyToken),\r\n            address(oneInchData.sellToken),\r\n            oneInchData._buyAmt,\r\n            oneInchData._sellAmt,\r\n            0,\r\n            setId\r\n        );\r\n        _eventCode = keccak256(\"LogSellThree(address,address,uint256,uint256,uint256,uint256)\");\r\n        _eventParam = abi.encode(\r\n            address(oneInchData.buyToken),\r\n            address(oneInchData.sellToken),\r\n            oneInchData._buyAmt,\r\n            oneInchData._sellAmt,\r\n            0,\r\n            setId\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract OneProtoResolverHelpers is OneInchEventResolver {\r\n    function _sell(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        OneProtoInterface oneProtoContract = OneProtoInterface(getOneProtoAddress());\r\n\r\n        (, oneProtoData.distribution) = oneProtoContract.getExpectedReturn(\r\n                oneProtoData.sellToken,\r\n                oneProtoData.buyToken,\r\n                oneProtoData._sellAmt,\r\n                5,\r\n                0\r\n            );\r\n\r\n        oneProtoData._buyAmt = oneProtoSwap(\r\n            oneProtoContract,\r\n            oneProtoData\r\n        );\r\n\r\n        setUint(setId, oneProtoData._buyAmt);\r\n\r\n        emitLogSell(oneProtoData, getId, setId);\r\n    }\r\n\r\n    function _sellTwo(\r\n        OneProtoData memory oneProtoData,\r\n        uint getId,\r\n        uint setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        oneProtoData._buyAmt = oneProtoSwap(\r\n            OneProtoInterface(getOneProtoAddress()),\r\n            oneProtoData\r\n        );\r\n\r\n        setUint(setId, oneProtoData._buyAmt);\r\n        emitLogSellTwo(oneProtoData, getId, setId);\r\n    }\r\n\r\n    function _sellMulti(\r\n        OneProtoMultiData memory oneProtoData,\r\n        uint getId,\r\n        uint setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        oneProtoData._buyAmt = oneProtoSwapMulti(oneProtoData);\r\n        setUint(setId, oneProtoData._buyAmt);\r\n\r\n        emitLogSellMulti(oneProtoData, getId, setId);\r\n    }\r\n}\r\n\r\ncontract OneInchResolverHelpers is OneProtoResolverHelpers {\r\n    function _sellThree(\r\n        OneInchData memory oneInchData,\r\n        uint setId\r\n    ) internal {\r\n        TokenInterface _sellAddr = oneInchData.sellToken;\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = oneInchData._sellAmt;\r\n        } else {\r\n            TokenInterface(_sellAddr).approve(getOneInchTokenTaker(), oneInchData._sellAmt);\r\n        }\r\n\r\n        require(checkOneInchSig(oneInchData.callData), \"Not-swap-function\");\r\n\r\n        oneInchData._buyAmt = oneInchSwap(oneInchData, ethAmt);\r\n        setUint(setId, oneInchData._buyAmt);\r\n\r\n        emitLogSellThree(oneInchData, setId);\r\n    }\r\n}\r\n\r\ncontract OneProto is OneInchResolverHelpers {\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: new uint[](0),\r\n            _buyAmt: 0,\r\n            disableDexes: 0\r\n        });\r\n\r\n        _sell(oneProtoData, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto using off-chain calculation.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellTwo(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint disableDexes,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            _buyAmt: 0\r\n        });\r\n\r\n        _sellTwo(oneProtoData, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto using muliple token.\r\n     * @param tokens array of tokens.\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellMulti(\r\n        address[] calldata tokens,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint[] calldata disableDexes,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoMultiData memory oneProtoData = OneProtoMultiData({\r\n            tokens: tokens,\r\n            buyToken: TokenInterface(address(tokens[tokens.length - 1])),\r\n            sellToken: TokenInterface(address(tokens[0])),\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            _sellAmt: sellAmt,\r\n            _buyAmt: 0\r\n        });\r\n\r\n        _sellMulti(oneProtoData, getId, setId);\r\n    }\r\n}\r\n\r\ncontract OneInch is OneProto {\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1inch.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param callData Data from 1inch API.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellThree(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        bytes calldata callData,\r\n        uint setId\r\n    ) external payable {\r\n        OneInchData memory oneInchData = OneInchData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            unitAmt: unitAmt,\r\n            callData: callData,\r\n            _sellAmt: sellAmt,\r\n            _buyAmt: 0\r\n        });\r\n\r\n        _sellThree(oneInchData, setId);\r\n    }\r\n}\r\n\r\ncontract ConnectOne is OneInch {\r\n    string public name = \"1inch-1proto-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellThree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellTwo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellThree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectOne","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://47b1173ee0ffde3daf24a364abc887a92bc34c5d010247c7ffad78a057756bd7"}]}