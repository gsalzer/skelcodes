{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\n//import '@uniswap/v2-periphery/contracts/libraries/SafeMath.sol';\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary RB_SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y != 0);\r\n        z = x / y;    \r\n    }\r\n}\r\n\r\nlibrary RB_UnsignedSafeMath {\r\n    function add(int x, int y) internal pure returns (int z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(int x, int y) internal pure returns (int z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(int x, int y) internal pure returns (int z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n\r\n    function div(int x, int y) internal pure returns (int z) {\r\n        require(y != 0);\r\n        z = x / y;    \r\n    }\r\n}\r\n\r\n\r\n//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes /* calldata */ data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n/** Calculates the Delta for a rebase based on the ratio\r\n*** between the price of two different token pairs on \r\n*** Uniswap \r\n***\r\n*** - minimalist design\r\n*** - low gas design\r\n*** - free for anyone to call. \r\n***\r\n****/\r\ncontract RebaseDelta {\r\n\r\n    using RB_SafeMath for uint256;\r\n    using RB_UnsignedSafeMath for int256;\r\n    \r\n    uint256 private constant PRICE_PRECISION = 10**9;\r\n\r\n    function getPrice(IUniswapV2Pair pair_, bool flip_) \r\n    public\r\n    view\r\n    returns (uint256) \r\n    {\r\n        require(address(pair_) != address(0));\r\n\r\n        (uint256 reserves0, uint256 reserves1, ) = pair_.getReserves();\r\n\r\n        if (flip_) {\r\n            (reserves0, reserves1) = (reserves1, reserves0);            \r\n        }\r\n\r\n        // reserves0 = base (probably ETH/WETH)\r\n        // reserves1 = token of interest (maybe ampleforthgold or paxusgold etc)\r\n\r\n        // multiply to equate decimals, multiply up to PRICE_PRECISION\r\n\r\n        uint256 price = (reserves1.mul(PRICE_PRECISION)).div(reserves0);\r\n\r\n        return price;\r\n    }\r\n\r\n    // calculates the supply delta for moving the price of token X to the price\r\n    // of token Y (with the understanding that they are both priced in a common\r\n    // tokens value, i.e. WETH).  \r\n    function calculate(IUniswapV2Pair X_,\r\n                      bool flipX_,\r\n                      uint256 decimalsX_,\r\n                      uint256 SupplyX_, \r\n                      IUniswapV2Pair Y_,\r\n                      bool flipY_,\r\n                      uint256 decimalsY_)\r\n    public\r\n    view\r\n    returns (int256)\r\n    {\r\n        uint256 px = getPrice(X_, flipX_);\r\n        require(px != uint256(0));\r\n        uint256 py = getPrice(Y_, flipY_);\r\n        require(py != uint256(0));\r\n\r\n        uint256 targetSupply = (SupplyX_.mul(py)).div(px);\r\n\r\n        // adust for decimals\r\n        if (decimalsX_ == decimalsY_) {\r\n            // do nothing\r\n        }\r\n        else if (decimalsX_ > decimalsY_) {\r\n            uint256 ddg = (10**decimalsX_).div(10**decimalsY_);\r\n            require (ddg != uint256(0));\r\n            targetSupply = targetSupply.mul(ddg); \r\n        }\r\n        else {\r\n            uint256 ddl = (10**decimalsY_).div(10**decimalsX_);\r\n            require (ddl != uint256(0));\r\n            targetSupply = targetSupply.div(ddl);        \r\n        }\r\n\r\n        int256 delta = int256(SupplyX_).sub(int256(targetSupply));\r\n\r\n        return delta;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"X_\",\"type\":\"address\"},{\"name\":\"flipX_\",\"type\":\"bool\"},{\"name\":\"decimalsX_\",\"type\":\"uint256\"},{\"name\":\"SupplyX_\",\"type\":\"uint256\"},{\"name\":\"Y_\",\"type\":\"address\"},{\"name\":\"flipY_\",\"type\":\"bool\"},{\"name\":\"decimalsY_\",\"type\":\"uint256\"}],\"name\":\"calculate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pair_\",\"type\":\"address\"},{\"name\":\"flip_\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RebaseDelta","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://749baa67d32aba043a08af32953144f75a3f440115e88120b0af62e3653375cd"}]}