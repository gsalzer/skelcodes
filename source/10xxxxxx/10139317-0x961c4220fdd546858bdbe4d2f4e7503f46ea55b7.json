{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface WethToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n    function withdraw(uint wad) external;\r\n    function deposit() external payable;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Deposit(address indexed dst, uint wad);\r\n    event Withdrawal(address indexed src, uint wad);\r\n}\r\n\r\n\r\n// File: browser/common/SafeAddress.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeAddress {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function safeEthTransfer(address recipient, uint256 amount)  internal {\r\n        if(amount == 0) amount = address(this).balance;\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function safeTokenTransfer(address _token, address to, uint256 value) internal {\r\n        IERC20 token = IERC20(_token);\r\n        if(value == 0) value = token.balanceOf(address(this));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: browser/common/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: browser/common/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: browser/common/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () public {\r\n        _owner = _msgSender();\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwnership(address newOwner) public onlyOwner {\r\n        _changeOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _changeOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        require(newOwner != _owner);\r\n        emit OwnerChanged(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: browser/common/Sweepable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract Sweepable is Ownable {\r\n    using SafeAddress for address;\r\n    bool private _sweepable;\r\n    \r\n    event Sweeped(address _from, address _to);\r\n    event SweepStateChange(bool _fromSweepable, bool _toSweepable);\r\n    \r\n    constructor() public {\r\n        emit SweepStateChange(_sweepable, true);\r\n        _sweepable = true;\r\n    }\r\n    \r\n    modifier sweepableOnly() {\r\n        require(isOwner() && isSweepable());\r\n        _;\r\n    }\r\n    function isSweepable() public view returns(bool) {\r\n        return _sweepable;\r\n    }\r\n    function enableSweep(bool _enable) public onlyOwner {\r\n        require(_sweepable != _enable);\r\n        emit SweepStateChange(_sweepable, _enable);\r\n        _sweepable = _enable;\r\n    }\r\n    function sweep(address _token) public sweepableOnly {\r\n        if(_token == address(0x0)) {\r\n            _sweepEth();\r\n        } else {\r\n            _sweepToken(_token);\r\n        }\r\n    }\r\n    function _sweepEth() private {\r\n        emit Sweeped(address(this), owner());\r\n        owner().safeEthTransfer(0);\r\n    }\r\n    function _sweepToken(address _token) private {\r\n        emit Sweeped(address(this), owner());\r\n        _token.safeTokenTransfer(owner(), 0);\r\n    }\r\n}\r\n\r\ncontract Weth2Eth is Sweepable {\r\n    using SafeAddress for address;\r\n    address constant _wethToken = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    WethToken public Weth;\r\n\r\n    constructor() public {\r\n        Weth = WethToken(_wethToken);\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    function exchangeToEthSendTo(address _to) public {\r\n        uint256 wethBalance = Weth.balanceOf(address(this));\r\n        require(wethBalance > 0);\r\n        _exchangeToEth(wethBalance);\r\n        _to.safeEthTransfer(0);\r\n    }\r\n    \r\n    function _exchangeToEth(uint256 amount) private {\r\n        require(address(Weth) != address(0));\r\n        Weth.withdraw(amount);\r\n    }\r\n\r\n}\r\n// File: browser/Eth2Weth.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract Eth2Weth is Sweepable {\r\n    address constant _wethToken = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    WethToken public Weth;\r\n    Weth2Eth public _Weth2Eth;\r\n    \r\n    constructor() public  {\r\n        Weth = WethToken(_wethToken);\r\n    }\r\n    function setup(address payable _weth2eth) public {\r\n        require(address(_Weth2Eth) == address(0));\r\n        _Weth2Eth = Weth2Eth(_weth2eth);\r\n    }\r\n\r\n    function exchangeToWethSendToExchangeToEth(address _addr) public payable {\r\n        exchangeToWethSendTo(address(_Weth2Eth));\r\n        (bool success,) = address(_Weth2Eth).call(abi.encodeWithSignature(\"exchangeToEthSendTo(address)\", _addr));\r\n        require(success);\r\n    }\r\n    \r\n    function exchangeToWethSendTo(address _to) public payable {\r\n        _exchangeToWeth(_msgValue());\r\n        uint256 wethBalance = Weth.balanceOf(address(this));\r\n        Weth.transfer(_to,wethBalance);\r\n    }\r\n    \r\n    function _exchangeToWeth(uint256 amount) private {\r\n        require(address(Weth) != address(0));\r\n        Weth.deposit{ value: amount }();\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract WethDeployer is Ownable{\r\n    address public eth2weth;\r\n    address payable public weth2eth;\r\n    event Deployed(address ETH2WETH, address WETH2ETH);\r\n    constructor() public  {}\r\n    \r\n    function setup() public onlyOwner{\r\n        bytes32 _salt = _getSalt(uint256(address(this)),_msgSender());\r\n        weth2eth = _deployContract(_salt,type(Weth2Eth).creationCode);\r\n        eth2weth = _deployContract(_salt,type(Eth2Weth).creationCode);\r\n        Eth2Weth(eth2weth).setup(weth2eth);\r\n        emit Deployed(eth2weth, weth2eth);\r\n    }\r\n\r\n    function _getSalt(uint256 _nonce,address _sender) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_nonce, _sender));\r\n    }\r\n    \r\n    function _deployContract(bytes32 salt, bytes memory bytecode) internal returns(address payable deployedAddress){\r\n        assembly { // solhint-disable-line\r\n          deployedAddress := create2(           // call CREATE2 with 4 arguments.\r\n            0x0,                            // forward any attached value.\r\n            add(0x20, bytecode),                         // pass in initialization code.\r\n            mload(bytecode),                         // pass in init code's length.\r\n            salt                                  // pass in the salt value.\r\n          )\r\n        }\r\n        require(address(deployedAddress) != address(0), \"deployContract call failed\");\r\n        return deployedAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_fromSweepable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_toSweepable\",\"type\":\"bool\"}],\"name\":\"SweepStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Sweeped\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Weth\",\"outputs\":[{\"internalType\":\"contract WethToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"exchangeToEthSendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSweepable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Weth2Eth","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3bd994903cc455575f9b9beff965f898472061dbf281ab30770a40cea47285dd"}]}