{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function last(address) external view returns (uint);\r\n    function count(address) external view returns (uint);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int,\r\n        int\r\n    ) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n    function gem(bytes32, address) external view returns (uint);\r\n\r\n}\r\n\r\ninterface TokenJoinInterface {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (TokenInterface);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface DaiJoinInterface {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (TokenInterface);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface InstaMapping {\r\n    function gemJoinMapping(bytes32) external view returns (address);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    uint256 constant RAY = 10 ** 27;\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\r\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // kovan\r\n    }\r\n\r\n    function isETH(address token) internal pure returns(bool) {\r\n        return token == getAddressETH() || token == getAddressWETH();\r\n    }\r\n}\r\n\r\n\r\ncontract MakerMCDAddresses is Helpers {\r\n    /**\r\n     * @dev Return Maker MCD Manager Address.\r\n    */\r\n    function getMcdManager() internal pure returns (address) {\r\n        return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39; //mainnet\r\n        // return 0x1476483dD8C35F25e568113C5f70249D3976ba21; // kovan\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD DAI_Join Address.\r\n    */\r\n    function getMcdDaiJoin() internal pure returns (address) {\r\n        return 0x9759A6Ac90977b93B58547b4A71c78317f391A28; // mainnet\r\n        // return 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c; // kovan\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD Jug Address.\r\n    */\r\n    function getMcdJug() internal pure returns (address) {\r\n        return 0x19c0976f590D67707E62397C87829d896Dc0f1F1; // mainnet\r\n        // return 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD; // kovan\r\n    }\r\n}\r\n\r\ncontract MakerHelpers is MakerMCDAddresses {\r\n    /**\r\n     * @dev Return InstaMapping Address.\r\n     */\r\n    function getMappingAddr() internal pure returns (address) {\r\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Vault's ilk.\r\n    */\r\n    function getVaultData(ManagerLike managerContract, uint vault) internal view returns (bytes32 ilk, address urn) {\r\n        ilk = managerContract.ilks(vault);\r\n        urn = managerContract.urns(vault);\r\n    }\r\n\r\n    /**\r\n     * @dev Gem Join address is ETH type collateral.\r\n    */\r\n    function isGemEth(address tknAddr) internal pure returns (bool) {\r\n        return tknAddr == getAddressWETH();\r\n    }\r\n\r\n    /**\r\n     * @dev Get Vault Debt Amount.\r\n    */\r\n    function _getVaultDebt(\r\n        address vat,\r\n        bytes32 ilk,\r\n        address urn\r\n    ) internal view returns (uint wad) {\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        uint dai = VatLike(vat).dai(urn);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        wad = rad / RAY;\r\n\r\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Borrow Amount.\r\n    */\r\n    function _getBorrowAmt(\r\n        address vat,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint amt\r\n    ) internal returns (int dart)\r\n    {\r\n        address jug = getMcdJug();\r\n        uint rate = JugLike(jug).drip(ilk);\r\n        uint dai = VatLike(vat).dai(urn);\r\n        if (dai < mul(amt, RAY)) {\r\n            dart = toInt(sub(mul(amt, RAY), dai) / rate);\r\n            dart = mul(uint(dart), rate) < mul(amt, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get Payback Amount.\r\n    */\r\n    function _getWipeAmt(\r\n        address vat,\r\n        uint amt,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int dart)\r\n    {\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        dart = toInt(amt / rate);\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n}\r\n\r\ncontract BasicResolver is MakerHelpers {\r\n    event LogDeposit(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\r\n    event LogWithdraw(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\r\n    event LogBorrow(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\r\n    event LogPayback(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\r\n\r\n    /**\r\n     * @dev Deposit ETH/ERC20_Token Collateral.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to deposit.\r\n    */\r\n    function deposit(uint vault, uint amt) external payable\r\n    {\r\n        ManagerLike managerContract = ManagerLike(getMcdManager());\r\n\r\n        uint _amt = amt;\r\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\r\n\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\r\n        TokenInterface tokenContract = tokenJoinContract.gem();\r\n\r\n        if (isGemEth(address(tokenContract))) {\r\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\r\n            tokenContract.deposit.value(_amt)();\r\n        } else {\r\n            _amt = _amt == uint(-1) ?  tokenContract.balanceOf(address(this)) : _amt;\r\n        }\r\n\r\n        tokenContract.approve(address(colAddr), _amt);\r\n        tokenJoinContract.join(address(this), _amt);\r\n\r\n        VatLike(managerContract.vat()).frob(\r\n            ilk,\r\n            urn,\r\n            address(this),\r\n            address(this),\r\n            toInt(convertTo18(tokenJoinContract.dec(), _amt)),\r\n            0\r\n        );\r\n\r\n        emit LogDeposit(vault, ilk, _amt);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH/ERC20_Token Collateral.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to withdraw.\r\n    */\r\n    function withdraw(uint vault, uint amt) external payable {\r\n        ManagerLike managerContract = ManagerLike(getMcdManager());\r\n\r\n        uint _amt = amt;\r\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\r\n\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\r\n\r\n        uint _amt18;\r\n        if (_amt == uint(-1)) {\r\n            (_amt18,) = VatLike(managerContract.vat()).urns(ilk, urn);\r\n            _amt = convert18ToDec(tokenJoinContract.dec(), _amt18);\r\n        } else {\r\n            _amt18 = convertTo18(tokenJoinContract.dec(), _amt);\r\n        }\r\n\r\n        managerContract.frob(\r\n            vault,\r\n            -toInt(_amt18),\r\n            0\r\n        );\r\n\r\n        managerContract.flux(\r\n            vault,\r\n            address(this),\r\n            _amt18\r\n        );\r\n\r\n        TokenInterface tokenContract = tokenJoinContract.gem();\r\n\r\n        if (isGemEth(address(tokenContract))) {\r\n            tokenJoinContract.exit(address(this), _amt);\r\n            tokenContract.withdraw(_amt);\r\n        } else {\r\n            tokenJoinContract.exit(address(this), _amt);\r\n        }\r\n\r\n        \r\n\r\n        emit LogWithdraw(vault, ilk, _amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Borrow DAI.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to borrow.\r\n    */\r\n    function borrow(uint vault, uint amt) external payable {\r\n        ManagerLike managerContract = ManagerLike(getMcdManager());\r\n\r\n        uint _amt = amt;\r\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\r\n\r\n        address daiJoin = getMcdDaiJoin();\r\n\r\n        VatLike vatContract = VatLike(managerContract.vat());\r\n\r\n        managerContract.frob(\r\n            vault,\r\n            0,\r\n            _getBorrowAmt(\r\n                address(vatContract),\r\n                urn,\r\n                ilk,\r\n                _amt\r\n            )\r\n        );\r\n\r\n        managerContract.move(\r\n            vault,\r\n            address(this),\r\n            toRad(_amt)\r\n        );\r\n\r\n        if (vatContract.can(address(this), address(daiJoin)) == 0) {\r\n            vatContract.hope(daiJoin);\r\n        }\r\n\r\n        DaiJoinInterface(daiJoin).exit(address(this), _amt);\r\n\r\n        emit LogBorrow(vault, ilk, _amt);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed DAI.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to payback.\r\n    */\r\n    function payback(uint vault, uint amt) external payable {\r\n        ManagerLike managerContract = ManagerLike(getMcdManager());\r\n        uint _amt = amt;\r\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\r\n\r\n        address vat = managerContract.vat();\r\n\r\n        uint _maxDebt = _getVaultDebt(vat, ilk, urn);\r\n\r\n        _amt = _amt == uint(-1) ? _maxDebt : _amt;\r\n\r\n        require(_maxDebt >= _amt, \"paying-excess-debt\");\r\n\r\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(getMcdDaiJoin());\r\n        daiJoinContract.dai().approve(getMcdDaiJoin(), _amt);\r\n        daiJoinContract.join(urn, _amt);\r\n\r\n        managerContract.frob(\r\n            vault,\r\n            0,\r\n            _getWipeAmt(\r\n                vat,\r\n                VatLike(vat).dai(urn),\r\n                urn,\r\n                ilk\r\n            )\r\n        );\r\n\r\n        emit LogPayback(vault, ilk, _amt);\r\n    }\r\n}\r\n\r\ncontract ConnectMaker is  BasicResolver {\r\n    string public constant name = \"Flashloan-MakerDao-v1.0\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectMaker","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6f974fb4b6cf37fae6edbd44e6866b3a532dc3276d1364341ab0be8c73eb7047"}]}