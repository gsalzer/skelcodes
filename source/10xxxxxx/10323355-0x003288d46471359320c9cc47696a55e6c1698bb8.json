{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/registry/IClaimTopicsRegistry.sol\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\r\n *\r\n *     Copyright (C) 2019, Tokeny sàrl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IClaimTopicsRegistry {\r\n\r\n   /**\r\n    *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\r\n    *  the event is emitted by the 'addClaimTopic' function\r\n    *  `claimTopic` is the required claim added to the Claim Topics Registry\r\n    */\r\n    event ClaimTopicAdded(uint256 indexed claimTopic);\r\n\r\n   /**\r\n    *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\r\n    *  the event is emitted by the 'removeClaimTopic' function\r\n    *  `claimTopic` is the required claim removed from the Claim Topics Registry\r\n    */\r\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\r\n\r\n   /**\r\n    * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\r\n    * Only owner can call.\r\n    * emits `ClaimTopicAdded` event\r\n    * @param _claimTopic The claim topic index\r\n    */\r\n    function addClaimTopic(uint256 _claimTopic) external;\r\n\r\n   /**\r\n    *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\r\n    *  Only owner can call.\r\n    *  emits `ClaimTopicRemoved` event\r\n    *  @param _claimTopic The claim topic index\r\n    */\r\n    function removeClaimTopic(uint256 _claimTopic) external;\r\n\r\n   /**\r\n    *  @dev Get the trusted claim topics for the security token\r\n    *  @return Array of trusted claim topics\r\n    */\r\n    function getClaimTopics() external view returns (uint256[] memory);\r\n\r\n   /**\r\n    *  @dev Transfers the Ownership of ClaimTopics to a new Owner.\r\n    *  Only owner can call.\r\n    *  @param _newOwner The new owner of this contract.\r\n    */\r\n    function transferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/roles/Ownable.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/registry/ClaimTopicsRegistry.sol\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\r\n *\r\n *     Copyright (C) 2019, Tokeny sàrl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\ncontract ClaimTopicsRegistry is IClaimTopicsRegistry, Ownable {\r\n\r\n    /// All required Claim Topics\r\n    uint256[] private claimTopics;\r\n\r\n   /**\r\n    *  @dev See {IClaimTopicsRegistry-addClaimTopic}.\r\n    */\r\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\r\n        uint length = claimTopics.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            require(claimTopics[i] != _claimTopic, \"claimTopic already exists\");\r\n        }\r\n        claimTopics.push(_claimTopic);\r\n        emit ClaimTopicAdded(_claimTopic);\r\n    }\r\n\r\n   /**\r\n    *  @dev See {IClaimTopicsRegistry-removeClaimTopic}.\r\n    */\r\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\r\n        uint length = claimTopics.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            if (claimTopics[i] == _claimTopic) {\r\n                delete claimTopics[i];\r\n                claimTopics[i] = claimTopics[length - 1];\r\n                delete claimTopics[length - 1];\r\n                claimTopics.pop();\r\n                emit ClaimTopicRemoved(_claimTopic);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n   /**\r\n    *  @dev See {IClaimTopicsRegistry-getClaimTopics}.\r\n    */\r\n    function getClaimTopics() external override view returns (uint256[] memory) {\r\n        return claimTopics;\r\n    }\r\n\r\n   /**\r\n    *  @dev See {IClaimTopicsRegistry-transferOwnershipOnClaimTopicsRegistryContract}.\r\n    */\r\n    function transferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external override onlyOwner {\r\n        transferOwnership(_newOwner);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOnClaimTopicsRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClaimTopicsRegistry","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://09defd746cfbdb23363feebfe343d23ef4124aaae6779c5ea93b416200eab9ff"}]}