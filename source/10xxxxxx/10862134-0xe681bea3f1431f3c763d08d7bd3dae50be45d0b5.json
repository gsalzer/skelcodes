{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract BubbleJackpot {\r\n    using SafeMath for *;\r\n\r\n    address payable[6] rankList;\r\n    address owner;\r\n    uint256 public countdown;\r\n    bool isLottery;\r\n\r\n    IBubble Bubble;\r\n\r\n    mapping(address => uint256) betMap;\r\n    mapping(address => uint256) withdrawMap;\r\n\r\n    uint256 public totalToken;\r\n    uint256 LOTTERYCOUNTDOWN = 24 hours;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(addr)\r\n        }\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            rankList[idx] = address(0);\r\n        }\r\n    }\r\n\r\n    function getBubbleAddress() public view returns (address) {\r\n        return address(Bubble);\r\n    }\r\n\r\n    function setBubbleAddress(address contractAddr) public onlyOwner() {\r\n        require(address(Bubble) == address(0));\r\n        Bubble = IBubble(contractAddr);\r\n    }\r\n\r\n    function startLotteryCountdown() public isHuman() {\r\n        require(\r\n            Bubble.getGameOverStatus(),\r\n            \"only lottery after bubble game over\"\r\n        );\r\n        require(countdown == 0);\r\n        countdown = now + LOTTERYCOUNTDOWN;\r\n    }\r\n\r\n    function lottery() public isHuman() {\r\n        require(\r\n            Bubble.getGameOverStatus(),\r\n            \"only lottery after bubble game over\"\r\n        );\r\n        require(countdown != 0 && now > countdown, \"countdown is not finished\");\r\n        require(!isLottery, \"only lottery once\");\r\n        isLottery = true;\r\n        Bubble.transferAllEthToJackPot();\r\n\r\n        uint256 balance = address(this).balance;\r\n        uint256 temp = 0;\r\n        uint8[5] memory profit = [52, 23, 14, 8, 3];\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            if (rankList[idx] != address(0)) {\r\n                withdrawMap[rankList[idx]] = balance.mul(profit[idx]).div(100);\r\n                temp = temp.add(withdrawMap[rankList[idx]]);\r\n            }\r\n        }\r\n\r\n        withdrawMap[owner] = withdrawMap[owner].add(balance).sub(temp);\r\n    }\r\n\r\n    function withdraw() public isHuman() {\r\n        uint256 amount = withdrawMap[msg.sender];\r\n        require(amount > 0, \"must above 0\");\r\n        withdrawMap[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function getWithdrawAmount(address user) public view returns (uint256) {\r\n        return withdrawMap[user];\r\n    }\r\n\r\n    function bet(uint256 amount) public isHuman() {\r\n        if (countdown != 0 && now > countdown) {\r\n            revert();\r\n        }\r\n        Bubble.sendTokenToJackpot(msg.sender, amount);\r\n        betMap[msg.sender] = betMap[msg.sender].add(amount);\r\n        totalToken = totalToken.add(amount);\r\n        updateRankList(msg.sender);\r\n    }\r\n\r\n    //Get\r\n    function getBetTokenAmount() public view returns (uint256) {\r\n        return betMap[msg.sender];\r\n    }\r\n\r\n    function getRankListInfo()\r\n        public\r\n        view\r\n        returns (address payable[6] memory, uint256[5] memory)\r\n    {\r\n        uint256[5] memory tokenList;\r\n\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            address user = rankList[idx];\r\n            tokenList[idx] = betMap[user];\r\n        }\r\n\r\n        return (rankList, tokenList);\r\n    }\r\n\r\n    //Rank\r\n    function inRankList(address addr) private returns (bool) {\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            if (addr == rankList[idx]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function updateRankList(address payable addr) private returns (bool) {\r\n        uint256 idx = 0;\r\n        uint256 rechargeAmount = betMap[addr];\r\n        uint256 lastOne = betMap[rankList[5]];\r\n        if (rechargeAmount < lastOne) {\r\n            return false;\r\n        }\r\n        address payable[6] memory tempList = rankList;\r\n        if (!inRankList(addr)) {\r\n            tempList[5] = addr;\r\n            quickSort(tempList, 0, 5);\r\n        } else {\r\n            quickSort(tempList, 0, 4);\r\n        }\r\n        for (idx = 0; idx < 6; idx++) {\r\n            if (tempList[idx] != rankList[idx]) {\r\n                rankList[idx] = tempList[idx];\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function quickSort(\r\n        address payable[6] memory list,\r\n        int256 left,\r\n        int256 right\r\n    ) internal {\r\n        int256 i = left;\r\n        int256 j = right;\r\n        if (i == j) return;\r\n        address addr = list[uint256(left + (right - left) / 2)];\r\n        uint256 token = betMap[addr];\r\n        while (i <= j) {\r\n            while (betMap[list[uint256(i)]] > token) i++;\r\n            while (token > betMap[list[uint256(j)]]) j--;\r\n            if (i <= j) {\r\n                (list[uint256(i)], list[uint256(j)]) = (\r\n                    list[uint256(j)],\r\n                    list[uint256(i)]\r\n                );\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j) quickSort(list, left, j);\r\n        if (i < right) quickSort(list, i, right);\r\n    }\r\n}\r\n\r\ninterface IBubble {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function getGameOverStatus() external view returns (bool);\r\n\r\n    function transferAllEthToJackPot() external;\r\n\r\n    function sendTokenToJackpot(address sender, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBubbleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRankListInfo\",\"outputs\":[{\"internalType\":\"address payable[6]\",\"name\":\"\",\"type\":\"address[6]\"},{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"setBubbleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startLotteryCountdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BubbleJackpot","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://60090d4445968919ac61c0dc8de6279c83becc7f5bc1ce907bb3a1b13ff101c7"}]}