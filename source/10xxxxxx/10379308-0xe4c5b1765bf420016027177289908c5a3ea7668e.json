{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface MassetStructs {\r\n\r\n    /** @dev Stores high level basket info */\r\n    struct Basket {\r\n\r\n        /** @dev Array of Bassets currently active */\r\n        Basset[] bassets;\r\n\r\n        /** @dev Max number of bAssets that can be present in any Basket */\r\n        uint8 maxBassets;\r\n\r\n        /** @dev Some bAsset is undergoing re-collateralisation */\r\n        bool undergoingRecol;\r\n\r\n        /**\r\n         * @dev In the event that we do not raise enough funds from the auctioning of a failed Basset,\r\n         * The Basket is deemed as failed, and is undercollateralised to a certain degree.\r\n         * The collateralisation ratio is used to calc Masset burn rate.\r\n         */\r\n        bool failed;\r\n        uint256 collateralisationRatio;\r\n\r\n    }\r\n\r\n    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\r\n    struct Basset {\r\n\r\n        /** @dev Address of the bAsset */\r\n        address addr;\r\n\r\n        /** @dev Status of the basset,  */\r\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\r\n\r\n        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\r\n        bool isTransferFeeCharged; // takes a byte in storage\r\n\r\n        /**\r\n         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n         */\r\n        uint256 ratio;\r\n\r\n        /** @dev Target weights of the Basset (100% == 1e18) */\r\n        uint256 maxWeight;\r\n\r\n        /** @dev Amount of the Basset that is held in Collateral */\r\n        uint256 vaultBalance;\r\n\r\n    }\r\n\r\n    /** @dev Status of the Basset - has it broken its peg? */\r\n    enum BassetStatus {\r\n        Default,\r\n        Normal,\r\n        BrokenBelowPeg,\r\n        BrokenAbovePeg,\r\n        Blacklisted,\r\n        Liquidating,\r\n        Liquidated,\r\n        Failed\r\n    }\r\n\r\n    /** @dev Internal details on Basset */\r\n    struct BassetDetails {\r\n        Basset bAsset;\r\n        address integrator;\r\n        uint8 index;\r\n    }\r\n\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct ForgePropsMulti {\r\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n\r\n    /** @dev All details needed for proportionate Redemption */\r\n    struct RedeemPropsMulti {\r\n        uint256 colRatio;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n}\r\n\r\ncontract IForgeValidator is MassetStructs {\r\n    function validateMint(uint256 _totalVault, Basset calldata _basset, uint256 _bAssetQuantity)\r\n        external pure returns (bool, string memory);\r\n    function validateMintMulti(uint256 _totalVault, Basset[] calldata _bassets, uint256[] calldata _bAssetQuantities)\r\n        external pure returns (bool, string memory);\r\n    function validateSwap(uint256 _totalVault, Basset calldata _inputBasset, Basset calldata _outputBasset, uint256 _quantity)\r\n        external pure returns (bool, string memory, uint256, bool);\r\n    function validateRedemption(\r\n        bool basketIsFailed,\r\n        uint256 _totalVault,\r\n        Basset[] calldata _allBassets,\r\n        uint8[] calldata _indices,\r\n        uint256[] calldata _bassetQuantities) external pure returns (bool, string memory, bool);\r\n    function calculateRedemptionMulti(\r\n        uint256 _mAssetQuantity,\r\n        Basset[] calldata _allBassets) external pure returns (bool, string memory, uint256[] memory);\r\n}\r\n\r\ninterface IPlatformIntegration {\r\n\r\n    /**\r\n     * @dev Deposit the given bAsset to Lending platform\r\n     * @param _bAsset bAsset address\r\n     * @param _amount Amount to deposit\r\n     */\r\n    function deposit(address _bAsset, uint256 _amount, bool isTokenFeeCharged)\r\n        external returns (uint256 quantityDeposited);\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(address _receiver, address _bAsset, uint256 _amount, bool _isTokenFeeCharged) external;\r\n\r\n    /**\r\n     * @dev Returns the current balance of the given bAsset\r\n     */\r\n    function checkBalance(address _bAsset) external returns (uint256 balance);\r\n}\r\n\r\ncontract IBasketManager is MassetStructs {\r\n\r\n    /** @dev Setters for mAsset to update balances */\r\n    function increaseVaultBalance(\r\n        uint8 _bAsset,\r\n        address _integrator,\r\n        uint256 _increaseAmount) external;\r\n    function increaseVaultBalances(\r\n        uint8[] calldata _bAsset,\r\n        address[] calldata _integrator,\r\n        uint256[] calldata _increaseAmount) external;\r\n    function decreaseVaultBalance(\r\n        uint8 _bAsset,\r\n        address _integrator,\r\n        uint256 _decreaseAmount) external;\r\n    function decreaseVaultBalances(\r\n        uint8[] calldata _bAsset,\r\n        address[] calldata _integrator,\r\n        uint256[] calldata _decreaseAmount) external;\r\n    function collectInterest() external\r\n        returns (uint256 interestCollected, uint256[] memory gains);\r\n\r\n    /** @dev Setters for Gov to update Basket composition */\r\n    function addBasset(\r\n        address _basset,\r\n        address _integration,\r\n        bool _isTransferFeeCharged) external returns (uint8 index);\r\n    function setBasketWeights(address[] calldata _bassets, uint256[] calldata _weights) external;\r\n    function setTransferFeesFlag(address _bAsset, bool _flag) external;\r\n\r\n    /** @dev Getters to retrieve Basket information */\r\n    function getBasket() external view returns (Basket memory b);\r\n    function prepareForgeBasset(address _token, uint256 _amt, bool _mint) external\r\n        returns (bool isValid, BassetDetails memory bInfo);\r\n    function prepareSwapBassets(address _input, address _output, bool _isMint) external view\r\n        returns (bool, string memory, BassetDetails memory, BassetDetails memory);\r\n    function prepareForgeBassets(address[] calldata _bAssets, uint256[] calldata _amts, bool _mint) external\r\n        returns (ForgePropsMulti memory props);\r\n    function prepareRedeemMulti() external view\r\n        returns (RedeemPropsMulti memory props);\r\n    function getBasset(address _token) external view\r\n        returns (Basset memory bAsset);\r\n    function getBassets() external view\r\n        returns (Basset[] memory bAssets, uint256 len);\r\n\r\n    /** @dev Recollateralisation */\r\n    function handlePegLoss(address _basset, bool _belowPeg) external returns (bool actioned);\r\n    function negateIsolation(address _basset) external;\r\n}\r\n\r\ncontract IMasset is MassetStructs {\r\n\r\n    /** @dev Calc interest */\r\n    function collectInterest() external returns (uint256 massetMinted, uint256 newTotalSupply);\r\n\r\n    /** @dev Minting */\r\n    function mint(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetMinted);\r\n    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n\r\n    /** @dev Swapping */\r\n    function swap( address _input, address _output, uint256 _quantity, address _recipient)\r\n        external returns (uint256 output);\r\n    function getSwapOutput( address _input, address _output, uint256 _quantity)\r\n        external view returns (bool, string memory, uint256 output);\r\n\r\n    /** @dev Redeeming */\r\n    function redeem(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\r\n\r\n    /** @dev Setters for the Manager or Gov to update module info */\r\n    function upgradeForgeValidator(address _newForgeValidator) external;\r\n\r\n    /** @dev Setters for Gov to set system params */\r\n    function setSwapFee(uint256 _swapFee) external;\r\n\r\n    /** @dev Getters */\r\n    function getBasketManager() external view returns(address);\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract InitializableERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\r\n     */\r\n    function _initialize(string memory nameArg, string memory symbolArg, uint8 decimalsArg) internal {\r\n        _name = nameArg;\r\n        _symbol = symbolArg;\r\n        _decimals = decimalsArg;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract InitializableToken is ERC20, InitializableERC20Detailed {\r\n\r\n    /**\r\n     * @dev Initialization function for implementing contract\r\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\r\n     */\r\n    function _initialize(string memory _nameArg, string memory _symbolArg) internal {\r\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\r\n    }\r\n}\r\n\r\ncontract InitializableModuleKeys {\r\n\r\n    // Governance                             // Phases\r\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\r\n    bytes32 internal KEY_STAKING;             // 1.2\r\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\r\n\r\n    // mStable\r\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\r\n    bytes32 internal KEY_MANAGER;             // 1.2\r\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\r\n    bytes32 internal KEY_META_TOKEN;          // 1.1\r\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\r\n\r\n    /**\r\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\r\n     *      via Proxy to initialize constants in the Proxy contract.\r\n     */\r\n    function _initialize() internal {\r\n        // keccak256() values are evaluated only once at the time of this function call.\r\n        // Hence, no need to assign hard-coded values to these variables.\r\n        KEY_GOVERNANCE = keccak256(\"Governance\");\r\n        KEY_STAKING = keccak256(\"Staking\");\r\n        KEY_PROXY_ADMIN = keccak256(\"ProxyAdmin\");\r\n\r\n        KEY_ORACLE_HUB = keccak256(\"OracleHub\");\r\n        KEY_MANAGER = keccak256(\"Manager\");\r\n        KEY_RECOLLATERALISER = keccak256(\"Recollateraliser\");\r\n        KEY_META_TOKEN = keccak256(\"MetaToken\");\r\n        KEY_SAVINGS_MANAGER = keccak256(\"SavingsManager\");\r\n    }\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract InitializableModule is InitializableModuleKeys {\r\n\r\n    INexus public nexus;\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    function _initialize(address _nexus) internal {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n        InitializableModuleKeys._initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\ncontract InitializableReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    function _initialize() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MassetHelpers {\r\n\r\n    using StableMath for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function transferTokens(\r\n        address _sender,\r\n        address _recipient,\r\n        address _basset,\r\n        bool _erc20TransferFeeCharged,\r\n        uint256 _qty\r\n    )\r\n        internal\r\n        returns (uint256 receivedQty)\r\n    {\r\n        receivedQty = _qty;\r\n        if(_erc20TransferFeeCharged) {\r\n            uint256 balBefore = IERC20(_basset).balanceOf(_recipient);\r\n            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\r\n            uint256 balAfter = IERC20(_basset).balanceOf(_recipient);\r\n            receivedQty = StableMath.min(_qty, balAfter.sub(balBefore));\r\n        } else {\r\n            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\r\n        }\r\n    }\r\n\r\n    function safeInfiniteApprove(address _asset, address _spender)\r\n        internal\r\n    {\r\n        IERC20(_asset).safeApprove(_spender, 0);\r\n        IERC20(_asset).safeApprove(_spender, uint256(-1));\r\n    }\r\n}\r\n\r\n/**\r\n * @title   Masset\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  The Masset is a token that allows minting and redemption at a 1:1 ratio\r\n *          for underlying basket assets (bAssets) of the same peg (i.e. USD,\r\n *          EUR, Gold). Composition and validation is enforced via the BasketManager.\r\n * @dev     VERSION: 1.1\r\n *          DATE:    2020-06-30\r\n */\r\ncontract Masset is\r\n    Initializable,\r\n    IMasset,\r\n    InitializableToken,\r\n    InitializableModule,\r\n    InitializableReentrancyGuard\r\n{\r\n    using StableMath for uint256;\r\n\r\n    // Forging Events\r\n    event Minted(address indexed minter, address recipient, uint256 mAssetQuantity, address bAsset, uint256 bAssetQuantity);\r\n    event MintedMulti(address indexed minter, address recipient, uint256 mAssetQuantity, address[] bAssets, uint256[] bAssetQuantities);\r\n    event Swapped(address indexed swapper, address input, address output, uint256 outputAmount, address recipient);\r\n    event Redeemed(address indexed redeemer, address recipient, uint256 mAssetQuantity, address[] bAssets, uint256[] bAssetQuantities);\r\n    event RedeemedMasset(address indexed redeemer, address recipient, uint256 mAssetQuantity);\r\n    event PaidFee(address indexed payer, address asset, uint256 feeQuantity);\r\n\r\n    // State Events\r\n    event SwapFeeChanged(uint256 fee);\r\n    event RedemptionFeeChanged(uint256 fee);\r\n    event ForgeValidatorChanged(address forgeValidator);\r\n\r\n    // Modules and connectors\r\n    IForgeValidator public forgeValidator;\r\n    bool private forgeValidatorLocked;\r\n    IBasketManager private basketManager;\r\n\r\n    // Basic redemption fee information\r\n    uint256 public swapFee;\r\n    uint256 private MAX_FEE;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\r\n     */\r\n    function initialize(\r\n        string calldata _nameArg,\r\n        string calldata _symbolArg,\r\n        address _nexus,\r\n        address _forgeValidator,\r\n        address _basketManager\r\n    )\r\n        external\r\n        initializer\r\n    {\r\n        InitializableToken._initialize(_nameArg, _symbolArg);\r\n        InitializableModule._initialize(_nexus);\r\n        InitializableReentrancyGuard._initialize();\r\n\r\n        forgeValidator = IForgeValidator(_forgeValidator);\r\n\r\n        basketManager = IBasketManager(_basketManager);\r\n\r\n        MAX_FEE = 2e16;\r\n        swapFee = 4e15;\r\n    }\r\n\r\n    /**\r\n      * @dev Verifies that the caller is the Savings Manager contract\r\n      */\r\n    modifier onlySavingsManager() {\r\n        require(_savingsManager() == msg.sender, \"Must be savings manager\");\r\n        _;\r\n    }\r\n\r\n\r\n    /***************************************\r\n                MINTING (PUBLIC)\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\r\n     *      must have approval to spend the senders bAsset\r\n     * @param _bAsset         Address of the bAsset to mint\r\n     * @param _bAssetQuantity Quantity in bAsset units\r\n     * @return massetMinted   Number of newly minted mAssets\r\n     */\r\n    function mint(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 massetMinted)\r\n    {\r\n        return _mintTo(_bAsset, _bAssetQuantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\r\n     *      must have approval to spend the senders bAsset\r\n     * @param _bAsset         Address of the bAsset to mint\r\n     * @param _bAssetQuantity Quantity in bAsset units\r\n     * @param _recipient receipient of the newly minted mAsset tokens\r\n     * @return massetMinted   Number of newly minted mAssets\r\n     */\r\n    function mintTo(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 massetMinted)\r\n    {\r\n        return _mintTo(_bAsset, _bAssetQuantity, _recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint with multiple bAssets, at a 1:1 ratio to mAsset. This contract\r\n     *      must have approval to spend the senders bAssets\r\n     * @param _bAssets          Non-duplicate address array of bAssets with which to mint\r\n     * @param _bAssetQuantity   Quantity of each bAsset to mint. Order of array\r\n     *                          should mirror the above\r\n     * @param _recipient        Address to receive the newly minted mAsset tokens\r\n     * @return massetMinted     Number of newly minted mAssets\r\n     */\r\n    function mintMulti(\r\n        address[] calldata _bAssets,\r\n        uint256[] calldata _bAssetQuantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns(uint256 massetMinted)\r\n    {\r\n        return _mintTo(_bAssets, _bAssetQuantity, _recipient);\r\n    }\r\n\r\n    /***************************************\r\n              MINTING (INTERNAL)\r\n    ****************************************/\r\n\r\n    /** @dev Mint Single */\r\n    function _mintTo(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity,\r\n        address _recipient\r\n    )\r\n        internal\r\n        returns (uint256 massetMinted)\r\n    {\r\n        require(_recipient != address(0), \"Must be a valid recipient\");\r\n        require(_bAssetQuantity > 0, \"Quantity must not be 0\");\r\n\r\n        (bool isValid, BassetDetails memory bInfo) = basketManager.prepareForgeBasset(_bAsset, _bAssetQuantity, true);\r\n        if(!isValid) return 0;\r\n\r\n        // Transfer collateral to the platform integration address and call deposit\r\n        address integrator = bInfo.integrator;\r\n        (uint256 quantityDeposited, uint256 ratioedDeposit) =\r\n            _depositTokens(_bAsset, bInfo.bAsset.ratio, integrator, bInfo.bAsset.isTransferFeeCharged, _bAssetQuantity);\r\n\r\n        // Validation should be after token transfer, as bAssetQty is unknown before\r\n        (bool mintValid, string memory reason) = forgeValidator.validateMint(totalSupply(), bInfo.bAsset, quantityDeposited);\r\n        require(mintValid, reason);\r\n\r\n        // Log the Vault increase - can only be done when basket is healthy\r\n        basketManager.increaseVaultBalance(bInfo.index, integrator, quantityDeposited);\r\n\r\n        // Mint the Masset\r\n        _mint(_recipient, ratioedDeposit);\r\n        emit Minted(msg.sender, _recipient, ratioedDeposit, _bAsset, quantityDeposited);\r\n\r\n        return ratioedDeposit;\r\n    }\r\n\r\n    /** @dev Mint Multi */\r\n    function _mintTo(\r\n        address[] memory _bAssets,\r\n        uint256[] memory _bAssetQuantities,\r\n        address _recipient\r\n    )\r\n        internal\r\n        returns (uint256 massetMinted)\r\n    {\r\n        require(_recipient != address(0), \"Must be a valid recipient\");\r\n        uint256 len = _bAssetQuantities.length;\r\n        require(len > 0 && len == _bAssets.length, \"Input array mismatch\");\r\n\r\n        // Load only needed bAssets in array\r\n        ForgePropsMulti memory props\r\n            = basketManager.prepareForgeBassets(_bAssets, _bAssetQuantities, true);\r\n        if(!props.isValid) return 0;\r\n\r\n        uint256 mAssetQuantity = 0;\r\n        uint256[] memory receivedQty = new uint256[](len);\r\n\r\n        // Transfer the Bassets to the integrator, update storage and calc MassetQ\r\n        for(uint256 i = 0; i < len; i++){\r\n            uint256 bAssetQuantity = _bAssetQuantities[i];\r\n            if(bAssetQuantity > 0){\r\n                // bAsset == bAssets[i] == basket.bassets[indexes[i]]\r\n                Basset memory bAsset = props.bAssets[i];\r\n\r\n                (uint256 quantityDeposited, uint256 ratioedDeposit) =\r\n                    _depositTokens(bAsset.addr, bAsset.ratio, props.integrators[i], bAsset.isTransferFeeCharged, bAssetQuantity);\r\n\r\n                receivedQty[i] = quantityDeposited;\r\n                mAssetQuantity = mAssetQuantity.add(ratioedDeposit);\r\n            }\r\n        }\r\n        require(mAssetQuantity > 0, \"No masset quantity to mint\");\r\n\r\n        basketManager.increaseVaultBalances(props.indexes, props.integrators, receivedQty);\r\n\r\n        // Validate the proposed mint, after token transfer\r\n        (bool mintValid, string memory reason) = forgeValidator.validateMintMulti(totalSupply(), props.bAssets, receivedQty);\r\n        require(mintValid, reason);\r\n\r\n        // Mint the Masset\r\n        _mint(_recipient, mAssetQuantity);\r\n        emit MintedMulti(msg.sender, _recipient, mAssetQuantity, _bAssets, _bAssetQuantities);\r\n\r\n        return mAssetQuantity;\r\n    }\r\n\r\n    /** @dev Deposits tokens into the platform integration and returns the ratioed amount */\r\n    function _depositTokens(\r\n        address _bAsset,\r\n        uint256 _bAssetRatio,\r\n        address _integrator,\r\n        bool _erc20TransferFeeCharged,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n        returns (uint256 quantityDeposited, uint256 ratioedDeposit)\r\n    {\r\n        quantityDeposited = _depositTokens(_bAsset, _integrator, _erc20TransferFeeCharged, _quantity);\r\n        ratioedDeposit = quantityDeposited.mulRatioTruncate(_bAssetRatio);\r\n    }\r\n\r\n    /** @dev Deposits tokens into the platform integration and returns the deposited amount */\r\n    function _depositTokens(\r\n        address _bAsset,\r\n        address _integrator,\r\n        bool _erc20TransferFeeCharged,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n        returns (uint256 quantityDeposited)\r\n    {\r\n        uint256 quantityTransferred = MassetHelpers.transferTokens(msg.sender, _integrator, _bAsset, _erc20TransferFeeCharged, _quantity);\r\n        uint256 deposited = IPlatformIntegration(_integrator).deposit(_bAsset, quantityTransferred, _erc20TransferFeeCharged);\r\n        quantityDeposited = StableMath.min(deposited, _quantity);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                SWAP (PUBLIC)\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Simply swaps one bAsset for another bAsset or this mAsset at a 1:1 ratio.\r\n     * bAsset <> bAsset swaps will incur a small fee (swapFee()). Swap\r\n     * is valid if it does not result in the input asset exceeding its maximum weight.\r\n     * @param _input        bAsset to deposit\r\n     * @param _output       Asset to receive - either a bAsset or mAsset(this)\r\n     * @param _quantity     Units of input bAsset to swap\r\n     * @param _recipient    Address to credit output asset\r\n     * @return output       Units of output asset returned\r\n     */\r\n    function swap(\r\n        address _input,\r\n        address _output,\r\n        uint256 _quantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 output)\r\n    {\r\n        require(_input != address(0) && _output != address(0), \"Invalid swap asset addresses\");\r\n        require(_input != _output, \"Cannot swap the same asset\");\r\n        require(_recipient != address(0), \"Missing recipient address\");\r\n        require(_quantity > 0, \"Invalid quantity\");\r\n\r\n        // 1. If the output is this mAsset, just mint\r\n        if(_output == address(this)){\r\n            return _mintTo(_input, _quantity, _recipient);\r\n        }\r\n\r\n        // 2. Grab all relevant info from the Manager\r\n        (bool isValid, string memory reason, BassetDetails memory inputDetails, BassetDetails memory outputDetails) =\r\n            basketManager.prepareSwapBassets(_input, _output, false);\r\n        require(isValid, reason);\r\n\r\n        // 3. Deposit the input tokens\r\n        uint256 quantitySwappedIn = _depositTokens(_input, inputDetails.integrator, inputDetails.bAsset.isTransferFeeCharged, _quantity);\r\n        // 3.1. Update the input balance\r\n        basketManager.increaseVaultBalance(inputDetails.index, inputDetails.integrator, quantitySwappedIn);\r\n\r\n        // 4. Validate the swap\r\n        (bool swapValid, string memory swapValidityReason, uint256 swapOutput, bool applySwapFee) =\r\n            forgeValidator.validateSwap(totalSupply(), inputDetails.bAsset, outputDetails.bAsset, quantitySwappedIn);\r\n        require(swapValid, swapValidityReason);\r\n\r\n        // 5. Settle the swap\r\n        // 5.1. Decrease output bal\r\n        basketManager.decreaseVaultBalance(outputDetails.index, outputDetails.integrator, swapOutput);\r\n        // 5.2. Calc fee, if any\r\n        if(applySwapFee){\r\n            swapOutput = _deductSwapFee(_output, swapOutput, swapFee);\r\n        }\r\n        // 5.3. Withdraw to recipient\r\n        IPlatformIntegration(outputDetails.integrator).withdraw(_recipient, _output, swapOutput, outputDetails.bAsset.isTransferFeeCharged);\r\n\r\n        output = swapOutput;\r\n\r\n        emit Swapped(msg.sender, _input, _output, swapOutput, _recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines both if a trade is valid, and the expected fee or output.\r\n     * Swap is valid if it does not result in the input asset exceeding its maximum weight.\r\n     * @param _input        bAsset to deposit\r\n     * @param _output       Asset to receive - bAsset or mAsset(this)\r\n     * @param _quantity     Units of input bAsset to swap\r\n     * @return valid        Bool to signify that swap is current valid\r\n     * @return reason       If swap is invalid, this is the reason\r\n     * @return output       Units of _output asset the trade would return\r\n     */\r\n    function getSwapOutput(\r\n        address _input,\r\n        address _output,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (bool, string memory, uint256 output)\r\n    {\r\n        require(_input != address(0) && _output != address(0), \"Invalid swap asset addresses\");\r\n        require(_input != _output, \"Cannot swap the same asset\");\r\n\r\n        bool isMint = _output == address(this);\r\n        uint256 quantity = _quantity;\r\n\r\n        // 1. Get relevant asset data\r\n        (bool isValid, string memory reason, BassetDetails memory inputDetails, BassetDetails memory outputDetails) =\r\n            basketManager.prepareSwapBassets(_input, _output, isMint);\r\n        if(!isValid){\r\n            return (false, reason, 0);\r\n        }\r\n\r\n        // 2. check if trade is valid\r\n        // 2.1. If output is mAsset(this), then calculate a simple mint\r\n        if(isMint){\r\n            // Validate mint\r\n            (isValid, reason) = forgeValidator.validateMint(totalSupply(), inputDetails.bAsset, quantity);\r\n            if(!isValid) return (false, reason, 0);\r\n            // Simply cast the quantity to mAsset\r\n            output = quantity.mulRatioTruncate(inputDetails.bAsset.ratio);\r\n            return(true, \"\", output);\r\n        }\r\n        // 2.2. If a bAsset swap, calculate the validity, output and fee\r\n        else {\r\n            (bool swapValid, string memory swapValidityReason, uint256 swapOutput, bool applySwapFee) =\r\n                forgeValidator.validateSwap(totalSupply(), inputDetails.bAsset, outputDetails.bAsset, quantity);\r\n            if(!swapValid){\r\n                return (false, swapValidityReason, 0);\r\n            }\r\n\r\n            // 3. Return output and fee, if any\r\n            if(applySwapFee){\r\n                (, swapOutput) = _calcSwapFee(swapOutput, swapFee);\r\n            }\r\n            return (true, \"\", swapOutput);\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n              REDEMPTION (PUBLIC)\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Credits the sender with a certain quantity of selected bAsset, in exchange for burning the\r\n     *      relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.\r\n     * @param _bAsset           Address of the bAsset to redeem\r\n     * @param _bAssetQuantity   Units of the bAsset to redeem\r\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\r\n     */\r\n    function redeem(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 massetRedeemed)\r\n    {\r\n        return _redeemTo(_bAsset, _bAssetQuantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\r\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\r\n     * @param _bAsset           Address of the bAsset to redeem\r\n     * @param _bAssetQuantity   Units of the bAsset to redeem\r\n     * @param _recipient        Address to credit with withdrawn bAssets\r\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\r\n     */\r\n    function redeemTo(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 massetRedeemed)\r\n    {\r\n        return _redeemTo(_bAsset, _bAssetQuantity, _recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Credits a recipient with a certain quantity of selected bAssets, in exchange for burning the\r\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\r\n     * @param _bAssets          Address of the bAssets to redeem\r\n     * @param _bAssetQuantities Units of the bAssets to redeem\r\n     * @param _recipient        Address to credit with withdrawn bAssets\r\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\r\n     */\r\n    function redeemMulti(\r\n        address[] calldata _bAssets,\r\n        uint256[] calldata _bAssetQuantities,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (uint256 massetRedeemed)\r\n    {\r\n        return _redeemTo(_bAssets, _bAssetQuantities, _recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Credits a recipient with a proportionate amount of bAssets, relative to current vault\r\n     * balance levels and desired mAsset quantity. Burns the mAsset as payment.\r\n     * @param _mAssetQuantity   Quantity of mAsset to redeem\r\n     * @param _recipient        Address to credit the withdrawn bAssets\r\n     */\r\n    function redeemMasset(\r\n        uint256 _mAssetQuantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        nonReentrant\r\n    {\r\n        _redeemMasset(_mAssetQuantity, _recipient);\r\n    }\r\n\r\n    /***************************************\r\n              REDEMPTION (INTERNAL)\r\n    ****************************************/\r\n\r\n    /** @dev Casting to arrays for use in redeemMulti func */\r\n    function _redeemTo(\r\n        address _bAsset,\r\n        uint256 _bAssetQuantity,\r\n        address _recipient\r\n    )\r\n        internal\r\n        returns (uint256 massetRedeemed)\r\n    {\r\n        address[] memory bAssets = new address[](1);\r\n        uint256[] memory quantities = new uint256[](1);\r\n        bAssets[0] = _bAsset;\r\n        quantities[0] = _bAssetQuantity;\r\n        return _redeemTo(bAssets, quantities, _recipient);\r\n    }\r\n\r\n    /** @dev Redeem mAsset for one or more bAssets */\r\n    function _redeemTo(\r\n        address[] memory _bAssets,\r\n        uint256[] memory _bAssetQuantities,\r\n        address _recipient\r\n    )\r\n        internal\r\n        returns (uint256 massetRedeemed)\r\n    {\r\n        require(_recipient != address(0), \"Must be a valid recipient\");\r\n        uint256 bAssetCount = _bAssetQuantities.length;\r\n        require(bAssetCount > 0 && bAssetCount == _bAssets.length, \"Input array mismatch\");\r\n\r\n        // Get high level basket info\r\n        Basket memory basket = basketManager.getBasket();\r\n\r\n        // Prepare relevant data\r\n        ForgePropsMulti memory props = basketManager.prepareForgeBassets(_bAssets, _bAssetQuantities, false);\r\n        if(!props.isValid) return 0;\r\n\r\n        // Validate redemption\r\n        (bool redemptionValid, string memory reason, bool applyFee) =\r\n            forgeValidator.validateRedemption(basket.failed, totalSupply(), basket.bassets, props.indexes, _bAssetQuantities);\r\n        require(redemptionValid, reason);\r\n\r\n        uint256 mAssetQuantity = 0;\r\n\r\n        // Calc total redeemed mAsset quantity\r\n        for(uint256 i = 0; i < bAssetCount; i++){\r\n            uint256 bAssetQuantity = _bAssetQuantities[i];\r\n            if(bAssetQuantity > 0){\r\n                // Calc equivalent mAsset amount\r\n                uint256 ratioedBasset = bAssetQuantity.mulRatioTruncateCeil(props.bAssets[i].ratio);\r\n                mAssetQuantity = mAssetQuantity.add(ratioedBasset);\r\n            }\r\n        }\r\n        require(mAssetQuantity > 0, \"Must redeem some bAssets\");\r\n\r\n        // Redemption has fee? Fetch the rate\r\n        uint256 fee = applyFee ? swapFee : 0;\r\n\r\n        // Apply fees, burn mAsset and return bAsset to recipient\r\n        _settleRedemption(_recipient, mAssetQuantity, props.bAssets, _bAssetQuantities, props.indexes, props.integrators, fee);\r\n\r\n        emit Redeemed(msg.sender, _recipient, mAssetQuantity, _bAssets, _bAssetQuantities);\r\n        return mAssetQuantity;\r\n    }\r\n\r\n\r\n    /** @dev Redeem mAsset for a multiple bAssets */\r\n    function _redeemMasset(\r\n        uint256 _mAssetQuantity,\r\n        address _recipient\r\n    )\r\n        internal\r\n    {\r\n        require(_recipient != address(0), \"Must be a valid recipient\");\r\n        require(_mAssetQuantity > 0, \"Invalid redemption quantity\");\r\n\r\n        // Fetch high level details\r\n        RedeemPropsMulti memory props = basketManager.prepareRedeemMulti();\r\n        uint256 colRatio = StableMath.min(props.colRatio, StableMath.getFullScale());\r\n\r\n        // Ensure payout is related to the collateralised mAsset quantity\r\n        uint256 collateralisedMassetQuantity = _mAssetQuantity.mulTruncate(colRatio);\r\n\r\n        // Calculate redemption quantities\r\n        (bool redemptionValid, string memory reason, uint256[] memory bAssetQuantities) =\r\n            forgeValidator.calculateRedemptionMulti(collateralisedMassetQuantity, props.bAssets);\r\n        require(redemptionValid, reason);\r\n\r\n        // Apply fees, burn mAsset and return bAsset to recipient\r\n        _settleRedemption(_recipient, _mAssetQuantity, props.bAssets, bAssetQuantities, props.indexes, props.integrators, redemptionFee);\r\n\r\n        emit RedeemedMasset(msg.sender, _recipient, _mAssetQuantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal func to update contract state post-redemption\r\n     * @param _recipient        Recipient of the bAssets\r\n     * @param _mAssetQuantity   Total amount of mAsset to burn from sender\r\n     * @param _bAssets          Array of bAssets to redeem\r\n     * @param _bAssetQuantities Array of bAsset quantities\r\n     * @param _indices          Matching indices for the bAsset array\r\n     * @param _integrators      Matching integrators for the bAsset array\r\n     * @param _feeRate          Apply a fee to this redemption?\r\n     */\r\n    function _settleRedemption(\r\n        address _recipient,\r\n        uint256 _mAssetQuantity,\r\n        Basset[] memory _bAssets,\r\n        uint256[] memory _bAssetQuantities,\r\n        uint8[] memory _indices,\r\n        address[] memory _integrators,\r\n        uint256 _feeRate\r\n    ) internal {\r\n        // Burn the full amount of Masset\r\n        _burn(msg.sender, _mAssetQuantity);\r\n\r\n        // Reduce the amount of bAssets marked in the vault\r\n        basketManager.decreaseVaultBalances(_indices, _integrators, _bAssetQuantities);\r\n\r\n        // Transfer the Bassets to the recipient\r\n        uint256 bAssetCount = _bAssets.length;\r\n        for(uint256 i = 0; i < bAssetCount; i++){\r\n            address bAsset = _bAssets[i].addr;\r\n            uint256 q = _bAssetQuantities[i];\r\n            if(q > 0){\r\n                // Deduct the redemption fee, if any\r\n                q = _deductSwapFee(bAsset, q, _feeRate);\r\n                // Transfer the Bassets to the user\r\n                IPlatformIntegration(_integrators[i]).withdraw(_recipient, bAsset, q, _bAssets[i].isTransferFeeCharged);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n                    INTERNAL\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Pay the forging fee by burning relative amount of mAsset\r\n     * @param _bAssetQuantity     Exact amount of bAsset being swapped out\r\n     */\r\n    function _deductSwapFee(address _asset, uint256 _bAssetQuantity, uint256 _feeRate)\r\n        private\r\n        returns (uint256 outputMinusFee)\r\n    {\r\n\r\n        outputMinusFee = _bAssetQuantity;\r\n\r\n        if(_feeRate > 0){\r\n            (uint256 fee, uint256 output) = _calcSwapFee(_bAssetQuantity, _feeRate);\r\n            outputMinusFee = output;\r\n            emit PaidFee(msg.sender, _asset, fee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Pay the forging fee by burning relative amount of mAsset\r\n     * @param _bAssetQuantity     Exact amount of bAsset being swapped out\r\n     */\r\n    function _calcSwapFee(uint256 _bAssetQuantity, uint256 _feeRate)\r\n        private\r\n        pure\r\n        returns (uint256 feeAmount, uint256 outputMinusFee)\r\n    {\r\n        // e.g. for 500 massets.\r\n        // feeRate == 1% == 1e16. _quantity == 5e20.\r\n        // (5e20 * 1e16) / 1e18 = 5e18\r\n        feeAmount = _bAssetQuantity.mulTruncate(_feeRate);\r\n        outputMinusFee = _bAssetQuantity.sub(feeAmount);\r\n    }\r\n\r\n    /***************************************\r\n                    STATE\r\n    ****************************************/\r\n\r\n    /**\r\n      * @dev Upgrades the version of ForgeValidator protocol. Governor can do this\r\n      *      only while ForgeValidator is unlocked.\r\n      * @param _newForgeValidator Address of the new ForgeValidator\r\n      */\r\n    function upgradeForgeValidator(address _newForgeValidator)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(!forgeValidatorLocked, \"Must be allowed to upgrade\");\r\n        require(_newForgeValidator != address(0), \"Must be non null address\");\r\n        forgeValidator = IForgeValidator(_newForgeValidator);\r\n        emit ForgeValidatorChanged(_newForgeValidator);\r\n    }\r\n\r\n    /**\r\n      * @dev Locks the ForgeValidator into it's final form. Called by Governor\r\n      */\r\n    function lockForgeValidator()\r\n        external\r\n        onlyGovernor\r\n    {\r\n        forgeValidatorLocked = true;\r\n    }\r\n\r\n    /**\r\n      * @dev Set the ecosystem fee for redeeming a mAsset\r\n      * @param _swapFee Fee calculated in (%/100 * 1e18)\r\n      */\r\n    function setSwapFee(uint256 _swapFee)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(_swapFee <= MAX_FEE, \"Rate must be within bounds\");\r\n        swapFee = _swapFee;\r\n\r\n        emit SwapFeeChanged(_swapFee);\r\n    }\r\n\r\n    /**\r\n      * @dev Set the ecosystem fee for redeeming a mAsset\r\n      * @param _redemptionFee Fee calculated in (%/100 * 1e18)\r\n      */\r\n    function setRedemptionFee(uint256 _redemptionFee)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(_redemptionFee <= MAX_FEE, \"Rate must be within bounds\");\r\n        redemptionFee = _redemptionFee;\r\n\r\n        emit RedemptionFeeChanged(_redemptionFee);\r\n    }\r\n\r\n    /**\r\n      * @dev Gets the address of the BasketManager for this mAsset\r\n      * @return basketManager Address\r\n      */\r\n    function getBasketManager()\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(basketManager);\r\n    }\r\n\r\n    /***************************************\r\n                    INFLATION\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Collects the interest generated from the Basket, minting a relative\r\n     *      amount of mAsset and sending it over to the SavingsManager.\r\n     * @return totalInterestGained   Equivalent amount of mAsset units that have been generated\r\n     * @return newSupply             New total mAsset supply\r\n     */\r\n    function collectInterest()\r\n        external\r\n        onlySavingsManager\r\n        nonReentrant\r\n        returns (uint256 totalInterestGained, uint256 newSupply)\r\n    {\r\n        (uint256 interestCollected, uint256[] memory gains) = basketManager.collectInterest();\r\n\r\n        // mint new mAsset to sender\r\n        _mint(msg.sender, interestCollected);\r\n        emit MintedMulti(address(this), address(this), interestCollected, new address[](0), gains);\r\n\r\n        return (interestCollected, totalSupply());\r\n    }\r\n\r\n    // RELEASE 1.1 VARS\r\n    uint256 public redemptionFee;\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forgeValidator\",\"type\":\"address\"}],\"name\":\"ForgeValidatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAssetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAssetQuantity\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAssetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bAssetQuantities\",\"type\":\"uint256[]\"}],\"name\":\"MintedMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeQuantity\",\"type\":\"uint256\"}],\"name\":\"PaidFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAssetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bAssetQuantities\",\"type\":\"uint256[]\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAssetQuantity\",\"type\":\"uint256\"}],\"name\":\"RedeemedMasset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInterestGained\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forgeValidator\",\"outputs\":[{\"internalType\":\"contract IForgeValidator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasketManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"getSwapOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameArg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forgeValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basketManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockForgeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mintMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemMasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bAssetQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newForgeValidator\",\"type\":\"address\"}],\"name\":\"upgradeForgeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Masset","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://023ad7cb49ba649bf32c6cd617eec00ec2c42336eca506f2a23c7753f3e71612"}]}