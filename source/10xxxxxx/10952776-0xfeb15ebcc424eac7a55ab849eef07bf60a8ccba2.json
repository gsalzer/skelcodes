{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Uniswap {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// File: localhost/contracts/interfaces/IOKra.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IOKra {\r\n    function  mint(address _to, uint256 _amount) external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\n\r\n// File: localhost/contracts/interfaces/IOkswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IOkswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function teamAmount() external view returns (uint);\r\n    function vcAmount() external view returns (uint);\r\n    function isBonusPair(address) external view returns (bool);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function changeSetter(address) external;\r\n    function setFeeHolder(address) external;\r\n    function setBurnHolder(address) external;\r\n    function setVcHolder(address) external;\r\n\r\n    function pairCodeHash() external pure returns (bytes32);\r\n    function addBonusPair(uint, uint, address, address, bool) external ;\r\n    function getBonusConfig(address) external view returns (uint, uint,address,address,address,address);\r\n    function getElac() external view returns (uint, uint);\r\n    function setElac(uint,uint) external;\r\n    function updateTeamAmount(uint) external;\r\n    function updateVcAmount(uint) external;\r\n    function realize(address,uint) external;\r\n\r\n    function getSysCf() external view returns (uint);\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    event Harvest(address indexed sender, uint amount);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to,address user,bool emerg) external returns (uint amount0, uint amount1);\r\n    function swap(uint[3] memory amount, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function pending(address user) external view returns (uint);\r\n    function harvestNow(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address,address) external;\r\n}\r\n// File: localhost/contracts/interfaces/IUniswapV2Callee.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File: localhost/contracts/libraries/UQ112x112.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/libraries/Math.sol\r\n\r\n pragma solidity =0.6.12;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IUniswapV2ERC20.sol\r\n\r\n    pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n// File: localhost/contracts/libraries/SafeMath.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'ds-math-div-overflow');\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: localhost/contracts/OKSwapERC20.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\ncontract OKSwapERC20 is IUniswapV2ERC20 {\r\n    using SafeMathUniswap for uint;\r\n\r\n    string public override constant name = 'OKSwap LPT';\r\n    string public override constant symbol = 'OKLP';\r\n    uint8 public override constant decimals = 18;\r\n    uint  public  override totalSupply;\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n\r\n    bytes32 public override DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public override nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external override  returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\r\n        require(deadline >= block.timestamp, 'OKSwapERC20: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'OKSwapERC20: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/OKSwapPair.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\ncontract OKSwapPair is OKSwapERC20 {\r\n\r\n    address public okra;\r\n\r\n    using SafeMathUniswap  for uint;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint public   constant MINIMUM_LIQUIDITY = 10 ** 3;\r\n    uint public constant BONUS_BLOCKNUM = 36000;\r\n    uint public constant BASECAP = 5120 * (10 ** 18);\r\n    uint public constant TEAM_BLOCKNUM = 13200000;\r\n    uint private constant TEAM_CAP = 15000000 * (10 ** 18);\r\n    uint private constant VC_CAP = 5000000 * (10 ** 18);\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    address public   factory;\r\n    address public   token0;\r\n    address public  token1;\r\n    \r\n\r\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\r\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint public  price0CumulativeLast;\r\n    uint public  price1CumulativeLast;\r\n    uint public  kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    mapping(address => uint) public userPools;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'OKSwap: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n\r\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'OKSwap: TRANSFER_FAILED');\r\n    }\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    event Harvest(address indexed sender, uint amount);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _token0, address _token1, address _okra) external {\r\n        require(msg.sender == factory, 'OKSwap: FORBIDDEN');\r\n        // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        okra = _okra;\r\n    }\r\n\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\r\n        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'OKSwap: OVERFLOW');\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n        // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\r\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\r\n//        address feeTo = IOkswapFactory(factory).feeTo();\r\n        (,,,address feeHolder,address burnHolder,) = IOkswapFactory(factory).getBonusConfig(address(this));\r\n        feeOn = true;\r\n        uint _kLast = kLast;\r\n        // gas savings\r\n        if (_kLast != 0) {\r\n            uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\r\n            uint rootKLast = Math.sqrt(_kLast);\r\n            if (rootK > rootKLast) {\r\n                uint numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                uint denominator = rootK.mul(5).add(rootKLast);\r\n                uint liquidity = numerator.mul(2) / denominator;\r\n                if (liquidity > 0) {\r\n                    if (feeHolder != address(0)) _mint(feeHolder, liquidity);\r\n                    if (burnHolder != address(0)) _mint(burnHolder, liquidity);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\r\n        uint balance0 = IERC20Uniswap(token0).balanceOf(address(this));\r\n        uint balance1 = IERC20Uniswap(token1).balanceOf(address(this));\r\n        uint amount0 = balance0.sub(_reserve0);\r\n        uint amount1 = balance1.sub(_reserve1);\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply;\r\n        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n        } else {\r\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\r\n        }\r\n        require(liquidity > 0, 'OKSwap: INSUFFICIENT_LIQUIDITY_MINTED');\r\n        if (IOkswapFactory(factory).isBonusPair(address(this))) {\r\n            uint startAtBlock = userPools[to];\r\n            if (startAtBlock > 0) {\r\n                uint liquid = balanceOf[to];\r\n                userPools[to] = startAtBlock.mul(liquid).add(block.number.mul(liquidity)) / liquid.add(liquidity);\r\n            }else{\r\n                userPools[to] = block.number;\r\n            }\r\n           \r\n        }\r\n        _mint(to, liquidity);\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\r\n        // reserve0 and reserve1 are up-to-date\r\n        \r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to,address user,bool emerg) external lock returns (uint amount0, uint amount1) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\r\n        // gas savings\r\n        address _token0 = token0;\r\n        // gas savings\r\n        address _token1 = token1;\r\n        // gas savings\r\n        uint balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\r\n        uint balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply;\r\n        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply;\r\n        amount1 = liquidity.mul(balance1) / _totalSupply;\r\n        // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, 'OKSwap: INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\r\n        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1);\r\n        // reserve0 and reserve1 are up-to-date\r\n\r\n        if (!emerg) _getHarvest(user);\r\n\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n    \r\n    function _getHarvest(address _to) private {\r\n\r\n            (uint based,,,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\r\n            if (based > 0 ) {\r\n                uint harvestLiquid = balanceOf[_to];\r\n                uint pendingAmount = _getHarvestAmount(harvestLiquid, based, userPools[_to]);\r\n                uint max = BASECAP + IOKra(okra).balanceOf(_to);\r\n                uint mintAmount = pendingAmount <= max ? pendingAmount : max;\r\n                userPools[_to] = block.number;\r\n                IOkswapFactory(factory).realize(_to, mintAmount);\r\n\r\n                emit Harvest(msg.sender, mintAmount);\r\n            }\r\n\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(uint[3] memory amount, address to, bytes calldata data) external lock {\r\n        uint amount0Out = amount[0];\r\n        uint amount1Out = amount[1];\r\n        uint amountIn = amount[2];\r\n\r\n        require(amount0Out > 0 || amount1Out > 0, 'OKSwap: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\r\n        // gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'OKSwap: INSUFFICIENT_LIQUIDITY');\r\n\r\n        uint balance0;\r\n        uint balance1;\r\n        {// scope for _token{0,1}, avoids stack too deep errors\r\n            require(to != token0 && to != token1, 'OKSwap: INVALID_TO');\r\n            if (amount0Out > 0) {_safeTransfer(token0, to, amount0Out);assign(amount0Out,token1,token0,amountIn,to);}\r\n            if (amount1Out > 0) {_safeTransfer(token1, to, amount1Out);assign(amount1Out,token0,token1,amountIn,to);}\r\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\r\n            balance0 = IERC20Uniswap(token0).balanceOf(address(this));\r\n            balance1 = IERC20Uniswap(token1).balanceOf(address(this));\r\n\r\n        }\r\n\r\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        require(amount0In > 0 || amount1In > 0, 'OKSwap: INSUFFICIENT_INPUT_AMOUNT');\r\n        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\r\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\r\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'UniswapV2: K');\r\n        }\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n    \r\n\r\n    function assign(uint amountOut,address tokenIn, address tokenOut, uint amountIn, address to) private {\r\n        (,,address tokenAddress,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\r\n        if (tokenAddress == tokenIn) {\r\n            _tradeBonus(tokenIn, amountIn, to);\r\n        }else if (tokenAddress == tokenOut) {\r\n            _tradeBonus(tokenIn, amountOut, to);\r\n        } \r\n    }\r\n    \r\n    \r\n    function _tradeBonus(address _token, uint _amountOut, address _to) private {\r\n        IOkswapFactory _factory = IOkswapFactory(factory);\r\n        if (_token != address(okra) && _factory.isBonusPair(address(this))) {\r\n            uint sysCf = _factory.getSysCf();\r\n            (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\r\n            (,uint share, ,address teamHolder,,address vcHolder) = _factory.getBonusConfig(address(this));\r\n            uint tradeMint = _amountOut.div(100).mul(share).div(sysCf);\r\n            tradeMint = tradeMint.mul(elac0).div(elac1);\r\n            _realize(tradeMint,_to,teamHolder,vcHolder);\r\n        }\r\n    }\r\n\r\n\r\n    function _realize(uint tradeMint,address _to,address teamHolder,address vcHolder) private {\r\n        if (tradeMint > 0) {\r\n            IOkswapFactory(factory).realize(_to, tradeMint);\r\n            uint syncMint = tradeMint.div(100).mul(2);\r\n            uint vcNum = IOkswapFactory(factory).vcAmount();\r\n            uint vcMint = vcNum.add(syncMint) >= VC_CAP ? VC_CAP.sub(vcNum) : syncMint;\r\n            if (vcMint > 0 && vcHolder != address(0)) {\r\n                IOkswapFactory(factory).updateVcAmount(vcMint);\r\n                IOkswapFactory(factory).realize(vcHolder, vcMint);\r\n            }\r\n            if (block.number >= TEAM_BLOCKNUM) {\r\n                uint teamNum = IOkswapFactory(factory).teamAmount();\r\n                syncMint = syncMint.mul(3);\r\n                uint teamMint = teamNum.add(syncMint) >= TEAM_CAP ? TEAM_CAP.sub(teamNum) : syncMint;\r\n                if (teamMint > 0 && teamHolder != address(0)){\r\n                    IOkswapFactory(factory).updateTeamAmount(teamMint);\r\n                    IOkswapFactory(factory).realize(teamHolder, teamMint);\r\n                }\r\n            }\r\n\r\n            emit Harvest(msg.sender, tradeMint);\r\n        }\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0;\r\n        // gas savings\r\n        address _token1 = token1;\r\n        // gas savings\r\n        _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));\r\n        _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));\r\n    }\r\n\r\n\r\n    function _getHarvestAmount(uint _amount, uint _based, uint _startBlock) private view returns (uint){\r\n        uint sysCf = IOkswapFactory(factory).getSysCf();\r\n        (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\r\n\r\n        uint point = (block.number.sub(_startBlock)) / BONUS_BLOCKNUM;\r\n\r\n        uint mintAmount;\r\n        if (point == 0) {\r\n            mintAmount = _amount.mul(block.number.sub(_startBlock));\r\n        } else if (point == 1) {\r\n            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\r\n            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM));\r\n            mintAmount = amount0.add(amount1.mul(2));\r\n        } else {\r\n            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\r\n            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM).sub(BONUS_BLOCKNUM));\r\n            mintAmount = amount0.add(amount0.mul(2)).add(amount1.mul(3));\r\n        }\r\n\r\n        return mintAmount.mul(elac0).div(elac1).div(sysCf).mul(100).div(_based);\r\n    }\r\n\r\n\r\n    function getblock(address _user) external view returns (uint256){\r\n        return userPools[_user];\r\n    }\r\n\r\n    function pending(address _user) external view returns (uint256) {\r\n        (uint _based,,,,,) = IOkswapFactory(factory).getBonusConfig(address(this));\r\n        uint sysCf = IOkswapFactory(factory).getSysCf();\r\n        (uint elac0,uint elac1) = IOkswapFactory(factory).getElac();\r\n        uint _startBlock = userPools[_user];\r\n        uint _amount = balanceOf[_user];\r\n        require(block.number >= _startBlock, \"OKSwap:FAIL\");\r\n\r\n        uint point = (block.number.sub(_startBlock)) / BONUS_BLOCKNUM;\r\n        uint mintAmount;\r\n        if (point == 0) {\r\n            mintAmount = _amount.mul(block.number.sub(_startBlock));\r\n        } else if (point == 1) {\r\n            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\r\n            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM));\r\n            mintAmount = amount0.add(amount1.mul(2));\r\n        } else {\r\n            uint amount0 = _amount.mul(BONUS_BLOCKNUM);\r\n            uint amount1 = _amount.mul(block.number.sub(_startBlock).sub(BONUS_BLOCKNUM).sub(BONUS_BLOCKNUM));\r\n            mintAmount = amount0.add(amount0.mul(2)).add(amount1.mul(3));\r\n        }\r\n        return mintAmount.mul(elac0).div(elac1).div(sysCf).mul(100).div(_based);\r\n    }\r\n\r\n\r\n    function harvestNow() external {\r\n        address _to = msg.sender;\r\n        (uint based,,,,, ) = IOkswapFactory(factory).getBonusConfig(address(this));\r\n        require(based > 0, 'OKSwap: FAIL_BASED');\r\n        uint _amount = balanceOf[_to];\r\n        uint pendingAmount = _getHarvestAmount(_amount, based, userPools[_to]);\r\n        uint max = BASECAP + IOKra(okra).balanceOf(_to);\r\n        uint mintAmount = pendingAmount <= max ? pendingAmount : max;\r\n        userPools[_to] = block.number;\r\n        IOkswapFactory(factory).realize(_to, mintAmount);\r\n        emit Harvest(msg.sender, mintAmount);\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(IERC20Uniswap(token0).balanceOf(address(this)), IERC20Uniswap(token1).balanceOf(address(this)), reserve0, reserve1);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/OKSwapFactory.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n\r\ncontract OKSwapFactory is IOkswapFactory {\r\n    address private  setter;\r\n    uint    public  startBlock;\r\n    address public  okra;\r\n    address public  feeHolder;\r\n    address public  burnHolder;\r\n    address public  vcHolder;\r\n    address public  elacSetter;\r\n    uint public override teamAmount;\r\n    uint public override vcAmount;\r\n    uint private  elac0;\r\n    uint private  elac1;\r\n\r\n    mapping(address => mapping(address => address)) public override getPair;\r\n    address[] public override allPairs;\r\n    mapping(address => bool) public override isBonusPair;\r\n    \r\n    struct mintPair {\r\n        uint32 based;\r\n        uint8 share;\r\n        address token;\r\n    }\r\n\r\n    mapping(address => mintPair) public mintPairs;\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    constructor(address _setter,address _okra) public {\r\n        setter = _setter;\r\n        startBlock = block.number;\r\n        okra = _okra;\r\n        elacSetter = _setter;\r\n        elac0 = 1;\r\n        elac1 = 1;\r\n    }\r\n\r\n    function allPairsLength() external override view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function pairCodeHash() external override pure returns (bytes32) {\r\n        return keccak256(type(OKSwapPair).creationCode);\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\r\n        require(tokenA != tokenB, 'OKSwap: IDENTICAL_ADDRESSES');\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'OKSwap: ZERO_ADDRESS');\r\n        require(getPair[token0][token1] == address(0), 'OKSwap: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(OKSwapPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        OKSwapPair(pair).initialize(token0, token1,okra);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n\r\n    function changeSetter(address _setter) external override {\r\n        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\r\n        setter = _setter;\r\n    }\r\n    \r\n    function setFeeHolder(address _holder) external override {\r\n        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\r\n        feeHolder = _holder;\r\n    }\r\n    \r\n    function setBurnHolder(address _holder) external override {\r\n        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\r\n        burnHolder = _holder;\r\n    }\r\n\r\n    function setVcHolder(address _holder) external override {\r\n        require(msg.sender == setter, 'OKSwap: FORBIDDEN');\r\n        vcHolder = _holder;\r\n    }\r\n\r\n    function setElacContract(address _setter) external {\r\n        require(msg.sender == elacSetter, 'OKSwap: FORBIDDEN');\r\n        elacSetter = _setter;\r\n    }\r\n    \r\n\r\n    function getSysCf() external override view returns (uint){\r\n        uint cf = (block.number - startBlock) / 512000 ;\r\n        return cf <= 0 ? 1 : (2 ** cf);\r\n    }\r\n\r\n    function addBonusPair(uint _based, uint _share, address _pair, address _token, bool _update) external override {\r\n        require(msg.sender == setter, \"OKSwap: FORBIDDEN\");\r\n        if (_update) {\r\n            require(mintPairs[_pair].token != address(0),\"OKSwap: TOKEN\");\r\n            mintPairs[_pair].based = uint32(_based);\r\n            mintPairs[_pair].share = uint8(_share);\r\n            mintPairs[_pair].token = _token;\r\n            isBonusPair[_pair] = !isBonusPair[_pair];\r\n        }\r\n\r\n        mintPairs[_pair].based = uint32(_based);\r\n        mintPairs[_pair].share = uint8(_share);\r\n        mintPairs[_pair].token = _token;\r\n        \r\n        isBonusPair[_pair] = true;\r\n    }\r\n    \r\n    function getBonusConfig(address _pair) external override view returns (uint _based, uint _share,address _token,address _feeHolder,address _burnHolder,address _vcHolder) {\r\n        _based = mintPairs[_pair].based;\r\n        _share = mintPairs[_pair].share;\r\n        _token = mintPairs[_pair].token;\r\n        _feeHolder = feeHolder;\r\n        _burnHolder = burnHolder;\r\n        _vcHolder = vcHolder;\r\n    }\r\n\r\n    function getElac() external override view returns (uint _elac0, uint _elac1) {\r\n        _elac0 = elac0;\r\n        _elac1 = elac1;\r\n    }\r\n\r\n\r\n    function setElac(uint _elac0,uint _elac1) external override {\r\n        require(msg.sender == elacSetter, 'OKSwap: FORBIDDEN');\r\n        elac0 = _elac0;\r\n        elac1 = _elac1;\r\n    }\r\n\r\n    function updateVcAmount(uint amount) external override {\r\n        require(isBonusPair[msg.sender], \"OKSwap: FORBIDDEN\");\r\n        require(amount > 0, \"OKSwap: Ops\");\r\n        vcAmount += amount;\r\n    }\r\n\r\n    function updateTeamAmount(uint amount) external override {\r\n        require(isBonusPair[msg.sender], \"OKSwap: FORBIDDEN\");\r\n        //require(msg.sender == initiator, \"OKSwap: FORBIDDEN\");\r\n        require(amount > 0, \"OKSwap: Ops\");\r\n        teamAmount += amount;\r\n    }\r\n\r\n    function realize(address _to,uint amount) external override {\r\n        require(isBonusPair[msg.sender], \"OKSwap: FORBIDDEN\");\r\n        IOKra(okra).mint(_to, amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_okra\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_based\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"addBonusPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"}],\"name\":\"changeSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elacSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getBonusConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_based\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vcHolder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_elac0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elac1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysCf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBonusPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintPairs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"based\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"share\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"okra\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"realize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"setBurnHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_elac0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elac1\",\"type\":\"uint256\"}],\"name\":\"setElac\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"}],\"name\":\"setElacContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"setFeeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"setVcHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTeamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateVcAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OKSwapFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d11aa695bff2005e564ca24f32c47e3492d3a11f000000000000000000000000a81670885047a2362d748536b54c1687e41ba35c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4d800ceddcf2971ebfc6654a7621abad0ec7ac0878f38841847679bda2e9c740"}]}