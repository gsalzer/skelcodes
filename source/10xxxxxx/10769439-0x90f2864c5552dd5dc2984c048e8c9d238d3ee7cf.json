{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/acl/IACLOracle.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACLOracle {\r\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/IAragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract IAragonApp {\r\n    // Includes appId and kernel methods:\r\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\r\n\r\n    function kernel() public view returns (IKernel);\r\n    function appId() public view returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract AppStorage is IAragonApp {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.totalSupply().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\r\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\r\n\r\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return totalSupply;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/standards/ERC165.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC165 {\r\n    // Includes supportsInterface method:\r\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return _interfaceId == ERC165_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/IAgreement.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract IAgreement {\r\n\r\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\r\n    event ActionClosed(uint256 indexed actionId);\r\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\r\n\r\n    enum ChallengeState {\r\n        Waiting,\r\n        Settled,\r\n        Disputed,\r\n        Rejected,\r\n        Accepted,\r\n        Voided\r\n    }\r\n\r\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\r\n\r\n    function closeAction(uint256 _actionId) external;\r\n\r\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\r\n\r\n    function settleAction(uint256 _actionId) external;\r\n\r\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/IDisputable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract IDisputable is ERC165 {\r\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\r\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\r\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\r\n\r\n    event AgreementSet(IAgreement indexed agreement);\r\n\r\n    function setAgreement(IAgreement _agreement) external;\r\n\r\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\r\n\r\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\r\n\r\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\r\n\r\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\r\n\r\n    function getAgreement() external view returns (IAgreement);\r\n\r\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\r\n\r\n    function canClose(uint256 _disputableActionId) external view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath64.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\r\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DisputableAragonApp is IDisputable, AragonApp {\r\n    /* Validation errors */\r\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \"DISPUTABLE_SENDER_NOT_AGREEMENT\";\r\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \"DISPUTABLE_AGREEMENT_STATE_INVAL\";\r\n\r\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\r\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\r\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\"CHALLENGE_ROLE\");\r\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\r\n\r\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\"SET_AGREEMENT_ROLE\");\r\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\r\n\r\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\"aragonOS.appStorage.agreement\");\r\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\r\n\r\n    modifier onlyAgreement() {\r\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Challenge disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be challenged\r\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\r\n    * @param _challenger Address that submitted the challenge\r\n    */\r\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\r\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\r\n    }\r\n\r\n    /**\r\n    * @notice Allow disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be allowed\r\n    */\r\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionAllowed(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Reject disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be rejected\r\n    */\r\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionRejected(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Void disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be voided\r\n    */\r\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionVoided(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Set Agreement to `_agreement`\r\n    * @param _agreement Agreement instance to be set\r\n    */\r\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\r\n        IAgreement agreement = _getAgreement();\r\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\r\n\r\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\r\n        emit AgreementSet(_agreement);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement\r\n    * @return Agreement\r\n    */\r\n    function getAgreement() external view returns (IAgreement) {\r\n        return _getAgreement();\r\n    }\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\r\n    * @param _disputableActionId Identifier of the action to be challenged\r\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\r\n    * @param _challenger Address that submitted the challenge\r\n    */\r\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\r\n    * @param _disputableActionId Identifier of the action to be rejected\r\n    */\r\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\r\n    * @param _disputableActionId Identifier of the action to be allowed\r\n    */\r\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\r\n    * @param _disputableActionId Identifier of the action to be voided\r\n    */\r\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Register a new disputable action in the Agreement\r\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\r\n    * @param _context Link to human-readable context for the given action\r\n    * @param _submitter Address that submitted the action\r\n    * @return Unique identifier for the created action in the context of the Agreement\r\n    */\r\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\r\n        IAgreement agreement = _ensureAgreement();\r\n        return agreement.newAction(_disputableActionId, _context, _submitter);\r\n    }\r\n\r\n    /**\r\n    * @dev Close disputable action in the Agreement\r\n    * @param _actionId Identifier of the action in the context of the Agreement\r\n    */\r\n    function _closeDisputableAction(uint256 _actionId) internal {\r\n        IAgreement agreement = _ensureAgreement();\r\n        agreement.closeAction(_actionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement\r\n    * @return Agreement\r\n    */\r\n    function _getAgreement() internal view returns (IAgreement) {\r\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement or revert if it has not been set\r\n    * @return Agreement\r\n    */\r\n    function _ensureAgreement() internal view returns (IAgreement) {\r\n        IAgreement agreement = _getAgreement();\r\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\r\n        return agreement;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/staking/interfaces/IStaking.sol\r\n\r\npragma solidity >=0.4 <=0.7;\r\n\r\n\r\ninterface IStaking {\r\n    function allowManager(address _lockManager, uint256 _allowance, bytes _data) external;\r\n    function allowManagerAndLock(uint256 _amount, address _lockManager, uint256 _allowance, bytes _data) external;\r\n    function unlockAndRemoveManager(address _account, address _lockManager) external;\r\n    function increaseLockAllowance(address _lockManager, uint256 _allowance) external;\r\n    function decreaseLockAllowance(address _account, address _lockManager, uint256 _allowance) external;\r\n    function lock(address _account, address _lockManager, uint256 _amount) external;\r\n    function unlock(address _account, address _lockManager, uint256 _amount) external;\r\n    function setLockManager(address _account, address _newLockManager) external;\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function transferAndUnstake(address _to, uint256 _amount) external;\r\n    function slash(address _account, address _to, uint256 _amount) external;\r\n    function slashAndUnstake(address _account, address _to, uint256 _amount) external;\r\n\r\n    function getLock(address _account, address _lockManager) external view returns (uint256 _amount, uint256 _allowance);\r\n    function unlockedBalanceOf(address _account) external view returns (uint256);\r\n    function lockedBalanceOf(address _user) external view returns (uint256);\r\n    function getBalancesOf(address _user) external view returns (uint256 staked, uint256 locked);\r\n    function canUnlock(address _sender, address _account, address _lockManager, uint256 _amount) external view returns (bool);\r\n}\r\n\r\n// File: @aragon/staking/interfaces/IStakingFactory.sol\r\n\r\npragma solidity >=0.4 <=0.7;\r\n\r\n\r\n\r\ninterface IStakingFactory {\r\n    function existsInstance(/* ERC20 */ address token) external view returns (bool);\r\n    function getInstance(/* ERC20 */ address token) external view returns (IStaking);\r\n    function getOrCreateInstance(/* ERC20 */ address token) external returns (IStaking);\r\n}\r\n\r\n// File: @aragon/staking/interfaces/ILockManager.sol\r\n\r\npragma solidity >=0.4 <=0.7;\r\n\r\n\r\ninterface ILockManager {\r\n    /**\r\n     * @notice Check if `_user`'s by `_lockManager` can be unlocked\r\n     * @param _user Owner of lock\r\n     * @param _amount Amount of locked tokens to unlock\r\n     * @return Whether given lock of given owner can be unlocked by given sender\r\n     */\r\n    function canUnlock(address _user, uint256 _amount) external view returns (bool);\r\n}\r\n\r\n// File: contracts/arbitration/IArbitrator.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n* @title Arbitrator interface\r\n* @dev This interface is the one used by `Agreement` as its dispute resolution protocol.\r\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrator.sol\r\n*      since we are using different solidity versions.\r\n*/\r\ninterface IArbitrator {\r\n    /**\r\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\r\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\r\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\r\n    * @return Dispute identifier\r\n    */\r\n    function createDispute(uint256 _possibleRulings, bytes _metadata) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Close the evidence period of a dispute\r\n    * @param _disputeId Identifier of the dispute to close its evidence submitting period\r\n    */\r\n    function closeEvidencePeriod(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\r\n    * @param _disputeId Identifier of the dispute to be executed\r\n    */\r\n    function executeRuling(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Tell the dispute fees information to create a dispute\r\n    * @return recipient Address where the corresponding dispute fees must be transferred to\r\n    * @return feeToken ERC20 token used for the fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n\r\n    /**\r\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\r\n    * @param _subscriber Address of the account paying the subscription fees for\r\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\r\n    * @return feeToken ERC20 token used for the subscription fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n}\r\n\r\n// File: contracts/arbitration/IArbitrable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n* @title Arbitrable interface\r\n* @dev This interface is implemented by `Agreement` so it can be used to submit disputes to an `IArbitrator`.\r\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrable.sol\r\n*      since we are using different solidity versions.\r\n*/\r\ncontract IArbitrable is ERC165 {\r\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\r\n\r\n    /**\r\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\r\n    * @param arbitrator IArbitrator instance ruling the dispute\r\n    * @param disputeId Identifier of the dispute being ruled by the arbitrator\r\n    * @param ruling Ruling given by the arbitrator\r\n    */\r\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\r\n\r\n    /**\r\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\r\n    * @param arbitrator IArbitrator submitting the evidence for\r\n    * @param disputeId Identifier of the dispute receiving new evidence\r\n    * @param submitter Address of the account submitting the evidence\r\n    * @param evidence Data submitted for the evidence of the dispute\r\n    * @param finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    event EvidenceSubmitted(IArbitrator indexed arbitrator, uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\r\n\r\n    /**\r\n    * @dev Submit evidence for a dispute\r\n    * @param _disputeId Id of the dispute in the Court\r\n    * @param _evidence Data submitted for the evidence related to the dispute\r\n    * @param _finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    function submitEvidence(uint256 _disputeId, bytes _evidence, bool _finished) external;\r\n\r\n    /**\r\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\r\n    * @param _disputeId Identifier of the dispute to be ruled\r\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \"refused to make a decision\"\r\n    */\r\n    function rule(uint256 _disputeId, uint256 _ruling) external;\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARBITRABLE_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: contracts/arbitration/IAragonAppFeesCashier.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n* @title AragonAppFeesCashier interface\r\n* @dev This interface is derived from the `IArbitrator`'s subscriptions module.\r\n*      It is used to pay the fees corresponding to the usage of a disputable app.\r\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/subscriptions/IAragonAppFeesCashier.sol\r\n*      since we are using different solidity versions.\r\n*/\r\ninterface IAragonAppFeesCashier {\r\n    /**\r\n    * @dev Emitted when an IAragonAppFeesCashier instance sets a new fee for an app\r\n    * @param appId App identifier\r\n    * @param token Token address to be used for the fees\r\n    * @param amount Fee amount to be charged for the given app\r\n    */\r\n    event AppFeeSet(bytes32 indexed appId, ERC20 token, uint256 amount);\r\n\r\n    /**\r\n    * @dev Emitted when an IAragonAppFeesCashier instance unsets an app fee\r\n    * @param appId App identifier\r\n    */\r\n    event AppFeeUnset(bytes32 indexed appId);\r\n\r\n    /**\r\n    * @dev Emitted when an IAragonAppFeesCashier instance receives a payment for an app\r\n    * @param by Address paying the fees\r\n    * @param appId App identifier\r\n    * @param data Optional data\r\n    */\r\n    event AppFeePaid(address indexed by, bytes32 appId, bytes data);\r\n\r\n    /**\r\n    * @dev Set the fee amount and token to be used for an app\r\n    * @param _appId App identifier\r\n    * @param _token Token address to be used for the fees\r\n    * @param _amount Fee amount to be charged for the given app\r\n    */\r\n    function setAppFee(bytes32 _appId, ERC20 _token, uint256 _amount) external;\r\n\r\n    /**\r\n    * @dev Set the fee amount and token to be used for a list of apps\r\n    * @param _appIds List of app identifiers\r\n    * @param _tokens List of token addresses to be used for the fees for each app\r\n    * @param _amounts List of fee amounts to be charged for each app\r\n    */\r\n    function setAppFees(bytes32[] _appIds, ERC20[] _tokens, uint256[] _amounts) external;\r\n\r\n    /**\r\n    * @dev Remove the fee set for an app\r\n    * @param _appId App identifier\r\n    */\r\n    function unsetAppFee(bytes32 _appId) external;\r\n\r\n    /**\r\n    * @dev Remove the fee set for a list of apps\r\n    * @param _appIds List of app identifiers\r\n    */\r\n    function unsetAppFees(bytes32[] _appIds) external;\r\n\r\n    /**\r\n    * @dev Pay the fees corresponding to an app\r\n    * @param _appId App identifier\r\n    * @param _data Optional data input\r\n    */\r\n    function payAppFees(bytes32 _appId, bytes _data) external payable;\r\n\r\n    /**\r\n    * @dev Tell the fee token and amount set for a given app\r\n    * @param _appId Identifier of the app being queried\r\n    * @return token Fee token address set for the requested app\r\n    * @return amount Fee token amount set for the requested app\r\n    */\r\n    function getAppFee(bytes32 _appId) external view returns (ERC20 token, uint256 amount);\r\n}\r\n\r\n// File: contracts/Agreement.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Agreement is IArbitrable, ILockManager, IAgreement, IACLOracle, AragonApp {\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* Arbitrator outcomes constants */\r\n    uint256 internal constant DISPUTES_POSSIBLE_OUTCOMES = 2;\r\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\r\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \"missing\", \"leaked\", and \"refused\", respectively.\r\n    // This Arbitrable introduces the concept of the submitter/challenger (a binary outcome) as 3/4.\r\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the submitter.\r\n    uint256 internal constant DISPUTES_RULING_SUBMITTER = 3;\r\n    uint256 internal constant DISPUTES_RULING_CHALLENGER = 4;\r\n\r\n    /* Validation errors */\r\n    string internal constant ERROR_SENDER_NOT_ALLOWED = \"AGR_SENDER_NOT_ALLOWED\";\r\n    string internal constant ERROR_SIGNER_MUST_SIGN = \"AGR_SIGNER_MUST_SIGN\";\r\n    string internal constant ERROR_SIGNER_ALREADY_SIGNED = \"AGR_SIGNER_ALREADY_SIGNED\";\r\n    string internal constant ERROR_INVALID_SIGNING_SETTING = \"AGR_INVALID_SIGNING_SETTING\";\r\n    string internal constant ERROR_INVALID_SETTLEMENT_OFFER = \"AGR_INVALID_SETTLEMENT_OFFER\";\r\n    string internal constant ERROR_ACTION_DOES_NOT_EXIST = \"AGR_ACTION_DOES_NOT_EXIST\";\r\n    string internal constant ERROR_CHALLENGE_DOES_NOT_EXIST = \"AGR_CHALLENGE_DOES_NOT_EXIST\";\r\n    string internal constant ERROR_TOKEN_DEPOSIT_FAILED = \"AGR_TOKEN_DEPOSIT_FAILED\";\r\n    string internal constant ERROR_TOKEN_TRANSFER_FAILED = \"AGR_TOKEN_TRANSFER_FAILED\";\r\n    string internal constant ERROR_TOKEN_APPROVAL_FAILED = \"AGR_TOKEN_APPROVAL_FAILED\";\r\n    string internal constant ERROR_TOKEN_NOT_CONTRACT = \"AGR_TOKEN_NOT_CONTRACT\";\r\n    string internal constant ERROR_SETTING_DOES_NOT_EXIST = \"AGR_SETTING_DOES_NOT_EXIST\";\r\n    string internal constant ERROR_ARBITRATOR_NOT_CONTRACT = \"AGR_ARBITRATOR_NOT_CONTRACT\";\r\n    string internal constant ERROR_STAKING_FACTORY_NOT_CONTRACT = \"AGR_STAKING_FACTORY_NOT_CONTRACT\";\r\n    string internal constant ERROR_ACL_ORACLE_SIGNER_MISSING = \"AGR_ACL_ORACLE_SIGNER_MISSING\";\r\n    string internal constant ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS = \"AGR_ACL_ORACLE_SIGNER_NOT_ADDR\";\r\n\r\n    /* Disputable related errors */\r\n    string internal constant ERROR_SENDER_CANNOT_CHALLENGE_ACTION = \"AGR_SENDER_CANT_CHALLENGE_ACTION\";\r\n    string internal constant ERROR_DISPUTABLE_NOT_CONTRACT = \"AGR_DISPUTABLE_NOT_CONTRACT\";\r\n    string internal constant ERROR_DISPUTABLE_NOT_ACTIVE = \"AGR_DISPUTABLE_NOT_ACTIVE\";\r\n    string internal constant ERROR_DISPUTABLE_ALREADY_ACTIVE = \"AGR_DISPUTABLE_ALREADY_ACTIVE\";\r\n    string internal constant ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST = \"AGR_COL_REQ_DOES_NOT_EXIST\";\r\n\r\n    /* Action related errors */\r\n    string internal constant ERROR_CANNOT_CHALLENGE_ACTION = \"AGR_CANNOT_CHALLENGE_ACTION\";\r\n    string internal constant ERROR_CANNOT_CLOSE_ACTION = \"AGR_CANNOT_CLOSE_ACTION\";\r\n    string internal constant ERROR_CANNOT_SETTLE_ACTION = \"AGR_CANNOT_SETTLE_ACTION\";\r\n    string internal constant ERROR_CANNOT_DISPUTE_ACTION = \"AGR_CANNOT_DISPUTE_ACTION\";\r\n    string internal constant ERROR_CANNOT_RULE_ACTION = \"AGR_CANNOT_RULE_ACTION\";\r\n    string internal constant ERROR_CANNOT_SUBMIT_EVIDENCE = \"AGR_CANNOT_SUBMIT_EVIDENCE\";\r\n    string internal constant ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD = \"AGR_CANNOT_CLOSE_EVIDENCE_PERIOD\";\r\n\r\n    // This role will be checked against the Disputable app when users try to challenge actions.\r\n    // It is expected to be configured per Disputable app. For reference, see `canPerformChallenge()`.\r\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\"CHALLENGE_ROLE\");\r\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\r\n\r\n    // bytes32 public constant CHANGE_AGREEMENT_ROLE = keccak256(\"CHANGE_AGREEMENT_ROLE\");\r\n    bytes32 public constant CHANGE_AGREEMENT_ROLE = 0x07813bca4905795fa22783885acd0167950db28f2d7a40b70f666f429e19f1d9;\r\n\r\n    // bytes32 public constant MANAGE_DISPUTABLE_ROLE = keccak256(\"MANAGE_DISPUTABLE_ROLE\");\r\n    bytes32 public constant MANAGE_DISPUTABLE_ROLE = 0x2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be6;\r\n\r\n    event Signed(address indexed signer, uint256 settingId);\r\n    event SettingChanged(uint256 settingId);\r\n    event AppFeesCashierSynced(IAragonAppFeesCashier newAppFeesCashier);\r\n    event DisputableAppActivated(address indexed disputable);\r\n    event DisputableAppDeactivated(address indexed disputable);\r\n    event CollateralRequirementChanged(address indexed disputable, uint256 collateralRequirementId);\r\n\r\n    struct Setting {\r\n        IArbitrator arbitrator;\r\n        IAragonAppFeesCashier aragonAppFeesCashier; // Fees cashier to deposit action fees (linked to the selected arbitrator)\r\n        string title;\r\n        bytes content;\r\n    }\r\n\r\n    struct CollateralRequirement {\r\n        ERC20 token;                        // ERC20 token to be used for collateral\r\n        uint64 challengeDuration;           // Challenge duration, during which the submitter can raise a dispute\r\n        uint256 actionAmount;               // Amount of collateral token to be locked from the submitter's staking pool when creating actions\r\n        uint256 challengeAmount;            // Amount of collateral token to be locked from the challenger's own balance when challenging actions\r\n        IStaking staking;                   // Staking pool cache for the collateral token -- will never change\r\n    }\r\n\r\n    struct DisputableInfo {\r\n        bool activated;                                                     // Whether the Disputable app is active\r\n        uint256 nextCollateralRequirementsId;                               // Identification number of the next collateral requirement\r\n        mapping (uint256 => CollateralRequirement) collateralRequirements;  // List of collateral requirements indexed by ID\r\n    }\r\n\r\n    struct Action {\r\n        DisputableAragonApp disputable;     // Disputable app that created the action\r\n        uint256 disputableActionId;         // Identification number of the action on the Disputable app\r\n        uint256 collateralRequirementId;    // Identification number of the collateral requirement applicable to the action\r\n        uint256 settingId;                  // Identification number of the agreement setting applicable to the action\r\n        address submitter;                  // Address that submitted the action\r\n        bool closed;                        // Whether the action is closed (and cannot be challenged anymore)\r\n        bytes context;                      // Link to a human-readable context for the given action\r\n        uint256 lastChallengeId;            // Identification number of the action's most recent challenge, if any\r\n    }\r\n\r\n    struct ArbitratorFees {\r\n        ERC20 token;                        // ERC20 token used for the arbitration fees\r\n        uint256 amount;                     // Amount of arbitration fees\r\n    }\r\n\r\n    struct Challenge {\r\n        uint256 actionId;                        // Identification number of the action associated to the challenge\r\n        address challenger;                      // Address that challenged the action\r\n        uint64 endDate;                          // Last date the submitter can raise a dispute against the challenge\r\n        bytes context;                           // Link to a human-readable context for the challenge\r\n        uint256 settlementOffer;                 // Amount of collateral tokens the challenger would accept without involving the arbitrator\r\n        ArbitratorFees challengerArbitratorFees; // Arbitration fees paid by the challenger (in advance)\r\n        ArbitratorFees submitterArbitratorFees;  // Arbitration fees paid by the submitter (on dispute creation)\r\n        ChallengeState state;                    // Current state of the challenge\r\n        bool submitterFinishedEvidence;          // Whether the action submitter has finished submitting evidence for the raised dispute\r\n        bool challengerFinishedEvidence;         // Whether the action challenger has finished submitting evidence for the raised dispute\r\n        uint256 disputeId;                       // Identification number of the dispute on the arbitrator\r\n        uint256 ruling;                          // Ruling given from the arbitrator for the dispute\r\n    }\r\n\r\n    IStakingFactory public stakingFactory;                           // Staking factory, for finding each collateral token's staking pool\r\n\r\n    uint256 private nextSettingId;\r\n    mapping (uint256 => Setting) private settings;                  // List of historic agreement settings indexed by ID (starting at 1)\r\n    mapping (address => uint256) private lastSettingSignedBy;       // Mapping of address => last agreement setting signed\r\n    mapping (address => DisputableInfo) private disputableInfos;    // Mapping of Disputable app => disputable infos\r\n\r\n    uint256 private nextActionId;\r\n    mapping (uint256 => Action) private actions;                    // List of actions indexed by ID (starting at 1)\r\n\r\n    uint256 private nextChallengeId;\r\n    mapping (uint256 => Challenge) private challenges;              // List of challenges indexed by ID (starting at 1)\r\n    mapping (uint256 => uint256) private challengeByDispute;        // Mapping of arbitrator's dispute ID => challenge ID\r\n\r\n    /**\r\n    * @notice Initialize Agreement for \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator` and staking factory `_factory`\r\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\r\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\r\n    * @param _title String indicating a short description\r\n    * @param _content Link to a human-readable text that describes the initial rules for the Agreement\r\n    * @param _stakingFactory Staking factory for finding each collateral token's staking pool\r\n    */\r\n    function initialize(\r\n        IArbitrator _arbitrator,\r\n        bool _setAppFeesCashier,\r\n        string _title,\r\n        bytes _content,\r\n        IStakingFactory _stakingFactory\r\n    )\r\n        external\r\n    {\r\n        initialized();\r\n        require(isContract(address(_stakingFactory)), ERROR_STAKING_FACTORY_NOT_CONTRACT);\r\n\r\n        stakingFactory = _stakingFactory;\r\n\r\n        nextSettingId = 1;   // Agreement setting ID zero is considered the null agreement setting for further validations\r\n        nextActionId = 1;    // Action ID zero is considered the null action for further validations\r\n        nextChallengeId = 1; // Challenge ID zero is considered the null challenge for further validations\r\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\r\n    }\r\n\r\n    /**\r\n    * @notice Update Agreement to title \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator`\r\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\r\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\r\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\r\n    * @param _title String indicating a short description\r\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\r\n    */\r\n    function changeSetting(\r\n        IArbitrator _arbitrator,\r\n        bool _setAppFeesCashier,\r\n        string _title,\r\n        bytes _content\r\n    )\r\n        external\r\n        auth(CHANGE_AGREEMENT_ROLE)\r\n    {\r\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\r\n    }\r\n\r\n    /**\r\n    * @notice Sync app fees cashier address\r\n    * @dev The app fees cashier address is being cached in the contract to save gas.\r\n    *      This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator.\r\n    *      Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization.\r\n    */\r\n    function syncAppFeesCashier() external {\r\n        Setting storage setting = _getSetting(_getCurrentSettingId());\r\n        IAragonAppFeesCashier newAppFeesCashier = _getArbitratorFeesCashier(setting.arbitrator);\r\n        IAragonAppFeesCashier currentAppFeesCashier = setting.aragonAppFeesCashier;\r\n\r\n        // Sync the app fees cashier only if there was one set before and it's different from the arbitrator's current one\r\n        if (currentAppFeesCashier != IAragonAppFeesCashier(0) && currentAppFeesCashier != newAppFeesCashier) {\r\n            setting.aragonAppFeesCashier = newAppFeesCashier;\r\n            emit AppFeesCashierSynced(newAppFeesCashier);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Activate Disputable app `_disputableAddress`\r\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\r\n    * @param _disputableAddress Address of the Disputable app\r\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\r\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\r\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\r\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\r\n    */\r\n    function activate(\r\n        address _disputableAddress,\r\n        ERC20 _collateralToken,\r\n        uint64 _challengeDuration,\r\n        uint256 _actionAmount,\r\n        uint256 _challengeAmount\r\n    )\r\n        external\r\n        auth(MANAGE_DISPUTABLE_ROLE)\r\n    {\r\n        require(isContract(_disputableAddress), ERROR_DISPUTABLE_NOT_CONTRACT);\r\n\r\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\r\n        _ensureInactiveDisputable(disputableInfo);\r\n\r\n        DisputableAragonApp disputable = DisputableAragonApp(_disputableAddress);\r\n        disputableInfo.activated = true;\r\n\r\n        // If the disputable app is being activated for the first time, then we need to set-up its initial collateral\r\n        // requirement and set its Agreement reference to here.\r\n        if (disputable.getAgreement() != IAgreement(this)) {\r\n            disputable.setAgreement(IAgreement(this));\r\n            uint256 nextId = disputableInfo.nextCollateralRequirementsId;\r\n            disputableInfo.nextCollateralRequirementsId = nextId > 0 ? nextId : 1;\r\n        }\r\n        _changeCollateralRequirement(disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\r\n\r\n        emit DisputableAppActivated(disputable);\r\n    }\r\n\r\n    /**\r\n    * @notice Deactivate Disputable app `_disputable`\r\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\r\n    * @param _disputableAddress Address of the Disputable app to be deactivated\r\n    */\r\n    function deactivate(address _disputableAddress) external auth(MANAGE_DISPUTABLE_ROLE) {\r\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\r\n        _ensureActiveDisputable(disputableInfo);\r\n\r\n        disputableInfo.activated = false;\r\n        emit DisputableAppDeactivated(_disputableAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice Change `_disputable`'s collateral requirements\r\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\r\n    * @param _disputable Address of the Disputable app\r\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\r\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\r\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\r\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\r\n    */\r\n    function changeCollateralRequirement(\r\n        DisputableAragonApp _disputable,\r\n        ERC20 _collateralToken,\r\n        uint64 _challengeDuration,\r\n        uint256 _actionAmount,\r\n        uint256 _challengeAmount\r\n    )\r\n        external\r\n        auth(MANAGE_DISPUTABLE_ROLE)\r\n    {\r\n        DisputableInfo storage disputableInfo = disputableInfos[address(_disputable)];\r\n        _ensureActiveDisputable(disputableInfo);\r\n\r\n        _changeCollateralRequirement(_disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Sign the agreement up-to setting #`_settingId`\r\n    * @dev Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions.\r\n    *      Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.\r\n    * @param _settingId Last setting ID the user is agreeing with\r\n    */\r\n    function sign(uint256 _settingId) external {\r\n        uint256 lastSettingIdSigned = lastSettingSignedBy[msg.sender];\r\n        require(lastSettingIdSigned < _settingId, ERROR_SIGNER_ALREADY_SIGNED);\r\n        require(_settingId < nextSettingId, ERROR_INVALID_SIGNING_SETTING);\r\n\r\n        lastSettingSignedBy[msg.sender] = _settingId;\r\n        emit Signed(msg.sender, _settingId);\r\n    }\r\n\r\n    /**\r\n    * @notice Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`\r\n    * @dev This function should be called from the Disputable app each time a new disputable action is created.\r\n    *      Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action.\r\n    *      Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated\r\n    *      via `activate()` which already requires initialization.\r\n    *      IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter.\r\n    *      Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as\r\n    *      otherwise funds could be maliciously locked from the incorrect account on new actions.\r\n    * @param _disputableActionId Identification number of the action on the Disputable app\r\n    * @param _context Link to a human-readable context for the given action\r\n    * @param _submitter Address that submitted the action\r\n    * @return Unique identification number for the created action on the Agreement\r\n    */\r\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256) {\r\n        DisputableInfo storage disputableInfo = disputableInfos[msg.sender];\r\n        _ensureActiveDisputable(disputableInfo);\r\n\r\n        uint256 currentSettingId = _getCurrentSettingId();\r\n        uint256 lastSettingIdSigned = lastSettingSignedBy[_submitter];\r\n        require(lastSettingIdSigned >= currentSettingId, ERROR_SIGNER_MUST_SIGN);\r\n\r\n        // An initial collateral requirement is created when disputable apps are activated, thus length is always greater than 0\r\n        uint256 currentCollateralRequirementId = disputableInfo.nextCollateralRequirementsId - 1;\r\n        CollateralRequirement storage requirement = _getCollateralRequirement(disputableInfo, currentCollateralRequirementId);\r\n        _lockBalance(requirement.staking, _submitter, requirement.actionAmount);\r\n\r\n        // Pay action submission fees\r\n        Setting storage setting = _getSetting(currentSettingId);\r\n        DisputableAragonApp disputable = DisputableAragonApp(msg.sender);\r\n        _payAppFees(setting, disputable, _submitter, id);\r\n\r\n        uint256 id = nextActionId++;\r\n        Action storage action = actions[id];\r\n        action.disputable = disputable;\r\n        action.disputableActionId = _disputableActionId;\r\n        action.collateralRequirementId = currentCollateralRequirementId;\r\n        action.settingId = currentSettingId;\r\n        action.submitter = _submitter;\r\n        action.context = _context;\r\n\r\n        emit ActionSubmitted(id, msg.sender);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n    * @notice Close action #`_actionId`\r\n    * @dev This function closes actions that:\r\n    *      - Are not currently challenged nor disputed, or\r\n    *      - Were previously disputed but ruled in favour of the submitter or voided\r\n    *      Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner\r\n    *      in case the app does not close its own actions automatically (e.g. disputable votes that don't pass).\r\n    *      Can be called multiple times; it does nothing if the action is already closed.\r\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _actionId Identification number of the action to be closed\r\n    */\r\n    function closeAction(uint256 _actionId) external {\r\n        Action storage action = _getAction(_actionId);\r\n        if (action.closed) {\r\n            return;\r\n        }\r\n\r\n        require(_canClose(action), ERROR_CANNOT_CLOSE_ACTION);\r\n        (, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\r\n        _unlockBalance(requirement.staking, action.submitter, requirement.actionAmount);\r\n        _unsafeCloseAction(_actionId, action);\r\n    }\r\n\r\n    /**\r\n    * @notice Challenge action #`_actionId`\r\n    * @dev This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app.\r\n    *      Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger).\r\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _actionId Identification number of the action to be challenged\r\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\r\n    * @param _finishedEvidence Whether the challenger is finished submitting evidence with the challenge context\r\n    * @param _context Link to a human-readable context for the challenge\r\n    */\r\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedEvidence, bytes _context) external {\r\n        Action storage action = _getAction(_actionId);\r\n        require(_canChallenge(action), ERROR_CANNOT_CHALLENGE_ACTION);\r\n\r\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\r\n        require(_canPerformChallenge(disputable, msg.sender), ERROR_SENDER_CANNOT_CHALLENGE_ACTION);\r\n        require(_settlementOffer <= requirement.actionAmount, ERROR_INVALID_SETTLEMENT_OFFER);\r\n\r\n        uint256 challengeId = _createChallenge(_actionId, action, msg.sender, requirement, _settlementOffer, _finishedEvidence, _context);\r\n        action.lastChallengeId = challengeId;\r\n        disputable.onDisputableActionChallenged(action.disputableActionId, challengeId, msg.sender);\r\n        emit ActionChallenged(_actionId, challengeId);\r\n    }\r\n\r\n    /**\r\n    * @notice Settle challenged action #`_actionId`, accepting the settlement offer\r\n    * @dev This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed).\r\n    *      Can only be called once (if at all) per opened challenge.\r\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _actionId Identification number of the action to be settled\r\n    */\r\n    function settleAction(uint256 _actionId) external {\r\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\r\n        address submitter = action.submitter;\r\n\r\n        if (msg.sender == submitter) {\r\n            require(_canSettle(challenge), ERROR_CANNOT_SETTLE_ACTION);\r\n        } else {\r\n            require(_canClaimSettlement(challenge), ERROR_CANNOT_SETTLE_ACTION);\r\n        }\r\n\r\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\r\n        uint256 actionCollateral = requirement.actionAmount;\r\n        uint256 settlementOffer = challenge.settlementOffer;\r\n\r\n        // The settlement offer was already checked to be up-to the collateral amount upon challenge creation\r\n        // However, we cap it to collateral amount to be safe\r\n        // With this, we can avoid using SafeMath to calculate `unlockedAmount`\r\n        uint256 slashedAmount = settlementOffer >= actionCollateral ? actionCollateral : settlementOffer;\r\n        uint256 unlockedAmount = actionCollateral - slashedAmount;\r\n\r\n        // Unlock and slash action collateral for settlement offer\r\n        address challenger = challenge.challenger;\r\n        IStaking staking = requirement.staking;\r\n        _unlockBalance(staking, submitter, unlockedAmount);\r\n        _slashBalance(staking, submitter, challenger, slashedAmount);\r\n\r\n        // Transfer challenge collateral and challenger arbitrator fees back to the challenger\r\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\r\n        _transferTo(challenge.challengerArbitratorFees.token, challenger, challenge.challengerArbitratorFees.amount);\r\n\r\n        challenge.state = ChallengeState.Settled;\r\n        disputable.onDisputableActionRejected(action.disputableActionId);\r\n        emit ActionSettled(_actionId, challengeId);\r\n        _unsafeCloseAction(_actionId, action);\r\n    }\r\n\r\n    /**\r\n    * @notice Dispute challenged action #`_actionId`, raising it to the arbitrator\r\n    * @dev Only the action submitter can create a dispute for an action with an open challenge.\r\n    *      Can only be called once (if at all) per opened challenge.\r\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _actionId Identification number of the action to be disputed\r\n    * @param _submitterFinishedEvidence Whether the submitter was finished submitting evidence with their action context\r\n    */\r\n    function disputeAction(uint256 _actionId, bool _submitterFinishedEvidence) external {\r\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\r\n        require(_canDispute(challenge), ERROR_CANNOT_DISPUTE_ACTION);\r\n\r\n        address submitter = action.submitter;\r\n        require(msg.sender == submitter, ERROR_SENDER_NOT_ALLOWED);\r\n\r\n        IArbitrator arbitrator = _getArbitratorFor(action);\r\n        bytes memory metadata = abi.encodePacked(appId(), action.lastChallengeId);\r\n        uint256 disputeId = _createDispute(action, challenge, arbitrator, metadata);\r\n        _submitEvidence(arbitrator, disputeId, submitter, action.context, _submitterFinishedEvidence);\r\n        _submitEvidence(arbitrator, disputeId, challenge.challenger, challenge.context, challenge.challengerFinishedEvidence);\r\n\r\n        challenge.state = ChallengeState.Disputed;\r\n        challenge.submitterFinishedEvidence = _submitterFinishedEvidence;\r\n        challenge.disputeId = disputeId;\r\n        challengeByDispute[disputeId] = challengeId;\r\n        emit ActionDisputed(_actionId, challengeId);\r\n    }\r\n\r\n    /**\r\n    * @notice Submit evidence for dispute #`_disputeId`\r\n    * @dev Only callable by the action submitter or challenger.\r\n    *      Can be called as many times as desired until the dispute is over.\r\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _disputeId Identification number of the dispute on the arbitrator\r\n    * @param _evidence Evidence data to be submitted\r\n    * @param _finished Whether the evidence submitter is now finished submitting evidence\r\n    */\r\n    function submitEvidence(uint256 _disputeId, bytes _evidence, bool _finished) external {\r\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\r\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\r\n\r\n        IArbitrator arbitrator = _getArbitratorFor(action);\r\n        if (msg.sender == action.submitter) {\r\n            // If the submitter finished submitting evidence earlier, also emit this event as finished\r\n            bool submitterFinishedEvidence = challenge.submitterFinishedEvidence || _finished;\r\n            _submitEvidence(arbitrator, _disputeId, msg.sender, _evidence, submitterFinishedEvidence);\r\n            challenge.submitterFinishedEvidence = submitterFinishedEvidence;\r\n        } else if (msg.sender == challenge.challenger) {\r\n            // If the challenger finished submitting evidence earlier, also emit this event as finished\r\n            bool challengerFinishedEvidence = challenge.challengerFinishedEvidence || _finished;\r\n            _submitEvidence(arbitrator, _disputeId, msg.sender, _evidence, challengerFinishedEvidence);\r\n            challenge.challengerFinishedEvidence = challengerFinishedEvidence;\r\n        } else {\r\n            revert(ERROR_SENDER_NOT_ALLOWED);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Close evidence submission period for dispute #`_disputeId`\r\n    * @dev Callable by any account.\r\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _disputeId Identification number of the dispute on the arbitrator\r\n    */\r\n    function closeEvidencePeriod(uint256 _disputeId) external {\r\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\r\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\r\n        require(challenge.submitterFinishedEvidence && challenge.challengerFinishedEvidence, ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD);\r\n\r\n        IArbitrator arbitrator = _getArbitratorFor(action);\r\n        arbitrator.closeEvidencePeriod(_disputeId);\r\n    }\r\n\r\n    /**\r\n    * @notice Rule the action associated to dispute #`_disputeId` with ruling `_ruling`\r\n    * @dev Can only be called once per challenge by the associated abitrator.\r\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\r\n    * @param _disputeId Identification number of the dispute on the arbitrator\r\n    * @param _ruling Ruling given by the arbitrator\r\n    */\r\n    function rule(uint256 _disputeId, uint256 _ruling) external {\r\n        (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge) = _getDisputedAction(_disputeId);\r\n        require(_isDisputed(challenge), ERROR_CANNOT_RULE_ACTION);\r\n\r\n        IArbitrator arbitrator = _getArbitratorFor(action);\r\n        require(arbitrator == IArbitrator(msg.sender), ERROR_SENDER_NOT_ALLOWED);\r\n\r\n        challenge.ruling = _ruling;\r\n        emit Ruled(arbitrator, _disputeId, _ruling);\r\n\r\n        if (_ruling == DISPUTES_RULING_SUBMITTER) {\r\n            _acceptAction(actionId, action, challengeId, challenge);\r\n        } else if (_ruling == DISPUTES_RULING_CHALLENGER) {\r\n            _rejectAction(actionId, action, challengeId, challenge);\r\n        } else {\r\n            _voidAction(actionId, action, challengeId, challenge);\r\n        }\r\n    }\r\n\r\n    // Getter fns\r\n\r\n    /**\r\n    * @dev Tell the identification number of the current agreement setting\r\n    * @return Identification number of the current agreement setting\r\n    */\r\n    function getCurrentSettingId() external view returns (uint256) {\r\n        return _getCurrentSettingId();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to an agreement setting\r\n    * @param _settingId Identification number of the agreement setting\r\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\r\n    * @return aragonAppFeesCashier Address of the fees cashier to deposit action fees (linked to the selected arbitrator)\r\n    * @return title String indicating a short description\r\n    * @return content Link to a human-readable text that describes the current rules for the Agreement\r\n    */\r\n    function getSetting(uint256 _settingId)\r\n        external\r\n        view\r\n        returns (IArbitrator arbitrator, IAragonAppFeesCashier aragonAppFeesCashier, string title, bytes content)\r\n    {\r\n        Setting storage setting = _getSetting(_settingId);\r\n        arbitrator = setting.arbitrator;\r\n        aragonAppFeesCashier = setting.aragonAppFeesCashier;\r\n        title = setting.title;\r\n        content = setting.content;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to a Disputable app\r\n    * @param _disputable Address of the Disputable app\r\n    * @return activated Whether the Disputable app is active\r\n    * @return currentCollateralRequirementId Identification number of the current collateral requirement\r\n    */\r\n    function getDisputableInfo(address _disputable) external view returns (bool activated, uint256 currentCollateralRequirementId) {\r\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\r\n        activated = disputableInfo.activated;\r\n        uint256 nextId = disputableInfo.nextCollateralRequirementsId;\r\n        // Since `nextCollateralRequirementsId` is initialized to 1 when disputable apps are activated, it is safe to consider the\r\n        // current collateral requirement ID of a disputable app as 0 if it has not been set yet, which means it was not activated yet.\r\n        currentCollateralRequirementId = nextId == 0 ? 0 : nextId - 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to a collateral requirement of a Disputable app\r\n    * @param _disputable Address of the Disputable app\r\n    * @param _collateralRequirementId Identification number of the collateral requirement\r\n    * @return collateralToken Address of the ERC20 token to be used for collateral\r\n    * @return actionAmount Amount of collateral tokens that will be locked every time an action is created\r\n    * @return challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\r\n    * @return challengeDuration Challenge duration, during which the submitter can raise a dispute\r\n    */\r\n    function getCollateralRequirement(address _disputable, uint256 _collateralRequirementId)\r\n        external\r\n        view\r\n        returns (\r\n            ERC20 collateralToken,\r\n            uint64 challengeDuration,\r\n            uint256 actionAmount,\r\n            uint256 challengeAmount\r\n        )\r\n    {\r\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\r\n        CollateralRequirement storage collateral = _getCollateralRequirement(disputableInfo, _collateralRequirementId);\r\n        collateralToken = collateral.token;\r\n        actionAmount = collateral.actionAmount;\r\n        challengeAmount = collateral.challengeAmount;\r\n        challengeDuration = collateral.challengeDuration;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to a signer\r\n    * @param _signer Address of signer\r\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\r\n    * @return mustSign Whether the requested signer needs to sign the current agreement setting before submitting an action\r\n    */\r\n    function getSigner(address _signer) external view returns (uint256 lastSettingIdSigned, bool mustSign) {\r\n        (lastSettingIdSigned, mustSign) = _getSigner(_signer);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to an action\r\n    * @param _actionId Identification number of the action\r\n    * @return disputable Address of the Disputable app that created the action\r\n    * @return disputableActionId Identification number of the action on the Disputable app\r\n    * @return collateralRequirementId Identification number of the collateral requirement applicable to the action\r\n    * @return settingId Identification number of the agreement setting applicable to the action\r\n    * @return submitter Address that submitted the action\r\n    * @return closed Whether the action is closed\r\n    * @return context Link to a human-readable context for the action\r\n    * @return lastChallengeId Identification number of the action's most recent challenge, if any\r\n    * @return lastChallengeActive Whether the action's most recent challenge is still ongoing\r\n    */\r\n    function getAction(uint256 _actionId)\r\n        external\r\n        view\r\n        returns (\r\n            address disputable,\r\n            uint256 disputableActionId,\r\n            uint256 collateralRequirementId,\r\n            uint256 settingId,\r\n            address submitter,\r\n            bool closed,\r\n            bytes context,\r\n            uint256 lastChallengeId,\r\n            bool lastChallengeActive\r\n        )\r\n    {\r\n        Action storage action = _getAction(_actionId);\r\n\r\n        disputable = action.disputable;\r\n        disputableActionId = action.disputableActionId;\r\n        collateralRequirementId = action.collateralRequirementId;\r\n        settingId = action.settingId;\r\n        submitter = action.submitter;\r\n        closed = action.closed;\r\n        context = action.context;\r\n        lastChallengeId = action.lastChallengeId;\r\n\r\n        if (lastChallengeId > 0) {\r\n            (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\r\n            lastChallengeActive = _isWaitingChallengeAnswer(challenge) || _isDisputed(challenge);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to an action challenge\r\n    * @param _challengeId Identification number of the challenge\r\n    * @return actionId Identification number of the action associated to the challenge\r\n    * @return challenger Address that challenged the action\r\n    * @return endDate Datetime of the last date the submitter can raise a dispute against the challenge\r\n    * @return context Link to a human-readable context for the challenge\r\n    * @return settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\r\n    * @return state Current state of the challenge\r\n    * @return submitterFinishedEvidence Whether the action submitter has finished submitting evidence for the associated dispute\r\n    * @return challengerFinishedEvidence Whether the action challenger has finished submitting evidence for the associated dispute\r\n    * @return disputeId Identification number of the associated dispute on the arbitrator\r\n    * @return ruling Ruling given from the arbitrator for the dispute\r\n    */\r\n    function getChallenge(uint256 _challengeId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 actionId,\r\n            address challenger,\r\n            uint64 endDate,\r\n            bytes context,\r\n            uint256 settlementOffer,\r\n            ChallengeState state,\r\n            bool submitterFinishedEvidence,\r\n            bool challengerFinishedEvidence,\r\n            uint256 disputeId,\r\n            uint256 ruling\r\n        )\r\n    {\r\n        Challenge storage challenge = _getChallenge(_challengeId);\r\n\r\n        actionId = challenge.actionId;\r\n        challenger = challenge.challenger;\r\n        endDate = challenge.endDate;\r\n        context = challenge.context;\r\n        settlementOffer = challenge.settlementOffer;\r\n        state = challenge.state;\r\n        submitterFinishedEvidence = challenge.submitterFinishedEvidence;\r\n        challengerFinishedEvidence = challenge.challengerFinishedEvidence;\r\n        disputeId = challenge.disputeId;\r\n        ruling = challenge.ruling;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the arbitration fees paid for an action challenge\r\n    *      Split from `getChallenge()` due to “stack too deep issues”\r\n    * @param _challengeId Identification number of the challenge\r\n    * @return submitterArbitratorFeesToken ERC20 token used for the arbitration fees paid by the submitter (on dispute creation)\r\n    * @return submitterArbitratorFeesAmount Amount of arbitration fees paid by the submitter (on dispute creation)\r\n    * @return challengerArbitratorFeesToken ERC20 token used for the arbitration fees paid by the challenger (in advance)\r\n    * @return challengerArbitratorFeesAmount Amount of arbitration fees paid by the challenger (in advance)\r\n    */\r\n    function getChallengeArbitratorFees(uint256 _challengeId)\r\n        external\r\n        view\r\n        returns (\r\n            ERC20 submitterArbitratorFeesToken,\r\n            uint256 submitterArbitratorFeesAmount,\r\n            ERC20 challengerArbitratorFeesToken,\r\n            uint256 challengerArbitratorFeesAmount\r\n        )\r\n    {\r\n        Challenge storage challenge = _getChallenge(_challengeId);\r\n\r\n        submitterArbitratorFeesToken = challenge.submitterArbitratorFees.token;\r\n        submitterArbitratorFeesAmount = challenge.submitterArbitratorFees.amount;\r\n        challengerArbitratorFeesToken = challenge.challengerArbitratorFees.token;\r\n        challengerArbitratorFeesAmount = challenge.challengerArbitratorFees.amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be challenged\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action can be challenged, false otherwise\r\n    */\r\n    function canChallenge(uint256 _actionId) external view returns (bool) {\r\n        Action storage action = _getAction(_actionId);\r\n        return _canChallenge(action);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be manually closed.\r\n    *      An action can be closed if it is allowed to:\r\n    *       - Proceed in the context of this Agreement (see `_canProceed()`), and\r\n    *       - Be closed in the context of the originating Disputable app\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action can be closed, false otherwise\r\n    */\r\n    function canClose(uint256 _actionId) external view returns (bool) {\r\n        Action storage action = _getAction(_actionId);\r\n        return _canClose(action);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be settled\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action can be settled, false otherwise\r\n    */\r\n    function canSettle(uint256 _actionId) external view returns (bool) {\r\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\r\n        return _canSettle(challenge);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be settled by claiming its challenge settlement\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action settlement can be claimed, false otherwise\r\n    */\r\n    function canClaimSettlement(uint256 _actionId) external view returns (bool) {\r\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\r\n        return _canClaimSettlement(challenge);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be disputed\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action can be disputed, false otherwise\r\n    */\r\n    function canDispute(uint256 _actionId) external view returns (bool) {\r\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\r\n        return _canDispute(challenge);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action's dispute can be ruled\r\n    * @param _actionId Identification number of the action\r\n    * @return True if the action's dispute can be ruled, false otherwise\r\n    */\r\n    function canRuleDispute(uint256 _actionId) external view returns (bool) {\r\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\r\n        return _isDisputed(challenge);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an address can challenge an action\r\n    * @param _actionId Identification number of the action\r\n    * @param _challenger Address of the challenger\r\n    * @return True if the challenger can challenge the action, false otherwise\r\n    */\r\n    function canPerformChallenge(uint256 _actionId, address _challenger) external view returns (bool) {\r\n        Action storage action = _getAction(_actionId);\r\n        return _canPerformChallenge(action.disputable, _challenger);\r\n    }\r\n\r\n    /**\r\n    * @notice Tells whether an address has already signed the Agreement\r\n    * @dev ACL oracle interface conformance\r\n    * @return True if a parameterized address has signed the current version of the Agreement, false otherwise\r\n    */\r\n    function canPerform(address /* _grantee */, address /* _where */, bytes32 /* _what */, uint256[] _how)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        // We currently expect the address as the only permission parameter because an ACL Oracle's `grantee`\r\n        // argument is not provided with the original sender if the permission is set for ANY_ENTITY.\r\n        require(_how.length > 0, ERROR_ACL_ORACLE_SIGNER_MISSING);\r\n        require(_how[0] < 2**160, ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS);\r\n\r\n        address signer = address(_how[0]);\r\n        (, bool mustSign) = _getSigner(signer);\r\n        return !mustSign;\r\n    }\r\n\r\n    /**\r\n    * @dev ILockManager conformance.\r\n    *      The Staking contract checks this on each request to unlock an amount managed by this Agreement.\r\n    *      It always returns false to disable owners from unlocking their funds arbitrarily, as we\r\n    *      want to control the release of the locked amount when actions are closed or settled.\r\n    * @return Whether the request to unlock tokens of a given owner should be allowed\r\n    */\r\n    function canUnlock(address, uint256) external view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Disable built-in AragonApp token recovery escape hatch.\r\n    *      This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.\r\n    * @return Always false\r\n    */\r\n    function allowRecoverability(address /* _token */) public view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // Internal fns\r\n\r\n    /**\r\n    * @dev Change agreement settings\r\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\r\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\r\n    * @param _title String indicating a short description\r\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\r\n    */\r\n    function _newSetting(IArbitrator _arbitrator, bool _setAppFeesCashier, string _title, bytes _content) internal {\r\n        require(isContract(address(_arbitrator)), ERROR_ARBITRATOR_NOT_CONTRACT);\r\n\r\n        uint256 id = nextSettingId++;\r\n        Setting storage setting = settings[id];\r\n        setting.title = _title;\r\n        setting.content = _content;\r\n        setting.arbitrator = _arbitrator;\r\n\r\n        // Note that if the Agreement app didn't have an app fees cashier set at the start, then it must be explicitly set later.\r\n        // Arbitrators must always have at least some sort of subscription module, and having the flexibility to turn this off\r\n        // on the Agreement side can be useful.\r\n        setting.aragonAppFeesCashier = _setAppFeesCashier ? _getArbitratorFeesCashier(_arbitrator) : IAragonAppFeesCashier(0);\r\n        emit SettingChanged(id);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the collateral requirements of an active Disputable app\r\n    * @param _disputable Address of the Disputable app\r\n    * @param _disputableInfo Disputable info instance for the Disputable app\r\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\r\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\r\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\r\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\r\n    */\r\n    function _changeCollateralRequirement(\r\n        DisputableAragonApp _disputable,\r\n        DisputableInfo storage _disputableInfo,\r\n        ERC20 _collateralToken,\r\n        uint64 _challengeDuration,\r\n        uint256 _actionAmount,\r\n        uint256 _challengeAmount\r\n    )\r\n        internal\r\n    {\r\n        require(isContract(address(_collateralToken)), ERROR_TOKEN_NOT_CONTRACT);\r\n\r\n        IStaking staking = stakingFactory.getOrCreateInstance(_collateralToken);\r\n        uint256 id = _disputableInfo.nextCollateralRequirementsId++;\r\n        CollateralRequirement storage collateralRequirement = _disputableInfo.collateralRequirements[id];\r\n        collateralRequirement.token = _collateralToken;\r\n        collateralRequirement.challengeDuration = _challengeDuration;\r\n        collateralRequirement.actionAmount = _actionAmount;\r\n        collateralRequirement.challengeAmount = _challengeAmount;\r\n        collateralRequirement.staking = staking;\r\n\r\n        emit CollateralRequirementChanged(_disputable, id);\r\n    }\r\n\r\n    /**\r\n    * @dev Pay transactions fees required for new actions\r\n    * @param _setting Agreement setting instance, used to get Aragon App Fees Cashier\r\n    * @param _disputable Address of the Disputable app, used to determine fees\r\n    * @param _submitter Address that submitted the action\r\n    * @param _actionId Identification number of the action being paid for\r\n    */\r\n    function _payAppFees(Setting storage _setting, DisputableAragonApp _disputable, address _submitter, uint256 _actionId) internal {\r\n        // Get fees\r\n        IAragonAppFeesCashier aragonAppFeesCashier = _setting.aragonAppFeesCashier;\r\n        if (aragonAppFeesCashier == IAragonAppFeesCashier(0)) {\r\n            return;\r\n        }\r\n\r\n        bytes32 appId = _disputable.appId();\r\n        (ERC20 token, uint256 amount) = aragonAppFeesCashier.getAppFee(appId);\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // Pull the required amount from the fee token's staking pool and approve them to the cashier\r\n        IStaking staking = stakingFactory.getOrCreateInstance(token);\r\n        _lockBalance(staking, _submitter, amount);\r\n        _slashBalance(staking, _submitter, address(this), amount);\r\n        _approveFor(token, address(aragonAppFeesCashier), amount);\r\n\r\n        // Pay fees\r\n        aragonAppFeesCashier.payAppFees(appId, abi.encodePacked(_actionId));\r\n    }\r\n\r\n    /**\r\n    * @dev Close an action\r\n    *      This function does not perform any checks about the action status; callers must have already ensured the action can be closed.\r\n    * @param _actionId Identification number of the action being closed\r\n    * @param _action Action instance being closed\r\n    */\r\n    function _unsafeCloseAction(uint256 _actionId, Action storage _action) internal {\r\n        _action.closed = true;\r\n        emit ActionClosed(_actionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Challenge an action\r\n    * @param _actionId Identification number of the action being challenged\r\n    * @param _action Action instance being challenged\r\n    * @param _challenger Address challenging the action\r\n    * @param _requirement Collateral requirement instance applicable to the challenge\r\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\r\n    * @param _finishedSubmittingEvidence Whether the challenger is finished submitting evidence with the challenge context\r\n    * @param _context Link to a human-readable context for the challenge\r\n    * @return Identification number for the created challenge\r\n    */\r\n    function _createChallenge(\r\n        uint256 _actionId,\r\n        Action storage _action,\r\n        address _challenger,\r\n        CollateralRequirement storage _requirement,\r\n        uint256 _settlementOffer,\r\n        bool _finishedSubmittingEvidence,\r\n        bytes _context\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Store challenge\r\n        uint256 challengeId = nextChallengeId++;\r\n        Challenge storage challenge = challenges[challengeId];\r\n        challenge.actionId = _actionId;\r\n        challenge.challenger = _challenger;\r\n        challenge.endDate = getTimestamp64().add(_requirement.challengeDuration);\r\n        challenge.context = _context;\r\n        challenge.settlementOffer = _settlementOffer;\r\n        challenge.challengerFinishedEvidence = _finishedSubmittingEvidence;\r\n\r\n        // Pull challenge collateral\r\n        _depositFrom(_requirement.token, _challenger, _requirement.challengeAmount);\r\n\r\n        // Pull pre-paid arbitrator fees from challenger\r\n        IArbitrator arbitrator = _getArbitratorFor(_action);\r\n        (, ERC20 feeToken, uint256 feeAmount) = arbitrator.getDisputeFees();\r\n        challenge.challengerArbitratorFees.token = feeToken;\r\n        challenge.challengerArbitratorFees.amount = feeAmount;\r\n        _depositFrom(feeToken, _challenger, feeAmount);\r\n\r\n        return challengeId;\r\n    }\r\n\r\n    /**\r\n    * @dev Dispute an action\r\n    * @param _action Action instance being disputed\r\n    * @param _challenge Currently open challenge instance for the action\r\n    * @return _arbitrator Address of the IArbitrator applicable to the action\r\n    * @return _metadata Metadata content to be used for the dispute\r\n    * @return Identification number of the dispute created on the arbitrator\r\n    */\r\n    function _createDispute(Action storage _action, Challenge storage _challenge, IArbitrator _arbitrator, bytes memory _metadata)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Pull arbitration fees from submitter\r\n        (address disputeFeeRecipient, ERC20 feeToken, uint256 feeAmount) = _arbitrator.getDisputeFees();\r\n        _challenge.submitterArbitratorFees.token = feeToken;\r\n        _challenge.submitterArbitratorFees.amount = feeAmount;\r\n\r\n        address submitter = _action.submitter;\r\n        _depositFrom(feeToken, submitter, feeAmount);\r\n\r\n        // Create dispute. The arbitrator should pull its arbitration fees (if any) from this Agreement on `createDispute()`.\r\n        _approveFor(feeToken, disputeFeeRecipient, feeAmount);\r\n        uint256 disputeId = _arbitrator.createDispute(DISPUTES_POSSIBLE_OUTCOMES, _metadata);\r\n\r\n        return disputeId;\r\n    }\r\n\r\n    /**\r\n    * @dev Submit evidence for a dispute on an arbitrator\r\n    * @param _arbitrator Arbitrator to submit evidence on\r\n    * @param _disputeId Identification number of the dispute on the arbitrator\r\n    * @param _submitter Address submitting the evidence\r\n    * @param _evidence Evidence data to be submitted\r\n    * @param _finished Whether the submitter is now finished submitting evidence\r\n    */\r\n    function _submitEvidence(IArbitrator _arbitrator, uint256 _disputeId, address _submitter, bytes _evidence, bool _finished) internal {\r\n        if (_evidence.length > 0) {\r\n            emit EvidenceSubmitted(_arbitrator, _disputeId, _submitter, _evidence, _finished);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Reject an action (\"accept challenge\")\r\n    * @param _actionId Identification number of the action to be rejected\r\n    * @param _action Action instance to be rejected\r\n    * @param _challengeId Current challenge identification number for the action\r\n    * @param _challenge Current challenge instance for the action\r\n    */\r\n    function _rejectAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\r\n        _challenge.state = ChallengeState.Accepted;\r\n\r\n        address challenger = _challenge.challenger;\r\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\r\n\r\n        // Transfer action collateral, challenge collateral, and challenger arbitrator fees to the challenger\r\n        _slashBalance(requirement.staking, _action.submitter, challenger, requirement.actionAmount);\r\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\r\n        _transferTo(_challenge.challengerArbitratorFees.token, challenger, _challenge.challengerArbitratorFees.amount);\r\n        disputable.onDisputableActionRejected(_action.disputableActionId);\r\n        emit ActionRejected(_actionId, _challengeId);\r\n        _unsafeCloseAction(_actionId, _action);\r\n    }\r\n\r\n    /**\r\n    * @dev Accept an action (\"reject challenge\")\r\n    * @param _actionId Identification number of the action to be accepted\r\n    * @param _action Action instance to be accepted\r\n    * @param _challengeId Current challenge identification number for the action\r\n    * @param _challenge Current challenge instance for the action\r\n    */\r\n    function _acceptAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\r\n        _challenge.state = ChallengeState.Rejected;\r\n\r\n        address submitter = _action.submitter;\r\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\r\n\r\n        // Transfer challenge collateral and challenger arbitrator fees to the submitter\r\n        _transferTo(requirement.token, submitter, requirement.challengeAmount);\r\n        _transferTo(_challenge.challengerArbitratorFees.token, submitter, _challenge.challengerArbitratorFees.amount);\r\n        disputable.onDisputableActionAllowed(_action.disputableActionId);\r\n        emit ActionAccepted(_actionId, _challengeId);\r\n\r\n        // Note that the action still continues after this ruling and will be closed at a future date\r\n    }\r\n\r\n    /**\r\n    * @dev Void an action (\"void challenge\")\r\n    * @param _actionId Identification number of the action to be voided\r\n    * @param _action Action instance to be voided\r\n    * @param _challengeId Current challenge identification number for the action\r\n    * @param _challenge Current challenge instance for the action\r\n    */\r\n    function _voidAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\r\n        _challenge.state = ChallengeState.Voided;\r\n\r\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\r\n        address challenger = _challenge.challenger;\r\n\r\n        // Return challenge collateral to the challenger, and split the challenger arbitrator fees between the challenger and the submitter\r\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\r\n        ERC20 challengerArbitratorFeesToken = _challenge.challengerArbitratorFees.token;\r\n        uint256 challengerArbitratorFeesAmount = _challenge.challengerArbitratorFees.amount;\r\n        uint256 submitterPayBack = challengerArbitratorFeesAmount / 2;\r\n        // No need for Safemath because of previous computation\r\n        uint256 challengerPayBack = challengerArbitratorFeesAmount - submitterPayBack;\r\n        _transferTo(challengerArbitratorFeesToken, _action.submitter, submitterPayBack);\r\n        _transferTo(challengerArbitratorFeesToken, challenger, challengerPayBack);\r\n        disputable.onDisputableActionVoided(_action.disputableActionId);\r\n        emit ActionVoided(_actionId, _challengeId);\r\n\r\n        // Note that the action still continues after this ruling and will be closed at a future date\r\n    }\r\n\r\n    /**\r\n    * @dev Lock some tokens in the staking pool for a user\r\n    * @param _staking Staking pool for the ERC20 token to be locked\r\n    * @param _user Address of the user to lock tokens for\r\n    * @param _amount Amount of collateral tokens to be locked\r\n    */\r\n    function _lockBalance(IStaking _staking, address _user, uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        _staking.lock(_user, address(this), _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Unlock some tokens in the staking pool for a user\r\n    * @param _staking Staking pool for the ERC20 token to be unlocked\r\n    * @param _user Address of the user to unlock tokens for\r\n    * @param _amount Amount of collateral tokens to be unlocked\r\n    */\r\n    function _unlockBalance(IStaking _staking, address _user, uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        _staking.unlock(_user, address(this), _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Slash some tokens in the staking pool from a user to a recipient\r\n    * @param _staking Staking pool for the ERC20 token to be slashed\r\n    * @param _user Address of the user to be slashed\r\n    * @param _recipient Address receiving the slashed tokens\r\n    * @param _amount Amount of collateral tokens to be slashed\r\n    */\r\n    function _slashBalance(IStaking _staking, address _user, address _recipient, uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        _staking.slashAndUnstake(_user, _recipient, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens to an address\r\n    * @param _token ERC20 token to be transferred\r\n    * @param _to Address receiving the tokens\r\n    * @param _amount Amount of tokens to be transferred\r\n    */\r\n    function _transferTo(ERC20 _token, address _to, uint256 _amount) internal {\r\n        if (_amount > 0) {\r\n            require(_token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Deposit tokens from an address to this Agreement\r\n    * @param _token ERC20 token to be transferred\r\n    * @param _from Address transferring the tokens\r\n    * @param _amount Amount of tokens to be transferred\r\n    */\r\n    function _depositFrom(ERC20 _token, address _from, uint256 _amount) internal {\r\n        if (_amount > 0) {\r\n            require(_token.safeTransferFrom(_from, address(this), _amount), ERROR_TOKEN_DEPOSIT_FAILED);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Approve tokens held by this Agreement to another address\r\n    * @param _token ERC20 token used for the arbitration fees\r\n    * @param _to Address to be approved\r\n    * @param _amount Amount of `_arbitrationFeeToken` tokens to be approved\r\n    */\r\n    function _approveFor(ERC20 _token, address _to, uint256 _amount) internal {\r\n        if (_amount > 0) {\r\n            // To be safe, we first set the allowance to zero in case there is a remaining approval for the arbitrator.\r\n            // This is not strictly necessary for ERC20s, but some tokens, e.g. MiniMe (ANT and ANJ),\r\n            // revert on an approval if an outstanding allowance exists\r\n            require(_token.safeApprove(_to, 0), ERROR_TOKEN_APPROVAL_FAILED);\r\n            require(_token.safeApprove(_to, _amount), ERROR_TOKEN_APPROVAL_FAILED);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch an agreement setting instance by identification number\r\n    * @param _settingId Identification number of the agreement setting\r\n    * @return Agreement setting instance associated to the given identification number\r\n    */\r\n    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\r\n        require(_settingId > 0 && _settingId < nextSettingId, ERROR_SETTING_DOES_NOT_EXIST);\r\n        return settings[_settingId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the identification number of the current agreement setting\r\n    * @return Identification number of the current agreement setting\r\n    */\r\n    function _getCurrentSettingId() internal view returns (uint256) {\r\n        // An initial setting is created during initialization, thus after initialization, length will be always greater than 0\r\n        return nextSettingId == 0 ? 0 : nextSettingId - 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the arbitrator to be used for an action\r\n    * @param _action Action instance\r\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\r\n    */\r\n    function _getArbitratorFor(Action storage _action) internal view returns (IArbitrator) {\r\n        Setting storage setting = _getSetting(_action.settingId);\r\n        return setting.arbitrator;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the app fees cashier instance associated to an arbitrator\r\n    * @param _arbitrator Arbitrator querying the app fees cashier for\r\n    * @return Address of the app fees cashier associated to the arbitrator\r\n    */\r\n    function _getArbitratorFeesCashier(IArbitrator _arbitrator) internal view returns (IAragonAppFeesCashier) {\r\n        (address cashier,,) = _arbitrator.getSubscriptionFees(address(this));\r\n        return IAragonAppFeesCashier(cashier);\r\n    }\r\n\r\n    /**\r\n    * @dev Ensure a Disputable app is activate\r\n    * @param _disputableInfo Disputable info of the app\r\n    */\r\n    function _ensureActiveDisputable(DisputableInfo storage _disputableInfo) internal view {\r\n        require(_disputableInfo.activated, ERROR_DISPUTABLE_NOT_ACTIVE);\r\n    }\r\n\r\n    /**\r\n    * @dev Ensure a Disputable app is inactive\r\n    * @param _disputableInfo Disputable info of the app\r\n    */\r\n    function _ensureInactiveDisputable(DisputableInfo storage _disputableInfo) internal view {\r\n        require(!_disputableInfo.activated, ERROR_DISPUTABLE_ALREADY_ACTIVE);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the disputable-related information about an action\r\n    * @param _action Action instance\r\n    * @return disputable Address of the Disputable app associated to the action\r\n    * @return requirement Collateral requirement instance applicable to the action\r\n    */\r\n    function _getDisputableInfoFor(Action storage _action)\r\n        internal\r\n        view\r\n        returns (DisputableAragonApp disputable, CollateralRequirement storage requirement)\r\n    {\r\n        disputable = _action.disputable;\r\n        DisputableInfo storage disputableInfo = disputableInfos[address(disputable)];\r\n        requirement = _getCollateralRequirement(disputableInfo, _action.collateralRequirementId);\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch the collateral requirement instance by identification number for a Disputable app\r\n    * @param _disputableInfo Disputable info instance\r\n    * @param _collateralRequirementId Identification number of the collateral requirement\r\n    * @return Collateral requirement instance associated to the given identification number\r\n    */\r\n    function _getCollateralRequirement(DisputableInfo storage _disputableInfo, uint256 _collateralRequirementId)\r\n        internal\r\n        view\r\n        returns (CollateralRequirement storage)\r\n    {\r\n        bool exists = _collateralRequirementId > 0 && _collateralRequirementId < _disputableInfo.nextCollateralRequirementsId;\r\n        require(exists, ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST);\r\n        return _disputableInfo.collateralRequirements[_collateralRequirementId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to a signer\r\n    * @param _signer Address of signer\r\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\r\n    * @return mustSign Whether the signer needs to sign the current agreement setting before submitting an action\r\n    */\r\n    function _getSigner(address _signer) internal view returns (uint256 lastSettingIdSigned, bool mustSign) {\r\n        lastSettingIdSigned = lastSettingSignedBy[_signer];\r\n        mustSign = lastSettingIdSigned < _getCurrentSettingId();\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch an action instance by identification number\r\n    * @param _actionId Identification number of the action\r\n    * @return Action instance associated to the given identification number\r\n    */\r\n    function _getAction(uint256 _actionId) internal view returns (Action storage) {\r\n        require(_actionId > 0 && _actionId < nextActionId, ERROR_ACTION_DOES_NOT_EXIST);\r\n        return actions[_actionId];\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch a challenge instance by identification number\r\n    * @param _challengeId Identification number of the challenge\r\n    * @return Challenge instance associated to the given identification number\r\n    */\r\n    function _getChallenge(uint256 _challengeId) internal view returns (Challenge storage) {\r\n        require(_existChallenge(_challengeId), ERROR_CHALLENGE_DOES_NOT_EXIST);\r\n        return challenges[_challengeId];\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch an action instance along with its most recent challenge by identification number\r\n    * @param _actionId Identification number of the action\r\n    * @return action Action instance associated to the given identification number\r\n    * @return challenge Most recent challenge instance associated to the action\r\n    * @return challengeId Identification number of the most recent challenge associated to the action\r\n    */\r\n    function _getChallengedAction(uint256 _actionId)\r\n        internal\r\n        view\r\n        returns (Action storage action, Challenge storage challenge, uint256 challengeId)\r\n    {\r\n        action = _getAction(_actionId);\r\n        challengeId = action.lastChallengeId;\r\n        challenge = _getChallenge(challengeId);\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch a dispute's associated action and challenge instance\r\n    * @param _disputeId Identification number of the dispute on the arbitrator\r\n    * @return actionId Identification number of the action associated to the dispute\r\n    * @return action Action instance associated to the dispute\r\n    * @return challengeId Identification number of the challenge associated to the dispute\r\n    * @return challenge Current challenge instance associated to the dispute\r\n    */\r\n    function _getDisputedAction(uint256 _disputeId)\r\n        internal\r\n        view\r\n        returns (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge)\r\n    {\r\n        challengeId = challengeByDispute[_disputeId];\r\n        challenge = _getChallenge(challengeId);\r\n        actionId = challenge.actionId;\r\n        action = _getAction(actionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge exists\r\n    * @param _challengeId Identification number of the challenge\r\n    * @return True if the requested challenge exists, false otherwise\r\n    */\r\n    function _existChallenge(uint256 _challengeId) internal view returns (bool) {\r\n        return _challengeId > 0 && _challengeId < nextChallengeId;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be manually closed\r\n    * @param _action Action instance\r\n    * @return True if the action can be closed, false otherwise\r\n    */\r\n    function _canClose(Action storage _action) internal view returns (bool) {\r\n        if (!_canProceed(_action)) {\r\n            return false;\r\n        }\r\n\r\n        DisputableAragonApp disputable = _action.disputable;\r\n        // Assume that the Disputable app does not need to be checked if it's the one asking us to close an action\r\n        return DisputableAragonApp(msg.sender) == disputable || disputable.canClose(_action.disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can be challenged\r\n    * @param _action Action instance\r\n    * @return True if the action can be challenged, false otherwise\r\n    */\r\n    function _canChallenge(Action storage _action) internal view returns (bool) {\r\n        return _canProceed(_action) && _action.disputable.canChallenge(_action.disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an action can proceed to another state.\r\n    * @dev An action can proceed if it is:\r\n    *       - Not closed\r\n    *       - Not currently challenged or disputed, and\r\n    *       - Not already settled or had a dispute rule in favour of the challenger (the action will have been closed automatically)\r\n    * @param _action Action instance\r\n    * @return True if the action can proceed, false otherwise\r\n    */\r\n    function _canProceed(Action storage _action) internal view returns (bool) {\r\n        // If the action was already closed, return false\r\n        if (_action.closed) {\r\n            return false;\r\n        }\r\n\r\n        uint256 challengeId = _action.lastChallengeId;\r\n\r\n        // If the action has not been challenged yet, return true\r\n        if (!_existChallenge(challengeId)) {\r\n            return true;\r\n        }\r\n\r\n        // If the action was previously challenged but ruled in favour of the submitter or voided, return true\r\n        Challenge storage challenge = challenges[challengeId];\r\n        ChallengeState state = challenge.state;\r\n        return state == ChallengeState.Rejected || state == ChallengeState.Voided;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge can be settled\r\n    * @param _challenge Challenge instance\r\n    * @return True if the challenge can be settled, false otherwise\r\n    */\r\n    function _canSettle(Challenge storage _challenge) internal view returns (bool) {\r\n        return _isWaitingChallengeAnswer(_challenge);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge settlement can be claimed\r\n    * @param _challenge Challenge instance\r\n    * @return True if the challenge settlement can be claimed, false otherwise\r\n    */\r\n    function _canClaimSettlement(Challenge storage _challenge) internal view returns (bool) {\r\n        return _isWaitingChallengeAnswer(_challenge) && getTimestamp() >= uint256(_challenge.endDate);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge can be disputed\r\n    * @param _challenge Challenge instance\r\n    * @return True if the challenge can be disputed, false otherwise\r\n    */\r\n    function _canDispute(Challenge storage _challenge) internal view returns (bool) {\r\n        return _isWaitingChallengeAnswer(_challenge) && uint256(_challenge.endDate) > getTimestamp();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge is waiting to be answered\r\n    * @param _challenge Challenge instance\r\n    * @return True if the challenge is waiting to be answered, false otherwise\r\n    */\r\n    function _isWaitingChallengeAnswer(Challenge storage _challenge) internal view returns (bool) {\r\n        return _challenge.state == ChallengeState.Waiting;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether a challenge is disputed\r\n    * @param _challenge Challenge instance\r\n    * @return True if the challenge is disputed, false otherwise\r\n    */\r\n    function _isDisputed(Challenge storage _challenge) internal view returns (bool) {\r\n        return _challenge.state == ChallengeState.Disputed;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether an address has permission to challenge actions on a specific Disputable app\r\n    * @param _disputable Address of the Disputable app\r\n    * @param _challenger Address of the challenger\r\n    * @return True if the challenger can challenge actions on the Disputable app, false otherwise\r\n    */\r\n    function _canPerformChallenge(DisputableAragonApp _disputable, address _challenger) internal view returns (bool) {\r\n        IKernel currentKernel = kernel();\r\n        if (currentKernel == IKernel(0)) {\r\n            return false;\r\n        }\r\n\r\n        // To make sure the challenger address is reachable by ACL oracles, we need to pass it as the first argument.\r\n        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\r\n        bytes memory params = ConversionHelpers.dangerouslyCastUintArrayToBytes(arr(_challenger));\r\n        return currentKernel.hasPermission(_challenger, address(_disputable), CHALLENGE_ROLE, params);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"canPerformChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_challengeDuration\",\"type\":\"uint64\"},{\"name\":\"_actionAmount\",\"type\":\"uint256\"},{\"name\":\"_challengeAmount\",\"type\":\"uint256\"}],\"name\":\"changeCollateralRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"lastSettingIdSigned\",\"type\":\"uint256\"},{\"name\":\"mustSign\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallenge\",\"outputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"endDate\",\"type\":\"uint64\"},{\"name\":\"context\",\"type\":\"bytes\"},{\"name\":\"settlementOffer\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"submitterFinishedEvidence\",\"type\":\"bool\"},{\"name\":\"challengerFinishedEvidence\",\"type\":\"bool\"},{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"ruling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"},{\"name\":\"_collateralRequirementId\",\"type\":\"uint256\"}],\"name\":\"getCollateralRequirement\",\"outputs\":[{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"challengeDuration\",\"type\":\"uint64\"},{\"name\":\"actionAmount\",\"type\":\"uint256\"},{\"name\":\"challengeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_DISPUTABLE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_setAppFeesCashier\",\"type\":\"bool\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"bytes\"},{\"name\":\"_stakingFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_submitterFinishedEvidence\",\"type\":\"bool\"}],\"name\":\"disputeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_settlementOffer\",\"type\":\"uint256\"},{\"name\":\"_finishedEvidence\",\"type\":\"bool\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"challengeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableAddress\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_challengeDuration\",\"type\":\"uint64\"},{\"name\":\"_actionAmount\",\"type\":\"uint256\"},{\"name\":\"_challengeAmount\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"closeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canRuleDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"settleAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableAddress\",\"type\":\"address\"}],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSetting\",\"outputs\":[{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"aragonAppFeesCashier\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_setAppFeesCashier\",\"type\":\"bool\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"changeSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHALLENGE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSettingId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"getAction\",\"outputs\":[{\"name\":\"disputable\",\"type\":\"address\"},{\"name\":\"disputableActionId\",\"type\":\"uint256\"},{\"name\":\"collateralRequirementId\",\"type\":\"uint256\"},{\"name\":\"settingId\",\"type\":\"uint256\"},{\"name\":\"submitter\",\"type\":\"address\"},{\"name\":\"closed\",\"type\":\"bool\"},{\"name\":\"context\",\"type\":\"bytes\"},{\"name\":\"lastChallengeId\",\"type\":\"uint256\"},{\"name\":\"lastChallengeActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"}],\"name\":\"getDisputableInfo\",\"outputs\":[{\"name\":\"activated\",\"type\":\"bool\"},{\"name\":\"currentCollateralRequirementId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"syncAppFeesCashier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_AGREEMENT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canClaimSettlement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canSettle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"},{\"name\":\"_context\",\"type\":\"bytes\"},{\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"newAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeArbitratorFees\",\"outputs\":[{\"name\":\"submitterArbitratorFeesToken\",\"type\":\"address\"},{\"name\":\"submitterArbitratorFeesAmount\",\"type\":\"uint256\"},{\"name\":\"challengerArbitratorFeesToken\",\"type\":\"address\"},{\"name\":\"challengerArbitratorFeesAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAppFeesCashier\",\"type\":\"address\"}],\"name\":\"AppFeesCashierSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"DisputableAppActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"DisputableAppDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateralRequirementId\",\"type\":\"uint256\"}],\"name\":\"CollateralRequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"ActionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"ActionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionVoided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ruling\",\"type\":\"uint256\"}],\"name\":\"Ruled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"evidence\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"EvidenceSubmitted\",\"type\":\"event\"}]","ContractName":"Agreement","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://542e148b2a1e5c917b6d3c1fd390a9649748b649de2f04b22c4566428de27427"}]}