{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n//Interface for the ERC20 standard\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n        return c;\\n    }\\n}\"},\"TimeVault.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract TokenVault {\\n    using SafeMath for uint256;\\n\\n    address private deployer;\\n\\n    address private _beneficiary;\\n\\n    uint256 private _finalUnlockTime;\\n    \\n    uint256 public lockedTokens = 0;\\n    \\n    struct Milestone {\\n        address tokenAddress;\\n        uint256 unlockableTokens;\\n        uint256 unlockTime;\\n        bool released;\\n    }\\n    uint256 public milestoneCount = 0;\\n    mapping (uint256 =\\u003e Milestone) milestones;\\n    \\n    modifier onlyOwner() {\\n        require(deployer == msg.sender, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor (uint256 unlockTime) public {\\n        require(unlockTime \\u003e block.timestamp, \\\"Release time cannot be before current time\\\");\\n        deployer = msg.sender;\\n        _beneficiary = msg.sender; // Deployer is beneficiary by default\\n        _finalUnlockTime = unlockTime;\\n    }\\n\\n    function tokenBalance(address _tokenAddress) public view returns (uint256) {\\n        IERC20 _token = IERC20(_tokenAddress);\\n        return _token.balanceOf(address(this));\\n    }\\n\\n\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    function finalUnlockTime() public view returns (uint256) {\\n        return _finalUnlockTime;\\n    }\\n    \\n    \\n    function unlockable(uint256 _milestoneID) public view returns (bool) {\\n        require(_milestoneID \\u003e 0, \\\"Invalid ID\\\");\\n        require(_milestoneID \\u003c= milestoneCount, \\\"Milestone doesn\\u0027t exist\\\");\\n        if(block.timestamp \\u003e= milestones[_milestoneID].unlockTime)\\n            return true;\\n        return false;\\n    }\\n\\n    function createMilestone(address _tokenAddress, uint256 amount, uint256 unlockTime)  public onlyOwner returns (uint milestoneID) {\\n        require(unlockTime \\u003c= _finalUnlockTime, \\\"Milestone can\\u0027t be after final unlock\\\");\\n        require(unlockTime \\u003e= block.timestamp, \\\"Milestone cannot be in the past\\\");\\n        IERC20 _token = IERC20(_tokenAddress);\\n        uint256 availableTokens = _token.balanceOf(address(this)).sub(lockedTokens);\\n        require(availableTokens \\u003e= amount, \\\"Not enough tokens for Milestone\\\");\\n        milestoneID = ++milestoneCount;\\n        lockedTokens = lockedTokens.add(amount);\\n        milestones[milestoneID] = Milestone(_tokenAddress, amount, unlockTime, false);\\n    }\\n\\n    function extendMilestone(uint256 milestoneID, uint256 extension) public onlyOwner {\\n        require(milestoneID \\u003c= milestoneCount, \\\"Milestone doesn\\u0027t exist\\\");\\n        require(milestoneID \\u003e 0, \\\"Invalid ID\\\");\\n        require(extension \\u003e 0, \\\"Extension period must be positive\\\");\\n        Milestone storage _milestone = milestones[milestoneID];\\n        require(_milestone.released == false, \\\"Milestone is already released\\\");\\n        uint256 newTime = _milestone.unlockTime.add(extension);\\n        require(newTime \\u003c= _finalUnlockTime, \\\"Milestones must end before final unlock\\\");\\n        _milestone.unlockTime = newTime;\\n        \\n    }\\n\\n\\n    function releaseMilestone(uint256 milestoneID) public {\\n        require(milestoneID \\u003c= milestoneCount, \\\"Milestone doesn\\u0027t exist\\\");\\n        require(milestoneID \\u003e 0, \\\"Invalid ID\\\");\\n        Milestone storage _milestone = milestones[milestoneID];\\n        require(block.timestamp \\u003e= _milestone.unlockTime, \\\"Milestone not unlocked\\\");\\n        require(_milestone.released == false, \\\"Milestone already released\\\");\\n        IERC20 _token = IERC20(_milestone.tokenAddress);\\n        uint256 amount = _milestone.unlockableTokens;\\n        milestones[milestoneID].released = true;\\n        lockedTokens = lockedTokens.sub(amount);\\n        _token.transfer(_beneficiary, amount);\\n    }\\n\\n    function milestoneTokenCount(uint256 milestoneID) public view returns (uint256) {\\n        require(milestoneID \\u003c= milestoneCount, \\\"Milestone doesn\\u0027t exist\\\");\\n        require(milestoneID \\u003e 0, \\\"Invalid ID\\\");\\n        return milestones[milestoneID].unlockableTokens;\\n    }\\n    \\n    function milestoneUnlockTime(uint256 milestoneID) public view returns (uint256) {\\n        require(milestoneID \\u003c= milestoneCount, \\\"Milestone doesn\\u0027t exist\\\");\\n        require(milestoneID \\u003e 0, \\\"Invalid ID\\\");\\n        return milestones[milestoneID].unlockTime;\\n    }\\n    \\n    function changeBeneficiary(address account) public onlyOwner {\\n        require(account!= address(0));\\n        _beneficiary = account;\\n    }\\n    \\n    function changeOwnership(address account) public onlyOwner {\\n        require(account!= address(0));\\n        deployer = account;\\n    }\\n    \\n    function extendLockup(uint256 extension) public onlyOwner {\\n        require(extension \\u003e 0, \\\"Extension period must be positive\\\");\\n        _finalUnlockTime = _finalUnlockTime.add(extension);\\n    }\\n    \\n    function changeFinalUnlockTime(uint256 newTime) public onlyOwner {\\n        require(newTime \\u003e _finalUnlockTime, \\\"Lock period cannot be reduced\\\");\\n        _finalUnlockTime = newTime;\\n    }\\n\\n    function remainderTokens(address _tokenAddress) public view returns (uint256) {\\n        IERC20 _token = IERC20(_tokenAddress);\\n        uint256 totalBalance = _token.balanceOf(address(this));\\n        return totalBalance.sub(lockedTokens);\\n    }\\n    \\n    function releaseRemaining(address _tokenAddress) public {\\n        require(block.timestamp \\u003e= _finalUnlockTime, \\\"Tokens not unlocked yet\\\");\\n        IERC20 _token = IERC20(_tokenAddress);\\n        uint256 amount = _token.balanceOf(address(this));\\n        require(amount \\u003e 0, \\\"No tokens to release\\\");\\n        _token.transfer(_beneficiary, amount);\\n        \\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changeFinalUnlockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"createMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"milestoneID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"extendLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"milestoneID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"extendMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milestoneCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"milestoneID\",\"type\":\"uint256\"}],\"name\":\"milestoneTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"milestoneID\",\"type\":\"uint256\"}],\"name\":\"milestoneUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"milestoneID\",\"type\":\"uint256\"}],\"name\":\"releaseMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"releaseRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"remainderTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_milestoneID\",\"type\":\"uint256\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenVault","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005fcc9215","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fca950ef2f4d4c5f2817ea0653978e434b734b22af1b7ae1c6117b708b030e32"}]}