{"status":"1","message":"OK","result":[{"SourceCode":"{\"ISmartRightsCertify.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\r\\n\\r\\ninterface ISmartRightsCertify {\\r\\n    function certifyHash(address _owner, bytes32 _hash) external;\\r\\n    function certifyHash(bytes32 _hash) external;\\r\\n    function getHashOwner(bytes32 _hash) external view returns(address);\\r\\n    function addToWhitelist(address user) external;\\r\\n}\"},\"SmartRightsCertify.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./ISmartRightsCertify.sol\\\";\\r\\n\\r\\ncontract SmartRightsCertify is ISmartRightsCertify {\\r\\n\\r\\n    address owner;\\r\\n    mapping(bytes32 =\\u003e address) userCertifications;\\r\\n    mapping(address =\\u003e bool) whitelist;\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelist() {\\r\\n        require(whitelist[msg.sender] == true, \\\"NotInWhitelist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"OnlyOwner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function certifyHash(address _owner, bytes32 _hash) external onlyOwner {\\r\\n        require(userCertifications[_hash] == address(0), \\\"DuplicateData\\\");\\r\\n        userCertifications[_hash] = _owner;\\r\\n    }\\r\\n\\r\\n    function certifyHash(bytes32 _hash) external onlyWhitelist {\\r\\n        require(userCertifications[_hash] == address(0), \\\"DuplicateData\\\");\\r\\n        userCertifications[_hash] = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getHashOwner(bytes32 _hash) external view returns(address) {\\r\\n        return userCertifications[_hash];\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address user) external onlyOwner {\\r\\n        whitelist[user] = true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"certifyHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"certifyHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getHashOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartRightsCertify","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5fc2193736456d76709d5272e87b30ddf9392ee2084dba3303ff2e82eb50a92a"}]}