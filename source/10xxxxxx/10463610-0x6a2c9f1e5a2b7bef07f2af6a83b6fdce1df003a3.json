{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract etherATM {\r\n    struct Person {\r\n        address payable etherAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    Person[] public persons;\r\n\r\n    uint256 public payoutIdx = 0;\r\n    uint256 public collectedFees;\r\n    uint256 public balance = 0;\r\n\r\n    address payable owner;\r\n\r\n    modifier onlyowner {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;\r\n    }\r\n\r\n    function enter() public payable {\r\n        if (msg.value < 0.8 ether) {\r\n            msg.sender.transfer(msg.value);\r\n            return;\r\n        }\r\n        uint256 amount;\r\n        if (msg.value > 40 ether) {\r\n            msg.sender.transfer(msg.value - 40 ether);\r\n            amount = 40 ether;\r\n        } else {\r\n            amount = msg.value;\r\n        }\r\n\r\n        uint256 idx = persons.length;\r\n        persons.length += 1;\r\n        persons[idx].etherAddress = msg.sender;\r\n        persons[idx].amount = amount;\r\n\r\n        if (idx != 0) {\r\n            collectedFees += 0;\r\n            owner.transfer(collectedFees);\r\n            collectedFees = 0;\r\n            balance += amount;\r\n        } else {\r\n            balance += amount;\r\n        }\r\n\r\n        while (balance > (persons[payoutIdx].amount / 100) * 180) {\r\n            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;\r\n            persons[payoutIdx].etherAddress.transfer(transactionAmount);\r\n            balance -= transactionAmount;\r\n            payoutIdx += 1;\r\n        }\r\n    }\r\n\r\n    function() external {\r\n        enter();\r\n    }\r\n\r\n    function setOwner(address payable _owner) internal onlyowner {\r\n        owner = _owner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"etherATM","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f655cfe0faf269591b1238fbb1d9b7942cb4b4ae80deb4d0fb07b7f1c1c5e208"}]}