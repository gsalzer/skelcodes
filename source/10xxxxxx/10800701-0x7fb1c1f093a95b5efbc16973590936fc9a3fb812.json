{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract Governance {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /// @notice The duration of voting on a proposal, in Ethereum blocks\r\n  uint public votingPeriod;\r\n\r\n  /// @notice The total number of proposals\r\n  uint public proposalCount;\r\n\r\n  /// @notice Number of blocks before the same account can submit another proposal\r\n  uint public proposalCooldown;\r\n\r\n  /// @notice The required minimum number of votes in support of a proposal for it to succeed\r\n  uint public quorumVotes;\r\n\r\n  /// @notice The minimum number of votes required for an account to create a proposal\r\n  uint public proposalThreshold;\r\n\r\n  ERC20 public token;\r\n  address public owner;\r\n\r\n  /// @notice The record of all proposals ever proposed\r\n  mapping (uint256 => Proposal) public proposals;\r\n\r\n  /// @notice The block until which tokens used for voting will be locked\r\n  mapping (address => uint) public voteLock;\r\n\r\n  /// @notice Delay before the same address can submit another proposal, in Ethereum blocks\r\n  mapping (address => uint) public proposalLock;\r\n\r\n  /// @notice Keeps track of locked tokens per address\r\n  mapping(address => uint) public balanceOf;\r\n\r\n  struct Proposal {\r\n    /// @notice Unique id for looking up a proposal\r\n    uint id;\r\n\r\n    /// @notice Creator of the proposal\r\n    address proposer;\r\n\r\n    /// @notice The block at which voting starts\r\n    uint startBlock;\r\n\r\n    /// @notice Current number of votes in favor of this proposal\r\n    uint forVotes;\r\n\r\n    /// @notice Current number of votes in opposition to this proposal\r\n    uint againstVotes;\r\n\r\n    /// @notice Receipts of ballots for the entire set of voters\r\n    mapping (address => Receipt) receipts;\r\n  }\r\n\r\n  /// @notice Ballot receipt record for a voter\r\n  struct Receipt {\r\n    /// @notice Whether or not a vote has been cast\r\n    bool hasVoted;\r\n\r\n    /// @notice Whether or not the voter supports the proposal\r\n    bool support;\r\n\r\n    /// @notice The number of votes the voter had, which were cast\r\n    uint votes;\r\n  }\r\n\r\n  /// @notice Possible states that a proposal may be in\r\n  enum ProposalState {\r\n    Active,\r\n    Defeated,\r\n    Succeeded\r\n  }\r\n\r\n  /// @notice If the votingPeriod is changed and the user votes again, the lock period will be reset.\r\n  modifier lockVotes() {\r\n    uint tokenBalance = token.balanceOf(msg.sender);\r\n    token.transferFrom(msg.sender, address(this), tokenBalance);\r\n    _mint(msg.sender, tokenBalance);\r\n    voteLock[msg.sender] = block.number.add(votingPeriod);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    token = ERC20(0x5eCA15B12d959dfcf9c71c59F8B467Eb8c6efD0b);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function state(uint proposalId)\r\n    public\r\n    view\r\n    returns (ProposalState)\r\n  {\r\n    require(proposalCount >= proposalId && proposalId > 0, \"Governance::state: invalid proposal id\");\r\n    Proposal storage proposal = proposals[proposalId];\r\n\r\n    if (block.number <= proposal.startBlock.add(votingPeriod)) {\r\n      return ProposalState.Active;\r\n\r\n    } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\r\n      return ProposalState.Defeated;\r\n\r\n    } else {\r\n      return ProposalState.Succeeded;\r\n    }\r\n  }\r\n\r\n  function getVote(uint _proposalId, address _voter)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return proposals[_proposalId].receipts[_voter].support;\r\n  }\r\n\r\n\r\n  function updateParams(\r\n    uint _votingPeriod,\r\n    uint _quorumVotes,\r\n    uint _proposalThreshold,\r\n    uint _proposalCooldown\r\n  )\r\n    public\r\n  {\r\n    require(msg.sender == owner, \"Governance::state: not owner\");\r\n    require(_votingPeriod >= 1 && _votingPeriod <= 40000, \"Governance::state: _votingPeriod out of range\");\r\n    require(_quorumVotes >= 1 && _quorumVotes <= 50000e18, \"Governance::state: _quorumVotes out of range\");\r\n    require(_proposalThreshold >= 1 && _proposalThreshold <= 10000e18, \"Governance::state: _proposalThreshold out of range\");\r\n    require(_proposalCooldown >= 1 && _proposalCooldown <= 40000, \"Governance::state: _proposalCooldown out of range\");\r\n\r\n    votingPeriod = _votingPeriod;\r\n    quorumVotes = _quorumVotes;\r\n    proposalThreshold = _proposalThreshold;\r\n    proposalCooldown = _proposalCooldown;\r\n  }\r\n\r\n  function propose()\r\n    public\r\n    lockVotes\r\n    returns (uint)\r\n  {\r\n\r\n    require(balanceOf[msg.sender] > proposalThreshold, \"Governance::propose: proposer votes below proposal threshold\");\r\n    require(block.number > proposalLock[msg.sender], \"Governance::propose: wait until proposalLock expiration\");\r\n\r\n    proposalLock[msg.sender] = block.number.add(proposalCooldown);\r\n\r\n    proposalCount++;\r\n    Proposal memory newProposal = Proposal({\r\n      id: proposalCount,\r\n      proposer: msg.sender,\r\n      startBlock: block.number,\r\n      forVotes: 0,\r\n      againstVotes: 0\r\n    });\r\n\r\n    proposals[newProposal.id] = newProposal;\r\n  }\r\n\r\n  function vote(uint _proposalId, bool _support) public lockVotes {\r\n\r\n    require(state(_proposalId) == ProposalState.Active, \"Governance::vote: voting is closed\");\r\n    Proposal storage proposal = proposals[_proposalId];\r\n    Receipt storage receipt = proposal.receipts[msg.sender];\r\n    require(receipt.hasVoted == false, \"Governance::vote: voter already voted\");\r\n\r\n    uint votes = balanceOf[msg.sender];\r\n\r\n    if (_support) {\r\n      proposal.forVotes = proposal.forVotes.add(votes);\r\n    } else {\r\n      proposal.againstVotes = proposal.againstVotes.add(votes);\r\n    }\r\n\r\n    receipt.hasVoted = true;\r\n    receipt.support = _support;\r\n    receipt.votes = votes;\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(block.number > voteLock[msg.sender], \"Governance::withdraw: wait until voteLock expiration\");\r\n    require(block.number > proposalLock[msg.sender], \"Governance::propose: wait until proposalLock expiration\");\r\n    token.transfer(msg.sender, balanceOf[msg.sender]);\r\n    _burn(msg.sender, balanceOf[msg.sender]);\r\n  }\r\n\r\n  function _mint(address _account, uint _amount) internal {\r\n    balanceOf[_account] = balanceOf[_account].add(_amount);\r\n  }\r\n\r\n  function _burn(address _account, uint _amount) internal {\r\n    balanceOf[_account] = balanceOf[_account].sub(_amount, \"ERC20: burn amount exceeds balance\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governance.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalCooldown\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9581694e987472263afb73ff061727fa1b8a2955a3414bcde3bd5cd4075ceed2"}]}