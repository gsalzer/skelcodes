{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract SimpleOracleAccruedRatioUSD {\r\n    using SafeMath for uint256;\r\n    address public admin;\r\n    address public superAdmin;\r\n    uint256 public accruedRatioUSD;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public MAXIMUM_CHANGE_PCT = 3;\r\n\r\n    constructor(uint256 _accruedRatioUSD, address _admin, address _superAdmin) public {\r\n        admin = _admin;\r\n        superAdmin = _superAdmin;\r\n        accruedRatioUSD = _accruedRatioUSD;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin || msg.sender == superAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperAdmin {\r\n        require(msg.sender == superAdmin);\r\n        _;\r\n    }\r\n\r\n    function isValidRatio(uint256 _accruedRatioUSD) view internal {\r\n      require(_accruedRatioUSD >= accruedRatioUSD, \"ratio should be monotonically increased\");\r\n      uint256 maximumChange = accruedRatioUSD.mul(MAXIMUM_CHANGE_PCT).div(100);\r\n      require(_accruedRatioUSD.sub(accruedRatioUSD) < maximumChange, \"exceeds maximum chagne\");\r\n    }\r\n\r\n    function checkTimeStamp() view internal {\r\n      // 82800 = 23 * 60 * 60  (23 hours)\r\n      require(block.timestamp.sub(lastUpdateTime) > 82800, \"oracle are not allowed to update two times within 23 hours\");\r\n    }\r\n\r\n    function set(uint256 _accruedRatioUSD) onlyAdmin public{\r\n        if(msg.sender != superAdmin) {\r\n          isValidRatio(_accruedRatioUSD);\r\n          checkTimeStamp();\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        accruedRatioUSD = _accruedRatioUSD;\r\n    }\r\n\r\n    function query() external view returns(uint256)  {\r\n        // QueryEvent(msg.sender, block.number);\r\n        return accruedRatioUSD;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"query\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_CHANGE_PCT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accruedRatioUSD\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accruedRatioUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_accruedRatioUSD\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_superAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SimpleOracleAccruedRatioUSD","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000027100000000000000000000000004c28e648bf5a27baa5e46a7d5fcd94e751efaa5c000000000000000000000000faab18686c048b7eae719bab7f1fe9e42c0aba33","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://95d7fd63939b5b05b7b1e1c035b71f89c274f8673b8860930165ee7644411bb6"}]}