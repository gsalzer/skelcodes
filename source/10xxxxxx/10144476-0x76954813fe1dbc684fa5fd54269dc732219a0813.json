{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0; interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} abstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n} contract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        uint gst2Amount = _amount;\r\n\r\n        if (_amount == 0) {\r\n            gst2Amount = (gasleft() + 14154) / (2 * 24000 - 6870);\r\n            gst2Amount = gst2Amount - (gst2Amount / 8); // 12.5% less because of gaslimit != gas_used\r\n        }\r\n\r\n        if (gasToken.balanceOf(address(this)) >= gst2Amount) {\r\n            gasToken.free(gst2Amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n} abstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    function mint() external virtual payable;\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n} abstract contract CEtherInterface {\r\n    function mint() external virtual payable;\r\n    function repayBorrow() external virtual payable;\r\n} abstract contract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n} /// @title Basic compound interactions through the DSProxy\r\ncontract CompoundBasicProxy is GasBurner {\r\n\r\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant COMPTROLLER_ADDR = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    /// @notice User deposits tokens to the Compound protocol\r\n    /// @dev User needs to approve the DSProxy to pull the _tokenAddr tokens\r\n    /// @param _tokenAddr The address of the token to be deposited\r\n    /// @param _cTokenAddr CTokens to be deposited\r\n    /// @param _amount Amount of tokens to be deposited\r\n    /// @param _inMarket True if the tokend is already in market for that address\r\n    function deposit(address _tokenAddr, address _cTokenAddr, uint _amount, bool _inMarket) public burnGas(0) payable {\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).transferFrom(msg.sender, address(this), _amount);\r\n        }\r\n\r\n        approveToken(_tokenAddr, _cTokenAddr);\r\n\r\n        if (!_inMarket) {\r\n            enterMarket(_cTokenAddr);\r\n        }\r\n\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            require(CTokenInterface(_cTokenAddr).mint(_amount) == 0);\r\n        } else {\r\n            CEtherInterface(_cTokenAddr).mint{value: msg.value}(); // reverts on fail\r\n        }\r\n    }\r\n\r\n    /// @notice User withdraws tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be withdrawn\r\n    /// @param _cTokenAddr CTokens to be withdrawn\r\n    /// @param _amount Amount of tokens to be withdrawn\r\n    /// @param _isCAmount If true _amount is cTokens if falls _amount is underlying tokens\r\n    function withdraw(address _tokenAddr, address _cTokenAddr, uint _amount, bool _isCAmount) public burnGas(0) {\r\n\r\n        if (_isCAmount) {\r\n            require(CTokenInterface(_cTokenAddr).redeem(_amount) == 0);\r\n        } else {\r\n            require(CTokenInterface(_cTokenAddr).redeemUnderlying(_amount) == 0);\r\n        }\r\n\r\n        // withdraw funds to msg.sender\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice User borrows tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be borrowed\r\n    /// @param _cTokenAddr CTokens to be borrowed\r\n    /// @param _amount Amount of tokens to be borrowed\r\n    /// @param _inMarket True if the tokend is already in market for that address\r\n    function borrow(address _tokenAddr, address _cTokenAddr, uint _amount, bool _inMarket) public burnGas(0) {\r\n        if (!_inMarket) {\r\n            enterMarket(_cTokenAddr);\r\n        }\r\n\r\n        require(CTokenInterface(_cTokenAddr).borrow(_amount) == 0);\r\n\r\n        // withdraw funds to msg.sender\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @dev User needs to approve the DSProxy to pull the _tokenAddr tokens\r\n    /// @notice User paybacks tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be paybacked\r\n    /// @param _cTokenAddr CTokens to be paybacked\r\n    /// @param _amount Amount of tokens to be payedback\r\n    /// @param _wholeDebt If true the _amount will be set to the whole amount of the debt\r\n    function payback(address _tokenAddr, address _cTokenAddr, uint _amount, bool _wholeDebt) public burnGas(0) payable {\r\n        approveToken(_tokenAddr, _cTokenAddr);\r\n\r\n        if (_wholeDebt) {\r\n            _amount = CTokenInterface(_cTokenAddr).borrowBalanceCurrent(address(this));\r\n        }\r\n\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).transferFrom(msg.sender, address(this), _amount);\r\n\r\n            require(CTokenInterface(_cTokenAddr).repayBorrow(_amount) == 0);\r\n        } else {\r\n            CEtherInterface(_cTokenAddr).repayBorrow{value: msg.value}();\r\n            msg.sender.transfer(address(this).balance); // send back the extra eth\r\n        }\r\n    }\r\n\r\n    /// @notice Helper method to withdraw tokens from the DSProxy\r\n    /// @param _tokenAddr Address of the token to be withdrawn\r\n    function withdrawTokens(address _tokenAddr) public {\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Enters the Compound market so it can be deposited/borrowed\r\n    /// @param _cTokenAddr CToken address of the token\r\n    function enterMarket(address _cTokenAddr) public {\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = _cTokenAddr;\r\n\r\n        ComptrollerInterface(COMPTROLLER_ADDR).enterMarkets(markets);\r\n    }\r\n\r\n    /// @notice Exits the Compound market so it can't be deposited/borrowed\r\n    /// @param _cTokenAddr CToken address of the token\r\n    function exitMarket(address _cTokenAddr) public {\r\n        ComptrollerInterface(COMPTROLLER_ADDR).exitMarket(_cTokenAddr);\r\n    }\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _cTokenAddr Address which will gain the approval\r\n    function approveToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).approve(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"COMPTROLLER_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_inMarket\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_inMarket\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"}],\"name\":\"enterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract GasTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wholeDebt\",\"type\":\"bool\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCAmount\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundBasicProxy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5560658b9bd8ed927f35b2de8cd506841b2eff68ebc6b0033321767945bd3420"}]}