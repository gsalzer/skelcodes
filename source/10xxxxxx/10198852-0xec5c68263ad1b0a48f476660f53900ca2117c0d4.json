{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// File: localhost/interfaces/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nabstract contract DSGuard {\r\n    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\r\n\r\n    function permit(address src, address dst, bytes32 sig) public virtual;\r\n\r\n    function forbid(address src, address dst, bytes32 sig) public virtual;\r\n}\r\n\r\n\r\nabstract contract DSGuardFactory {\r\n    function newGuard() public virtual returns (DSGuard guard);\r\n}\r\n\r\n// File: localhost/auth/ProxyPermission.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract ProxyPermission {\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n\r\n    /// @notice Called in the context of DSProxy to authorize an address\r\n    /// @param _contractAddr Address which will be authorized\r\n    function givePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        DSGuard guard = DSGuard(currAuthority);\r\n\r\n        if (currAuthority == address(0)) {\r\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\r\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\r\n        }\r\n\r\n        guard.permit(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n\r\n    /// @notice Called in the context of DSProxy to remove authority of an address\r\n    /// @param _contractAddr Auth address which will be removed from authority list\r\n    function removePermission(address _contractAddr) public {\r\n        address currAuthority = address(DSAuth(address(this)).authority());\r\n        \r\n        // if there is no authority, that means that contract doesn't have permission\r\n        if (currAuthority == address(0)) {\r\n            return;\r\n        }\r\n\r\n        DSGuard guard = DSGuard(currAuthority);\r\n        guard.forbid(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n}\r\n\r\n// File: localhost/flashloan/FlashLoanLogger.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract FlashLoanLogger {\r\n    event FlashLoan(string actionType, uint256 id, uint256 loanAmount, address sender);\r\n\r\n    function logFlashLoan(\r\n        string calldata _actionType,\r\n        uint256 _id,\r\n        uint256 _loanAmount,\r\n        address _sender\r\n    ) external {\r\n        emit FlashLoan(_actionType, _loanAmount, _id, _sender);\r\n    }\r\n}\r\n\r\n// File: github.com/OpenZeppelin/zeppelin-solidity/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: github.com/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSNote.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSAuthority.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n}\r\n\r\n// File: localhost/DS/DSAuth.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSProxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\nabstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/mcd/Discount.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}\r\n\r\n// File: localhost/interfaces/ComptrollerInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n}\r\n\r\n// File: localhost/interfaces/CTokenInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    function mint() external virtual payable;\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n}\r\n\r\n// File: localhost/interfaces/CompoundOracleInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract CompoundOracleInterface {\r\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\r\n}\r\n\r\n// File: localhost/interfaces/CEtherInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract CEtherInterface {\r\n    function mint() external virtual payable;\r\n    function repayBorrow() external virtual payable;\r\n}\r\n\r\n// File: localhost/compound/helpers/CompoundSaverHelper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Utlity functions for Compound contracts\r\ncontract CompoundSaverHelper is DSMath {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\r\n    address public constant COMPOUND_ORACLE = 0xDDc46a3B076aec7ab3Fc37420A8eDd2959764Ec4;\r\n\r\n    /// @notice Helper method to payback the Compound debt\r\n    /// @dev If amount is bigger it will repay the whole debt and send the extra to the _user\r\n    /// @param _amount Amount of tokens we want to repay\r\n    /// @param _cBorrowToken Ctoken address we are repaying\r\n    /// @param _borrowToken Token address we are repaying\r\n    /// @param _user Owner of the compound position we are paying back\r\n    function paybackDebt(uint _amount, address _cBorrowToken, address _borrowToken, address payable _user) internal {\r\n        uint wholeDebt = CTokenInterface(_cBorrowToken).borrowBalanceCurrent(address(this));\r\n\r\n        if (_amount > wholeDebt) {\r\n            if (_borrowToken == ETH_ADDRESS) {\r\n                _user.transfer((_amount - wholeDebt));\r\n            } else {\r\n                IERC20(_borrowToken).safeTransfer(_user, (_amount - wholeDebt));\r\n            }\r\n\r\n            _amount = wholeDebt;\r\n        }\r\n\r\n        approveCToken(_borrowToken, _cBorrowToken);\r\n\r\n        if (_borrowToken == ETH_ADDRESS) {\r\n            CEtherInterface(_cBorrowToken).repayBorrow{value: _amount}();\r\n        } else {\r\n            require(CTokenInterface(_cBorrowToken).repayBorrow(_amount) == 0);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the fee amount\r\n    /// @param _amount Amount that is converted\r\n    /// @param _user Actuall user addr not DSProxy\r\n    /// @param _gasCost Ether amount of gas we are spending for tx\r\n    /// @param _cTokenAddr CToken addr. of token we are getting for the fee\r\n    /// @return feeAmount The amount we took for the fee\r\n    function getFee(uint _amount, address _user, uint _gasCost, address _cTokenAddr) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        address tokenAddr = getUnderlyingAddr(_cTokenAddr);\r\n\r\n        if (Discount(DISCOUNT_ADDR).isCustomFeeSet(_user)) {\r\n            fee = Discount(DISCOUNT_ADDR).getCustomServiceFee(_user);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        if (_gasCost != 0) {\r\n            uint ethTokenPrice = CompoundOracleInterface(COMPOUND_ORACLE).getUnderlyingPrice(_cTokenAddr);\r\n            _gasCost = rmul(_gasCost, ethTokenPrice);\r\n\r\n            feeAmount = add(feeAmount, _gasCost);\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        if (tokenAddr == ETH_ADDRESS) {\r\n            WALLET_ADDR.transfer(feeAmount);\r\n        } else {\r\n            IERC20(tokenAddr).safeTransfer(WALLET_ADDR, feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Enters the market for the collatera and borrow tokens\r\n    /// @param _cTokenAddrColl Collateral address we are entering the market in\r\n    /// @param _cTokenAddrBorrow Borrow address we are entering the market in\r\n    function enterMarket(address _cTokenAddrColl, address _cTokenAddrBorrow) internal {\r\n        address[] memory markets = new address[](2);\r\n        markets[0] = _cTokenAddrColl;\r\n        markets[1] = _cTokenAddrBorrow;\r\n\r\n        ComptrollerInterface(COMPTROLLER).enterMarkets(markets);\r\n    }\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _cTokenAddr Address which will gain the approval\r\n    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            IERC20(_tokenAddr).safeApprove(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    /// @param _cTokenAddress cToken address\r\n    /// @return Token address of the cToken specified\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of collateral available to withdraw\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cCollAddress Collateral we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. collateral amount in that token\r\n    function getMaxCollateral(address _cCollAddress, address _account) public returns (uint) {\r\n        (, uint liquidityInEth, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n        uint usersBalance = CTokenInterface(_cCollAddress).balanceOfUnderlying(_account);\r\n\r\n        if (liquidityInEth == 0) return usersBalance;\r\n\r\n        if (_cCollAddress == CETH_ADDRESS) {\r\n            if (liquidityInEth > usersBalance) return usersBalance;\r\n\r\n            return liquidityInEth;\r\n        }\r\n\r\n        uint ethPrice = CompoundOracleInterface(COMPOUND_ORACLE).getUnderlyingPrice(_cCollAddress);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        if (liquidityInToken > usersBalance) return usersBalance;\r\n\r\n        return sub(liquidityInToken, (liquidityInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cBorrowAddress Borrow token we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. borrow amount in that token\r\n    function getMaxBorrow(address _cBorrowAddress, address _account) public view returns (uint) {\r\n        (, uint liquidityInEth, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n\r\n        if (_cBorrowAddress == CETH_ADDRESS) return liquidityInEth;\r\n\r\n        uint ethPrice = CompoundOracleInterface(COMPOUND_ORACLE).getUnderlyingPrice(_cBorrowAddress);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        return sub(liquidityInToken, (liquidityInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n}\r\n\r\n// File: localhost/loggers/CompoundLogger.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract CompoundLogger {\r\n    event Repay(\r\n        address indexed owner,\r\n        uint256 collateralAmount,\r\n        uint256 borrowAmount,\r\n        address collAddr,\r\n        address borrowAddr\r\n    );\r\n\r\n    event Boost(\r\n        address indexed owner,\r\n        uint256 borrowAmount,\r\n        uint256 collateralAmount,\r\n        address collAddr,\r\n        address borrowAddr\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogRepay(address _owner, uint256 _collateralAmount, uint256 _borrowAmount, address _collAddr, address _borrowAddr)\r\n        public\r\n    {\r\n        emit Repay(_owner, _collateralAmount, _borrowAmount, _collAddr, _borrowAddr);\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogBoost(address _owner, uint256 _borrowAmount, uint256 _collateralAmount, address _collAddr, address _borrowAddr)\r\n        public\r\n    {\r\n        emit Boost(_owner, _borrowAmount, _collateralAmount, _collAddr, _borrowAddr);\r\n    }\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeKovan.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeKovan {\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\r\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\r\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\r\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\r\n\r\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\r\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\r\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\r\n\r\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeMainnet.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x862F3dcF1104b8a9468fBb8B843C37C31B41eF09;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\r\n\r\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddressesExchange is ConstantAddressesExchangeMainnet {}\r\n\r\n// File: localhost/interfaces/SaverExchangeInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract SaverExchangeInterface {\r\n    function getBestPrice(\r\n        uint256 _amount,\r\n        address _srcToken,\r\n        address _destToken,\r\n        uint256 _exchangeType\r\n    ) public view virtual returns (address, uint256);\r\n}\r\n\r\n// File: localhost/interfaces/TokenInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract TokenInterface {\r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}\r\n\r\n// File: localhost/interfaces/ExchangeInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n//TODO: currenlty only adjusted to kyber, but should be genric interfaces for more dec. exchanges\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\r\n        external\r\n        payable\r\n        returns (uint256, uint256);\r\n\r\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function getExpectedRate(address src, address dest, uint256 srcQty)\r\n        external\r\n        view\r\n        returns (uint256 expectedRate);\r\n}\r\n\r\n// File: localhost/mcd/saver_proxy/ExchangeHelper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Helper methods for integration with SaverExchange\r\ncontract ExchangeHelper is ConstantAddressesExchange {\r\n\r\n    /// @notice Swaps 2 tokens on the Saver Exchange\r\n    /// @dev ETH is sent with Weth address\r\n    /// @param _data [amount, minPrice, exchangeType, 0xPrice]\r\n    /// @param _src Token address of the source token\r\n    /// @param _dest Token address of the destination token\r\n    /// @param _exchangeAddress Address of 0x exchange that should be called\r\n    /// @param _callData data to call 0x exchange with\r\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\r\n        address wrapper;\r\n        uint price;\r\n        // [tokensReturned, tokensLeft]\r\n        uint[2] memory tokens;\r\n        bool success;\r\n\r\n        // tokensLeft is equal to amount at the beginning\r\n        tokens[1] = _data[0];\r\n\r\n        _src = wethToKyberEth(_src);\r\n        _dest = wethToKyberEth(_dest);\r\n\r\n        // use this to avoid stack too deep error\r\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\r\n\r\n        // if _data[2] == 4 use 0x if possible\r\n        if (_data[2] == 4) {\r\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n            }\r\n\r\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n\r\n            // if specifically 4, then require it to be successfull\r\n            require(success && tokens[0] > 0, \"0x transaction failed\");\r\n        }\r\n\r\n        // no 0x\r\n        // if (_data[2] == 5) {\r\n        //     (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n        //     require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n        //     if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n        //         uint tRet;\r\n        //         (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\r\n        //         tokens[0] += tRet;\r\n        //     } else {\r\n        //         ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n        //         if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n        //         } else {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n        //         }\r\n        //     }\r\n\r\n        //     return tokens[0];\r\n        // }\r\n\r\n        if (tokens[0] == 0) {\r\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\r\n\r\n            // handle 0x exchange, if equal price, try 0x to use less gas\r\n            if (_data[3] >= price) {\r\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n                }\r\n\r\n                // when selling eth its possible that some eth isn't sold and it is returned back\r\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n            }\r\n\r\n            // if there are more tokens left, try to sell them on other exchanges\r\n            if (tokens[1] > 0) {\r\n                // as it stands today, this can happend only when selling ETH\r\n                if (tokens[1] != _data[0]) {\r\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n                }\r\n\r\n                require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n                    uint tRet;\r\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken{value: tokens[1]}(tokens[1], orderAddresses[2], uint(-1));\r\n                    tokens[0] += tRet;\r\n                } else {\r\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n                    } else {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return tokens[0];\r\n    }\r\n\r\n    // @notice Takes order from 0x and returns bool indicating if it is successful\r\n    // @param _addresses [exchange, src, dst]\r\n    // @param _data Data to send with call\r\n    // @param _value Value to send with call\r\n    // @param _amount Amount to sell\r\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\r\n        bool success;\r\n\r\n        (success, ) = _addresses[0].call{value: _value}(_data);\r\n\r\n        uint tokensLeft = _amount;\r\n        uint tokensReturned = 0;\r\n        if (success){\r\n            // check how many tokens left from _src\r\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\r\n                tokensLeft = address(this).balance;\r\n            } else {\r\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\r\n            }\r\n\r\n            // check how many tokens are returned\r\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\r\n                tokensReturned = address(this).balance;\r\n            } else {\r\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return (success, tokensReturned, tokensLeft);\r\n    }\r\n\r\n    /// @notice Converts WETH -> Kybers Eth address\r\n    /// @param _src Input address\r\n    function wethToKyberEth(address _src) internal pure returns (address) {\r\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\r\n    }\r\n}\r\n\r\n// File: localhost/compound/saver/CompoundSaverProxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/// @title Contract that implements repay/boost functionality\r\ncontract CompoundSaverProxy is CompoundSaverHelper, ExchangeHelper {\r\n\r\n    /// @notice Withdraws collateral, converts to borrowed token and repays debt\r\n    /// @dev Called through the DSProxy\r\n    /// @param _data Amount and exchange data for the repay [amount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _addrData Coll/Debt addresses [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _callData 0x calldata info\r\n    function repay(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData\r\n    ) public payable {\r\n        enterMarket(_addrData[0], _addrData[1]);\r\n\r\n        address payable user = address(uint160(getUserAddress()));\r\n\r\n        uint maxColl = getMaxCollateral(_addrData[0], address(this));\r\n\r\n        uint collAmount = (_data[0] > maxColl) ? maxColl : _data[0];\r\n\r\n        require(CTokenInterface(_addrData[0]).redeemUnderlying(collAmount) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_addrData[0]);\r\n        address borrowToken = getUnderlyingAddr(_addrData[1]);\r\n\r\n        uint swapAmount = swap(\r\n            [collAmount, _data[1], _data[2], _data[4]], // collAmount, minPrice, exchangeType, 0xPrice\r\n            collToken,\r\n            borrowToken,\r\n            _addrData[2],\r\n            _callData\r\n        );\r\n\r\n        swapAmount -= getFee(swapAmount, user, _data[3], _addrData[1]);\r\n\r\n        paybackDebt(swapAmount, _addrData[1], borrowToken, user);\r\n\r\n        // handle 0x fee\r\n        user.transfer(address(this).balance);\r\n\r\n        CompoundLogger(COMPOUND_LOGGER).LogRepay(user, _data[0], swapAmount, collToken, borrowToken);\r\n    }\r\n\r\n    /// @notice Borrows token, converts to collateral, and adds to position\r\n    /// @dev Called through the DSProxy\r\n    /// @param _data Amount and exchange data for the boost [amount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _addrData Coll/Debt addresses [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _callData 0x calldata info\r\n    function boost(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData\r\n    ) public payable {\r\n        enterMarket(_addrData[0], _addrData[1]);\r\n\r\n        address payable user = address(uint160(getUserAddress()));\r\n\r\n        uint maxBorrow = getMaxBorrow(_addrData[1], address(this));\r\n        uint borrowAmount = (_data[0] > maxBorrow) ? maxBorrow : _data[0];\r\n\r\n        require(CTokenInterface(_addrData[1]).borrow(borrowAmount) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_addrData[0]);\r\n        address borrowToken = getUnderlyingAddr(_addrData[1]);\r\n\r\n        borrowAmount -= getFee(borrowAmount, user, _data[3], _addrData[1]);\r\n\r\n        uint swapAmount = swap(\r\n            [borrowAmount, _data[1], _data[2], _data[4]], // collAmount, minPrice, exchangeType, 0xPrice\r\n            borrowToken,\r\n            collToken,\r\n            _addrData[2],\r\n            _callData\r\n        );\r\n\r\n        approveCToken(collToken, _addrData[0]);\r\n\r\n        if (collToken != ETH_ADDRESS) {\r\n            require(CTokenInterface(_addrData[0]).mint(swapAmount) == 0);\r\n        } else {\r\n            CEtherInterface(_addrData[0]).mint{value: swapAmount}(); // reverts on fail\r\n        }\r\n\r\n        // handle 0x fee\r\n        user.transfer(address(this).balance);\r\n\r\n        CompoundLogger(COMPOUND_LOGGER).LogBoost(user, _data[0], swapAmount, collToken, borrowToken);\r\n    }\r\n\r\n}\r\n\r\n// File: localhost/flashloan/aave/ILendingPool.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\r\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\r\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual;\r\n\tfunction getReserveData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,\r\n            uint256 availableLiquidity,\r\n            uint256 totalBorrowsStable,\r\n            uint256 totalBorrowsVariable,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 utilizationRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            address aTokenAddress,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n}\r\n\r\n// File: localhost/interfaces/GasTokenInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}\r\n\r\n// File: localhost/utils/GasBurner.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        uint gst2Amount = _amount;\r\n\r\n        if (_amount == 0) {\r\n            gst2Amount = (gasleft() + 14154) / (2 * 24000 - 6870);\r\n            gst2Amount = gst2Amount - (gst2Amount / 3); // 33.3% less because of gaslimit != gas_used\r\n        }\r\n\r\n        if (gasToken.balanceOf(address(this)) >= gst2Amount) {\r\n            gasToken.free(gst2Amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/compound/saver/CompoundFlashLoanTaker.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Entry point for the FL Repay Boosts, called by DSProxy\r\ncontract CompoundFlashLoanTaker is CompoundSaverProxy, ProxyPermission, GasBurner {\r\n    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    address payable public constant COMPOUND_SAVER_FLASH_LOAN = 0x632cfd9245B7A4692F03b3D562Ed01E5cff94898;\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    FlashLoanLogger public constant logger = FlashLoanLogger(\r\n        0xb9303686B0EE92F92f63973EF85f3105329D345c\r\n    );\r\n\r\n    /// @notice Repays the position with it's own fund or with FL if needed\r\n    /// @param _data Amount and exchange data [amount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _addrData cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _callData 0x callData\r\n    function repayWithLoan(\r\n        uint[5] calldata _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] calldata _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes calldata _callData\r\n    ) external payable burnGas(25) {\r\n        uint maxColl = getMaxCollateral(_addrData[0], address(this));\r\n\r\n        if (_data[0] <= maxColl) {\r\n            repay(_data, _addrData, _callData);\r\n        } else {\r\n            // 0x fee\r\n            COMPOUND_SAVER_FLASH_LOAN.transfer(msg.value);\r\n\r\n            uint loanAmount = (_data[0] - maxColl);\r\n            bytes memory paramsData = abi.encode(_data, _addrData, _callData, true, address(this));\r\n\r\n            givePermission(COMPOUND_SAVER_FLASH_LOAN);\r\n\r\n            lendingPool.flashLoan(COMPOUND_SAVER_FLASH_LOAN, getUnderlyingAddr(_addrData[0]), loanAmount, paramsData);\r\n\r\n            removePermission(COMPOUND_SAVER_FLASH_LOAN);\r\n\r\n            logger.logFlashLoan(\"CompoundFlashRepay\", loanAmount, _data[0], _addrData[0]);\r\n        }\r\n    }\r\n\r\n    /// @notice Boosts the position with it's own fund or with FL if needed\r\n    /// @param _data Amount and exchange data [amount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _addrData cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _callData 0x callData\r\n    function boostWithLoan(\r\n        uint[5] calldata _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] calldata _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes calldata _callData\r\n    ) external payable burnGas(20) {\r\n        uint maxBorrow = getMaxBorrow(_addrData[1], address(this));\r\n\r\n        if (_data[0] <= maxBorrow) {\r\n            boost(_data, _addrData, _callData);\r\n        } else {\r\n            // 0x fee\r\n            COMPOUND_SAVER_FLASH_LOAN.transfer(msg.value);\r\n\r\n            uint loanAmount = (_data[0] - maxBorrow);\r\n            bytes memory paramsData = abi.encode(_data, _addrData, _callData, false, address(this));\r\n\r\n            givePermission(COMPOUND_SAVER_FLASH_LOAN);\r\n\r\n            lendingPool.flashLoan(COMPOUND_SAVER_FLASH_LOAN, getUnderlyingAddr(_addrData[1]), loanAmount, paramsData);\r\n\r\n            removePermission(COMPOUND_SAVER_FLASH_LOAN);\r\n\r\n            logger.logFlashLoan(\"CompoundFlashBoost\", loanAmount, _data[0], _addrData[1]);\r\n        }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_SAVER_FLASH_LOAN\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boostWithLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract GasTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCollAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"givePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract FlashLoanLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"removePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repayWithLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CompoundFlashLoanTaker","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ff28cd4bfb47c9950581efaeaea77b4e6c6109b10b6b360eb9b09f3e6fd2c3e"}]}