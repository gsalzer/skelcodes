{"status":"1","message":"OK","result":[{"SourceCode":"{\"CrowdProposal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\u0027./ICompound.sol\\u0027;\\n\\ncontract CrowdProposal {\\n    /// @notice The crowd proposal author\\n    address payable public immutable author;\\n\\n    /// @notice Governance proposal data\\n    address[] public targets;\\n    uint[] public values;\\n    string[] public signatures;\\n    bytes[] public calldatas;\\n    string public description;\\n\\n    /// @notice COMP token contract address\\n    address public immutable comp;\\n    /// @notice Compound protocol `GovernorAlpha` contract address\\n    address public immutable governor;\\n\\n    /// @notice Governance proposal id\\n    uint public govProposalId;\\n    /// @notice Terminate flag\\n    bool public terminated;\\n\\n    /// @notice An event emitted when the governance proposal is created\\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\\n    /// @notice An event emitted when the crowd proposal is terminated\\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\\n\\n    /**\\n    * @notice Construct crowd proposal\\n    * @param author_ The crowd proposal author\\n    * @param targets_ The ordered list of target addresses for calls to be made\\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    * @param signatures_ The ordered list of function signatures to be called\\n    * @param calldatas_ The ordered list of calldata to be passed to each call\\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\\n    * @param comp_ `COMP` token contract address\\n    * @param governor_ Compound protocol `GovernorAlpha` contract address\\n    */\\n    constructor(address payable author_,\\n                address[] memory targets_,\\n                uint[] memory values_,\\n                string[] memory signatures_,\\n                bytes[] memory calldatas_,\\n                string memory description_,\\n                address comp_,\\n                address governor_) public {\\n        author = author_;\\n\\n        // Save proposal data\\n        targets = targets_;\\n        values = values_;\\n        signatures = signatures_;\\n        calldatas = calldatas_;\\n        description = description_;\\n\\n        // Save Compound contracts data\\n        comp = comp_;\\n        governor = governor_;\\n\\n        terminated = false;\\n\\n        // Delegate votes to the crowd proposal\\n        IComp(comp_).delegate(address(this));\\n    }\\n\\n    /// @notice Create governance proposal\\n    function propose() external returns (uint) {\\n        require(govProposalId == 0, \\u0027CrowdProposal::propose: gov proposal already exists\\u0027);\\n        require(!terminated, \\u0027CrowdProposal::propose: proposal has been terminated\\u0027);\\n\\n        // Create governance proposal and save proposal id\\n        govProposalId = IGovernorAlpha(governor).propose(targets, values, signatures, calldatas, description);\\n        emit CrowdProposalProposed(address(this), author, govProposalId);\\n\\n        return govProposalId;\\n    }\\n\\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\\n    function terminate() external {\\n        require(msg.sender == author, \\u0027CrowdProposal::terminate: only author can terminate\\u0027);\\n        require(!terminated, \\u0027CrowdProposal::terminate: proposal has been already terminated\\u0027);\\n\\n        terminated = true;\\n\\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\\n\\n        emit CrowdProposalTerminated(address(this), author);\\n    }\\n\\n    /// @notice Vote for the governance proposal with all delegated votes\\n    function vote() external {\\n        require(govProposalId \\u003e 0, \\u0027CrowdProposal::vote: gov proposal has not been created yet\\u0027);\\n        IGovernorAlpha(governor).castVote(govProposalId, true);\\n\\n        emit CrowdProposalVoted(address(this), govProposalId);\\n    }\\n}\\n\"},\"ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IComp {\\n    function delegate(address delegatee) external;\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address dst, uint rawAmount) external returns (bool);\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\\n}\\n\\ninterface IGovernorAlpha {\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\\n    function castVote(uint proposalId, bool support) external;\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrowdProposal","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0325dbe7fa891436e83a094f9f12848c78e449b00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c0da01a04c3f3e0be433606045bb7017a7323e3800000000000000000000000000000000000000000000000000000000000000010000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a5f7365745061757365477561726469616e286164647265737329000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000bbf3f1421d886e9b2c5d716b5192ac998af2012c00000000000000000000000000000000000000000000000000000000000004bd232053657420506175736520477561726469616e20746f20436f6d6d756e697479204d756c74692d5369670a5468697320436f6d706f756e64204175746f6e6f6d6f75732050726f706f73616c2028434150292070726f706f73657320746f20736574207468652061646472657373206f6620746865205b506175736520477561726469616e5d2868747470733a2f2f636f6d706f756e642e66696e616e63652f646f63732f676f7665726e616e63652370617573652d677561726469616e29206f66207468652070726f746f636f6c20746f207468652061646472657373206f662061204d756c74692d5369672063726561746564206279206d656d62657273206f662074686520636f6d6d756e6974793a205b3078626266336631343231443838364539623263354437313642353139326143393938616632303132635d2868747470733a2f2f65746865727363616e2e696f2f616464726573732f30786262663366313432314438383645396232633544373136423531393261433939386166323031326323636f6465292e0a0a546865204d756c74692d53696720726571756972657320342d6f662d36207369676e65727320746f20617070726f766520616e79207472616e73616374696f6e2e20546865207369676e6572206164647265737365732063616e206265207365656e205b68657265206f6e20476e6f73697320536166655d2868747470733a2f2f676e6f7369732d736166652e696f2f6170702f232f73616665732f3078626266336631343231443838364539623263354437313642353139326143393938616632303132632f616464726573732d626f6f6b292c20616e642063757272656e746c7920696e636c7564652040616161616161616161616161612c204061727230302c2040626c636b2c20436f6d706f756e64204c6162732c20446861726d61204c61627320284030616765292c20616e6420406a617265642e20466f722066756c6c20636f6e7465787420616e6420686973746f7279206f6e20746865204d756c74692d5369672c20706c6561736520736565205b7468697320706f73745d2868747470733a2f2f7777772e636f6d702e78797a2f742f636f6d6d756e6974792d6d756c74697369672d342d6f662d362d6465706c6f796d656e742f31333429206f6e2074686520436f6d706f756e6420436f6d6d756e69747920466f72756d2e0a0a53657474696e672074686520506175736520477561726469616e206164647265737320746f2074686520436f6d6d756e697479204d756c74692d5369672077696c6c206675727468657220646563656e7472616c697a6520616e6420656e7375726520746865207365637572697479206f662074686520436f6d706f756e642050726f746f636f6c2e20506c6561736520636f6e73696465722064656c65676174696e6720796f757220434f4d5020766f74657320746f207468697320616464726573733b207768656e2069742072656163686573203e203130302c3030302064656c65676174656420766f7465732c20616e79206d656d626572206f662074686520636f6d6d756e6974792063616e207375626d697420697420746f2074686520436f6d706f756e6420676f7665726e616e63652073797374656d20666f72206120766f74652e000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4949303609d8028a829949122056b9a200c4932c29d75e33f1267b68d0833693"}]}