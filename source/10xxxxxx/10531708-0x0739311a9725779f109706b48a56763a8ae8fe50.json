{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface Aave {\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateModel, uint16 _referralCode) external;\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n}\r\n\r\ninterface AaveToken {\r\n    function underlyingAssetAddress() external returns (address);\r\n}\r\n\r\ninterface Oracle {\r\n    function getAssetPrice(address reserve) external view returns (uint256);\r\n    function latestAnswer() external view returns (uint256);\r\n    \r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface Curve {\r\n    function get_virtual_price() external view returns (uint);\r\n}\r\n\r\ncontract RiskOracle {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    \r\n    address constant public ycrv = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    \r\n    address constant public aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    \r\n    uint constant public id = 7;\r\n    \r\n    constructor() public {\r\n        emit Setup(ycrv, id, getAaveOracle());\r\n    }\r\n    \r\n    event Setup(address, uint, address);\r\n    \r\n    function getToken() external pure returns (address) {\r\n        return ycrv;\r\n    }\r\n    function getPlatformId() external pure returns (uint) {\r\n        return id;\r\n    }\r\n    function getSubTokens() external pure returns(address[4] memory) {\r\n        return [usdt,usdc,tusd,dai];\r\n    }\r\n    \r\n    \r\n    function getReservePriceETHUSDT() public view returns (uint256) {\r\n        return getReservePriceETH(usdt);\r\n    }\r\n    function getReservePriceETHUSDC() public view returns (uint256) {\r\n        return getReservePriceETH(usdc);\r\n    }\r\n    function getReservePriceETHTUSD() public view returns (uint256) {\r\n        return getReservePriceETH(tusd);\r\n    }\r\n    function getReservePriceETHDAI() public view returns (uint256) {\r\n        return getReservePriceETH(dai);\r\n    }\r\n    function getReservePriceMIN() public view returns (uint256) {\r\n        uint _usdt = getReservePriceETH(usdt);\r\n        uint _usdc = getReservePriceETH(usdc);\r\n        uint _tusd = getReservePriceETH(tusd);\r\n        uint _dai = getReservePriceETH(dai);\r\n        uint _min = _usdt;\r\n        if (_min > _usdc) {\r\n            _min = _usdc;\r\n        }\r\n        if (_min > _tusd) {\r\n            _min = _tusd;\r\n        }\r\n        if (_min > _dai) {\r\n            _min = _dai;\r\n        }\r\n        return _min;\r\n    }\r\n    function getAddressMIN() public view returns (address) {\r\n        uint _usdt = getReservePriceETH(usdt);\r\n        uint _usdc = getReservePriceETH(usdc);\r\n        uint _tusd = getReservePriceETH(tusd);\r\n        uint _dai = getReservePriceETH(dai);\r\n        uint _min = _usdt;\r\n        address _address = usdt;\r\n        if (_min > _usdc) {\r\n            _min = _usdc;\r\n            _address = usdc;\r\n        }\r\n        if (_min > _tusd) {\r\n            _min = _tusd;\r\n            _address = tusd;\r\n        }\r\n        if (_min > _dai) {\r\n            _min = _dai;\r\n            _address = dai;\r\n        }\r\n        return _address;\r\n    }\r\n    \r\n    function get_virtual_price() public view returns (uint) {\r\n        return Curve(ycrv).get_virtual_price();\r\n    }\r\n    \r\n    function latestAnswer() public view returns (int256) {\r\n        uint _usdt = getReservePriceETH(usdt);\r\n        uint _usdc = getReservePriceETH(usdc);\r\n        uint _tusd = getReservePriceETH(tusd);\r\n        uint _dai = getReservePriceETH(dai);\r\n        uint _min = _usdt;\r\n        if (_min > _usdc) {\r\n            _min = _usdc;\r\n        }\r\n        if (_min > _tusd) {\r\n            _min = _tusd;\r\n        }\r\n        if (_min > _dai) {\r\n            _min = _dai;\r\n        }\r\n        int256 _ret = int256(_min);\r\n        return _ret;\r\n    }\r\n    \r\n    function getAaveOracle() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getPriceOracle();\r\n    }\r\n    \r\n    function getReservePriceETH(address reserve) public view returns (uint256) {\r\n        return Oracle(getAaveOracle()).getAssetPrice(reserve);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAaveOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"getReservePriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePriceETHDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePriceETHTUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePriceETHUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePriceETHUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReservePriceMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RiskOracle","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50580cf65e61725345e8eb787c24c62c6a5b77ca5ca8e93ec6c368eb4821eb84"}]}