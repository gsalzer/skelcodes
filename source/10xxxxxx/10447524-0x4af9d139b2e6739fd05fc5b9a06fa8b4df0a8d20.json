{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Authereum Labs, Inc.\n*/\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Owned\n * @author Authereum Labs, Inc.\n * @dev Basic contract to define an owner.\n */\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /// @dev Throws if the sender is not the owner\n    modifier onlyOwner {\n        require(msg.sender == owner, \"O: Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @dev Return the ownership status of an address\n    /// @param _potentialOwner Address being checked\n    /// @return True if the _potentialOwner is the owner\n    function isOwner(address _potentialOwner) external view returns (bool) {\n        return owner == _potentialOwner;\n    }\n\n    /// @dev Lets the owner transfer ownership of the contract to a new owner\n    /// @param _newOwner The new owner\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"O: Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\ninterface ILoginKeyTransactionValidator {\n    /// @dev Reverts if the transaction is invalid\n    /// @param _transactions Arrays of transaction data ([to, value, gasLimit, data],[...],...)\n    /// @param _validationData Data used by the LoginKeyTransactionValidator and is signed in the \n    ///        login key attestation\n    /// @param _relayerAddress Address that called the account contract\n    function validateTransactions(\n        bytes[] calldata _transactions,\n        bytes calldata _validationData,\n        address _relayerAddress\n    ) external;\n\n    /// @dev Called after a transaction is executed to record information about the transaction\n    ///      and perform any post-execution validation\n    /// @param _transactions Arrays of transaction data ([to, value, gasLimit, data],[...],...)\n    /// @param _validationData Data used by the LoginKeyTransactionValidator and is signed in the \n    ///        login key attestation\n    /// @param _relayerAddress Address that called the account contract\n    function transactionsDidExecute(\n        bytes[] calldata _transactions,\n        bytes calldata _validationData,\n        address _relayerAddress\n    ) external;\n}\n\n/**\n * @title AuthereumLoginKeyValidator\n * @author Authereum Labs, Inc.\n * @dev This contract used to validate Login Key transactions. Its address is included in the\n *      loginKeyRestrictionsData that is a part of the data signed for a loginKeyAttestationSignature.\n */\ncontract AuthereumLoginKeyValidator is Owned, ILoginKeyTransactionValidator {\n\n    string constant public name = \"Authereum Login Key Validator\";\n    string constant public version = \"2020070100\";\n\n    /**\n     * Events\n     */\n\n    event RelayerAdded(address indexed relayer);\n    event RelayerRemoved(address indexed relayer);\n\n    /**\n     * State\n     */\n\n    mapping(address => bool) public relayerIsAllowed;\n\n    /// @dev Returns true and an empty string if transactions are valid and false and an error\n    ///      message if it's invalid.\n    /// @dev validateTransaction MUST return an error message if `success` is `false`\n    //  @param _transactions The encoded transactions being executed\n    /// @param _validationData The encoded data containing the expiration time\n    /// @param _relayerAddress The address calling the account contract\n    function validateTransactions(\n        bytes[] calldata,\n        bytes calldata _validationData,\n        address _relayerAddress\n    )\n        external\n    {\n        uint256 loginKeyExpirationTime = abi.decode(_validationData, (uint256));\n\n        // Check that loginKey is not expired\n        require(loginKeyExpirationTime > now, \"LKV: Login key is expired\");\n\n        // Check that _relayerAddress is an Authereum relayer\n        require(relayerIsAllowed[_relayerAddress], \"LKV: Invalid relayer\");\n    }\n\n    /// @dev Called after a transaction is executed to record information about the transaction\n    ///      for validation such as value transferred\n    //  @param _transactions The encoded transactions being executed\n    //  @param _validationData The encoded data containing the expiration time\n    //  @param _relayerAddress The address calling the account contract\n    function transactionsDidExecute(\n        bytes[] calldata,\n        bytes calldata,\n        address\n    )\n        external\n    { }\n\n    /// @dev Allow an array of relayers\n    /// @param _newRelayers The list of relayers to be allowed\n    function addRelayers(address[] calldata _newRelayers) external onlyOwner {\n        for (uint256 i = 0; i < _newRelayers.length; i++) {\n            address relayer = _newRelayers[i];\n            require(relayerIsAllowed[relayer] == false, \"LKV: Relayer has already been added\");\n            relayerIsAllowed[relayer] = true;\n            emit RelayerAdded(relayer);\n        }\n    }\n\n    /// @dev Remove a relayer from the allowlist\n    /// @param _relayersToRemove The list of relayers to remove from the allowlist\n    function removeRelayers(address[] calldata _relayersToRemove) external onlyOwner {\n        for (uint256 i = 0; i < _relayersToRemove.length; i++) {\n            address relayer = _relayersToRemove[i];\n            require(relayerIsAllowed[relayer] == true, \"LKV: Address is not a relayer\");\n            relayerIsAllowed[relayer] = false;\n            emit RelayerRemoved(relayer);\n        }\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newRelayers\",\"type\":\"address[]\"}],\"name\":\"addRelayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialOwner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayerIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relayersToRemove\",\"type\":\"address[]\"}],\"name\":\"removeRelayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionsDidExecute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_validationData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"validateTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuthereumLoginKeyValidator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}