{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ncontract ERC20\r\n{\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        returns (bool);\r\n    function transferFrom(address _sender, address _receiver, uint _amount)\r\n        public\r\n        returns (bool);\r\n}\r\n\r\ncontract BucketSale\r\n{\r\n    function tokenSoldFor()\r\n        public\r\n        returns (ERC20);\r\n\r\n    function agreeToTermsAndConditionsListedInThisContractAndEnterSale(\r\n        address _buyer,\r\n        uint _bucketId,\r\n        uint _amount,\r\n        address _referrer)\r\n    public;\r\n}\r\n\r\ninterface KyberNetworkInterface\r\n{\r\n    function swapTokenToToken(\r\n            ERC20 src,\r\n            uint srcAmount,\r\n            ERC20 dest,\r\n            uint minConversionRate)\r\n        external\r\n        returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate)\r\n        external\r\n        payable\r\n        returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint _srcQty)\r\n        external\r\n        view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract KyberTrader\r\n{\r\n    address public constant ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    KyberNetworkInterface public kyberNetworkProxy;\r\n    ERC20 public mcdDai;\r\n\r\n    function swapEtherToToken()\r\n        public\r\n        payable\r\n        returns (uint _receivedAmount)\r\n    {\r\n        (, uint minRate) = kyberNetworkProxy.getExpectedRate(ERC20(ETH_TOKEN_ADDRESS), mcdDai, msg.value);\r\n        uint result = kyberNetworkProxy.swapEtherToToken.value(msg.value)(mcdDai, minRate);\r\n        return result;\r\n    }\r\n\r\n    function swapTokenToToken(\r\n            ERC20 _srcToken,\r\n            uint _srcQty)\r\n        public\r\n        returns (uint _receivedAmount)\r\n    {\r\n        // getExpectedRate returns expected rate and slippage rate\r\n        // We use the slippage rate as the minRate\r\n        (, uint minRate) = kyberNetworkProxy.getExpectedRate(_srcToken, mcdDai, _srcQty);\r\n\r\n        // Check that the token transferFrom has succeeded\r\n        require(_srcToken.transferFrom(msg.sender, address(this), _srcQty), \"Transfer of incoming ERC20 failed\");\r\n\r\n        // Mitigate ERC20 Approve front-running attack, by initially setting\r\n        // allowance to 0\r\n        require(_srcToken.approve(address(kyberNetworkProxy), 0), \"Could not reset incoming ERC20 allowance\");\r\n\r\n        // Approve tokens so network can take them during the swap\r\n        _srcToken.approve(address(kyberNetworkProxy), _srcQty);\r\n\r\n        // Perform the swap\r\n        uint result = kyberNetworkProxy.swapTokenToToken(_srcToken, _srcQty, mcdDai, minRate);\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract EntryBot is KyberTrader\r\n{\r\n    BucketSale bucketSale;\r\n\r\n    constructor(BucketSale _bucketSale, KyberNetworkInterface _kyberNetworkProxy)\r\n        public\r\n    {\r\n        bucketSale = _bucketSale;\r\n        mcdDai = bucketSale.tokenSoldFor();\r\n        kyberNetworkProxy = _kyberNetworkProxy;\r\n        bucketSale.tokenSoldFor().approve(address(bucketSale), uint(-1));\r\n    }\r\n\r\n    function agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther(\r\n            address _buyer,\r\n            uint _bucketId,\r\n            uint _numberOfBuckets,\r\n            address _referrer)\r\n        public\r\n        payable\r\n    {\r\n        uint receivedDai = swapEtherToToken();\r\n        _enterSale(\r\n            _buyer,\r\n            _bucketId,\r\n            receivedDai,\r\n            _numberOfBuckets,\r\n            _referrer);\r\n    }\r\n\r\n    function agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20(\r\n            address _buyer,\r\n            uint _bucketId,\r\n            ERC20 _Erc20,\r\n            uint _totalBuyAmount,\r\n            uint _numberOfBuckets,\r\n            address _referrer)\r\n        public\r\n    {\r\n        uint receivedDai = swapTokenToToken(_Erc20, _totalBuyAmount);\r\n        _enterSale(\r\n            _buyer,\r\n            _bucketId,\r\n            receivedDai,\r\n            _numberOfBuckets,\r\n            _referrer);\r\n    }\r\n\r\n    function agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai(\r\n            address _buyer,\r\n            uint _bucketId,\r\n            uint _totalBuyAmount,\r\n            uint _numberOfBuckets,\r\n            address _referrer)\r\n        public\r\n    {\r\n        bucketSale.tokenSoldFor().transferFrom(msg.sender, address(this), _totalBuyAmount);\r\n        _enterSale(_buyer, _bucketId, _totalBuyAmount, _numberOfBuckets, _referrer);\r\n    }\r\n\r\n    function _enterSale(\r\n            address _buyer,\r\n            uint _bucketId,\r\n            uint _totalBuyAmount,\r\n            uint _numberOfBuckets,\r\n            address _referrer)\r\n        private\r\n    {\r\n        uint amountPerBucket = _totalBuyAmount / _numberOfBuckets;\r\n\r\n        for(uint i = 0; i < _numberOfBuckets; i++)\r\n        {\r\n            bucketSale.agreeToTermsAndConditionsListedInThisContractAndEnterSale(\r\n                _buyer,\r\n                _bucketId + i,\r\n                amountPerBucket,\r\n                _referrer\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract EntryBotMainNet is EntryBot\r\n{\r\n    constructor()\r\n    EntryBot(BucketSale(0x30076fF7436aE82207b9c03AbdF7CB056310A95A), KyberNetworkInterface(0x818E6FECD516Ecc3849DAf6845e3EC868087B755))\r\n        public\r\n    {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bucketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfBuckets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bucketId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_Erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfBuckets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bucketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfBuckets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxy\",\"outputs\":[{\"internalType\":\"contract KyberNetworkInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcdDai\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapEtherToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcQty\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EntryBotMainNet","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://53ee89cdc504101ef79fb097cb0c58100e6439dfccda6c0f2fca819a121c86dd"}]}