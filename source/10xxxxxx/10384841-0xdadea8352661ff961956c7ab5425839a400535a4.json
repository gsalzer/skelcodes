{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IBinaryOptionMarketManager {\r\n    /* ========== TYPES ========== */\r\n\r\n    struct Fees {\r\n        uint poolFee;\r\n        uint creatorFee;\r\n        uint refundFee;\r\n    }\r\n\r\n    struct Durations {\r\n        uint maxOraclePriceAge;\r\n        uint expiryDuration;\r\n        uint maxTimeToMaturity;\r\n    }\r\n\r\n    struct CreatorLimits {\r\n        uint capitalRequirement;\r\n        uint skewLimit;\r\n    }\r\n\r\n    /* ========== VIEWS / VARIABLES ========== */\r\n\r\n    function fees() external view returns (uint poolFee, uint creatorFee, uint refundFee);\r\n    function durations() external view returns (uint maxOraclePriceAge, uint expiryDuration, uint maxTimeToMaturity);\r\n    function creatorLimits() external view returns (uint capitalRequirement, uint skewLimit);\r\n\r\n    function marketCreationEnabled() external view returns (bool);\r\n    function totalDeposited() external view returns (uint);\r\n\r\n    function numActiveMarkets() external view returns (uint);\r\n    function activeMarkets(uint index, uint pageSize) external view returns (address[] memory);\r\n    function numMaturedMarkets() external view returns (uint);\r\n    function maturedMarkets(uint index, uint pageSize) external view returns (address[] memory);\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function createMarket(\r\n        bytes32 oracleKey, uint strikePrice,\r\n        uint[2] calldata times, // [biddingEnd, maturity]\r\n        uint[2] calldata bids // [longBid, shortBid]\r\n    ) external returns (IBinaryOptionMarket);\r\n    function resolveMarket(address market) external;\r\n    function expireMarkets(address[] calldata market) external;\r\n}\r\n\r\n\r\n\r\ninterface IBinaryOptionMarket {\r\n    /* ========== TYPES ========== */\r\n\r\n    enum Phase { Bidding, Trading, Maturity, Expiry }\r\n    enum Side { Long, Short }\r\n\r\n    struct Options {\r\n        IBinaryOption long;\r\n        IBinaryOption short;\r\n    }\r\n\r\n    struct Prices {\r\n        uint long;\r\n        uint short;\r\n    }\r\n\r\n    struct Times {\r\n        uint biddingEnd;\r\n        uint maturity;\r\n        uint expiry;\r\n    }\r\n\r\n    struct OracleDetails {\r\n        bytes32 key;\r\n        uint strikePrice;\r\n        uint finalPrice;\r\n    }\r\n\r\n    /* ========== VIEWS / VARIABLES ========== */\r\n\r\n    function options() external view returns (IBinaryOption long, IBinaryOption short);\r\n    function prices() external view returns (uint long, uint short);\r\n    function times() external view returns (uint biddingEnd, uint maturity, uint destructino);\r\n    function oracleDetails() external view returns (bytes32 key, uint strikePrice, uint finalPrice);\r\n    function fees() external view returns (uint poolFee, uint creatorFee, uint refundFee);\r\n    function creatorLimits() external view returns (uint capitalRequirement, uint skewLimit);\r\n\r\n    function deposited() external view returns (uint);\r\n    function creator() external view returns (address);\r\n    function resolved() external view returns (bool);\r\n\r\n    function phase() external view returns (Phase);\r\n    function oraclePriceAndTimestamp() external view returns (uint price, uint updatedAt);\r\n    function canResolve() external view returns (bool);\r\n    function result() external view returns (Side);\r\n\r\n    function pricesAfterBidOrRefund(Side side, uint value, bool refund) external view returns (uint long, uint short);\r\n    function bidOrRefundForPrice(Side bidSide, Side priceSide, uint price, bool refund) external view returns (uint);\r\n\r\n    function bidsOf(address account) external view returns (uint long, uint short);\r\n    function totalBids() external view returns (uint long, uint short);\r\n    function claimableBalancesOf(address account) external view returns (uint long, uint short);\r\n    function totalClaimableSupplies() external view returns (uint long, uint short);\r\n    function balancesOf(address account) external view returns (uint long, uint short);\r\n    function totalSupplies() external view returns (uint long, uint short);\r\n    function exercisableDeposits() external view returns (uint);\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function bid(Side side, uint value) external;\r\n    function refund(Side side, uint value) external returns (uint refundMinusFee);\r\n\r\n    function claimOptions() external returns (uint longClaimed, uint shortClaimed);\r\n    function exerciseOptions() external returns (uint);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IBinaryOption {\r\n    /* ========== VIEWS / VARIABLES ========== */\r\n\r\n    function market() external view returns (IBinaryOptionMarket);\r\n\r\n    function bidOf(address account) external view returns (uint);\r\n    function totalBids() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function claimableBalanceOf(address account) external view returns (uint);\r\n    function totalClaimableSupply() external view returns (uint);\r\n}\r\n\r\n\r\n\r\ncontract BinaryOptionMarketData {\r\n\r\n\r\n    struct OptionValues {\r\n        uint long;\r\n        uint short;\r\n    }\r\n\r\n    struct Deposits {\r\n        uint deposited;\r\n        uint exercisableDeposits;\r\n    }\r\n\r\n    struct Resolution {\r\n        bool resolved;\r\n        bool canResolve;\r\n    }\r\n\r\n    struct OraclePriceAndTimestamp {\r\n        uint price;\r\n        uint updatedAt;\r\n    }\r\n\r\n    // used for things that don't change over the lifetime of the contract\r\n    struct MarketParameters {\r\n        address creator;\r\n        IBinaryOptionMarket.Options options;\r\n        IBinaryOptionMarket.Times times;\r\n        IBinaryOptionMarket.OracleDetails oracleDetails;\r\n        IBinaryOptionMarketManager.Fees fees;\r\n        IBinaryOptionMarketManager.CreatorLimits creatorLimits;\r\n    }\r\n\r\n    struct MarketData {\r\n        OraclePriceAndTimestamp oraclePriceAndTimestamp;\r\n        IBinaryOptionMarket.Prices prices;\r\n        Deposits deposits;\r\n        Resolution resolution;\r\n        IBinaryOptionMarket.Phase phase;\r\n        IBinaryOptionMarket.Side result;\r\n        OptionValues totalBids;\r\n        OptionValues totalClaimableSupplies;\r\n        OptionValues totalSupplies;\r\n    }\r\n\r\n    struct AccountData {\r\n        OptionValues bids;\r\n        OptionValues claimable;\r\n        OptionValues balances;\r\n    }\r\n\r\n    function getMarketParameters(IBinaryOptionMarket market) public view returns (MarketParameters memory) {\r\n\r\n        (IBinaryOption long, IBinaryOption short) = market.options();\r\n        (uint biddingEndDate, uint maturityDate, uint expiryDate) = market.times();\r\n        (bytes32 key, uint strikePrice, uint finalPrice) = market.oracleDetails();\r\n        (uint poolFee, uint creatorFee, uint refundFee) = market.fees();\r\n\r\n        MarketParameters memory data = MarketParameters(\r\n            market.creator(),\r\n            IBinaryOptionMarket.Options(long, short),\r\n            IBinaryOptionMarket.Times(biddingEndDate,maturityDate,expiryDate),\r\n            IBinaryOptionMarket.OracleDetails(key, strikePrice, finalPrice),\r\n            IBinaryOptionMarketManager.Fees(poolFee, creatorFee, refundFee),\r\n            IBinaryOptionMarketManager.CreatorLimits(0, 0)\r\n        );\r\n\r\n        // Stack too deep otherwise.\r\n        (uint capitalRequirement, uint skewLimit) = market.creatorLimits();\r\n        data.creatorLimits = IBinaryOptionMarketManager.CreatorLimits(capitalRequirement, skewLimit);\r\n        return data;\r\n    }\r\n\r\n    function getMarketData(IBinaryOptionMarket market) public view returns (MarketData memory) {\r\n\r\n        (uint price, uint updatedAt) = market.oraclePriceAndTimestamp();\r\n        (uint longClaimable, uint shortClaimable) = market.totalClaimableSupplies();\r\n        (uint longSupply, uint shortSupply) = market.totalSupplies();\r\n        (uint longBids, uint shortBids) = market.totalBids();\r\n        (uint longPrice, uint shortPrice) = market.prices();\r\n\r\n        return MarketData(\r\n            OraclePriceAndTimestamp(price, updatedAt),\r\n            IBinaryOptionMarket.Prices(longPrice, shortPrice),\r\n            Deposits(market.deposited(), market.exercisableDeposits()),\r\n            Resolution(market.resolved(), market.canResolve()),\r\n            market.phase(),\r\n            market.result(),\r\n            OptionValues(longBids, shortBids),\r\n            OptionValues(longClaimable, shortClaimable),\r\n            OptionValues(longSupply, shortSupply)\r\n        );\r\n    }\r\n\r\n    function getAccountMarketData(IBinaryOptionMarket market, address account) public view returns (AccountData memory) {\r\n        (uint longBid, uint shortBid) = market.bidsOf(account);\r\n        (uint longClaimable, uint shortClaimable) = market.claimableBalancesOf(account);\r\n        (uint longBalance, uint shortBalance) = market.balancesOf(account);\r\n\r\n        return AccountData(\r\n            OptionValues(longBid, shortBid),\r\n            OptionValues(longClaimable, shortClaimable),\r\n            OptionValues(longBalance, shortBalance)\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IBinaryOptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountMarketData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"bids\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"claimable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"balances\",\"type\":\"tuple\"}],\"internalType\":\"struct BinaryOptionMarketData.AccountData\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IBinaryOptionMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarketData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OraclePriceAndTimestamp\",\"name\":\"oraclePriceAndTimestamp\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct IBinaryOptionMarket.Prices\",\"name\":\"prices\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exercisableDeposits\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.Deposits\",\"name\":\"deposits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canResolve\",\"type\":\"bool\"}],\"internalType\":\"struct BinaryOptionMarketData.Resolution\",\"name\":\"resolution\",\"type\":\"tuple\"},{\"internalType\":\"enum IBinaryOptionMarket.Phase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"enum IBinaryOptionMarket.Side\",\"name\":\"result\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"totalBids\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"totalClaimableSupplies\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryOptionMarketData.OptionValues\",\"name\":\"totalSupplies\",\"type\":\"tuple\"}],\"internalType\":\"struct BinaryOptionMarketData.MarketData\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IBinaryOptionMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarketParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IBinaryOption\",\"name\":\"long\",\"type\":\"address\"},{\"internalType\":\"contract IBinaryOption\",\"name\":\"short\",\"type\":\"address\"}],\"internalType\":\"struct IBinaryOptionMarket.Options\",\"name\":\"options\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"biddingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct IBinaryOptionMarket.Times\",\"name\":\"times\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IBinaryOptionMarket.OracleDetails\",\"name\":\"oracleDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IBinaryOptionMarketManager.Fees\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capitalRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skewLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IBinaryOptionMarketManager.CreatorLimits\",\"name\":\"creatorLimits\",\"type\":\"tuple\"}],\"internalType\":\"struct BinaryOptionMarketData.MarketParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BinaryOptionMarketData","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bcdd21fff1973ddab85f8cbe6cb9540a84a324f5b7a401fdde837a6858f53a3c"}]}