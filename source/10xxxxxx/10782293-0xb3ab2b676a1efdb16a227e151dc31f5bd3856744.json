{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n//--------------------------------------\r\n//  CRIPTORO Coin contract\r\n//\r\n// Symbol      : CTRO\r\n// Name        : CRIPTORO COIN\r\n// Total supply: 500000000\r\n// Decimals    : 10\r\n//--------------------------------------\r\n\r\ncontract ERC20Interface {\r\n    function changeOwnership(address newOwner) public returns(bool success);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    function vestCollaboratorToken(address to, uint256 tokens) public returns (bool success);\r\n    function collaboratorBalance(address addr) public view returns(uint256);\r\n    function unvestCollaboratorToken(address addr) public returns(uint256);\r\n    function claimVestingBenefits(address addr) public returns(bool);\r\n    function burn(uint tokens) public  returns(bool success);\r\n    \r\n \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Burn(address from, address, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library \r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); \r\n        c = a - b; \r\n    }\r\n\r\n    function safeMul(uint a, uint b) public pure returns (uint c){\r\n    c = a * b; require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract CriptoRo is ERC20Interface, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 private initialSupply;\r\n    uint256 public _totalSupply;\r\n    address public owner;\r\n    uint six_month = 182;\r\n    uint three_month = six_month / 2;\r\n    uint nine_month = six_month + three_month;\r\n    uint twelve_month = 365;\r\n    uint fifteen_month = twelve_month + three_month;\r\n    \r\n    \r\n    struct Incentive {\r\n        uint256 amt;\r\n\tuint locktime;\r\n\tuint term; //To monitor claimed incentive details.\r\n    }\r\n//-------------------------------------------------------\r\n//term = 1 => Claimed 6 months incentive\r\n//term = 2 => Claimed 9 months incentive\r\n//term = 3 => Claimed 12 months incentive\r\n//term = 4 => Claimed 15 months incentive\r\n//-------------------------------------------------------\r\n    mapping(address => uint) balances;\r\n    mapping(address => Incentive[]) vestStatus;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    constructor() public {\r\n        name = \"CRIPTORO COIN\";\r\n        symbol = \"CTRO\";\r\n        decimals = 10;\r\n        _totalSupply = 500000000 * 10 ** uint256(decimals);\r\n\t    initialSupply = _totalSupply;\r\n\t    balances[msg.sender] = _totalSupply;\r\n        owner = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n \r\n \r\n    function changeOwnership(address newOwner) public returns(bool success){\r\n          require(owner == msg.sender,'This is not owner');\r\n          require(newOwner != address(0));\r\n          owner = newOwner;\r\n          return true;\r\n        \r\n    }\r\n    function totalSupply() public view returns (uint) {\r\n        return safeSub(_totalSupply, balances[address(0)]);\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(to != address(0));\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n   function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(to != address(0));\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n   }\r\n   \r\n   //// Admin sends amount to collaborator address\r\n   function vestCollaboratorToken(address to, uint256 tokens) public returns (bool success){\r\n            require(to != address(0));\r\n            require(msg.sender == owner, \"Its not owner\");\r\n            balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n            vestStatus[to].push(Incentive(tokens, now, 0));\r\n            emit Transfer(msg.sender, to, tokens);\r\n            return true;\r\n   }\r\n    \r\n    ////check the collaborator total balance\r\n    function collaboratorBalance(address addr) public view returns(uint256) {\r\n       Incentive[] memory balanceArray = vestStatus[addr];\r\n       uint256 bal = 0;\r\n       for(uint i=0; i<balanceArray.length; i++){\r\n            bal = bal + balanceArray[i].amt;\r\n        }\r\n       return bal;\r\n    }\r\n    \r\n    function calculateIncentive(uint256 bal, uint term, uint locktime) private view returns(uint256){\r\n        uint daysPassed =  (  now - locktime) / 60 / 60 / 24;\r\n        uint256 incentive = 0;\r\n        if(daysPassed >= fifteen_month) {\r\n            incentive = (bal * 25 * (4-term) / 100);\r\n        }else if(daysPassed >= twelve_month) {\r\n            incentive = (bal * 25 * (3-term) / 100);\r\n        }else if(daysPassed >= nine_month) {\r\n            incentive = (bal * 25 * (2-term) / 100);\r\n        }else if(daysPassed >= six_month) {\r\n            incentive = (bal * 25 * (1-term) / 100);\r\n        }\r\n        return incentive;\r\n    }\r\n    \r\n    function unvestCollaboratorToken(address addr) public returns(uint256) {\r\n          require(msg.sender == owner, \"Its not owner\");\r\n         Incentive[] memory balanceArray = vestStatus[addr];\r\n         uint256 bal = 0;\r\n         uint256 incentive = 0;\r\n         uint256 totalBalance = 0;\r\n         for(uint i=0; i<balanceArray.length; i++){\r\n            uint term = balanceArray[i].term;\r\n            bal = bal + balanceArray[i].amt;\r\n            incentive = incentive + calculateIncentive(bal, term, balanceArray[i].locktime);\r\n         }\r\n         totalBalance = safeAdd(bal, incentive);\r\n         balances[owner] = safeSub(balances[owner], incentive);\r\n         balances[addr] = safeAdd(balances[addr], totalBalance);\r\n         delete vestStatus[addr];\r\n         return totalBalance;\r\n     }\r\n\r\n     function claimVestingBenefits(address addr) public returns(bool) {\r\n            Incentive[] memory balanceArray = vestStatus[addr];\r\n            uint256 incentive = 0;\r\n            uint256 bal = 0;\r\n            for(uint i=0; i<balanceArray.length; i++){\r\n                uint term = balanceArray[i].term;\r\n                bal = bal + balanceArray[i].amt;\r\n                if(term < 4) {\r\n                    uint tempIncentive = calculateIncentive(bal, term, balanceArray[i].locktime);\r\n                    if(tempIncentive != 0) {\r\n                        balanceArray[i].term = safeAdd(balanceArray[i].term, 1);\r\n                        incentive = incentive + tempIncentive;\r\n                    }\r\n                }\r\n            }\r\n            balances[owner] = safeSub(balances[owner], incentive);\r\n            balances[addr] = safeAdd(balances[addr], incentive);\r\n        \r\n        return true;\r\n     }\r\n\r\n    //Owner burns the token exclusive reserveSupply\r\n    function burn(uint tokens) public  returns(bool success){\r\n        require(owner == msg.sender,'This is not owner');\r\n        balances[msg.sender] = safeSub(balances[msg.sender],tokens);\r\n        _totalSupply = safeSub(_totalSupply,tokens);\r\n        emit Burn(msg.sender,address(0), tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n   }","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimVestingBenefits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"collaboratorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unvestCollaboratorToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"vestCollaboratorToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CriptoRo","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2bcdd6d6ec8b52d4200d17035438a74ac21ad53734e0ec926804292765611070"}]}