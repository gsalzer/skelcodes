{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IQualifyLP {\r\n    function qualified(address lpToken) external view returns(uint256);\r\n    function qualifyUniswapLP(address lpToken, address token0, address token1) external returns (bool);\r\n    function qualifyBalancerLP(address lpToken) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface BFactory {\r\n\r\n    function isBPool(address b) external view returns (bool);\r\n    function newBPool() external returns (BPool);\r\n    \r\n}\r\n\r\ninterface BPool {\r\n\r\n    function isPublicSwap() external view returns (bool);\r\n    function isFinalized() external view returns (bool);\r\n    function isBound(address t) external view returns (bool);\r\n    function getNumTokens() external view returns (uint);\r\n    function getCurrentTokens() external view returns (address[] memory tokens);\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n    function getDenormalizedWeight(address token) external view returns (uint);\r\n    function getTotalDenormalizedWeight() external view returns (uint);\r\n    function getNormalizedWeight(address token) external view returns (uint);\r\n    function getBalance(address token) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n    function getController() external view returns (address);\r\n    \r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address manager) external;\r\n    function setPublicSwap(bool external_) external;\r\n    function finalize() external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n    function unbind(address token) external;\r\n    function gulp(address token) external;\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n    \r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n\r\n    function joinswapPoolAmountOut(\r\n        address tokenIn,\r\n        uint poolAmountOut,\r\n        uint maxAmountIn\r\n    ) external returns (uint tokenAmountIn);\r\n    \r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint poolAmountIn,\r\n        uint minAmountOut\r\n    ) external returns (uint tokenAmountOut);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPoolAmountIn\r\n    ) external returns (uint poolAmountIn);\r\n    \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function allowance(address src, address dst) external view returns (uint);\r\n\r\n    function approve(address dst, uint amt) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint amt\r\n    ) external returns (bool);\r\n    \r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    ) external pure returns (uint spotPrice);\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n    \r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n    \r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountOut);\r\n    \r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n    \r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n    \r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountIn);\r\n\r\n}\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface BExchangeProxy {\r\n\r\n    struct Swap {\r\n        address pool;\r\n        uint    tokenInParam; // tokenInAmount / maxAmountIn / limitAmountIn\r\n        uint    tokenOutParam; // minAmountOut / tokenAmountOut / limitAmountOut\r\n        uint    maxPrice;\r\n    }\r\n\r\n    function batchSwapExactIn(\r\n        Swap[] memory swaps,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    ) external returns (uint totalAmountOut);\r\n    \r\n    function batchSwapExactOut(\r\n        Swap[] memory swaps,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint maxTotalAmountIn\r\n    ) external returns (uint totalAmountIn);\r\n    \r\n    function batchEthInSwapExactIn(\r\n        Swap[] memory swaps,\r\n        address tokenOut,\r\n        uint minTotalAmountOut\r\n    ) external payable returns (uint totalAmountOut);\r\n    \r\n    function batchEthOutSwapExactIn(\r\n        Swap[] memory swaps,\r\n        address tokenIn,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    ) external returns (uint totalAmountOut);\r\n    \r\n    function batchEthInSwapExactOut(\r\n        Swap[] memory swaps,\r\n        address tokenOut\r\n    ) external payable returns (uint totalAmountIn);\r\n    \r\n    function batchEthOutSwapExactOut(\r\n        Swap[] memory swaps,\r\n        address tokenIn,\r\n        uint maxTotalAmountIn\r\n    ) external returns (uint totalAmountIn);\r\n    \r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ncontract QualifyLP is IQualifyLP {\r\n    mapping(address => uint256) private lps;\r\n    uint256 constant LP_UNISWAP = 1;\r\n    uint256 constant LP_BALANCER = 2;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function qualified(address lpToken) external override view returns(uint256) {\r\n        return lps[lpToken];\r\n    }\r\n\r\n    function qualifyUniswapLP(address lpToken, address token0, address token1) external override returns (bool) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\r\n\r\n\trequire(pair.decimals() == 18);\r\n\trequire(pair.totalSupply() > 0);\r\n\trequire(token0 != token1);\r\n\trequire(pair.token0() == token0 || pair.token1() == token0);\r\n\trequire(pair.token0() == token1 || pair.token1() == token1);\r\n\r\n\t(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =\r\n\t    pair.getReserves();\r\n\trequire(reserve0 > 0);\r\n\trequire(reserve1 > 0);\r\n        require(blockTimestampLast > 0);\r\n\r\n\tlps[lpToken] = LP_UNISWAP;\r\n\r\n\treturn true;\r\n    }\r\n\r\n    function qualifyBalancerLP(address lpToken) external override returns (bool) {\r\n\tBPool bpool = BPool(lpToken);\r\n\r\n\trequire(bpool.totalSupply() > 0);\r\n\trequire(bpool.isPublicSwap() == true);\r\n\trequire(bpool.isFinalized() == true);\r\n\trequire(bpool.getNumTokens() >= 2);\r\n\trequire(bpool.getSwapFee() > 0);\r\n\r\n\tlps[lpToken] = LP_BALANCER;\r\n\r\n\treturn true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"qualified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"qualifyBalancerLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"qualifyUniswapLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"QualifyLP","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21e0c698b187ca921cf7f663e996502cc778bfd5cacdb8d0572b219a8c776bc5"}]}