{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n// For test suite\r\n\r\ncontract IAccountStorage {\r\n    function getOperationKeyCount(address _account) external view returns(uint256);\r\n    function getKeyData(address _account, uint256 _index) public view returns(address);\r\n    function getKeyStatus(address _account, uint256 _index) external view returns(uint256);\r\n\r\n    function getBackupAddress(address _account, uint256 _index) external view returns(address);\r\n    function getBackupEffectiveDate(address _account, uint256 _index) external view returns(uint256);\r\n    function getBackupExpiryDate(address _account, uint256 _index) external view returns(uint256);\r\n\r\n}\r\n\r\ncontract ILogic {\r\n    function getKeyNonce(address _key) external view returns(uint256);\r\n}\r\n\r\ncontract ILogicManager {\r\n    function getAuthorizedLogics() external view returns (address[] memory);\r\n}\r\n\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract MKStorageHelper is Owned {\r\n\r\n    address public mkStorage = 0xADc92d1fD878580579716d944eF3460E241604b7;\r\n    address public mkLogicManager = 0xDF8aC96BC9198c610285b3d1B29de09621B04528;\r\n\r\n    uint256 public maxBackup = 1;\r\n\r\n\r\n    struct KeyDataItem {\r\n        uint256 index;\r\n        address pubKey;\r\n        uint256 status;\r\n        uint256 maxNonce;\r\n    }\r\n\r\n    struct BackupDataItem {\r\n        uint256 index;\r\n        address backup;\r\n        uint256 effectiveDate;\r\n        uint256 expiryDate;\r\n    }\r\n\r\n    function getStorage() public returns(address) {\r\n        return mkStorage;\r\n    }\r\n\r\n    function setStorage(address a) public onlyOwner {\r\n        mkStorage = a;\r\n    }\r\n\r\n    function setLogicManager(address a) public onlyOwner {\r\n        mkLogicManager = a;\r\n    }\r\n\r\n    function setMaxBackup(uint256 a) public onlyOwner {\r\n        maxBackup = a;\r\n    }\r\n\r\n\r\n    function isEffectiveBackup(uint256 _effectiveDate, uint256 _expiryDate) internal view returns(bool) {\r\n        return (_effectiveDate <= now) && (_expiryDate > now);\r\n    }\r\n\r\n    /* \r\n     * \r\n     */\r\n    function getAccountData(address account) external  returns(KeyDataItem[] memory, BackupDataItem[] memory){\r\n\r\n        uint256 len = IAccountStorage(mkStorage).getOperationKeyCount(account) + 1; // admin\r\n\r\n\r\n        address[] memory logics = ILogicManager(mkLogicManager).getAuthorizedLogics();\r\n\r\n        KeyDataItem[] memory kd = new KeyDataItem[](len);\r\n        \r\n        for (uint256 i = 0; i < len; i++) {\r\n            KeyDataItem memory item;\r\n            item.index = i;\r\n            item.pubKey = IAccountStorage(mkStorage).getKeyData(account, i);\r\n            item.status = IAccountStorage(mkStorage).getKeyStatus(account, i);\r\n            item.maxNonce = 0;\r\n\r\n            // loop logics\r\n            for (uint256 j = 0; j < logics.length; j++) {\r\n                uint256 nonce = ILogic(logics[j]).getKeyNonce(item.pubKey);\r\n                if (nonce > item.maxNonce) {\r\n                    item.maxNonce = nonce;\r\n                }\r\n            }\r\n\r\n            kd[i] = item;\r\n        }\r\n\r\n\r\n        BackupDataItem[] memory bd = new BackupDataItem[](maxBackup);\r\n\r\n        for (uint256 i = 0; i < maxBackup; i++) {\r\n\r\n            BackupDataItem memory item;\r\n            item.index = i;\r\n            item.backup = IAccountStorage(mkStorage).getBackupAddress(account, i);\r\n            item.effectiveDate = IAccountStorage(mkStorage).getBackupEffectiveDate(account, i);\r\n            item.expiryDate = IAccountStorage(mkStorage).getBackupExpiryDate(account, i);\r\n            \r\n            bd[i] = item;\r\n        }\r\n\r\n\r\n        return (kd, bd);\r\n\r\n\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pubKey\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct MKStorageHelper.KeyDataItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"backup\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"internalType\":\"struct MKStorageHelper.BackupDataItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBackup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkLogicManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setLogicManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setMaxBackup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MKStorageHelper","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://89a0067b81cc20cad431c2b35626d2ccba8cb65125234a0b6b83db9e2f74ad4f"}]}