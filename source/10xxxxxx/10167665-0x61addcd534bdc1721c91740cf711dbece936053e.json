{"status":"1","message":"OK","result":[{"SourceCode":"/**\nMatic network contracts\n*/\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title PriorityQueue\n * @dev A priority queue implementation.\n */\ncontract PriorityQueue is Ownable {\n    using SafeMath for uint256;\n\n    uint256[] heapList;\n    uint256 public currentSize;\n\n    constructor() public {\n        heapList = [0];\n    }\n\n    /**\n  * @dev Inserts an element into the priority queue.\n  * @param _priority Priority to insert.\n  * @param _value Some additional value.\n  */\n    function insert(uint256 _priority, uint256 _value) public onlyOwner {\n        uint256 element = (_priority << 128) | _value;\n        heapList.push(element);\n        currentSize = currentSize.add(1);\n        _percUp(currentSize);\n    }\n\n    /**\n  * @dev Returns the top element of the heap.\n  * @return The smallest element in the priority queue.\n  */\n    function getMin() public view returns (uint256, uint256) {\n        return _splitElement(heapList[1]);\n    }\n\n    /**\n  * @dev Deletes the top element of the heap and shifts everything up.\n  * @return The smallest element in the priorty queue.\n  */\n    function delMin() public onlyOwner returns (uint256, uint256) {\n        uint256 retVal = heapList[1];\n        heapList[1] = heapList[currentSize];\n        delete heapList[currentSize];\n        currentSize = currentSize.sub(1);\n        _percDown(1);\n        heapList.length = heapList.length.sub(1);\n        return _splitElement(retVal);\n    }\n\n    /**\n  * @dev Determines the minimum child of a given node in the tree.\n  * @param _index Index of the node in the tree.\n  * @return The smallest child node.\n  */\n    function _minChild(uint256 _index) private view returns (uint256) {\n        if (_index.mul(2).add(1) > currentSize) {\n            return _index.mul(2);\n        } else {\n            if (heapList[_index.mul(2)] < heapList[_index.mul(2).add(1)]) {\n                return _index.mul(2);\n            } else {\n                return _index.mul(2).add(1);\n            }\n        }\n    }\n\n    /**\n   * @dev Bubbles the element at some index up.\n   */\n    function _percUp(uint256 _index) private {\n        uint256 index = _index;\n        uint256 j = index;\n        uint256 newVal = heapList[index];\n\n        while (newVal < heapList[index.div(2)]) {\n            heapList[index] = heapList[index.div(2)];\n            index = index.div(2);\n        }\n\n        if (index != j) {\n            heapList[index] = newVal;\n        }\n    }\n\n    /**\n   * @dev Bubbles the element at some index down.\n   */\n    function _percDown(uint256 _index) private {\n        uint256 index = _index;\n        uint256 j = index;\n        uint256 newVal = heapList[index];\n        uint256 mc = _minChild(index);\n        while (mc <= currentSize && newVal > heapList[mc]) {\n            heapList[index] = heapList[mc];\n            index = mc;\n            mc = _minChild(index);\n        }\n\n        if (index != j) {\n            heapList[index] = newVal;\n        }\n    }\n\n    /**\n   * @dev Split an element into its priority and value.\n   * @param _element Element to decode.\n   * @return A tuple containing the priority and value.\n   */\n    function _splitElement(uint256 _element)\n        private\n        pure\n        returns (uint256, uint256)\n    {\n        uint256 priority = _element >> 128;\n        uint256 value = uint256(uint128(_element));\n        return (priority, value);\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priority\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PriorityQueue","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}