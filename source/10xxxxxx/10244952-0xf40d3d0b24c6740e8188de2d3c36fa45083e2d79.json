{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract Reverter {\n    \n    constructor() public {}\n    \n    function transferEth(address payable _address, uint256 _amount, bytes memory _data)public payable{\n        // parse the amount and make sure it is acceptable\n        uint256 amount = parseAmount(_amount);\n        (bool success, ) = _address.call{ value: amount }(_data);\n        require(success);\n        // revert the transaction\n        revert();\n    }\n    function parseAmount(uint256 _amount) private view returns(uint256) {\n        uint256 amountToTransfer = _amount;\n        // for eth transfers\n        uint256 ethbalance = address(this).balance;\n        // if _amount is 0, send all balance\n        if(amountToTransfer <= 0) {\n            amountToTransfer = ethbalance;\n        }\n        require(amountToTransfer <= ethbalance);\n        return amountToTransfer;\n    }\n\n}\n\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Reverter","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}