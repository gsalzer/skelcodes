{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n    \r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint public decimals;\r\n    string public    name;\r\n    string public   symbol;\r\n    mapping(address => uint) public balances;\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    \r\n    uint public _totalSupply;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n \r\n \r\n  \r\ncontract token is ERC20{\r\n       using SafeMath for uint;\r\n       \r\n      struct Pledge{\r\n            address userAddress; \r\n            address tokenAddress;\r\n            uint investAmount;  \r\n            uint yield;         \r\n            uint lvs;           \r\n            uint createTime;    \r\n            uint dueTime;\r\n            uint fodAmount;\r\n      }  \r\n    \r\n        string public name='TDeFiOS';\r\n        string public symbol='TDeFiOS';\r\n        uint256 public decimals = 8;  \r\n        uint256 public _totalSupply; \r\n        \r\n        \r\n        \r\n        mapping(address=>uint256) public tokenRateArray;\r\n        \r\n        mapping(address => bool) public lockAddrs; \r\n        address public founder;\r\n        \r\n \r\n            address fodAddr=0xa953078A370780B89cD0aaC30558a08ecbBe131F;\r\n            uint fodDecimals=8;\r\n        \r\n            uint public minerYield=715;\r\n            mapping (address => Pledge[]) public addressToPledge;\r\n            mapping(uint=>uint) public dateToYields;\r\n            \r\n            \r\n            uint public lv1=500;\r\n            uint public lv2=2000;\r\n            uint public lv3=8000;\r\n            uint public lv4=25000;\r\n            uint public lv5=60000;\r\n            uint public lv6=120000;\r\n            \r\n            uint public lv1S=90;\r\n            uint public lv2S=91;\r\n            uint public lv3S=92;\r\n            uint public lv4S=93;\r\n            uint public lv5S=94;\r\n            uint public lv6S=95;\r\n   \r\n        \r\n        constructor(uint256 _supply) public {\r\n            dateToYields[0]=50;\r\n            dateToYields[1]=60;\r\n            dateToYields[2]=75;\r\n            dateToYields[3]=85;\r\n            dateToYields[4]=100;\r\n            \r\n            \r\n            founder = msg.sender;\r\n            _totalSupply = _supply * 10 ** uint256(decimals); \r\n            balances[msg.sender]=_totalSupply;\r\n         }\r\n         \r\n          function  setTokenRate(address _tokenAddress,uint256 rate) public  onlyOwner returns (bool) {\r\n             tokenRateArray[_tokenAddress]=rate;\r\n             return true;\r\n          }\r\n         \r\n         \r\n        function setDateToYield(uint _index,uint _yield) onlyOwner returns (bool success) {\r\n            dateToYields[_index]=_yield;\r\n            return true;\r\n        }\r\n         \r\n        function setMinerYield(uint _yield) onlyOwner returns (bool success) {\r\n            minerYield=_yield;\r\n            return true;\r\n        }\r\n         \r\n      \r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n \r\n        function totalSupply() constant returns (uint256 supply) {\r\n            return _totalSupply;\r\n        }\r\n \r\n\r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        \r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n        }\r\n \r\n \r\n         function lockAddr(address _target,bool _islock) public onlyOwner returns (bool) {\r\n            require(_target != address(0));\r\n            lockAddrs[_target] = _islock;\r\n            return true;\r\n        }\r\n    \r\n     \r\n    \r\n        function multiLockAddr(address[] _targets,bool _islock) public onlyOwner returns (bool) {\r\n            for (uint i = 0; i < _targets.length; i++) {\r\n                address _target = _targets[i];\r\n                lockAddrs[_target] = _islock;\r\n            }\r\n            return true;\r\n        }\r\n\r\n\r\n        function exchange(address _tokenAddress, uint256 _amount,uint _mode)  returns (bool success) {\r\n            \r\n            uint lvs;\r\n            if(_amount<=lv1){\r\n                lvs=lv1S;\r\n            }else if(_amount>lv1&&_amount<=lv2){\r\n                lvs=lv2S;\r\n            }else if(_amount>lv2&&_amount<=lv3){\r\n                lvs=lv3S;\r\n            }else if(_amount>lv3&&_amount<=lv4){\r\n                lvs=lv4S;\r\n            }else if(_amount>lv4&&_amount<=lv5){\r\n                lvs=lv5S;\r\n            }else if(_amount>lv5&&_amount<=lv6){\r\n                lvs=lv6S;\r\n            }\r\n            \r\n            \r\n             \r\n             ERC20 token =ERC20(_tokenAddress);\r\n             uint deci=token.decimals();\r\n             uint256 _tokenAmount=_amount* 10 ** uint256(deci); \r\n             \r\n             uint256 lockAmount=_amount* 10 ** uint256(decimals);\r\n             lockAmount=lockAmount.mul(tokenRateArray[_tokenAddress]);\r\n             lockAmount=lockAmount.div(10000);\r\n    \r\n             uint256 fodAmount;\r\n             \r\n            uint time;\r\n            if(_mode==1){\r\n                 time=604800;\r\n                 fodAmount=_amount.mul(dateToYields[_mode-1]);\r\n                 fodAmount=fodAmount.mul(minerYield).mul(lvs).div(48)* (10 ** uint256(fodDecimals)).div(10000000);\r\n            }else if(_mode==2){\r\n                 time=2592000;\r\n                 fodAmount=_amount.mul(dateToYields[_mode-1]);\r\n                 fodAmount=fodAmount.mul(minerYield).mul(lvs).div(12)* (10 ** uint256(fodDecimals)).div(10000000);\r\n            }else if(_mode==3){\r\n                 time=7776000;\r\n                 fodAmount=_amount.mul(dateToYields[_mode-1]);\r\n                 fodAmount=fodAmount.mul(minerYield).mul(lvs).div(4)* (10 ** uint256(fodDecimals)).div(10000000);\r\n            }else if(_mode==4){\r\n                 time=15552000;\r\n                 fodAmount=_amount.mul(dateToYields[_mode-1]);\r\n                 fodAmount=fodAmount.mul(minerYield).mul(lvs).div(2)* (10 ** uint256(fodDecimals)).div(10000000);\r\n            }else if(_mode==5){\r\n                 time=31104000;\r\n                 fodAmount=_amount.mul(dateToYields[_mode-1]);\r\n                 fodAmount=fodAmount.mul(minerYield).mul(lvs)* (10 ** uint256(fodDecimals)).div(10000000);\r\n            }\r\n            \r\n          \r\n            ERC20 fodToken =ERC20(fodAddr);\r\n            \r\n            require(balances[founder]>=lockAmount);\r\n            require(token.balanceOf(msg.sender)>=_tokenAmount);\r\n            require(fodToken.balanceOf(this)>=fodAmount);\r\n            \r\n\r\n            balances[founder]=balances[founder].sub(lockAmount);\r\n            balances[msg.sender]=balances[msg.sender].add(lockAmount);\r\n            emit  Transfer(founder,msg.sender,lockAmount);\r\n            \r\n            token.transferFrom(msg.sender,this,_tokenAmount);\r\n            fodToken.transfer(msg.sender,fodAmount);\r\n          \r\n\r\n            Pledge memory  pledge=Pledge(msg.sender,_tokenAddress,lockAmount,dateToYields[_mode-1],lvs,now,now+time,fodAmount);\r\n            addressToPledge[msg.sender].push(pledge);\r\n\r\n            return true;\r\n        }\r\n        \r\n      \r\n   \r\n        \r\n        function transfer(address _to, uint256 _value) public {\r\n \r\n            require(lockAddrs[msg.sender]==false);\r\n            require(balances[msg.sender] >= _value);\r\n            require(SafeMath.add(balances[_to],_value) > balances[_to]);\r\n          \r\n            uint _freeAmount = freeAmount(msg.sender);\r\n            require (_freeAmount >= _value);\r\n\r\n            balances[msg.sender]=SafeMath.sub(balances[msg.sender], _value);\r\n            balances[_to]=SafeMath.add(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        \r\n         function transferFrom(address _from, address _to, uint256 _value) {\r\n         \r\n            require(lockAddrs[_from]==false);\r\n            require(balances[_from] >= _value);\r\n            require(allowed[_from][msg.sender] >= _value);\r\n            require(balances[_to] + _value > balances[_to]);\r\n          \r\n            uint _freeAmount = freeAmount(_from);\r\n            require (_freeAmount > _value);\r\n            \r\n            balances[_to]=SafeMath.add(balances[_to],_value);\r\n            balances[_from]=SafeMath.sub(balances[_from],_value);\r\n            allowed[_from][msg.sender]=SafeMath.sub(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n\r\n        }\r\n \r\n       \r\n        function freeAmount(address _addr) constant  returns (uint256 amount) {\r\n            if (_addr == founder) {\r\n                return balances[_addr];\r\n            }\r\n            Pledge[] PledgeS=addressToPledge[_addr];\r\n            if(PledgeS.length<1){\r\n                return balances[_addr];\r\n            }else{\r\n                uint pledgeAmounts=0;\r\n                uint nowTime=now;\r\n                for(uint i=0;i<PledgeS.length;i++){\r\n                    if(nowTime<PledgeS[i].dueTime){\r\n                        pledgeAmounts=pledgeAmounts.add(PledgeS[i].investAmount);\r\n                    }\r\n                }\r\n                return balances[_addr].sub(pledgeAmounts);\r\n            }\r\n        }\r\n        \r\n    \r\n       function getAddrPledgeCount(address _addr) constant returns (uint amount) {\r\n            Pledge[] PledgeS=addressToPledge[_addr];\r\n            return PledgeS.length;\r\n        }\r\n \r\n \r\n        function withdrawToken (address _tokenAddress,address _user,uint256 _tokenAmount)public onlyOwner returns (bool) {\r\n             ERC20 token =ERC20(_tokenAddress);\r\n             token.transfer(_user,_tokenAmount);\r\n            return true;\r\n        }\r\n\r\n\r\n       \r\n\r\n        function changeFounder(address newFounder) onlyOwner{\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder; \r\n        }\r\n \r\n        modifier onlyOwner() {\r\n            require(msg.sender == founder);\r\n            _;\r\n        }\r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dateToYields\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_islock\",\"type\":\"bool\"}],\"name\":\"lockAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"setMinerYield\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRateArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv5S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv4S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"setDateToYield\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv1S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToPledge\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"investAmount\",\"type\":\"uint256\"},{\"name\":\"yield\",\"type\":\"uint256\"},{\"name\":\"lvs\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"dueTime\",\"type\":\"uint256\"},{\"name\":\"fodAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv2S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_islock\",\"type\":\"bool\"}],\"name\":\"multiLockAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAddrPledgeCount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerYield\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv3S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lv6S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"token","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000006b49d200","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c3c5068d800877ddeed372df115c242a6d923fba0adae444bb64e3e28a38fcfc"}]}