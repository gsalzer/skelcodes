{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destoys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: original_contracts/IWhitelisted.sol\n\npragma solidity 0.5.11;\n\n\ninterface IWhitelisted {\n\n    function isWhitelisted(address account) external view returns (bool);\n}\n\n// File: original_contracts/lib/IExchange.sol\n\npragma solidity 0.5.11;\n\n\n\n/**\n* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\n*/\ninterface IExchange {\n\n    /**\n   * @dev The function which performs the swap on an exchange.\n   * Exchange needs to implement this method in order to support swapping of tokens through it\n   * @param fromToken Address of the source token\n   * @param toToken Address of the destination token\n   * @param fromAmount Amount of source tokens to be swapped\n   * @param toAmount Minimum destination token amount expected out of this swap\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\n   */\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 fromAmount,\n        uint256 toAmount,\n        address exchange,\n        bytes calldata payload) external payable returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: original_contracts/ITokenTransferProxy.sol\n\npragma solidity 0.5.11;\n\n\ninterface ITokenTransferProxy {\n\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    function freeGSTTokens(uint256 tokensToFree) external;\n}\n\n// File: original_contracts/lib/Utils.sol\n\npragma solidity 0.5.11;\n\n\n\n\n\n\n\nlibrary Utils {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address constant ETH_ADDRESS = address(\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n    );\n\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\n\n    struct Route {\n        address payable exchange;\n        address targetExchange;\n        uint percent;\n        bytes payload;\n        uint256 networkFee;\n    }\n\n    struct Path {\n        address to;\n        Route[] routes;\n    }\n\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\n\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\n\n    function approve(\n        address addressToApprove,\n        address token\n    ) internal {\n        if (token != ETH_ADDRESS) {\n            IERC20 _token = IERC20(token);\n\n            uint allowance = _token.allowance(address(this), addressToApprove);\n\n            if (allowance < MAX_UINT / 10) {\n                _token.safeApprove(addressToApprove, MAX_UINT);\n            }\n        }\n    }\n\n    function transferTokens(\n        address token,\n        address payable destination,\n        uint256 amount\n    )\n    internal\n    {\n        if (token == ETH_ADDRESS) {\n            destination.transfer(amount);\n        }\n        else {\n            IERC20(token).safeTransfer(destination, amount);\n        }\n    }\n\n    function tokenBalance(\n        address token,\n        address account\n    )\n    internal\n    view\n    returns (uint256)\n    {\n        if (token == ETH_ADDRESS) {\n            return account.balance;\n        } else {\n            return IERC20(token).balanceOf(account);\n        }\n    }\n\n    /**\n    * @dev Helper method to refund gas using gas tokens\n    */\n    function refundGas(address tokenProxy, uint256 initialGas, uint256 mintPrice) internal {\n\n        uint256 mintBase = 32254;\n        uint256 mintToken = 36543;\n        uint256 freeBase = 14154;\n        uint256 freeToken = 6870;\n        uint256 reimburse = 24000;\n\n        uint256 tokens = initialGas.sub(\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\n        );\n\n        uint256 mintCost = mintBase.add(tokens.mul(mintToken));\n        uint256 freeCost = freeBase.add(tokens.mul(freeToken));\n        uint256 maxreimburse = tokens.mul(reimburse);\n\n        uint256 efficiency = maxreimburse.mul(tx.gasprice).mul(100).div(\n            mintCost.mul(mintPrice).add(freeCost.mul(tx.gasprice))\n        );\n\n        if (efficiency > 100) {\n            freeGasTokens(tokenProxy, tokens);\n        }\n    }\n    \n    /**\n    * @dev Helper method to free gas tokens\n    */\n    function freeGasTokens(address tokenProxy, uint256 tokens) internal {\n\n        uint256 tokensToFree = tokens;\n        uint256 safeNumTokens = 0;\n        uint256 gas = gasleft();\n\n        if (gas >= 27710) {\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\n        }\n\n        if (tokensToFree > safeNumTokens) {\n            tokensToFree = safeNumTokens;\n        }\n\n        ITokenTransferProxy(tokenProxy).freeGSTTokens(tokensToFree);\n\n    }\n}\n\n// File: original_contracts/IGST2.sol\n\npragma solidity 0.5.11;\n\ninterface IGST2 {\n\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(uint256 value) external;\n}\n\n// File: original_contracts/TokenTransferProxy.sol\n\npragma solidity 0.5.11;\n\n\n\n\n\n\n/**\n* @dev Allows owner of the contract to transfer tokens on behalf of user.\n* User will need to approve this contract to spend tokens on his/her behalf\n* on Paraswap platform\n*/\ncontract TokenTransferProxy is Ownable {\n    using SafeERC20 for IERC20;\n\n    IGST2 private _gst2;\n\n    address private _gstHolder;\n\n    constructor(address gst2, address gstHolder) public {\n        _gst2 = IGST2(gst2);\n        _gstHolder = gstHolder;\n    }\n\n    function getGSTHolder() external view returns(address) {\n        return _gstHolder;\n    }\n\n    function getGST() external view returns(address) {\n        return address(_gst2);\n    }\n\n    function changeGSTTokenHolder(address gstHolder) external onlyOwner {\n        _gstHolder = gstHolder;\n\n    }\n\n    /**\n    * @dev Allows owner of the contract to transfer tokens on user's behalf\n    * @dev Swapper contract will be the owner of this contract\n    * @param token Address of the token\n    * @param from Address from which tokens will be transferred\n    * @param to Receipent address of the tokens\n    * @param amount Amount of tokens to transfer\n    */\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        onlyOwner\n    {\n        IERC20(token).safeTransferFrom(from, to, amount);\n    }\n\n    function freeGSTTokens(uint256 tokensToFree) external onlyOwner {\n        _gst2.freeFromUpTo(_gstHolder, tokensToFree);\n    }\n\n}\n\n// File: original_contracts/IPartnerRegistry.sol\n\npragma solidity 0.5.11;\n\n\ninterface IPartnerRegistry {\n\n    function getPartnerContract(string calldata referralId) external view returns(address);\n\n    function addPartner(\n        string calldata referralId,\n        address feeWallet,\n        uint256 fee,\n        uint256 paraswapShare,\n        uint256 partnerShare,\n        address owner\n    )\n        external;\n\n    function removePartner(string calldata referralId) external;\n}\n\n// File: original_contracts/IPartner.sol\n\npragma solidity 0.5.11;\n\n\ninterface IPartner {\n\n    function getReferralId() external view returns(string memory);\n\n    function getFeeWallet() external view returns(address payable);\n\n    function getFee() external view returns(uint256);\n\n    function getPartnerShare() external returns(uint256);\n\n    function getParaswapShare() external returns(uint256);\n\n    function changeFeeWallet(address payable feeWallet) external;\n\n    function changeFee(uint256 newFee) external;\n}\n\n// File: original_contracts/AugustusSwapper.sol\n\npragma solidity 0.5.11;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\n\n\n\n\ncontract AugustusSwapper is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    TokenTransferProxy private _tokenTransferProxy;\n\n    bool private _paused;\n\n    IWhitelisted private _whitelisted;\n\n    IPartnerRegistry private _partnerRegistry;\n    address payable private _feeWallet;\n\n    event Paused();\n    event Unpaused();\n\n    event Swapped(\n        address initiator,\n        address indexed beneficiary,\n        address indexed srcToken,\n        address indexed destToken,\n        uint256 srcAmount,\n        uint256 receivedAmount,\n        uint256 expectedAmount,\n        string referrer\n    );\n\n    event Donation(address indexed receiver, uint256 donationPercentage);\n\n    event FeeTaken(\n        uint256 fee,\n        uint256 partnerShare,\n        uint256 paraswapShare\n    );\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    constructor(\n        address whitelist,\n        address gasToken,\n        address partnerRegistry,\n        address payable feeWallet,\n        address gstHolder\n    )\n        public\n    {\n\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\n        _tokenTransferProxy = new TokenTransferProxy(gasToken, gstHolder);\n        _whitelisted = IWhitelisted(whitelist);\n        _feeWallet = feeWallet;\n    }\n\n    /**\n    * @dev Fallback method to allow exchanges to transfer back ethers for a particular swap\n    * It will only allow contracts to send funds to it\n    */\n    function() external payable whenNotPaused {\n        address account = msg.sender;\n        require(\n            account.isContract(),\n            \"Sender is not a contract\"\n        );\n    }\n    \n    function getPartnerRegistry() external view returns(address) {\n        return address(_partnerRegistry);\n    }\n\n    function getWhitelistAddress() external view returns(address) {\n        return address(_whitelisted);\n    }\n\n    function getFeeWallet() external view returns(address) {\n        return _feeWallet;\n    }\n\n    function setFeeWallet(address payable feeWallet) external onlyOwner {\n        require(feeWallet != address(0), \"Invalid address\");\n        _feeWallet = feeWallet;\n    }\n\n    function setPartnerRegistry(address partnerRegistry) external onlyOwner {\n        require(partnerRegistry != address(0), \"Invalid address\");\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\n    }\n\n    function setWhitelistAddress(address whitelisted) external onlyOwner {\n        require(whitelisted != address(0), \"Invalid whitelist address\");\n        _whitelisted = IWhitelisted(whitelisted);\n    }\n\n    function getTokenTransferProxy() external view returns (address) {\n        return address(_tokenTransferProxy);\n    }\n\n    function changeGSTHolder(address gstHolder) external onlyOwner {\n        require(gstHolder != address(0), \"Invalid address\");\n        _tokenTransferProxy.changeGSTTokenHolder(gstHolder);\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused();\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() external onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused();\n    }\n\n    /**\n    * @dev Allows owner of the contract to transfer tokens any tokens which are assigned to the contract\n    * This method is for saftey if by any chance tokens or ETHs are assigned to the contract by mistake\n    * @dev token Address of the token to be transferred\n    * @dev destination Recepient of the token\n    * @dev amount Amount of tokens to be transferred\n    */\n    function ownerTransferTokens(\n        address token,\n        address payable destination,\n        uint256 amount\n    )\n    external\n    onlyOwner\n    {\n        Utils.transferTokens(token, destination, amount);\n    }\n\n    /**\n   * @dev The function which performs the multi path swap.\n   * @param fromToken Address of the source token\n   * @param toToken Address of the destination token\n   * @param fromAmount Amount of source tokens to be swapped\n   * @param toAmount Minimum destination token amount expected out of this swap\n   * @param expectedAmount Expected amount of destination tokens without slippage\n   * @param path Route to be taken for this swap to take place\n   * @param mintPrice Price of gas at the time of minting of gas tokens, if any. In wei. 0 means gas token will not be used\n   * @param beneficiary Beneficiary address\n   * @param donationPercentage Percentage of returned amount to be transferred to beneficiary, if beneficiary is available. If this is passed as\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\n   * @param referrer referral id\n   */\n    function multiSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 fromAmount,\n        uint256 toAmount,\n        uint256 expectedAmount,\n        Utils.Path[] memory path,\n        uint256 mintPrice,\n        address payable beneficiary,\n        uint256 donationPercentage,\n        string memory referrer\n    )\n        public\n        payable\n        whenNotPaused\n        returns (uint256)\n    {\n        //Referral id can never be empty\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n        require(donationPercentage <= 10000, \"Invalid value\");\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n        uint256 receivedAmount = performSwap(\n            fromToken,\n            toToken,\n            fromAmount,\n            toAmount,\n            path,\n            mintPrice\n        );\n\n        takeFeeAndTransferTokens(\n            toToken,\n            toAmount,\n            receivedAmount,\n            beneficiary,\n            donationPercentage,\n            referrer\n        );\n\n        //If any ether is left at this point then we transfer it back to the user\n        uint256 remEthBalance = Utils.tokenBalance(\n            Utils.ethAddress(),\n            address(this)\n        );\n        if ( remEthBalance > 0) {\n            msg.sender.transfer(remEthBalance);\n        }\n\n        //Contract should not have any remaining balance after entire execution\n        require(\n            Utils.tokenBalance(address(toToken), address(this)) == 0,\n            \"Destination tokens are stuck\"\n        );\n\n        emit Swapped(\n            msg.sender,\n            beneficiary == address(0)?msg.sender:beneficiary,\n            address(fromToken),\n            address(toToken),\n            fromAmount,\n            receivedAmount,\n            expectedAmount,\n            referrer\n        );\n\n        return receivedAmount;\n    }\n\n    //Helper function to transfer final amount to the beneficiaries\n    function takeFeeAndTransferTokens(\n        IERC20 toToken,\n        uint256 toAmount,\n        uint256 receivedAmount,\n        address payable beneficiary,\n        uint256 donationPercentage,\n        string memory referrer\n\n    )\n        private\n    {\n        uint256 remainingAmount = receivedAmount;\n\n        //Take partner fee\n        uint256 fee = _takeFee(\n            toToken,\n            receivedAmount,\n            referrer\n        );\n        remainingAmount = receivedAmount.sub(fee);\n\n        //If beneficiary is not a 0 address then it means it is a transfer transaction\n        if (beneficiary == address(0)){\n            Utils.transferTokens(address(toToken), msg.sender, remainingAmount);\n        }\n        else {\n            //Extra check of < 100 is made to ensure that in case of 100% we do not send\n            //un-necessary transfer call to the msg.sender. This will save some gas\n            if (donationPercentage > 0 && donationPercentage < 10000){\n\n                //Keep donation amount with the contract and send rest to the msg.sender\n                uint256 donationAmount = remainingAmount.mul(donationPercentage).div(10000);\n\n                Utils.transferTokens(\n                    address(toToken),\n                    msg.sender,\n                    remainingAmount.sub(donationAmount)\n                );\n\n                remainingAmount = donationAmount;\n            }\n\n            //we will fire donation event if donationPercentage is > 0 even if it is 100%\n            if (donationPercentage > 0) {\n                emit Donation(beneficiary, donationPercentage);\n            }\n\n            Utils.transferTokens(address(toToken), beneficiary, remainingAmount);\n        }\n\n    }\n\n    //Helper function to perform swap\n    function performSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 fromAmount,\n        uint256 toAmount,\n        Utils.Path[] memory path,\n        uint256 mintPrice\n    )\n        private\n        returns(uint256)\n    {\n        uint initialGas = gasleft();\n\n        uint _fromAmount = fromAmount;\n\n        require(path.length > 0, \"Path not provided for swap\");\n        require(\n            path[path.length - 1].to == address(toToken),\n            \"Last to token does not match toToken\"\n        );\n\n        //if fromToken is not ETH then transfer tokens from user to this contract\n        if (address(fromToken) != Utils.ethAddress()) {\n            _tokenTransferProxy.transferFrom(\n                address(fromToken),\n                msg.sender,\n                address(this),\n                fromAmount\n            );\n        }\n\n        //Assuming path will not be too long to reach out of gas exception\n        for (uint i = 0; i < path.length; i++) {\n            //_fromToken will be either fromToken of toToken of the previous path\n            IERC20 _fromToken = i > 0 ? IERC20(path[i - 1].to) : IERC20(fromToken);\n            IERC20 _toToken = IERC20(path[i].to);\n\n            uint256 initialFromBalance = Utils.tokenBalance(address(_fromToken), address(this)).sub(_fromAmount);\n\n            for (uint j = 0; j < path[i].routes.length; j++) {\n                Utils.Route memory route = path[i].routes[j];\n\n                //Calculating tokens to be passed to the relevant exchange\n                //percentage should be 200 for 2%\n                uint fromAmountSlice = _fromAmount.mul(route.percent).div(10000);\n                uint256 value = route.networkFee;\n\n                if (j == path[i].routes.length.sub(1)) {\n                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\n\n                    fromAmountSlice = remBal;\n\n                    if (address(_fromToken) == Utils.ethAddress()) {\n                        //subtract network fee\n                        fromAmountSlice = fromAmountSlice.sub(value);\n                    }\n                }\n\n                //Check if exchange is supported\n                require(_whitelisted.isWhitelisted(route.exchange), \"Exchange not whitelisted\");\n\n                IExchange dex = IExchange(route.exchange);\n\n                Utils.approve(route.exchange, address(_fromToken));\n\n                uint256 initialExchangeFromBalance = Utils.tokenBalance(address(_fromToken), route.exchange);\n                uint256 initialExchangeToBalance = Utils.tokenBalance(address(_toToken), route.exchange);\n\n                //Call to the exchange\n                if (address(_fromToken) == Utils.ethAddress()) {\n                    value = value.add(fromAmountSlice);\n\n                    dex.swap.value(value)(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\n                }\n                else {\n                    _fromToken.safeTransfer(route.exchange, fromAmountSlice);\n\n                    dex.swap.value(value)(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\n                }\n\n                require(\n                    Utils.tokenBalance(address(_toToken), route.exchange) <= initialExchangeToBalance,\n                    \"Destination tokens are stuck in exchange\"\n                );\n                require(\n                    Utils.tokenBalance(address(_fromToken), route.exchange) <= initialExchangeFromBalance,\n                    \"Source tokens are stuck in exchange\"\n                );\n            }\n\n            _fromAmount = Utils.tokenBalance(address(_toToken), address(this));\n\n            //Contract should not have any remaining balance after execution\n            require(\n                Utils.tokenBalance(address(_fromToken), address(this)) <= initialFromBalance,\n                \"From tokens are stuck\"\n            );\n        }\n\n        uint256 receivedAmount = Utils.tokenBalance(address(toToken), address(this));\n        require(\n            receivedAmount >= toAmount,\n            \"Received amount of tokens are less then expected\"\n        );\n\n        if (mintPrice > 0) {\n            Utils.refundGas(address(_tokenTransferProxy), initialGas, mintPrice);\n        }\n        return receivedAmount;\n    }\n\n    function _takeFee(\n        IERC20 toToken,\n        uint256 receivedAmount,\n        string memory referrer\n    )\n        private\n        returns(uint256)\n    {\n        address partnerContract = _partnerRegistry.getPartnerContract(referrer);\n\n        //If there is no partner associated with the referral id then no fee will be taken\n        if (partnerContract == address(0)) {\n            return 0;\n        }\n\n        uint256 feePercent = IPartner(partnerContract).getFee();\n        uint256 partnerSharePercent = IPartner(partnerContract).getPartnerShare();\n        address payable partnerFeeWallet = IPartner(partnerContract).getFeeWallet();\n\n        //Calculate total fee to be taken\n        uint256 fee = receivedAmount.mul(feePercent).div(10000);\n        //Calculate partner's share\n        uint256 partnerShare = fee.mul(partnerSharePercent).div(10000);\n        //All remaining fee is paraswap's share\n        uint256 paraswapShare = fee.sub(partnerShare);\n\n        Utils.transferTokens(address(toToken), partnerFeeWallet, partnerShare);\n        Utils.transferTokens(address(toToken), _feeWallet, paraswapShare);\n\n        emit FeeTaken(fee, partnerShare, paraswapShare);\n        return fee;\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"}],\"name\":\"setPartnerRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartnerRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donationPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"multiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gstHolder\",\"type\":\"address\"}],\"name\":\"changeGSTHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gstHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationPercentage\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AugustusSwapper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bfa04fa0ee5e844a27f350c3ddeadf2d0d2567870000000000000000000000000000000000b3f879cb30fe243b4dfee438691c040000000000000000000000009e489e4e7e6c41d6ef92571f7e6f27d02113a9960000000000000000000000007f0af2bdfccbfdb0704dcc155f4a9453d20972890000000000000000000000007f0af2bdfccbfdb0704dcc155f4a9453d2097289","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}