{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-25\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ZrxAllowlist {\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public;\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool);\r\n}\r\n\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\r\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\r\n    function swapTokenToToken(address _src, address _dest, uint _amount) external payable returns(uint);\r\n\r\n    function getExpectedRate(address src, address dest, uint srcQty) external view\r\n        returns (uint expectedRate);\r\n}\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SaverExchangeConstantAddresses {\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant KYBER_WRAPPER = 0x173ef10a2739bd7aF34b4FBC0cB0Af58B079e2B0;\r\n    address public constant UNISWAP_WRAPPER = 0xac996670326402FA1042Eb0C57f19a9d1A586FF1;\r\n    address public constant OASIS_WRAPPER = 0x27152454462aaad2555e4B70DEAa00782F23213d;\r\n\r\n    \r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n}\r\n\r\ncontract Discount {\r\n\r\n    address public owner;\r\n    mapping (address => CustomServiceFee) public serviceFees;\r\n\r\n    uint constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({\r\n            active: true,\r\n            amount: _fee\r\n        });\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({\r\n            active: false,\r\n            amount: 0\r\n        });\r\n    }\r\n}\r\n\r\ncontract SaverExchange is DSMath, SaverExchangeConstantAddresses {\r\n\r\n    uint public constant SERVICE_FEE = 800; \r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x019739e288973F92bDD3c1d87178E206E51fd911;\r\n\r\n\r\n    event Swap(address src, address dest, uint amountSold, uint amountBought, address wrapper);\r\n\r\n    function swapTokenToToken(address _src, address _dest, uint _amount, uint _minPrice, uint _exchangeType, address _exchangeAddress, bytes memory _callData, uint _0xPrice) public payable {\r\n        if (_src == KYBER_ETH_ADDRESS) {\r\n            require(msg.value >= _amount, \"msg.value smaller than amount\");\r\n        } else {\r\n            require(ERC20(_src).transferFrom(msg.sender, address(this), _amount), \"Not able to withdraw wanted amount\");\r\n        }\r\n\r\n        uint fee = takeFee(_amount, _src);\r\n        _amount = sub(_amount, fee);\r\n        uint tokensReturned;\r\n        address wrapper;\r\n        uint price;\r\n        bool success;\r\n\r\n        if (_exchangeType == 4) {\r\n            if (_src != KYBER_ETH_ADDRESS) {\r\n                ERC20(_src).approve(address(ERC20_PROXY_0X), _amount);\r\n            }\r\n\r\n            (success, tokensReturned) = takeOrder(_exchangeAddress, _callData, address(this).balance, _dest);\r\n            \r\n            require(success && tokensReturned > 0, \"0x transaction failed\");\r\n            wrapper = address(_exchangeAddress);\r\n        }\r\n\r\n        if (tokensReturned == 0) {\r\n            (wrapper, price) = getBestPrice(_amount, _src, _dest, _exchangeType);\r\n\r\n            require(price > _minPrice || _0xPrice > _minPrice, \"Slippage hit\");\r\n\r\n            \r\n            if (_0xPrice >= price) {\r\n                if (_src != KYBER_ETH_ADDRESS) {\r\n                    ERC20(_src).approve(address(ERC20_PROXY_0X), _amount);\r\n                }\r\n                (success, tokensReturned) = takeOrder(_exchangeAddress, _callData, address(this).balance, _dest);\r\n                \r\n                if (success && tokensReturned > 0) {\r\n                    wrapper = address(_exchangeAddress);\r\n                }\r\n            }\r\n\r\n            if (tokensReturned == 0) {\r\n                \r\n                require(price > _minPrice, \"Slippage hit onchain price\");\r\n                if (_src == KYBER_ETH_ADDRESS) {\r\n                    (tokensReturned,) = ExchangeInterface(wrapper).swapEtherToToken.value(_amount)(_amount, _dest, uint(-1));\r\n                } else {\r\n                    ERC20(_src).transfer(wrapper, _amount);\r\n\r\n                    if (_dest == KYBER_ETH_ADDRESS) {\r\n                        tokensReturned = ExchangeInterface(wrapper).swapTokenToEther(_src, _amount, uint(-1));\r\n                    } else {\r\n                        tokensReturned = ExchangeInterface(wrapper).swapTokenToToken(_src, _dest, _amount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n\r\n        \r\n        if (_dest != KYBER_ETH_ADDRESS) {\r\n            if (ERC20(_dest).balanceOf(address(this)) > 0) {\r\n                ERC20(_dest).transfer(msg.sender, ERC20(_dest).balanceOf(address(this)));\r\n            }\r\n        }\r\n\r\n        if (_src != KYBER_ETH_ADDRESS) {\r\n            if (ERC20(_src).balanceOf(address(this)) > 0) {\r\n                ERC20(_src).transfer(msg.sender, ERC20(_src).balanceOf(address(this)));\r\n            }\r\n        }\r\n\r\n        emit Swap(_src, _dest, _amount, tokensReturned, wrapper);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function takeOrder(address _exchange, bytes memory _data, uint _value, address _dest) private returns(bool, uint) {\r\n        bool success;\r\n\r\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exchange)) {\r\n            (success, ) = _exchange.call.value(_value)(_data);\r\n        } else {\r\n            success = false;\r\n        }\r\n\r\n        uint tokensReturned = 0;\r\n        if (success){\r\n            if (_dest == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\r\n                tokensReturned = address(this).balance;\r\n            } else {\r\n                tokensReturned = ERC20(_dest).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return (success, tokensReturned);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getBestPrice(uint _amount, address _srcToken, address _destToken, uint _exchangeType) public returns (address, uint) {\r\n        uint expectedRateKyber;\r\n        uint expectedRateUniswap;\r\n        uint expectedRateOasis;\r\n\r\n\r\n        if (_exchangeType == 1) {\r\n            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount));\r\n        }\r\n\r\n        if (_exchangeType == 2) {\r\n            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount));\r\n        }\r\n\r\n        if (_exchangeType == 3) {\r\n            expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\r\n            expectedRateUniswap = expectedRateUniswap * (10 ** (18 - getDecimals(_destToken)));\r\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\r\n        }\r\n\r\n        if (_exchangeType != 5) {\r\n            expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount);\r\n        }\r\n        expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\r\n        expectedRateUniswap = expectedRateUniswap * (10 ** (18 - getDecimals(_destToken)));\r\n        expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount);\r\n        expectedRateOasis = expectedRateOasis * (10 ** (18 - getDecimals(_destToken)));\r\n\r\n        if ((expectedRateKyber >= expectedRateUniswap) && (expectedRateKyber >= expectedRateOasis)) {\r\n            return (KYBER_WRAPPER, expectedRateKyber);\r\n        }\r\n\r\n        if ((expectedRateOasis >= expectedRateKyber) && (expectedRateOasis >= expectedRateUniswap)) {\r\n            return (OASIS_WRAPPER, expectedRateOasis);\r\n        }\r\n\r\n        if ((expectedRateUniswap >= expectedRateKyber) && (expectedRateUniswap >= expectedRateOasis)) {\r\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\r\n        }\r\n    }\r\n\r\n    function getExpectedRate(address _wrapper, address _srcToken, address _destToken, uint _amount) public returns(uint) {\r\n        bool success;\r\n        bytes memory result;\r\n\r\n        (success, result) = _wrapper.call(abi.encodeWithSignature(\"getExpectedRate(address,address,uint256)\", _srcToken, _destToken, _amount));\r\n\r\n        if (success) {\r\n            return sliceUint(result, 0);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function takeFee(uint _amount, address _token) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(msg.sender)) {\r\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(msg.sender);\r\n        }\r\n\r\n        if (fee == 0) {\r\n            feeAmount = 0;\r\n        } else {\r\n            feeAmount = _amount / SERVICE_FEE;\r\n            if (_token == KYBER_ETH_ADDRESS) {\r\n                WALLET_ID.transfer(feeAmount);\r\n            } else {\r\n                ERC20(_token).transfer(WALLET_ID, feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getDecimals(address _token) internal view returns(uint) {\r\n        \r\n        if (_token == address(0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A)) {\r\n            return 9;\r\n        }\r\n        \r\n        if (_token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n            return 6;\r\n        }\r\n        \r\n        if (_token == address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {\r\n            return 8;\r\n        }\r\n\r\n        return 18;\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint start) internal pure returns (uint) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    \r\n    function() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeType\",\"type\":\"uint256\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_0xPrice\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"SaverExchange","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5942ba502baa56707587aee25e0f740d083e8b71392ca37c154d57a3c078f6f4"}]}