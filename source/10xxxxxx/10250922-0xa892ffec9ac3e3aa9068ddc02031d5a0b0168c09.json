{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        \r\n\t    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address owner, address buyer, uint numTokens) external;\r\n    function approve(address delegate, uint numTokens) external;\r\n}\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    \r\n    \r\n    // public\r\n    address payable public ownerWallet;\r\n    mapping(address => uint256) public balanceOf;\r\n    token public reward;\r\n    \r\n    \r\n    // protected\r\n    uint256 internal stage_ = 0;\r\n    mapping (uint256 => uint256) internal totalHolders;\r\n    mapping (uint256 => uint256) internal totalSold;\r\n    mapping (uint256 => uint256) internal totalEth;\r\n    \r\n    \r\n    // vars\r\n    uint256 price_ = 1 szabo;\r\n    uint256 MAX_UINT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    \r\n    \r\n    /**\r\n     * Internal setters\r\n     */\r\n     \r\n    // Setter for token reward\r\n    function setReward(address tokenAddress) internal\r\n    {\r\n        require(msg.sender == ownerWallet);\r\n        \r\n        reward = token(tokenAddress);\r\n    }\r\n    \r\n    // Setting counters for stage\r\n    function setCounters(uint256 holders, uint256 sold, uint256 eth) internal\r\n    {\r\n        totalHolders[stage_] = holders;\r\n        totalSold[stage_] = sold;\r\n        totalEth[stage_] = eth;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Public setters\r\n     */\r\n     \r\n    // Price setter for owner only\r\n    function setPrice(uint256 price) public\r\n    {\r\n        require(msg.sender == ownerWallet);\r\n        require(price > 0);\r\n        require(price <= MAX_UINT);\r\n        \r\n        price_ = price * 1 szabo;\r\n    }\r\n\r\n    // Next stage trigger for owner only\r\n    function nextStage() public\r\n    {\r\n        require(msg.sender == ownerWallet);\r\n        \r\n        stage_ = SafeMath.add(stage_, 1);\r\n        \r\n        // Reset counters\r\n        setCounters(0, 0, 0);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Internal array getters\r\n     */\r\n     \r\n    function getSoldArray() internal view returns (uint256[] memory)\r\n    {\r\n        uint256[] memory memoryArray = new uint256[](stage_);\r\n        for(uint256 i = 0; i < stage_; i++) {\r\n            memoryArray[i] = totalSold[i+1];\r\n        }\r\n        return memoryArray;\r\n    }\r\n    \r\n    function getEthArray() internal view returns (uint256[] memory)\r\n    {\r\n        uint256[] memory memoryArray = new uint256[](stage_);\r\n        for(uint256 i = 0; i < stage_; i++) {\r\n            memoryArray[i] = totalEth[i+1];\r\n        }\r\n        return memoryArray;\r\n    }\r\n    \r\n    function getHoldersArray() internal view returns (uint256[] memory)\r\n    {\r\n        uint256[] memory memoryArray = new uint256[](stage_);\r\n        for(uint256 i = 0; i < stage_; i++) {\r\n            memoryArray[i] = totalHolders[i+1];\r\n        }\r\n        return memoryArray;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Public views\r\n     */\r\n     \r\n    // Public price getter\r\n    function price() public view returns (uint256)\r\n    {\r\n        return price_;\r\n    }\r\n    \r\n    // Public counter getter\r\n    function getCounters() public view returns (uint256[] memory, uint256[] memory, uint256[] memory)  {\r\n        return (getSoldArray(), getEthArray(), getHoldersArray());\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     */\r\n    constructor(\r\n        address payable ownerAddress,\r\n        uint256 startPrice,\r\n        address tokenAddress\r\n    ) public {\r\n        // Require owner address and startPrice\r\n        require(startPrice > 0);\r\n        // Set owner\r\n        ownerWallet = ownerAddress;\r\n        // Set token reward\r\n        setReward(tokenAddress);\r\n        // Set start price\r\n        setPrice(startPrice);\r\n        \r\n        // Starting stage\r\n        nextStage();\r\n    }\r\n\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () external payable {\r\n        require (msg.value < MAX_UINT);\r\n        require (msg.value >= price_);\r\n        \r\n        uint amount = msg.value;\r\n        // Calculate token amount\r\n        uint tokenAmount = SafeMath.div(amount, price_);\r\n        \r\n        // Modify counters\r\n        if (balanceOf[msg.sender] == 0) {\r\n            totalHolders[stage_] = SafeMath.add(totalHolders[stage_], 1);\r\n        }\r\n        totalSold[stage_] = SafeMath.add(totalSold[stage_], tokenAmount);\r\n        totalEth[stage_] = SafeMath.add(totalEth[stage_], amount);\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender] + amount;\r\n        emit FundTransfer(msg.sender, amount, true);\r\n        \r\n        ownerWallet.transfer(amount);\r\n        reward.transferFrom(ownerWallet, msg.sender, tokenAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCounters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007fc121e691b3450e2213f241addb00018452130100000000000000000000000000000000000000000000000000000000000007d00000000000000000000000003e083d08ada591fe5356c52fbb89fe725fd9d670","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7bf5457abe4f2bef1b3845f2cb29d60dbfde490ef3617b50532833b031a11765"}]}