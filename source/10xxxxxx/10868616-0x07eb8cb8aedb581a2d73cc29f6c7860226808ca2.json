{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function mint(address account, uint amount) external;\r\n\r\n    function burn(uint amount) external;\r\n\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /** YFV, vUSD, vETH has minters **/\r\n    function minters(address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success,) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function maxAcceptAmount(address) external view returns (uint256);\r\n    function doHardWork(address, uint256) external;\r\n    function yfvInsuranceFund() external view returns (address);\r\n    function performanceReward() external view returns (address);\r\n}\r\n\r\ninterface IYFVReferral {\r\n    function setReferrer(address farmer, address referrer) external;\r\n    function getReferrer(address farmer) external view returns (address);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ncontract YFVGovernanceVault {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    IERC20 public yfv; // stake token\r\n    IERC20 public value; // reward token\r\n    IERC20 public vUSD; // reward token\r\n    IERC20 public vETH; // reward token\r\n\r\n    uint256 public fundCap = 9500; // use up to 95% of fund (to keep small withdrawals cheap)\r\n    uint256 public constant FUND_CAP_DENOMINATOR = 10000;\r\n\r\n    uint256 public earnLowerlimit;\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public rewardReferral;\r\n\r\n    struct Staker {\r\n        uint256 stake;\r\n        uint256 payout;\r\n        uint256 total_out;\r\n    }\r\n\r\n    mapping(address => Staker) public stakers; // stakerAddress -> staker's info\r\n\r\n    struct Global {\r\n        uint256 total_stake;\r\n        uint256 total_out;\r\n        uint256 earnings_per_share;\r\n    }\r\n\r\n    Global public global; // global data\r\n    uint256 constant internal magnitude = 10 ** 40;\r\n\r\n    string public getName;\r\n\r\n    uint256 public vETH_REWARD_FRACTION_RATE = 1000;\r\n\r\n    uint256 public constant DURATION = 7 days;\r\n    uint8 public constant NUMBER_EPOCHS = 36;\r\n\r\n    uint256 public constant REFERRAL_COMMISSION_PERCENT = 1;\r\n\r\n    uint256 public currentEpochReward = 0;\r\n    uint256 public totalAccumulatedReward = 0;\r\n    uint8 public currentEpoch = 0;\r\n    uint256 public starttime = 1598968800; // Tuesday, September 1, 2020 2:00:00 PM (GMT+0)\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public valueRewardRateMultipler = 0;\r\n    bool public isOpened;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    uint256 public constant DEFAULT_EPOCH_REWARD = 230000 * (10 ** 9); // 230,000 vUSD (and 230 vETH)\r\n    uint256 public constant TOTAL_REWARD = DEFAULT_EPOCH_REWARD * NUMBER_EPOCHS; // 8,740,000 vUSD (and 8,740 vETH)\r\n    uint256 public constant DEFAULT_VALUE_EPOCH_REWARD = 23000 * (10 ** 18); // 23,000 VALUE\r\n\r\n    uint256 public epochReward = DEFAULT_EPOCH_REWARD;\r\n    uint256 public valueEpochReward = DEFAULT_VALUE_EPOCH_REWARD;\r\n    uint256 public minStakingAmount = 0 ether;\r\n    uint256 public unstakingFrozenTime = 40 hours;\r\n    uint256 public minStakeTimeToClaimVaultReward = 24 hours;\r\n\r\n    // ** unlockWithdrawFee = 1.92%: stakers will need to pay 1.92% (sent to insurance fund)of amount they want to withdraw if the coin still frozen\r\n    uint256 public unlockWithdrawFee = 0; // per ten thousand (eg. 15 -> 0.15%)\r\n\r\n    address public yfvInsuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public lastStakeTimes;\r\n\r\n    mapping(address => uint256) public accumulatedStakingPower; // will accumulate every time staker does getReward()\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event YfvRewardAdded(uint256 reward);\r\n    event Burned(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount, uint256 actualStakeAmount);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 actualWithdrawAmount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event CommissionPaid(address indexed user, uint256 reward);\r\n\r\n    constructor (address _yfv, address _value, address _vUSD, address _vETH, uint256 _earnLowerlimit) public {\r\n        yfv = IERC20(_yfv);\r\n        value = IERC20(_value);\r\n        vUSD = IERC20(_vUSD);\r\n        vETH = IERC20(_vETH);\r\n        getName = string(abi.encodePacked(\"YFV:GovVault:v2\"));\r\n        earnLowerlimit = _earnLowerlimit * 1e18;\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        uint256 bal = yfv.balanceOf(address(this));\r\n        if (controller != address(0)) bal = bal.add(IController(controller).balanceOf(address(yfv)));\r\n        return bal;\r\n    }\r\n\r\n    function setFundCap(uint256 _fundCap) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        fundCap = _fundCap;\r\n    }\r\n\r\n    function setController(address _controller) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setRewardReferral(address _rewardReferral) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        rewardReferral = _rewardReferral;\r\n    }\r\n\r\n    function setIsOpened(bool _isOpened) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        isOpened = _isOpened;\r\n    }\r\n\r\n    function setEarnLowerlimit(uint256 _earnLowerlimit) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        earnLowerlimit = _earnLowerlimit;\r\n    }\r\n\r\n    function setYfvInsuranceFund(address _yfvInsuranceFund) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        yfvInsuranceFund = _yfvInsuranceFund;\r\n    }\r\n\r\n    function setEpochReward(uint256 _epochReward) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_epochReward <= DEFAULT_EPOCH_REWARD * 10, \"Insane big _epochReward!\"); // At most 10x only\r\n        epochReward = _epochReward;\r\n    }\r\n\r\n    function setValueEpochReward(uint256 _valueEpochReward) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        valueEpochReward = _valueEpochReward;\r\n    }\r\n\r\n    function setMinStakingAmount(uint256 _minStakingAmount) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function setUnstakingFrozenTime(uint256 _unstakingFrozenTime) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        unstakingFrozenTime = _unstakingFrozenTime;\r\n    }\r\n\r\n    function setUnlockWithdrawFee(uint256 _unlockWithdrawFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_unlockWithdrawFee <= 1000, \"Dont be too greedy\"); // <= 10%\r\n        unlockWithdrawFee = _unlockWithdrawFee;\r\n    }\r\n\r\n    function setMinStakeTimeToClaimVaultReward(uint256 _minStakeTimeToClaimVaultReward) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minStakeTimeToClaimVaultReward = _minStakeTimeToClaimVaultReward;\r\n    }\r\n\r\n    // To upgrade vUSD contract (v1 is still experimental, we may need vUSDv2 with rebase() function working soon - then governance will call this upgrade)\r\n    function upgradeVUSDContract(address _vUSDContract) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vUSD = IERC20(_vUSDContract);\r\n    }\r\n\r\n    // To upgrade vETH contract (v1 is still experimental, we may need vETHv2 with rebase() function working soon - then governance will call this upgrade)\r\n    function upgradeVETHContract(address _vETHContract) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vETH = IERC20(_vETHContract);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        if (block.timestamp < periodFinish) return block.timestamp;\r\n        else return periodFinish;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (global.total_stake == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n        rewardPerTokenStored.add(\r\n            lastTimeRewardApplicable()\r\n            .sub(lastUpdateTime)\r\n            .mul(rewardRate)\r\n            .mul(1e18)\r\n            .div(global.total_stake)\r\n        );\r\n    }\r\n\r\n    // vUSD balance\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 calculatedEarned = stakers[account].stake\r\n            .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n            .div(1e18)\r\n            .add(rewards[account]);\r\n        uint256 poolBalance = vUSD.balanceOf(address(this));\r\n        // some rare case the reward can be slightly bigger than real number, we need to check against how much we have left in pool\r\n        if (calculatedEarned > poolBalance) return poolBalance;\r\n        return calculatedEarned;\r\n    }\r\n\r\n    function stakingPower(address account) public view returns (uint256) {\r\n        return accumulatedStakingPower[account].add(earned(account));\r\n    }\r\n\r\n    function earnedVETH(address account) public view returns (uint256) {\r\n        return earned(account).div(vETH_REWARD_FRACTION_RATE);\r\n    }\r\n\r\n    function earnedValue(address account) public view returns (uint256) {\r\n        return earned(account).mul(valueRewardRateMultipler);\r\n    }\r\n\r\n    // Custom logic in here for how much the vault allows to be borrowed\r\n    // Sets minimum required on-hand to keep small withdrawals cheap\r\n    function available() public view returns (uint256) {\r\n        return yfv.balanceOf(address(this)).mul(fundCap).div(FUND_CAP_DENOMINATOR);\r\n    }\r\n\r\n    function doHardWork() public discountCHI {\r\n        if (controller != address(0)) {\r\n            uint256 _amount = available();\r\n            uint256 _accepted = IController(controller).maxAcceptAmount(address(yfv));\r\n            if (_amount > _accepted) _amount = _accepted;\r\n            if (_amount > 0) {\r\n                yfv.safeTransfer(controller, _amount);\r\n                IController(controller).doHardWork(address(yfv), _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function stake(uint256 amount, address referrer) public discountCHI updateReward(msg.sender) checkNextEpoch {\r\n        require(isOpened, \"Pool is not opening to stake\");\r\n        yfv.safeTransferFrom(msg.sender, address(this), amount);\r\n        stakers[msg.sender].stake = stakers[msg.sender].stake.add(amount);\r\n        require(stakers[msg.sender].stake > minStakingAmount, \"Cannot stake below minStakingAmount\");\r\n\r\n        if (global.earnings_per_share != 0) {\r\n            stakers[msg.sender].payout = stakers[msg.sender].payout.add(\r\n                global.earnings_per_share.mul(amount).sub(1).div(magnitude).add(1)\r\n            );\r\n        }\r\n        global.total_stake = global.total_stake.add(amount);\r\n\r\n        if (yfv.balanceOf(address(this)) > earnLowerlimit) {\r\n            doHardWork();\r\n        }\r\n\r\n        lastStakeTimes[msg.sender] = block.timestamp;\r\n        if (rewardReferral != address(0) && referrer != address(0)) {\r\n            IYFVReferral(rewardReferral).setReferrer(msg.sender, referrer);\r\n        }\r\n    }\r\n\r\n    function unfrozenStakeTime(address account) public view returns (uint256) {\r\n        return lastStakeTimes[account] + unstakingFrozenTime;\r\n    }\r\n\r\n    // No rebalance implementation for lower fees and faster swaps\r\n    function withdraw(uint256 amount) public discountCHI updateReward(msg.sender) checkNextEpoch {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        claim();\r\n        require(amount <= stakers[msg.sender].stake, \"!balance\");\r\n        uint256 actualWithdrawAmount = amount;\r\n\r\n        // Check balance\r\n        uint256 b = yfv.balanceOf(address(this));\r\n        if (b < actualWithdrawAmount) {\r\n            if (controller != address(0)) {\r\n                uint256 _withdraw = actualWithdrawAmount.sub(b);\r\n                IController(controller).withdraw(address(yfv), _withdraw);\r\n                uint256 _after = yfv.balanceOf(address(this));\r\n                uint256 _diff = _after.sub(b);\r\n                if (_diff < _withdraw) {\r\n                    actualWithdrawAmount = b.add(_diff);\r\n                }\r\n            } else {\r\n                actualWithdrawAmount = b;\r\n            }\r\n        }\r\n\r\n        stakers[msg.sender].payout = stakers[msg.sender].payout.sub(\r\n            global.earnings_per_share.mul(amount).div(magnitude)\r\n        );\r\n\r\n        stakers[msg.sender].stake = stakers[msg.sender].stake.sub(amount);\r\n        global.total_stake = global.total_stake.sub(amount);\r\n\r\n        if (block.timestamp < unfrozenStakeTime(msg.sender)) {\r\n            // if coin is still frozen and governance does not allow stakers to unstake before timer ends\r\n            if (unlockWithdrawFee == 0) revert(\"Coin is still frozen\");\r\n\r\n            // otherwise withdrawFee will be calculated based on the rate\r\n            uint256 withdrawFee = amount.mul(unlockWithdrawFee).div(10000);\r\n            uint256 r = amount.sub(withdrawFee);\r\n            if (actualWithdrawAmount > r) {\r\n                withdrawFee = actualWithdrawAmount.sub(r);\r\n                actualWithdrawAmount = r;\r\n                if (yfvInsuranceFund != address(0)) { // send fee to insurance\r\n                    safeTokenTransfer(yfv, yfvInsuranceFund, withdrawFee);\r\n                    emit RewardPaid(yfvInsuranceFund, withdrawFee);\r\n                } else { // or burn\r\n                    yfv.burn(withdrawFee);\r\n                    emit Burned(withdrawFee);\r\n                }\r\n            }\r\n        }\r\n\r\n        safeTokenTransfer(yfv, msg.sender, actualWithdrawAmount);\r\n        emit Withdrawn(msg.sender, amount, actualWithdrawAmount);\r\n    }\r\n\r\n    function make_profit(uint256 amount) public discountCHI {\r\n        require(amount > 0, \"not 0\");\r\n        value.safeTransferFrom(msg.sender, address(this), amount);\r\n        global.earnings_per_share = global.earnings_per_share.add(\r\n            amount.mul(magnitude).div(global.total_stake)\r\n        );\r\n        global.total_out = global.total_out.add(amount);\r\n    }\r\n\r\n    function cal_out(address user) public view returns (uint256) {\r\n        uint256 _cal = global.earnings_per_share.mul(stakers[user].stake).div(magnitude);\r\n        if (_cal < stakers[user].payout) {\r\n            return 0;\r\n        } else {\r\n            return _cal.sub(stakers[user].payout);\r\n        }\r\n    }\r\n\r\n    function cal_out_pending(uint256 _pendingBalance, address user) public view returns (uint256) {\r\n        uint256 _earnings_per_share = global.earnings_per_share.add(\r\n            _pendingBalance.mul(magnitude).div(global.total_stake)\r\n        );\r\n        uint256 _cal = _earnings_per_share.mul(stakers[user].stake).div(magnitude);\r\n        _cal = _cal.sub(cal_out(user));\r\n        if (_cal < stakers[user].payout) {\r\n            return 0;\r\n        } else {\r\n            return _cal.sub(stakers[user].payout);\r\n        }\r\n    }\r\n\r\n    function claim() public discountCHI {\r\n        uint256 out = cal_out(msg.sender);\r\n        stakers[msg.sender].payout = global.earnings_per_share.mul(stakers[msg.sender].stake).div(magnitude);\r\n        stakers[msg.sender].total_out = stakers[msg.sender].total_out.add(out);\r\n\r\n        if (out > 0) {\r\n            uint256 _stakeTime = now - lastStakeTimes[msg.sender];\r\n            if (controller != address(0) && _stakeTime < minStakeTimeToClaimVaultReward) { // deposit in less than requirement\r\n                uint256 actually_out = _stakeTime.mul(out).mul(1e18).div(minStakeTimeToClaimVaultReward).div(1e18);\r\n                uint256 to_team = out.sub(actually_out);\r\n                safeTokenTransfer(value, IController(controller).performanceReward(), to_team);\r\n                out = actually_out;\r\n            }\r\n            safeTokenTransfer(value, msg.sender, out);\r\n        }\r\n    }\r\n\r\n    function exit() external discountCHI {\r\n        withdraw(stakers[msg.sender].stake);\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public discountCHI updateReward(msg.sender) checkNextEpoch {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            accumulatedStakingPower[msg.sender] = accumulatedStakingPower[msg.sender].add(rewards[msg.sender]);\r\n            rewards[msg.sender] = 0;\r\n\r\n            safeTokenTransfer(vUSD, msg.sender, reward);\r\n            safeTokenTransfer(vETH, msg.sender, reward.div(vETH_REWARD_FRACTION_RATE));\r\n            emit RewardPaid(msg.sender, reward);\r\n\r\n            uint256 valueReward = reward.mul(valueRewardRateMultipler);\r\n            uint256 actualValuePaid = valueReward.mul(100 - REFERRAL_COMMISSION_PERCENT).div(100); // 99%\r\n            uint256 valueCommission = valueReward - actualValuePaid; // 1%\r\n\r\n            safeTokenTransfer(value, msg.sender, actualValuePaid);\r\n\r\n            address referrer = address(0);\r\n            if (rewardReferral != address(0)) {\r\n                referrer = IYFVReferral(rewardReferral).getReferrer(msg.sender);\r\n            }\r\n            if (referrer != address(0)) { // send commission to referrer\r\n                safeTokenTransfer(value, referrer, valueCommission);\r\n            } else {// or burn\r\n                safeTokenBurn(value, valueCommission);\r\n                emit Burned(valueCommission);\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier checkNextEpoch() {\r\n        if (block.timestamp >= periodFinish) {\r\n            currentEpochReward = epochReward;\r\n\r\n            if (totalAccumulatedReward.add(currentEpochReward) > TOTAL_REWARD) {\r\n                currentEpochReward = TOTAL_REWARD.sub(totalAccumulatedReward); // limit total reward\r\n            }\r\n\r\n            if (currentEpochReward > 0) {\r\n                if (!vUSD.minters(address(this)) || !vETH.minters(address(this))) {\r\n                    currentEpochReward = 0;\r\n                } else {\r\n                    vUSD.mint(address(this), currentEpochReward);\r\n                    vETH.mint(address(this), currentEpochReward.div(vETH_REWARD_FRACTION_RATE));\r\n                    totalAccumulatedReward = totalAccumulatedReward.add(currentEpochReward);\r\n                }\r\n                currentEpoch++;\r\n            }\r\n\r\n            rewardRate = currentEpochReward.div(DURATION);\r\n\r\n            if (currentEpochReward > 0) {\r\n                value.mint(address(this), valueEpochReward);\r\n                valueRewardRateMultipler = valueEpochReward.div(currentEpochReward);\r\n            } else {\r\n                valueRewardRateMultipler = 0;\r\n            }\r\n\r\n            lastUpdateTime = block.timestamp;\r\n            periodFinish = block.timestamp.add(DURATION);\r\n            emit RewardAdded(currentEpochReward);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function addValueReward(uint256 _amount) external discountCHI {\r\n        require(periodFinish > 0, \"Pool has not started yet\");\r\n        uint256 remaining = periodFinish.sub(block.timestamp);\r\n        require(remaining > 1 days, \"Too little time to distribute. Wait for next epoch\");\r\n        value.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 leftover = remaining.mul(rewardRate);\r\n        uint256 valueLeftover = leftover.mul(valueRewardRateMultipler);\r\n        valueRewardRateMultipler = valueLeftover.add(_amount).div(leftover);\r\n    }\r\n\r\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough token.\r\n    function safeTokenTransfer(IERC20 _token, address _to, uint256 _amount) internal {\r\n        uint256 bal = _token.balanceOf(address(this));\r\n        if (_amount > bal) {\r\n            _token.safeTransfer(_to, bal);\r\n        } else {\r\n            _token.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Safe token burn function, just in case if rounding error causes pool to not have enough token.\r\n    function safeTokenBurn(IERC20 _token, uint256 _amount) internal {\r\n        uint256 bal = _token.balanceOf(address(this));\r\n        if (_amount > bal) {\r\n            _token.burn(bal);\r\n        } else {\r\n            _token.burn(_amount);\r\n        }\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() public discountCHI {\r\n        require(block.timestamp >= unfrozenStakeTime(msg.sender), \"Wait until coin unfrozen\");\r\n        uint256 amount = stakers[msg.sender].stake;\r\n        uint256 b = yfv.balanceOf(address(this));\r\n        if (b < amount) amount = b;\r\n        stakers[msg.sender].payout = stakers[msg.sender].payout.sub(\r\n            global.earnings_per_share.mul(amount).div(magnitude)\r\n        );\r\n        stakers[msg.sender].stake = stakers[msg.sender].stake.sub(amount);\r\n        global.total_stake = global.total_stake.sub(amount);\r\n        safeTokenTransfer(yfv, msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount, amount);\r\n    }\r\n\r\n    // This function allows governance to take unsupported tokens out of the contract, since this pool exists longer than the other pools.\r\n    // This is in an effort to make someone whole, should they seriously mess up.\r\n    // There is no guarantee governance will vote to return these.\r\n    // It also allows for removal of airdropped tokens.\r\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n\r\n        // cant take staked asset\r\n        require(_token != yfv || global.total_stake.add(amount) <= yfv.balanceOf(address(this)), \"cant withdraw more than stuck YFV\");\r\n\r\n        // transfer to\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yfv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualStakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"YfvRewardAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_EPOCH_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_VALUE_EPOCH_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND_CAP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_EPOCHS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_COMMISSION_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedStakingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addValueReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cal_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cal_out_pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnLowerlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedVETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings_per_share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakeTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"make_profit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeTimeToClaimVaultReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"}],\"name\":\"setEarnLowerlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochReward\",\"type\":\"uint256\"}],\"name\":\"setEpochReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundCap\",\"type\":\"uint256\"}],\"name\":\"setFundCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpened\",\"type\":\"bool\"}],\"name\":\"setIsOpened\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeTimeToClaimVaultReward\",\"type\":\"uint256\"}],\"name\":\"setMinStakeTimeToClaimVaultReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardReferral\",\"type\":\"address\"}],\"name\":\"setRewardReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setUnlockWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingFrozenTime\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFrozenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueEpochReward\",\"type\":\"uint256\"}],\"name\":\"setValueEpochReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yfvInsuranceFund\",\"type\":\"address\"}],\"name\":\"setYfvInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAccumulatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfrozenStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFrozenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vETHContract\",\"type\":\"address\"}],\"name\":\"upgradeVETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vUSDContract\",\"type\":\"address\"}],\"name\":\"upgradeVUSDContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH_REWARD_FRACTION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueRewardRateMultipler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yfv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yfvInsuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YFVGovernanceVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000045f24baeef268bb6d63aee5129015d69702bcdfa00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c0000000000000000000000001b8e12f839bd4e73a47addf76cf7f0097d74c14c00000000000000000000000076a034e76aa835363056dd418611e4f81870f16e000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ac5981fddb7e0e66072beaa3d9efaf9a26f95c36a51dcd0e9a59c29b78d79fa7"}]}