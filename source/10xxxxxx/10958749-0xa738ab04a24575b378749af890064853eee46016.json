{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n  function transferFrom(address from, address to, uint value) external returns (bool success);\r\n  function approve(address spender, uint amount) external returns (bool success);\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/Cura_Annonae\r\ncontract CuraAnnonae {\r\n  using SafeMath for uint256;\r\n\r\n  // variables.\r\n  ERC20 public YFMSToken;\r\n  address public owner;\r\n  uint256 public numberOfVaults;\r\n  uint256 public rewardsBalance;\r\n  uint256 public lastRewardUpdate = 0;\r\n  uint256 public currentDailyReward;\r\n\r\n  // mappings.\r\n  mapping(string => mapping(address => uint256)) internal vaults_data; // { VaultName: { UserAddress: value }}\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender;\r\n    YFMSToken = ERC20(_wallet);\r\n  }\r\n\r\n  // view the number of tokens left to distribute.\r\n  function getRewardsBalance() public view returns (uint256) {\r\n    return YFMSToken.balanceOf(address(this));\r\n  }\r\n\r\n  // view the current daily reward for all vaults.\r\n  function getDailyReward() public view returns (uint256) {\r\n    return currentDailyReward;\r\n  }\r\n\r\n  function getNumberOfVaults() public view returns (uint256) {\r\n    return numberOfVaults;\r\n  }\r\n\r\n  // get user balance in specific vault.\r\n  function getUserBalanceInVault(string memory _vault, address _user) public view returns (uint256) {\r\n    require(vaults_data[_vault][_user] >= 0);\r\n    return vaults_data[_vault][_user];\r\n  }\r\n\r\n  // calculate the daily reward for all vaults.\r\n  function updateDailyReward() public {\r\n    require(msg.sender == owner);\r\n    require(now.sub(lastRewardUpdate) >= 1 days || lastRewardUpdate == 0);\r\n    lastRewardUpdate = now;\r\n    currentDailyReward = YFMSToken.balanceOf(address(this)) / 10000 * 40;\r\n  }\r\n\r\n  // staking rewards distributed\r\n  // called from vaults.\r\n  function updateVaultData(string memory vault, address who, address user, uint256 value) public {\r\n    require(msg.sender == who);\r\n    require(value > 0);\r\n    vaults_data[vault][user] = vaults_data[vault][user].add(value);\r\n  }\r\n\r\n  // add a vault.\r\n  function addVault(string memory name) public {\r\n    require(msg.sender == owner);\r\n    // initialize new vault.\r\n    vaults_data[name][msg.sender] = 0; \r\n    // increment number of vaults.\r\n    numberOfVaults = numberOfVaults.add(1);\r\n  }\r\n\r\n  // enables users to stake stable coins/ YFMS from their respective vaults.\r\n  // called from vaults.\r\n  function stake(string memory _vault, address _receiver, uint256 _amount, address vault) public returns (bool) {\r\n    require(msg.sender == vault); // require that the vault is calling the contract.\r\n    // update mapping.\r\n    vaults_data[_vault][_receiver] = vaults_data[_vault][_receiver].add(_amount);\r\n    return true;\r\n  }\r\n\r\n  // enables users to unstake staked coins at a 2.5% cost (tokens will be burned).\r\n  // called from vaults.\r\n  function unstake(string memory _vault, address _receiver, address vault) public {\r\n    require(msg.sender == vault); // require that the vault is calling the contract.\r\n    // remove staked balance.\r\n    vaults_data[_vault][_receiver] = 0;\r\n  }\r\n\r\n  function distributeRewardsToVault(address vault) public {\r\n    require(msg.sender == owner);\r\n    require(currentDailyReward > 0);\r\n    // perhaps an additional require to ensure this vault hasn't already received rewards today.\r\n    // determine how many tokens to send to vault.\r\n    uint256 rewards = currentDailyReward.div(numberOfVaults);\r\n    YFMSToken.transfer(vault, rewards);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"YFMSToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"distributeRewardsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vault\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalanceInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vault\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vault\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"vault\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateVaultData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CuraAnnonae","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fef3bef71a5eb97e097039038776fd967ae5b106","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://faf8647218816d06a99e1c0150af3df273311f33ffac5aa8b529707219113e75"}]}