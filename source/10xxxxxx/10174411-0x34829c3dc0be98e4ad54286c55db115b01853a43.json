{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: Addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: Subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: Multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: Modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract XSCOIN is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"XSCOIN\";\r\n    string public symbol = \"XSC\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    bool public contractStatus;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public locked;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    constructor(uint256 _totalsupply, bool _status) public {\r\n        owner = msg.sender;\r\n        contractStatus = _status;\r\n        totalSupply = _totalsupply;\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Invaid access\");\r\n        _;\r\n    }\r\n    \r\n    modifier contractActive(){\r\n        require(contractStatus, \"Contract is inactive\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check balance of the holder\r\n     * @param tokenOwner Token holder address\r\n     */ \r\n    function balanceOf(address tokenOwner) public view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to specified address\r\n     * @param _to Receiver address\r\n     * @param _value Amount of the tokens\r\n     */\r\n    function transfer(address _to, uint256 _value) public contractActive returns (bool) {\r\n        require(_to != address(0), \"Null address\");                                         \r\n        require(_value > 0, \"Invalid Value\"); \r\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");                           \r\n        _transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Approve respective tokens for spender\r\n     * @param _spender Spender address\r\n     * @param _value The amount of tokens to be allowed\r\n     */\r\n   function approve(address _spender, uint256 _value) public contractActive returns (bool) {\r\n        require(_value >= 0, \"Invalid value\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To view approved balance\r\n     * @param holder The holder address\r\n     * @param delegate The spender address\r\n     */ \r\n    function allowance(address holder, address delegate) public view returns (uint256) {\r\n        return allowed[holder][delegate];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from  The holder address\r\n     * @param _to  The Receiver address\r\n     * @param _value  the amount of tokens to be transferred\r\n     */\r\n   function transferFrom(address _from, address _to, uint256 _value) public contractActive returns (bool) {\r\n        require(_to != address(0), \"Null address\");\r\n        require(_from != address(0), \"Null address\");\r\n        require(_value > 0, \"Invalid value\"); \r\n        require(_value <= balances[_from], \"Insufficient balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance\");\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal Transfer function\r\n     * @param _from  The holder address\r\n     * @param _to  The Receiver address\r\n     * @param _value  the amount of tokens to be transferred\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n       \r\n    }\r\n    \r\n    /**\r\n     * @dev Change contract status\r\n     * @param _status status of the contract\r\n     */\r\n    function updatecontractStatus(bool _status) public onlyOwner returns(bool) {\r\n        require(contractStatus != _status, \"Invalid status\");\r\n        contractStatus = _status;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Change contract owner\r\n     * @param _newOwner New owner address\r\n     */ \r\n    function changeAdmin(address _newOwner) public onlyOwner returns (bool) {\r\n        require(_newOwner != address(0), \"Zero address\");\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalsupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatecontractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XSCOIN","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000031a17e847807b1bc0000000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://71dc452715de122df2471f22549e2a0c822c4a50d2c023411e78079f71cec216"}]}