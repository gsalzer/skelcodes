{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\nabstract contract IFreeUpTo {\r\n    function freeUpTo(uint256 value) external virtual returns (uint256 freed);\r\n}\r\n\r\nabstract contract IClaimComp {\r\n    function claimComp(address holder) public virtual;\r\n}\r\n\r\nabstract contract ITransferBalanceOf {\r\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\r\n    function balanceOf(address _owner) public virtual view returns (uint256 balance);\r\n}\r\n\r\ncontract ClaimerSender {\r\n    address constant private ELARA = 0xBb4068bac37ef5975210fA0cf03C0984f2D1542c;\r\n    address constant private COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address constant private COMP_TOKEN_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    address constant private GST2_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    \r\n    modifier discount(uint256 amount) {\r\n        _;\r\n        IFreeUpTo(GST2_ADDRESS).freeUpTo(amount);\r\n    }\r\n    \r\n    constructor() discount(10) {}\r\n    \r\n    function claim() discount(10) public {\r\n        IClaimComp(COMPTROLLER).claimComp(address(this));\r\n        ITransferBalanceOf comp = ITransferBalanceOf(COMP_TOKEN_ADDRESS);\r\n        comp.transfer(ELARA, comp.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClaimerSender","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e6173166bcb2d2e19b52c1ad67e6e9629624c7bd474a58bcb73105d855be412"}]}