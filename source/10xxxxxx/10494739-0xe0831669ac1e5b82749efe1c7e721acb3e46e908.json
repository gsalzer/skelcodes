{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n\r\ninterface IRSV {\r\n    // Standard ERC20 functions\r\n    function transfer(address, uint256) external returns(bool);\r\n    function approve(address, uint256) external returns(bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function allowance(address, address) external view returns(uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // RSV-specific functions\r\n    function decimals() external view returns(uint8);\r\n    function mint(address, uint256) external;\r\n    function burnFrom(address, uint256) external;\r\n    function relayTransfer(address, address, uint256) external returns(bool);\r\n    function relayTransferFrom(address, address, address, uint256) external returns(bool);\r\n    function relayApprove(address, address, uint256) external returns(bool);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where there is an account\r\n * (owner) that can be granted exclusive access to specific functions.\r\n *\r\n * This module is used through inheritance by using the modifier `onlyOwner`.\r\n *\r\n * To change ownership, use a 2-part nominate-accept pattern.\r\n *\r\n * This contract is loosely based off of https://git.io/JenNF but additionally requires new owners\r\n * to accept ownership before the transition occurs.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _nominatedOwner;\r\n\r\n    event NewOwnerNominated(address indexed previousOwner, address indexed nominee);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current nominated owner.\r\n     */\r\n    function nominatedOwner() external view returns (address) {\r\n        return _nominatedOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() internal view {\r\n        require(_msgSender() == _owner, \"caller is not owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Nominates a new owner `newOwner`.\r\n     * Requires a follow-up `acceptOwnership`.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function nominateNewOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"new owner is 0 address\");\r\n        emit NewOwnerNominated(_owner, newOwner);\r\n        _nominatedOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership of the contract.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(_nominatedOwner == _msgSender(), \"unauthorized\");\r\n        emit OwnershipTransferred(_owner, _nominatedOwner);\r\n        _owner = _nominatedOwner;\r\n    }\r\n\r\n    /** Set `_owner` to the 0 address.\r\n     * Only do this to deliberately lock in the current permissions.\r\n     *\r\n     * THIS CANNOT BE UNDONE! Call this only if you know what you're doing and why you're doing it!\r\n     */\r\n    function renounceOwnership(string calldata declaration) external onlyOwner {\r\n        string memory requiredDeclaration = \"I hereby renounce ownership of this contract forever.\";\r\n        require(\r\n            keccak256(abi.encodePacked(declaration)) ==\r\n            keccak256(abi.encodePacked(requiredDeclaration)),\r\n            \"declaration incorrect\");\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n *\r\n * All credit to OpenZeppelin. Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol at commit 65e4ffde586ec89af3b7e9140bdc9235d1254853.\r\n *\r\n * Note that the solidity version has been changed from ^0.6.0 to 0.5.7. \r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        // require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n/**\r\n * @title The Reserve Relayer Contract\r\n * @dev A contract to support metatransactions via ECDSA signature verification.\r\n *\r\n */\r\ncontract Relayer is Ownable {\r\n\r\n    IRSV public trustedRSV;\r\n    mapping(address => uint) public nonce;\r\n\r\n    event RSVChanged(address indexed oldRSVAddr, address indexed newRSVAddr);\r\n\r\n    event TransferForwarded(\r\n        bytes sig,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed amount,\r\n        uint256 fee\r\n    );\r\n    event TransferFromForwarded(\r\n        bytes sig,\r\n        address indexed holder,\r\n        address indexed spender,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n    event ApproveForwarded(\r\n        bytes sig,\r\n        address indexed holder,\r\n        address indexed spender,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n    event FeeTaken(address indexed from, address indexed to, uint256 indexed value);\r\n\r\n    constructor(address rsvAddress) public {\r\n        trustedRSV = IRSV(rsvAddress);\r\n    }\r\n\r\n    /// Set the Reserve contract address.\r\n    function setRSV(address newTrustedRSV) external onlyOwner {\r\n        emit RSVChanged(address(trustedRSV), newTrustedRSV);\r\n        trustedRSV = IRSV(newTrustedRSV);\r\n    }\r\n\r\n    /// Forward a signed `transfer` call to the RSV contract if `sig` matches the signature.\r\n    /// Note that `amount` is not reduced by `fee`; the fee is taken separately.\r\n    function forwardTransfer(\r\n        bytes calldata sig,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    )\r\n        external\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(trustedRSV),\r\n            \"forwardTransfer\",\r\n            from,\r\n            to,\r\n            amount,\r\n            fee,\r\n            nonce[from]\r\n        ));\r\n        nonce[from]++;\r\n\r\n        address recoveredSigner = _recoverSignerAddress(hash, sig);\r\n        require(recoveredSigner == from, \"invalid signature\");\r\n\r\n        _takeFee(from, fee);\r\n\r\n        require(\r\n            trustedRSV.relayTransfer(from, to, amount), \r\n            \"Reserve.sol relayTransfer failed\"\r\n        );\r\n        emit TransferForwarded(sig, from, to, amount, fee);\r\n    }\r\n\r\n    /// Forward a signed `approve` call to the RSV contract if `sig` matches the signature.\r\n    /// Note that `amount` is not reduced by `fee`; the fee is taken separately.\r\n    function forwardApprove(\r\n        bytes calldata sig,\r\n        address holder,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 fee\r\n    )\r\n        external\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(trustedRSV),\r\n            \"forwardApprove\",\r\n            holder,\r\n            spender,\r\n            amount,\r\n            fee,\r\n            nonce[holder]\r\n        ));\r\n        nonce[holder]++;\r\n\r\n        address recoveredSigner = _recoverSignerAddress(hash, sig);\r\n        require(recoveredSigner == holder, \"invalid signature\");\r\n\r\n        _takeFee(holder, fee);\r\n\r\n        require(\r\n            trustedRSV.relayApprove(holder, spender, amount), \r\n            \"Reserve.sol relayApprove failed\"\r\n        );\r\n        emit ApproveForwarded(sig, holder, spender, amount, fee);\r\n    }\r\n\r\n    /// Forward a signed `transferFrom` call to the RSV contract if `sig` matches the signature.\r\n    /// Note that `fee` is not deducted from `amount`, but separate.\r\n    /// Allowance checking is left up to the Reserve contract to do.\r\n    function forwardTransferFrom(\r\n        bytes calldata sig,\r\n        address holder,\r\n        address spender,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    )\r\n        external\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(trustedRSV),\r\n            \"forwardTransferFrom\",\r\n            holder,\r\n            spender,\r\n            to,\r\n            amount,\r\n            fee,\r\n            nonce[spender]\r\n        ));\r\n        nonce[spender]++;\r\n\r\n        address recoveredSigner = _recoverSignerAddress(hash, sig);\r\n        require(recoveredSigner == spender, \"invalid signature\");\r\n\r\n        _takeFee(spender, fee);\r\n\r\n        require(\r\n            trustedRSV.relayTransferFrom(holder, spender, to, amount), \r\n            \"Reserve.sol relayTransfer failed\"\r\n        );\r\n        emit TransferFromForwarded(sig, holder, spender, to, amount, fee);\r\n    }\r\n\r\n    /// Recover the signer's address from the hash and signature.\r\n    function _recoverSignerAddress(bytes32 hash, bytes memory sig)\r\n        internal pure\r\n        returns (address)\r\n    {\r\n        bytes32 ethMessageHash = ECDSA.toEthSignedMessageHash(hash);\r\n        return ECDSA.recover(ethMessageHash, sig);\r\n    }\r\n\r\n    /// Transfer a fee from payer to sender.\r\n    function _takeFee(address payer, uint256 fee) internal {\r\n        if (fee != 0) {\r\n            require(trustedRSV.relayTransfer(payer, msg.sender, fee), \"fee transfer failed\");\r\n            emit FeeTaken(payer, msg.sender, fee);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"forwardTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTrustedRSV\",\"type\":\"address\"}],\"name\":\"setRSV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"declaration\",\"type\":\"string\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"forwardTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"forwardApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedRSV\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rsvAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRSVAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRSVAddr\",\"type\":\"address\"}],\"name\":\"RSVChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferFromForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApproveForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"NewOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Relayer","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000196f4727526ea7fb1e17b2071b3d8eaa38486988","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5d3ecd174b36e73385f4cb4a6834a9b7088ed466b5f540944ac3cb23fe8857f2"}]}