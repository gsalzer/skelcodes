{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/IUniswapExchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.8;\\n\\ninterface IUniswapExchange {\\n  event TokenPurchase(address indexed buyer, uint256 indexed eth_sold, uint256 indexed tokens_bought);\\n  event EthPurchase(address indexed buyer, uint256 indexed tokens_sold, uint256 indexed eth_bought);\\n  event AddLiquidity(address indexed provider, uint256 indexed eth_amount, uint256 indexed token_amount);\\n  event RemoveLiquidity(address indexed provider, uint256 indexed eth_amount, uint256 indexed token_amount);\\n\\n   /**\\n   * @notice Convert ETH to Tokens.\\n   * @dev User specifies exact input (msg.value).\\n   * @dev User cannot specify minimum output or deadline.\\n   */\\n  function fallback () external payable;\\n\\n /**\\n   * @dev Pricing function for converting between ETH && Tokens.\\n   * @param input_amount Amount of ETH or Tokens being sold.\\n   * @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\\n   * @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\\n   * @return Amount of ETH or Tokens bought.\\n   */\\n  function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve) external view returns (uint256);\\n\\n /**\\n   * @dev Pricing function for converting between ETH && Tokens.\\n   * @param output_amount Amount of ETH or Tokens being bought.\\n   * @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\\n   * @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\\n   * @return Amount of ETH or Tokens sold.\\n   */\\n  function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve) external view returns (uint256);\\n\\n\\n  /**\\n   * @notice Convert ETH to Tokens.\\n   * @dev User specifies exact input (msg.value) && minimum output.\\n   * @param min_tokens Minimum Tokens bought.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return Amount of Tokens bought.\\n   */\\n  function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256);\\n\\n  /**\\n   * @notice Convert ETH to Tokens && transfers Tokens to recipient.\\n   * @dev User specifies exact input (msg.value) && minimum output\\n   * @param min_tokens Minimum Tokens bought.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output Tokens.\\n   * @return  Amount of Tokens bought.\\n   */\\n  function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns(uint256);\\n\\n\\n  /**\\n   * @notice Convert ETH to Tokens.\\n   * @dev User specifies maximum input (msg.value) && exact output.\\n   * @param tokens_bought Amount of tokens bought.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return Amount of ETH sold.\\n   */\\n  function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns(uint256);\\n  /**\\n   * @notice Convert ETH to Tokens && transfers Tokens to recipient.\\n   * @dev User specifies maximum input (msg.value) && exact output.\\n   * @param tokens_bought Amount of tokens bought.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output Tokens.\\n   * @return Amount of ETH sold.\\n   */\\n  function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens to ETH.\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_eth Minimum ETH purchased.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return Amount of ETH bought.\\n   */\\n  function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens to ETH && transfers ETH to recipient.\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_eth Minimum ETH purchased.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @return  Amount of ETH bought.\\n   */\\n  function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens to ETH.\\n   * @dev User specifies maximum input && exact output.\\n   * @param eth_bought Amount of ETH purchased.\\n   * @param max_tokens Maximum Tokens sold.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return Amount of Tokens sold.\\n   */\\n  function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens to ETH && transfers ETH to recipient.\\n   * @dev User specifies maximum input && exact output.\\n   * @param eth_bought Amount of ETH purchased.\\n   * @param max_tokens Maximum Tokens sold.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @return Amount of Tokens sold.\\n   */\\n  function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (token_addr).\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param token_addr The address of the token being purchased.\\n   * @return Amount of Tokens (token_addr) bought.\\n   */\\n  function tokenToTokenSwapInput(\\n    uint256 tokens_sold,\\n    uint256 min_tokens_bought,\\n    uint256 min_eth_bought,\\n    uint256 deadline,\\n    address token_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (token_addr) && transfers\\n   *         Tokens (token_addr) to recipient.\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @param token_addr The address of the token being purchased.\\n   * @return Amount of Tokens (token_addr) bought.\\n   */\\n  function tokenToTokenTransferInput(\\n    uint256 tokens_sold,\\n    uint256 min_tokens_bought,\\n    uint256 min_eth_bought,\\n    uint256 deadline,\\n    address recipient,\\n    address token_addr)\\n    external returns (uint256);\\n\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (token_addr).\\n   * @dev User specifies maximum input && exact output.\\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\\n   * @param max_tokens_sold Maximum Tokens (token) sold.\\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param token_addr The address of the token being purchased.\\n   * @return Amount of Tokens (token) sold.\\n   */\\n  function tokenToTokenSwapOutput(\\n    uint256 tokens_bought,\\n    uint256 max_tokens_sold,\\n    uint256 max_eth_sold,\\n    uint256 deadline,\\n    address token_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (token_addr) && transfers\\n   *         Tokens (token_addr) to recipient.\\n   * @dev User specifies maximum input && exact output.\\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\\n   * @param max_tokens_sold Maximum Tokens (token) sold.\\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @param token_addr The address of the token being purchased.\\n   * @return Amount of Tokens (token) sold.\\n   */\\n  function tokenToTokenTransferOutput(\\n    uint256 tokens_bought,\\n    uint256 max_tokens_sold,\\n    uint256 max_eth_sold,\\n    uint256 deadline,\\n    address recipient,\\n    address token_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token).\\n   * @dev Allows trades through contracts that were not deployed from the same factory.\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param exchange_addr The address of the exchange for the token being purchased.\\n   * @return Amount of Tokens (exchange_addr.token) bought.\\n   */\\n  function tokenToExchangeSwapInput(\\n    uint256 tokens_sold,\\n    uint256 min_tokens_bought,\\n    uint256 min_eth_bought,\\n    uint256 deadline,\\n    address exchange_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token) && transfers\\n   *         Tokens (exchange_addr.token) to recipient.\\n   * @dev Allows trades through contracts that were not deployed from the same factory.\\n   * @dev User specifies exact input && minimum output.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @param exchange_addr The address of the exchange for the token being purchased.\\n   * @return Amount of Tokens (exchange_addr.token) bought.\\n   */\\n  function tokenToExchangeTransferInput(\\n    uint256 tokens_sold,\\n    uint256 min_tokens_bought,\\n    uint256 min_eth_bought,\\n    uint256 deadline,\\n    address recipient,\\n    address exchange_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token).\\n   * @dev Allows trades through contracts that were not deployed from the same factory.\\n   * @dev User specifies maximum input && exact output.\\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\\n   * @param max_tokens_sold Maximum Tokens (token) sold.\\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param exchange_addr The address of the exchange for the token being purchased.\\n   * @return Amount of Tokens (token) sold.\\n   */\\n  function tokenToExchangeSwapOutput(\\n    uint256 tokens_bought,\\n    uint256 max_tokens_sold,\\n    uint256 max_eth_sold,\\n    uint256 deadline,\\n    address exchange_addr)\\n    external returns (uint256);\\n\\n  /**\\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token) && transfers\\n   *         Tokens (exchange_addr.token) to recipient.\\n   * @dev Allows trades through contracts that were not deployed from the same factory.\\n   * @dev User specifies maximum input && exact output.\\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\\n   * @param max_tokens_sold Maximum Tokens (token) sold.\\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @param recipient The address that receives output ETH.\\n   * @param exchange_addr The address of the exchange for the token being purchased.\\n   * @return Amount of Tokens (token) sold.\\n   */\\n  function tokenToExchangeTransferOutput(\\n    uint256 tokens_bought,\\n    uint256 max_tokens_sold,\\n    uint256 max_eth_sold,\\n    uint256 deadline,\\n    address recipient,\\n    address exchange_addr)\\n    external returns (uint256);\\n\\n\\n  /***********************************|\\n  |         Getter Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice external price function for ETH to Token trades with an exact input.\\n   * @param eth_sold Amount of ETH sold.\\n   * @return Amount of Tokens that can be bought with input ETH.\\n   */\\n  function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256);\\n\\n  /**\\n   * @notice external price function for ETH to Token trades with an exact output.\\n   * @param tokens_bought Amount of Tokens bought.\\n   * @return Amount of ETH needed to buy output Tokens.\\n   */\\n  function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256);\\n\\n  /**\\n   * @notice external price function for Token to ETH trades with an exact input.\\n   * @param tokens_sold Amount of Tokens sold.\\n   * @return Amount of ETH that can be bought with input Tokens.\\n   */\\n  function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256);\\n\\n  /**\\n   * @notice external price function for Token to ETH trades with an exact output.\\n   * @param eth_bought Amount of output ETH.\\n   * @return Amount of Tokens needed to buy output ETH.\\n   */\\n  function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256);\\n\\n  /**\\n   * @return Address of Token that is sold on this exchange.\\n   */\\n  function tokenAddress() external view returns (address);\\n\\n  /**\\n   * @return Address of factory that created this exchange.\\n   */\\n  function factoryAddress() external view returns (address);\\n\\n\\n  /***********************************|\\n  |        Liquidity Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Deposit ETH && Tokens (token) at current ratio to mint UNI tokens.\\n   * @dev min_liquidity does nothing when total UNI supply is 0.\\n   * @param min_liquidity Minimum number of UNI sender will mint if total UNI supply is greater than 0.\\n   * @param max_tokens Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return The amount of UNI minted.\\n   */\\n  function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\\n\\n  /**\\n   * @dev Burn UNI tokens to withdraw ETH && Tokens at current ratio.\\n   * @param amount Amount of UNI burned.\\n   * @param min_eth Minimum ETH withdrawn.\\n   * @param min_tokens Minimum Tokens withdrawn.\\n   * @param deadline Time after which this transaction can no longer be executed.\\n   * @return The amount of ETH && Tokens withdrawn.\\n   */\\n  function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\\n}\"\r\n    },\r\n    \"contracts/IOriginalDropToken02.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOriginalDropToken02 is IERC20 {\\n\\n    // Redeem\\n    function redeem(\\n        uint256 amount,\\n        bytes32 messageHash\\n    )\\n        external;\\n\\n    // Permit (signature approvals)\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external;\\n\\n    // Events\\n    event TokenRedeemed(\\n        address redeemer,\\n        uint256 amount,\\n        bytes32 messageHash\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/OriginalDropToken02.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"./IOriginalDropToken02.sol\\\";\\n\\ncontract OriginalDropToken02 is IOriginalDropToken02, ERC20, ERC20Burnable {\\n\\n    uint256 private _supplyCap;\\n\\n    /**\\n    * @dev Permit using EIP712\\n    */\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    string public constant VERSION = \\\"2\\\";\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    mapping (address => uint256) public permitNonces;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address minter,\\n        uint256 supplyStart,\\n        uint256 supplyCap\\n    )\\n        ERC20(name, symbol)\\n        public\\n    {\\n        initDomainSeparator(name);\\n\\n        _supplyCap = supplyCap;\\n\\n        _mint(\\n            minter == address(0) ? msg.sender : minter,\\n            supplyStart\\n        );\\n    }\\n\\n    /**\\n    * @dev Initializes EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\\n    */\\n    function initDomainSeparator(string memory name) private {\\n        uint256 chainID;\\n        /* solium-disable-next-line */\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n        abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(VERSION)),\\n            chainID,\\n            address(this)\\n        )\\n        );\\n    }\\n\\n    /**\\n    * @dev Returns the cap on the token's total supply.\\n    */\\n    function cap() public view returns (uint256) {\\n        return _supplyCap;\\n    }\\n\\n    /**\\n    * @dev See {ERC20Mintable-mint}.\\n    *\\n    * Requirements:\\n    *\\n    * - `value` must not cause the total supply to go over the cap.\\n    */\\n    function _mint(\\n        address account,\\n        uint256 value\\n    )\\n        internal\\n        override\\n    {\\n        require(\\n        _supplyCap == 0 || totalSupply().add(value) <= _supplyCap,\\n        \\\"Cap exceeded\\\"\\n        );\\n\\n        super._mint(account, value);\\n    }\\n\\n    /**\\n    * @dev Redeems a token with a message hash, burning the value.\\n    */\\n    function redeem(\\n        uint256 amount,\\n        bytes32 messageHash\\n    )\\n        public\\n        override\\n    {\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        _burn(msg.sender, amount);\\n        emit TokenRedeemed(msg.sender, amount, messageHash);\\n    }\\n\\n    /**\\n    * @dev Approve by signature.\\n    *\\n    * Adapted from Uniswap's UniswapV2ERC20 and MakerDAO's Dai contracts:\\n    * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\\n    * https://github.com/makerdao/dss/blob/master/src/dai.sol\\n    */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        public\\n        override\\n    {\\n        require(\\n            deadline == 0 || deadline >= block.timestamp,\\n            \\\"Zora: Permit expired\\\"\\n        );\\n\\n        bytes32 digest =\\n        keccak256(\\n            abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR,\\n            keccak256(\\n                abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                permitNonces[owner]++,\\n                deadline\\n                )\\n            )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && owner == recoveredAddress, \\\"Zora: Signature invalid\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OriginalDropWrapper01.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.8;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { ZoraAuthorized } from \\\"@ourzora/shared/contracts/ZoraAuthorized.sol\\\";\\nimport { TransferProxy } from \\\"@ourzora/shared/contracts/TransferProxy.sol\\\";\\n\\nimport { IUniswapExchange } from \\\"./external/IUniswapExchange.sol\\\";\\nimport { IOriginalDropToken02 } from \\\"./IOriginalDropToken02.sol\\\";\\n\\ncontract OriginalDropWrapper01 is Ownable {\\n\\n    /* ============ Variables ============ */\\n\\n    ZoraAuthorized public zoraAuthorized;\\n\\n    TransferProxy public transferProxy;\\n\\n    mapping (address => address) public tokenToExchange;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            zoraAuthorized.isAuthorized(msg.sender) == true,\\n            \\\"TradeWrapper: only authorized contract can call\\\"\\n        );\\n        _;\\n    }\\n\\n    // modifier ensureTokensTransferred(address tokenToCheck) {\\n    //     // Get the starting balance of the drop\\n    //     uint256 preBalance = IOriginalDropToken02(tokenToCheck).balanceOf(address(this));\\n\\n    //     // Execute the function\\n    //     _;\\n\\n    //     // Get the balance after all operations have been executed\\n    //     uint256 postBalance = IOriginalDropToken02(tokenToCheck).balanceOf(address(this));\\n\\n    //     // Ensure that no tokens are stuck inside and the contract reverts if so\\n    //     require(\\n    //         preBalance == postBalance,\\n    //         \\\"DropWrapper01: tokens were not transferred\\\"\\n    //     );\\n    // }\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _zoraAuthorized,\\n        address _transferProxy\\n    )\\n        public\\n    {\\n        zoraAuthorized = ZoraAuthorized(_zoraAuthorized);\\n        transferProxy = TransferProxy(_transferProxy);\\n    }\\n\\n    /* ============ Authorized Functions ============ */\\n\\n    function setTokenToExchange(\\n        address dropToken,\\n        address uniswapExchange\\n    )\\n        public\\n        onlyAuthorized\\n    {\\n        tokenToExchange[dropToken] = uniswapExchange;\\n    }\\n\\n    /**\\n     * @dev Use a permit() signature and transfer tokens\\n     *      Only callable by an authorized user.\\n     */\\n    function proxyTransfer(\\n        address dropToken,\\n        address transferDestination,\\n        uint256 transferValue,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        public\\n        onlyAuthorized\\n    {\\n\\n        // Submit the permit signature to the token\\n        IOriginalDropToken02(dropToken).permit(\\n            owner,\\n            spender,\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Call the transfer function\\n        transfer(\\n            dropToken,\\n            owner,\\n            transferDestination,\\n            transferValue\\n        );\\n\\n    }\\n\\n    /**\\n     * @dev Use a permit() signature and sell tokens for ETH\\n     *      Only callable by an authorized user.\\n     */\\n    function proxySell(\\n        address dropToken,\\n        uint256 inputAmount,\\n        uint256 outputMinimum,\\n        uint256 uniswapDeadline,\\n        address outputDestination,\\n        address owner,\\n        address destination,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        public\\n        payable\\n        onlyAuthorized\\n    {\\n\\n        // Submit the permit signature to the token\\n        IOriginalDropToken02(dropToken).permit(\\n            owner,\\n            destination,\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Call the sell function\\n        sell(\\n            dropToken,\\n            owner,\\n            inputAmount,\\n            outputMinimum,\\n            uniswapDeadline,\\n            outputDestination\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens with a pre-existing approval\\n     *      Only callable by an authorized user.\\n     *\\n     * @param from  Address to transfer tokens from\\n     * @param to    Address to transfer tokens to\\n     * @param value Amount of tokens to spend\\n     */\\n    function transfer(\\n        address dropToken,\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        public\\n        onlyAuthorized\\n        // ensureTokensTransferred(dropToken)\\n    {\\n\\n        // Call the transfer proxy to transfer tokens\\n        // This will fail if the transfer proxy doesn't have approval from the user\\n        transferProxy.transferFrom(\\n            dropToken,\\n            from,\\n            to,\\n            value\\n        );\\n\\n    }\\n\\n    /**\\n     * @dev Buy tokens with a pre-existing approval\\n     *      Only callable by an authorized user.\\n     *\\n     * @param dropToken Address of the drop token to buy\\n     * @param outputMinimum Minimum amount of tokens expected from Uniswap\\n     * @param uniswapDeadline Deadline before Uniswap won't accept the order\\n     * @param outputDestination Address to forward tokens to\\n     */\\n    function buy(\\n        address dropToken,\\n        uint256 outputMinimum,\\n        uint256 uniswapDeadline,\\n        address outputDestination\\n    )\\n        public\\n        payable\\n        onlyAuthorized\\n        // ensureTokensTransferred(dropToken)\\n    {\\n\\n        // Call Uniswap to buy tokens (ethToTokens function)\\n        IUniswapExchange uniswapExchange = IUniswapExchange(tokenToExchange[dropToken]);\\n\\n        uniswapExchange.ethToTokenTransferInput.value(msg.value)(\\n            outputMinimum,\\n            uniswapDeadline,\\n            outputDestination\\n        );\\n\\n    }\\n\\n    /**\\n     * @dev Sell tokens with a pre-existing approval\\n     *      Only callable by an authorized user.\\n     *\\n     * @param dropToken Address of the drop token to sell\\n     * @param owner Address to move tokens on behalf of\\n     * @param inputAmount Amounts of tokens to sell\\n     * @param outputMinimum Minimum amount of ETH expected from Uniswap\\n     * @param uniswapDeadline Deadline before Uniswap won't accept the order\\n     * @param outputDestination Address to forward ETH to\\n     */\\n    function sell(\\n        address dropToken,\\n        address owner,\\n        uint256 inputAmount,\\n        uint256 outputMinimum,\\n        uint256 uniswapDeadline,\\n        address outputDestination\\n    )\\n        public\\n        onlyAuthorized\\n        // ensureTokensTransferred(dropToken)\\n    {\\n        transfer(\\n            dropToken,\\n            owner,\\n            address(this),\\n            inputAmount\\n        );\\n\\n        IOriginalDropToken02(dropToken).approve(\\n            tokenToExchange[dropToken],\\n            inputAmount\\n        );\\n\\n        // Call Uniswap to buy tokens (tokensToEth function)\\n        IUniswapExchange uniswapExchange = IUniswapExchange(tokenToExchange[dropToken]);\\n\\n        uniswapExchange.tokenToEthTransferInput(\\n            inputAmount,\\n            outputMinimum,\\n            uniswapDeadline,\\n            outputDestination\\n        );\\n\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@ourzora/shared/contracts/ZoraAuthorized.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"./lib/AddressArrayUtils.sol\\\";\\n\\n// @TODO: This code has been pulled from Set Protocol but does not have the tests inside THIS repo.\\n// This contract has been audited and tested against though.\\n\\n/**\\n * @title ZoraAuthorized\\n *\\n * The ZoraAuthorized contract is an inherited contract that sets permissions on certain function calls\\n * through the onlyAuthorized modifier. Permissions can be managed only by the Owner of the contract.\\n */\\ncontract ZoraAuthorized is Ownable {\\n\\n    using SafeMath for uint256;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of addresses to bool indicator of authorization\\n    mapping (address => bool) public authorized;\\n\\n    // Array of authorized addresses\\n    address[] public authorities;\\n\\n    /* ============ Modifiers ============ */\\n\\n    // Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized {\\n        require(\\n            authorized[msg.sender],\\n            \\\"Authorizable.onlyAuthorized: Sender not included in authorities\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    // Event emitted when new address is authorized.\\n    event AddressAuthorized (\\n        address indexed authAddress,\\n        address authorizedBy\\n    );\\n\\n    // Event emitted when address is deauthorized.\\n    event AuthorizedAddressRemoved (\\n        address indexed addressRemoved,\\n        address authorizedBy\\n    );\\n\\n    /* ============ Setters ============ */\\n\\n    /**\\n     * Add multiple authorized addresses to contract. Can only be set by owner.\\n     *\\n     * @param  _authTargets   The addresses of the new authorized contract\\n     */\\n    function addAuthorizedAddresses(address[] calldata _authTargets)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _authTargets.length; i++) {\\n            addAuthorizedAddress(_authTargets[i]);\\n        }\\n    }\\n\\n    /**\\n     * Remove authorized address from contract. Can only be set by owner.\\n     *\\n     * @param  _authTargets   The addresses to be de-permissioned\\n     */\\n    function removeAuthorizedAddresses(address[] calldata _authTargets)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _authTargets.length; i++) {\\n            removeAuthorizedAddress(_authTargets[i]);\\n        }\\n    }\\n\\n    /**\\n     * Add authorized address to contract. Can only be set by owner.\\n     *\\n     * @param  _authTarget   The address of the new authorized contract\\n     */\\n    function addAuthorizedAddress(address _authTarget)\\n        public\\n        onlyOwner\\n    {\\n        // Require that address is not already authorized\\n        require(\\n            !authorized[_authTarget],\\n            \\\"Authorizable.addAuthorizedAddress: Address already registered\\\"\\n        );\\n\\n        // Set address authority to true\\n        authorized[_authTarget] = true;\\n\\n        // Add address to authorities array\\n        authorities.push(_authTarget);\\n\\n        // Emit authorized address event\\n        emit AddressAuthorized(\\n            _authTarget,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * Remove authorized address from contract. Can only be set by owner.\\n     *\\n     * @param  _authTarget   The address to be de-permissioned\\n     */\\n    function removeAuthorizedAddress(address _authTarget)\\n        public\\n        onlyOwner\\n    {\\n        // Require address is authorized\\n        require(\\n            authorized[_authTarget],\\n            \\\"Authorizable.removeAuthorizedAddress: Address not authorized\\\"\\n        );\\n\\n        // Delete address from authorized mapping\\n        authorized[_authTarget] = false;\\n\\n        authorities = authorities.remove(_authTarget);\\n\\n        // Emit AuthorizedAddressRemoved event.\\n        emit AuthorizedAddressRemoved(\\n            _authTarget,\\n            msg.sender\\n        );\\n    }\\n\\n    /* ============ Getters ============ */\\n\\n    /**\\n     * Get array of authorized addresses.\\n     *\\n     * @return address[]   Array of authorized addresses\\n     */\\n    function getAuthorizedAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        // Return array of authorized addresses\\n        return authorities;\\n    }\\n\\n    /**\\n     * Check if the address is authorised or not\\n     *\\n     * @param addressToCheck The address to check is authorised or not\\n     *\\n     * @return boolean       Status of whether the address is approved or not\\n     *\\n     */\\n    function isAuthorized(\\n        address addressToCheck\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return authorized[addressToCheck];\\n    }\\n}\"\r\n    },\r\n    \"@ourzora/shared/contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"// Pulled in from Cryptofin Solidity package in order to control Solidity compiler version\\n// https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\\n\\npragma solidity 0.6.8;\\n\\n\\nlibrary AddressArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        bool isIn;\\n        (, isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Returns the array with a appended to A.\\n     * @param A The first array\\n     * @param a The value to append\\n     * @return Returns A appended by a\\n     */\\n    function append(address[] memory A, address a) internal pure returns (address[] memory) {\\n        address[] memory newAddresses = new address[](A.length + 1);\\n        for (uint256 i = 0; i < A.length; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        newAddresses[A.length] = a;\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return The intersection of the two arrays\\n     */\\n    function intersect(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 newLength = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (contains(B, A[i])) {\\n                includeMap[i] = true;\\n                newLength++;\\n            }\\n        }\\n        address[] memory newAddresses = new address[](newLength);\\n        uint256 j = 0;\\n        for (uint256 k = 0; k < length; k++) {\\n            if (includeMap[k]) {\\n                newAddresses[j] = A[k];\\n                j++;\\n            }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Returns the union of the two arrays. Order is not guaranteed.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return The union of the two arrays\\n     */\\n    function union(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        address[] memory leftDifference = difference(A, B);\\n        address[] memory rightDifference = difference(B, A);\\n        address[] memory intersection = intersect(A, B);\\n        return extend(leftDifference, extend(intersection, rightDifference));\\n    }\\n\\n    /**\\n     * Computes the difference of two arrays. Assumes there are no duplicates.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return The difference of the two arrays\\n     */\\n    function difference(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 count = 0;\\n        // First count the new length because can't push for in-memory arrays\\n        for (uint256 i = 0; i < length; i++) {\\n            address e = A[i];\\n            if (!contains(B, e)) {\\n                includeMap[i] = true;\\n                count++;\\n            }\\n        }\\n        address[] memory newAddresses = new address[](count);\\n        uint256 j = 0;\\n        for (uint256 k = 0; k < length; k++) {\\n            if (includeMap[k]) {\\n                newAddresses[j] = A[k];\\n                j++;\\n            }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * Resulting ordering is not guaranteed\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * @return Returns the new array\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n\\n        require(!isIn);\\n\\n        (address[] memory _A,) = pop(A, index);\\n        return _A;\\n    }\\n\\n    /**\\n     * Returns whether or not there's a duplicate. Runs in O(n^2).\\n     * @param A Array to search\\n     * @return Returns true if duplicate, false otherwise\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        if (A.length == 0) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (A[i] == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Returns whether the two arrays are equal.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return True is the arrays are equal, false if not.\\n     */\\n    function isEqual(address[] memory A, address[] memory B) internal pure returns (bool) {\\n        if (A.length != B.length) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < A.length; i++) {\\n            if (A[i] != B[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"@ourzora/shared/contracts/TransferProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.8;\\n\\nimport { TransferHelper } from \\\"./lib/TransferHelper.sol\\\";\\nimport { ZoraAuthorized } from \\\"./ZoraAuthorized.sol\\\";\\n\\ncontract TransferProxy {\\n\\n    ZoraAuthorized public zoraAuthorized;\\n\\n    constructor(address _authorizedAddress) public {\\n        zoraAuthorized = ZoraAuthorized(_authorizedAddress);\\n    }\\n\\n    /**\\n     * @dev Transfer tokens owned by the transfer proxy\\n     *      Can only be called by an authorized zora address\\n     *\\n     * @param token     Address to of the token to transfer\\n     * @param from      Address to transfer tokens from\\n     * @param to        Address to transfer tokens to\\n     * @param value     Amount of tokens to spend\\n     */\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        public\\n    {\\n\\n        require(\\n            zoraAuthorized.isAuthorized(msg.sender) == true,\\n            \\\"TransferProxy: msg.sender is not authorized\\\"\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            token,\\n            from,\\n            to,\\n            value\\n        );\\n\\n    }\\n\\n}\"\r\n    },\r\n    \"@ourzora/shared/contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// Pulled in from dYdX Solo package in order to control Solidity compiler version\\n// https://github.com/dydxprotocol/protocol_v1/blob/master/contracts/lib/TokenInteract.sol\\n\\n\\npragma solidity >=0.6.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n\\n    function balanceOf(\\n        address token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(token).balanceOf(owner);\\n    }\\n\\n    function allowance(\\n        address token,\\n        address owner,\\n        address spender\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(token).allowance(owner, spender);\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint value\\n    )\\n        internal\\n    {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper: APPROVE_FAILED'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint value\\n    )\\n        internal\\n    {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper: TRANSFER_FAILED'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint value\\n    )\\n        internal\\n    {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper: TRANSFER_FROM_FAILED'\\n        );\\n    }\\n\\n    function safeTransferETH(\\n        address to,\\n        uint value\\n    )\\n        internal\\n    {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OriginalTokenFactory02.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.8;\\n\\n// import \\\"@nomiclabs/buidler/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./OriginalDropToken02.sol\\\";\\n\\ncontract OriginalTokenFactory02 {\\n\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        address minter,\\n        uint256 supplyStart,\\n        uint256 supplyCap\\n    ) public returns (OriginalDropToken02) {\\n        OriginalDropToken02 newToken = new OriginalDropToken02(\\n            name,\\n            symbol,\\n            minter,\\n            supplyStart,\\n            supplyCap\\n        );\\n\\n        return newToken;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zoraAuthorized\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswapDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputDestination\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswapDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"proxySell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"proxyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswapDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputDestination\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapExchange\",\"type\":\"address\"}],\"name\":\"setTokenToExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoraAuthorized\",\"outputs\":[{\"internalType\":\"contract ZoraAuthorized\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OriginalDropWrapper01","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002b98fd7f8a06d7e732442c8b437b929b20803d0700000000000000000000000013a05400affaa43705392cf989bced4c5534c5c8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}