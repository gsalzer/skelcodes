{"status":"1","message":"OK","result":[{"SourceCode":"{\"minthelper.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n// Minthelper contract customized for solo mining in COSMiC\\r\\n//\\r\\n// THANKS:\\r\\n//  - Original `Minthelper` contract by Mikers (https://github.com/snissn)\\r\\n//  - additional Thanks to 0x1d00ffff (https://github.com/0x1d00ffff)\\r\\n//\\r\\n\\r\\nlibrary SafeMath\\r\\n{\\r\\n    \\r\\n    function add(uint a, uint b) internal pure returns (uint c) {\\r\\n        c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n    }\\r\\n\\r\\n    function sub(uint a, uint b) internal pure returns (uint c) {\\r\\n        require(b \\u003c= a);\\r\\n        c = a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint a, uint b) internal pure returns (uint c) {\\r\\n        c = a * b;\\r\\n        require(a == 0 || c / a == b);\\r\\n    }\\r\\n\\r\\n    function div(uint a, uint b) internal pure returns (uint c) {\\r\\n        require(b \\u003e 0);\\r\\n        c = a / b;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract Ownable\\r\\n{\\r\\n  address public owner;\\r\\n\\r\\n  /**\\r\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n   * account.\\r\\n   */\\r\\n    constructor() public\\r\\n    {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    if (msg.sender != owner) {\\r\\n      revert();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) onlyOwner public\\r\\n  {\\r\\n    if (newOwner != address(0)) {\\r\\n      owner = newOwner;\\r\\n    }\\r\\n    \\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20Interface\\r\\n{\\r\\n    function totalSupply() public constant returns (uint);\\r\\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\\r\\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\\r\\n    function transfer(address to, uint tokens) public returns (bool success);\\r\\n    function approve(address spender, uint tokens) public returns (bool success);\\r\\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n}\\r\\n\\r\\ncontract ERC918Interface\\r\\n{\\r\\n  function totalSupply() public constant returns (uint);\\r\\n  function getMiningDifficulty() public constant returns (uint);\\r\\n  function getMiningTarget() public constant returns (uint);\\r\\n  function getMiningReward() public constant returns (uint);\\r\\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\\r\\n  function merge() public returns (bool success);\\r\\n// uint public lastRewardAmount;\\r\\n\\r\\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\\r\\n\\r\\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\\r\\n\\r\\n}\\r\\n\\r\\n/*\\r\\nThe owner (or anyone) will deposit tokens in here\\r\\nThe owner calls the multisend method to send out payments\\r\\n*/\\r\\ncontract MintHelper is Ownable {\\r\\n\\r\\n  using SafeMath for uint;\\r\\n\\r\\n//  address public mintableToken;\\r\\n    address public payoutsWallet;\\r\\n    address public minterWallet;\\r\\n\\r\\n//  uint public minterFeePercent;\\r\\n\\r\\n\\r\\n    constructor(address pWallet, address mWallet) public\\r\\n    {\\r\\n      payoutsWallet = pWallet;\\r\\n      minterWallet = mWallet;\\r\\n//    minterFeePercent = 2;\\r\\n    }\\r\\n    \\r\\n/*\\r\\nfunction setPayoutsWallet(address pWallet)\\r\\n    public onlyOwner\\r\\n    returns (bool)\\r\\n    {\\r\\n      payoutsWallet = pWallet;\\r\\n      return true;\\r\\n    }\\r\\n*/\\r\\n\\r\\n/*\\r\\n    function setMinterWallet(address mWallet)\\r\\n    public onlyOwner\\r\\n    returns (bool)\\r\\n    {\\r\\n      minterWallet = mWallet;\\r\\n      return true;\\r\\n    }\\r\\n*/\\r\\n\\r\\n    function proxyMint( uint256 nonce, bytes32 challenge_digest, address mintableToken )\\r\\n    public /* onlyOwner */\\r\\n    returns (bool)\\r\\n    {\\r\\n      //identify the rewards that will be won and how to split them up\\r\\n      //uint donatePercent = 2;\\r\\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();      // get current reward in tokens\\r\\n      \\r\\n      //uint minterReward = totalReward.mul(donatePercent).div(100);          // developer gets 2% auto-donation\\r\\n      uint minterReward = totalReward.mul(2).div(100);\\r\\n      \\r\\n      uint payoutReward = totalReward.sub(minterReward);                    // the miner gets 98% !\\r\\n\\r\\n      // call mint() in selected erc918 token contract with solution nonce and its keccak256 digest. get paid in new tokens.\\r\\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest ));\\r\\n\\r\\n      //transfer the tokens to the correct wallets.\\r\\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward));\\r\\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward));\\r\\n\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    //withdraw any eth inside\\r\\n    function withdraw()\\r\\n    public onlyOwner\\r\\n    {\\r\\n        msg.sender.transfer(address(this).balance);      \\r\\n    }\\r\\n\\r\\n    //send tokens out\\r\\n    function send(address _tokenAddr, address dest, uint value)\\r\\n    public onlyOwner\\r\\n    returns (bool)\\r\\n    {\\r\\n        return ERC20Interface(_tokenAddr).transfer(dest, value);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"mintableToken\",\"type\":\"address\"}],\"name\":\"proxyMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"pWallet\",\"type\":\"address\"},{\"name\":\"mWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MintHelper","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000047601017bea550d1c7691bf2279c6c8ca0d687d000000000000000000000000fcc6327d2c1ade91c80d82cf784b63929a04bf08","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://62c4735d46a9656f93be48ea86c71e2eeea2bf870900697c62087e8e566a0b83"}]}