{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n\t/**\n\t * @dev Returns the addition of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `+` operator.\n\t *\n\t * Requirements:\n\t * - Addition cannot overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage)\n\t\tinternal\n\t\tpure\n\t\treturns (uint256)\n\t{\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `*` operator.\n\t *\n\t * Requirements:\n\t * - Multiplication cannot overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction div(uint256 a, uint256 b, string memory errorMessage)\n\t\tinternal\n\t\tpure\n\t\treturns (uint256)\n\t{\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts with custom message when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage)\n\t\tinternal\n\t\tpure\n\t\treturns (uint256)\n\t{\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\n\t/**\n\t * @dev Initializes the contract setting the deployer as the initial owner.\n\t */\n\tconstructor() internal {\n\t\t_owner = msg.sender;\n\t\temit OwnershipTransferred(address(0), _owner);\n\t}\n\n\t/**\n\t * @dev Returns the address of the current owner.\n\t */\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(isOwner(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Returns true if the caller is the current owner.\n\t */\n\tfunction isOwner() public view returns (bool) {\n\t\treturn msg.sender == _owner;\n\t}\n\n\t/**\n\t * @dev Leaves the contract without owner. It will not be possible to call\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n\t *\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\n\t * thereby removing any functionality that is only available to the owner.\n\t */\n\tfunction renounceOwnership() public onlyOwner {\n\t\temit OwnershipTransferred(_owner, address(0));\n\t\t_owner = address(0);\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t * Can only be called by the current owner.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\t_transferOwnership(newOwner);\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t */\n\tfunction _transferOwnership(address newOwner) internal {\n\t\trequire(\n\t\t\tnewOwner != address(0),\n\t\t\t\"Ownable: new owner is the zero address\"\n\t\t);\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n\tstruct Role {\n\t\tmapping(address => bool) bearer;\n\t}\n\n\t/**\n\t * @dev Give an account access to this role.\n\t */\n\tfunction add(Role storage _role, address _account) internal {\n\t\trequire(!has(_role, _account), \"Roles: account already has role\");\n\t\t_role.bearer[_account] = true;\n\t}\n\n\t/**\n\t * @dev Remove an account's access to this role.\n\t */\n\tfunction remove(Role storage _role, address _account) internal {\n\t\trequire(has(_role, _account), \"Roles: account does not have role\");\n\t\t_role.bearer[_account] = false;\n\t}\n\n\t/**\n\t * @dev Check if an account has this role.\n\t * @return bool\n\t */\n\tfunction has(Role storage _role, address _account)\n\t\tinternal\n\t\tview\n\t\treturns (bool)\n\t{\n\t\trequire(_account != address(0), \"Roles: account is the zero address\");\n\t\treturn _role.bearer[_account];\n\t}\n}\n\ncontract Operator is Ownable {\n\tusing Roles for Roles.Role;\n\n\tRoles.Role private _operators;\n\n\taddress[] private _operatorsListed;\n\n\tmapping(address => uint256) _operatorIndexs;\n\n\tevent OperatorAdded(address indexed account);\n\tevent OperatorRemoved(address indexed account);\n\n\tmodifier onlyOperator() {\n\t\trequire(\n\t\t\tisOperator(msg.sender),\n\t\t\t\"caller does not have the Operator role\"\n\t\t);\n\t\t_;\n\t}\n\n\tconstructor() public {\n\t\t_addOperator(msg.sender);\n\t}\n\n\tfunction getAllOperators() public view returns(address[] memory operators) {\n\t\toperators = new address[](_operatorsListed.length);\n\t\tuint256 counter = 0;\n\t\tfor (uint256 i = 0; i < _operatorsListed.length; i++) {\n\t\t\tif (isOperator(_operatorsListed[i])) {\n\t\t\t\toperators[counter] = _operatorsListed[i];\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t  return operators;\n\t}\n\n\tfunction isOperator(address _account) public view returns (bool) {\n\t\treturn _operators.has(_account);\n\t}\n\n\tfunction addOperator(address _account) public onlyOwner {\n\t\t_addOperator(_account);\n\t}\n\n\tfunction batchAddOperators(address[] memory _accounts) public onlyOwner {\n\t\tuint256 arrayLength = _accounts.length;\n\t\tfor (uint256 i = 0; i < arrayLength; i++) {\n\t\t\t_addOperator(_accounts[i]);\n\t\t}\n\t}\n\n\tfunction removeOperator(address _account) public onlyOwner {\n\t\t_removeOperator(_account);\n\t}\n\n\tfunction batchRemoveOperators(address[] memory _accounts)\n\t\tpublic\n\t\tonlyOwner\n\t{\n\t\tuint256 arrayLength = _accounts.length;\n\t\tfor (uint256 i = 0; i < arrayLength; i++) {\n\t\t\t_removeOperator(_accounts[i]);\n\t\t}\n\t}\n\n\tfunction renounceOperator() public {\n\t\t_removeOperator(msg.sender);\n\t}\n\n\tfunction _addOperator(address _account) internal {\n\t\t_operators.add(_account);\n\t\tif (_operatorIndexs[_account] == 0) {\n\t\t  _operatorsListed.push(_account);\n\t\t  _operatorIndexs[_account] = _operatorsListed.length;\n\t\t}\n\t\temit OperatorAdded(_account);\n\t}\n\n\tfunction _removeOperator(address _account) internal {\n\t\t_operators.remove(_account);\n\t\temit OperatorRemoved(_account);\n\t}\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n\t/**\n\t * @dev Returns the amount of tokens in existence.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the amount of tokens owned by `account`.\n\t */\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transfer(address recipient, uint256 amount)\n\t\texternal\n\t\treturns (bool);\n\n\t/**\n\t * @dev Returns the remaining number of tokens that `spender` will be\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t * zero by default.\n\t *\n\t * This value changes when {approve} or {transferFrom} are called.\n\t */\n\tfunction allowance(address owner, address spender)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t * that someone may use both the old and the new allowance by unfortunate\n\t * transaction ordering. One possible solution to mitigate this race\n\t * condition is to first reduce the spender's allowance to 0 and set the\n\t * desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\t * allowance mechanism. `amount` is then deducted from the caller's\n\t * allowance.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(address sender, address recipient, uint256 amount)\n\t\texternal\n\t\treturns (bool);\n\n\t/**\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\t * another (`to`).\n\t *\n\t * Note that `value` may be zero.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\t * a call to {approve}. `value` is the new allowance.\n\t */\n\tevent Approval(\n\t\taddress indexed owner,\n\t\taddress indexed spender,\n\t\tuint256 value\n\t);\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conforms\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is Ownable {\n\tusing SafeMath for uint256;\n\n\t// The token being sold\n\tIERC20 private _token;\n\n\t// Address where funds are collected\n\taddress payable private _wallet;\n\n\t// How many token units a buyer gets per wei.\n\t// The rate is the conversion between wei and the smallest and indivisible token unit.\n\t// So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n\t// 1 wei will give you 1 unit, or 0.001 TOK.\n\tuint256 private _rate;\n\n\t// Amount of wei raised\n\tuint256 private _tokenRaised;\n\n\tmapping (address => uint256) private _beneficiariesTokenRaised;\n\n\t/**\n\t * @param rate Number of token units a buyer gets per wei\n\t * @dev The rate is the conversion between wei and the smallest and indivisible\n\t * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n\t * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n\t * @param wallet Address where collected funds will be forwarded to\n\t * @param token Address of the token being sold\n\t */\n\tconstructor(uint256 rate, address payable wallet, IERC20 token) public {\n\t\trequire(rate > 0, \"Crowdsale: rate is 0\");\n\t\trequire(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n\t\trequire(\n\t\t\taddress(token) != address(0),\n\t\t\t\"Crowdsale: token is the zero address\"\n\t\t);\n\n\t\t_rate = rate;\n\t\t_wallet = wallet;\n\t\t_token = token;\n\t}\n\n\t/**\n\t * @return the token being sold.\n\t */\n\tfunction token() public view returns (IERC20) {\n\t\treturn _token;\n\t}\n\n\t/**\n\t * @return the address where funds are collected.\n\t */\n\tfunction wallet() public view returns (address payable) {\n\t\treturn _wallet;\n\t}\n\n\t/**\n\t * @return the number of token units a buyer gets per wei.\n\t */\n\tfunction rate() public view returns (uint256) {\n\t\treturn _rate;\n\t}\n\n\t/**\n\t * @return the amount of token raised.\n\t */\n\tfunction tokenRaised() public view returns (uint256) {\n\t\treturn _tokenRaised;\n\t}\n\n\t/**\n\t * @return the amount of token raised of beneficiary address\n\t */\n\tfunction tokenRaisedOfBeneficiary(address beneficiary) public view returns (uint256) {\n\t\treturn _beneficiariesTokenRaised[beneficiary];\n\t}\n\n\t/**\n\t * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n\t * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n\t * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n\t *     super._preValidatePurchase(beneficiary, tokenAmount);\n\t *     require(tokenRaised().add(tokenAmount) <= cap);\n\t * @param beneficiary Address performing the token purchase\n\t * @param tokenAmount Value in token involved in the purchase\n\t */\n\tfunction _preValidatePurchase(address beneficiary, uint256 tokenAmount)\n\t\tinternal\n\t\tview\n\t{\n\t\trequire(\n\t\t\tbeneficiary != address(0),\n\t\t\t\"Crowdsale: beneficiary is the zero address\"\n\t\t);\n\t\trequire(tokenAmount != 0, \"Crowdsale: tokenAmount is 0\");\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\t}\n\n\t/**\n\t * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n\t * etc.)\n\t * @param beneficiary Address receiving the tokens\n\t * @param tokenAmount Value in token involved in the purchase\n\t */\n\tfunction _updatePurchasingState(address beneficiary, uint256 tokenAmount)\n\t\tinternal\n\t{\n\t\t// solhint-disable-previous-line no-empty-blocks\n\t\t_tokenRaised = _tokenRaised.add(tokenAmount);\n\t\t_beneficiariesTokenRaised[beneficiary] = _beneficiariesTokenRaised[beneficiary].add(tokenAmount);\n\t}\n\n\t/**\n\t * @dev set exchange rate to new rate\n\t */\n\tfunction _setRate(uint256 _newRate) internal {\n\t\trequire(_newRate != 0, \"Crowdsale: Rate is 0.\");\n\t\t_rate = _newRate;\n\t}\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n\tusing SafeMath for uint256;\n\n\tuint256 private _cap;\n\n\t/**\n\t * @dev Constructor, takes maximum amount of tokens accepted in the crowdsale.\n\t * @param cap Max amount of tokens to be contributed\n\t */\n\tconstructor(uint256 cap) public {\n\t\trequire(cap > 0, \"CappedCrowdsale: cap is 0\");\n\t\t_cap = cap;\n\t}\n\n\t/**\n\t * @return the cap of the crowdsale.\n\t */\n\tfunction cap() public view returns (uint256) {\n\t\treturn _cap;\n\t}\n\n\t/**\n\t * @dev Checks whether the cap has been reached.\n\t * @return Whether the cap was reached\n\t */\n\tfunction capReached() public view returns (bool) {\n\t\treturn tokenRaised() >= _cap;\n\t}\n\n\t/**\n\t * @dev Extend parent behavior requiring purchase to respect the funding cap.\n\t * @param beneficiary Token purchaser\n\t * @param tokenAmount Amount of token contributed\n\t */\n\tfunction _preValidatePurchase(address beneficiary, uint256 tokenAmount)\n\t\tinternal\n\t\tview\n\t{\n\t\tsuper._preValidatePurchase(beneficiary, tokenAmount);\n\t\trequire(\n\t\t\ttokenRaised().add(tokenAmount) <= _cap,\n\t\t\t\"CappedCrowdsale: cap exceeded\"\n\t\t);\n\t}\n}\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Ownable {\n\t/**\n\t * @dev Emitted when the pause is triggered by a pauser (`account`).\n\t */\n\tevent Paused(address account);\n\n\t/**\n\t * @dev Emitted when the pause is lifted by a pauser (`account`).\n\t */\n\tevent Unpaused(address account);\n\n\tbool private _paused;\n\n\t/**\n\t * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n\t * to the deployer.\n\t */\n\tconstructor() internal {\n\t\t_paused = false;\n\t}\n\n\t/**\n\t * @dev Returns true if the contract is paused, and false otherwise.\n\t */\n\tfunction paused() public view returns (bool) {\n\t\treturn _paused;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!_paused, \"Pausable: paused\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t */\n\tmodifier whenPaused() {\n\t\trequire(_paused, \"Pausable: not paused\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Called by a pauser to pause, triggers stopped state.\n\t */\n\tfunction pause() public onlyOwner whenNotPaused {\n\t\t_paused = true;\n\t\temit Paused(msg.sender);\n\t}\n\n\t/**\n\t * @dev Called by a pauser to unpause, returns to normal state.\n\t */\n\tfunction unpause() public onlyOwner whenPaused {\n\t\t_paused = false;\n\t\temit Unpaused(msg.sender);\n\t}\n}\n\n/**\n * @title PausableCrowdsale\n * @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.\n */\ncontract PausableCrowdsale is Crowdsale, Pausable {\n\t/**\n\t * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n\t * Use super to concatenate validations.\n\t * Adds the validation that the crowdsale must not be paused.\n\t * @param _beneficiary Address performing the token purchase\n\t * @param _tokenAmount Value in token involved in the purchase\n\t */\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _tokenAmount)\n\t\tinternal\n\t\tview\n\t\twhenNotPaused\n\t{\n\t\treturn super._preValidatePurchase(_beneficiary, _tokenAmount);\n\t}\n}\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n\tusing SafeMath for uint256;\n\n\tuint256 private _openingTime;\n\tuint256 private _closingTime;\n\n\t/**\n\t * Event for crowdsale extending\n\t * @param newClosingTime new closing time\n\t * @param prevClosingTime old closing time\n\t */\n\tevent TimedCrowdsaleExtended(\n\t\tuint256 prevClosingTime,\n\t\tuint256 newClosingTime\n\t);\n\n\t/**\n\t * @dev Reverts if not in crowdsale time range.\n\t */\n\tmodifier onlyWhileOpen {\n\t\trequire(isOpen(), \"TimedCrowdsale: not open\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Constructor, takes crowdsale opening and closing times.\n\t * @param openingTime Crowdsale opening time\n\t * @param closingTime Crowdsale closing time\n\t */\n\tconstructor(uint256 openingTime, uint256 closingTime) public {\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\t// require(\n\t\t// \topeningTime >= block.timestamp,\n\t\t// \t\"TimedCrowdsale: opening time is before current time\"\n\t\t// );\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire(\n\t\t\tclosingTime > openingTime,\n\t\t\t\"TimedCrowdsale: opening time is not before closing time\"\n\t\t);\n\n\t\t_openingTime = openingTime;\n\t\t_closingTime = closingTime;\n\t}\n\n\t/**\n\t * @return the crowdsale opening time.\n\t */\n\tfunction openingTime() public view returns (uint256) {\n\t\treturn _openingTime;\n\t}\n\n\t/**\n\t * @return the crowdsale closing time.\n\t */\n\tfunction closingTime() public view returns (uint256) {\n\t\treturn _closingTime;\n\t}\n\n\t/**\n\t * @return true if the crowdsale is open, false otherwise.\n\t */\n\tfunction isOpen() public view returns (bool) {\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\treturn\n\t\t\tblock.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\t}\n\n\t/**\n\t * @dev Checks whether the period in which the crowdsale is open has already opened.\n\t * @return Whether crowdsale period has opened\n\t */\n\tfunction hasOpened() public view returns (bool) {\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\treturn block.timestamp >= _openingTime;\n\t}\n\n\t/**\n\t * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n\t * @return Whether crowdsale period has elapsed\n\t */\n\tfunction hasClosed() public view returns (bool) {\n\t\t// solhint-disable-next-line not-rely-on-time\n\t\treturn block.timestamp > _closingTime;\n\t}\n\n\t/**\n\t * @dev Extend parent behavior requiring to be within contributing period.\n\t * @param beneficiary Token purchaser\n\t * @param tokenAmount Amount of token contributed\n\t */\n\tfunction _preValidatePurchase(address beneficiary, uint256 tokenAmount)\n\t\tinternal\n\t\tview\n\t\tonlyWhileOpen\n\t{\n\t\tsuper._preValidatePurchase(beneficiary, tokenAmount);\n\t}\n\n\t/**\n\t * @dev reschedule crowdsale opening time.\n\t * @param newOpeningTime Crowdsale opening time\n\t */\n\tfunction _rescheduleOpeningTime(uint256 newOpeningTime) internal {\n\t\trequire(!hasOpened(), \"TimedCrowdsale: already opened\");\n\t\trequire(\n\t\t\t_closingTime > newOpeningTime,\n\t\t\t\"TimedCrowdsale: new opening time is after current closing time\"\n\t\t);\n\t\t_openingTime = newOpeningTime;\n\t}\n\n\t/**\n\t * @dev Extend crowdsale.\n\t * @param newClosingTime Crowdsale closing time\n\t */\n\tfunction _rescheduleClosingTime(uint256 newClosingTime) internal {\n\t\trequire(!hasClosed(), \"TimedCrowdsale: already closed\");\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire(\n\t\t\tnewClosingTime > block.timestamp,\n\t\t\t\"TimedCrowdsale: new closing time is before current time\"\n\t\t);\n\t\trequire(\n\t\t\tnewClosingTime > _openingTime,\n\t\t\t\"TimedCrowdsale: new closing time is before current closing time\"\n\t\t);\n\n\t\temit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n\t\t_closingTime = newClosingTime;\n\t}\n}\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is TimedCrowdsale {\n\tusing SafeMath for uint256;\n\n\tbool private _finalized;\n\n\tevent CrowdsaleFinalized();\n\n\tconstructor() internal {\n\t\t_finalized = false;\n\t}\n\n\t/**\n\t * @return true if the crowdsale is finalized, false otherwise.\n\t */\n\tfunction finalized() public view returns (bool) {\n\t\treturn _finalized;\n\t}\n\n\t/**\n\t * @dev Must be called after crowdsale ends, to do some extra finalization\n\t * work. Calls the contract's finalization function.\n\t */\n\tfunction finalize() public {\n\t\trequire(!_finalized, \"FinalizableCrowdsale: already finalized\");\n\t\trequire(hasClosed(), \"FinalizableCrowdsale: not closed\");\n\n\t\t_finalized = true;\n\n\t\t_finalization();\n\t\temit CrowdsaleFinalized();\n\t}\n\n\t/**\n\t * @dev Can be overridden to add finalization logic. The overriding function\n\t * should call super._finalization() to ensure the chain of finalization is\n\t * executed entirely.\n\t */\n\tfunction _finalization() internal {\n\t\t// solhint-disable-previous-line no-empty-blocks\n\t}\n}\n\ncontract AdvanceCrowdsale is Operator, Crowdsale, CappedCrowdsale, TimedCrowdsale, PausableCrowdsale, FinalizableCrowdsale {\n\tuint256 private _tokenPriceInCents = 100; // default value 1 WDS = 100 (1 cent)\n\n\tuint256 private _bonusRate; // no bonus if value = 0\n\n\t// using for buyable token by btc\n\t// How many token units a buyer gets per satoshi.\n\t// The rate is the conversion between satoshi and the smallest and indivisible token unit.\n\t// So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n\t// 1 satoshi will give you 1 unit, or 0.001 TOK.\n\tuint256 private _btcRate;\n\n\taddress private _lockFactoryAddress;\n\n\t// satoshi to uint token\n\tuint256 public constant SATOSHI_CAST_UNIT = 10**10;\n\n\tuint256 public constant PRICE_COEFF = 100; // allow to set minimum token price is 0.001 USD\n\n\tuint256 public constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\n\n\tmodifier onlyLockFactory() {\n\t\trequire(msg.sender == _lockFactoryAddress, \"AdvanceCrowsale: caller is not lock factory.\");\n\t\t_;\n\t}\n\n\tconstructor(uint256 _rate, uint256 _startBtcRate, address payable _wallet, IERC20 _token, uint256 _cap, uint256 _openingTime, uint256 _closingTime, address _lockFactory)\n\t\tpublic\n\t\tCrowdsale(_rate, _wallet, _token)\n\t\tCappedCrowdsale(_cap)\n\t\tTimedCrowdsale(_openingTime, _closingTime)\n\t{\n\t\trequire(_startBtcRate != 0, \"AdvanceCrowsale: BTC rate is 0.\");\n\t\trequire(_lockFactory != address(0), \"AdvanceCrowsale: Lock factory is zero address.\");\n\t\t_btcRate = _startBtcRate;\n\t\t_lockFactoryAddress = _lockFactory;\n\t}\n\n\t/**\n\t * @return  number of token units a buyer gets per satoshi.\n\t */\n\tfunction btcRate() public view returns (uint256) {\n\t\treturn _btcRate;\n\t}\n\n\t/**\n\t * @return the token price in cents\n\t */\n\tfunction tokenPriceInCents() public view returns (uint256) {\n\t\treturn _tokenPriceInCents;\n\t}\n\n\t/**\n\t * @return the token bonus rate\n\t */\n\tfunction bonusRate() public view returns (uint256) {\n\t\treturn _bonusRate;\n\t}\n\n\t/**\n\t * setRate set token price in cents, 1 WDS = ? cents\n\t * @param _price new token price\n\t */\n\tfunction setTokenPriceInCents(uint256 _price) public onlyOwner {\n\t\trequire(_price > 0, \"AdvanceCrowsale: price is zero\");\n\n\t\tuint256 _oldPrice = _tokenPriceInCents;\n\t\t_tokenPriceInCents = _price;\n\n\t\t// update exchange rate in wei\n\t\tuint256 _newRate = rate().mul(_oldPrice).div(_tokenPriceInCents);\n\t\tsuper._setRate(_newRate);\n\t\t// update exchange rate in satoshi\n\t\t_btcRate = _btcRate.mul(_oldPrice).div(_tokenPriceInCents);\n\t}\n\n\t/**\n\t * setRateByCents set new exchange rate by ETH/USD and BTC/USD rate\n\t * @param _newRatePerCent new eth rate by 1 cent\n\t * @param _newBtcRatePerCent new eth rate by 1 cent\n\t */\n\tfunction setExchangeRateByCents(uint256 _newRatePerCent, uint256 _newBtcRatePerCent) public onlyOperator {\n\t\trequire(_newRatePerCent > 0, \"AdvanceCrowsale: rate is zero\");\n\t\trequire(_newBtcRatePerCent > 0, \"AdvanceCrowsale: btc rate is zero\");\n\t\tuint256 _newRate = _newRatePerCent.mul(PRICE_COEFF).div(_tokenPriceInCents);\n\t\tsuper._setRate(_newRate);\n\t\t_btcRate = _newBtcRatePerCent.mul(PRICE_COEFF).div(_tokenPriceInCents);\n\t}\n\n\t/**\n\t * setBonusRate set new bonus rate\n\t * @param _newBonusRate new bonus rate\n\t */\n\tfunction setBonusRate(uint256 _newBonusRate) public onlyOwner {\n\t\trequire(_newBonusRate <= BONUS_COEFF, \"AdvanceCrowsale: Bonus exceeds the allowed limit\");\n\t\t_bonusRate = _newBonusRate;\n\t}\n\n\t/**\n\t * setOpeningTime change sale opening time\n\t * can reschedule before sale start\n\t * @param _openingTime new opening time\n\t */\n\tfunction setOpeningTime(uint256 _openingTime) public onlyOwner {\n\t\tsuper._rescheduleOpeningTime(_openingTime);\n\t}\n\n\t/**\n\t * setClosingTime extend sale closing time\n\t * @param _closingTime new closing time\n\t */\n\tfunction setClosingTime(uint256 _closingTime) public onlyOwner {\n\t\tsuper._rescheduleClosingTime(_closingTime);\n\t}\n\n\t/**\n\t * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n\t * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n\t * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n\t *     super._preValidatePurchase(beneficiary, tokenAmount);\n\t *     require(tokenRaised().add(tokenAmount) <= cap);\n\t * @param _beneficiary Address performing the token purchase\n\t * @param tokenAmount Value in token involved in the purchase\n\t */\n\tfunction preValidatePurchase(address _beneficiary, uint256 tokenAmount) external view returns (bool) {\n\t\tbool success = tokenRaised().add(tokenAmount) <= cap();\n\t\tif (!success) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n\t * etc.)\n\t * @param beneficiary Address receiving the tokens\n\t * @param tokenAmount Value in token involved in the purchase\n\t */\n\tfunction updatePurchasingState(address beneficiary, uint256 tokenAmount) external onlyLockFactory returns (bool) {\n\t\trequire(tokenAmount != 0, \"AdvanceCrowsale: token amount is 0.\");\n\t\tsuper._updatePurchasingState(beneficiary, tokenAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * override _getTokenAmount\n\t * get total token with bonus rate\n\t */\n\tfunction estimateTokenAmountInWei(uint256 weiAmount) external view returns (uint256) {\n\t\treturn weiAmount.mul(_computeEthExchangeRate());\n\t}\n\n\t/**\n\t * _computeExchangeRate calculate new exchange rate with bonus tokens\n\t * @return new exchange rate\n\t */\n\tfunction _computeEthExchangeRate() internal view returns (uint256) {\n\t\tuint256 _currentRate = rate();\n\t\tif (_bonusRate == 0) {\n\t\t\treturn _currentRate;\n\t\t}\n\t\tuint256 _extraRate = _currentRate.mul(_bonusRate).div(BONUS_COEFF);\n\t\treturn _currentRate.add(_extraRate);\n\t}\n\n\t/**\n\t * @dev Override to extend the way in which ether is converted to tokens.\n\t * @param satoshiAmount Value in satoshi to be converted into tokens\n\t * @return Number of tokens that can be purchased with the specified satoshiAmount\n\t */\n\tfunction estimateTokenAmountInSatoshi(uint256 satoshiAmount) external view returns (uint256) {\n\t\treturn satoshiAmount.mul(_computeBtcExchangeRate()).mul(SATOSHI_CAST_UNIT);\n\t}\n\n\t/**\n\t * _computeExchangeRate calculate new exchange rate with bonus tokens\n\t * @return new exchange rate\n\t */\n\tfunction _computeBtcExchangeRate() internal view returns (uint256) {\n\t\tif (_bonusRate == 0) {\n\t\t\treturn _btcRate;\n\t\t}\n\t\tuint256 _extraRate = _btcRate.mul(_bonusRate).div(BONUS_COEFF);\n\t\treturn _btcRate.add(_extraRate);\n\t}\n}\n\ncontract WindsCoinCrowdsale1 is AdvanceCrowdsale {\n\tstring public constant stage = \"CrowdsaleStage1\";\n\n\tconstructor(\n\t\tuint256 _rate,\n\t\tuint256 _startBtcRate,\n\t\taddress payable _wallet,\n\t\tIERC20 _token,\n\t\tuint256 _cap,\n\t\tuint256 _openingTime,\n\t\tuint256 _closingTime,\n\t\taddress _lockFactory\n\t)\n\t\tpublic\n\t\tAdvanceCrowdsale(\n\t\t\t_rate,\n\t\t\t_startBtcRate,\n\t\t\t_wallet,\n\t\t\t_token,\n\t\t\t_cap,\n\t\t\t_openingTime,\n\t\t\t_closingTime,\n\t\t\t_lockFactory\n\t\t)\n\t{}\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBtcRate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_COEFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_COEFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SATOSHI_CAST_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchAddOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchRemoveOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiAmount\",\"type\":\"uint256\"}],\"name\":\"estimateTokenAmountInSatoshi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"estimateTokenAmountInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"preValidatePurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBonusRate\",\"type\":\"uint256\"}],\"name\":\"setBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"setClosingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRatePerCent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBtcRatePerCent\",\"type\":\"uint256\"}],\"name\":\"setExchangeRateByCents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openingTime\",\"type\":\"uint256\"}],\"name\":\"setOpeningTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInCents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"tokenRaisedOfBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updatePurchasingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WindsCoinCrowdsale1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000005c2500000000000000000000000000000000000000000000000000000000000e584f000000000000000000000000d2307d71606b9f3d61cd629670fa47d3c850882500000000000000000000000019c8ac33cb42c67ce69bcf4e52466a955d46f8660000000000000000000000000000000000000000014adf4b7320334b90000000000000000000000000000000000000000000000000000000000000005ee843c0000000000000000000000000000000000000000000000000000000005f0f19ef0000000000000000000000002c307a1952891cb2b6856155a1534a1c75ecc7cd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}