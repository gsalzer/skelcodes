{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/IMultisigCarrier.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract IMultisigCarrier {\r\n\r\n    function approveFrom(\r\n        address caller,\r\n        address payable destination,\r\n        address currencyAddress,\r\n        uint256 amount\r\n    ) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/MultisigVault.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MultisigVault {\r\n\r\n    address private _carrier;\r\n\r\n    constructor() public {\r\n        _carrier = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _carrier;\r\n    }\r\n\r\n    function approve(\r\n        address payable destination,\r\n        address currencyAddress,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        IMultisigCarrier multisigCarrier = IMultisigCarrier(_carrier);\r\n        return multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount);\r\n    }\r\n\r\n    function external_call(address destination, uint value, bytes memory data) public returns (bool) {\r\n        require(msg.sender == _carrier, \"Ownable: caller is not the owner\");\r\n\r\n        bool result;\r\n        assembly {\r\n            let dataLength := mload(data)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                0,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function () external payable {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"external_call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultisigVault","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f5812ba3aef4b9ba18061569924e75343f57e11cb7171c69b1e8753748a527af"}]}