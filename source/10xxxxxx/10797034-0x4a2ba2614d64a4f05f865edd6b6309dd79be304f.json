{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n //NOTE: FOR 10,000.0 BUTTCOINS, The contract will get 9,800 Buttcoins, previous address will get 100 Buttcoins, \r\n //100 Buttcoins will be burned and you will get 3.355443199999981 Krakin't tokens.\r\n //The contract will keep a track of 10,000.0 Buttcoins, and you will get 9,800 back once the swap is stopped.\r\n\r\n //This contract can be stopped. Once stopped, the remaining KRK tokens will be burned or taken from a contract.\r\n\r\n pragma solidity = 0.7.0;\r\n\r\n library SafeMath {\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n     uint256 c = a + b;\r\n     require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n     return c;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n     return sub(a, b, \"SafeMath: subtraction overflow\");\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n     require(b <= a, errorMessage);\r\n     uint256 c = a - b;\r\n\r\n     return c;\r\n   }\r\n\r\n   function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n     if (a == 0) {\r\n       return 0;\r\n     }\r\n\r\n     uint256 c = a * b;\r\n     require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n     return c;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n     return div(a, b, \"SafeMath: division by zero\");\r\n   }\r\n\r\n   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n     require(b > 0, errorMessage);\r\n     uint256 c = a / b;\r\n     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n     return c;\r\n   }\r\n\r\n }\r\n\r\n abstract contract ButtCoin {\r\n   function transferFrom(address sender, address recipient, uint256 amount) external virtual returns(bool);\r\n\r\n   function allowance(address owner, address spender) public view virtual returns(uint256);\r\n\r\n   function balanceOf(address tokenOwner) public view virtual returns(uint balance);\r\n\r\n   function transfer(address to, uint tokens) public virtual returns(bool success);\r\n\r\n   function approve(address spender, uint tokens) public virtual returns(bool success);\r\n }\r\n\r\n abstract contract Krakint {\r\n\r\n   function transfer(address toAddress, uint256 amount) external virtual returns(bool);\r\n\r\n }\r\n\r\n contract ButtSwap {\r\n   mapping(address => uint256) public butts;\r\n\r\n   using SafeMath\r\n   for uint;\r\n   uint private totalButts = 3355443199999981;\r\n   uint private availableKrakints = 10000000000000000000000;\r\n   ButtCoin private buttcoin;\r\n   Krakint private krakint;\r\n   address public contractAddress;\r\n   address public owner;\r\n   uint public krkInContract = 1000000000000000000000000; //to be reduced from \r\n   bool public isLive = true;\r\n\r\n   address buttcoinAddress = address(0x5556d6a283fD18d71FD0c8b50D1211C5F842dBBc); //change before deployment\r\n   address krakintAddress = address(0x7C131Ab459b874b82f19cdc1254fB66840D021B6); //change before deployment\r\n\r\n   constructor() {\r\n     contractAddress = address(this);\r\n     owner = msg.sender;\r\n     buttcoin = ButtCoin(buttcoinAddress);\r\n     krakint = Krakint(krakintAddress);\r\n   }\r\n\r\n   function Step2(uint buttcoinAmount) public virtual returns(string memory message) {\r\n     require(isLive, \"Swap contract is stopped\");\r\n\r\n     require(buttcoin.balanceOf(msg.sender) >= buttcoinAmount, \"Not enough allocated buttcoins\");\r\n     buttcoin.transferFrom(msg.sender, contractAddress, buttcoinAmount);\r\n     butts[msg.sender] = butts[msg.sender].add(buttcoinAmount);\r\n\r\n     uint amt2 = calculateKrakints(buttcoinAmount);\r\n     require(krkInContract >= amt2, \"Not enough krakints\");\r\n\r\n     krakint.transfer(msg.sender, amt2);\r\n\r\n     krkInContract = krkInContract.sub(amt2);\r\n\r\n     string memory mssg = \"Done! Please wait for the Krakin't transfer to complete.\";\r\n     return mssg;\r\n   }\r\n\r\n   function calculateKrakints(uint buttcoins) private view returns(uint amount) {\r\n     buttcoins = buttcoins.mul(10000000000000); //adds decimals\r\n     uint ret = (buttcoins.mul(totalButts)).div(availableKrakints);\r\n     return ret;\r\n   }\r\n\r\n   //we do not count the losses, so it can happen that some accounts will get butted!\r\n   function recoverButtcoins() public virtual returns(bool success) {\r\n     require(!isLive, \"Contract must be stopped to get your butts back\");\r\n     require(butts[msg.sender] > 0, \"You cannot recover zero buttcoins\");\r\n     buttcoin.transfer(msg.sender, butts[msg.sender]);\r\n     butts[msg.sender] = 0;\r\n     return true;\r\n   }\r\n\r\n   function stopSwap() public virtual {\r\n     require(msg.sender == owner);\r\n     require(isLive);\r\n     isLive = false;\r\n   }\r\n\r\n }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buttcoinAmount\",\"type\":\"uint256\"}],\"name\":\"Step2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"butts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"krkInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverButtcoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ButtSwap","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://88df1d168253a192e71cf938bdafefd9ad2ae1bf7bed5496923f8cd7715da323"}]}