{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\Owned.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Owned {\r\n\t\r\n\taddress payable public owner;\r\n\t\r\n    constructor() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n    // This contract only defines a modifier but it will be used in derived contracts.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Owner required\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\Mortal.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Mortal is Owned\r\n{\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n// File: contracts\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev ERC20 contract interface.\r\n */\r\ncontract IERC20\r\n{\r\n\tfunction totalSupply() public view returns (uint);\r\n\t\r\n\tfunction transfer(address _to, uint _value) public returns (bool success);\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint balance);\r\n\t\r\n\tfunction approve(address _spender, uint _value) public returns (bool success);\r\n\t\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: contracts\\SafeMathLib.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMathLib {\r\n\t\r\n\tusing SafeMathLib for uint;\r\n\t\r\n\t/**\r\n\t * @dev Sum two uint numbers.\r\n\t * @param a Number 1\r\n\t * @param b Number 2\r\n\t * @return uint\r\n\t */\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMathLib.add: required c >= a\");\r\n    }\r\n\t\r\n\t/**\r\n\t * @dev Substraction of uint numbers.\r\n\t * @param a Number 1\r\n\t * @param b Number 2\r\n\t * @return uint\r\n\t */\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"SafeMathLib.sub: required b <= a\");\r\n        c = a - b;\r\n    }\r\n\t\r\n\t/**\r\n\t * @dev Product of two uint numbers.\r\n\t * @param a Number 1\r\n\t * @param b Number 2\r\n\t * @return uint\r\n\t */\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require((a == 0 || c / a == b), \"SafeMathLib.mul: required (a == 0 || c / a == b)\");\r\n    }\r\n\t\r\n\t/**\r\n\t * @dev Division of two uint numbers.\r\n\t * @param a Number 1\r\n\t * @param b Number 2\r\n\t * @return uint\r\n\t */\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0, \"SafeMathLib.div: required b > 0\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts\\OrFeedInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string calldata fromSymbol, string calldata  toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string calldata  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n  //function arb(address  fundsReturnToAddress,  address liquidityProviderContractAddress, string[] calldata   tokens,  uint256 amount, string[] calldata  exchanges) external payable returns (bool);\r\n}\r\n\r\n// File: contracts\\OrFeedLIVETest.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Oracle Feed LIVE Test contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract OrFeedLIVETest is Owned, Mortal, OrFeedInterface\r\n{\r\n\tusing SafeMathLib for uint;\r\n\t\r\n\t// Oracle feed for ETH/USDT real time exchange rate contrat address\r\n\taddress public orFeedContractAddress;\r\n\tOrFeedInterface public orFeed;\r\n\t\r\n\tuint public oneEthAsWei = 10**18;\r\n\t\r\n\t\r\n\t\r\n\t// ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(OrFeedInterface _orFeedContract) public\r\n\t{\r\n\t\torFeedContractAddress = address(_orFeedContract);\r\n\t\torFeed = OrFeedInterface(orFeedContractAddress);\r\n    }\r\n\t\r\n\t\r\n\t\r\n\tfunction setOrFeedAddress(OrFeedInterface _orFeedContract) public onlyOwner returns(bool) {\r\n\t\trequire(orFeedContractAddress != address(_orFeedContract), \"New orfeed address required\");\r\n\t\t\r\n\t\torFeedContractAddress = address(_orFeedContract);\r\n\t\torFeed = OrFeedInterface(orFeedContractAddress);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getEthUsdPrice() public view returns(uint) {\r\n\t\treturn orFeed.getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", oneEthAsWei);\r\n\t}\r\n\t\r\n\tfunction getEthWeiAmountPrice(uint ethWeiAmount) public view returns(uint) {\r\n\t\treturn orFeed.getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", ethWeiAmount);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getEthUsdPrice2() public view returns(uint) {\r\n\t\treturn OrFeedInterface(orFeedContractAddress).getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", oneEthAsWei);\r\n\t}\r\n\t\r\n\tfunction getEthWeiAmountPrice2(uint ethWeiAmount) public view returns(uint) {\r\n\t\treturn OrFeedInterface(orFeedContractAddress).getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", ethWeiAmount);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getExchangeRate( string calldata fromSymbol,\r\n\t\t\t\t\t\t\tstring calldata toSymbol,\r\n\t\t\t\t\t\t\tstring calldata venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\treturn (orFeed.getExchangeRate(fromSymbol, toSymbol, venue, amount));\r\n\t}\r\n\t\r\n\tfunction getExchangeRate2( string calldata fromSymbol,\r\n\t\t\t\t\t\t\tstring calldata toSymbol,\r\n\t\t\t\t\t\t\tstring calldata venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\treturn (OrFeedInterface(orFeedContractAddress).getExchangeRate(fromSymbol, toSymbol, venue, amount));\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 ) {\r\n\t\treturn orFeed.getTokenDecimalCount(tokenAddress);\r\n\t}\r\n\t\r\n\tfunction getTokenAddress ( string calldata  symbol ) external view returns ( address ) {\r\n\t\treturn orFeed.getTokenAddress(symbol);\r\n\t}\r\n\t\r\n\tfunction getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 ) {\r\n\t\treturn orFeed.getSynthBytes32(symbol);\r\n\t}\r\n\t\r\n\tfunction getForexAddress ( string calldata symbol ) external view returns ( address ) {\r\n\t\treturn orFeed.getForexAddress(symbol);\r\n\t}\r\n\t\r\n\t/*function arb(address  fundsReturnToAddress,\r\n\t\t\t\taddress liquidityProviderContractAddress,\r\n\t\t\t\tstring[] calldata tokens,\r\n\t\t\t\tuint256 amount,\r\n\t\t\t\tstring[] calldata exchanges)\r\n\t\t\texternal payable returns (bool)\r\n\t{\r\n\t\trevert();\r\n\t}*/\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Accept ETH donations\r\n\t */\r\n    function () external payable {\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev Send all eth balance in the contract to another address\r\n\t * @param _to Address to send contract ether balance to\r\n\t * @return bool\r\n\t */\r\n    function reclaimEther(address payable _to) external onlyOwner returns (bool) {\r\n        _to.transfer(address(this).balance);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t/**\r\n\t * @dev Owner can transfer out (recover) any ERC20 tokens accidentally sent to this contract.\r\n\t * @param tokenAddress Token contract address we want to recover lost tokens from.\r\n\t * @param tokens Amount of tokens to be recovered, usually the same as the balance of this contract.\r\n\t * @return bool\r\n\t */\r\n    function recoverAnyERC20Token(address tokenAddress, uint tokens) external onlyOwner returns (bool ok) {\r\n\t\tok = IERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethWeiAmount\",\"type\":\"uint256\"}],\"name\":\"getEthWeiAmountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthUsdPrice2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orFeedContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orFeedContract\",\"type\":\"address\"}],\"name\":\"setOrFeedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethWeiAmount\",\"type\":\"uint256\"}],\"name\":\"getEthWeiAmountPrice2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromSymbol\",\"type\":\"string\"},{\"name\":\"toSymbol\",\"type\":\"string\"},{\"name\":\"venue\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getExchangeRate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromSymbol\",\"type\":\"string\"},{\"name\":\"toSymbol\",\"type\":\"string\"},{\"name\":\"venue\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthUsdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"recoverAnyERC20Token\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenDecimalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEthAsWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getSynthBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getForexAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_orFeedContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OrFeedLIVETest","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008316b082621cfedab95bf4a44a1d4b64a6ffc336","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7e2376dfeb3b0c087a34a5bf40436fface1cdfb8dc5bc30f054f3d591338918b"}]}