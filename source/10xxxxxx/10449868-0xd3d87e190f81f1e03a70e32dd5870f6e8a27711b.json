{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\ncontract Ballast {\r\n    address public ownerWallet;\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint totalEarning;\r\n        address[] referral;\r\n    }\r\n\r\n    struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received; \r\n    }\r\n      \r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    \r\n    mapping(address => mapping(uint => uint[])) public userPoolSeqID;\r\n    \r\n    mapping (address => mapping(uint => PoolUserStruct)) public pool1users;\r\n    mapping (uint => address) public pool1userList;\r\n     \r\n    mapping (address => mapping(uint =>PoolUserStruct)) public pool2users;\r\n    mapping (uint => address) public pool2userList;\r\n     \r\n    mapping (address => mapping(uint =>PoolUserStruct)) public pool3users;\r\n    mapping (uint => address) public pool3userList;\r\n     \r\n    mapping(uint => uint) public Auto_Pool_Upline;\r\n    mapping(uint => uint) public Auto_Pool_System;\r\n    \r\n    Ballast public oldBallast;\r\n    \r\n    uint public oldBallastId = 1;\r\n    uint public currUserID = 0;\r\n    \r\n    uint public pool1currUserID = 0;\r\n    uint public pool2currUserID = 0;\r\n    uint public pool3currUserID = 0;\r\n      \r\n    uint public pool1activeUserID = 0;\r\n    uint public pool2activeUserID = 0;\r\n    uint public pool3activeUserID = 0;\r\n\r\n    uint public REGESTRATION_FESS=0.08 ether;\r\n    uint public ADMIN_FEES = 0.02 ether;\r\n   \r\n    uint public pool1_price = 0.25 ether;\r\n    uint public pool2_price = 0.50 ether;\r\n    uint public pool3_price = 1 ether;\r\n    \r\n    bool public lockStatus;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event regPoolEntry(address indexed _user,uint indexed _poolID,uint indexed _activeUser, uint _time);\r\n    event poolReInvest(uint indexed _poolID, address indexed _user, uint _useID, uint _reInvestID);\r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _poolID, uint _time);\r\n    event getPoolMoneyForLevelEvent(uint indexed _poolID,address indexed _user, address indexed _referral, uint _level, uint _amount, uint _time);\r\n    event lostPoolMoneyForLevelEvent(uint indexed _poolID, address indexed _user, address indexed _referral, uint _level, uint _amount, uint _time);\r\n    \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n        oldBallast = Ballast(0xdD7dA498a5F040C1BF6C6ff6406Bf07a985029D2);\r\n        \r\n        Auto_Pool_Upline[1] = 0.02 ether;\r\n        Auto_Pool_Upline[2] = 0.04 ether;\r\n        Auto_Pool_Upline[3] = 0.08 ether;\r\n        \r\n        Auto_Pool_System[1] = 0.05 ether;\r\n        Auto_Pool_System[2] = 0.10 ether;\r\n        Auto_Pool_System[3] = 0.20 ether;\r\n\r\n        \r\n        PoolUserStruct memory pooluserStruct;\r\n        \r\n        pool1currUserID++;\r\n\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n        pool1activeUserID = pool1currUserID;\r\n        pool1users[msg.sender][pool1currUserID] = pooluserStruct;\r\n        pool1userList[pool1currUserID] = msg.sender;\r\n        userPoolSeqID[msg.sender][1].push(pool1currUserID);\r\n        \r\n        pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n        pool2activeUserID = pool2currUserID;\r\n        pool2users[msg.sender][pool2currUserID] = pooluserStruct;\r\n        pool2userList[pool2currUserID] = msg.sender;\r\n        userPoolSeqID[msg.sender][2].push(pool2currUserID);\r\n       \r\n       \r\n        pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n        pool3activeUserID = pool3currUserID;\r\n        pool3users[msg.sender][pool3currUserID] = pooluserStruct;\r\n        pool3userList[pool3currUserID] = msg.sender;\r\n        userPoolSeqID[msg.sender][3].push(pool3currUserID);\r\n    }\r\n\r\n    function () external payable {\r\n        revert(\"No contract call\");\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        require(_referrerID > 0 && _referrerID <= currUserID, \"Incorrect referrer Id\");\r\n        require(msg.value == REGESTRATION_FESS, \"Incorrect Value\");\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            totalEarning:0,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        uint referrerAmount = REGESTRATION_FESS-ADMIN_FEES;\r\n        \r\n        require(\r\n            (address(uint160(userList[_referrerID])).send(referrerAmount)) && (address(uint160(ownerWallet)).send(ADMIN_FEES)),\r\n            \"failed to transfer referrer and ownerWallet fees\"\r\n        );\r\n        \r\n        users[userList[_referrerID]].totalEarning += referrerAmount;\r\n        users[ownerWallet].totalEarning += ADMIN_FEES;  \r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyPool1() public payable {\r\n       require(lockStatus == false, \"Contract Locked\");\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(msg.value == pool1_price, \"Incorrect Value\");\r\n        \r\n        pool1currUserID++;\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        \r\n        if(pool1currUserID == 3)\r\n           pool1activeUserID++;\r\n           \r\n        address pool1Currentuser = pool1userList[pool1activeUserID];\r\n        \r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n        \r\n        pool1users[msg.sender][pool1currUserID] = userStruct;\r\n        pool1userList[pool1currUserID]=msg.sender;\r\n        userPoolSeqID[msg.sender][1].push(pool1currUserID);\r\n        \r\n        uint payment = pool1users[pool1Currentuser][pool1activeUserID].payment_received;\r\n        \r\n        if(payment == 1){\r\n            payForLevel(1, 10, pool1Currentuser);\r\n            require(address(uint160(ownerWallet)).send(Auto_Pool_System[1]),\"failed to transfer system\");\r\n        }\r\n        else if(payment == 0){\r\n            require(address(uint160(pool1Currentuser)).send(pool1_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\r\n        }\r\n        pool1users[pool1Currentuser][pool1activeUserID].payment_received+=1;\r\n        \r\n        if(pool1users[pool1Currentuser][pool1activeUserID].payment_received>=3)\r\n        { \r\n            uint pool1PreActiveUserID = pool1activeUserID;\r\n            pool1activeUserID++;\r\n            pool1currUserID++;\r\n            \r\n            address pool1ActiveCurrentuser = pool1userList[pool1activeUserID];\r\n            require(address(uint160(pool1ActiveCurrentuser)).send(pool1_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool1ActiveCurrentuser, 1, now);\r\n            \r\n            pool1users[pool1ActiveCurrentuser][pool1activeUserID].payment_received+=1;\r\n            \r\n            userStruct = PoolUserStruct({\r\n                isExist:true,\r\n                id:pool1currUserID,\r\n                payment_received:0\r\n            });\r\n       \r\n            pool1users[pool1Currentuser][pool1currUserID] = userStruct;\r\n            pool1userList[pool1currUserID]=pool1Currentuser;\r\n            userPoolSeqID[pool1Currentuser][1].push(pool1currUserID);\r\n            \r\n            emit regPoolEntry(msg.sender, 1, pool1PreActiveUserID, now);\r\n            emit regPoolEntry(pool1Currentuser, 1, pool1PreActiveUserID, now);\r\n            emit poolReInvest(1, pool1Currentuser, pool1PreActiveUserID, pool1currUserID);\r\n        }\r\n        else{\r\n            emit regPoolEntry(msg.sender, 1, pool1activeUserID, now);\r\n        }\r\n    }\r\n    \r\n    function buyPool2() public payable {\r\n       require(lockStatus == false, \"Contract Locked\");        \r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(msg.value == pool2_price, \"Incorrect Value\");\r\n        \r\n        pool2currUserID++;\r\n       \r\n        PoolUserStruct memory userStruct;\r\n        \r\n        if(pool2currUserID == 3)\r\n           pool2activeUserID++;\r\n           \r\n        address pool2Currentuser = pool2userList[pool2activeUserID];\r\n        \r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n        pool2users[msg.sender][pool2currUserID] = userStruct;\r\n        pool2userList[pool2currUserID]=msg.sender;\r\n        userPoolSeqID[msg.sender][2].push(pool2currUserID);\r\n        \r\n        uint payment = pool2users[pool2Currentuser][pool2activeUserID].payment_received;\r\n        \r\n        if(payment == 1){\r\n            payForLevel(2, 10, pool2Currentuser);\r\n            require(address(uint160(ownerWallet)).send(Auto_Pool_System[2]),\"failed to transfer system\");\r\n        }\r\n        else if(payment == 0){\r\n            require(address(uint160(pool2Currentuser)).send(pool2_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\r\n        }\r\n        pool2users[pool2Currentuser][pool2activeUserID].payment_received+=1;\r\n        \r\n        if(pool2users[pool2Currentuser][pool2activeUserID].payment_received>=3)\r\n        { \r\n            uint pool2PreActiveUserID = pool2activeUserID;\r\n            pool2activeUserID++;\r\n            pool2currUserID++;\r\n            \r\n            address pool2ActiveCurrentuser = pool2userList[pool2activeUserID];\r\n            require(address(uint160(pool2ActiveCurrentuser)).send(pool2_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool2ActiveCurrentuser, 2, now);\r\n            \r\n            pool2users[pool2ActiveCurrentuser][pool2activeUserID].payment_received+=1;\r\n            \r\n            userStruct = PoolUserStruct({\r\n                isExist:true,\r\n                id:pool2currUserID,\r\n                payment_received:0\r\n            });\r\n       \r\n            pool2users[pool2Currentuser][pool2currUserID] = userStruct;\r\n            pool2userList[pool2currUserID]=pool2Currentuser;\r\n            userPoolSeqID[pool2Currentuser][2].push(pool2currUserID);\r\n            \r\n            emit regPoolEntry(msg.sender, 2, pool2PreActiveUserID, now);\r\n            emit regPoolEntry(pool2Currentuser, 2, pool2PreActiveUserID, now);\r\n            emit poolReInvest(2, pool2Currentuser, pool2PreActiveUserID, pool2currUserID);\r\n        }\r\n        else{\r\n            emit regPoolEntry(msg.sender, 2, pool2activeUserID, now);\r\n        }\r\n    }\r\n    \r\n    function buyPool3() public payable {\r\n       require(lockStatus == false, \"Contract Locked\");        \r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n       require(msg.value == pool3_price, \"Incorrect Value\");\r\n        \r\n        pool3currUserID++;\r\n       \r\n        PoolUserStruct memory userStruct;\r\n        \r\n        if(pool3currUserID == 3)\r\n           pool3activeUserID++;\r\n           \r\n        address pool3Currentuser = pool3userList[pool3activeUserID];\r\n        \r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n        pool3users[msg.sender][pool3currUserID] = userStruct;\r\n        pool3userList[pool3currUserID]=msg.sender;\r\n        userPoolSeqID[msg.sender][3].push(pool3currUserID);\r\n        \r\n        uint payment = pool3users[pool3Currentuser][pool3activeUserID].payment_received;\r\n        \r\n        if(payment == 1){\r\n            payForLevel(3, 10, pool3Currentuser);\r\n            require(address(uint160(ownerWallet)).send(Auto_Pool_System[3]),\"failed to transfer system\");\r\n        }\r\n        else if(payment == 0){\r\n            require(address(uint160(pool3Currentuser)).send(pool3_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\r\n        }\r\n        pool3users[pool3Currentuser][pool3activeUserID].payment_received+=1;\r\n        \r\n        if(pool3users[pool3Currentuser][pool3activeUserID].payment_received>=3)\r\n        { \r\n            uint pool3PreActiveUserID = pool3activeUserID;\r\n            pool3activeUserID++;\r\n            pool3currUserID++;\r\n            \r\n            address pool3ActiveCurrentuser = pool3userList[pool3activeUserID];\r\n            require(address(uint160(pool3ActiveCurrentuser)).send(pool3_price),\"failed to transfer direct income\");\r\n            emit getPoolPayment(msg.sender,pool3ActiveCurrentuser, 3, now);\r\n            \r\n            pool3users[pool3ActiveCurrentuser][pool3activeUserID].payment_received+=1;\r\n            \r\n            userStruct = PoolUserStruct({\r\n                isExist:true,\r\n                id:pool3currUserID,\r\n                payment_received:0\r\n            });\r\n       \r\n            pool3users[pool3Currentuser][pool3currUserID] = userStruct;\r\n            pool3userList[pool3currUserID]=pool3Currentuser;\r\n            userPoolSeqID[pool3Currentuser][3].push(pool3currUserID);\r\n            \r\n            emit regPoolEntry(msg.sender, 3, pool3PreActiveUserID, now);\r\n            emit regPoolEntry(pool3Currentuser, 3, pool3PreActiveUserID, now);\r\n            emit poolReInvest(3, pool3Currentuser, pool3PreActiveUserID, pool3currUserID);\r\n        }\r\n        else{\r\n            emit regPoolEntry(msg.sender, 3, pool3activeUserID, now);\r\n        }\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Invalid User\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    } \r\n    \r\n    function payForLevel(uint _poolID, uint _level, address _user) internal {\r\n        address referer;\r\n\r\n        referer = userList[users[_user].referrerID];\r\n        \r\n\r\n        if(!users[referer].isExist) referer = userList[1];\r\n        \r\n        if(referer == userList[1]){\r\n            uint uplineAmount = Auto_Pool_Upline[_poolID]*_level;\r\n            require(\r\n                address(uint160(referer)).send(uplineAmount),\r\n                \"Upline referer transfer failed\"\r\n            );\r\n            users[referer].totalEarning += uplineAmount;\r\n            emit getPoolMoneyForLevelEvent(_poolID, referer, msg.sender, _level, uplineAmount, now);\r\n        }\r\n        else{\r\n            if(userPoolSeqID[referer][_poolID].length > 0){\r\n                if(_level != 0) {\r\n                    require(\r\n                        address(uint160(referer)).send(Auto_Pool_Upline[_poolID]),\r\n                        \"Upline referer transfer failed\"\r\n                    );\r\n                    _level--;\r\n                    users[referer].totalEarning += Auto_Pool_Upline[_poolID];\r\n                    emit getPoolMoneyForLevelEvent(_poolID, referer, msg.sender, _level, Auto_Pool_Upline[_poolID], now);\r\n                    payForLevel(_poolID, _level, referer);\r\n                }\r\n            }\r\n            else{\r\n                emit lostPoolMoneyForLevelEvent(_poolID, referer, msg.sender, _level, Auto_Pool_Upline[_poolID], now);\r\n                payForLevel(_poolID, _level, referer);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n    \r\n    function viewUserPoolSeqID(address _user,uint _poolID)public view returns(uint[] memory) {\r\n        return userPoolSeqID[_user][_poolID];\r\n    }\r\n    \r\n     /**\r\n     * @dev Update old contract data\r\n     */ \r\n    function oldBallastSync(uint limit) public {\r\n        require(address(oldBallast) != address(0), \"Initialize closed\");\r\n        require(msg.sender == ownerWallet, \"Access denied\");\r\n        \r\n        for (uint i = 0; i <= limit; i++) {\r\n            UserStruct  memory olduser;\r\n            address oldusers = oldBallast.userList(oldBallastId);\r\n            (olduser.isExist, \r\n            olduser.id, \r\n            olduser.referrerID, \r\n            olduser.totalEarning) = oldBallast.users(oldusers);\r\n            address ref = oldBallast.userList(olduser.referrerID);\r\n\r\n            if (olduser.isExist) {\r\n                if (!users[oldusers].isExist) {\r\n                    if(oldBallastId == 1)\r\n                        oldusers = ownerWallet;\r\n                        \r\n                    users[oldusers].isExist = true;\r\n                    users[oldusers].id = oldBallastId;\r\n                    users[oldusers].referrerID = olduser.referrerID;\r\n                    users[oldusers].totalEarning = olduser.totalEarning;\r\n                    userList[oldBallastId] = oldusers;\r\n                    if(olduser.referrerID == 1)\r\n                        ref = ownerWallet;\r\n                        \r\n                    users[ref].referral.push(oldusers);\r\n                    \r\n                    emit regLevelEvent(oldusers, ref, now);\r\n                }\r\n                oldBallastId++;\r\n            } else {\r\n                currUserID = oldBallastId-1;\r\n                break;\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Update old contract data\r\n     */ \r\n    function setoldBallastID(uint _id) public returns(bool) {\r\n        require(ownerWallet == msg.sender, \"Access Denied\");\r\n        \r\n        oldBallastId = _id;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Close old contract interaction\r\n     */ \r\n    function oldBallastSyncClosed() external {\r\n        require(address(oldBallast) != address(0), \"Initialize already closed\");\r\n        require(msg.sender == ownerWallet, \"Access denied\");\r\n\r\n        oldBallast = Ballast(0);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostPoolMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_useID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reInvestID\",\"type\":\"uint256\"}],\"name\":\"poolReInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_activeUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Auto_Pool_System\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Auto_Pool_Upline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REGESTRATION_FESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldBallast\",\"outputs\":[{\"internalType\":\"contract Ballast\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldBallastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldBallastSync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"oldBallastSyncClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setoldBallastID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPoolSeqID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"viewUserPoolSeqID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ballast","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c0db5a11ac390e5e3b839f2f22398757a51de2061a062aad7c961607502fb0aa"}]}