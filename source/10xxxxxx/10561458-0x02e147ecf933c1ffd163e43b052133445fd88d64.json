{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // `balances` is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n      // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    /// @notice Constructor to create a Reputation\r\n    constructor(\r\n    ) public\r\n    {\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n  ////////////////\r\n  // Query balance and totalSupply in History\r\n  ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n      /// @param _owner The address from which the balance will be retrieved\r\n      /// @param _blockNumber The block number when the balance is queried\r\n      /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\r\n      /// @param _blockNumber The block number when the totalSupply is queried\r\n      /// @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns `_amount` reputation from `_owner`\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n      ///  `totalSupplyHistory`\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/DAOToken.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply().add(_amount) <= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION & NO WARRANTY\r\n\r\nREFERENCE & RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/Avatar.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-call-value\r\n        (success, returnValue) = _contract.call.value(_value)(_data);\r\n        emit GenericCall(_contract, _data, _value, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: @daostack/arc/contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/ControllerInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    returns(bool, bytes memory);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n\r\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint256 globalConstraintsPre count.\r\n     * @return uint256 globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/Controller.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens, reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract Controller is ControllerInterface {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                             // All 0: Not registered,\r\n                             // 1st bit: Flag if the scheme is registered,\r\n                             // 2nd bit: Scheme can register other schemes\r\n                             // 3rd bit: Scheme can add/remove global constraints\r\n                             // 4th bit: Scheme can upgrade the controller\r\n                             // 5th bit: Scheme can call genericCall on behalf of\r\n                             //          the organization avatar\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint256 index;    //index at globalConstraints\r\n    }\r\n\r\n    mapping(address=>Scheme) public schemes;\r\n\r\n    Avatar public avatar;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n    address public newController;\r\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\r\n\r\n    GlobalConstraint[] public globalConstraintsPre;\r\n  // globalConstraintsPost that determine post conditions for all actions on the controller\r\n    GlobalConstraint[] public globalConstraintsPost;\r\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\r\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UpgradeController(address indexed _oldController, address _newController);\r\n\r\n    event AddGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        bytes32 _params,\r\n        GlobalConstraintInterface.CallPhase _when);\r\n\r\n    event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);\r\n\r\n    constructor( Avatar _avatar) public {\r\n        avatar = _avatar;\r\n        nativeToken = avatar.nativeToken();\r\n        nativeReputation = avatar.nativeReputation();\r\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});\r\n    }\r\n\r\n  // Do not allow mistaken calls:\r\n   // solhint-disable-next-line payable-fallback\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlyMetaDataScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func) {\r\n        uint256 idx;\r\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\r\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\r\n        }\r\n        _;\r\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\r\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\r\n        }\r\n    }\r\n\r\n    modifier isAvatarValid(address _avatar) {\r\n        require(_avatar == address(avatar));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount);\r\n        return nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"burnReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount);\r\n        return nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintTokens\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount);\r\n        return nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"registerScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n\r\n        Scheme memory scheme = schemes[_scheme];\r\n\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x0000001f)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x0000001f)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        schemes[_scheme].paramsHash = _paramsHash;\r\n        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);\r\n        emit RegisterScheme(msg.sender, _scheme);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme( address _scheme, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"unregisterScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n    //check if the scheme is registered\r\n        if (_isSchemeRegistered(_scheme) == false) {\r\n            return false;\r\n        }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(bytes4(0x0000001f)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme);\r\n        delete schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender) == false) {\r\n            return false;\r\n        }\r\n        delete schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPre[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPre.length-1);\r\n            }else {\r\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPost[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPost.length-1);\r\n            }else {\r\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params, when);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @return bool which represents a success\r\n     */\r\n     // solhint-disable-next-line code-complexity\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister;\r\n        GlobalConstraint memory globalConstraint;\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        bool retVal = false;\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\r\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\r\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPre.length--;\r\n                delete globalConstraintsRegisterPre[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\r\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\r\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPost.length--;\r\n                delete globalConstraintsRegisterPost[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if (retVal) {\r\n            emit RemoveGlobalConstraint(\r\n            _globalConstraint,\r\n            globalConstraintRegister.index,\r\n            when == GlobalConstraintInterface.CallPhase.Pre\r\n            );\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external\r\n    onlyUpgradingScheme\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newController = _newController;\r\n        avatar.transferOwnership(_newController);\r\n        require(avatar.owner() == _newController);\r\n        if (nativeToken.owner() == address(this)) {\r\n            nativeToken.transferOwnership(_newController);\r\n            require(nativeToken.owner() == _newController);\r\n        }\r\n        if (nativeReputation.owner() == address(this)) {\r\n            nativeReputation.transferOwnership(_newController);\r\n            require(nativeReputation.owner() == _newController);\r\n        }\r\n        emit UpgradeController(address(this), newController);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    onlyGenericCallScheme\r\n    onlySubjectToConstraint(\"genericCall\")\r\n    isAvatarValid(address(_avatar))\r\n    returns (bool, bytes memory)\r\n    {\r\n        return avatar.genericCall(_contract, _data, _value);\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"sendEther\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransfer\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransferFrom\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenIncreaseApproval\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenApproval(_externalToken, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar)\r\n        external\r\n        onlyMetaDataScheme\r\n        isAvatarValid(address(_avatar))\r\n        returns(bool)\r\n        {\r\n        return avatar.metaData(_metaData);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\r\n        return address(nativeReputation);\r\n    }\r\n\r\n    function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {\r\n        return _isSchemeRegistered(_scheme);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes32)\r\n    {\r\n        return schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes4)\r\n    {\r\n        return schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {\r\n\r\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev globalConstraintsCount return the global constraint pre and post count\r\n    * @return uint256 globalConstraintsPre count.\r\n    * @return uint256 globalConstraintsPost count.\r\n    */\r\n    function globalConstraintsCount(address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(uint, uint)\r\n        {\r\n        return (globalConstraintsPre.length, globalConstraintsPost.length);\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(bool)\r\n        {\r\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\r\n                globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    function _isSchemeRegistered(address _scheme) private view returns(bool) {\r\n        return (schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\r\n    modifier votable(bytes32 _proposalId) {revert(); _;}\r\n\r\n    event NewProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _numOfChoices,\r\n        address _proposer,\r\n        bytes32 _paramsHash\r\n    );\r\n\r\n    event ExecuteProposal(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _decision,\r\n        uint256 _totalReputation\r\n    );\r\n\r\n    event VoteProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _voter,\r\n        uint256 _vote,\r\n        uint256 _reputation\r\n    );\r\n\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _proposer address\r\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint256 _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _proposer,\r\n        address _organization\r\n        ) external returns(bytes32);\r\n\r\n    function vote(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _rep,\r\n        address _voter\r\n    )\r\n    external\r\n    returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ninterface VotingMachineCallbacksInterface {\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\r\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\r\n\r\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\r\n    external\r\n    returns(bool);\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\r\n}\r\n\r\n// File: @daostack/arc/contracts/universalSchemes/UniversalSchemeInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ncontract UniversalSchemeInterface {\r\n\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\r\n    \r\n}\r\n\r\n// File: @daostack/arc/contracts/universalSchemes/UniversalScheme.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract UniversalScheme is UniversalSchemeInterface {\r\n    /**\r\n    *  @dev get the parameters for the current scheme from the controller\r\n    */\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\r\n        require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),\r\n        \"scheme is not registered\");\r\n        return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/libs/RealMath.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n/**\r\n * RealMath: fixed-point math library, based on fractional and integer parts.\r\n * Using uint256 as real216x40, which isn't in Solidity yet.\r\n * Internally uses the wider uint256 for some math.\r\n *\r\n * Note that for addition, subtraction, and mod (%), you should just use the\r\n * built-in Solidity operators. Functions for these operations are not provided.\r\n *\r\n */\r\n\r\n\r\nlibrary RealMath {\r\n\r\n    /**\r\n     * How many total bits are there?\r\n     */\r\n    uint256 constant private REAL_BITS = 256;\r\n\r\n    /**\r\n     * How many fractional bits are there?\r\n     */\r\n    uint256 constant private REAL_FBITS = 40;\r\n\r\n    /**\r\n     * What's the first non-fractional bit\r\n     */\r\n    uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;\r\n\r\n    /**\r\n     * Raise a real number to any positive integer power\r\n     */\r\n    function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {\r\n\r\n        uint256 tempRealBase = realBase;\r\n        uint256 tempExponent = exponent;\r\n\r\n        // Start with the 0th power\r\n        uint256 realResult = REAL_ONE;\r\n        while (tempExponent != 0) {\r\n            // While there are still bits set\r\n            if ((tempExponent & 0x1) == 0x1) {\r\n                // If the low bit is set, multiply in the (many-times-squared) base\r\n                realResult = mul(realResult, tempRealBase);\r\n            }\r\n                // Shift off the low bit\r\n            tempExponent = tempExponent >> 1;\r\n            if (tempExponent != 0) {\r\n                // Do the squaring\r\n                tempRealBase = mul(tempRealBase, tempRealBase);\r\n            }\r\n        }\r\n\r\n        // Return the final result.\r\n        return realResult;\r\n    }\r\n\r\n    /**\r\n     * Create a real from a rational fraction.\r\n     */\r\n    function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {\r\n        return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);\r\n    }\r\n\r\n    /**\r\n     * Multiply one real by another. Truncates overflows.\r\n     */\r\n    function mul(uint256 realA, uint256 realB) private pure returns (uint256) {\r\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\r\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\r\n        uint256 res = realA * realB;\r\n        require(res/realA == realB, \"RealMath mul overflow\");\r\n        return (res >> REAL_FBITS);\r\n    }\r\n\r\n    /**\r\n     * Divide one real by another real. Truncates overflows.\r\n     */\r\n    function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {\r\n        // We use the reverse of the multiplication trick: convert numerator from\r\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\r\n        return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));\r\n    }\r\n\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\ninterface ProposalExecuteInterface {\r\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocolLogic is IntVoteInterface {\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using RealMath for uint216;\r\n    using RealMath for uint256;\r\n    using Address for address;\r\n\r\n    enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}\r\n    enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}\r\n\r\n    //Organization's parameters\r\n    struct Parameters {\r\n        uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.\r\n        uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\r\n        uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.\r\n        uint256 preBoostedVotePeriodLimit; //the time limit for a proposal\r\n                                          //to be in an preparation state (stable) before boosted.\r\n        uint256 thresholdConst; //constant  for threshold calculation .\r\n                                //threshold =thresholdConst ** (numberOfBoostedProposals)\r\n        uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals\r\n                                   //in the threshold calculation to prevent overflow\r\n        uint256 quietEndingPeriod; //quite ending period\r\n        uint256 proposingRepReward;//proposer reputation reward.\r\n        uint256 votersReputationLossRatio;//Unsuccessful pre booster\r\n                                          //voters lose votersReputationLossRatio% of their reputation.\r\n        uint256 minimumDaoBounty;\r\n        uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula\r\n                               //(daoBountyConst * averageBoostDownstakes)/100 .\r\n        uint256 activationTime;//the point in time after which proposals can be created.\r\n        //if this address is set so only this address is allowed to vote of behalf of someone else.\r\n        address voteOnBehalf;\r\n    }\r\n\r\n    struct Voter {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 reputation; // amount of voter's reputation\r\n        bool preBoosted;\r\n    }\r\n\r\n    struct Staker {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 amount; // amount of staker's stake\r\n        uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.\r\n    }\r\n\r\n    struct Proposal {\r\n        bytes32 organizationId; // the organization unique identifier the proposal is target to.\r\n        address callbacks;    // should fulfill voting callbacks interface.\r\n        ProposalState state;\r\n        uint256 winningVote; //the winning vote.\r\n        address proposer;\r\n        //the proposal boosted period limit . it is updated for the case of quiteWindow mode.\r\n        uint256 currentBoostedVotePeriodLimit;\r\n        bytes32 paramsHash;\r\n        uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.\r\n        uint256 daoBounty;\r\n        uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.\r\n        uint256 confidenceThreshold;\r\n        //The percentage from upper stakes which the caller for the expiration was given.\r\n        uint256 expirationCallBountyPercentage;\r\n        uint[3] times; //times[0] - submittedTime\r\n                       //times[1] - boostedPhaseTime\r\n                       //times[2] -preBoostedPhaseTime;\r\n        bool daoRedeemItsWinnings;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) votes;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) preBoostedVotes;\r\n        //      address     voter\r\n        mapping(address =>  Voter    ) voters;\r\n        //      vote        stakes\r\n        mapping(uint256   =>  uint256    ) stakes;\r\n        //      address  staker\r\n        mapping(address  => Staker   ) stakers;\r\n    }\r\n\r\n    event Stake(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _staker,\r\n        uint256 _vote,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Redeem(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemDaoBounty(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemReputation(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);\r\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\r\n    event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);\r\n    event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);\r\n\r\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\r\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\r\n    mapping(bytes32=>uint) public orgBoostedProposalsCnt;\r\n           //organizationId => organization\r\n    mapping(bytes32        => address     ) public organizations;\r\n          //organizationId => averageBoostDownstakes\r\n    mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;\r\n    uint256 constant public NUM_OF_CHOICES = 2;\r\n    uint256 constant public NO = 2;\r\n    uint256 constant public YES = 1;\r\n    uint256 public proposalsCnt; // Total number of proposals\r\n    IERC20 public stakingToken;\r\n    address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;\r\n    uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken) public {\r\n      //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .\r\n      //This will work for a network which already hosted the GEN token on this address (e.g mainnet).\r\n      //If such contract address does not exist in the network (e.g ganache)\r\n      //the contract will use the _stakingToken param as the\r\n      //staking token address.\r\n        if (address(GEN_TOKEN_ADDRESS).isContract()) {\r\n            stakingToken = IERC20(GEN_TOKEN_ADDRESS);\r\n        } else {\r\n            stakingToken = _stakingToken;\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Check that the proposal is votable\r\n   * a proposal is votable if it is in one of the following states:\r\n   *  PreBoosted,Boosted,QuietEndingPeriod or Queued\r\n   */\r\n    modifier votable(bytes32 _proposalId) {\r\n        require(_isVotable(_proposalId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _paramsHash parameters hash\r\n     * @param _proposer address\r\n     * @param _organization address\r\n     */\r\n    function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)\r\n        external\r\n        returns(bytes32)\r\n    {\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(now > parameters[_paramsHash].activationTime, \"not active yet\");\r\n        //Check parameters existence.\r\n        require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);\r\n        // Generate a unique ID:\r\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\r\n        proposalsCnt = proposalsCnt.add(1);\r\n         // Open proposal:\r\n        Proposal memory proposal;\r\n        proposal.callbacks = msg.sender;\r\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\r\n\r\n        proposal.state = ProposalState.Queued;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        proposal.times[0] = now;//submitted time\r\n        proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;\r\n        proposal.proposer = _proposer;\r\n        proposal.winningVote = NO;\r\n        proposal.paramsHash = _paramsHash;\r\n        if (organizations[proposal.organizationId] == address(0)) {\r\n            if (_organization == address(0)) {\r\n                organizations[proposal.organizationId] = msg.sender;\r\n            } else {\r\n                organizations[proposal.organizationId] = _organization;\r\n            }\r\n        }\r\n        //calc dao bounty\r\n        uint256 daoBounty =\r\n        parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);\r\n        if (daoBounty < parameters[_paramsHash].minimumDaoBounty) {\r\n            proposal.daoBountyRemain = parameters[_paramsHash].minimumDaoBounty;\r\n        } else {\r\n            proposal.daoBountyRemain = daoBounty;\r\n        }\r\n        proposal.totalStakes = proposal.daoBountyRemain;\r\n        proposals[proposalId] = proposal;\r\n        proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal\r\n\r\n        emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n      * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired\r\n      * @param _proposalId the id of the proposal\r\n      * @return uint256 expirationCallBounty the bounty amount for the expiration call\r\n     */\r\n    function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,\r\n        \"proposal state in not Boosted nor QuietEndingPeriod\");\r\n        require(_execute(_proposalId), \"proposal need to expire\");\r\n        uint256 expirationCallBountyPercentage =\r\n        // solhint-disable-next-line not-rely-on-time\r\n        (uint(1).add(now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1])).div(15)));\r\n        if (expirationCallBountyPercentage > 100) {\r\n            expirationCallBountyPercentage = 100;\r\n        }\r\n        proposal.expirationCallBountyPercentage = expirationCallBountyPercentage;\r\n        expirationCallBounty = expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100);\r\n        require(stakingToken.transfer(msg.sender, expirationCallBounty), \"transfer to msg.sender failed\");\r\n        emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);\r\n    }\r\n\r\n    /**\r\n     * @dev hash the parameters, save them if necessary, and return the hash value\r\n     * @param _params a parameters array\r\n     *    _params[0] - _queuedVoteRequiredPercentage,\r\n     *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\r\n     *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\r\n     *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation\r\n     *                  state (stable) before boosted.\r\n     *    _params[4] -_thresholdConst\r\n     *    _params[5] -_quietEndingPeriod\r\n     *    _params[6] -_proposingRepReward\r\n     *    _params[7] -_votersReputationLossRatio\r\n     *    _params[8] -_minimumDaoBounty\r\n     *    _params[9] -_daoBountyConst\r\n     *    _params[10] -_activationTime\r\n     * @param _voteOnBehalf - authorized to vote on behalf of others.\r\n    */\r\n    function setParameters(\r\n        uint[11] calldata _params, //use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n    external\r\n    returns(bytes32)\r\n    {\r\n        require(_params[0] <= 100 && _params[0] >= 50, \"50 <= queuedVoteRequiredPercentage <= 100\");\r\n        require(_params[4] <= 16000 && _params[4] > 1000, \"1000 < thresholdConst <= 16000\");\r\n        require(_params[7] <= 100, \"votersReputationLossRatio <= 100\");\r\n        require(_params[2] >= _params[5], \"boostedVotePeriodLimit >= quietEndingPeriod\");\r\n        require(_params[8] > 0, \"minimumDaoBounty should be > 0\");\r\n        require(_params[9] > 0, \"daoBountyConst should be > 0\");\r\n\r\n        bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);\r\n        //set a limit for power for a given alpha to prevent overflow\r\n        uint256 limitExponent = 172;//for alpha less or equal 2\r\n        uint256 j = 2;\r\n        for (uint256 i = 2000; i < 16000; i = i*2) {\r\n            if ((_params[4] > i) && (_params[4] <= i*2)) {\r\n                limitExponent = limitExponent/j;\r\n                break;\r\n            }\r\n            j++;\r\n        }\r\n\r\n        parameters[paramsHash] = Parameters({\r\n            queuedVoteRequiredPercentage: _params[0],\r\n            queuedVotePeriodLimit: _params[1],\r\n            boostedVotePeriodLimit: _params[2],\r\n            preBoostedVotePeriodLimit: _params[3],\r\n            thresholdConst:uint216(_params[4]).fraction(uint216(1000)),\r\n            limitExponentValue:limitExponent,\r\n            quietEndingPeriod: _params[5],\r\n            proposingRepReward: _params[6],\r\n            votersReputationLossRatio:_params[7],\r\n            minimumDaoBounty:_params[8],\r\n            daoBountyConst:_params[9],\r\n            activationTime:_params[10],\r\n            voteOnBehalf:_voteOnBehalf\r\n        });\r\n        return paramsHash;\r\n    }\r\n\r\n    /**\r\n     * @dev redeem a reward for a successful stake, vote or proposing.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return rewards -\r\n     *           [0] stakerTokenReward\r\n     *           [1] voterReputationReward\r\n     *           [2] proposerReputationReward\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),\r\n        \"Proposal should be Executed or ExpiredInQueue\");\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        uint256 lostReputation;\r\n        if (proposal.winningVote == YES) {\r\n            lostReputation = proposal.preBoostedVotes[NO];\r\n        } else {\r\n            lostReputation = proposal.preBoostedVotes[YES];\r\n        }\r\n        lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;\r\n        //as staker\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        uint256 totalStakes = proposal.stakes[NO].add(proposal.stakes[YES]);\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n\r\n        if (staker.amount > 0) {\r\n            uint256 totalStakesLeftAfterCallBounty =\r\n            totalStakes.sub(proposal.expirationCallBountyPercentage.mul(proposal.stakes[YES]).div(100));\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n                //Stakes of a proposal that expires in Queue are sent back to stakers\r\n                rewards[0] = staker.amount;\r\n            } else if (staker.vote == proposal.winningVote) {\r\n                if (staker.vote == YES) {\r\n                    if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {\r\n                        uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);\r\n                        rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;\r\n                    }\r\n                } else {\r\n                    rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;\r\n                }\r\n            }\r\n            staker.amount = 0;\r\n        }\r\n            //dao redeem its winnings\r\n        if (proposal.daoRedeemItsWinnings == false &&\r\n            _beneficiary == organizations[proposal.organizationId] &&\r\n            proposal.state != ProposalState.ExpiredInQueue &&\r\n            proposal.winningVote == NO) {\r\n            rewards[0] =\r\n            rewards[0].add((proposal.daoBounty.mul(totalStakes))/totalWinningStakes).sub(proposal.daoBounty);\r\n            proposal.daoRedeemItsWinnings = true;\r\n        }\r\n\r\n        //as voter\r\n        Voter storage voter = proposal.voters[_beneficiary];\r\n        if ((voter.reputation != 0) && (voter.preBoosted)) {\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n              //give back reputation for the voter\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);\r\n            } else if (proposal.winningVote == voter.vote) {\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)\r\n                .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);\r\n            }\r\n            voter.reputation = 0;\r\n        }\r\n        //as proposer\r\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\r\n            rewards[2] = params.proposingRepReward;\r\n            proposal.proposer = address(0);\r\n        }\r\n        if (rewards[0] != 0) {\r\n            proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);\r\n            require(stakingToken.transfer(_beneficiary, rewards[0]), \"transfer to beneficiary failed\");\r\n            emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);\r\n        }\r\n        if (rewards[1].add(rewards[2]) != 0) {\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);\r\n            emit RedeemReputation(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            _beneficiary,\r\n            rewards[1].add(rewards[2])\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev redeemDaoBounty a reward for a successful stake.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return redeemedAmount - redeem token amount\r\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )\r\n     */\r\n    function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)\r\n    public\r\n    returns(uint256 redeemedAmount, uint256 potentialAmount) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Executed);\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        if (\r\n            (staker.amount4Bounty > 0)&&\r\n            (staker.vote == proposal.winningVote)&&\r\n            (proposal.winningVote == YES)&&\r\n            (totalWinningStakes != 0)) {\r\n            //as staker\r\n                potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;\r\n            }\r\n        if ((potentialAmount != 0)&&\r\n            (VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {\r\n            staker.amount4Bounty = 0;\r\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\r\n            require(\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));\r\n            redeemedAmount = potentialAmount;\r\n            emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\r\n     * @param _proposalId the ID of the proposal\r\n     * @return bool true or false.\r\n     */\r\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\r\n        Proposal memory proposal = proposals[_proposalId];\r\n        return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));\r\n    }\r\n\r\n    /**\r\n     * @dev threshold return the organization's score threshold which required by\r\n     * a proposal to shift to boosted state.\r\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\r\n     * @param _organizationId the organization identifier\r\n     * @param _paramsHash the organization parameters hash\r\n     * @return uint256 organization's score threshold as real number.\r\n     */\r\n    function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {\r\n        uint256 power = orgBoostedProposalsCnt[_organizationId];\r\n        Parameters storage params = parameters[_paramsHash];\r\n\r\n        if (power > params.limitExponentValue) {\r\n            power = params.limitExponentValue;\r\n        }\r\n\r\n        return params.thresholdConst.pow(power);\r\n    }\r\n\r\n  /**\r\n   * @dev hashParameters returns a hash of the given parameters\r\n   */\r\n    function getParametersHash(\r\n        uint[11] memory _params,//use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n        public\r\n        pure\r\n        returns(bytes32)\r\n        {\r\n        //double call to keccak256 to avoid deep stack issue when call with too many params.\r\n        return keccak256(\r\n            abi.encodePacked(\r\n            keccak256(\r\n            abi.encodePacked(\r\n                _params[0],\r\n                _params[1],\r\n                _params[2],\r\n                _params[3],\r\n                _params[4],\r\n                _params[5],\r\n                _params[6],\r\n                _params[7],\r\n                _params[8],\r\n                _params[9],\r\n                _params[10])\r\n            ),\r\n            _voteOnBehalf\r\n        ));\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        Proposal memory tmpProposal = proposal;\r\n        uint256 totalReputation =\r\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\r\n        //first divide by 100 to prevent overflow\r\n        uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;\r\n        ExecutionState executionState = ExecutionState.None;\r\n        uint256 averageDownstakesOfBoosted;\r\n        uint256 confidenceThreshold;\r\n\r\n        if (proposal.votes[proposal.winningVote] > executionBar) {\r\n         // someone crossed the absolute vote execution bar.\r\n            if (proposal.state == ProposalState.Queued) {\r\n                executionState = ExecutionState.QueueBarCrossed;\r\n            } else if (proposal.state == ProposalState.PreBoosted) {\r\n                executionState = ExecutionState.PreBoostedBarCrossed;\r\n            } else {\r\n                executionState = ExecutionState.BoostedBarCrossed;\r\n            }\r\n            proposal.state = ProposalState.Executed;\r\n        } else {\r\n            if (proposal.state == ProposalState.Queued) {\r\n                // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {\r\n                    proposal.state = ProposalState.ExpiredInQueue;\r\n                    proposal.winningVote = NO;\r\n                    executionState = ExecutionState.QueueTimeOut;\r\n                } else {\r\n                    confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        //change proposal mode to PreBoosted mode.\r\n                        proposal.state = ProposalState.PreBoosted;\r\n                        // solhint-disable-next-line not-rely-on-time\r\n                        proposal.times[2] = now;\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (proposal.state == ProposalState.PreBoosted) {\r\n                confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n              // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {\r\n                         //change proposal mode to Boosted mode.\r\n                            proposal.state = ProposalState.Boosted;\r\n                         // solhint-disable-next-line not-rely-on-time\r\n                            proposal.times[1] = now;\r\n                            orgBoostedProposalsCnt[proposal.organizationId]++;\r\n                         //add a value to average -> average = average + ((value - average) / nbValues)\r\n                            averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                          // solium-disable-next-line indentation\r\n                            averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                                uint256(int256(averageDownstakesOfBoosted) +\r\n                                ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/\r\n                                int256(orgBoostedProposalsCnt[proposal.organizationId])));\r\n                        }\r\n                    } else {\r\n                        proposal.state = ProposalState.Queued;\r\n                    }\r\n                } else { //check the Confidence level is stable\r\n                    uint256 proposalScore = _score(_proposalId);\r\n                    if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {\r\n                        proposal.state = ProposalState.Queued;\r\n                    } else if (proposal.confidenceThreshold > proposalScore) {\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                        emit ConfidenceLevelChange(_proposalId, confidenceThreshold);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((proposal.state == ProposalState.Boosted) ||\r\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\r\n            // solhint-disable-next-line not-rely-on-time\r\n            if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.BoostedTimeOut;\r\n            }\r\n        }\r\n\r\n        if (executionState != ExecutionState.None) {\r\n            if ((executionState == ExecutionState.BoostedTimeOut) ||\r\n                (executionState == ExecutionState.BoostedBarCrossed)) {\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId] =\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);\r\n                //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);\r\n                uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];\r\n                if (boostedProposals == 0) {\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] = 0;\r\n                } else {\r\n                    averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                    (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;\r\n                }\r\n            }\r\n            emit ExecuteProposal(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            proposal.winningVote,\r\n            totalReputation\r\n            );\r\n            emit GPExecuteProposal(_proposalId, executionState);\r\n            ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));\r\n            proposal.daoBounty = proposal.daoBountyRemain;\r\n        }\r\n        if (tmpProposal.state != proposal.state) {\r\n            emit StateChange(_proposalId, proposal.state);\r\n        }\r\n        return (executionState != ExecutionState.None);\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {\r\n        // 0 is not a valid vote.\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");\r\n        require(_amount > 0, \"staking amount should be >0\");\r\n\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        if ((proposal.state != ProposalState.PreBoosted) &&\r\n            (proposal.state != ProposalState.Queued)) {\r\n            return false;\r\n        }\r\n\r\n        // enable to increase stake only on the previous stake vote\r\n        Staker storage staker = proposal.stakers[_staker];\r\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = _amount;\r\n        require(stakingToken.transferFrom(_staker, address(this), amount), \"fail transfer from staker\");\r\n        proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes\r\n        staker.amount = staker.amount.add(amount);\r\n        //This is to prevent average downstakes calculation overflow\r\n        //Note that any how GEN cap is 100000000 ether.\r\n        require(staker.amount <= 0x100000000000000000000000000000000, \"staking amount is too high\");\r\n        require(proposal.totalStakes <= 0x100000000000000000000000000000000, \"total stakes is too high\");\r\n\r\n        if (_vote == YES) {\r\n            staker.amount4Bounty = staker.amount4Bounty.add(amount);\r\n        }\r\n        staker.vote = _vote;\r\n\r\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\r\n        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\r\n     * @param _proposalId id of the proposal\r\n     * @param _voter used in case the vote is cast for someone else\r\n     * @param _vote a value between 0 to and the proposal's number of choices.\r\n     * @param _rep how many reputation the voter would like to stake for this vote.\r\n     *         if  _rep==0 so the voter full reputation will be use.\r\n     * @return true in case of proposal execution otherwise false\r\n     * throws if proposal is not open or if it has been executed\r\n     * NB: executes the proposal if a decision has been reached\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"0 < _vote <= 2\");\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n\r\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        // Check voter has enough reputation:\r\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\r\n        require(reputation > 0, \"_voter must have reputation\");\r\n        require(reputation >= _rep, \"reputation >= _rep\");\r\n        uint256 rep = _rep;\r\n        if (rep == 0) {\r\n            rep = reputation;\r\n        }\r\n        // If this voter has already voted, return false.\r\n        if (proposal.voters[_voter].reputation != 0) {\r\n            return false;\r\n        }\r\n        // The voting itself:\r\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\r\n        //check if the current winningVote changed or there is a tie.\r\n        //for the case there is a tie the current winningVote set to NO.\r\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\r\n            ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\r\n            proposal.winningVote == YES)) {\r\n            if (proposal.state == ProposalState.Boosted &&\r\n            // solhint-disable-next-line not-rely-on-time\r\n                ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||\r\n                proposal.state == ProposalState.QuietEndingPeriod) {\r\n                //quietEndingPeriod\r\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\r\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\r\n                    proposal.state = ProposalState.QuietEndingPeriod;\r\n                }\r\n                // solhint-disable-next-line not-rely-on-time\r\n                proposal.times[1] = now;\r\n            }\r\n            proposal.winningVote = _vote;\r\n        }\r\n        proposal.voters[_voter] = Voter({\r\n            reputation: rep,\r\n            vote: _vote,\r\n            preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))\r\n        });\r\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\r\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\r\n            uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;\r\n            VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);\r\n        }\r\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev _score return the proposal score (Confidence level)\r\n     * For dual choice proposal S = (S+)/(S-)\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score as real number.\r\n     */\r\n    function _score(bytes32 _proposalId) internal view returns(uint256) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.\r\n        return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));\r\n    }\r\n\r\n    /**\r\n      * @dev _isVotable check if the proposal is votable\r\n      * @param _proposalId the ID of the proposal\r\n      * @return bool true or false\r\n    */\r\n    function _isVotable(bytes32 _proposalId) internal view returns(bool) {\r\n        ProposalState pState = proposals[_proposalId].state;\r\n        return ((pState == ProposalState.PreBoosted)||\r\n                (pState == ProposalState.Boosted)||\r\n                (pState == ProposalState.QuietEndingPeriod)||\r\n                (pState == ProposalState.Queued)\r\n        );\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {\r\n    using ECDSA for bytes32;\r\n\r\n    // Digest describing the data the user signs according EIP 712.\r\n    // Needs to match what is passed to Metamask.\r\n    bytes32 public constant DELEGATION_HASH_EIP712 =\r\n    keccak256(abi.encodePacked(\r\n    \"address GenesisProtocolAddress\",\r\n    \"bytes32 ProposalId\",\r\n    \"uint256 Vote\",\r\n    \"uint256 AmountToStake\",\r\n    \"uint256 Nonce\"\r\n    ));\r\n\r\n    mapping(address=>uint256) public stakesNonce; //stakes Nonce\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken)\r\n    public\r\n    // solhint-disable-next-line no-empty-blocks\r\n    GenesisProtocolLogic(_stakingToken) {\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {\r\n        return _stake(_proposalId, _vote, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev stakeWithSignature function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @param _nonce nonce value ,it is part of the signature to ensure that\r\n              a signature can be received only once.\r\n     * @param _signatureType signature type\r\n              1 - for web3.eth.sign\r\n              2 - for eth_signTypedData according to EIP #712.\r\n     * @param _signature  - signed data by the staker\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stakeWithSignature(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _signatureType,\r\n        bytes calldata _signature\r\n        )\r\n        external\r\n        returns(bool)\r\n        {\r\n        // Recreate the digest the user signed\r\n        bytes32 delegationDigest;\r\n        if (_signatureType == 2) {\r\n            delegationDigest = keccak256(\r\n                abi.encodePacked(\r\n                    DELEGATION_HASH_EIP712, keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    )\r\n                )\r\n            );\r\n        } else {\r\n            delegationDigest = keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    ).toEthSignedMessageHash();\r\n        }\r\n        address staker = delegationDigest.recover(_signature);\r\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\r\n        require(staker != address(0), \"staker address cannot be 0\");\r\n        require(stakesNonce[staker] == _nonce);\r\n        stakesNonce[staker] = stakesNonce[staker].add(1);\r\n        return _stake(_proposalId, _vote, _amount, staker);\r\n    }\r\n\r\n    /**\r\n     * @dev voting function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote NO(2) or YES(1).\r\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\r\n     * @param _voter voter address\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)\r\n    external\r\n    votable(_proposalId)\r\n    returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        address voter;\r\n        if (params.voteOnBehalf != address(0)) {\r\n            require(msg.sender == params.voteOnBehalf);\r\n            voter = _voter;\r\n        } else {\r\n            voter = msg.sender;\r\n        }\r\n        return internalVote(_proposalId, voter, _vote, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel the vote of the msg.sender.\r\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\r\n   * This function is here in order to comply to the IntVoteInterface .\r\n   */\r\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\r\n       //this is not allowed\r\n        return;\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n  /**\r\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\r\n    * @return uint256 that contains number of choices\r\n    */\r\n    function getNumberOfChoices(bytes32) external view returns(uint256) {\r\n        return NUM_OF_CHOICES;\r\n    }\r\n\r\n    /**\r\n      * @dev getProposalTimes returns proposals times variables.\r\n      * @param _proposalId id of the proposal\r\n      * @return proposals times array\r\n      */\r\n    function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {\r\n        return proposals[_proposalId].times;\r\n    }\r\n\r\n    /**\r\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _voter the address of the voter\r\n     * @return uint256 vote - the voters vote\r\n     *        uint256 reputation - amount of reputation committed by _voter to _proposalId\r\n     */\r\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\r\n        Voter memory voter = proposals[_proposalId].voters[_voter];\r\n        return (voter.vote, voter.reputation);\r\n    }\r\n\r\n    /**\r\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n    * @param _proposalId the ID of the proposal\r\n    * @param _choice the index in the\r\n    * @return voted reputation for the given choice\r\n    */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {\r\n        return proposals[_proposalId].votes[_choice];\r\n    }\r\n\r\n    /**\r\n    * @dev isVotable check if the proposal is votable\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bool true or false\r\n    */\r\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\r\n        return _isVotable(_proposalId);\r\n    }\r\n\r\n    /**\r\n    * @dev proposalStatus return the total votes and stakes for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 preBoostedVotes YES\r\n    * @return uint256 preBoostedVotes NO\r\n    * @return uint256 total stakes YES\r\n    * @return uint256 total stakes NO\r\n    */\r\n    function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {\r\n        return (\r\n                proposals[_proposalId].preBoostedVotes[YES],\r\n                proposals[_proposalId].preBoostedVotes[NO],\r\n                proposals[_proposalId].stakes[YES],\r\n                proposals[_proposalId].stakes[NO]\r\n        );\r\n    }\r\n\r\n  /**\r\n    * @dev getProposalOrganization return the organizationId for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bytes32 organization identifier\r\n    */\r\n    function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {\r\n        return (proposals[_proposalId].organizationId);\r\n    }\r\n\r\n    /**\r\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _staker staker address\r\n      * @return uint256 vote\r\n      * @return uint256 amount\r\n    */\r\n    function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {\r\n        return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the amount stakes for a given proposal and vote\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _vote vote number\r\n      * @return uint256 stake amount\r\n    */\r\n    function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {\r\n        return proposals[_proposalId].stakes[_vote];\r\n    }\r\n\r\n  /**\r\n    * @dev voteStake return the winningVote for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 winningVote\r\n    */\r\n    function winningVote(bytes32 _proposalId) external view returns(uint256) {\r\n        return proposals[_proposalId].winningVote;\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the state for a given proposal\r\n      * @param _proposalId the ID of the proposal\r\n      * @return ProposalState proposal state\r\n    */\r\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\r\n        return proposals[_proposalId].state;\r\n    }\r\n\r\n   /**\r\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n    * @return bool true or false\r\n    */\r\n    function isAbstainAllow() external pure returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {\r\n        return (YES, NO);\r\n    }\r\n\r\n    /**\r\n     * @dev score return the proposal score\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score.\r\n     */\r\n    function score(bytes32 _proposalId) public view returns(uint256) {\r\n        return  _score(_proposalId);\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/votingMachines/VotingMachineCallbacks.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\ncontract VotingMachineCallbacks is VotingMachineCallbacksInterface {\r\n\r\n    struct ProposalInfo {\r\n        uint256 blockNumber; // the proposal's block number\r\n        Avatar avatar; // the proposal's avatar\r\n    }\r\n\r\n    modifier onlyVotingMachine(bytes32 _proposalId) {\r\n        require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), \"only VotingMachine\");\r\n        _;\r\n    }\r\n\r\n    // VotingMaching  ->  proposalId  ->  ProposalInfo\r\n    mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;\r\n\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function stakingTokenTransfer(\r\n        IERC20 _stakingToken,\r\n        address _beneficiary,\r\n        uint256 _amount,\r\n        bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);\r\n    }\r\n\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return _stakingToken.balanceOf(address(avatar));\r\n    }\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);\r\n    }\r\n\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/universalSchemes/SchemeRegistrar.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title A registrar for Schemes for organizations\r\n * @dev The SchemeRegistrar is used for registering and unregistering schemes at organizations\r\n */\r\n\r\ncontract SchemeRegistrar is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {\r\n    event NewSchemeProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _scheme,\r\n        bytes32 _parametersHash,\r\n        bytes4 _permissions,\r\n        string _descriptionHash\r\n    );\r\n\r\n    event RemoveSchemeProposal(address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _scheme,\r\n        string _descriptionHash\r\n    );\r\n\r\n    event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);\r\n    event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);\r\n\r\n    // a SchemeProposal is a  proposal to add or remove a scheme to/from the an organization\r\n    struct SchemeProposal {\r\n        address scheme; //\r\n        bool addScheme; // true: add a scheme, false: remove a scheme.\r\n        bytes32 parametersHash;\r\n        bytes4 permissions;\r\n    }\r\n\r\n    // A mapping from the organization (Avatar) address to the saved data of the organization:\r\n    mapping(address=>mapping(bytes32=>SchemeProposal)) public organizationsProposals;\r\n\r\n    // A mapping from hashes to parameters (use to store a particular configuration on the controller)\r\n    struct Parameters {\r\n        bytes32 voteRegisterParams;\r\n        bytes32 voteRemoveParams;\r\n        IntVoteInterface intVote;\r\n    }\r\n\r\n    mapping(bytes32=>Parameters) public parameters;\r\n\r\n    /**\r\n    * @dev execution of proposals, can only be called by the voting machine in which the vote is held.\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _param a parameter of the voting result, 1 yes and 2 is no.\r\n    */\r\n    function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        SchemeProposal memory proposal = organizationsProposals[address(avatar)][_proposalId];\r\n        require(proposal.scheme != address(0));\r\n        delete organizationsProposals[address(avatar)][_proposalId];\r\n        emit ProposalDeleted(address(avatar), _proposalId);\r\n        if (_param == 1) {\r\n\r\n          // Define controller and get the params:\r\n            ControllerInterface controller = ControllerInterface(avatar.owner());\r\n\r\n          // Add a scheme:\r\n            if (proposal.addScheme) {\r\n                require(controller.registerScheme(\r\n                        proposal.scheme,\r\n                        proposal.parametersHash,\r\n                        proposal.permissions,\r\n                        address(avatar))\r\n                );\r\n            }\r\n          // Remove a scheme:\r\n            if (!proposal.addScheme) {\r\n                require(controller.unregisterScheme(proposal.scheme, address(avatar)));\r\n            }\r\n        }\r\n        emit ProposalExecuted(address(avatar), _proposalId, _param);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev hash the parameters, save them if necessary, and return the hash value\r\n    */\r\n    function setParameters(\r\n        bytes32 _voteRegisterParams,\r\n        bytes32 _voteRemoveParams,\r\n        IntVoteInterface _intVote\r\n    ) public returns(bytes32)\r\n    {\r\n        bytes32 paramsHash = getParametersHash(_voteRegisterParams, _voteRemoveParams, _intVote);\r\n        parameters[paramsHash].voteRegisterParams = _voteRegisterParams;\r\n        parameters[paramsHash].voteRemoveParams = _voteRemoveParams;\r\n        parameters[paramsHash].intVote = _intVote;\r\n        return paramsHash;\r\n    }\r\n\r\n    function getParametersHash(\r\n        bytes32 _voteRegisterParams,\r\n        bytes32 _voteRemoveParams,\r\n        IntVoteInterface _intVote\r\n    ) public pure returns(bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_voteRegisterParams, _voteRemoveParams, _intVote));\r\n    }\r\n\r\n    /**\r\n    * @dev create a proposal to register a scheme\r\n    * @param _avatar the address of the organization the scheme will be registered for\r\n    * @param _scheme the address of the scheme to be registered\r\n    * @param _parametersHash a hash of the configuration of the _scheme\r\n    * @param _permissions the permission of the scheme to be registered\r\n    * @param _descriptionHash proposal's description hash\r\n    * @return a proposal Id\r\n    * @dev NB: not only proposes the vote, but also votes for it\r\n    */\r\n    function proposeScheme(\r\n        Avatar _avatar,\r\n        address _scheme,\r\n        bytes32 _parametersHash,\r\n        bytes4 _permissions,\r\n        string memory _descriptionHash\r\n    )\r\n    public\r\n    returns(bytes32)\r\n    {\r\n        // propose\r\n        require(_scheme != address(0), \"scheme cannot be zero\");\r\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\r\n\r\n        bytes32 proposalId = controllerParams.intVote.propose(\r\n            2,\r\n            controllerParams.voteRegisterParams,\r\n            msg.sender,\r\n            address(_avatar)\r\n        );\r\n\r\n        SchemeProposal memory proposal = SchemeProposal({\r\n            scheme: _scheme,\r\n            parametersHash: _parametersHash,\r\n            addScheme: true,\r\n            permissions: _permissions\r\n        });\r\n        emit NewSchemeProposal(\r\n            address(_avatar),\r\n            proposalId,\r\n            address(controllerParams.intVote),\r\n            _scheme, _parametersHash,\r\n            _permissions,\r\n            _descriptionHash\r\n        );\r\n        organizationsProposals[address(_avatar)][proposalId] = proposal;\r\n        proposalsInfo[address(controllerParams.intVote)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:_avatar\r\n        });\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n    * @dev propose to remove a scheme for a controller\r\n    * @param _avatar the address of the controller from which we want to remove a scheme\r\n    * @param _scheme the address of the scheme we want to remove\r\n    * @param _descriptionHash proposal description hash\r\n    * NB: not only registers the proposal, but also votes for it\r\n    */\r\n    function proposeToRemoveScheme(Avatar _avatar, address _scheme, string memory _descriptionHash)\r\n    public\r\n    returns(bytes32)\r\n    {\r\n        require(_scheme != address(0), \"scheme cannot be zero\");\r\n        bytes32 paramsHash = getParametersFromController(_avatar);\r\n        Parameters memory params = parameters[paramsHash];\r\n\r\n        IntVoteInterface intVote = params.intVote;\r\n        bytes32 proposalId = intVote.propose(2, params.voteRemoveParams, msg.sender, address(_avatar));\r\n        organizationsProposals[address(_avatar)][proposalId].scheme = _scheme;\r\n        emit RemoveSchemeProposal(address(_avatar), proposalId, address(intVote), _scheme, _descriptionHash);\r\n        proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:_avatar\r\n        });\r\n        return proposalId;\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/universalSchemes/UpgradeScheme.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title A scheme to manage the upgrade of an organization.\r\n * @dev The scheme is used to upgrade the controller of an organization to a new controller.\r\n */\r\n\r\ncontract UpgradeScheme is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {\r\n\r\n    event NewUpgradeProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _newController,\r\n        string _descriptionHash\r\n    );\r\n\r\n    event ChangeUpgradeSchemeProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _newUpgradeScheme,\r\n        bytes32 _params,\r\n        string _descriptionHash\r\n    );\r\n\r\n    event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);\r\n    event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);\r\n\r\n    // Details of an upgrade proposal:\r\n    struct UpgradeProposal {\r\n        address upgradeContract; // Either the new controller we upgrade to, or the new upgrading scheme.\r\n        bytes32 params; // Params for the new upgrading scheme.\r\n        uint256 proposalType; // 1: Upgrade controller, 2: change upgrade scheme.\r\n    }\r\n\r\n    // A mapping from the organization's (Avatar) address to the saved data of the organization:\r\n    mapping(address=>mapping(bytes32=>UpgradeProposal)) public organizationsProposals;\r\n\r\n    // A mapping from hashes to parameters (use to store a particular configuration on the controller)\r\n    struct Parameters {\r\n        bytes32 voteParams;\r\n        IntVoteInterface intVote;\r\n    }\r\n\r\n    mapping(bytes32=>Parameters) public parameters;\r\n\r\n    /**\r\n    * @dev execution of proposals, can only be called by the voting machine in which the vote is held.\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _param a parameter of the voting result, 1 yes and 2 is no.\r\n    */\r\n    function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        UpgradeProposal memory proposal = organizationsProposals[address(avatar)][_proposalId];\r\n        require(proposal.proposalType != 0);\r\n        delete organizationsProposals[address(avatar)][_proposalId];\r\n        emit ProposalDeleted(address(avatar), _proposalId);\r\n        // Check if vote was successful:\r\n        if (_param == 1) {\r\n\r\n        // Define controller and get the params:\r\n            ControllerInterface controller = ControllerInterface(avatar.owner());\r\n        // Upgrading controller:\r\n            if (proposal.proposalType == 1) {\r\n                require(controller.upgradeController(proposal.upgradeContract, avatar));\r\n            }\r\n\r\n        // Changing upgrade scheme:\r\n            if (proposal.proposalType == 2) {\r\n                bytes4 permissions = controller.getSchemePermissions(address(this), address(avatar));\r\n                require(\r\n                controller.registerScheme(proposal.upgradeContract, proposal.params, permissions, address(avatar))\r\n                );\r\n                if (proposal.upgradeContract != address(this)) {\r\n                    require(controller.unregisterSelf(address(avatar)));\r\n                }\r\n            }\r\n        }\r\n        emit ProposalExecuted(address(avatar), _proposalId, _param);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev hash the parameters, save them if necessary, and return the hash value\r\n    */\r\n    function setParameters(\r\n        bytes32 _voteParams,\r\n        IntVoteInterface _intVote\r\n    ) public returns(bytes32)\r\n    {\r\n        bytes32 paramsHash = getParametersHash(_voteParams, _intVote);\r\n        parameters[paramsHash].voteParams = _voteParams;\r\n        parameters[paramsHash].intVote = _intVote;\r\n        return paramsHash;\r\n    }\r\n\r\n    /**\r\n    * @dev return a hash of the given parameters\r\n    */\r\n    function getParametersHash(\r\n        bytes32 _voteParams,\r\n        IntVoteInterface _intVote\r\n    ) public pure returns(bytes32)\r\n    {\r\n        return  (keccak256(abi.encodePacked(_voteParams, _intVote)));\r\n    }\r\n\r\n    /**\r\n    * @dev propose an upgrade of the organization's controller\r\n    * @param _avatar avatar of the organization\r\n    * @param _newController address of the new controller that is being proposed\r\n    * @param _descriptionHash proposal description hash\r\n    * @return an id which represents the proposal\r\n    */\r\n    function proposeUpgrade(Avatar _avatar, address _newController, string memory _descriptionHash)\r\n        public\r\n        returns(bytes32)\r\n    {\r\n        Parameters memory params = parameters[getParametersFromController(_avatar)];\r\n        bytes32 proposalId = params.intVote.propose(2, params.voteParams, msg.sender, address(_avatar));\r\n        UpgradeProposal memory proposal = UpgradeProposal({\r\n            proposalType: 1,\r\n            upgradeContract: _newController,\r\n            params: bytes32(0)\r\n        });\r\n        organizationsProposals[address(_avatar)][proposalId] = proposal;\r\n        emit NewUpgradeProposal(\r\n        address(_avatar),\r\n        proposalId,\r\n        address(params.intVote),\r\n        _newController,\r\n        _descriptionHash\r\n        );\r\n        proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:_avatar\r\n        });\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n    * @dev propose to replace this scheme by another upgrading scheme\r\n    * @param _avatar avatar of the organization\r\n    * @param _scheme address of the new upgrading scheme\r\n    * @param _params the parameters of the new upgrading scheme\r\n    * @param _descriptionHash proposal description hash\r\n    * @return an id which represents the proposal\r\n    */\r\n    function proposeChangeUpgradingScheme(\r\n        Avatar _avatar,\r\n        address _scheme,\r\n        bytes32 _params,\r\n        string memory _descriptionHash\r\n    )\r\n        public\r\n        returns(bytes32)\r\n    {\r\n        Parameters memory params = parameters[getParametersFromController(_avatar)];\r\n        IntVoteInterface intVote = params.intVote;\r\n        bytes32 proposalId = intVote.propose(2, params.voteParams, msg.sender, address(_avatar));\r\n        require(organizationsProposals[address(_avatar)][proposalId].proposalType == 0);\r\n\r\n        UpgradeProposal memory proposal = UpgradeProposal({\r\n            proposalType: 2,\r\n            upgradeContract: _scheme,\r\n            params: _params\r\n        });\r\n        organizationsProposals[address(_avatar)][proposalId] = proposal;\r\n\r\n        emit ChangeUpgradeSchemeProposal(\r\n            address(_avatar),\r\n            proposalId,\r\n            address(params.intVote),\r\n            _scheme,\r\n            _params,\r\n            _descriptionHash\r\n        );\r\n        proposalsInfo[address(intVote)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:_avatar\r\n        });\r\n        return proposalId;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/AbsoluteVote.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AbsoluteVote is IntVoteInterface {\r\n    using SafeMath for uint;\r\n\r\n    struct Parameters {\r\n        uint256 precReq; // how many percentages required for the proposal to be passed\r\n        address voteOnBehalf; //if this address is set so only this address is allowed\r\n                              // to vote of behalf of someone else.\r\n    }\r\n\r\n    struct Voter {\r\n        uint256 vote; // 0 - 'abstain'\r\n        uint256 reputation; // amount of voter's reputation\r\n    }\r\n\r\n    struct Proposal {\r\n        bytes32 organizationId; // the organization Id\r\n        bool open; // voting open flag\r\n        address callbacks;\r\n        uint256 numOfChoices;\r\n        bytes32 paramsHash; // the hash of the parameters of the proposal\r\n        uint256 totalVotes;\r\n        mapping(uint=>uint) votes;\r\n        mapping(address=>Voter) voters;\r\n    }\r\n\r\n    event AVVoteProposal(bytes32 indexed _proposalId, bool _isProxyVote);\r\n\r\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\r\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\r\n    mapping(bytes32=>address) public organizations;\r\n\r\n    uint256 public constant MAX_NUM_OF_CHOICES = 10;\r\n    uint256 public proposalsCnt; // Total amount of proposals\r\n\r\n  /**\r\n   * @dev Check that the proposal is votable (open and not executed yet)\r\n   */\r\n    modifier votable(bytes32 _proposalId) {\r\n        require(proposals[_proposalId].open);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _paramsHash defined the parameters of the voting machine used for this proposal\r\n     * @param _organization address\r\n     * @return proposal's id.\r\n     */\r\n    function propose(uint256 _numOfChoices, bytes32 _paramsHash, address, address _organization)\r\n        external\r\n        returns(bytes32)\r\n    {\r\n        // Check valid params and number of choices:\r\n        require(parameters[_paramsHash].precReq > 0);\r\n        require(_numOfChoices > 0 && _numOfChoices <= MAX_NUM_OF_CHOICES);\r\n        // Generate a unique ID:\r\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\r\n        proposalsCnt = proposalsCnt.add(1);\r\n        // Open proposal:\r\n        Proposal memory proposal;\r\n        proposal.numOfChoices = _numOfChoices;\r\n        proposal.paramsHash = _paramsHash;\r\n        proposal.callbacks = msg.sender;\r\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\r\n        proposal.open = true;\r\n        proposals[proposalId] = proposal;\r\n        if (organizations[proposal.organizationId] == address(0)) {\r\n            if (_organization == address(0)) {\r\n                organizations[proposal.organizationId] = msg.sender;\r\n            } else {\r\n                organizations[proposal.organizationId] = _organization;\r\n            }\r\n        }\r\n        emit NewProposal(proposalId, organizations[proposal.organizationId], _numOfChoices, msg.sender, _paramsHash);\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n     * @dev voting function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote a value between 0 to and the proposal number of choices.\r\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\r\n     * @param _voter voter address\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function vote(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _amount,\r\n        address _voter)\r\n        external\r\n        votable(_proposalId)\r\n        returns(bool)\r\n        {\r\n\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        address voter;\r\n        if (params.voteOnBehalf != address(0)) {\r\n            require(msg.sender == params.voteOnBehalf);\r\n            voter = _voter;\r\n        } else {\r\n            voter = msg.sender;\r\n        }\r\n        return internalVote(_proposalId, voter, _vote, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel the vote of the msg.sender: subtract the reputation amount from the votes\r\n   * and delete the voter from the proposal struct\r\n   * @param _proposalId id of the proposal\r\n   */\r\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\r\n        cancelVoteInternal(_proposalId, msg.sender);\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n  /**\r\n   * @dev getNumberOfChoices returns the number of choices possible in this proposal\r\n   * excluding the abstain vote (0)\r\n   * @param _proposalId the ID of the proposal\r\n   * @return uint256 that contains number of choices\r\n   */\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256) {\r\n        return proposals[_proposalId].numOfChoices;\r\n    }\r\n\r\n  /**\r\n   * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\r\n   * @param _proposalId the ID of the proposal\r\n   * @param _voter the address of the voter\r\n   * @return uint256 vote - the voters vote\r\n   *        uint256 reputation - amount of reputation committed by _voter to _proposalId\r\n   */\r\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\r\n        Voter memory voter = proposals[_proposalId].voters[_voter];\r\n        return (voter.vote, voter.reputation);\r\n    }\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {\r\n        return proposals[_proposalId].votes[_choice];\r\n    }\r\n\r\n    /**\r\n      * @dev isVotable check if the proposal is votable\r\n      * @param _proposalId the ID of the proposal\r\n      * @return bool true or false\r\n    */\r\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\r\n        return  proposals[_proposalId].open;\r\n    }\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {\r\n        return (0, MAX_NUM_OF_CHOICES);\r\n    }\r\n\r\n    /**\r\n     * @dev hash the parameters, save them if necessary, and return the hash value\r\n    */\r\n    function setParameters(uint256 _precReq, address _voteOnBehalf) public returns(bytes32) {\r\n        require(_precReq <= 100 && _precReq > 0);\r\n        bytes32 hashedParameters = getParametersHash(_precReq, _voteOnBehalf);\r\n        parameters[hashedParameters] = Parameters({\r\n            precReq: _precReq,\r\n            voteOnBehalf: _voteOnBehalf\r\n        });\r\n        return hashedParameters;\r\n    }\r\n\r\n    /**\r\n     * @dev hashParameters returns a hash of the given parameters\r\n     */\r\n    function getParametersHash(uint256 _precReq, address _voteOnBehalf) public pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(_precReq, _voteOnBehalf));\r\n    }\r\n\r\n    function cancelVoteInternal(bytes32 _proposalId, address _voter) internal {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Voter memory voter = proposal.voters[_voter];\r\n        proposal.votes[voter.vote] = (proposal.votes[voter.vote]).sub(voter.reputation);\r\n        proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation);\r\n        delete proposal.voters[_voter];\r\n        emit CancelVoting(_proposalId, organizations[proposal.organizationId], _voter);\r\n    }\r\n\r\n    function deleteProposal(bytes32 _proposalId) internal {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        for (uint256 cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\r\n            delete proposal.votes[cnt];\r\n        }\r\n        delete proposals[_proposalId];\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        uint256 totalReputation =\r\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\r\n        uint256 precReq = parameters[proposal.paramsHash].precReq;\r\n        // Check if someone crossed the bar:\r\n        for (uint256 cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\r\n            if (proposal.votes[cnt] > (totalReputation/100)*precReq) {\r\n                Proposal memory tmpProposal = proposal;\r\n                deleteProposal(_proposalId);\r\n                emit ExecuteProposal(_proposalId, organizations[tmpProposal.organizationId], cnt, totalReputation);\r\n                return ProposalExecuteInterface(tmpProposal.callbacks).executeProposal(_proposalId, int(cnt));\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\r\n     * @param _proposalId id of the proposal\r\n     * @param _voter used in case the vote is cast for someone else\r\n     * @param _vote a value between 0 to and the proposal's number of choices.\r\n     * @return true in case of proposal execution otherwise false\r\n     * throws if proposal is not open or if it has been executed\r\n     * NB: executes the proposal if a decision has been reached\r\n     */\r\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        // Check valid vote:\r\n        require(_vote <= proposal.numOfChoices);\r\n        // Check voter has enough reputation:\r\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\r\n        require(reputation > 0, \"_voter must have reputation\");\r\n        require(reputation >= _rep);\r\n        uint256 rep = _rep;\r\n        if (rep == 0) {\r\n            rep = reputation;\r\n        }\r\n        // If this voter has already voted, first cancel the vote:\r\n        if (proposal.voters[_voter].reputation != 0) {\r\n            cancelVoteInternal(_proposalId, _voter);\r\n        }\r\n        // The voting itself:\r\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\r\n        proposal.totalVotes = rep.add(proposal.totalVotes);\r\n        proposal.voters[_voter] = Voter({\r\n            reputation: rep,\r\n            vote: _vote\r\n        });\r\n        // Event:\r\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\r\n        emit AVVoteProposal(_proposalId, (_voter != msg.sender));\r\n        // execute the proposal if this vote was decisive:\r\n        return _execute(_proposalId);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/dao/schemes/SchemeGuard.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/* @dev abstract contract for ensuring that schemes have been registered properly\r\n * Allows setting zero Avatar in situations where the Avatar hasn't been created yet\r\n */\r\ncontract SchemeGuard is Ownable {\r\n    Avatar avatar;\r\n    ControllerInterface internal controller = ControllerInterface(0);\r\n\r\n    /** @dev Constructor. only sets controller if given avatar is not null.\r\n     * @param _avatar The avatar of the DAO.\r\n     */\r\n    constructor(Avatar _avatar) public {\r\n        avatar = _avatar;\r\n\r\n        if (avatar != Avatar(0)) {\r\n            controller = ControllerInterface(avatar.owner());\r\n        }\r\n    }\r\n\r\n    /** @dev modifier to check if caller is avatar\r\n     */\r\n    modifier onlyAvatar() {\r\n        require(address(avatar) == msg.sender, \"only Avatar can call this method\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if scheme is registered\r\n     */\r\n    modifier onlyRegistered() {\r\n        require(isRegistered(), \"Scheme is not registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if scheme is not registered\r\n     */\r\n    modifier onlyNotRegistered() {\r\n        require(!isRegistered(), \"Scheme is registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if call is a scheme that is registered\r\n     */\r\n    modifier onlyRegisteredCaller() {\r\n        require(isRegistered(msg.sender), \"Calling scheme is not registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev Function to set a new avatar and controller for scheme\r\n     * can only be done by owner of scheme\r\n     */\r\n    function setAvatar(Avatar _avatar) public onlyOwner {\r\n        avatar = _avatar;\r\n        controller = ControllerInterface(avatar.owner());\r\n    }\r\n\r\n    /** @dev function to see if an avatar has been set and if this scheme is registered\r\n     * @return true if scheme is registered\r\n     */\r\n    function isRegistered() public view returns (bool) {\r\n        return isRegistered(address(this));\r\n    }\r\n\r\n    /** @dev function to see if an avatar has been set and if this scheme is registered\r\n     * @return true if scheme is registered\r\n     */\r\n    function isRegistered(address scheme) public view returns (bool) {\r\n        require(avatar != Avatar(0), \"Avatar is not set\");\r\n\r\n        if (!(controller.isSchemeRegistered(scheme, address(avatar)))) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/identity/IdentityAdminRole.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Contract managing the identity admin role\r\n */\r\ncontract IdentityAdminRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event IdentityAdminAdded(address indexed account);\r\n    event IdentityAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private IdentityAdmins;\r\n\r\n    /* @dev constructor. Adds caller as an admin\r\n     */\r\n    constructor() internal {\r\n        _addIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /* @dev Modifier to check if caller is an admin\r\n     */\r\n    modifier onlyIdentityAdmin() {\r\n        require(isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if account is identity admin\r\n     * @param account Account to check\r\n     * @return Boolean indicating if account is identity admin\r\n     */\r\n    function isIdentityAdmin(address account) public view returns (bool) {\r\n        return IdentityAdmins.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a identity admin account. Is only callable by owner.\r\n     * @param account Address to be added\r\n     * @return true if successful\r\n     */\r\n    function addIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _addIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a identity admin account. Is only callable by owner.\r\n     * @param account Address to be removed\r\n     * @return true if successful\r\n     */\r\n    function removeIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _removeIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to renounce their role\r\n     */\r\n    function renounceIdentityAdmin() public {\r\n        _removeIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of addIdentityAdmin\r\n     */\r\n    function _addIdentityAdmin(address account) internal {\r\n        IdentityAdmins.add(account);\r\n        emit IdentityAdminAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of removeIdentityAdmin\r\n     */\r\n    function _removeIdentityAdmin(address account) internal {\r\n        IdentityAdmins.remove(account);\r\n        emit IdentityAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/identity/Identity.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* @title Identity contract responsible for whitelisting\r\n * and keeping track of amount of whitelisted users\r\n */\r\ncontract Identity is IdentityAdminRole, SchemeGuard, Pausable {\r\n    using Roles for Roles.Role;\r\n    using SafeMath for uint256;\r\n\r\n    Roles.Role private blacklist;\r\n    Roles.Role private whitelist;\r\n    Roles.Role private contracts;\r\n\r\n    uint256 public whitelistedCount = 0;\r\n    uint256 public whitelistedContracts = 0;\r\n    uint256 public authenticationPeriod = 14;\r\n\r\n    mapping(address => uint256) public dateAuthenticated;\r\n    mapping(address => uint256) public dateAdded;\r\n\r\n    mapping(address => string) public addrToDID;\r\n    mapping(bytes32 => address) public didHashToAddress;\r\n\r\n    event BlacklistAdded(address indexed account);\r\n    event BlacklistRemoved(address indexed account);\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    event ContractAdded(address indexed account);\r\n    event ContractRemoved(address indexed account);\r\n\r\n    constructor() public SchemeGuard(Avatar(0)) {}\r\n\r\n    /* @dev Sets a new value for authenticationPeriod.\r\n     * Can only be called by Identity Administrators.\r\n     * @param period new value for authenticationPeriod\r\n     */\r\n    function setAuthenticationPeriod(uint256 period) public onlyOwner whenNotPaused {\r\n        authenticationPeriod = period;\r\n    }\r\n\r\n    /* @dev Sets the authentication date of `account`\r\n     * to the current time.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to change its auth date\r\n     */\r\n    function authenticate(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        dateAuthenticated[account] = now;\r\n    }\r\n\r\n    /* @dev Adds an address as whitelisted.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to add as whitelisted\r\n     */\r\n    function addWhitelisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Adds an address as whitelisted under a specific ID\r\n     * @param account The address to add\r\n     * @param did the ID to add account under\r\n     */\r\n    function addWhitelistedWithDID(address account, string memory did)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _addWhitelistedWithDID(account, did);\r\n    }\r\n\r\n    /* @dev Removes an address as whitelisted.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to remove as whitelisted\r\n     */\r\n    function removeWhitelisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Renounces message sender from whitelisted\r\n     */\r\n    function renounceWhitelisted() public whenNotPaused {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    /* @dev Returns true if given address has been added to whitelist\r\n     * @param account the address to check\r\n     * @return a bool indicating weather the address is present in whitelist\r\n     */\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        uint256 daysSinceAuthentication = (now.sub(dateAuthenticated[account])) / 1 days;\r\n        return\r\n            (daysSinceAuthentication <= authenticationPeriod) && whitelist.has(account);\r\n    }\r\n\r\n    /* @dev Function that gives the date the given user was added\r\n     * @param account The address to check\r\n     * @return The date the address was added\r\n     */\r\n    function lastAuthenticated(address account) public view returns (uint256) {\r\n        return dateAuthenticated[account];\r\n    }\r\n\r\n    // /**\r\n    //  *\r\n    //  * @dev Function to transfer whitelisted privilege to another address\r\n    //  * relocates did of sender to give address\r\n    //  * @param account The address to transfer to\r\n    //  */\r\n    // function transferAccount(address account) public whenNotPaused {\r\n    //     ERC20 token = avatar.nativeToken();\r\n    //     require(!isBlacklisted(account), \"Cannot transfer to blacklisted\");\r\n    //     require(token.balanceOf(account) == 0, \"Account is already in use\");\r\n    //     require(isWhitelisted(msg.sender), \"Requester need to be whitelisted\");\r\n\r\n    //     require(\r\n    //         keccak256(bytes(addrToDID[account])) == keccak256(bytes(\"\")),\r\n    //         \"address already has DID\"\r\n    //     );\r\n\r\n    //     string memory did = addrToDID[msg.sender];\r\n    //     bytes32 pHash = keccak256(bytes(did));\r\n\r\n    //     uint256 balance = token.balanceOf(msg.sender);\r\n    //     token.transferFrom(msg.sender, account, balance);\r\n    //     _removeWhitelisted(msg.sender);\r\n    //     _addWhitelisted(account);\r\n    //     addrToDID[account] = did;\r\n    //     didHashToAddress[pHash] = account;\r\n    // }\r\n\r\n    /* @dev Adds an address to blacklist.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to add as blacklisted\r\n     */\r\n    function addBlacklisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        blacklist.add(account);\r\n        emit BlacklistAdded(account);\r\n    }\r\n\r\n    /* @dev Removes an address from blacklist\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to remove as blacklisted\r\n     */\r\n    function removeBlacklisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        blacklist.remove(account);\r\n        emit BlacklistRemoved(account);\r\n    }\r\n\r\n    /* @dev Function to add a Contract to list of contracts\r\n     * @param account The address to add\r\n     */\r\n    function addContract(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        require(isContract(account), \"Given address is not a contract\");\r\n        contracts.add(account);\r\n        _addWhitelisted(account);\r\n\r\n        emit ContractAdded(account);\r\n    }\r\n\r\n    /* @dev Function to remove a Contract from list of contracts\r\n     * @param account The address to add\r\n     */\r\n    function removeContract(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        contracts.remove(account);\r\n        _removeWhitelisted(account);\r\n\r\n        emit ContractRemoved(account);\r\n    }\r\n\r\n    /* @dev Function to check if given contract is on list of contracts.\r\n     * @param address to check\r\n     * @return a bool indicating if address is on list of contracts\r\n     */\r\n    function isDAOContract(address account) public view returns (bool) {\r\n        return contracts.has(account);\r\n    }\r\n\r\n    /* @dev Internal function to add to whitelisted\r\n     * @param account the address to add\r\n     */\r\n    function _addWhitelisted(address account) internal {\r\n        whitelist.add(account);\r\n\r\n        whitelistedCount += 1;\r\n        dateAdded[account] = now;\r\n        dateAuthenticated[account] = now;\r\n\r\n        if (isContract(account)) {\r\n            whitelistedContracts += 1;\r\n        }\r\n\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    /* @dev Internal whitelisting with did function.\r\n     * @param account the address to add\r\n     * @param did the id to register account under\r\n     */\r\n    function _addWhitelistedWithDID(address account, string memory did) internal {\r\n        bytes32 pHash = keccak256(bytes(did));\r\n        require(didHashToAddress[pHash] == address(0), \"DID already registered\");\r\n\r\n        addrToDID[account] = did;\r\n        didHashToAddress[pHash] = account;\r\n\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Internal function to remove from whitelisted\r\n     * @param account the address to add\r\n     */\r\n    function _removeWhitelisted(address account) internal {\r\n        whitelist.remove(account);\r\n\r\n        whitelistedCount -= 1;\r\n        delete dateAuthenticated[account];\r\n\r\n        if (isContract(account)) {\r\n            whitelistedContracts -= 1;\r\n        }\r\n\r\n        string memory did = addrToDID[account];\r\n        bytes32 pHash = keccak256(bytes(did));\r\n\r\n        delete dateAuthenticated[account];\r\n        delete addrToDID[account];\r\n        delete didHashToAddress[pHash];\r\n\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n\r\n    /* @dev Returns true if given address has been added to the blacklist\r\n     * @param account the address to check\r\n     * @return a bool indicating weather the address is present in the blacklist\r\n     */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklist.has(account);\r\n    }\r\n\r\n    /* @dev Function to see if given address is a contract\r\n     * @return true if address is a contract\r\n     */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/identity/IdentityGuard.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/* @title The IdentityGuard contract\r\n * @dev Contract containing an identity and\r\n * modifiers to ensure proper access\r\n */\r\ncontract IdentityGuard is Ownable {\r\n    Identity public identity;\r\n\r\n    /* @dev Constructor. Checks if identity is a zero address\r\n     * @param _identity The identity contract.\r\n     */\r\n    constructor(Identity _identity) public {\r\n        require(_identity != Identity(0), \"Supplied identity is null\");\r\n        identity = _identity;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be not blacklisted\r\n     */\r\n    modifier onlyNotBlacklisted() {\r\n        require(!identity.isBlacklisted(msg.sender), \"Caller is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be not blacklisted\r\n     * @param _account The address to be checked\r\n     */\r\n    modifier requireNotBlacklisted(address _account) {\r\n        require(!identity.isBlacklisted(_account), \"Receiver is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be whitelisted\r\n     */\r\n    modifier onlyWhitelisted() {\r\n        require(identity.isWhitelisted(msg.sender), \"is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be whitelisted\r\n     * @param _account the given address\r\n     */\r\n    modifier requireWhitelisted(address _account) {\r\n        require(identity.isWhitelisted(_account), \"is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be an approved DAO contract\r\n     */\r\n    modifier onlyDAOContract() {\r\n        require(identity.isDAOContract(msg.sender), \"is not whitelisted contract\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be whitelisted\r\n     * @param _account the given address\r\n     */\r\n    modifier requireDAOContract(address _contract) {\r\n        require(identity.isDAOContract(_contract), \"is not whitelisted contract\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to have been whitelisted\r\n     * before or on the given date\r\n     * @param date The time sender must have been added before\r\n     */\r\n    modifier onlyAddedBefore(uint256 date) {\r\n        require(\r\n            identity.lastAuthenticated(msg.sender) <= date,\r\n            \"Was not added within period\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires sender to be an identity admin\r\n     */\r\n    modifier onlyIdentityAdmin() {\r\n        require(identity.isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Allows owner to set a new identity contract if\r\n     * the given identity contract has been registered as a scheme\r\n     */\r\n    function setIdentity(Identity _identity) public onlyOwner {\r\n        require(_identity.isRegistered(), \"Identity is not registered\");\r\n        identity = _identity;\r\n    }\r\n}\r\n\r\n// File: contracts/dao/schemes/FeeFormula.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Fee formula abstract contract\r\n */\r\ncontract AbstractFees is SchemeGuard {\r\n    constructor() public SchemeGuard(Avatar(0)) {}\r\n\r\n    function getTxFees(\r\n        uint256 _value,\r\n        address _sender,\r\n        address _recipient\r\n    ) public view returns (uint256, bool);\r\n}\r\n\r\n/**\r\n * @title Fee formula contract\r\n * contract that provides a function to calculate\r\n * fees as a percentage of any given value\r\n */\r\ncontract FeeFormula is AbstractFees {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public percentage;\r\n    bool public constant senderPays = false;\r\n\r\n    /**\r\n     * @dev Constructor. Requires the given percentage parameter\r\n     * to be less than 100.\r\n     * @param _percentage the percentage to calculate fees of\r\n     */\r\n    constructor(uint256 _percentage) public {\r\n        require(_percentage < 100, \"Percentage should be <100\");\r\n        percentage = _percentage;\r\n    }\r\n\r\n    /**  @dev calculates the fee of given value.\r\n     * @param _value the value of the transaction to calculate fees from\r\n     * @param _sender address sending.\r\n     *  @param _recipient address receiving.\r\n     * @return the transactional fee for given value\r\n     */\r\n    function getTxFees(\r\n        uint256 _value,\r\n        address _sender,\r\n        address _recipient\r\n    ) public view returns (uint256, bool) {\r\n        return (_value.mul(percentage).div(100), senderPays);\r\n    }\r\n}\r\n\r\n// File: contracts/dao/schemes/FormulaHolder.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/* @title Contract in charge of setting registered fee formula schemes to contract\r\n */\r\ncontract FormulaHolder is Ownable {\r\n    AbstractFees public formula;\r\n\r\n    /* @dev Constructor. Requires that given formula is a valid contract.\r\n     * @param _formula The fee formula contract.\r\n     */\r\n    constructor(AbstractFees _formula) public {\r\n        require(_formula != AbstractFees(0), \"Supplied formula is null\");\r\n        formula = _formula;\r\n    }\r\n\r\n    /* @dev Sets the given fee formula contract. Is only callable by owner.\r\n     * Reverts if formula has not been registered by DAO.\r\n     * @param _formula the new fee formula scheme\r\n     */\r\n    function setFormula(AbstractFees _formula) public onlyOwner {\r\n        _formula.isRegistered();\r\n        formula = _formula;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC677/ERC677.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n/* @title ERC677 interface\r\n */\r\ninterface ERC677 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/token/ERC677/ERC677Receiver.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n/* @title ERC677Receiver interface\r\n */\r\ninterface ERC677Receiver {\r\n    function onTokenTransfer(\r\n        address _from,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC677Token.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/* @title ERC677Token contract.\r\n */\r\ncontract ERC677Token is ERC677, DAOToken, ERC20Pausable {\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap\r\n    ) public DAOToken(_name, _symbol, _cap) {}\r\n\r\n    /**\r\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @param _data The extra data to be passed to the receiving contract.\r\n     * @return true if transfer is successful\r\n     */\r\n    function _transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) internal whenNotPaused returns (bool) {\r\n        bool res = super.transfer(_to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        if (isContract(_to)) {\r\n            require(contractFallback(_to, _value, _data), \"Contract fallback failed\");\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /* @dev Contract fallback function. Is called if transferAndCall is called\r\n     * to a contract\r\n     */\r\n    function contractFallback(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        ERC677Receiver receiver = ERC677Receiver(_to);\r\n        require(\r\n            receiver.onTokenTransfer(msg.sender, _value, _data),\r\n            \"Contract Fallback failed\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /* @dev Function to check if given address is a contract\r\n     * @param _addr Address to check\r\n     * @return true if given address is a contract\r\n     */\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC677BridgeToken.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\ncontract ERC677BridgeToken is ERC677Token, MinterRole {\r\n    address public bridgeContract;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap\r\n    ) public ERC677Token(_name, _symbol, _cap) {}\r\n\r\n    function setBridgeContract(address _bridgeContract) public onlyMinter {\r\n        require(\r\n            _bridgeContract != address(0) && isContract(_bridgeContract),\r\n            \"Invalid bridge contract\"\r\n        );\r\n        bridgeContract = _bridgeContract;\r\n    }\r\n}\r\n\r\n// File: contracts/token/GoodDollar.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The GoodDollar ERC677 token contract\r\n */\r\ncontract GoodDollar is ERC677BridgeToken, IdentityGuard, FormulaHolder {\r\n    address feeRecipient;\r\n\r\n    // Overrides hard-coded decimal in DAOToken\r\n    uint256 public constant decimals = 2;\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param _name The name of the token\r\n     * @param _symbol The symbol of the token\r\n     * @param _cap the cap of the token. no cap if 0\r\n     * @param _formula the fee formula contract\r\n     * @param _identity the identity contract\r\n     * @param _feeRecipient the address that receives transaction fees\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap,\r\n        AbstractFees _formula,\r\n        Identity _identity,\r\n        address _feeRecipient\r\n    )\r\n        public\r\n        ERC677BridgeToken(_name, _symbol, _cap)\r\n        IdentityGuard(_identity)\r\n        FormulaHolder(_formula)\r\n    {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Processes fees from given value and sends\r\n     * remainder to given address\r\n     * @param to the address to be sent to\r\n     * @param value the value to be processed and then\r\n     * transferred\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        uint256 bruttoValue = processFees(msg.sender, to, value);\r\n        return super.transfer(to, bruttoValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified\r\n     * amount of tokens on behalf of msg.sender\r\n     * @param spender The address which will spend the funds\r\n     * @param value The amount of tokens to be spent\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from The address which you want to send tokens from\r\n     * @param to The address which you want to transfer to\r\n     * @param value the amount of tokens to be transferred\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public returns (bool) {\r\n        uint256 bruttoValue = processFees(from, to, value);\r\n        return super.transferFrom(from, to, bruttoValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Processes transfer fees and calls ERC677Token transferAndCall function\r\n     * @param to address to transfer to\r\n     * @param value the amount to transfer\r\n     * @param data The data to pass to transferAndCall\r\n     * @return a bool indicating if transfer function succeeded\r\n     */\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bool) {\r\n        uint256 bruttoValue = processFees(msg.sender, to, value);\r\n        return super._transferAndCall(to, bruttoValue, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Minting function\r\n     * @param to the address that will receive the minted tokens\r\n     * @param value the amount of tokens to mint\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function mint(address to, uint256 value)\r\n        public\r\n        onlyMinter\r\n        requireNotBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        if (cap > 0) {\r\n            require(totalSupply().add(value) <= cap, \"Cannot increase supply beyond cap\");\r\n        }\r\n        super._mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public onlyNotBlacklisted {\r\n        super.burn(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value)\r\n        public\r\n        onlyNotBlacklisted\r\n        requireNotBlacklisted(from)\r\n    {\r\n        super.burnFrom(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allows a spender\r\n     * @param spender The address which will spend the funds\r\n     * @param addedValue The amount of tokens to increase the allowance by\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender\r\n     * @param spender The address which will spend the funds\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current transaction fees\r\n     * @return an uint256 that represents\r\n     * the current transaction fees\r\n     */\r\n    function getFees(uint256 value) public view returns (uint256, bool) {\r\n        return formula.getTxFees(value, address(0), address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current transaction fees\r\n     * @return an uint256 that represents\r\n     * the current transaction fees\r\n     */\r\n    function getFees(\r\n        uint256 value,\r\n        address sender,\r\n        address recipient\r\n    ) public view returns (uint256, bool) {\r\n        return formula.getTxFees(value, sender, recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address that receives the transactional fees.\r\n     * can only be called by owner\r\n     * @param _feeRecipient The new address to receive transactional fees\r\n     */\r\n    function setFeeRecipient(address _feeRecipient) public onlyOwner {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Sends transactional fees to feeRecipient address from given address\r\n     * @param account The account that sends the fees\r\n     * @param value The amount to subtract fees from\r\n     * @return an uint256 that represents the given value minus the transactional fees\r\n     */\r\n    function processFees(\r\n        address account,\r\n        address recipient,\r\n        uint256 value\r\n    ) internal returns (uint256) {\r\n        (uint256 txFees, bool senderPays) = getFees(value, account, recipient);\r\n        if (txFees > 0 && !identity.isDAOContract(msg.sender)) {\r\n            require(\r\n                senderPays == false || value.add(txFees) <= balanceOf(account),\r\n                \"Not enough balance to pay TX fee\"\r\n            );\r\n            if (account == msg.sender) {\r\n                super.transfer(feeRecipient, txFees);\r\n            } else {\r\n                super.transferFrom(account, feeRecipient, txFees);\r\n            }\r\n\r\n            return senderPays ? value : value.sub(txFees);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n\r\n// File: contracts/dao/DaoCreator.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ControllerCreator for creating a single controller. Taken from @daostack.\r\n */\r\ncontract ControllerCreatorGoodDollar {\r\n    function create(Avatar _avatar, address _sender) public returns (address) {\r\n        Controller controller = new Controller(_avatar);\r\n        controller.registerScheme(\r\n            _sender,\r\n            bytes32(0),\r\n            bytes4(0x0000001f),\r\n            address(_avatar)\r\n        );\r\n        controller.unregisterScheme(address(this), address(_avatar));\r\n        return address(controller);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Contract for adding founders to the DAO. Separated from DaoCreator to reduce\r\n * contract sizes\r\n */\r\ncontract AddFoundersGoodDollar {\r\n    ControllerCreatorGoodDollar private controllerCreatorGoodDollar;\r\n\r\n    constructor(ControllerCreatorGoodDollar _controllerCreatorGoodDollar) public {\r\n        controllerCreatorGoodDollar = _controllerCreatorGoodDollar;\r\n    }\r\n\r\n    /**\r\n     * @param _founders An array with the addresses of the founders of the organization\r\n     * @param _avatarTokenAmount Amount of tokens that the avatar receive on new organization\r\n     * @param _foundersReputationAmount An array of amount of reputation that the\r\n     *   founders receive in the new organization\r\n     */\r\n    function addFounders(\r\n        GoodDollar nativeToken,\r\n        Reputation nativeReputation,\r\n        address _sender,\r\n        address[] memory _founders,\r\n        uint256 _avatarTokenAmount,\r\n        uint256[] memory _foundersReputationAmount\r\n    ) public returns (Avatar) {\r\n        Avatar avatar = new Avatar(\"GoodDollar\", nativeToken, nativeReputation);\r\n\r\n        //mint token to avatar\r\n        nativeToken.mint(address(avatar), _avatarTokenAmount);\r\n\r\n        // Mint reputation for founders:\r\n        for (uint256 i = 0; i < _founders.length; i++) {\r\n            require(_founders[i] != address(0), \"Founder cannot be zero address\");\r\n            if (_foundersReputationAmount[i] > 0) {\r\n                nativeReputation.mint(_founders[i], _foundersReputationAmount[i]);\r\n            }\r\n        }\r\n        // Create Controller:\r\n        ControllerInterface controller = ControllerInterface(\r\n            controllerCreatorGoodDollar.create(avatar, msg.sender)\r\n        );\r\n\r\n        // Set fee recipient and Transfer ownership:\r\n        nativeToken.setFeeRecipient(address(avatar));\r\n\r\n        avatar.transferOwnership(address(controller));\r\n        nativeToken.transferOwnership(address(avatar));\r\n        nativeReputation.transferOwnership(address(controller));\r\n\r\n        // Add minters\r\n        nativeToken.addMinter(_sender);\r\n        nativeToken.addMinter(address(avatar));\r\n        nativeToken.addMinter(address(controller));\r\n        nativeToken.renounceMinter();\r\n        return (avatar);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Genesis Scheme that creates organizations. Taken and modified from @daostack.\r\n */\r\ncontract DaoCreatorGoodDollar {\r\n    Avatar public avatar;\r\n    address public lock;\r\n\r\n    event NewOrg(address _avatar);\r\n    event InitialSchemesSet(address _avatar);\r\n\r\n    AddFoundersGoodDollar private addFoundersGoodDollar;\r\n\r\n    constructor(AddFoundersGoodDollar _addFoundersGoodDollar) public {\r\n        addFoundersGoodDollar = _addFoundersGoodDollar;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new organization\r\n     * @param _tokenName The name of the token associated with the organization\r\n     * @param _tokenSymbol The symbol of the token\r\n     * @param _founders An array with the addresses of the founders of the organization\r\n     * @param _avatarTokenAmount Amount of tokens that the avatar receive in the new organization\r\n     * @param _foundersReputationAmount An array of amount of reputation that the\r\n     *   founders receive in the new organization\r\n     * @param  _cap token cap - 0 for no cap.\r\n     * @return The address of the avatar of the controller\r\n     */\r\n    function forgeOrg(\r\n        string calldata _tokenName,\r\n        string calldata _tokenSymbol,\r\n        uint256 _cap,\r\n        FeeFormula _formula,\r\n        Identity _identity,\r\n        address[] calldata _founders,\r\n        uint256 _avatarTokenAmount,\r\n        uint256[] calldata _foundersReputationAmount\r\n    ) external returns (address) {\r\n        //The call for the private function is needed to bypass a deep stack issues\r\n        return\r\n            _forgeOrg(\r\n                _tokenName,\r\n                _tokenSymbol,\r\n                _cap,\r\n                _formula,\r\n                _identity,\r\n                _founders,\r\n                _avatarTokenAmount,\r\n                _foundersReputationAmount\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Set initial schemes for the organization.\r\n     * @param _avatar organization avatar (returns from forgeOrg)\r\n     * @param _schemes the schemes to register for the organization\r\n     * @param _params the schemes parameters\r\n     * @param _permissions the schemes permissions.\r\n     * @param _metaData dao meta data hash\r\n     */\r\n    function setSchemes(\r\n        Avatar _avatar,\r\n        address[] calldata _schemes,\r\n        bytes32[] calldata _params,\r\n        bytes4[] calldata _permissions,\r\n        string calldata _metaData\r\n    ) external {\r\n        // this action can only be executed by the account that holds the lock\r\n        // for this controller\r\n        require(lock == msg.sender, \"Message sender is not lock\");\r\n        // register initial schemes:\r\n        ControllerInterface controller = ControllerInterface(_avatar.owner());\r\n        for (uint256 i = 0; i < _schemes.length; i++) {\r\n            controller.registerScheme(\r\n                _schemes[i],\r\n                _params[i],\r\n                _permissions[i],\r\n                address(_avatar)\r\n            );\r\n        }\r\n        controller.metaData(_metaData, _avatar);\r\n        // Unregister self:\r\n        controller.unregisterScheme(address(this), address(_avatar));\r\n        // Remove lock:\r\n        lock = address(0);\r\n        emit InitialSchemesSet(address(_avatar));\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new organization\r\n     * @param _tokenName The name of the token associated with the organization\r\n     * @param _tokenSymbol The symbol of the token\r\n     * @param _founders An array with the addresses of the founders of the organization\r\n     * @param _avatarTokenAmount Amount of tokens that the avatar receive on startup\r\n     * @param _foundersReputationAmount An array of amount of reputation that the\r\n     *   founders receive in the new organization\r\n     * @param  _cap token cap - 0 for no cap.\r\n     * @return The address of the avatar of the controller\r\n     */\r\n    function _forgeOrg(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint256 _cap,\r\n        FeeFormula _formula,\r\n        Identity _identity,\r\n        address[] memory _founders,\r\n        uint256 _avatarTokenAmount,\r\n        uint256[] memory _foundersReputationAmount\r\n    ) private returns (address) {\r\n        // Create Token, Reputation and Avatar:\r\n        require(lock == address(0), \"Lock already exists\");\r\n        require(\r\n            _founders.length == _foundersReputationAmount.length,\r\n            \"Founder reputation missing\"\r\n        );\r\n        require(_founders.length > 0, \"Must have at least one founder\");\r\n        GoodDollar nativeToken = new GoodDollar(\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _cap,\r\n            _formula,\r\n            _identity,\r\n            address(0)\r\n        );\r\n        Reputation nativeReputation = new Reputation();\r\n\r\n        // renounce minter\r\n        nativeToken.addMinter(address(addFoundersGoodDollar));\r\n        nativeToken.renounceMinter();\r\n\r\n        nativeToken.transferOwnership(address(addFoundersGoodDollar));\r\n        nativeReputation.transferOwnership(address(addFoundersGoodDollar));\r\n\r\n        avatar = addFoundersGoodDollar.addFounders(\r\n            nativeToken,\r\n            nativeReputation,\r\n            msg.sender,\r\n            _founders,\r\n            _avatarTokenAmount,\r\n            _foundersReputationAmount\r\n        );\r\n\r\n        nativeToken.addPauser(address(avatar));\r\n\r\n        lock = msg.sender;\r\n\r\n        emit NewOrg(address(avatar));\r\n        return (address(avatar));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AddFoundersGoodDollar\",\"name\":\"_addFoundersGoodDollar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"InitialSchemesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"NewOrg\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"contract FeeFormula\",\"name\":\"_formula\",\"type\":\"address\"},{\"internalType\":\"contract Identity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_founders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_avatarTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_foundersReputationAmount\",\"type\":\"uint256[]\"}],\"name\":\"forgeOrg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_schemes\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_params\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_permissions\",\"type\":\"bytes4[]\"},{\"internalType\":\"string\",\"name\":\"_metaData\",\"type\":\"string\"}],\"name\":\"setSchemes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaoCreatorGoodDollar","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009f75dacb77419b87f568d417ebc84346e134144e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f5905fcc31d8b08823053d0bbd9484107c9c60d5fae6ab56ec295c19cc7395ba"}]}