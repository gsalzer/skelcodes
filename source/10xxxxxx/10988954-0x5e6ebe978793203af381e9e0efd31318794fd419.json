{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ISparkleTimestamp.sol\r\n\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n// import \"../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @dev Sparkle Timestamp Contract\r\n * @author SparkleMobile Inc. (c) 2019-2020\r\n */\r\ninterface ISparkleTimestamp {\r\n\r\n  /**\r\n   * @dev Add new reward timestamp for address\r\n   * @param _rewardAddress being added to timestamp collection\r\n   */\r\n  function addTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Reset timestamp maturity for loyalty address\r\n   * @param _rewardAddress to have reward period reset\r\n   */\r\n  function resetTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Zero/delete existing loyalty timestamp entry\r\n   * @param _rewardAddress being requested for timestamp deletion\r\n   * @notice Test(s) not passed\r\n   */\r\n  function deleteTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Get address confirmation for loyalty address\r\n   * @param _rewardAddress being queried for address information\r\n   */\r\n  function getAddress(address _rewardAddress)\r\n  external\r\n  returns(address);\r\n\r\n  /**\r\n   * @dev Get timestamp of initial joined timestamp for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getJoinedTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Get timestamp of last deposit for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getDepositTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Get timestamp of reward maturity for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getRewardTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Determine if address specified has a timestamp record\r\n   * @param _rewardAddress being queried for timestamp existance\r\n   */\r\n  function hasTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Calculate time remaining in seconds until this address' reward matures\r\n   * @param _rewardAddress to query remaining time before reward matures\r\n   */\r\n  function getTimeRemaining(address _rewardAddress)\r\n  external\r\n  returns(uint256, bool, uint256);\r\n\r\n  /**\r\n   * @dev Determine if reward is mature for  address\r\n   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\r\n   */\r\n  function isRewardReady(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Change the stored loyalty controller contract address\r\n   * @param _newAddress of new loyalty controller contract address\r\n   */\r\n  function setContractAddress(address _newAddress)\r\n  external;\r\n\r\n  /**\r\n   * @dev Return the stored authorized controller address\r\n   * @return Address of loyalty controller contract\r\n   */\r\n  function getContractAddress()\r\n  external\r\n  returns(address);\r\n\r\n  /**\r\n   * @dev Change the stored loyalty time period\r\n   * @param _newTimePeriod of new reward period (in seconds)\r\n   */\r\n  function setTimePeriod(uint256 _newTimePeriod)\r\n  external;\r\n\r\n  /**\r\n   * @dev Return the current loyalty timer period\r\n   * @return Current stored value of loyalty time period\r\n   */\r\n  function getTimePeriod()\r\n  external\r\n  returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Event signal: Reset timestamp\r\n\t */\r\n  event ResetTimestamp(address _rewardAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty contract address waws changed\r\n\t */\r\n\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward time period was changed\r\n\t */\r\n\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was added\r\n\t */\r\n\tevent TimestampAdded( address indexed _newTimestampAddress );\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was removed\r\n\t */\r\n\tevent TimestampDeleted( address indexed _newTimestampAddress );\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp for address was reset\r\n   */\r\n  event TimestampReset(address _rewardAddress);\r\n\r\n}\r\n\r\n// File: contracts/SparkleTimestamp.sol\r\n\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Sparkle Timestamp Contract\r\n * @author SparkleMobile Inc. (c) 2019-2020\r\n */\r\ncontract SparkleTimestamp is ISparkleTimestamp, Ownable, Pausable, ReentrancyGuard {\r\n  /**\r\n   * @dev Ensure math safety through SafeMath\r\n   */\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * @dev Timestamp object for tacking block.timestamp ooc(out-of-contract)\r\n   * @param _address Address of the owner address of this record\r\n   * @param _joined block.timestamp of initial joining time\r\n   * @param _deposit block.timestamp of reward address' deposit (uint256)\r\n   * @param _reward block.timestamp + loyaltyTimePeriod precalculation (uint256)\r\n   */\r\n  struct Timestamp {\r\n    address _address;\r\n    uint256 _joined;\r\n    uint256 _deposit;\r\n    uint256 _reward;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal address for authorized loyalty contract\r\n   */\r\n  address private contractAddress;\r\n\r\n  /**\r\n   * @dev Internal time period of reward maturity for all address'\r\n   */\r\n  uint256 private timePeriod;\r\n\r\n  /**\r\n   * @dev Internal loyalty timestamp mapping to authorized calling loyalty contracts\r\n   */\r\n  mapping(address => mapping(address => Timestamp)) private g_timestamps;\r\n\r\n  /**\r\n   * @dev SparkleTimestamp contract .cTor\r\n   */\r\n  constructor()\r\n  public\r\n  Ownable()\r\n  Pausable()\r\n  ReentrancyGuard()\r\n  {\r\n    /// Initialize contract address to 0x0\r\n    contractAddress = address(0x0);\r\n    /// Initilize time period to 24 hours (86400 seconds)\r\n    timePeriod = 60 * 60 * 24;\r\n  }\r\n\r\n  /**\r\n   * @dev Add new reward timestamp for address\r\n   * @param _rewardAddress being added to timestamp collection\r\n   */\r\n  function addTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}a');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0x0), 'Invalid reward address');\r\n    /// Validate specified address does not have a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(0x0), 'Timestamp exists');\r\n    /// Initialize timestamp structure with loyalty users data\r\n    g_timestamps[msg.sender][_rewardAddress]._address = address(_rewardAddress);\r\n    g_timestamps[msg.sender][_rewardAddress]._deposit = block.timestamp;\r\n    g_timestamps[msg.sender][_rewardAddress]._joined = block.timestamp;\r\n    /// Calculate the time in the future reward will mature\r\n    g_timestamps[msg.sender][_rewardAddress]._reward = timePeriod.add(block.timestamp);\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit TimestampAdded(_rewardAddress);\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Reset timestamp maturity for loyalty address\r\n   * @param _rewardAddress to have reward period reset\r\n   */\r\n  function resetTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}b');\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0x0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'Invalid timestamp');\r\n    /// Re-initialize timestamp structure with updated time data\r\n    g_timestamps[msg.sender][_rewardAddress]._deposit = block.timestamp;\r\n    g_timestamps[msg.sender][_rewardAddress]._reward = uint256(block.timestamp).add(timePeriod);\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Zero/delete existing loyalty timestamp entry\r\n   * @param _rewardAddress being requested for timestamp deletion\r\n   * @notice Test(s) not passed\r\n   */\r\n  function deleteTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}c');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), \"Invalid reward address \");\r\n    /// Validate specified address has a timestamp\r\n    if(g_timestamps[msg.sender][_rewardAddress]._address != address(_rewardAddress)) {\r\n      emit TimestampDeleted( false );\r\n      return false;\r\n    }\r\n\r\n    // Zero out address as delete does nothing with structure elements\r\n    Timestamp storage ts = g_timestamps[msg.sender][_rewardAddress];\r\n    ts._address = address(0x0);\r\n    ts._deposit = 0;\r\n    ts._reward = 0;\r\n    /// Return success\r\n    emit TimestampDeleted( true );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Get address confirmation for loyalty address\r\n   * @param _rewardAddress being queried for address information\r\n   */\r\n  function getAddress(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(address)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}d');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp b');\r\n    /// Return address indicating success\r\n    return address(g_timestamps[msg.sender][_rewardAddress]._address);\r\n  }\r\n\r\n  /**\r\n   * @dev Get timestamp of initial joined timestamp for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getJoinedTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}e');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp c');\r\n    /// Return deposit timestamp indicating success\r\n    return g_timestamps[msg.sender][_rewardAddress]._joined;\r\n  }\r\n\r\n  /**\r\n   * @dev Get timestamp of last deposit for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getDepositTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}e');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp d');\r\n    /// Return deposit timestamp indicating success\r\n    return g_timestamps[msg.sender][_rewardAddress]._deposit;\r\n  }\r\n\r\n  /**\r\n   * @dev Get timestamp of reward maturity for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getRewardTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}f');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Return reward timestamp indicating success\r\n    return g_timestamps[msg.sender][_rewardAddress]._reward;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Determine if address specified has a timestamp record\r\n   * @param _rewardAddress being queried for timestamp existance\r\n   */\r\n  function hasTimestamp(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}g');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Determine if timestamp record matches reward address\r\n    // if(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress)) {\r\n    //   /// yes, then return success\r\n    //   return true;\r\n    // }\r\n    if(g_timestamps[msg.sender][_rewardAddress]._address != address(_rewardAddress))\r\n    {\r\n      emit TimestampHasTimestamp(false);\r\n      return false;\r\n    }\r\n\r\n    /// Return success\r\n    emit TimestampHasTimestamp(true);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate time remaining in seconds until this address' reward matures\r\n   * @param _rewardAddress to query remaining time before reward matures\r\n   */\r\n  function getTimeRemaining(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(uint256, bool, uint256)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}h');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp f');\r\n    /// Deterimine if reward address timestamp record has matured\r\n    if(g_timestamps[msg.sender][_rewardAddress]._reward > block.timestamp) {\r\n      /// No, then return indicating remaining time and false to indicate failure\r\n      // return (g_timestamps[msg.sender][_rewardAddress]._reward - block.timestamp, false, g_timestamps[msg.sender][_rewardAddress]._deposit);\r\n      return (g_timestamps[msg.sender][_rewardAddress]._reward - block.timestamp, false, g_timestamps[msg.sender][_rewardAddress]._joined);\r\n    }\r\n\r\n    /// Return indicating time since reward maturing and true to indicate success\r\n    // return (block.timestamp - g_timestamps[msg.sender][_rewardAddress]._reward, true, g_timestamps[msg.sender][_rewardAddress]._deposit);\r\n    return (block.timestamp - g_timestamps[msg.sender][_rewardAddress]._reward, true, g_timestamps[msg.sender][_rewardAddress]._joined);\r\n  }\r\n\r\n    /**\r\n   * @dev Determine if reward is mature for  address\r\n   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\r\n   */\r\n  function isRewardReady(address _rewardAddress)\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}i');\r\n    /// Validate caller is valid controller contract\r\n    require(msg.sender == address(contractAddress), 'Unauthorized {From}');\r\n    /// Validate specified address (_rewardAddress)\r\n    require(_rewardAddress != address(0), 'Invalid reward address');\r\n    /// Validate specified address has a timestamp\r\n    require(g_timestamps[msg.sender][_rewardAddress]._address == address(_rewardAddress), 'No timestamp g');\r\n    /// Deterimine if reward address timestamp record has matured\r\n    if(g_timestamps[msg.sender][_rewardAddress]._reward > block.timestamp) {\r\n      /// No, then return false to indicate failure\r\n      return false;\r\n    }\r\n\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Change the stored loyalty controller contract address\r\n   * @param _newAddress of new loyalty controller contract address\r\n   */\r\n  function setContractAddress(address _newAddress)\r\n  external\r\n  onlyOwner\r\n  nonReentrant\r\n  override\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}j');\r\n    /// Validate specified address (_newAddress)\r\n    require(_newAddress != address(0), 'Invalid contract address');\r\n    address currentAddress = contractAddress;\r\n    /// Set current address to new controller contract address\r\n    contractAddress = _newAddress;\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit ContractAddressChanged(currentAddress, _newAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Return the stored authorized controller address\r\n   * @return Address of loyalty controller contract\r\n   */\r\n  function getContractAddress()\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(address)\r\n  {\r\n    /// Return current controller contract address\r\n    return address(contractAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Change the stored loyalty time period\r\n   * @param _newTimePeriod of new reward period (in seconds)\r\n   */\r\n  function setTimePeriod(uint256 _newTimePeriod)\r\n  external\r\n  onlyOwner\r\n  nonReentrant\r\n  override\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}k');\r\n    /// Validate specified time period\r\n    require(_newTimePeriod >= 60 seconds, 'Time period < 60s');\r\n    uint256 currentTimePeriod = timePeriod;\r\n    timePeriod = _newTimePeriod;\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit TimePeriodChanged(currentTimePeriod, _newTimePeriod);\r\n  }\r\n\r\n  /**\r\n   * @dev Return the current loyalty timer period\r\n   * @return Current stored value of loyalty time period\r\n   */\r\n  function getTimePeriod()\r\n  external\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Return current time period\r\n    return timePeriod;\r\n  }\r\n\r\n\t/**\r\n\t * @dev Event signal: Reset timestamp\r\n\t */\r\n  event ResetTimestamp(address _rewardAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty contract address waws changed\r\n\t */\r\n\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward time period was changed\r\n\t */\r\n\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was added\r\n\t */\r\n\tevent TimestampAdded( address indexed _newTimestampAddress );\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was removed\r\n\t */\r\n\tevent TimestampDeleted( bool indexed _timestampDeleted );\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp for address was reset\r\n   */\r\n  event TimestampReset(address _rewardAddress);\r\n\r\n  /**\r\n   * @dev Event signal: Current hasTimestamp value\r\n   */\r\n  event TimestampHasTimestamp(bool _hasTimestamp);\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"ResetTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_previousTimePeriod\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newTimePeriod\",\"type\":\"uint256\"}],\"name\":\"TimePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newTimestampAddress\",\"type\":\"address\"}],\"name\":\"TimestampAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_timestampDeleted\",\"type\":\"bool\"}],\"name\":\"TimestampDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newTimestampAddress\",\"type\":\"address\"}],\"name\":\"TimestampDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_hasTimestamp\",\"type\":\"bool\"}],\"name\":\"TimestampHasTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"TimestampReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"addTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"deleteTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"getDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"getJoinedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"getRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"hasTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"isRewardReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"resetTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimePeriod\",\"type\":\"uint256\"}],\"name\":\"setTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SparkleTimestamp","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2e359e1f672c434d3bda31fce019018723ea48dbca39e800e5b43ecd89e44c2b"}]}