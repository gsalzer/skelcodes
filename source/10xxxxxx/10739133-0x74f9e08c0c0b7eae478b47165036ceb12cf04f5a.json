{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.11;\r\n\r\n//certo c063v200826 noima (c) all rights reserved 2020\r\n\r\n/// @title  A CertoProof Of  existence smartcontract\r\n/// @author Mauro G. Cordioli ezlab\r\n/// @notice Check the details at https://certo.legal/smartcontract/v63\r\ncontract ProofCertoChainContract {\r\n    int256 public constant Version = 0x6320082600;\r\n    address payable creator;\r\n    address payable owner;\r\n    mapping(bytes32 => uint256) private CertoLedgerTimestamp;\r\n    string public Description; //Contract Purpose\r\n\r\n    modifier onlyBy(address _account) {\r\n        require(msg.sender == _account, \"not allowed\");\r\n        _;\r\n    }\r\n\r\n    function setCreator(address payable _creator) public onlyBy(creator) {\r\n        creator = _creator;\r\n        emit EventSetCreator();\r\n    }\r\n\r\n    function setOwner(address payable _owner) public onlyBy(creator) {\r\n        owner = _owner;\r\n        emit EventSetOwner();\r\n    }\r\n\r\n    function setDescription(string memory _Description) public onlyBy(owner) {\r\n        Description = _Description;\r\n    }\r\n\r\n    constructor(string memory _Description) public {\r\n        creator = msg.sender;\r\n        owner = msg.sender;\r\n\r\n        Description = _Description;\r\n\r\n        emit EventReady();\r\n    }\r\n\r\n    /// @notice Notarize the hash emit block timestamp of the  block\r\n    /// @param hashproof The proof sha256 hash to timestamp\r\n    function NotarizeProofTimeStamp(bytes32 hashproof) public onlyBy(owner) {\r\n        uint256 ts = CertoLedgerTimestamp[hashproof];\r\n        if (ts == 0) {\r\n            ts = block.timestamp;\r\n            CertoLedgerTimestamp[hashproof] = ts;\r\n        }\r\n\r\n        emit EventProof(hashproof, ts);\r\n    }\r\n\r\n    /// @notice Notarize both hashes  emit  block timestamp  with logged note\r\n    /// @param hashproof The proof  sha256 hash to timestamp\r\n    /// @param hashmeta  The metadata sha256 hash to timestamp\r\n    /// @param note  The note to be logged on the blokchain\r\n    function NotarizeProofMetaNoteTimeStamp(\r\n        bytes32 hashproof,\r\n        bytes32 hashmeta,\r\n        string memory note\r\n    ) public onlyBy(owner) {\r\n        uint256 tsproof = CertoLedgerTimestamp[hashproof];\r\n        if (tsproof == 0) {\r\n            CertoLedgerTimestamp[hashproof] = tsproof;\r\n        }\r\n\r\n        uint256 tsmeta = CertoLedgerTimestamp[hashmeta];\r\n        if (tsmeta == 0) {\r\n            CertoLedgerTimestamp[hashmeta] = tsmeta;\r\n        }\r\n\r\n        emit EventProofMetaWithNote(hashproof, hashmeta, tsproof, tsmeta, note);\r\n    }\r\n\r\n    /// @notice Notarize both hashes and emit  block timestamps   \r\n    /// @param hashproof The proof sha256 hash to timestamp\r\n    /// @param hashmeta The metadata sha256 hash to timestamp\r\n    function NotarizeProofMetaTimeStamp(bytes32 hashproof, bytes32 hashmeta)\r\n        public\r\n        onlyBy(owner)\r\n    {\r\n        uint256 tsproof = CertoLedgerTimestamp[hashproof];\r\n        if (tsproof == 0) {\r\n            CertoLedgerTimestamp[hashproof] = tsproof;\r\n        }\r\n\r\n        uint256 tsmeta = CertoLedgerTimestamp[hashmeta];\r\n        if (tsmeta == 0) {\r\n            CertoLedgerTimestamp[hashmeta] = tsmeta;\r\n        }\r\n\r\n        emit EventProofMeta(hashproof, hashmeta, tsproof, tsmeta);\r\n    }\r\n\r\n    /// @notice Notarize the hash emit   block timestamp  with  logged note\r\n    /// @param hashproof The sha256 hash to timestamp\r\n    /// @param note  The note to be logged on the blokchain\r\n    function NotarizeProofTimeStampWithNote(\r\n        bytes32 hashproof,\r\n        string memory note\r\n    ) public onlyBy(owner) {\r\n        uint256 ts = CertoLedgerTimestamp[hashproof];\r\n        if (ts == 0) {\r\n            ts = block.timestamp;\r\n            CertoLedgerTimestamp[hashproof] = ts;\r\n        }\r\n        emit EventProofWithNote(hashproof, ts, note);\r\n    }\r\n\r\n    /// @notice check the hash  to verify the proof  emit  the block timestamp if ok  or zero if not.\r\n    /// @param hashproof The sha256 hash be checked\r\n    /// @return block timestamp if ok zero if not\r\n    function CheckProofTimeStampByHashReturnsNonZeroUnixEpochIFOk(\r\n        bytes32 hashproof\r\n    ) public view returns (uint256) {\r\n        return CertoLedgerTimestamp[hashproof];\r\n    }\r\n\r\n    event EventProofMetaWithNote(\r\n        bytes32 hashproof,\r\n        bytes32 hashmeta,\r\n        uint256 tsproof,\r\n        uint256 tsmeta,\r\n        string note\r\n    ); // trace a note in the logs\r\n    event EventProofMeta(\r\n        bytes32 hashproof,\r\n        bytes32 hashmeta,\r\n        uint256 tsproof,\r\n        uint256 tsmeta\r\n    );\r\n    event EventProofWithNote(bytes32 hashproof, uint256 ts, string note); // trace a note in the logs\r\n    event EventProof(bytes32 hashproof, uint256 ts);\r\n    event EventSetOwner(); //invoked when creator changes owner\r\n    event EventSetCreator(); //invoked when creator changes creator\r\n    event EventReady(); //invoked when we have done the method action\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"EventProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashmeta\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsproof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsmeta\",\"type\":\"uint256\"}],\"name\":\"EventProofMeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashmeta\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsproof\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsmeta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"EventProofMetaWithNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"EventProofWithNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventSetCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventSetOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"}],\"name\":\"CheckProofTimeStampByHashReturnsNonZeroUnixEpochIFOk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hashmeta\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"NotarizeProofMetaNoteTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hashmeta\",\"type\":\"bytes32\"}],\"name\":\"NotarizeProofMetaTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"}],\"name\":\"NotarizeProofTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashproof\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"NotarizeProofTimeStampWithNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Version\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProofCertoChainContract","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b657a6c616220636572746f000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b9b9a36532bcbdc146cc4ebdcb461a96ec1d83ec9d1bfa4ec59aeaceec0efdc"}]}