{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.11;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n//certo v20050101007c060 noima (c) all rights reserved 2020\r\n//stripped down version\r\ncontract UltraBaseCertoChainContract {\r\n  \r\n    address payable owner;\r\n\r\n    bool public isSealed;\r\n\r\n    constructor() public {\r\n       \r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyBy(address _account) {\r\n        require(msg.sender == _account, \"not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfNotSealed() //semantic when sealed is not possible to change sensible data\r\n    {\r\n        if (isSealed) revert(\"sealed\");\r\n        _;\r\n    }\r\n\r\n    function kill() public onlyBy(owner) {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n     \r\n\r\n    function setOwner(address payable _owner) public onlyBy(owner) {\r\n        owner = _owner;\r\n        //emit EventReady(address(this), \"SetOwner\");\r\n    }\r\n\r\n    function setSealed() public onlyBy(owner) {\r\n        isSealed = true;\r\n        emit EventSealed(address(this));\r\n    } //seal down contract not reversible\r\n\r\n    event EventSealed(address self); //invoked when contract is sealed\r\n    event EventSetOwner(address self); //invoked when we change owner\r\n    event EventReady(address self, string method); //invoked when we have done the method action\r\n}\r\n\r\n\r\ncontract DocumentCertoChainContract is UltraBaseCertoChainContract {\r\n    //string  public  Description ; //Description the description is in the trasaction log\r\n\r\n    bytes32 public FileHash; //SecuritySeal HASH\r\n    bytes32 public DescriptionHash; //SecuritySeal HASH\r\n    int256 public FileData; //SecuritySeal DATA format AAMMDD\r\n\r\n    \r\n\r\n    constructor(\r\n        string memory _Description,\r\n        bytes32 _DescriptionHash,\r\n        bytes32 _FileHash,\r\n        int256 _FileData\r\n    ) public {\r\n       \r\n        //Description=_Description; the description is in the trasaction log\r\n\r\n        FileHash = _FileHash;\r\n        DescriptionHash = _DescriptionHash;\r\n        FileData = _FileData;\r\n\r\n        emit EventNote(address(this), _Description);\r\n        emit EventReady(address(this), \"constructor\");\r\n    }\r\n\r\n     \r\n    \r\n    event EventNote(address self, string note); // trace a note in the logs\r\n}\r\n\r\n\r\ncontract TagCertoChainContract is UltraBaseCertoChainContract {\r\n    bool public isActive;\r\n\r\n    function constructorx(address payable _owner) public {\r\n        owner = (_owner);\r\n        emit EventReady(address(this), \"constructor\");\r\n    }\r\n\r\n    constructor(\r\n        address payable _owner,\r\n        bytes32 signaturehash,\r\n        bytes32 signaturemaskR,\r\n        bytes32 signaturemaskS,\r\n        uint8 signaturemaskV\r\n    ) public {\r\n        owner = (_owner);\r\n        SignatureMaskR = signaturemaskR;\r\n        SignatureMaskS = signaturemaskS;\r\n        SignatureMaskV = signaturemaskV;\r\n        SignatureHash = signaturehash;\r\n        emit EventReady(address(this), \"constructor\");\r\n    }\r\n\r\n    function ActivateTag(address Target) public onlyBy(owner) {\r\n        TargetDocument = Target;\r\n        emit EventReady(address(this), \"ActivateTag\");\r\n    }\r\n\r\n    function SignTag(\r\n        bytes32 signaturehash,\r\n        bytes32 signaturemaskR,\r\n        bytes32 signaturemaskS,\r\n        uint8 signaturemaskV\r\n    ) public onlyBy(owner) {\r\n        SignatureMaskR = signaturemaskR;\r\n        SignatureMaskS = signaturemaskS;\r\n        SignatureMaskV = signaturemaskV;\r\n        SignatureHash = signaturehash;\r\n        emit EventReady(address(this), \"SignTag\");\r\n    }\r\n\r\n    function VerifyTag(bytes8 signaturepinS)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        bytes32 signatureR;\r\n        bytes32 signatureS;\r\n        bytes32 signatureSpad;\r\n        signatureSpad = signaturepinS;\r\n        signatureR = SignatureMaskR;\r\n        signatureS = SignatureMaskS | (signatureSpad);\r\n        //emit EventReady(address(this),\"VerifyTag\");\r\n        if (\r\n            ecrecover(SignatureHash, SignatureMaskV, signatureR, signatureS) ==\r\n            owner\r\n        ) {\r\n            return \"OK IS TAG VALID\";\r\n        } else {\r\n            return \"NOT A VALID TAG\";\r\n        }\r\n\r\n        // return signatureS;\r\n    }\r\n\r\n    function RecoverSigner(\r\n        bytes32 msgHash,\r\n        bytes32 signaturepinR,\r\n        bytes32 signaturepinS\r\n    ) public view returns (address) {\r\n        bytes32 signatureR;\r\n        bytes32 signatureS;\r\n        signatureR = SignatureMaskR | signaturepinR;\r\n        signatureS = SignatureMaskS | signaturepinS;\r\n\r\n        return ecrecover(msgHash, SignatureMaskV, signatureR, signatureS);\r\n    }\r\n\r\n    address public TargetDocument;\r\n    bytes32 public SignatureMaskR;\r\n    bytes32 public SignatureMaskS;\r\n    uint8 public SignatureMaskV;\r\n\r\n    bytes32 public SignatureHash;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Description\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_DescriptionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_FileHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_FileData\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"EventNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"EventReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"EventSealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"EventSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DescriptionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FileData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FileHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DocumentCertoChainContract","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008069befecc4474e8cc0887aea8bb6d671eb31d5276f6a64ffed1dddaed731976e33b2af587ceefaf6dfa956ceff3368d8c948975f6933db31b9b42c3e759025ec80000000000000000000000000000000000000000000000000000002f0890827c000000000000000000000000000000000000000000000000000000000000009450524f4345445552452045205445434e4943484520444920504f534120494e204f504552410a4445474c4920494d5049414e544920434f4e2055534f2044492053495354454d490a464f544f564f4c5441494349204520464f544f5445524d4f454c45545452494349202d20636f6469636520636f72736f203230323030323833202d20303231202d2032322f30362f32303230000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aaa5a3e10ae12e72e270b2910c9e0ebb5d13b1724a90bf91c06a485441db96c7"}]}