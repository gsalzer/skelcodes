{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// ECDSA operations for signature\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n/* Removed because of contract already deployed */\r\n// import \"@openzeppelin/upgrades/contracts/Initializable.sol\";\r\n\r\ncontract SignatureHelper {\r\n\r\n    // ** CONSTANTS **\r\n\r\n    // EIP191 header for EIP712 prefix\r\n    bytes2 constant internal EIP191_HEADER = 0x1901;\r\n\r\n    // EIP712 Domain Name value\r\n    string constant internal EIP712_DOMAIN_NAME = \"DF.Help\";\r\n\r\n    // EIP712 Domain Version value\r\n    string constant internal EIP712_DOMAIN_VERSION = \"1.0\";\r\n\r\n    // Hash of the EIP712 Domain Separator Schema\r\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"EIP712Domain(\",\r\n        \"string name,\",\r\n        \"string version,\",\r\n        \"uint256 chainId,\",\r\n        \"address verifyingContract\",\r\n        \")\"\r\n    ));\r\n}\r\n\r\ncontract OpenSignatureLogic is SignatureHelper {\r\n\r\n    // ** CONSTANTS **\r\n\r\n    // Hash of the EIP712 DealUsdSignature struct\r\n    bytes32 constant internal EIP712_DEAL_STRUCT_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"DealUsdSignature(\",\r\n        \"uint256 coefficient,\",\r\n        \"uint256 profitPercent,\",\r\n        \"uint256 valueUsdc,\",\r\n        \"uint256 minEntryEthPrice,\",\r\n        \"uint256 maxEntryEthPrice,\",\r\n        \"uint256 expireTime,\",\r\n        \"uint256 signNonce,\",\r\n        \")\"\r\n    ));\r\n\r\n    // Hash of the EIP712 Domain Separator data\r\n    bytes32 constant public EIP712_DOMAIN_HASH = keccak256(abi.encode(\r\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n        1,\r\n        address(0xBA3EEeb0cf1584eE565F34fCaBa74d3e73268c0b)  // TODO: set deployed contract\r\n    ));\r\n\r\n    /* Removed because of contract already deployed */\r\n    // // ** Immutable Storage **\r\n\r\n    // // Hash of the EIP712 Domain Separator data\r\n    // bytes32 public EIP712_DOMAIN_HASH;\r\n\r\n    // // ** INITIALIZER – Constructor for Upgradable contracts **\r\n\r\n    // function initialize() public initializer {\r\n    //     EIP712_DOMAIN_HASH = keccak256(abi.encode(\r\n    //         EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n    //         keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n    //         keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n    //         1,\r\n    //         address(this)\r\n    //     ));\r\n    // }\r\n\r\n    // Returns the EIP712 hash of a deal\r\n    function _getDealHash(\r\n        uint[7] memory _params\r\n    )\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        // compute the overall signed struct hash\r\n        bytes32 structHash = keccak256(abi.encodePacked(\r\n            EIP712_DEAL_STRUCT_SCHEMA_HASH,\r\n            _params[0],  // coefficient\r\n            _params[1],  // profitPercent\r\n            _params[2],  // valueUsdc\r\n            _params[3],  // minEntryEthPrice\r\n            _params[4],  // maxEntryEthPrice\r\n            _params[5],  // expireTime\r\n            _params[6]   // signNonce\r\n        ));\r\n\r\n        // compute eip712 compliant hash\r\n        return keccak256(abi.encodePacked(\r\n            EIP191_HEADER,\r\n            EIP712_DOMAIN_HASH,\r\n            structHash\r\n        ));\r\n    }\r\n}\r\n\r\n// import \"../openzeppelin/upgrades/contracts/Initializable.sol\";\r\n\r\n// import \"../openzeppelin/upgrades/contracts/Initializable.sol\";\r\n\r\ncontract OwnableUpgradable is Initializable {\r\n    address payable public owner;\r\n    address payable internal newOwnerCandidate;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        _;\r\n    }\r\n\r\n    // ** INITIALIZERS – Constructors for Upgradable contracts **\r\n\r\n    function initialize() public initializer {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function initialize(address payable newOwner) public initializer {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeOwner(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate, \"Permission denied\");\r\n        owner = newOwnerCandidate;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n// import \"./SafeMath.sol\";\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint value) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IToken token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IToken token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IToken token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IToken;\r\n\r\n    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\r\n    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(IToken token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\ncontract FundsMgrUpgradable is Initializable, OwnableUpgradable {\r\n    using UniversalERC20 for IToken;\r\n\r\n    // Initializer – Constructor for Upgradable contracts\r\n    function initialize() public initializer {\r\n        OwnableUpgradable.initialize();  // Initialize Parent Contract\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0x0)) {\r\n            owner.transfer(amount);\r\n        } else {\r\n            IToken(token).universalTransfer(owner, amount);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(address[] memory tokens) public onlyOwner {\r\n        for(uint256 i = 0; i < tokens.length;i++) {\r\n            withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ninterface IGST2 {\r\n\tfunction freeUpTo(uint256 value) external returns(uint256 freed);\r\n\tfunction freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract GasTokenSpender {\r\n\r\n    address public constant GAS_TOKEN = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n\r\n    // ** PUBLIC VIEW functions **\r\n\r\n    function gasTokenBalance() public view returns(uint256 amount) {\r\n        amount = IGST2(GAS_TOKEN).balanceOf(address(this));\r\n    }\r\n\r\n    // ** INTERNAL functions **\r\n\r\n    function _burnGasToken(uint256 gasSpent) internal returns(bool) {\r\n        uint maxTokens = gasTokenBalance();\r\n        if (maxTokens == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint tokensToBurn = (gasSpent + 14154) / 41130;\r\n        if (tokensToBurn > maxTokens) {\r\n            tokensToBurn = maxTokens;\r\n        }\r\n\r\n        IGST2(GAS_TOKEN).freeUpTo(tokensToBurn);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\r\n        z = add(mul(x, y), base / 2) / base;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }*/\r\n}\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant CUSDC_ADDRESS = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n}\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddresses is ConstantAddressesMainnet {}\r\n\r\n// **INTERFACES**\r\n\r\ninterface IDfWalletFactory {\r\n    function createDfWallet() external returns (address dfWallet);\r\n}\r\n\r\ninterface ICompoundOracle {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ninterface IComptroller {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n\r\n    function markets(address cTokenAddress) external view returns (bool, uint);\r\n}\r\n\r\ninterface IDfWallet {\r\n\r\n    function setDfFinanceClose(address _dfFinanceClose) external;\r\n\r\n    function deposit(\r\n        address _tokenIn, address _cTokenIn, uint _amountIn, address _tokenOut, address _cTokenOut, uint _amountOut\r\n    ) external payable;\r\n\r\n    function withdraw(\r\n        address _tokenIn, address _cTokenIn, address _tokenOut, address _cTokenOut\r\n    ) external payable;\r\n\r\n}\r\n\r\ninterface IDfProxyBetCompound {\r\n    function insure(address beneficiary, address wallet, uint256 amountUsd) external;\r\n}\r\n\r\ninterface IDfFinanceClose {\r\n\r\n    // setup with Compound Oracle eth price\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint8 _profitPercent, uint8 _fee\r\n    ) external;\r\n\r\n    // setup with special eth price\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint256 _priceEth, uint8 _profitPercent, uint8 _fee\r\n    ) external;\r\n\r\n    // setup with special eth price and current extraCoef – for strategy migration\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint256 _priceEth, uint8 _profitPercent, uint8 _fee, uint256 _extraCoef\r\n    ) external;\r\n\r\n    function getStrategy(\r\n        address _dfWallet\r\n    ) external view\r\n    returns(\r\n        address strategyOwner,\r\n        uint deposit,\r\n        uint extraCoef,\r\n        uint entryEthPrice,\r\n        uint profitPercent,\r\n        uint fee,\r\n        uint ethForRedeem,\r\n        uint usdToWithdraw,\r\n        bool onlyProfitInUsd);\r\n\r\n    function migrateStrategies(address[] calldata _dfWallets) external;\r\n\r\n    function collectAndCloseByUser(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bool _onlyProfitInUsd,\r\n        bytes calldata _exData\r\n    ) external payable;\r\n\r\n    function exitAfterLiquidation(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bytes calldata _exData\r\n    ) external payable;\r\n\r\n    function depositEth(address _dfWallet) external payable;\r\n\r\n}\r\n\r\ninterface ICToken {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\ninterface ILoanPool {\r\n    function loan(uint _amount) external;\r\n}\r\n\r\ninterface IProxyOneInchExchange {\r\n    function exchange(IToken fromToken, uint256 amountFromToken, bytes calldata _data) external;\r\n}\r\n\r\ninterface IAffiliateProgram {\r\n\r\n    function getProfitPercentByReferral(address referral) external view returns (uint8);\r\n\r\n    function addReferral(address referral, bytes32 code, uint256 ethValue) external;\r\n    function distributeProfitByReferral(address referral) external payable;\r\n\r\n/*\r\n    function getPartnerByReferral(address referral) external view returns (address, uint8, uint256, uint256, uint256);\r\n    function levels(uint8 level) external view returns (uint16, uint256);\r\n*/\r\n\r\n    // Old functions for Maker Sai ver.\r\n    function addUserUseCode(address user, string calldata code) external;\r\n    function getPartnerFromUser(address user) external view returns (address, uint8, uint256, uint256);\r\n    function levels(uint8 level) external view returns (uint16, uint256);\r\n    function addPartnerProfitUseAddress(address partner) external payable;\r\n\r\n}\r\n\r\ncontract DfFinanceOpenCompound is\r\n    Initializable,\r\n    DSMath,\r\n    ConstantAddresses,\r\n    OpenSignatureLogic,\r\n    GasTokenSpender,\r\n    FundsMgrUpgradable\r\n{\r\n    using ECDSA for bytes32;\r\n\r\n    // Fees\r\n    uint256 public inFee;\r\n    uint256 public currentFeeForBonusEther;\r\n\r\n    // Insurance\r\n    IDfProxyBetCompound public proxyInsuranceBet;\r\n    uint256 public insuranceCoef;  // in percent\r\n\r\n    ILoanPool public loanPool;\r\n\r\n    IDfWalletFactory public dfWalletFactory;\r\n    IDfFinanceClose public dfFinanceClose;\r\n\r\n    IAffiliateProgram public aff;\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    // canceled or used signs\r\n    mapping(address => mapping(uint256 => bool)) public signedNonces;\r\n\r\n    // ** EVENTS **\r\n\r\n    event AfterExchangeRefund(address indexed user, uint ethToRefund, uint usdToRefund);\r\n\r\n    // ** MODIFIERS **\r\n\r\n    modifier useGasToken {\r\n        uint gasProvided = gasleft();\r\n        _;\r\n        _burnGasToken(sub(gasProvided, gasleft()));\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin {\r\n        require(admins[msg.sender] || msg.sender == owner, \"Permission denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyVerified(\r\n        address _walletOwner,\r\n        bytes memory _signature,    // signature is v, r, s for ECDSA\r\n        uint[9] memory _params      // coef [0], profitPercent [1], valueUsdc [2],\r\n                                    // entryEthPrice [3], minEntryEthPrice [4], maxEntryEthPrice [5],\r\n                                    // expireTime [6], signNonce [7], ethType[8]\r\n    ) {\r\n        // check signature\r\n        require(\r\n            isDealUsdVerified(\r\n                /* walletOwner, signature,\r\n                coef, profitPercent, valueUsdc, entryEthPrice, minEntryEthPrice, maxEntryEthPrice, expireTime, signNonce */\r\n                _walletOwner, _signature,\r\n                [_params[0], _params[1], _params[2], _params[3], _params[4], _params[5], _params[6], _params[7]]\r\n            ), \"This deal with USD is not verified\"\r\n        );\r\n\r\n        // signNonce for address is used\r\n        signedNonces[_walletOwner][_params[7]] = true;\r\n        _;\r\n    }\r\n\r\n    // ** INITIALIZER – Constructor for Upgradable contracts **\r\n\r\n    function initialize() public initializer {\r\n        FundsMgrUpgradable.initialize();  // Initialize Parent Contract\r\n\r\n        inFee = 0;\r\n        currentFeeForBonusEther = 30;\r\n\r\n        loanPool = ILoanPool(0x9EdAe6aAb4B0f0f8146051ab353593209982d6B6);\r\n        proxyInsuranceBet = IDfProxyBetCompound(0);\r\n        insuranceCoef = 0;\r\n    }\r\n\r\n    // **PUBLIC VIEW functions**\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 100 wei from the exact amount\r\n    function getMaxBorrow(address _cBorrowToken, address _wallet) public view returns (uint) {\r\n        (, uint liquidityInEth, ) = IComptroller(COMPTROLLER).getAccountLiquidity(_wallet);\r\n\r\n        if (_cBorrowToken == CETH_ADDRESS) {\r\n            return liquidityInEth;\r\n        }\r\n\r\n        uint ethPrice = ICompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(_cBorrowToken);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        return sub(liquidityInToken, 100); // cut off 100 wei to handle rounding issues\r\n    }\r\n\r\n    function getBorrowUsdcBalance(address _dfWallet) public view returns(uint amount) {\r\n        amount = ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet);\r\n    }\r\n\r\n    function isDealUsdVerified(\r\n        address _addr,\r\n        bytes memory _signature,    // signature is v, r, s for ECDSA\r\n        uint[8] memory _params      // coef [0], profitPercent [1], valueUsdc [2],\r\n                                    // entryEthPrice [3], minEntryEthPrice [4], maxEntryEthPrice [5],\r\n                                    // expireTime [6], signNonce [7]\r\n    ) public view returns(bool) {\r\n        require(_params[4] <= _params[5], \"minEntryEthPrice must be less than or equal to maxEntryEthPrice\");\r\n\r\n        // sign is expired, used or canceled\r\n        if (now > _params[6] ||\r\n            signedNonces[_addr][_params[7]]) {\r\n            return false;\r\n        }\r\n\r\n        // entryEthPrice is too high or low\r\n        if (_params[3] < _params[4] || _params[3] > _params[5]) {\r\n            return false;\r\n        }\r\n\r\n        // This recreates the message hash that was signed on the client\r\n        bytes32 hash = _getDealHash(\r\n            /* coef, profitPercent, valueUsdc, minEntryEthPrice, maxEntryEthPrice, expireTime, signNonce */\r\n            [_params[0], _params[1], _params[2], _params[4], _params[5], _params[6], _params[7]]\r\n        );\r\n\r\n        // Verify that the message's signer is the _addr\r\n        return (\r\n            _addr == hash.recover(_signature)\r\n        );\r\n    }\r\n\r\n    // **PUBLIC functions**\r\n\r\n    // with GasToken usage\r\n    function deal(\r\n        address _walletOwner,\r\n        uint _coef,\r\n        uint _profitPercent,\r\n        bytes memory _data,\r\n        uint _usdcToBuyEth,\r\n        uint _ethType\r\n    ) public payable\r\n        useGasToken\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n        dfWallet = dealInternal(_walletOwner == address(0) ? msg.sender : _walletOwner,\r\n                                    _profitPercent, _coef, msg.value, _data, _usdcToBuyEth, _ethType);\r\n    }\r\n\r\n    // with GasToken usage\r\n    function dealWithPromo(\r\n        address _walletOwner,\r\n        uint _coef,\r\n        uint _profitPercent,\r\n        bytes memory _data,\r\n        uint _usdcToBuyEth,\r\n        uint _ethType,\r\n        bytes32 _promoCode\r\n    ) public payable\r\n        useGasToken\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n        uint valueEth = msg.value;\r\n\r\n        // open strategy in ETH logic\r\n        dfWallet = dealInternal(_walletOwner == address(0) ? msg.sender : _walletOwner,\r\n                                    _profitPercent, _coef, valueEth, _data, _usdcToBuyEth, _ethType);\r\n\r\n        // add Referral to Referrer\r\n        aff.addReferral(_walletOwner, _promoCode, valueEth);\r\n    }\r\n\r\n    // with GasToken usage\r\n    function dealUsd(\r\n        address _walletOwner,\r\n        uint _coef,\r\n        uint _profitPercent,\r\n        uint _valueUsdc,\r\n        uint _entryEthPrice,\r\n        uint _ethType,\r\n        bytes memory _exData  // data for 1inch exchange\r\n    ) public payable\r\n        useGasToken\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n        dfWallet = dealUsdInternal(\r\n            _walletOwner, _profitPercent, _coef, _valueUsdc, _entryEthPrice, _exData, _ethType\r\n        );\r\n    }\r\n\r\n    // with GasToken usage\r\n    function dealUsdPromo(\r\n        address _walletOwner,\r\n        uint _coef,\r\n        uint _profitPercent,\r\n        uint _valueUsdc,\r\n        uint _entryEthPrice,\r\n        uint _ethType,\r\n        bytes memory _exData, // data for 1inch exchange\r\n        bytes32 _promoCode\r\n    ) public payable\r\n        useGasToken\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n\r\n        dfWallet = dealUsdInternal(\r\n            _walletOwner, _profitPercent, _coef, _valueUsdc, _entryEthPrice, _exData, _ethType\r\n        );\r\n\r\n        uint valueEth = wdiv(_valueUsdc * 1e12, _entryEthPrice);  // valueUsdc in eth\r\n\r\n        // add Referral to Referrer\r\n        aff.addReferral(_walletOwner, _promoCode, valueEth);\r\n\r\n    }\r\n\r\n    function cancelSign(uint _signNonce) public returns(bool) {\r\n        signedNonces[msg.sender][_signNonce] = true;\r\n        return true;\r\n    }\r\n\r\n    // ** ONLY_OWNER_OR_ADMIN DEAL WITH USER'S SIGN functions **\r\n\r\n    // with GasToken usage\r\n    function dealUsdWithSign(\r\n        address _walletOwner,\r\n        bytes memory _signature,    // signature is v, r, s for ECDSA\r\n        uint[9] memory _params,     // coef [0], profitPercent [1], valueUsdc [2],\r\n                                    // entryEthPrice [3], minEntryEthPrice [4], maxEntryEthPrice [5],\r\n                                    // expireTime [6], signNonce [7], ethType[8]\r\n        bytes memory _exData        // data for 1inch exchange\r\n    ) public payable\r\n        useGasToken\r\n        onlyOwnerOrAdmin\r\n        onlyVerified(_walletOwner, _signature, _params)\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n        dfWallet = dealUsdInternal(\r\n            /* _walletOwner, _profitPercent, _coef, _valueUsdc, _entryEthPrice, _exData, _ethType */\r\n            _walletOwner, _params[1], _params[0], _params[2], _params[3], _exData, _params[8]\r\n        );\r\n    }\r\n\r\n    // with GasToken usage\r\n    function dealUsdPromoWithSign(\r\n        address _walletOwner,\r\n        bytes memory _signature,    // signature is v, r, s for ECDSA\r\n        uint[9] memory _params,     // coef [0], profitPercent [1], valueUsdc [2],\r\n                                    // entryEthPrice [3], minEntryEthPrice [4], maxEntryEthPrice [5],\r\n                                    // expireTime [6], signNonce [7], ethType[8]\r\n        bytes memory _exData,       // data for 1inch exchange,\r\n        bytes32 _promoCode\r\n    ) public payable\r\n        useGasToken\r\n        onlyOwnerOrAdmin\r\n        onlyVerified(_walletOwner, _signature, _params)\r\n    returns(\r\n        address dfWallet\r\n    ) {\r\n\r\n        // open strategy in USDC logic\r\n        dfWallet = dealUsdInternal(\r\n            /* _walletOwner, _profitPercent, _coef, _valueUsdc, _entryEthPrice, _exData, _ethType */\r\n            _walletOwner, _params[1], _params[0], _params[2], _params[3], _exData, _params[8]\r\n        );\r\n\r\n        /* _valueUsdc, _entryEthPrice */\r\n        uint valueEth = wdiv(_params[2] * 1e12, _params[3]);  // valueUsdc in eth\r\n\r\n        // add Referral to Referrer\r\n        aff.addReferral(_walletOwner, _promoCode, valueEth);\r\n    }\r\n\r\n    // **ONLY_OWNER functions**\r\n\r\n    function setAdminPermission(address _admin, bool _status) public onlyOwner {\r\n        admins[_admin] = _status;\r\n    }\r\n\r\n    function setAdminPermission(address[] memory _admins, bool _status) public onlyOwner {\r\n        for (uint i = 0; i < _admins.length; i++) {\r\n            admins[_admins[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function setLoanPool(address _loanAddr) public onlyOwner {\r\n        require(_loanAddr != address(0), \"Address must not be zero\");\r\n        loanPool = ILoanPool(_loanAddr);\r\n    }\r\n\r\n    function setDfWalletFactory(address _dfWalletFactory) public onlyOwner {\r\n        require(_dfWalletFactory != address(0), \"Address must not be zero\");\r\n        dfWalletFactory = IDfWalletFactory(_dfWalletFactory);\r\n    }\r\n\r\n    function setDfFinanceClose(address _dfFinanceClose) public onlyOwner {\r\n        require(_dfFinanceClose != address(0), \"Address must not be zero\");\r\n        dfFinanceClose = IDfFinanceClose(_dfFinanceClose);\r\n    }\r\n\r\n    function setDfProxyBetAddress(IDfProxyBetCompound _proxyBet, uint256 _insuranceCoef) public onlyOwner {\r\n        require(address(_proxyBet) != address(0) && _insuranceCoef > 0 ||\r\n                address(_proxyBet) == address(0) && _insuranceCoef == 0, \"Incorrect proxy address or insurance coefficient\");\r\n\r\n        proxyInsuranceBet = _proxyBet;\r\n        insuranceCoef = _insuranceCoef;  // in percent (5 == 5%)\r\n\r\n        // all USDC of this contract approved to BetEthUsdcPrice Contract\r\n        IToken(USDC_ADDRESS).approve(address(_proxyBet), uint(-1));\r\n    }\r\n\r\n    function setFees(uint _inFee, uint _currentFeeForBonusEther) public onlyOwner {\r\n        require(_inFee <= 5 && _currentFeeForBonusEther < 100, \"Invalid fees\");\r\n        inFee = _inFee;\r\n        currentFeeForBonusEther = _currentFeeForBonusEther;\r\n    }\r\n\r\n    function setAffProgram(address _aff) public onlyOwner {\r\n        aff = IAffiliateProgram(_aff);\r\n    }\r\n\r\n    // **INTERNAL functions**\r\n\r\n    function dealInternal(\r\n        address _walletOwner,\r\n        uint _profitPercent,\r\n        uint _coef,\r\n        uint _valueEth,\r\n        bytes memory _data,\r\n        uint _usdcToBuyEth,\r\n        uint _ethType\r\n    ) internal returns(address dfWallet) {\r\n        require(_coef >= 150 && _coef <= 300, \"Invalid coefficient\");\r\n\r\n        uint extraEth = _valueEth * (_coef - 100) / 100;\r\n\r\n        // take an extra eth loan\r\n        loanPool.loan(extraEth);\r\n\r\n        // create dfWallet, deposit ETH and borrow USDC\r\n        uint usdcForExtract = _usdcToBuyEth * (100 + inFee + insuranceCoef) / 100;\r\n        dfWallet = depositInternal(add(_valueEth, extraEth), usdcForExtract);\r\n\r\n        // call DfProxyBet contract (and transferFrom USDC)\r\n        if (address(proxyInsuranceBet) != address(0)) {\r\n            proxyInsuranceBet.insure(_walletOwner, dfWallet, _usdcToBuyEth * insuranceCoef / 100);\r\n        }\r\n\r\n        exchangeInternal(\r\n            IToken(USDC_ADDRESS),\r\n            _usdcToBuyEth,\r\n            _ethType == 0 ? IToken(WETH_ADDRESS) : IToken(ETH_ADDRESS),\r\n            extraEth,\r\n            _data\r\n        );\r\n\r\n        if (_ethType == 0) {\r\n            IToken(WETH_ADDRESS).withdraw(IToken(WETH_ADDRESS).balanceOf(address(this)));\r\n        }\r\n\r\n        // Setup strategy with entry eth price for extra eth\r\n        dfFinanceClose.setupStrategy(\r\n            _walletOwner, dfWallet, _valueEth, wdiv(_usdcToBuyEth * 1e12, extraEth), uint8(_profitPercent), uint8(currentFeeForBonusEther)\r\n        );\r\n\r\n        // return an eth loan to LoanPool contract and short change to strategy owner (rest eth and USDC)\r\n        paybackLoanInternal(_walletOwner, extraEth);\r\n    }\r\n\r\n    function dealUsdInternal(\r\n        address _walletOwner,\r\n        uint _profitPercent,\r\n        uint _coef,\r\n        uint _valueUsdc,\r\n        uint _entryEthPrice,\r\n        bytes memory _data,\r\n        uint _ethType\r\n    ) internal returns(address dfWallet) {\r\n        require(_walletOwner != address(0), \"Address must not be zero\");\r\n        require(_coef >= 150 && _coef <= 300, \"Invalid coefficient\");\r\n\r\n        // transfer _valueUsdc USDC from _walletOwner to this contract\r\n        IToken(USDC_ADDRESS).universalTransferFrom(_walletOwner, address(this), _valueUsdc);\r\n\r\n        uint extraUsdc = _valueUsdc * (_coef - 100) / 100;\r\n        uint totalUsdcForLoanEth = add(_valueUsdc, extraUsdc);\r\n\r\n        // take an eth loan\r\n        uint totalLoanEth = wdiv(totalUsdcForLoanEth * 1e12, _entryEthPrice);\r\n        loanPool.loan(totalLoanEth);\r\n\r\n        // create dfWallet, deposit ETH and borrow USDC\r\n        // uint usdcForExtract = extraUsdc * (100 + inFee + insuranceCoef) / 100;\r\n        dfWallet = depositInternal(totalLoanEth, extraUsdc * (100 + inFee + insuranceCoef) / 100);\r\n\r\n        // call DfProxyBet contract (and transferFrom USDC)\r\n        if (address(proxyInsuranceBet) != address(0)) {\r\n            proxyInsuranceBet.insure(_walletOwner, dfWallet, extraUsdc * insuranceCoef / 100);\r\n        }\r\n\r\n        exchangeInternal(\r\n            IToken(USDC_ADDRESS),\r\n            totalUsdcForLoanEth,\r\n            _ethType == 0 ? IToken(WETH_ADDRESS) : IToken(ETH_ADDRESS),\r\n            totalLoanEth,\r\n            _data\r\n        );\r\n\r\n        if (_ethType == 0) {\r\n            IToken(WETH_ADDRESS).withdraw(IToken(WETH_ADDRESS).balanceOf(address(this)));\r\n        }\r\n\r\n        // Setup strategy with entry eth price and value in ETH\r\n        // uint valueEth = wdiv(_valueUsdc * 1e12, _entryEthPrice);\r\n        dfFinanceClose.setupStrategy(\r\n            _walletOwner, dfWallet, wdiv(_valueUsdc * 1e12, _entryEthPrice), _entryEthPrice, uint8(_profitPercent), uint8(currentFeeForBonusEther)\r\n        );\r\n\r\n        // return an eth loan to LoanPool contract and short change to strategy owner (rest eth and USDC)\r\n        paybackLoanInternal(_walletOwner, totalLoanEth);\r\n    }\r\n\r\n    function paybackLoanInternal(\r\n        address _userAddr, uint256 _loanEth\r\n    ) internal {\r\n\r\n        uint ethForPayback = sub(address(this).balance, _loanEth);\r\n        uint usdForPayback = IToken(USDC_ADDRESS).balanceOf(address(this));\r\n\r\n        // transfer more than need gas for transfer\r\n        if (ethForPayback > tx.gasprice * 21000 * 2) {\r\n            IToken(ETH_ADDRESS).universalTransfer(_userAddr, ethForPayback);\r\n        } else {\r\n            ethForPayback = 0;\r\n        }\r\n\r\n        // transfer more than 0.5 USDC\r\n        if (usdForPayback > 0.5e6) {\r\n            IToken(USDC_ADDRESS).universalTransfer(_userAddr, usdForPayback);\r\n        } else {\r\n            usdForPayback = 0;\r\n        }\r\n\r\n        // Payback Loan to LoanPool\r\n        transferEthInternal(address(loanPool), _loanEth);\r\n\r\n        // Refund ETH and USDC to user Log\r\n        emit AfterExchangeRefund(_userAddr, ethForPayback, usdForPayback);\r\n    }\r\n\r\n    function depositInternal(\r\n        uint256 ethToDeposit, uint256 usdcForExtract\r\n    ) internal returns(address dfWallet) {\r\n        // create new dfWallet for user\r\n        dfWallet = dfWalletFactory.createDfWallet();\r\n\r\n        // set dfWallet's DfFinanceClose contract state\r\n        IDfWallet(dfWallet).setDfFinanceClose(address(dfFinanceClose));\r\n\r\n        // mint cEther and borrow USDC\r\n        IDfWallet(dfWallet).deposit.value(ethToDeposit)(\r\n            ETH_ADDRESS, CETH_ADDRESS, ethToDeposit, USDC_ADDRESS, CUSDC_ADDRESS, usdcForExtract\r\n        );\r\n\r\n        // Needs more 15 percent in collateral\r\n        uint maxBorrowUsdc = getMaxBorrow(CUSDC_ADDRESS, dfWallet);\r\n        require(maxBorrowUsdc > 0 && (maxBorrowUsdc * 100 / (maxBorrowUsdc + usdcForExtract) >= 15), \"Needs more eth in collateral\");\r\n    }\r\n\r\n    function exchangeInternal(\r\n        IToken _fromToken, uint _maxFromTokenAmount, IToken _toToken, uint _minToTokenAmount, bytes memory _data\r\n    ) internal returns(uint) {\r\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\r\n        IProxyOneInchExchange proxyEx = IProxyOneInchExchange(0x3fF9Cc22ef2bF6de5Fd2E78f511EDdF0813f6B36);\r\n\r\n        // warning: eth to token not supported by ProxyOneInchExchange\r\n        if (_fromToken.allowance(address(this), address(proxyEx)) != uint256(-1)) {\r\n            _fromToken.approve(address(proxyEx), uint256(-1));\r\n        }\r\n\r\n        uint fromTokenBalance = _fromToken.universalBalanceOf(address(this));\r\n        uint toTokenBalance = _toToken.universalBalanceOf(address(this));\r\n\r\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\r\n        proxyEx.exchange(_fromToken, _maxFromTokenAmount, _data);\r\n\r\n        require(_fromToken.universalBalanceOf(address(this)) + _maxFromTokenAmount >= fromTokenBalance, \"Exchange error\");\r\n\r\n        uint newBalanceToToken = _toToken.universalBalanceOf(address(this));\r\n        require(newBalanceToToken >= toTokenBalance + _minToTokenAmount, \"Exchange error\");\r\n\r\n        return sub(newBalanceToToken, toTokenBalance); // how many tokens received\r\n    }\r\n\r\n    function transferEthInternal(address _receiver, uint _amount) internal {\r\n        address payable receiverPayable = address(uint160(_receiver));\r\n        (bool result, ) = receiverPayable.call.value(_amount)(\"\");\r\n        require(result, \"Transfer of ETH failed\");\r\n    }\r\n\r\n    // **FALLBACK functions**\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdToRefund\",\"type\":\"uint256\"}],\"name\":\"AfterExchangeRefund\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aff\",\"outputs\":[{\"internalType\":\"contract IAffiliateProgram\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_signNonce\",\"type\":\"uint256\"}],\"name\":\"cancelSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFeeForBonusEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_usdcToBuyEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethType\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"dealUsd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_promoCode\",\"type\":\"bytes32\"}],\"name\":\"dealUsdPromo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[9]\",\"name\":\"_params\",\"type\":\"uint256[9]\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_promoCode\",\"type\":\"bytes32\"}],\"name\":\"dealUsdPromoWithSign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[9]\",\"name\":\"_params\",\"type\":\"uint256[9]\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"dealUsdWithSign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_usdcToBuyEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_promoCode\",\"type\":\"bytes32\"}],\"name\":\"dealWithPromo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfFinanceClose\",\"outputs\":[{\"internalType\":\"contract IDfFinanceClose\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfWalletFactory\",\"outputs\":[{\"internalType\":\"contract IDfWalletFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"getBorrowUsdcBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[8]\",\"name\":\"_params\",\"type\":\"uint256[8]\"}],\"name\":\"isDealUsdVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanPool\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyInsuranceBet\",\"outputs\":[{\"internalType\":\"contract IDfProxyBetCompound\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aff\",\"type\":\"address\"}],\"name\":\"setAffProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfFinanceClose\",\"type\":\"address\"}],\"name\":\"setDfFinanceClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IDfProxyBetCompound\",\"name\":\"_proxyBet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceCoef\",\"type\":\"uint256\"}],\"name\":\"setDfProxyBetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWalletFactory\",\"type\":\"address\"}],\"name\":\"setDfWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentFeeForBonusEther\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceOpenCompound","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e5a8b8a5ed538e6873d97b00c88887197b8e83da9c9861e640e1841e9afc4fe3"}]}