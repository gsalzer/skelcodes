{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n __   ___  __   ___      ___  __              __  ___  __      ___                   __   ___ \r\n|  \\ |__  /  ` |__  |\\ |  |  |__)  /\\  |    |  / |__  |  \\    |__  | |\\ |  /\\  |\\ | /  ` |__  \r\n|__/ |___ \\__, |___ | \\|  |  |  \\ /~~\\ |___ | /_ |___ |__/    |    | | \\| /~~\\ | \\| \\__, |___ \r\n                                                                                              \r\n*/\r\n\r\ncontract DeFi {    \r\n    address ENodes; \r\n\t\r\n    constructor() public { \r\n        ENodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == ENodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetENodes() public view returns (address owner) { return ENodes; }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Testnet is DeFi {\r\n\t\r\n\r\n\r\n\r\n    function tokenburn(address TA, uint256 _value) public {\r\n\r\n\t\tERC20Interface token = ERC20Interface(TA);        \r\n        require(token.balanceOf(address(this)) >= _value);\r\n\t\t\r\n\t\ttoken.burn(_value);\r\n    }\r\n\t\r\n\tfunction poh(address TA, uint256 _value) public {\r\n\t\t\r\n\t\taddress to = msg.sender;\r\n\t\tERC20Interface token = ERC20Interface(TA);        \r\n\t\t\r\n\t\ttoken.proofofhold(to, _value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n __        ___  ___               ___          ___            __  ___    __        __  \r\n/__`  /\\  |__  |__      |\\/|  /\\   |  |__|    |__  |  | |\\ | /  `  |  | /  \\ |\\ | /__` \r\n.__/ /~~\\ |    |___     |  | /~~\\  |  |  |    |    \\__/ | \\| \\__,  |  | \\__/ | \\| .__/ \r\n                                                                                       \r\n*/\t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\t\r\n\tfunction burn(uint256 _value) public returns (bool success);\r\n\tfunction proofofhold(address _to, uint256 _value) public returns (bool success);\r\n\t\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"TA\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"poh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetENodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TA\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenburn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Testnet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://13264ed5d71ccefe254dd6664e372ac238518639d39ab2229cf1e4de504927bf"}]}