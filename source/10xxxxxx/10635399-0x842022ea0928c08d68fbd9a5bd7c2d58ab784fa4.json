{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n\r\n\r\n}\r\n\r\nabstract contract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view virtual returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view virtual returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable virtual returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external virtual returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view virtual returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view virtual returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view virtual returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view virtual returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable virtual returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable virtual returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable virtual returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable virtual returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external virtual returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput\r\n    (uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external virtual returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput\r\n    (uint256 eth_bought, uint256 max_tokens, uint256 deadline) external virtual returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput\r\n    (uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external virtual returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput\r\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput\r\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput\r\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput\r\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput\r\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput\r\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput\r\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput\r\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external virtual returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external virtual returns (bool);\r\n    function approve(address _spender, uint256 _value) external virtual returns (bool);\r\n    function allowance(address _owner, address _spender) external view virtual returns (uint256);\r\n    function balanceOf(address _owner) external view virtual returns (uint256);\r\n    function totalSupply() external view virtual returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) virtual external;\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate \r\n  ( string calldata fromSymbol, string calldata toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string calldata symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string calldata symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract FlashIt {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public uniswapToken;\r\n    KyberNetworkProxyInterface public kyberProxy;\r\n    OrFeedInterface internal orfeed = OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert(\"Is not the owner\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    event ArbComplete(bool _success, uint256 _initialAmount, uint256 _finalAmount);\r\n\r\n    constructor(address _kyberProxyAddress, address _uniswapProxyAddress) public {\r\n        owner = msg.sender;\r\n        changeKyberUniswapAddresses(_kyberProxyAddress, _uniswapProxyAddress);\r\n    }\r\n\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    ) external {\r\n\r\n        /*---Trades---*/\r\n\r\n        kyber2UniswapArb(_reserve, _amount);\r\n\r\n        /*---EndTrades---*/\r\n\r\n        ERC20 _token = ERC20(_reserve);\r\n        _token.transfer(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3, _amount.add(_fee));\r\n        \r\n    }\r\n\r\n    function kyber2UniswapArb(address _tokenAddress, uint256 _amount) public onlyOwner returns (bool){\r\n\r\n        ERC20 _token = ERC20(_tokenAddress);\r\n        uint256 ethBack = swapToken2Ether(_token, _amount);\r\n        uint256 tokenAmount = swapEther2Token(ethBack);\r\n\r\n        emit ArbComplete(true, _amount, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    function swapToken2Ether(ERC20 token, uint256 tokenQty) internal returns (uint256) {\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        require(balance > 0, \"Balance of token equal to 0\");\r\n\r\n        if (balance < tokenQty) {\r\n            tokenQty = balance;\r\n        }\r\n\r\n       token.approve(address(kyberProxy), 0);\r\n\r\n       token.approve(address(kyberProxy), tokenQty);\r\n\r\n        uint destAmount = kyberProxy.tradeWithHint(\r\n           token,\r\n           tokenQty,\r\n           ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\r\n           address(this),\r\n           8000000000000000000000000000000000000000000000000000000000000000,\r\n           0,\r\n           0x0000000000000000000000000000000000000004,\r\n           \"PERM\"\r\n        );\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    function swapEther2Token(uint256 _amount) internal returns (uint256) {\r\n        UniswapExchangeInterface usi = UniswapExchangeInterface(uniswapToken);\r\n        usi.ethToTokenSwapInput{value: _amount}(1, block.timestamp);\r\n    }\r\n\r\n    function withdrawETHAndTokens(address _tokenAddress) public onlyOwner{\r\n        msg.sender.call{value: (address(this).balance)};\r\n        ERC20 token = ERC20(_tokenAddress);\r\n        uint256 currentTokenBalance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, currentTokenBalance);\r\n    }\r\n\r\n    function changeKyberUniswapAddresses(address _kyberProxy, address _uniswapProxy) public onlyOwner {\r\n        kyberProxy = KyberNetworkProxyInterface(_kyberProxy);\r\n        uniswapToken = _uniswapProxy;\r\n    }\r\n\r\n    function getKyberSellPrice(string memory _token) public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", _token, \"SELL-KYBER-EXCHANGE\", 1000000000000000000);\r\n        return currentPrice;\r\n    }\r\n\r\n    function getUniswapBuyPrice(string memory _token) public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", _token, \"BUY-UNISWAP-EXCHANGE\", 1000000000000000000);\r\n        return currentPrice;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalAmount\",\"type\":\"uint256\"}],\"name\":\"ArbComplete\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapProxy\",\"type\":\"address\"}],\"name\":\"changeKyberUniswapAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"getKyberSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"getUniswapBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"kyber2UniswapArb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"internalType\":\"contract KyberNetworkProxyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawETHAndTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlashIt","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b75500000000000000000000000097dec872013f6b5fb443861090ad931542878126","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cdddec698758556061e85f826c60be53074895afdafb65d2614e633aeaf4eb33"}]}