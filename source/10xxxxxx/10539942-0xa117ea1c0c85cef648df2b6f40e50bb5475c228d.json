{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'DUCATO' 'DUCATO Protocol Token' token contract\r\n//\r\n// Symbol\t  : DUCATO\r\n// Name\t\t: DUCATO Protocol Token\r\n// Total supply: 50,000,000.000000000000000000\r\n// Decimals\t: 18\r\n//\r\n// Enjoy.\r\n//\r\n// (c) Sam Jeong / SendSquare Co. 2020. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\tfunction add(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\tfunction sub(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public view returns (uint);\r\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance);\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\tfunction approve(address spender, uint tokens) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract DUCATOProtocolToken is ERC20Interface, Owned {\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public symbol;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tuint _totalSupply;\r\n\tbool _stopTrade;\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// ------------------------------------------------------------------------\r\n\tconstructor() public {\r\n\t\tsymbol = \"DUCATO\";\r\n\t\tname = \"DUCATO Protocol Token\";\r\n\t\tdecimals = 18;\r\n\t\t_totalSupply = 50000000 * 10**uint(decimals);\r\n\t\t_stopTrade = false;\r\n\t\tbalances[owner] = _totalSupply;\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Total supply\r\n\t// ------------------------------------------------------------------------\r\n\tfunction totalSupply() public view returns (uint) {\r\n\t\treturn _totalSupply.sub(balances[address(0)]);\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Stop Trade\r\n\t// ------------------------------------------------------------------------\r\n\tfunction stopTrade() public onlyOwner {\r\n\t\trequire(_stopTrade != true);\r\n\t\t_stopTrade = true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Start Trade\r\n\t// ------------------------------------------------------------------------\r\n\tfunction startTrade() public onlyOwner {\r\n\t\trequire(_stopTrade == true);\r\n\t\t_stopTrade = false;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Get the token balance for account `tokenOwner`\r\n\t// ------------------------------------------------------------------------\r\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer the balance from token owner's account to `to` account\r\n\t// - Owner's account must have sufficient balance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\t\trequire(_stopTrade != true);\r\n\t\trequire(to > address(0));\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account\r\n\t//\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t// recommends that there are no checks for the approval double-spend attack\r\n\t// as this should be implemented in user interfaces\r\n\t// ------------------------------------------------------------------------\r\n\tfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\t\trequire(_stopTrade != true);\r\n\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer `tokens` from the `from` account to the `to` account\r\n\t//\r\n\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t// for spending from the `from` account and\r\n\t// - From account must have sufficient balance to transfer\r\n\t// - Spender must have sufficient allowance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\trequire(_stopTrade != true);\r\n\t\trequire(from > address(0));\r\n\t\trequire(to > address(0));\r\n\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tif(from != to && from != msg.sender) {\r\n\t\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\t}\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Returns the amount of tokens approved by the owner that can be\r\n\t// transferred to the spender's account\r\n\t// ------------------------------------------------------------------------\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\t\trequire(_stopTrade != true);\r\n\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account. The `spender` contract function\r\n\t// `receiveApproval(...)` is then executed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n\t\trequire(msg.sender != spender);\r\n\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\tApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Don't accept ETH\r\n\t// ------------------------------------------------------------------------\r\n\tfunction () external payable {\r\n\t\trevert();\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Owner can transfer out any accidentally sent ERC20 tokens\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\t\treturn ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DUCATOProtocolToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a9662256c0e8eb2202a1650d1424f89dbb6cea37ca440af211c6f91ba8c6ddd1"}]}