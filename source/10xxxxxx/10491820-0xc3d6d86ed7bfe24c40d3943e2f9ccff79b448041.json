{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n\r\n ██████ ██   ██ ██    ██ ██████  ███    ██ \r\n██      ██   ██ ██    ██ ██   ██ ████   ██ \r\n██      ███████ ██    ██ ██████  ██ ██  ██ \r\n██      ██   ██ ██    ██ ██   ██ ██  ██ ██ \r\n ██████ ██   ██  ██████  ██   ██ ██   ████ \r\n\r\n                                      \r\n\r\n\r\n(CHURN) \r\n\r\nThe Delflationary Token with Staking Rewards for Holders.\r\n\r\nWebsite:   https://churn.fund   \r\n\r\nTwitter:   https://twitter.com/ChurnFund\r\n\r\nDiscord:   https://discord.gg/K9NcvJE\r\n\r\n1% of every CHURN transfer is burned making all CHURN tokens more valuable.\r\n\r\nCHURN holders can choose to stake their tokens for different amounts of bonus tokens:\r\n\r\n    30   Days.....  1.5%  Bonus\r\n    90  Days.....   5.0%  Bonus\r\n    180  Days..... 17.5%  Bonus\r\n    360 Days....   45.0%  Bonus\r\n\r\nCHURN presale from July 20 to August 1\r\n\r\nCHURN presale price is 0.0005 ETH.\r\n\r\n2,000,000 CHURN max in presale\r\n\r\nUniswap Launch Aug 2\r\n\r\n50% of presale funds raised will be used for the initial Uniswap liquidity.\r\n\r\nCHURN will launch Balancer pool on September 1\r\n\r\nMaximum Supply of CHURN is 5,000,000 tokens\r\n\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract CHURN is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => uint256) private _lockEnd;\r\n  mapping (address => bool) private _presaleAuth;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  bool public _presaleMode = true;\r\n  address _manager = msg.sender;\r\n  uint256 presalePrice = 0.0005 ether;\r\n  uint256 totalPresale = 0;\r\n  uint256 maxPresale = 2000000 * 1e18;\r\n  uint256 maxSupply = 5000000 * 1e18;\r\n\r\n\r\n  event Stake(address owner, uint256 period);\r\n\r\n  string constant tokenName = \"Churn.fund\";   \r\n  string constant tokenSymbol = \"CHURN\";   \r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = 0;\r\n  uint256 public basePercent = 100; \r\n  uint256 day = 86400; \r\n  uint256[] public stakeLevelRates;\r\n  uint256[] public stakePeriods;\r\n  \r\n\r\n\r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    //_issue(msg.sender, _totalSupply);\r\n    _presaleAuth[msg.sender] = true;\r\n    stakeLevelRates.push(15);  //30 Days     1.5%\r\n    stakeLevelRates.push(50);  //90 Days     5.0%\r\n    stakeLevelRates.push(175);  //180 Days   17.5%\r\n    stakeLevelRates.push(450);  //360 Days   45.0%\r\n\r\n    stakePeriods.push(30);  //30 Days     1.5%\r\n    stakePeriods.push(90);  //90 Days     5.0%\r\n    stakePeriods.push(180);  //180 Days   17.5%\r\n    stakePeriods.push(360);  //360 Days   45.0%\r\n\r\n    _presaleAuth[msg.sender] = true;\r\n  }\r\n\r\n  function() external payable {\r\n    //Handle presale deposits here\r\n    _presale();\r\n  }\r\n\r\n  function presale() external payable {\r\n    _presale();\r\n  }\r\n\r\n  function _presale() internal {\r\n      require(_presaleMode);\r\n      require(msg.value >= 0.05 ether);\r\n      uint256 newTokens = SafeMath.mul(SafeMath.div(msg.value, presalePrice),1e18);\r\n      totalPresale += newTokens;\r\n      require(totalPresale <= maxPresale);\r\n      //_totalSupply = _totalSupply.add(newTokens);\r\n      _issue(msg.sender, newTokens);\r\n      //emit Transfer(address(0), msg.sender, newTokens);\r\n  }\r\n\r\n   function withdraw() external {\r\n      require(msg.sender == _manager);\r\n      msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n   function getTime() public view returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function lockOf(address owner) public view returns (uint256) {\r\n    return _lockEnd[owner];\r\n  }\r\n\r\n   function myLockedTime() public view returns (uint256) {\r\n    return _lockEnd[msg.sender];\r\n  }\r\n\r\n  function myLockedStatus() public view returns (bool) {\r\n     if(_lockEnd[msg.sender] > block.timestamp){\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n  }\r\n\r\n   function isLocked(address owner) public view returns (bool) {\r\n       if(_lockEnd[owner] > block.timestamp){\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n    \r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function cut(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 cutValue = roundValue.mul(basePercent).div(10000);\r\n    return cutValue;\r\n  }\r\n\r\n  function endPresale() external {\r\n    require(msg.sender == _manager);\r\n    _presaleMode = false;\r\n  }\r\n\r\n  function addPresaleAuth(address _addAuth) external {\r\n    require(msg.sender == _manager);\r\n    _presaleAuth[_addAuth] = true;\r\n  }\r\n\r\n  function issue(address _to, uint256 _tokenAmount) external {\r\n    require(msg.sender == _manager);\r\n    //require(_tokenAmount + _totalSupply <= maxSupply);\r\n    //_totalSupply = _totalSupply.add(newTokens);\r\n    uint256 testTotalSupply = _totalSupply + _tokenAmount;\r\n    require(testTotalSupply <= maxSupply);\r\n    _issue(_to, _tokenAmount);\r\n  }\r\n\r\n\r\n  // function burnPresale() external {\r\n  //   require(msg.sender == _manager);\r\n  //   _presaleMode = false;\r\n  //   uint256 burnTokens = SafeMath.sub(totalPresale, MaxPresale)\r\n  // }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(_lockEnd[msg.sender] <= block.timestamp);\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    require(!_presaleMode || _presaleAuth[msg.sender]);\r\n   \r\n\r\n    uint256 tokensToBurn = cut(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    return true;\r\n  }\r\n\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    require(!_presaleMode || _presaleAuth[msg.sender]);\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(_lockEnd[from] <= block.timestamp || _presaleAuth[msg.sender]);\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToBurn = cut(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n    return true;\r\n  }\r\n\r\n  function upAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    require(!_presaleMode || _presaleAuth[msg.sender]);\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    require(!_presaleMode || _presaleAuth[msg.sender]);\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function _issue(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    _totalSupply += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function destroy(uint256 amount) external {\r\n    _destroy(msg.sender, amount);\r\n  }\r\n\r\n  function _destroy(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function destroyFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _destroy(account, amount);\r\n  }\r\n\r\n  function stake(uint256 period) external {\r\n    _stake(period);\r\n  }\r\n\r\n  function setRate(uint256 _periodIndex, uint256 _newRate) external {\r\n     require(msg.sender == _manager);\r\n    stakeLevelRates[_periodIndex] = _newRate;\r\n  }\r\n\r\n  function setPeriods(uint256 _periodIndex, uint256 _newPeriod) external {\r\n     require(msg.sender == _manager);\r\n    stakePeriods[_periodIndex] = _newPeriod;\r\n  }\r\n\r\n  function _stake(uint256 _period) internal {\r\n      require(_balances[msg.sender] > 10000, \"Not enough tokens\");\r\n      require(_lockEnd[msg.sender] <= block.timestamp, \"Lock Up Period\");\r\n      require(_period <= stakePeriods.length);\r\n\r\n      uint256 newTokens;\r\n\r\n\r\n      _lockEnd[msg.sender] = block.timestamp + SafeMath.mul(day,stakePeriods[_period]);\r\n      newTokens = SafeMath.div(SafeMath.mul(_balances[msg.sender],stakeLevelRates[_period]),1000);\r\n      _balances[msg.sender] += newTokens;\r\n\r\n  \r\n      _totalSupply = _totalSupply.add(newTokens);\r\n\r\n      emit Stake(msg.sender, _period);\r\n      emit Transfer(address(0), msg.sender, newTokens);\r\n\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_presaleMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addAuth\",\"type\":\"address\"}],\"name\":\"addPresaleAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"cut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"downAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myLockedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myLockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"presale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLevelRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"upAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CHURN","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ec15d79d07b458089d23c1b6233ce3f334d199ca6d2507689714fe4e23174249"}]}