{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\ERC20Interface.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: contracts\\EIP918Interface.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract EIP918Interface {\r\n\r\n    /*\r\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\r\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\r\n     * a Mint event is emitted before returning a success indicator.\r\n     **/\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n    /*\r\n     * Optional\r\n     * Externally facing merge function that is called by miners to validate challenge digests, calculate reward,\r\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Additionally, the\r\n     * merge function takes an array of target token addresses to be used in merged rewards. Once complete,\r\n     * a Mint event is emitted before returning a success indicator.\r\n     **/\r\n    //function merge(uint256 nonce, bytes32 challenge_digest, address[] mineTokens) public returns (bool);\r\n\r\n    /*\r\n     * Returns the challenge number\r\n     **/\r\n    function getChallengeNumber() public view returns (bytes32);\r\n\r\n    /*\r\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which \r\n     * typically auto adjusts during reward generation.\r\n     **/\r\n    function getMiningDifficulty() public view returns (uint);\r\n\r\n    /*\r\n     * Returns the mining target\r\n     **/\r\n    function getMiningTarget() public view returns (uint);\r\n\r\n    /*\r\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era \r\n     * as tokens are mined to provide scarcity\r\n     **/\r\n    function getMiningReward() public view returns (uint);\r\n    \r\n    /*\r\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address, \r\n     * the reward amount, the epoch count and newest challenge number.\r\n     **/\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n}\r\n\r\n// File: contracts\\Owned.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\t\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"owner required\");\r\n        _;\r\n    }\r\n\t\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\t\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts\\Admin.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract Admin is Owned\r\n{\r\n\t/**\r\n\t * @dev Event is raised when a new admin was added.\r\n\t * @param admin Admin address performing the operation.\r\n\t * @param account New admin address added.\r\n\t */\r\n\tevent AdminAdded(address indexed admin, address indexed account);\r\n\t\r\n\t/**\r\n\t * @dev Event is raised when admin was removed.\r\n\t * @param admin Admin address performing the operation.\r\n\t * @param account Admin address being removed.\r\n\t */\r\n    event AdminRemoved(address indexed admin, address indexed account);\r\n\t\r\n\t/**\r\n\t * @dev Event is raised when admin renounces to his admin role.\r\n\t * @param account Admin address renouncing to his admin role.\r\n\t */\r\n\tevent AdminRenounced(address indexed account);\r\n\t\r\n\t\r\n\t\r\n\tmapping(address => bool) public admin;\r\n\t\r\n\tconstructor()\r\n\t\tOwned()\r\n\t\tpublic\r\n\t{\r\n\t\taddAdmin(msg.sender);\r\n\t}\r\n\t\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(admin[msg.sender], \"Admin required\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction isAdmin(address _account) public view returns (bool) {\r\n\t\treturn admin[_account];\r\n\t}\r\n\t\r\n\tfunction addAdmin(address _account) public onlyOwner {\r\n\t\trequire(_account != address(0));\r\n\t\trequire(!admin[_account], \"Admin already added\");\r\n\t\tadmin[_account] = true;\r\n\t\temit AdminAdded(msg.sender, _account);\r\n\t}\r\n\t\r\n\tfunction removeAdmin(address _account) public onlyOwner {\r\n\t\trequire(_account != address(0));\r\n\t\trequire(_account != owner, \"Owner can not remove his admin role\");\r\n\t\trequire(admin[_account], \"Remove admin only\");\r\n\t\tadmin[_account] = false;\r\n\t\temit AdminRemoved(msg.sender, _account);\r\n\t}\r\n\t\r\n\tfunction renounceAdmin() public {\r\n\t\trequire(msg.sender != owner, \"Owner can not renounce to his admin role\");\r\n\t\trequire(admin[msg.sender], \"Renounce admin only\");\r\n\t\tadmin[msg.sender] = false;\r\n\t\temit AdminRenounced(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts\\ApproveAndCallFallBack.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts\\ExtendedMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\nlibrary ExtendedMath {\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\n// File: contracts\\0xCATE_v2.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// '0xCatether Token' contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : 0xCATE\r\n// Name        : 0xCatether Token\r\n// Total supply: No Limit\r\n// Decimals    : 4\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract _0xCatetherToken is ERC20Interface, EIP918Interface, ApproveAndCallFallBack, Owned, Admin\r\n{\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\t\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;//number of 'blocks' mined\r\n    \r\n\t//a little number\r\n    uint public  _MINIMUM_TARGET = 2**16;\r\n    //a big number is easier ; just find a solution that is smaller\r\n    uint public  _MAXIMUM_TARGET = 2**224; //bitcoin uses 224\r\n    \r\n\tuint public miningTarget;\r\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n\t\r\n    // a bunch of maps to know where this is going (pun intended)\r\n    \r\n    mapping(bytes32 => bytes32) public solutionForChallenge;\r\n    mapping(uint => uint) public targetForEpoch;\r\n    mapping(uint => uint) public timeStampForEpoch;\r\n    mapping(address => address) public donationsTo;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    event Donation(address donation);\r\n    event DonationAddressOf(address donator, address donnationAddress);\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\t\r\n\tuint public tokensMinted;\r\n\t\r\n\t// transfers enabled/disabled control\r\n\tbool public transfersEnabled;\r\n\tevent TransfersEnabled(address indexed admin);\r\n\tevent TransfersDisabled(address indexed admin);\r\n\t\r\n\t// mining enabled/disabled control\r\n\tbool public miningEnabled;\r\n\tevent MiningEnabled(address indexed admin);\r\n\tevent MiningDisabled(address indexed admin);\r\n\t\r\n\t// migrate deprecated contract tokens to this new one\r\n\tbool public migrationEnabled;\r\n\tevent MigrationEnabled(address indexed admin);\r\n\tevent MigrationDisabled(address indexed admin);\r\n\t\r\n\tevent MigratedTokens(address indexed user, uint tokens);\r\n\t\r\n\taddress public deprecatedContractAddress;\r\n\t\r\n\t\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public{\r\n        symbol = \"0xCATE\";\r\n        name = \"0xCatether Token\";\r\n        \r\n        decimals = 4;\r\n\t\t\r\n\t\t// needed as reference and to migrate tokens from deprecated contract\r\n\t\tdeprecatedContractAddress = 0x8F7DbF90E71285552a687097220E1035C2e87639;\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//*** get data from deprecated contract ***//\r\n\t\ttokensMinted = 0; //will add as we migrate old tokens and from mining\r\n\t\t_totalSupply = 0; //total supply will increment as users claim and migrate tokens from deprecated contract\r\n        epochCount = 15516; //this is the latest epoch count from deprecated contract\r\n        \r\n        challengeNumber = bytes32(0x781504f93328a5bf6401754a85baab350e71a11d9051cc86a8ff6f9ebcf38477); //challengeNumber from deprecated contract on the main network\r\n        targetForEpoch[(epochCount - 1)] = _MAXIMUM_TARGET;\r\n        solutionForChallenge[challengeNumber] = \"42\"; // ahah yes\r\n\t\ttimeStampForEpoch[(epochCount - 1)] = block.timestamp;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        \r\n        targetForEpoch[epochCount] = _MAXIMUM_TARGET;\r\n        miningTarget = _MAXIMUM_TARGET;\r\n\t\t//*** --- ***//\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// transfers are enabled by default\r\n\t\ttransfersEnabled = true;\r\n\t\temit TransfersEnabled(msg.sender);\r\n\t\t\r\n\t\t// enable mining by default\r\n\t\tminingEnabled = true;\r\n\t\temit MiningEnabled(msg.sender);\r\n\t\t\r\n\t\t// migration is enabled by default\r\n\t\tmigrationEnabled = true;\r\n\t\temit MigrationEnabled(msg.sender);\r\n    }\r\n\t\r\n\tmodifier whenMiningEnabled {\r\n\t\trequire(miningEnabled, \"Mining disabled\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier whenTransfersEnabled {\r\n\t\trequire(transfersEnabled, \"Transfers disabled\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier whenMigrationEnabled {\r\n\t\trequire(migrationEnabled, \"Migration disabled\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev Enable transfers if disabled and viceversa, executed only by admin.\r\n\t * @return bool\r\n\t */\r\n\tfunction enableTransfers(bool enable) public onlyAdmin returns (bool) {\r\n\t\tif (transfersEnabled != enable) {\r\n\t\t\ttransfersEnabled = enable;\r\n\t\t\tif (enable)\r\n\t\t\t\temit TransfersEnabled(msg.sender);\r\n\t\t\telse emit TransfersDisabled(msg.sender);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Enable mining if disabled and viceversa, executed only by admin.\r\n\t * @return bool\r\n\t */\r\n\tfunction enableMining(bool enable) public onlyAdmin returns (bool) {\r\n\t\tif (miningEnabled != enable) {\r\n\t\t\tminingEnabled = enable;\r\n\t\t\tif (enable)\r\n\t\t\t\temit MiningEnabled(msg.sender);\r\n\t\t\telse emit MiningDisabled(msg.sender);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Enable deprecated contract tokens migration if disabled and viceversa, executed only by admin.\r\n\t * @return bool\r\n\t */\r\n\tfunction enableMigration(bool enable) public onlyAdmin returns (bool) {\r\n\t\tif (migrationEnabled != enable) {\r\n\t\t\tmigrationEnabled = enable;\r\n\t\t\tif (enable)\r\n\t\t\t\temit MigrationEnabled(msg.sender);\r\n\t\t\telse emit MigrationDisabled(msg.sender);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public whenMiningEnabled returns (bool success) {\r\n\t\t\r\n        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n        bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\r\n        \r\n\t\t//the challenge digest must match the expected\r\n        require(digest == challenge_digest, \"challenge_digest error\");\r\n\t\t\r\n        //the digest must be smaller than the target\r\n        require(uint256(digest) <= miningTarget, \"miningTarget error\");\r\n        \r\n\t\t//only allow one reward for each challenge\r\n\t\tbytes32 solution = solutionForChallenge[challengeNumber]; /// bug fix, 'challengeNumber' instead of 'challenge_digest'\r\n        solutionForChallenge[challengeNumber] = digest;\r\n        require(solution == 0x0, \"solution exists\");  //prevent the same answer from awarding twice\r\n        \r\n\t\tuint reward_amount = getMiningReward();\r\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n        _totalSupply = _totalSupply.add(reward_amount);\r\n\t\ttokensMinted = tokensMinted.add(reward_amount);\r\n\t\t\r\n        //set readonly diagnostics data\r\n        lastRewardTo = msg.sender;\r\n        lastRewardAmount = reward_amount;\r\n        lastRewardEthBlockNumber = block.number;\r\n        \r\n\t\t_startNewMiningEpoch();\r\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n\t\treturn true;\r\n    }\r\n\r\n    //a new 'block' to be mined\r\n    function _startNewMiningEpoch() internal {\r\n\t\t\r\n\t\ttimeStampForEpoch[epochCount] = block.timestamp;\r\n        epochCount = epochCount.add(1);\r\n\t\t\r\n\t\t//Difficulty adjustment following the DigiChieldv3 implementation (Tempered-SMA)\r\n\t\t// Allows more thorough protection against multi-pool hash attacks\r\n\t\t// https://github.com/zawy12/difficulty-algorithms/issues/9\r\n\t\tminingTarget = _reAdjustDifficulty(epochCount);\r\n\t\t\r\n\t\t//make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n\t\t//do this last since this is a protection mechanism in the mint() function\r\n\t\tchallengeNumber = blockhash(block.number.sub(1));\r\n    }\r\n\t\r\n    //https://github.com/zawy12/difficulty-algorithms/issues/21\r\n    //readjust the target via a tempered EMA\r\n    function _reAdjustDifficulty(uint epoch) internal returns (uint) {\r\n    \r\n        uint timeTarget = 300;  // We want miners to spend 5 minutes to mine each 'block'\r\n        uint N = 6180;          //N = 1000*n, ratio between timeTarget and windowTime (31-ish minutes)\r\n                                // (Ethereum doesn't handle floating point numbers very well)\r\n        uint elapsedTime = timeStampForEpoch[epoch.sub(1)].sub(timeStampForEpoch[epoch.sub(2)]); // will revert if current timestamp is smaller than the previous one\r\n        \r\n\t\ttargetForEpoch[epoch] = (targetForEpoch[epoch.sub(1)].mul(10000)).div( N.mul(3920).div(N.sub(1000).add(elapsedTime.mul(1042).div(timeTarget))).add(N));\r\n\t\t\r\n\t\t//              newTarget   =   Tampered EMA-retarget on the last 6 blocks (a bit more, it's an approximation)\r\n\t\t// \t\t\t\tAlso, there's an adjust factor, in order to correct the delays induced by the time it takes for transactions to confirm\r\n\t\t//\t\t\t\tDifficulty is adjusted to the time it takes to produce a valid hash. Here, if we set it to take 300 seconds, it will actually take \r\n\t\t//\t\t\t\t300 seconds + TxConfirmTime to validate that block. So, we wad a little % to correct that lag time.\r\n\t\t//\t\t\t\tOnce Ethereum scales, it will actually make block times go a lot faster. There's no perfect answer to this problem at the moment\r\n\t\t\r\n        latestDifficultyPeriodStarted = block.number;\r\n\t\t\r\n\t\ttargetForEpoch[epoch] = adjustTargetInBounds(targetForEpoch[epoch]);\r\n\t\t\r\n\t\treturn targetForEpoch[epoch];\r\n    }\r\n\t\r\n\tfunction adjustTargetInBounds(uint target) internal view returns (uint newTarget) {\r\n\t\tnewTarget = target;\r\n\t\t\r\n\t\tif (newTarget < _MINIMUM_TARGET) //very difficult\r\n\t\t{\r\n\t\t\tnewTarget = _MINIMUM_TARGET;\r\n\t\t}\r\n\t\t\r\n\t\tif (newTarget > _MAXIMUM_TARGET) //very easy\r\n\t\t{\r\n\t\t\tnewTarget = _MAXIMUM_TARGET;\r\n\t\t}\r\n\t}\r\n\t\r\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\r\n    function getMiningDifficulty() public view returns (uint) {\r\n\t\treturn _MAXIMUM_TARGET.div(targetForEpoch[epochCount]);\r\n\t}\r\n\t\r\n\tfunction getMiningTarget() public view returns (uint) {\r\n\t\treturn targetForEpoch[epochCount];\r\n\t}\r\n\t\r\n\t//There's no limit to the coin supply\r\n    //reward follows more or less the same emmission rate as Dogecoins'. 5 minutes per block / 105120 block in one year (roughly)\r\n    function getMiningReward() public view returns (uint) {\r\n        bytes32 digest = solutionForChallenge[challengeNumber];\r\n        if(epochCount > 160000) return (50000   * 10**uint(decimals) );\t\t\t\t\t\t\t\t\t//  14.4 M/day / ~ 1.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 150 Billions)\r\n        if(epochCount > 140000) return (75000   * 10**uint(decimals) );\t\t\t\t\t\t\t\t\t//  21.6 M/day / ~ 1.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 149 Billions)\r\n        if(epochCount > 120000) return (125000  * 10**uint(decimals) );\t\t\t\t\t\t\t\t\t//  36.0 M/day / ~ 2.5B Tokens in 20'000 blocks (coin supply @100'000th block ~ 146 Billions)\r\n        if(epochCount > 100000) return (250000  * 10**uint(decimals) );\t\t\t\t\t\t\t\t\t//  72.0 M/day / ~ 5.0B Tokens in 20'000 blocks (coin supply @100'000th block ~ 141 Billions) (~ 1 year elapsed)\r\n        if(epochCount > 80000) return  (500000  * 10**uint(decimals) );\t\t\t\t\t\t\t\t\t// 144.0 M/day / ~10.0B Tokens in 20'000 blocks (coin supply @ 80'000th block ~ 131 Billions)\r\n        if(epochCount > 60000) return  (1000000 * 10**uint(decimals) );       \t\t\t\t\t\t\t// 288.0 M/day / ~20.0B Tokens in 20'000 blocks (coin supply @ 60'000th block ~ 111 Billions)\r\n        if(epochCount > 40000) return  ((uint256(keccak256(abi.encodePacked(digest))) % 2500000) * 10**uint(decimals) );\t// 360.0 M/day / ~25.0B Tokens in 20'000 blocks (coin supply @ 40'000th block ~  86 Billions)\r\n        if(epochCount > 20000) return  ((uint256(keccak256(abi.encodePacked(digest))) % 3500000) * 10**uint(decimals) );\t// 504.0 M/day / ~35.0B Tokens in 20'000 blocks (coin supply @ 20'000th block ~  51 Billions)\r\n                               return  ((uint256(keccak256(abi.encodePacked(digest))) % 5000000) * 10**uint(decimals) );\t// 720.0 M/day / ~50.0B Tokens in 20'000 blocks \r\n    }\r\n\r\n    //help debug mining software (even though challenge_digest isn't used, this function is constant and helps troubleshooting mining issues)\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n\t\treturn keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n\t}\r\n\r\n    //help debug mining software\r\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n\t\tbytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n\t\tif(uint256(digest) > testTarget) revert();\r\n\t\treturn (digest == challenge_digest);\r\n\t}\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\t\r\n\t\r\n\t\r\n    function changeDonation(address donationAddress) public returns (bool success) {\r\n        donationsTo[msg.sender] = donationAddress;\r\n        \r\n        emit DonationAddressOf(msg.sender , donationAddress); \r\n        return true;\r\n    }\r\n\t\r\n\t\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public whenTransfersEnabled returns (bool success) {\r\n        \r\n\t\treturn transferAndDonateTo(to, tokens, donationsTo[msg.sender]);\r\n    }\r\n    \r\n    function transferAndDonateTo(address to, uint tokens, address donation) public whenTransfersEnabled returns (bool success) {\r\n        require(to != address(0), \"to address required\");\r\n\t\t\r\n\t\tuint donation_tokens; //0 by default\r\n\t\tif (donation != address(0))\r\n\t\t\tdonation_tokens = 5000;\r\n\t\t\r\n        balances[msg.sender] = (balances[msg.sender].sub(tokens)).add(5000); // 0.5 CATE for the sender\r\n        balances[to] = balances[to].add(tokens);\r\n        balances[donation] = balances[donation].add(donation_tokens); // 0.5 CATE for the sender's specified donation address\r\n\t\t\r\n\t\t_totalSupply = _totalSupply.add(donation_tokens.add(5000));\r\n\t\t\r\n        emit Transfer(msg.sender, to, tokens);\r\n\t\temit Donation(msg.sender);\r\n\t\tif (donation != address(0)) {\r\n\t\t\temit Donation(donation);\r\n\t\t}\r\n        return true;\r\n    }\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public whenTransfersEnabled returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public whenTransfersEnabled returns (bool success) {\r\n        require(to != address(0), \"to address required\");\r\n\t\t\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        \r\n\t\taddress donation = donationsTo[msg.sender];\r\n\t\tuint donation_tokens; //0 by default\r\n\t\tif (donation != address(0))\r\n\t\t\tdonation_tokens = 5000;\r\n\t\t\r\n\t\tbalances[donation] = balances[donation].add(donation_tokens); // 0.5 CATE for the sender's donation address\r\n        balances[msg.sender] = balances[msg.sender].add(5000); // 0.5 CATE for the sender\r\n        _totalSupply = _totalSupply.add(donation_tokens.add(5000));\r\n\t\t\r\n\t\temit Transfer(from, to, tokens);\r\n\t\temit Donation(msg.sender);\r\n\t\tif (donation != address(0)) {\r\n\t\t\temit Donation(donation);\r\n\t\t}\r\n        \r\n        return true;\r\n    }\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public whenTransfersEnabled returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\t\r\n\t// ---\r\n\t// Migrate deprecated contract tokens using ApproveAndCallFallBack interface function.\r\n\t// ---\r\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) public whenMigrationEnabled {\r\n\t\t\r\n\t\trequire(token == deprecatedContractAddress, \"Wrong deprecated contract address\");\r\n\t\t\r\n\t\t//this contract becomes the owner of tokens from old contract\r\n\t\trequire(ERC20Interface(deprecatedContractAddress).transferFrom(from, address(this), tokens), \"oldToken.transferFrom failed\");\r\n\t\t\r\n\t\tbalances[from] = balances[from].add(tokens);\r\n\t\t_totalSupply = _totalSupply.add(tokens);\r\n\t\ttokensMinted = tokensMinted.add(tokens); //migrated tokens are minted in old contract\r\n\t\temit MigratedTokens(from, tokens);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"transferAndDonateTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeStampForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableMining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecatedContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donationAddress\",\"type\":\"address\"}],\"name\":\"changeDonation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationsTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetForEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"solutionForChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donation\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donnationAddress\",\"type\":\"address\"}],\"name\":\"DonationAddressOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"TransfersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"TransfersDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"MiningEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"MiningDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"MigrationEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"MigrationDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"MigratedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"_0xCatetherToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://46c66de9e28f6463fb70b453472f87ab96e11fd576a8de24289fd7eeb9b6ecb3"}]}