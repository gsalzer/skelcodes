{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-01\r\n*/\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n/**\r\n * \r\n * EasySwap Liquidity Vault - Inspired on UniPower's Liquidity Vault - Thanks, Mr. Blobby\r\n * \r\n * Simple smart contract to decentralize the uniswap liquidity, providing proof of liquidity indefinitely.\r\n * \r\n * https://easyswap.trade\r\n */\r\ncontract LiquidityVault {\r\n    \r\n    ERC20 constant eswaToken = ERC20(0xA0471cdd5c0dc2614535fD7505b17A651a8F0DAB);\r\n    ERC20 constant liquidityToken = ERC20(0x8C0e876F1da58140695673D07FF42D4786207D1B);\r\n    \r\n    address eswaaddress = msg.sender;\r\n    uint256 public lastTradingFeeDistribution;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n    \r\n    \r\n    /**\r\n     * To allow distributing of trading fees\r\n     * \r\n     * Has a hardcap of 1% per 24 hours -trading fees consistantly exceeding that 1% is not a bad problem to have(!)\r\n     */\r\n    function distributeTradingFees(address recipient, uint256 amount) external {\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        require(amount < (liquidityBalance / 100)); // Max 1%\r\n        require(lastTradingFeeDistribution + 24 hours < now); // Max once a day\r\n        require(msg.sender == eswaaddress);\r\n        \r\n        liquidityToken.transfer(recipient, amount);\r\n        lastTradingFeeDistribution = now;\r\n    } \r\n    \r\n    \r\n    /**\r\n     * This contract is just a simple initial decentralization of the liquidity (to squell the skeptics) in future may need to migrate to more advanced decentralization (DAO etc.)\r\n     * So this function allows liquidity to be moved, after a 14 days lockup -preventing abuse.\r\n     */\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == eswaaddress);\r\n        migrationLock = now + 14 days;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Moves liquidity to new location, assuming the 14 days lockup has passed -preventing abuse.\r\n     */\r\n    function processMigration() external {\r\n        require(msg.sender == eswaaddress);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(migrationRecipient, liquidityBalance);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * This contract may also hold ESWA tokens (donations) to run trading contests, this function lets them be withdrawn.\r\n     */\r\n    function distributeESWA(address recipient, uint256 amount) external {\r\n        require(msg.sender == eswaaddress);\r\n        eswaToken.transfer(recipient, amount);\r\n    } \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeESWA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeTradingFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTradingFeeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityVault","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6bc6551499ed6a005d198bdaa5cf20b76edbc4debe3502a3aabc00c2fbd353b2"}]}