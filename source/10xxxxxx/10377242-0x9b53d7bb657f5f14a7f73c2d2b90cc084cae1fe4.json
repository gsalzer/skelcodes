{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/sol6/IKyberHistory.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IKyberHistory {\r\n    function saveContract(address _contract) external;\r\n    function getContracts() external view returns (address[] memory);\r\n}\r\n\r\n// File: contracts/sol6/utils/PermissionGroupsNoModifiers.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract PermissionGroupsNoModifiers {\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address => bool) internal operators;\r\n    mapping(address => bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint256 internal constant MAX_GROUP_SIZE = 50;\r\n\r\n    event AdminClaimed(address newAdmin, address previousAdmin);\r\n    event AlerterAdded(address newAlerter, bool isAdd);\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin 0\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function getOperators() external view returns (address[] memory) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters() external view returns (address[] memory) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    function addAlerter(address newAlerter) public {\r\n        onlyAdmin();\r\n        require(!alerters[newAlerter], \"alerter exists\"); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE, \"max alerters\");\r\n\r\n        emit AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function addOperator(address newOperator) public {\r\n        onlyAdmin();\r\n        require(!operators[newOperator], \"operator exists\"); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE, \"max operators\");\r\n\r\n        emit OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    /// @dev Allows the pendingAdmin address to finalize the change admin process.\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender, \"not pending\");\r\n        emit AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    function removeAlerter(address alerter) public {\r\n        onlyAdmin();\r\n        require(alerters[alerter], \"not alerter\");\r\n        delete alerters[alerter];\r\n\r\n        for (uint256 i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.pop();\r\n                emit AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeOperator(address operator) public {\r\n        onlyAdmin();\r\n        require(operators[operator], \"not operator\");\r\n        delete operators[operator];\r\n\r\n        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.pop();\r\n                emit OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the current admin to set the pendingAdmin address\r\n    /// @param newAdmin The address to transfer ownership to\r\n    function transferAdmin(address newAdmin) public {\r\n        onlyAdmin();\r\n        require(newAdmin != address(0), \"new admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /// @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n    /// @param newAdmin The address to transfer ownership to.\r\n    function transferAdminQuickly(address newAdmin) public {\r\n        onlyAdmin();\r\n        require(newAdmin != address(0), \"admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        emit AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function onlyAdmin() internal view {\r\n        require(msg.sender == admin, \"only admin\");\r\n    }\r\n\r\n    function onlyAlerter() internal view {\r\n        require(alerters[msg.sender], \"only alerter\");\r\n    }\r\n\r\n    function onlyOperator() internal view {\r\n        require(operators[msg.sender], \"only operator\");\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/KyberHistory.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n/**\r\n *   @title kyberHistory contract\r\n *   The contract provides the following functions for kyberStorage contract:\r\n *   - Record contract changes for a set of contracts\r\n */\r\ncontract KyberHistory is IKyberHistory, PermissionGroupsNoModifiers {\r\n    address public kyberStorage;\r\n    address[] internal contractsHistory;\r\n\r\n    constructor(address _admin) public PermissionGroupsNoModifiers(_admin) {}\r\n\r\n    event KyberStorageUpdated(address newStorage);\r\n\r\n    modifier onlyStorage() {\r\n        require(msg.sender == kyberStorage, \"only storage\");\r\n        _;\r\n    }\r\n\r\n    function setStorageContract(address _kyberStorage) external {\r\n        onlyAdmin();\r\n        require(_kyberStorage != address(0), \"storage 0\");\r\n        emit KyberStorageUpdated(_kyberStorage);\r\n        kyberStorage = _kyberStorage;\r\n    }\r\n\r\n    function saveContract(address _contract) external override onlyStorage {\r\n        if (contractsHistory.length > 0) {\r\n            // if same address, don't do anything\r\n            if (contractsHistory[0] == _contract) return;\r\n            // otherwise, update history\r\n            contractsHistory.push(contractsHistory[0]);\r\n            contractsHistory[0] = _contract;\r\n        } else {\r\n            contractsHistory.push(_contract);\r\n        }\r\n    }\r\n\r\n    /// @notice Should be called off chain\r\n    /// @dev Index 0 is currently used contract address, indexes > 0 are older versions\r\n    function getContracts() external override view returns (address[] memory) {\r\n        return contractsHistory;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStorage\",\"type\":\"address\"}],\"name\":\"KyberStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"saveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberStorage\",\"type\":\"address\"}],\"name\":\"setStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KyberHistory","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"430","ConstructorArguments":"000000000000000000000000bdd33f411da0b40018922a3bc69001b458227f5c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0ac9d5ea1edda864082f7c9e4492629858fe51c2fcf265761eed97d912e79374"}]}