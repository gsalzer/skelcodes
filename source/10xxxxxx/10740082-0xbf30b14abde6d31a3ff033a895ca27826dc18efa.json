{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ninterface PASTA {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function setFoodbank(address _foodbank) external;\r\n    function setGovernance(address _governance) external;\r\n}\r\n\r\ncontract ChefsTable {\r\n\r\n    // --- Math ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // token contract\r\n    PASTA spaghetti;\r\n\r\n    mapping(address=>uint) public balances;\r\n\r\n    struct Proposal {\r\n        uint id;\r\n        address proposer;\r\n        mapping(address => uint) forVotes;\r\n        mapping(address => uint) againstVotes;\r\n        uint totalForVotes;\r\n        uint totalAgainstVotes;\r\n        uint start; // block start;\r\n        uint end;   // start + period\r\n        address newFood;\r\n        address newGov;\r\n    }\r\n\r\n    mapping(address => uint) public voteLock;\r\n    mapping (uint => Proposal) public proposals;\r\n    uint public proposalCount;\r\n    uint public period = 3 days; // voting period in blocks ~ 17280 3 days for 15s/block\r\n    uint public lock = 3 days;   // vote lock in blocks ~ 17280 3 days for 15s/block\r\n    uint public minimum = 1e18; // you need 1 PASTA to propose\r\n    uint public govLock;\r\n\r\n\r\n    constructor(address _spaghetti) public {\r\n        spaghetti = PASTA(_spaghetti);\r\n        govLock = block.timestamp + 14 days;\r\n    }\r\n\r\n    function join(uint amount) public {\r\n        uint bal = spaghetti.balanceOf(address(this));\r\n        require(spaghetti.transferFrom(msg.sender, address(this), amount), \"join/transferFrom-fail\");\r\n        balances[msg.sender] += spaghetti.balanceOf(address(this)) - bal;\r\n    }\r\n\r\n    function free(uint amount) public {\r\n        require(voteLock[msg.sender] < block.timestamp, \"still votelocked\");\r\n        require(balances[msg.sender] <= amount, \"amount too high\");\r\n        balances[msg.sender] = sub(balances[msg.sender], amount);\r\n        require(spaghetti.transfer(msg.sender, amount), \"free/transfer-failed\");\r\n    }\r\n\r\n    function propose(address _newFood, address _newGov) public {\r\n        require(block.timestamp >= govLock, \"No governance for 2 weeks\");\r\n        require(balances[msg.sender] > minimum, \"<minimum\");\r\n        proposals[proposalCount++] = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            totalForVotes: 0,\r\n            totalAgainstVotes: 0,\r\n            start: block.timestamp,\r\n            end: add(block.timestamp, period),\r\n            newFood: _newFood,\r\n            newGov: _newGov\r\n        });\r\n\r\n        voteLock[msg.sender] = add(block.timestamp, lock);\r\n    }\r\n\r\n    function voteFor(uint id) public {\r\n        require(proposals[id].start < block.timestamp , \"<start\");\r\n        require(proposals[id].end > block.timestamp , \">end\");\r\n        uint votes = sub(balances[msg.sender], proposals[id].forVotes[msg.sender]);\r\n        proposals[id].totalForVotes = add(votes, proposals[id].totalForVotes);\r\n        proposals[id].forVotes[msg.sender] = balances[msg.sender];\r\n\r\n        voteLock[msg.sender] = add(block.timestamp, lock);\r\n    }\r\n\r\n    function voteAgainst(uint id) public {\r\n        require(proposals[id].start < block.timestamp , \"<start\");\r\n        require(proposals[id].end > block.timestamp , \">end\");\r\n        uint votes = sub(balances[msg.sender], proposals[id].againstVotes[msg.sender]);\r\n        proposals[id].totalAgainstVotes = add(votes, proposals[id].totalAgainstVotes);\r\n        proposals[id].againstVotes[msg.sender] = balances[msg.sender];\r\n\r\n        voteLock[msg.sender] = add(block.timestamp, lock);\r\n    }\r\n\r\n    function execute(uint id) public {\r\n        // If the proposal is over, has passed, and has passed a 3 day pause \r\n        if ((proposals[id].end + lock) < block.timestamp && proposals[id].totalForVotes > proposals[id].totalAgainstVotes) {\r\n            if (proposals[id].newFood != address(0)) {\r\n                spaghetti.setFoodbank(proposals[id].newFood);\r\n            }\r\n            if (proposals[id].newGov != address(0)) {\r\n                spaghetti.setGovernance(proposals[id].newGov);\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spaghetti\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"govLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newFood\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFood\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newGov\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChefsTable","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e54f9e6ab80ebc28515af8b8233c1aee6506a15e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://247475d4c913f21b4698ec7cc89df0174c5cb871a0116abd0f5ee702039fc97a"}]}