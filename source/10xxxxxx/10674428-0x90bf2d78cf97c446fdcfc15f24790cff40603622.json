{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n\nlibrary AddressLib {\n    address public constant ADDRESS_EMPTY = address(0x0);\n\n    /**\n     * @dev Checks if this address is all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isEmpty(address self) internal pure returns (bool) {\n        return self == ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Checks if this address is the same as another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isEqualTo(address self, address other) internal pure returns (bool) {\n        return self == other;\n    }\n\n    /**\n     * @dev Checks if this address is different to another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isNotEqualTo(address self, address other) internal pure returns (bool) {\n        return self != other;\n    }\n\n    /**\n     * @dev Checks if this address is not all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isNotEmpty(address self) internal pure returns (bool) {\n        return self != ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Throws an error if address is all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is all 0s\n     */\n    function requireNotEmpty(address self, string memory message) internal pure {\n        require(isNotEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is not all 0s\n     */\n    function requireEmpty(address self, string memory message) internal pure {\n        require(isEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are not the same\n     */\n    function requireEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isEqualTo(self, other), message);\n    }\n\n    /**\n     * @dev Throws an error if address is the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are the same\n     */\n    function requireNotEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isNotEqualTo(self, other), message);\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary NumbersList {\n    using SafeMath for uint256;\n\n    // Given a whole number percentage, multiply by it and then divide by this.\n    uint256 private constant PERCENTAGE_TO_DECIMAL = 10000;\n\n    // Holds values to can calculate the threshold of a list of numbers\n    struct Values {\n        uint256 count; // The total number of numbers added\n        uint256 max; // The maximum number that was added\n        uint256 min; // The minimum number that was added\n        uint256 sum; // The total sum of the numbers that were added\n    }\n\n    /**\n     * @dev Add to the sum while keeping track of min and max values\n     * @param self The Value this function was called on\n     * @param newValue Number to increment sum by\n     */\n    function addValue(Values storage self, uint256 newValue) internal {\n        if (self.max < newValue) {\n            self.max = newValue;\n        }\n        if (self.min > newValue || self.count == 0) {\n            self.min = newValue;\n        }\n        self.sum = self.sum.add(newValue);\n        self.count = self.count.add(1);\n    }\n\n    /**\n     * @param self The Value this function was called on\n     * @return the number of times the sum has updated\n     */\n    function valuesCount(Values storage self) internal view returns (uint256) {\n        return self.count;\n    }\n\n    /**\n     * @dev Checks if the sum has been changed\n     * @param self The Value this function was called on\n     * @return boolean\n     */\n    function isEmpty(Values storage self) internal view returns (bool) {\n        return valuesCount(self) == 0;\n    }\n\n    /**\n     * @dev Checks if the sum has been changed `totalRequiredValues` times\n     * @param self The Value this function was called on\n     * @param totalRequiredValues The maximum amount of numbers to be added to the sum\n     * @return boolean\n     */\n    function isFinalized(Values storage self, uint256 totalRequiredValues)\n        internal\n        view\n        returns (bool)\n    {\n        return valuesCount(self) >= totalRequiredValues;\n    }\n\n    /**\n     * @param self The Value this function was called on\n     * @return the average number that was used to calculate the sum\n     */\n    function getAverage(Values storage self) internal view returns (uint256) {\n        return isEmpty(self) ? 0 : self.sum.div(valuesCount(self));\n    }\n\n    /**\n     * @dev Checks if the min and max numbers are with in the acceptable tolerance\n     * @param self The Value this function was called on\n     * @param tolerancePercentage Acceptable tolerance percentage as a whole number\n     * @return boolean\n     */\n    function isWithinTolerance(Values storage self, uint256 tolerancePercentage)\n        internal\n        view\n        returns (bool)\n    {\n        if (isEmpty(self)) {\n            return false;\n        }\n        uint256 average = getAverage(self);\n        uint256 toleranceAmount = average.mul(tolerancePercentage).div(\n            PERCENTAGE_TO_DECIMAL\n        );\n\n        uint256 minTolerance = average.sub(toleranceAmount);\n        if (self.min < minTolerance) {\n            return false;\n        }\n\n        uint256 maxTolerance = average.add(toleranceAmount);\n        if (self.max > maxTolerance) {\n            return false;\n        }\n        return true;\n    }\n}\n\nlibrary TellerCommon {\n    enum LoanStatus {NonExistent, TermsSet, Active, Closed}\n\n    // The amount of interest owed to a borrower\n    // The interest is just that accrued until `timeLastAccrued`\n    struct AccruedInterest {\n        uint256 totalAccruedInterest;\n        uint256 totalNotWithdrawn;\n        uint256 timeLastAccrued;\n    }\n\n    // Represents a user signature\n    struct Signature {\n        uint256 signerNonce;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    // Consensus request object for accruing interest\n    struct InterestRequest {\n        address lender;\n        address consensusAddress;\n        uint256 requestNonce;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 requestTime;\n    }\n\n    // Consensus response object for accruing interest\n    struct InterestResponse {\n        address signer;\n        address consensusAddress;\n        uint256 responseTime;\n        uint256 interest;\n        Signature signature;\n    }\n\n    // Borrower request object to take out a loan\n    struct LoanRequest {\n        address payable borrower;\n        address recipient;\n        address consensusAddress;\n        uint256 requestNonce;\n        uint256 amount;\n        uint256 duration;\n        uint256 requestTime;\n    }\n\n    // Borrower response object to take out a loan\n    struct LoanResponse {\n        address signer;\n        address consensusAddress;\n        uint256 responseTime;\n        uint256 interestRate;\n        uint256 collateralRatio;\n        uint256 maxLoanAmount;\n        Signature signature;\n    }\n\n    // Represents loan terms based on consensus values\n    struct AccruedLoanTerms {\n        NumbersList.Values interestRate;\n        NumbersList.Values collateralRatio;\n        NumbersList.Values maxLoanAmount;\n    }\n\n    // Represents the terms of a loan based on the consensus of a LoanRequest\n    struct LoanTerms {\n        address payable borrower;\n        address recipient;\n        uint256 interestRate;\n        uint256 collateralRatio;\n        uint256 maxLoanAmount;\n        uint256 duration;\n    }\n\n    // Data per borrow as struct\n    struct Loan {\n        uint256 id;\n        LoanTerms loanTerms;\n        uint256 termsExpiry;\n        uint256 loanStartTime;\n        uint256 collateral;\n        uint256 lastCollateralIn;\n        uint256 principalOwed;\n        uint256 interestOwed;\n        uint256 borrowedAmount;\n        LoanStatus status;\n        bool liquidated;\n    }\n}\n\ninterface InterestConsensusInterface {\n    /**\n        @notice This event is emitted when an interest response is submitted or processed.\n        @param signer node signer\n        @param lender address.\n        @param requestNonce request nonce.\n        @param endTime request end time.\n        @param interest value in  the node response.\n     */\n    event InterestSubmitted(\n        address indexed signer,\n        address indexed lender,\n        uint256 requestNonce,\n        uint256 endTime,\n        uint256 interest\n    );\n\n    /**\n        @notice This event is emitted when an interest value is accepted as consensus.\n        @param lender address.\n        @param requestNonce request nonce.\n        @param endTime request end time.\n        @param interest consensus interest value.\n     */\n    event InterestAccepted(\n        address indexed lender,\n        uint256 requestNonce,\n        uint256 endTime,\n        uint256 interest\n    );\n\n    /**\n        @notice It processes all the node responses for a request in order to get a consensus value.\n        @param request the interest request sent by the lender.\n        @param responses all node responses to process.\n        @return the consensus interest.\n     */\n    function processRequest(\n        TellerCommon.InterestRequest calldata request,\n        TellerCommon.InterestResponse[] calldata responses\n    ) external returns (uint256);\n}\n\ncontract SettingsConsts {\n    /** Constants */\n\n    /**\n        @notice The setting name for the required subsmission settings.\n     */\n    bytes32 public constant REQUIRED_SUBMISSIONS_SETTING = \"RequiredSubmissions\";\n    /**\n        @notice The setting name for the maximum tolerance settings.\n        @notice This is the maximum tolerance for the values submitted (by nodes) when they are aggregated (average). It is used in the consensus mechanisms.\n        @notice This is a percentage value with 2 decimal places.\n            i.e. maximumTolerance of 325 => tolerance of 3.25% => 0.0325 of value\n            i.e. maximumTolerance of 0 => It means all the values submitted must be equals.        \n        @dev The max value is 100% => 10000\n     */\n    bytes32 public constant MAXIMUM_TOLERANCE_SETTING = \"MaximumTolerance\";\n    /**\n        @notice The setting name for the response expiry length settings.\n        @notice This is the maximum time (in seconds) a node has to submit a response. After that time, the response is considered expired.\n     */\n    bytes32 public constant RESPONSE_EXPIRY_LENGTH_SETTING = \"ResponseExpiryLength\";\n    /**\n        @notice The setting name for the safety interval settings.\n        @notice This is the minimum time you need to wait (in seconds) between the last time you deposit collateral and you take out the loan.\n        @notice It is used to avoid potential attacks using Flash Loans (AAVE) or Flash Swaps (Uniswap V2).\n     */\n    bytes32 public constant SAFETY_INTERVAL_SETTING = \"SafetyInterval\";\n    /**\n        @notice The setting name for the term expiry time settings.\n        @notice This represents the time (in seconds) that loan terms will be available after requesting them.\n        @notice After this time, the loan terms will expire and the borrower will need to request it again.\n     */\n    bytes32 public constant TERMS_EXPIRY_TIME_SETTING = \"TermsExpiryTime\";\n    /**\n        @notice The setting name for the liquidate ETH price settings.\n        @notice It represents the percentage value (with 2 decimal places) to liquidate loans.\n            i.e. an ETH liquidation price at 95% is stored as 9500\n     */\n    bytes32 public constant LIQUIDATE_ETH_PRICE_SETTING = \"LiquidateEthPrice\";\n    /**\n        @notice The setting name for the maximum loan duration settings.\n        @notice The maximum loan duration setting is defined in seconds.\n     */\n    bytes32 public constant MAXIMUM_LOAN_DURATION_SETTING = \"MaximumLoanDuration\";\n    /**\n        @notice The setting name for the request loan terms rate limit settings.\n        @notice The request loan terms rate limit setting is defined in seconds.\n     */\n    bytes32 public constant REQUEST_LOAN_TERMS_RATE_LIMIT_SETTING = \"RequestLoanTermsRateLimit\";\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract OwnerSignersRole is Ownable {\n    using Roles for Roles.Role;\n\n    /**\n        @notice This event is emitted when a new signer is added.\n        @param account added as a signer.\n     */\n    event SignerAdded(address indexed account);\n\n    /**\n        @notice This event is emitted when a signer is removed.\n        @param account removed as a signer.\n     */\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    /**\n        @notice Gets whether an account address is a signer or not.\n        @param account address to test.\n        @return true if account is a signer. Otherwise it returns false.\n     */\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    /**\n        @notice It adds a new account as a signer.\n        @param account address to add.\n        @dev The sender must be the owner.\n        @dev It throws a require error if the sender is not the owner.\n     */\n    function addSigner(address account) public onlyOwner {\n        _addSigner(account);\n    }\n\n    /**\n        @notice It removes an account as signer.\n        @param account address to remove.\n        @dev The sender must be the owner.\n        @dev It throws a require error if the sender is not the owner.\n     */\n    function removeSigner(address account) public onlyOwner {\n        _removeSigner(account);\n    }\n\n    /**\n        @notice It is an internal function to add a signer and emit an event.\n        @param account to add as signer.\n     */\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    /**\n        @notice It is an internal function to remove a signer and emit an event.\n        @param account to remove as signer.\n     */\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n\ncontract ReentrancyGuard is Initializable {\n    // counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    function initialize() public initializer {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n\n    uint256[50] private ______gap;\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\ncontract TInitializable {\n    /* State Variables */\n\n    bool private _isInitialized;\n\n    /** Modifiers */\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is initialized.\n     */\n    modifier isNotInitialized() {\n        require(!_isInitialized, \"CONTRACT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is not initialized.\n     */\n    modifier isInitialized() {\n        require(_isInitialized, \"CONTRACT_NOT_INITIALIZED\");\n        _;\n    }\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /**\n        @notice Gets if the contract is initialized.\n        @return true if contract is initialized. Otherwise it returns false.\n     */\n    function initialized() external view returns (bool) {\n        return _isInitialized;\n    }\n\n    /** Internal functions */\n\n    /**\n        @notice It initializes this contract.\n     */\n    function _initialize() internal {\n        _isInitialized = true;\n    }\n\n    /** Private functions */\n}\n\nlibrary AssetSettingsLib {\n    using SafeMath for uint256;\n    using AddressLib for address;\n    using Address for address;\n\n    /**\n        @notice This struct manages the asset settings in the platform.\n        @param cTokenAddress cToken address associated to the asset. \n        @param maxLoanAmount max loan amount configured for the asset.\n     */\n    struct AssetSettings {\n        // It prepresents the cTokenAddress or 0x0.\n        address cTokenAddress;\n        // It represents the maximum loan amount to borrow.\n        uint256 maxLoanAmount;\n    }\n\n    /**\n        @notice It initializes the struct instance with the given parameters.\n        @param cTokenAddress the initial cToken address.\n        @param maxLoanAmount the initial max loan amount.\n     */\n    function initialize(\n        AssetSettings storage self,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    ) internal {\n        require(maxLoanAmount > 0, \"INIT_MAX_AMOUNT_REQUIRED\");\n        require(\n            cTokenAddress.isEmpty() || cTokenAddress.isContract(),\n            \"CTOKEN_MUST_BE_CONTRACT_OR_EMPTY\"\n        );\n        self.cTokenAddress = cTokenAddress;\n        self.maxLoanAmount = maxLoanAmount;\n    }\n\n    /**\n        @notice Checks whether the current asset settings exists or not.\n        @dev It throws a require error if the asset settings already exists.\n        @param self the current asset settings.\n     */\n    function requireNotExists(AssetSettings storage self) internal view {\n        require(exists(self) == false, \"ASSET_SETTINGS_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current asset settings exists or not.\n        @dev It throws a require error if the asset settings doesn't exist.\n        @param self the current asset settings.\n     */\n    function requireExists(AssetSettings storage self) internal view {\n        require(exists(self) == true, \"ASSET_SETTINGS_NOT_EXISTS\");\n    }\n\n    /**\n        @notice Tests whether the current asset settings exists or not.\n        @param self the current asset settings.\n        @return true if the current settings exists (max loan amount higher than zero). Otherwise it returns false.\n     */\n    function exists(AssetSettings storage self) internal view returns (bool) {\n        return self.maxLoanAmount > 0;\n    }\n\n    /**\n        @notice Tests whether a given amount is greater than the current max loan amount.\n        @param self the current asset settings.\n        @param amount to test.\n        @return true if the given amount is greater than the current max loan amount. Otherwise it returns false.\n     */\n    function exceedsMaxLoanAmount(AssetSettings storage self, uint256 amount)\n        internal\n        view\n        returns (bool)\n    {\n        return amount > self.maxLoanAmount;\n    }\n\n    /**\n        @notice It updates the cToken address.\n        @param self the current asset settings.\n        @param newCTokenAddress the new cToken address to set.\n     */\n    function updateCTokenAddress(AssetSettings storage self, address newCTokenAddress)\n        internal\n    {\n        requireExists(self);\n        require(self.cTokenAddress != newCTokenAddress, \"NEW_CTOKEN_ADDRESS_REQUIRED\");\n        self.cTokenAddress = newCTokenAddress;\n    }\n\n    /**\n        @notice It updates the max loan amount.\n        @param self the current asset settings.\n        @param newMaxLoanAmount the new max loan amount to set.\n     */\n    function updateMaxLoanAmount(AssetSettings storage self, uint256 newMaxLoanAmount)\n        internal\n    {\n        requireExists(self);\n        require(self.maxLoanAmount != newMaxLoanAmount, \"NEW_MAX_LOAN_AMOUNT_REQUIRED\");\n        require(newMaxLoanAmount > 0, \"MAX_LOAN_AMOUNT_NOT_ZERO\");\n        self.maxLoanAmount = newMaxLoanAmount;\n    }\n}\n\nlibrary PlatformSettingsLib {\n    /**\n        It defines a platform settings. It includes: value, min, and max values.\n     */\n    struct PlatformSetting {\n        uint256 value;\n        uint256 min;\n        uint256 max;\n        bool exists;\n    }\n\n    /**\n        @notice It creates a new platform setting given a name, min and max values.\n        @param value initial value for the setting.\n        @param min min value allowed for the setting.\n        @param max max value allowed for the setting.\n     */\n    function initialize(\n        PlatformSetting storage self,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) internal {\n        requireNotExists(self);\n        require(value >= min, \"VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(value <= max, \"VALUE_MUST_BE_LT_MAX_VALUE\");\n        self.value = value;\n        self.min = min;\n        self.max = max;\n        self.exists = true;\n    }\n\n    /**\n        @notice Checks whether the current platform setting exists or not.\n        @dev It throws a require error if the platform setting already exists.\n        @param self the current platform setting.\n     */\n    function requireNotExists(PlatformSetting storage self) internal view {\n        require(self.exists == false, \"PLATFORM_SETTING_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current platform setting exists or not.\n        @dev It throws a require error if the current platform setting doesn't exist.\n        @param self the current platform setting.\n     */\n    function requireExists(PlatformSetting storage self) internal view {\n        require(self.exists == true, \"PLATFORM_SETTING_NOT_EXISTS\");\n    }\n\n    /**\n        @notice It updates a current platform setting.\n        @dev It throws a require error if:\n            - The new value is equal to the current value.\n            - The new value is not lower than the max value.\n            - The new value is not greater than the min value\n        @param self the current platform setting.\n        @param newValue the new value to set in the platform setting.\n     */\n    function update(PlatformSetting storage self, uint256 newValue)\n        internal\n        returns (uint256 oldValue)\n    {\n        requireExists(self);\n        require(self.value != newValue, \"NEW_VALUE_REQUIRED\");\n        require(newValue >= self.min, \"NEW_VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(newValue <= self.max, \"NEW_VALUE_MUST_BE_LT_MAX_VALUE\");\n        oldValue = self.value;\n        self.value = newValue;\n    }\n\n    /**\n        @notice It removes a current platform setting.\n        @param self the current platform setting to remove.\n     */\n    function remove(PlatformSetting storage self) internal {\n        requireExists(self);\n        self.value = 0;\n        self.min = 0;\n        self.max = 0;\n        self.exists = false;\n    }\n}\n\ninterface SettingsInterface {\n    /**\n        @notice This event is emitted when a new platform setting is created.\n        @param settingName new setting name.\n        @param sender address that created it.\n        @param value value for the new setting.\n     */\n    event PlatformSettingCreated(\n        bytes32 indexed settingName,\n        address indexed sender,\n        uint256 value,\n        uint256 minValue,\n        uint256 maxValue\n    );\n\n    /**\n        @notice This event is emitted when a current platform setting is removed.\n        @param settingName setting name removed.\n        @param sender address that removed it.\n     */\n    event PlatformSettingRemoved(\n        bytes32 indexed settingName,\n        uint256 lastValue,\n        address indexed sender\n    );\n\n    /**\n        @notice This event is emitted when a platform setting is updated.\n        @param settingName settings name updated.\n        @param sender address that updated it.\n        @param oldValue old value for the setting.\n        @param newValue new value for the setting.\n     */\n    event PlatformSettingUpdated(\n        bytes32 indexed settingName,\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice This event is emitted when a lending pool is paused.\n        @param account address that paused the lending pool.\n        @param lendingPoolAddress lending pool address which was paused.\n     */\n    event LendingPoolPaused(address indexed account, address indexed lendingPoolAddress);\n\n    /**\n        @notice This event is emitted when a lending pool is unpaused.\n        @param account address that paused the lending pool.\n        @param lendingPoolAddress lending pool address which was unpaused.\n     */\n    event LendingPoolUnpaused(\n        address indexed account,\n        address indexed lendingPoolAddress\n    );\n\n    /**\n        @notice This event is emitted when an new asset settings is created.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to create the settings.\n        @param cTokenAddress cToken address to configure for the asset.\n        @param maxLoanAmount max loan amount to configure for the asset.\n     */\n    event AssetSettingsCreated(\n        address indexed sender,\n        address indexed assetAddress,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    );\n\n    /**\n        @notice This event is emitted when an asset settings is removed.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to remove the settings.\n     */\n    event AssetSettingsRemoved(address indexed sender, address indexed assetAddress);\n\n    /**\n        @notice This event is emitted when an asset settings (address type) is updated.\n        @param assetSettingName asset setting name updated.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to update the asset settings.\n        @param oldValue old value used for the asset setting.\n        @param newValue the value updated.\n     */\n    event AssetSettingsAddressUpdated(\n        bytes32 indexed assetSettingName,\n        address indexed sender,\n        address indexed assetAddress,\n        address oldValue,\n        address newValue\n    );\n\n    /**\n        @notice This event is emitted when an asset settings (uint256 type) is updated.\n        @param assetSettingName asset setting name updated.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to update the asset settings.\n        @param oldValue old value used for the asset setting.\n        @param newValue the value updated.\n     */\n    event AssetSettingsUintUpdated(\n        bytes32 indexed assetSettingName,\n        address indexed sender,\n        address indexed assetAddress,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice It creates a new platform setting given a setting name, value, min and max values.\n        @param settingName setting name to create.\n        @param value the initial value for the given setting name.\n        @param minValue the min value for the setting.\n        @param maxValue the max value for the setting.\n     */\n    function createPlatformSetting(\n        bytes32 settingName,\n        uint256 value,\n        uint256 minValue,\n        uint256 maxValue\n    ) external;\n\n    /**\n        @notice It updates an existent platform setting given a setting name.\n        @notice It only allows to update the value (not the min or max values).\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\n        @param settingName setting name to update.\n        @param newValue the new value to set.\n     */\n    function updatePlatformSetting(bytes32 settingName, uint256 newValue) external;\n\n    /**\n        @notice Removes a current platform setting given a setting name.\n        @param settingName to remove.\n     */\n    function removePlatformSetting(bytes32 settingName) external;\n\n    /**\n        @notice It gets the current platform setting for a given setting name\n        @param settingName to get.\n        @return the current platform setting.\n     */\n    function getPlatformSetting(bytes32 settingName)\n        external\n        view\n        returns (PlatformSettingsLib.PlatformSetting memory);\n\n    /**\n        @notice It gets the current platform setting value for a given setting name\n        @param settingName to get.\n        @return the current platform setting value.\n     */\n    function getPlatformSettingValue(bytes32 settingName) external view returns (uint256);\n\n    /**\n        @notice It tests whether a setting name is already configured.\n        @param settingName setting name to test.\n        @return true if the setting is already configured. Otherwise it returns false.\n     */\n    function hasPlatformSetting(bytes32 settingName) external view returns (bool);\n\n    /**\n        @notice It gets whether the platform is paused or not.\n        @return true if platform is paused. Otherwise it returns false.\n     */\n    function isPaused() external view returns (bool);\n\n    /**\n        @notice It gets whether a lending pool is paused or not.\n        @param lendingPoolAddress lending pool address to test.\n        @return true if the lending pool is paused. Otherwise it returns false.\n     */\n    function lendingPoolPaused(address lendingPoolAddress) external view returns (bool);\n\n    /**\n        @notice It pauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to pause.\n     */\n    function pauseLendingPool(address lendingPoolAddress) external;\n\n    /**\n        @notice It unpauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to unpause.\n     */\n    function unpauseLendingPool(address lendingPoolAddress) external;\n\n    /**\n        @notice It creates a new asset settings in the platform.\n        @param assetAddress asset address used to create the new setting.\n        @param cTokenAddress cToken address used to configure the asset setting.\n        @param maxLoanAmount the max loan amount used to configure the asset setting.\n     */\n    function createAssetSettings(\n        address assetAddress,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    ) external;\n\n    /**\n        @notice It removes all the asset settings for a specific asset address.\n        @param assetAddress asset address used to remove the asset settings.\n     */\n    function removeAssetSettings(address assetAddress) external;\n\n    /**\n        @notice It updates the maximum loan amount for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newMaxLoanAmount the new maximum loan amount to configure.\n     */\n    function updateMaxLoanAmount(address assetAddress, uint256 newMaxLoanAmount) external;\n\n    /**\n        @notice It updates the cToken address for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newCTokenAddress the new cToken address to configure.\n     */\n    function updateCTokenAddress(address assetAddress, address newCTokenAddress) external;\n\n    /**\n        @notice Gets the current asset addresses list.\n        @return the asset addresses list.\n     */\n    function getAssets() external view returns (address[] memory);\n\n    /**\n        @notice Get the current asset settings for a given asset address.\n        @param assetAddress asset address used to get the current settings.\n        @return the current asset settings.\n     */\n    function getAssetSettings(address assetAddress)\n        external\n        view\n        returns (AssetSettingsLib.AssetSettings memory);\n\n    /**\n        @notice Tests whether amount exceeds the current maximum loan amount for a specific asset settings.\n        @param assetAddress asset address to test the setting.\n        @param amount amount to test.\n        @return true if amount exceeds current max loan amout. Otherwise it returns false.\n     */\n    function exceedsMaxLoanAmount(address assetAddress, uint256 amount)\n        external\n        view\n        returns (bool);\n\n    /**\n        @notice Tests whether an account has the pauser role.\n        @param account account to test.\n        @return true if account has the pauser role. Otherwise it returns false.\n     */\n    function hasPauserRole(address account) external view returns (bool);\n}\n\nlibrary MarketStateLib {\n    using SafeMath for uint256;\n\n    // Multiply by this to convert a number into a percentage.\n    uint256 private constant TO_PERCENTAGE = 10000;\n\n    struct MarketState {\n        uint256 totalSupplied;\n        uint256 totalRepaid;\n        uint256 totalBorrowed;\n    }\n\n    /**\n        @notice It increases the repayment amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseRepayment(MarketState storage self, uint256 amount) internal {\n        self.totalRepaid = self.totalRepaid.add(amount);\n    }\n\n    /**\n        @notice It increases the supply amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseSupply(MarketState storage self, uint256 amount) internal {\n        self.totalSupplied = self.totalSupplied.add(amount);\n    }\n\n    /**\n        @notice It decreases the supply amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function decreaseSupply(MarketState storage self, uint256 amount) internal {\n        self.totalSupplied = self.totalSupplied.sub(amount);\n    }\n\n    /**\n        @notice It increases the borrowed amount for a given market.\n        @param self the current market state reference.\n        @param amount amount to add.\n     */\n    function increaseBorrow(MarketState storage self, uint256 amount) internal {\n        self.totalBorrowed = self.totalBorrowed.add(amount);\n    }\n\n    /**\n        @notice It gets the current supply-to-debt (StD) ratio for a given market.\n        @notice The formula to calculate StD ratio is:\n            \n            StD = (SUM(total borrowed) - SUM(total repaid)) / SUM(total supplied)\n\n        @notice The value has 2 decimal places.\n            Example:\n                100 => 1%\n        @param self the current market state reference.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebt(MarketState storage self) internal view returns (uint256) {\n        if (self.totalSupplied == 0) {\n            return 0;\n        }\n        return\n            self.totalBorrowed.sub(self.totalRepaid).mul(TO_PERCENTAGE).div(\n                self.totalSupplied\n            );\n    }\n\n    /**\n        @notice It gets the supply-to-debt (StD) ratio for a given market, including a new loan amount.\n        @notice The formula to calculate StD ratio (including a new loan amount) is:\n            \n            StD = (SUM(total borrowed) - SUM(total repaid) + NewLoanAmount) / SUM(total supplied)\n\n        @param self the current market state reference.\n        @param loanAmount a new loan amount to consider in the ratio.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebtFor(MarketState storage self, uint256 loanAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        if (self.totalSupplied == 0) {\n            return 0;\n        }\n        return\n            self\n                .totalBorrowed\n                .sub(self.totalRepaid)\n                .add(loanAmount)\n                .mul(TO_PERCENTAGE)\n                .div(self.totalSupplied);\n    }\n}\n\ninterface MarketsStateInterface {\n    /**\n        @notice It increases the repayment amount for a given market.\n        @notice This function is called every new repayment is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseRepayment(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It increases the supply amount for a given market.\n        @notice This function is called every new deposit (Lenders) is received.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It decreases the supply amount for a given market.\n        @notice This function is called every new withdraw (Lenders) is done.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to decrease.\n     */\n    function decreaseSupply(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It increases the borrowed amount for a given market.\n        @notice This function is called every new loan is taken out.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param amount amount to add.\n     */\n    function increaseBorrow(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 amount\n    ) external;\n\n    /**\n        @notice It gets the current supply-to-debt (StD) ratio for a given market.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebt(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (uint256);\n\n    /**\n        @notice It gets the supply-to-debt (StD) ratio for a given market, including a new loan amount.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @param loanAmount a new loan amount to consider in the ratio.\n        @return the supply-to-debt ratio value.\n     */\n    function getSupplyToDebtFor(\n        address borrowedAsset,\n        address collateralAsset,\n        uint256 loanAmount\n    ) external view returns (uint256);\n\n    /**\n        @notice It gets the current market state.\n        @param borrowedAsset borrowed asset address.\n        @param collateralAsset collateral asset address.\n        @return the current market state.\n     */\n    function getMarket(address borrowedAsset, address collateralAsset)\n        external\n        view\n        returns (MarketStateLib.MarketState memory);\n}\n\ncontract Base is TInitializable, ReentrancyGuard {\n    using AddressLib for address;\n    using Address for address;\n\n    /* State Variables */\n\n    SettingsInterface public settings;\n    MarketsStateInterface public markets;\n\n    /** Modifiers */\n\n    /**\n        @notice Checks whether the platform is paused or not.\n        @dev It throws a require error if platform is paused.\n     */\n    modifier whenNotPaused() {\n        require(!_isPaused(), \"PLATFORM_IS_PAUSED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether a specific lending pool address is paused or not.\n        @dev It throws a require error if the lending pool is paused.\n        @param lendingPoolAddress lending pool address to check.\n     */\n    modifier whenLendingPoolNotPaused(address lendingPoolAddress) {\n        require(!_isPoolPaused(lendingPoolAddress), \"LENDING_POOL_IS_PAUSED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether the platform is paused or not.\n        @dev It throws a require error if platform is not paused.\n     */\n    modifier whenPaused() {\n        require(_isPaused(), \"PLATFORM_IS_NOT_PAUSED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether a specific lending pool address is paused or not.\n        @dev It throws a require error if the lending pool is not paused.\n        @param lendingPoolAddress lending pool address to check.\n     */\n    modifier whenLendingPoolPaused(address lendingPoolAddress) {\n        require(_isPoolPaused(lendingPoolAddress), \"LENDING_POOL_IS_NOT_PAUSED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether a given address is allowed (see Settings#hasPauserRole function) or not.\n        @dev It throws a require error if address is not allowed.\n        @param anAddress account to test.\n     */\n    modifier whenAllowed(address anAddress) {\n        require(settings.hasPauserRole(anAddress), \"ADDRESS_ISNT_ALLOWED\");\n        _;\n    }\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /** Internal functions */\n\n    /**\n        @notice It initializes the current contract instance setting the required parameters.\n        @param settingsAddress settings contract address.\n        @param marketsAddress markets state contract address.\n     */\n    function _initialize(address settingsAddress, address marketsAddress)\n        internal\n        isNotInitialized()\n    {\n        settingsAddress.requireNotEmpty(\"SETTINGS_MUST_BE_PROVIDED\");\n        require(settingsAddress.isContract(), \"SETTINGS_MUST_BE_A_CONTRACT\");\n        marketsAddress.requireNotEmpty(\"MARKETS_MUST_BE_PROVIDED\");\n        require(marketsAddress.isContract(), \"MARKETS_MUST_BE_A_CONTRACT\");\n\n        _initialize();\n\n        settings = SettingsInterface(settingsAddress);\n        markets = MarketsStateInterface(marketsAddress);\n    }\n\n    /**\n        @notice Gets if a specific lending pool address is paused or not.\n        @param poolAddress lending pool address to check.\n        @return true if the lending pool address is  paused. Otherwise it returns false.\n     */\n    function _isPoolPaused(address poolAddress) internal view returns (bool) {\n        return settings.lendingPoolPaused(poolAddress);\n    }\n\n    /**\n        @notice Gets if the platform is paused or not.\n        @return true if platform is paused. Otherwise it returns false.\n     */\n    function _isPaused() internal view returns (bool) {\n        return settings.isPaused();\n    }\n\n    /** Private functions */\n}\n\ncontract Consensus is Base, OwnerSignersRole, SettingsConsts {\n    using SafeMath for uint256;\n    using NumbersList for NumbersList.Values;\n\n    // Has signer address already submitted their answer for (user, identifier)?\n    mapping(address => mapping(address => mapping(uint256 => bool))) public hasSubmitted;\n\n    // mapping from signer address, to signerNonce, to boolean.\n    // Has the signer already used this nonce?\n    mapping(address => mapping(uint256 => bool)) public signerNonceTaken;\n\n    // the address with permissions to submit a request for processing\n    address public callerAddress;\n\n    /**\n        @notice It tracks each request nonce value that borrower (in LoanTermsConsensus) or lender (in InterestConsensus) used in the loan terms and interest requests.\n\n        @dev The first key represents the address (borrower or lender depending on the consensus contract).\n        @dev The second key represents the request nonce value.\n        @dev The final value represents whether the nonce value for the given address was used (true) or not (false).\n     */\n    mapping(address => mapping(uint256 => bool)) public requestNonceTaken;\n\n    /**\n        @notice Checks whether sender is equal to the caller address.\n        @dev It throws a require error if sender is not equal to caller address.\n     */\n    modifier isCaller() {\n        require(callerAddress == msg.sender, \"SENDER_HASNT_PERMISSIONS\");\n        _;\n    }\n\n    /**\n        @notice It initializes this contract setting the parameters.\n        @param aCallerAddress the contract that will call it.\n        @param aSettingAddress the settings contract address.\n        @param aMarketsAddress the markets state address.\n     */\n    function initialize(\n        address aCallerAddress, // loans for LoanTermsConsensus, lenders for InterestConsensus\n        address aSettingAddress,\n        address aMarketsAddress\n    ) public isNotInitialized() {\n        aCallerAddress.requireNotEmpty(\"MUST_PROVIDE_LENDER_INFO\");\n\n        Ownable.initialize(msg.sender);\n        _initialize(aSettingAddress, aMarketsAddress);\n\n        callerAddress = aCallerAddress;\n    }\n\n    /**\n        @notice It validates whether a signature is valid or not, verifying the signer and nonce.\n        @param signature signature to validate.\n        @param dataHash to use to recover the signer.\n        @param expectedSigner the expected signer address.\n        @return true if the expected signer is equal to the signer. Otherwise it returns false.\n     */\n    function _signatureValid(\n        TellerCommon.Signature memory signature,\n        bytes32 dataHash,\n        address expectedSigner\n    ) internal view returns (bool) {\n        if (!isSigner(expectedSigner)) return false;\n\n        require(\n            !signerNonceTaken[expectedSigner][signature.signerNonce],\n            \"SIGNER_NONCE_TAKEN\"\n        );\n\n        address signer = ecrecover(\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)),\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return (signer == expectedSigner);\n    }\n\n    /**\n        @notice Gets the consensus value for a list of values (uint values).\n        @notice The values must be in a maximum tolerance range.\n        @return the consensus value.\n     */\n    function _getConsensus(NumbersList.Values storage values)\n        internal\n        view\n        returns (uint256)\n    {\n        require(\n            values.isWithinTolerance(\n                settings.getPlatformSettingValue(MAXIMUM_TOLERANCE_SETTING)\n            ),\n            \"RESPONSES_TOO_VARIED\"\n        );\n\n        return values.getAverage();\n    }\n\n    /**\n        @notice It validates a response\n        @param signer signer address.\n        @param user the user address.\n        @param requestIdentifier identifier for the request.\n        @param responseTime time (in seconds) for the response.\n        @param responseHash a hash value that represents the response.\n        @param signature the signature for the response.\n     */\n    function _validateResponse(\n        address signer,\n        address user,\n        uint256 requestIdentifier,\n        uint256 responseTime,\n        bytes32 responseHash,\n        TellerCommon.Signature memory signature\n    ) internal {\n        require(\n            !hasSubmitted[signer][user][requestIdentifier],\n            \"SIGNER_ALREADY_SUBMITTED\"\n        );\n        hasSubmitted[signer][user][requestIdentifier] = true;\n\n        require(\n            responseTime >=\n                now.sub(settings.getPlatformSettingValue(RESPONSE_EXPIRY_LENGTH_SETTING)),\n            \"RESPONSE_EXPIRED\"\n        );\n\n        require(_signatureValid(signature, responseHash, signer), \"SIGNATURE_INVALID\");\n        signerNonceTaken[signer][signature.signerNonce] = true;\n    }\n\n    /**\n        @notice Gets the current chain id using the opcode 'chainid()'.\n        @return the current chain id.\n     */\n    function _getChainId() internal view returns (uint256) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n}\n\ncontract InterestConsensus is Consensus, InterestConsensusInterface {\n    using AddressLib for address;\n\n    /* State Variables */\n\n    // mapping of (lender, endTime) to the aggregated node submissions for their request\n    mapping(address => mapping(uint256 => NumbersList.Values)) public interestSubmissions;\n\n    /** Modifiers */\n\n    /* Constructor */\n\n    /* External Functions */\n    /**\n        @notice It processes all the node responses for a request in order to get a consensus value.\n        @param request the interest request sent by the lender.\n        @param responses all node responses to process.\n        @return the consensus interest.\n     */\n    function processRequest(\n        TellerCommon.InterestRequest calldata request,\n        TellerCommon.InterestResponse[] calldata responses\n    ) external isInitialized() isCaller() returns (uint256) {\n        require(\n            responses.length >=\n                settings.getPlatformSettingValue(REQUIRED_SUBMISSIONS_SETTING),\n            \"INTEREST_INSUFFICIENT_RESPONSES\"\n        );\n        require(\n            !requestNonceTaken[request.lender][request.requestNonce],\n            \"INTEREST_REQUEST_NONCE_TAKEN\"\n        );\n        requestNonceTaken[request.lender][request.requestNonce] = true;\n\n        bytes32 requestHash = _hashRequest(request);\n\n        for (uint256 i = 0; i < responses.length; i++) {\n            _processResponse(request, responses[i], requestHash);\n        }\n\n        uint256 interestAccrued = _getConsensus(\n            interestSubmissions[request.lender][request.endTime]\n        );\n\n        emit InterestAccepted(\n            request.lender,\n            request.requestNonce,\n            request.endTime,\n            interestAccrued\n        );\n\n        return interestAccrued;\n    }\n\n    /** Internal Functions */\n\n    /**\n        @notice It processes a node response.\n        @param request the interest request sent by the lender.\n        @param response a node response.\n     */\n    function _processResponse(\n        TellerCommon.InterestRequest memory request,\n        TellerCommon.InterestResponse memory response,\n        bytes32 requestHash\n    ) internal {\n        bytes32 responseHash = _hashResponse(response, requestHash);\n\n        _validateResponse(\n            response.signer,\n            request.lender,\n            request.endTime,\n            response.responseTime,\n            responseHash,\n            response.signature\n        );\n\n        interestSubmissions[request.lender][request.endTime].addValue(response.interest);\n\n        emit InterestSubmitted(\n            response.signer,\n            request.lender,\n            request.requestNonce,\n            request.endTime,\n            response.interest\n        );\n    }\n\n    /**\n        @notice It creates a hash based on a node response and lender request.\n        @param response a node response.\n        @param requestHash a hash value that represents the lender request.\n        @return a hash value.\n     */\n    function _hashResponse(\n        TellerCommon.InterestResponse memory response,\n        bytes32 requestHash\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    response.consensusAddress,\n                    response.responseTime,\n                    response.interest,\n                    response.signature.signerNonce,\n                    _getChainId(),\n                    requestHash\n                )\n            );\n    }\n\n    /**\n        @notice It creates a hash value based on the lender request.\n        @param request the interest request sent by the lender.\n        @return a hash value.\n     */\n    function _hashRequest(TellerCommon.InterestRequest memory request)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    callerAddress,\n                    request.lender,\n                    request.consensusAddress,\n                    request.requestNonce,\n                    request.startTime,\n                    request.endTime,\n                    request.requestTime,\n                    _getChainId()\n                )\n            );\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"InterestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"InterestSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATE_ETH_PRICE_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_LOAN_DURATION_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_TOLERANCE_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REQUEST_LOAN_TERMS_RATE_LIMIT_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REQUIRED_SUBMISSIONS_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESPONSE_EXPIRY_LENGTH_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAFETY_INTERVAL_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERMS_EXPIRY_TIME_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"aCallerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aSettingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aMarketsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interestSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"contract MarketsStateInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerCommon.InterestRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"responseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signerNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct TellerCommon.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct TellerCommon.InterestResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"processRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestNonceTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"contract SettingsInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signerNonceTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InterestConsensus","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}