{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/IFeePool.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface IFeePool {\r\n    // Views\r\n    function getExchangeFeeRateForSynth(bytes32 synthKey) external view returns (uint);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function FEE_ADDRESS() external view returns (address);\r\n\r\n    function feesAvailable(address account) external view returns (uint, uint);\r\n\r\n    function isFeesClaimable(address account) external view returns (bool);\r\n\r\n    function totalFeesAvailable() external view returns (uint);\r\n\r\n    function totalRewardsAvailable() external view returns (uint);\r\n\r\n    // Mutative Functions\r\n    function claimFees() external returns (bool);\r\n\r\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\r\n\r\n    function closeCurrentFeePeriod() external;\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function appendAccountIssuanceRecord(\r\n        address account,\r\n        uint lockedAmount,\r\n        uint debtEntryIndex\r\n    ) external;\r\n\r\n    function recordFeePaid(uint sUSDAmount) external;\r\n\r\n    function setRewardsToDistribute(uint amount) external;\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/ISynth.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface ISynth {\r\n    // Views\r\n    function currencyKey() external view returns (bytes32);\r\n\r\n    function transferableSynths(address account) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint value) external returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function burn(address account, uint amount) external;\r\n\r\n    function issue(address account, uint amount) external;\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/ISynthetix.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n\r\ninterface ISynthetix {\r\n    // Views\r\n    function anySynthOrSNXRateIsStale() external view returns (bool anyRateStale);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint);\r\n\r\n    function availableSynths(uint index) external view returns (ISynth);\r\n\r\n    function collateral(address account) external view returns (uint);\r\n\r\n    function collateralisationRatio(address issuer) external view returns (uint);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\r\n\r\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint maxIssuable,\r\n            uint alreadyIssued,\r\n            uint totalSystemDebt\r\n        );\r\n\r\n    function synths(bytes32 currencyKey) external view returns (ISynth);\r\n\r\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function transferableSynthetix(address account) external view returns (uint transferable);\r\n\r\n    // Mutative Functions\r\n    function burnSynths(uint amount) external;\r\n\r\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\r\n\r\n    function burnSynthsToTarget() external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\r\n\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint amountReceived);\r\n\r\n    function exchangeOnBehalf(\r\n        address exchangeForAddress,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint amountReceived);\r\n\r\n    function issueMaxSynths() external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\r\n\r\n    function issueSynths(uint amount) external;\r\n\r\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\r\n\r\n    function mint() external returns (bool);\r\n\r\n    function settle(bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint reclaimed,\r\n            uint refunded,\r\n            uint numEntries\r\n        );\r\n\r\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/IRewardEscrow.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface IRewardEscrow {\r\n    // Views\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function numVestingEntries(address account) external view returns (uint);\r\n\r\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\r\n\r\n    function totalVestedAccountBalance(address account) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function appendVestingEntry(address account, uint quantity) external;\r\n\r\n    function vest() external;\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/IExchangeRates.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/IExchangeRates\r\ninterface IExchangeRates {\r\n    // Views\r\n    function aggregators(bytes32 currencyKey) external view returns (address);\r\n\r\n    function anyRateIsStale(bytes32[] calldata currencyKeys) external view returns (bool);\r\n\r\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint value);\r\n\r\n    function effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourceRate,\r\n            uint destinationRate\r\n        );\r\n\r\n    function effectiveValueAtRound(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        uint roundIdForSrc,\r\n        uint roundIdForDest\r\n    ) external view returns (uint value);\r\n\r\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function getLastRoundIdBeforeElapsedSecs(\r\n        bytes32 currencyKey,\r\n        uint startingRoundId,\r\n        uint startingTimestamp,\r\n        uint timediff\r\n    ) external view returns (uint);\r\n\r\n    function inversePricing(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint entryPoint,\r\n            uint upperLimit,\r\n            uint lowerLimit,\r\n            bool frozen\r\n        );\r\n\r\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\r\n\r\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\r\n\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateStalePeriod() external view returns (uint);\r\n\r\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, uint[] memory times);\r\n\r\n    function ratesAndStaleForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory, bool);\r\n\r\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/ISynthetixState.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface ISynthetixState {\r\n    // Views\r\n    function debtLedger(uint index) external view returns (uint);\r\n\r\n    function issuanceRatio() external view returns (uint);\r\n\r\n    function issuanceData(address account) external view returns (uint initialDebtOwnership, uint debtEntryIndex);\r\n\r\n    function debtLedgerLength() external view returns (uint);\r\n\r\n    function hasIssued(address account) external view returns (bool);\r\n\r\n    function lastDebtLedgerEntry() external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function incrementTotalIssuerCount() external;\r\n\r\n    function decrementTotalIssuerCount() external;\r\n\r\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\r\n\r\n    function appendDebtLedgerValue(uint value) external;\r\n\r\n    function clearIssuanceData(address account) external;\r\n}\r\n\r\n// File: synthetix/contracts/interfaces/IAddressResolver.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IxSNXCore.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ncontract IxSNXCore {\r\n    function withdrawableEthFees() external view returns (uint256);\r\n    function withdrawableSusdFees() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/ICurveFi.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface ICurveFi {\r\n  function exchange(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx,\r\n    uint256 min_dy\r\n  ) external;\r\n  function exchange_underlying(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx,\r\n    uint256 min_dy\r\n  ) external;\r\n  function get_dx_underlying(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dy\r\n  ) external view returns (uint256);\r\n  function get_dy_underlying(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx\r\n  ) external view returns (uint256);\r\n  function get_dx(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dy\r\n  ) external view returns (uint256);\r\n  function get_dy(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx\r\n  ) external view returns (uint256);\r\n  function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/ISetToken.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface ISetToken {\r\n    function unitShares() external view returns(uint);\r\n    function naturalUnit() external view returns(uint);\r\n    function currentSet() external view returns(address);\r\n    // function getUnits() external view returns (uint256[] memory);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkProxy.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\ncontract IKyberNetworkProxy {\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\r\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\r\n}\r\n\r\n// File: contracts/interface/ISetAssetBaseCollateral.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface ISetAssetBaseCollateral {\r\n    function getComponents() external view returns(address[] memory);\r\n    function naturalUnit() external view returns(uint);\r\n    function getUnits() external view returns (uint256[] memory);\r\n}\r\n\r\n// File: contracts/TradeAccounting.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\txSNX Target Allocation (assuming 800% C-RATIO)\r\n\t----------------------\r\n\tAllocation         |  NAV   | % NAV\r\n\t--------------------------------------\r\n\t800 SNX @ $1/token | $800   | 100%\r\n\t100 sUSD Debt\t   | ($100)\t| (12.5%)\r\n\t75 USD equiv Set   | $75    | 9.375%\r\n\t25 USD equiv ETH   | $25    | 3.125%\r\n\t--------------------------------------\r\n\tTotal                $800   | 100%\r\n */\r\n\r\n/*\r\n\tConditions for `isRebalanceTowardsHedgeRequired` to return true\r\n\tAssuming 5% rebalance threshold\r\n\r\n\tAllocation         |  NAV   | % NAV\r\n\t--------------------------------------\r\n\t800 SNX @ $1/token | $800   | 100.63%\r\n\t105 sUSD Debt\t   | ($105)\t| (13.21%)\r\n\t75 USD equiv Set   | $75    | 9.43%\r\n\t25 USD equiv ETH   | $25    | 3.14%\r\n\t--------------------------------------\r\n\tTotal                $795   | 100%\r\n\r\n\tDebt value\t\t   | $105\r\n\tHedge Assets\t   | $100\r\n\t-------------------------\r\n\tDebt/hedge ratio   | 105%\r\n  */\r\n\r\n/*\r\n\tConditions for `isRebalanceTowardsSnxRequired` to return true\r\n\tAssuming 5% rebalance threshold\r\n\r\n\tAllocation         |  NAV   | % NAV\r\n\t--------------------------------------\r\n\t800 SNX @ $1/token | $800   | 99.37%\r\n\t100 sUSD Debt\t   | ($100)\t| (12.42%)\r\n\t75 USD equiv Set   | $75    | 9.31%\r\n\t30 USD equiv ETH   | $30    | 3.72%\r\n\t--------------------------------------\r\n\tTotal                $805   | 100%\r\n\r\n\tHedge Assets\t   | $105\r\n\tDebt value\t\t   | $100\r\n\t-------------------------\r\n\tHedge/debt ratio   | 105%\r\n  */\r\n\r\ncontract TradeAccounting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant TEN = 10;\r\n    uint256 private constant DEC_18 = 1e18;\r\n    uint256 private constant PERCENT = 100;\r\n    uint256 private constant ETH_TARGET = 4; // targets 1/4th of hedge portfolio\r\n    uint256 private constant SLIPPAGE_RATE = 99;\r\n    uint256 private constant MAX_UINT = 2**256 - 1;\r\n    uint256 private constant RATE_STALE_TIME = 3600; // 1 hour\r\n    uint256 private constant REBALANCE_THRESHOLD = 105; // 5%\r\n    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 10;\r\n\r\n    int128 usdcIndex;\r\n    int128 susdIndex;\r\n\r\n    ICurveFi private curveFi;\r\n    ISynthetix private synthetix;\r\n    ISynthetixState private synthetixState;\r\n    IAddressResolver private addressResolver;\r\n    IKyberNetworkProxy private kyberNetworkProxy;\r\n\r\n    address private xSNXInstance;\r\n    address private addressValidator;\r\n\r\n    address private setAddress;\r\n    address private susdAddress;\r\n    address private usdcAddress;\r\n\r\n    address private nextCurveAddress;\r\n\r\n    bytes32 constant snx = \"SNX\";\r\n    bytes32 constant susd = \"sUSD\";\r\n    bytes32 constant seth = \"sETH\";\r\n\r\n    bytes32[2] synthSymbols;\r\n\r\n    address[2] setComponentAddresses;\r\n\r\n    constructor(\r\n        address _setAddress,\r\n        address _kyberProxyAddress,\r\n        address _addressResolver,\r\n        address _susdAddress,\r\n        address _usdcAddress,\r\n        address _addressValidator,\r\n        bytes32[2] memory _synthSymbols,\r\n        address[2] memory _setComponentAddresses\r\n    ) public {\r\n        setAddress = _setAddress;\r\n        kyberNetworkProxy = IKyberNetworkProxy(_kyberProxyAddress);\r\n        addressResolver = IAddressResolver(_addressResolver);\r\n        susdAddress = _susdAddress;\r\n        usdcAddress = _usdcAddress;\r\n        addressValidator = _addressValidator;\r\n        synthSymbols = _synthSymbols;\r\n        setComponentAddresses = _setComponentAddresses;\r\n    }\r\n\r\n    modifier onlyXSNX {\r\n        require(msg.sender == xSNXInstance, \"Only xSNX contract can call\");\r\n        _;\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                         Kyber                                             */\r\n    /* ========================================================================================= */\r\n\r\n    function swapEtherToToken(address toToken, uint256 minConversionRate)\r\n        public\r\n        payable\r\n        onlyXSNX\r\n    {\r\n        kyberNetworkProxy.swapEtherToToken.value(msg.value)(\r\n            ERC20(toToken),\r\n            minConversionRate\r\n        );\r\n        IERC20(toToken).transfer(\r\n            xSNXInstance,\r\n            IERC20(toToken).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function swapTokenToToken(\r\n        address fromToken,\r\n        uint256 amount,\r\n        address toToken,\r\n        uint256 minKyberRate,\r\n        uint256 minCurveReturn\r\n    ) public onlyXSNX {\r\n        if (fromToken == susdAddress) {\r\n            _exchangeUnderlying(susdIndex, usdcIndex, amount, minCurveReturn);\r\n\r\n            if (toToken != usdcAddress) {\r\n                uint256 usdcBal = getUsdcBalance();\r\n                _swapTokenToToken(usdcAddress, usdcBal, toToken, minKyberRate);\r\n            }\r\n        } else if (toToken == susdAddress) {\r\n            if (fromToken != usdcAddress) {\r\n                _swapTokenToToken(fromToken, amount, usdcAddress, minKyberRate);\r\n            }\r\n\r\n            uint256 usdcBal = getUsdcBalance();\r\n            _exchangeUnderlying(usdcIndex, susdIndex, usdcBal, minCurveReturn);\r\n        } else {\r\n            _swapTokenToToken(fromToken, amount, toToken, minKyberRate);\r\n        }\r\n\r\n        IERC20(toToken).transfer(\r\n            xSNXInstance,\r\n            IERC20(toToken).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function _swapTokenToToken(\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _toToken,\r\n        uint256 _minKyberRate\r\n    ) private {\r\n        kyberNetworkProxy.swapTokenToToken(\r\n            ERC20(_fromToken),\r\n            _amount,\r\n            ERC20(_toToken),\r\n            _minKyberRate\r\n        );\r\n    }\r\n\r\n    function swapTokenToEther(\r\n        address fromToken,\r\n        uint256 amount,\r\n        uint256 minKyberRate,\r\n        uint256 minCurveReturn\r\n    ) public onlyXSNX {\r\n        if (fromToken == susdAddress) {\r\n            _exchangeUnderlying(susdIndex, usdcIndex, amount, minCurveReturn);\r\n\r\n            uint256 usdcBal = getUsdcBalance();\r\n            _swapTokenToEther(usdcAddress, usdcBal, minKyberRate);\r\n        } else {\r\n            _swapTokenToEther(fromToken, amount, minKyberRate);\r\n        }\r\n\r\n        uint256 ethBal = address(this).balance;\r\n        (bool success, ) = msg.sender.call.value(ethBal)(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function _swapTokenToEther(\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        uint256 _minKyberRate\r\n    ) private {\r\n        kyberNetworkProxy.swapTokenToEther(\r\n            ERC20(_fromToken),\r\n            _amount,\r\n            _minKyberRate\r\n        );\r\n    }\r\n\r\n    function _exchangeUnderlying(\r\n        int128 _inputIndex,\r\n        int128 _outputIndex,\r\n        uint256 _amount,\r\n        uint256 _minReturn\r\n    ) private {\r\n        curveFi.exchange_underlying(\r\n            _inputIndex,\r\n            _outputIndex,\r\n            _amount,\r\n            _minReturn\r\n        );\r\n    }\r\n\r\n    function getUsdcBalance() internal view returns (uint256) {\r\n        return IERC20(usdcAddress).balanceOf(address(this));\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                          NAV                                              */\r\n    /* ========================================================================================= */\r\n\r\n    function getEthBalance() public view returns (uint256) {\r\n        uint256 withdrawableFees = IxSNXCore(xSNXInstance)\r\n            .withdrawableEthFees();\r\n        return address(xSNXInstance).balance.sub(withdrawableFees);\r\n    }\r\n\r\n    // eth terms\r\n    function calculateRedemptionValue(\r\n        uint256 totalSupply,\r\n        uint256 tokensToRedeem\r\n    ) public view returns (uint256 valueToRedeem) {\r\n        uint256 snxBalanceOwned = getSnxBalanceOwned();\r\n        uint256 contractDebtValue = getContractDebtValue();\r\n\r\n        uint256 pricePerToken = calculateRedeemTokenPrice(\r\n            totalSupply,\r\n            snxBalanceOwned,\r\n            contractDebtValue\r\n        );\r\n\r\n        valueToRedeem = pricePerToken.mul(tokensToRedeem).div(DEC_18);\r\n    }\r\n\r\n    function getMintWithEthUtils(uint256 ethContribution, uint256 totalSupply)\r\n        public\r\n        view\r\n        returns (bool allocateToEth, uint256 nonSnxAssetValue)\r\n    {\r\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\r\n        uint256 ethBalBefore = getEthBalance().sub(ethContribution);\r\n\r\n        allocateToEth = shouldAllocateEthToEthReserve(\r\n            setHoldingsInWei,\r\n            ethBalBefore,\r\n            totalSupply\r\n        );\r\n        nonSnxAssetValue = setHoldingsInWei.add(ethBalBefore);\r\n    }\r\n\r\n    function shouldAllocateEthToEthReserve(\r\n        uint256 setHoldingsInWei,\r\n        uint256 ethBalBefore,\r\n        uint256 totalSupply\r\n    ) public pure returns (bool allocateToEth) {\r\n        if (totalSupply == 0) return false;\r\n\r\n        if (ethBalBefore.mul(ETH_TARGET) < ethBalBefore.add(setHoldingsInWei)) {\r\n            // ETH reserve is under target\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // eth terms\r\n    function calculateNetAssetValueOnMint(\r\n        uint256 weiPerOneSnx,\r\n        uint256 snxBalanceBefore,\r\n        uint256 nonSnxAssetValue\r\n    ) internal view returns (uint256) {\r\n        uint256 snxTokenValueInWei = snxBalanceBefore.mul(weiPerOneSnx).div(\r\n            DEC_18\r\n        );\r\n        uint256 contractDebtValue = getContractDebtValue();\r\n        uint256 contractDebtValueInWei = calculateDebtValueInWei(\r\n            contractDebtValue\r\n        );\r\n        return\r\n            snxTokenValueInWei.add(nonSnxAssetValue).sub(\r\n                contractDebtValueInWei\r\n            );\r\n    }\r\n\r\n    // eth terms\r\n    function calculateNetAssetValueOnRedeem(\r\n        uint256 weiPerOneSnx,\r\n        uint256 snxBalanceOwned,\r\n        uint256 contractDebtValueInWei\r\n    ) internal view returns (uint256) {\r\n        uint256 snxTokenValueInWei = snxBalanceOwned.mul(weiPerOneSnx).div(\r\n            DEC_18\r\n        );\r\n        uint256 nonSnxAssetValue = calculateNonSnxAssetValue();\r\n        return\r\n            snxTokenValueInWei.add(nonSnxAssetValue).sub(\r\n                contractDebtValueInWei\r\n            );\r\n    }\r\n\r\n    // eth terms\r\n    function calculateNonSnxAssetValue() internal view returns (uint256) {\r\n        return getSetHoldingsValueInWei().add(getEthBalance());\r\n    }\r\n\r\n    function getWeiPerOneSnxOnRedeem()\r\n        internal\r\n        view\r\n        returns (uint256 weiPerOneSnx)\r\n    {\r\n        uint256 snxUsdPrice = getSnxPrice();\r\n        uint256 ethUsdPrice = getSynthPrice(seth);\r\n        weiPerOneSnx = snxUsdPrice\r\n            .mul(DEC_18)\r\n            .div(ethUsdPrice)\r\n            .mul(SLIPPAGE_RATE) // used to better represent liquidation price as volume scales\r\n            .div(PERCENT);\r\n    }\r\n\r\n    function getActiveAssetSynthSymbol()\r\n        internal\r\n        view\r\n        returns (bytes32 synthSymbol)\r\n    {\r\n        synthSymbol = getAssetCurrentlyActiveInSet() == setComponentAddresses[0]\r\n            ? (synthSymbols[0])\r\n            : (synthSymbols[1]);\r\n    }\r\n\r\n    function getWeiPerOneSnxOnMint() internal view returns (uint256) {\r\n        uint256 snxUsd = getSynthPrice(snx);\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n        return snxUsd.mul(DEC_18).div(ethUsd);\r\n    }\r\n\r\n    function getInitialSupply() internal view returns (uint256) {\r\n        return\r\n            IERC20(address(synthetix)).balanceOf(xSNXInstance).mul(\r\n                INITIAL_SUPPLY_MULTIPLIER\r\n            );\r\n    }\r\n\r\n    function calculateTokensToMintWithEth(\r\n        uint256 snxBalanceBefore,\r\n        uint256 ethContributed,\r\n        uint256 nonSnxAssetValue,\r\n        uint256 totalSupply\r\n    ) public view returns (uint256) {\r\n        if (totalSupply == 0) {\r\n            return getInitialSupply();\r\n        }\r\n\r\n        uint256 weiPerOneSnx = getWeiPerOneSnxOnMint();\r\n        uint256 pricePerToken = calculateIssueTokenPrice(\r\n            weiPerOneSnx,\r\n            snxBalanceBefore,\r\n            nonSnxAssetValue,\r\n            totalSupply\r\n        );\r\n\r\n        return ethContributed.mul(DEC_18).div(pricePerToken);\r\n    }\r\n\r\n    function calculateTokensToMintWithSnx(\r\n        uint256 snxBalanceBefore,\r\n        uint256 snxAddedToBalance,\r\n        uint256 totalSupply\r\n    ) public view returns (uint256) {\r\n        if (totalSupply == 0) {\r\n            return getInitialSupply();\r\n        }\r\n\r\n        uint256 weiPerOneSnx = getWeiPerOneSnxOnMint();\r\n        // need to derive snx contribution in eth terms for NAV calc\r\n        uint256 proxyEthContribution = weiPerOneSnx.mul(snxAddedToBalance).div(\r\n            DEC_18\r\n        );\r\n        uint256 nonSnxAssetValue = calculateNonSnxAssetValue();\r\n        uint256 pricePerToken = calculateIssueTokenPrice(\r\n            weiPerOneSnx,\r\n            snxBalanceBefore,\r\n            nonSnxAssetValue,\r\n            totalSupply\r\n        );\r\n        return proxyEthContribution.mul(DEC_18).div(pricePerToken);\r\n    }\r\n\r\n    function calculateIssueTokenPrice(\r\n        uint256 weiPerOneSnx,\r\n        uint256 snxBalanceBefore,\r\n        uint256 nonSnxAssetValue,\r\n        uint256 totalSupply\r\n    ) public view returns (uint256 pricePerToken) {\r\n        pricePerToken = calculateNetAssetValueOnMint(\r\n            weiPerOneSnx,\r\n            snxBalanceBefore,\r\n            nonSnxAssetValue\r\n        )\r\n            .mul(DEC_18)\r\n            .div(totalSupply);\r\n    }\r\n\r\n    function calculateRedeemTokenPrice(\r\n        uint256 totalSupply,\r\n        uint256 snxBalanceOwned,\r\n        uint256 contractDebtValue\r\n    ) public view returns (uint256 pricePerToken) {\r\n        // SNX won't actually be sold (burns are only distributed in available ETH) but\r\n        // this is a proxy for the return value of SNX that would be sold\r\n        uint256 weiPerOneSnx = getWeiPerOneSnxOnRedeem();\r\n\r\n        uint256 debtValueInWei = calculateDebtValueInWei(contractDebtValue);\r\n        pricePerToken = calculateNetAssetValueOnRedeem(\r\n            weiPerOneSnx,\r\n            snxBalanceOwned,\r\n            debtValueInWei\r\n        )\r\n            .mul(DEC_18)\r\n            .div(totalSupply);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                          Set                                              */\r\n    /* ========================================================================================= */\r\n\r\n    function getActiveSetAssetBalance() public view returns (uint256) {\r\n        return IERC20(getAssetCurrentlyActiveInSet()).balanceOf(xSNXInstance);\r\n    }\r\n\r\n    function calculateSetQuantity(uint256 componentQuantity)\r\n        public\r\n        view\r\n        returns (uint256 rebalancingSetQuantity)\r\n    {\r\n        uint256 baseSetNaturalUnit = getBaseSetNaturalUnit();\r\n        uint256 baseSetComponentUnits = getBaseSetComponentUnits();\r\n        uint256 baseSetIssuable = componentQuantity.mul(baseSetNaturalUnit).div(\r\n            baseSetComponentUnits\r\n        );\r\n\r\n        uint256 rebalancingSetNaturalUnit = getSetNaturalUnit();\r\n        uint256 unitShares = getSetUnitShares();\r\n        rebalancingSetQuantity = baseSetIssuable\r\n            .mul(rebalancingSetNaturalUnit)\r\n            .div(unitShares)\r\n            .mul(99) // ensure sufficient balance in underlying asset\r\n            .div(100)\r\n            .div(rebalancingSetNaturalUnit)\r\n            .mul(rebalancingSetNaturalUnit);\r\n    }\r\n\r\n    function calculateSetIssuanceQuantity()\r\n        public\r\n        view\r\n        returns (uint256 rebalancingSetIssuable)\r\n    {\r\n        uint256 componentQuantity = getActiveSetAssetBalance();\r\n        rebalancingSetIssuable = calculateSetQuantity(componentQuantity);\r\n    }\r\n\r\n    function calculateSetRedemptionQuantity(uint256 totalSusdToBurn)\r\n        public\r\n        view\r\n        returns (uint256 rebalancingSetRedeemable)\r\n    {\r\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\r\n\r\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\r\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\r\n\r\n        // expectedSetAssetRate = amount of current set asset needed to redeem for 1 sUSD\r\n        uint256 expectedSetAssetRate = DEC_18.mul(DEC_18).div(synthUsd);\r\n\r\n        uint256 setAssetCollateralToSell = expectedSetAssetRate\r\n            .mul(totalSusdToBurn)\r\n            .div(DEC_18)\r\n            .mul(103) // err on the high side\r\n            .div(PERCENT);\r\n\r\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\r\n        setAssetCollateralToSell = setAssetCollateralToSell.mul(decimals).div(\r\n            DEC_18\r\n        );\r\n\r\n        rebalancingSetRedeemable = calculateSetQuantity(\r\n            setAssetCollateralToSell\r\n        );\r\n    }\r\n\r\n    function calculateEthValueOfOneSetUnit()\r\n        internal\r\n        view\r\n        returns (uint256 ethValue)\r\n    {\r\n        uint256 unitShares = getSetUnitShares();\r\n        uint256 rebalancingSetNaturalUnit = getSetNaturalUnit();\r\n        uint256 baseSetRequired = DEC_18.mul(unitShares).div(\r\n            rebalancingSetNaturalUnit\r\n        );\r\n\r\n        uint256 unitsOfUnderlying = getBaseSetComponentUnits();\r\n        uint256 baseSetNaturalUnit = getBaseSetNaturalUnit();\r\n        uint256 componentRequired = baseSetRequired.mul(unitsOfUnderlying).div(\r\n            baseSetNaturalUnit\r\n        );\r\n\r\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\r\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\r\n        componentRequired = componentRequired.mul(DEC_18).div(decimals);\r\n\r\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\r\n\r\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n        ethValue = componentRequired.mul(synthUsd).div(ethUsd);\r\n    }\r\n\r\n    function getSetHoldingsValueInWei()\r\n        public\r\n        view\r\n        returns (uint256 setValInWei)\r\n    {\r\n        uint256 setCollateralTokens = getSetCollateralTokens();\r\n        bytes32 synthSymbol = getActiveAssetSynthSymbol();\r\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\r\n\r\n        uint256 synthUsd = getSynthPrice(synthSymbol);\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n\r\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\r\n        setCollateralTokens = setCollateralTokens.mul(DEC_18).div(decimals);\r\n        setValInWei = setCollateralTokens.mul(synthUsd).div(ethUsd);\r\n    }\r\n\r\n    function getBaseSetNaturalUnit() internal view returns (uint256) {\r\n        return getCurrentCollateralSet().naturalUnit();\r\n    }\r\n\r\n    function getAssetCurrentlyActiveInSet() public view returns (address) {\r\n        address[] memory currentAllocation = getCurrentCollateralSet()\r\n            .getComponents();\r\n        return currentAllocation[0];\r\n    }\r\n\r\n    function getCurrentCollateralSet()\r\n        internal\r\n        view\r\n        returns (ISetAssetBaseCollateral)\r\n    {\r\n        return ISetAssetBaseCollateral(getCurrentSet());\r\n    }\r\n\r\n    function getCurrentSet() internal view returns (address) {\r\n        return ISetToken(setAddress).currentSet();\r\n    }\r\n\r\n    // this returns the number of underlying tokens in the current Set asset\r\n    // e.g., the contract's Set holdings are collateralized by 10.4 WETH\r\n    function getSetCollateralTokens() internal view returns (uint256) {\r\n        return\r\n            getSetBalanceCollateral().mul(getBaseSetComponentUnits()).div(\r\n                getBaseSetNaturalUnit()\r\n            );\r\n    }\r\n\r\n    function getSetBalanceCollateral() internal view returns (uint256) {\r\n        uint256 unitShares = getSetUnitShares();\r\n        uint256 naturalUnit = getSetNaturalUnit();\r\n        return getContractSetBalance().mul(unitShares).div(naturalUnit);\r\n    }\r\n\r\n    function getSetUnitShares() internal view returns (uint256) {\r\n        return ISetToken(setAddress).unitShares();\r\n    }\r\n\r\n    function getSetNaturalUnit() internal view returns (uint256) {\r\n        return ISetToken(setAddress).naturalUnit();\r\n    }\r\n\r\n    function getContractSetBalance() internal view returns (uint256) {\r\n        return IERC20(setAddress).balanceOf(xSNXInstance);\r\n    }\r\n\r\n    function getBaseSetComponentUnits() internal view returns (uint256) {\r\n        return ISetAssetBaseCollateral(getCurrentSet()).getUnits()[0];\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                         Synthetix\t                                     */\r\n    /* ========================================================================================= */\r\n\r\n    function getSusdBalance() public view returns (uint256) {\r\n        uint256 susdBal = IERC20(susdAddress).balanceOf(xSNXInstance);\r\n        uint256 susdFees = IxSNXCore(xSNXInstance).withdrawableSusdFees();\r\n        return susdBal.sub(susdFees);\r\n    }\r\n\r\n    function getSnxBalance() public view returns (uint256) {\r\n        return getSnxBalanceOwned().add(getSnxBalanceEscrowed());\r\n    }\r\n\r\n    function getSnxBalanceOwned() internal view returns (uint256) {\r\n        return IERC20(address(synthetix)).balanceOf(xSNXInstance);\r\n    }\r\n\r\n    function getSnxBalanceEscrowed() internal view returns (uint256) {\r\n        return\r\n            IRewardEscrow(addressResolver.getAddress(rewardEscrowName))\r\n                .balanceOf(xSNXInstance);\r\n    }\r\n\r\n    function getContractEscrowedSnxValue() internal view returns (uint256) {\r\n        return getSnxBalanceEscrowed().mul(getSnxPrice()).div(DEC_18);\r\n    }\r\n\r\n    function getContractOwnedSnxValue() internal view returns (uint256) {\r\n        return getSnxBalanceOwned().mul(getSnxPrice()).div(DEC_18);\r\n    }\r\n\r\n    function getSnxPrice() internal view returns (uint256) {\r\n        (uint256 rate, uint256 time) = IExchangeRates(\r\n            addressResolver.getAddress(exchangeRatesName)\r\n        )\r\n            .rateAndUpdatedTime(snx);\r\n        require(time.add(RATE_STALE_TIME) > block.timestamp, \"Rate stale\");\r\n        return rate;\r\n    }\r\n\r\n    function getSynthPrice(bytes32 synth) internal view returns (uint256) {\r\n        (uint256 rate, uint256 time) = IExchangeRates(\r\n            addressResolver.getAddress(exchangeRatesName)\r\n        )\r\n            .rateAndUpdatedTime(synth);\r\n        if (synth != susd) {\r\n            require(time.add(RATE_STALE_TIME) > block.timestamp, \"Rate stale\");\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function calculateDebtValueInWei(uint256 debtValue)\r\n        internal\r\n        view\r\n        returns (uint256 debtBalanceInWei)\r\n    {\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n        debtBalanceInWei = debtValue.mul(DEC_18).div(ethUsd);\r\n    }\r\n\r\n    function getContractDebtValue() internal view returns (uint256) {\r\n        return synthetix.debtBalanceOf(xSNXInstance, susd);\r\n    }\r\n\r\n    // returns inverse of target C-RATIO\r\n    function getIssuanceRatio() internal view returns (uint256) {\r\n        return synthetixState.issuanceRatio();\r\n    }\r\n\r\n    // usd terms\r\n    function getContractSnxValue() internal view returns (uint256) {\r\n        return getSnxBalance().mul(getSnxPrice()).div(DEC_18);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                       Burning sUSD                                        */\r\n    /* ========================================================================================= */\r\n\r\n    function calculateSusdToBurnToFixRatio(\r\n        uint256 snxValueHeld,\r\n        uint256 contractDebtValue,\r\n        uint256 issuanceRatio\r\n    ) internal pure returns (uint256) {\r\n        uint256 subtractor = issuanceRatio.mul(snxValueHeld).div(DEC_18);\r\n\r\n        if (subtractor > contractDebtValue) return 0;\r\n        return contractDebtValue.sub(subtractor);\r\n    }\r\n\r\n    function calculateSusdToBurnToFixRatioExternal()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 snxValueHeld = getContractSnxValue();\r\n        uint256 debtValue = getContractDebtValue();\r\n        uint256 issuanceRatio = getIssuanceRatio();\r\n        return\r\n            calculateSusdToBurnToFixRatio(\r\n                snxValueHeld,\r\n                debtValue,\r\n                issuanceRatio\r\n            );\r\n    }\r\n\r\n    function calculateSusdToBurnToEclipseEscrowed(uint256 issuanceRatio)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 escrowedSnxValue = getContractEscrowedSnxValue();\r\n        if (escrowedSnxValue == 0) return 0;\r\n\r\n        return escrowedSnxValue.mul(issuanceRatio).div(DEC_18);\r\n    }\r\n\r\n    function calculateSusdToBurnForRedemption(\r\n        uint256 tokensToRedeem,\r\n        uint256 totalSupply,\r\n        uint256 contractDebtValue,\r\n        uint256 issuanceRatio\r\n    ) public view returns (uint256 susdToBurn) {\r\n        uint256 nonEscrowedSnxValue = getContractOwnedSnxValue();\r\n        uint256 lockedSnxValue = contractDebtValue.mul(DEC_18).div(\r\n            issuanceRatio\r\n        );\r\n        uint256 valueOfSnxToSell = nonEscrowedSnxValue.mul(tokensToRedeem).div(\r\n            totalSupply\r\n        );\r\n        susdToBurn = (\r\n            lockedSnxValue.add(valueOfSnxToSell).sub(nonEscrowedSnxValue)\r\n        )\r\n            .mul(issuanceRatio)\r\n            .div(DEC_18);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                        Rebalances                                         */\r\n    /* ========================================================================================= */\r\n\r\n    // usd terms\r\n    function calculateAssetChangesForRebalanceToHedge()\r\n        internal\r\n        view\r\n        returns (uint256 totalSusdToBurn, uint256 snxToSell)\r\n    {\r\n        uint256 snxValueHeld = getContractSnxValue();\r\n        uint256 debtValueInUsd = getContractDebtValue();\r\n        uint256 issuanceRatio = getIssuanceRatio();\r\n\r\n        uint256 susdToBurnToFixRatio = calculateSusdToBurnToFixRatio(\r\n            snxValueHeld,\r\n            debtValueInUsd,\r\n            issuanceRatio\r\n        );\r\n\r\n\r\n            uint256 susdToBurnToEclipseEscrowed\r\n         = calculateSusdToBurnToEclipseEscrowed(issuanceRatio);\r\n\r\n        uint256 hedgeAssetsValueInUsd = calculateHedgeAssetsValueInUsd();\r\n        uint256 valueToUnlockInUsd = debtValueInUsd.sub(hedgeAssetsValueInUsd);\r\n\r\n        uint256 susdToBurnToUnlockTransfer = valueToUnlockInUsd\r\n            .mul(issuanceRatio)\r\n            .div(DEC_18);\r\n\r\n        totalSusdToBurn = (\r\n            susdToBurnToFixRatio.add(susdToBurnToEclipseEscrowed).add(\r\n                susdToBurnToUnlockTransfer\r\n            )\r\n        );\r\n        snxToSell = valueToUnlockInUsd.mul(DEC_18).div(getSnxPrice());\r\n    }\r\n\r\n    function calculateAssetChangesForRebalanceToSnx()\r\n        public\r\n        view\r\n        returns (uint256 setToSell)\r\n    {\r\n        (\r\n            uint256 debtValueInWei,\r\n            uint256 hedgeAssetsBalance\r\n        ) = getRebalanceUtils();\r\n        uint256 setValueToSell = hedgeAssetsBalance.sub(debtValueInWei);\r\n        uint256 ethValueOfOneSet = calculateEthValueOfOneSetUnit();\r\n        setToSell = setValueToSell.mul(DEC_18).div(ethValueOfOneSet);\r\n\r\n        // Set quantity must be multiple of natural unit\r\n        uint256 naturalUnit = getSetNaturalUnit();\r\n        setToSell = setToSell.div(naturalUnit).mul(naturalUnit);\r\n    }\r\n\r\n    function getRebalanceTowardsSnxUtils()\r\n        public\r\n        view\r\n        returns (uint256 setToSell, address activeAsset)\r\n    {\r\n        setToSell = calculateAssetChangesForRebalanceToSnx();\r\n        activeAsset = getAssetCurrentlyActiveInSet();\r\n    }\r\n\r\n    // eth terms\r\n    function getRebalanceUtils()\r\n        public\r\n        view\r\n        returns (uint256 debtValueInWei, uint256 hedgeAssetsBalance)\r\n    {\r\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\r\n        uint256 ethBalance = getEthBalance();\r\n\r\n        uint256 debtValue = getContractDebtValue();\r\n        debtValueInWei = calculateDebtValueInWei(debtValue);\r\n        hedgeAssetsBalance = setHoldingsInWei.add(ethBalance);\r\n    }\r\n\r\n    // usd terms\r\n    function calculateHedgeAssetsValueInUsd()\r\n        internal\r\n        view\r\n        returns (uint256 hedgeAssetsValueInUsd)\r\n    {\r\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\r\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\r\n        uint256 setCollateralTokens = getSetCollateralTokens();\r\n        setCollateralTokens = setCollateralTokens.mul(DEC_18).div(decimals);\r\n\r\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\r\n\r\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\r\n        uint256 setValueUsd = setCollateralTokens.mul(synthUsd).div(DEC_18);\r\n\r\n        uint256 ethBalance = getEthBalance();\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n        uint256 ethValueUsd = ethBalance.mul(ethUsd).div(DEC_18);\r\n\r\n        hedgeAssetsValueInUsd = setValueUsd.add(ethValueUsd);\r\n    }\r\n\r\n    function isRebalanceTowardsSnxRequired() public view returns (bool) {\r\n        (\r\n            uint256 debtValueInWei,\r\n            uint256 hedgeAssetsBalance\r\n        ) = getRebalanceUtils();\r\n\r\n        if (\r\n            debtValueInWei.mul(REBALANCE_THRESHOLD).div(PERCENT) <\r\n            hedgeAssetsBalance\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isRebalanceTowardsHedgeRequired() public view returns (bool) {\r\n        (\r\n            uint256 debtValueInWei,\r\n            uint256 hedgeAssetsBalance\r\n        ) = getRebalanceUtils();\r\n\r\n        if (\r\n            hedgeAssetsBalance.mul(REBALANCE_THRESHOLD).div(PERCENT) <\r\n            debtValueInWei\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // will fail if !isRebalanceTowardsHedgeRequired()\r\n    function getRebalanceTowardsHedgeUtils()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            address\r\n        )\r\n    {\r\n        (\r\n            uint256 totalSusdToBurn,\r\n            uint256 snxToSell\r\n        ) = calculateAssetChangesForRebalanceToHedge();\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        return (totalSusdToBurn, snxToSell, activeAsset);\r\n    }\r\n\r\n    /*\r\n     * @notice Helper for `hedge` function\r\n     * @dev Determines share of sUSD to allocate to ETH\r\n     * @dev Implicitly determines Set allocation as well\r\n     * @param susdBal: sUSD balance post minting\r\n     */\r\n    function getEthAllocationOnHedge(uint256 susdBal)\r\n        public\r\n        view\r\n        returns (uint256 ethAllocation)\r\n    {\r\n        uint256 ethUsd = getSynthPrice(seth);\r\n\r\n        uint256 setHoldingsInUsd = getSetHoldingsValueInWei().mul(ethUsd).div(\r\n            DEC_18\r\n        );\r\n        uint256 ethBalInUsd = getEthBalance().mul(ethUsd).div(DEC_18);\r\n        uint256 hedgeAssets = setHoldingsInUsd.add(ethBalInUsd);\r\n\r\n        if (ethBalInUsd.mul(ETH_TARGET) >= hedgeAssets.add(susdBal)) {\r\n            // full bal directed toward Set\r\n            // eth allocation is 0\r\n        } else if ((ethBalInUsd.add(susdBal)).mul(ETH_TARGET) < hedgeAssets) {\r\n            // full bal directed toward Eth\r\n            ethAllocation = susdBal;\r\n        } else {\r\n            // fractionate allocation\r\n            ethAllocation = ((hedgeAssets.add(susdBal)).div(ETH_TARGET)).sub(\r\n                ethBalInUsd\r\n            );\r\n        }\r\n    }\r\n\r\n    // helper callable when eth bal is below eth target\r\n    function calculateSetToSellForRebalanceSetToEth()\r\n        public\r\n        view\r\n        returns (uint256 setQuantityToSell)\r\n    {\r\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\r\n        uint256 ethBal = getEthBalance();\r\n        uint256 hedgeAssets = setHoldingsInWei.add(ethBal);\r\n        require(\r\n            ethBal.mul(ETH_TARGET) < hedgeAssets,\r\n            \"Rebalance not necessary\"\r\n        );\r\n\r\n        // overcompensates slightly leading to more eth than target\r\n        uint256 ethToAdd = ((hedgeAssets.div(ETH_TARGET)).sub(ethBal));\r\n        setQuantityToSell = getContractSetBalance().mul(ethToAdd).div(\r\n            setHoldingsInWei\r\n        );\r\n\r\n        uint256 naturalUnit = getSetNaturalUnit();\r\n        setQuantityToSell = setQuantityToSell.div(naturalUnit).mul(naturalUnit);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                     Address Setters                                       */\r\n    /* ========================================================================================= */\r\n\r\n    bytes32 constant rewardEscrowName = \"RewardEscrow\";\r\n    bytes32 constant synthetixStateName = \"SynthetixState\";\r\n    bytes32 constant exchangeRatesName = \"ExchangeRates\";\r\n    bytes32 constant synthetixName = \"Synthetix\";\r\n\r\n    function setSynthetixStateAddress() public {\r\n        address synthetixStateAddress = addressResolver.getAddress(\r\n            synthetixStateName\r\n        );\r\n        synthetixState = ISynthetixState(synthetixStateAddress);\r\n    }\r\n\r\n    function setSynthetixAddress() public {\r\n        address synthetixAddress = addressResolver.getAddress(synthetixName);\r\n        synthetix = ISynthetix(synthetixAddress);\r\n    }\r\n\r\n    function setInstanceAddress(address _xSNXInstance) public onlyOwner {\r\n        if (xSNXInstance == address(0)) {\r\n            xSNXInstance = _xSNXInstance;\r\n        }\r\n    }\r\n\r\n    function setCurve(\r\n        address curvePoolAddress,\r\n        int128 _usdcIndex,\r\n        int128 _susdIndex\r\n    ) public onlyOwner {\r\n        if (address(curveFi) == address(0)) {\r\n            // if initial set on deployment, immediately activate Curve address\r\n            curveFi = ICurveFi(curvePoolAddress);\r\n        } else {\r\n            // if updating Curve address (i.e., not initial setting of address on deployment),\r\n            // store nextCurveAddress but don't activate until addressValidator has confirmed\r\n            nextCurveAddress = curvePoolAddress;\r\n        }\r\n        usdcIndex = _usdcIndex;\r\n        susdIndex = _susdIndex;\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                   \t\t Utils           \t\t                         */\r\n    /* ========================================================================================= */\r\n\r\n    // admin on deployment approve [snx, susd, setComponentA, setComponentB]\r\n    function approveKyber(address tokenAddress) public onlyOwner {\r\n        IERC20(tokenAddress).approve(address(kyberNetworkProxy), MAX_UINT);\r\n    }\r\n\r\n    // admin on deployment approve [susd, usdc]\r\n    function approveCurve(address tokenAddress) public onlyOwner {\r\n        IERC20(tokenAddress).approve(address(curveFi), MAX_UINT);\r\n    }\r\n\r\n    function confirmCurveAddress(address _nextCurveAddress) public {\r\n        require(msg.sender == addressValidator, \"Incorrect caller\");\r\n        require(nextCurveAddress == _nextCurveAddress, \"Addresses don't match\");\r\n        curveFi = ICurveFi(nextCurveAddress);\r\n    }\r\n\r\n    function() external payable {}\r\n}\r\n\r\n// File: contracts/helpers/Pausable.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\n/* Adapted from OpenZeppelin */\r\ncontract Pausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser.\r\n     */\r\n    event Paused();\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser.\r\n     */\r\n    event Unpaused();\r\n\r\n    bool private _paused;\r\n    address public pauser;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n        pauser = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    modifier onlyPauser {\r\n        require(msg.sender == pauser, \"Don't have rights\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IRebalancingSetIssuanceModule.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface IRebalancingSetIssuanceModule {\r\n    //  call if eth is active asset in eth20smaco\r\n    function issueRebalancingSetWrappingEther(\r\n        address _rebalancingSetAddress,\r\n        uint256 _rebalancingSetQuantity,\r\n        bool _keepChangeInVault\r\n    ) external payable;\r\n\r\n    //  call with usdc if usdc is active asset in eth20smaco\r\n    function issueRebalancingSet(\r\n        address _rebalancingSetAddress,\r\n        uint256 _rebalancingSetQuantity,\r\n        bool _keepChangeInVault\r\n    ) external;\r\n\r\n    function redeemRebalancingSet(\r\n        address _rebalancingSetAddress,\r\n        uint256 _rebalancingSetQuantity,\r\n        bool _keepChangeInVault\r\n    )\r\n    external;\r\n}\r\n\r\n// File: contracts/xSNXCore.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract xSNXCore is ERC20, ERC20Detailed, Pausable, Ownable {\r\n    address\r\n        private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address private susdAddress;\r\n    address private setAddress;\r\n    address private snxAddress;\r\n    address private setTransferProxy;\r\n\r\n    address private manager;\r\n\r\n    bytes32 constant susd = \"sUSD\";\r\n\r\n    bytes32 constant feePoolName = \"FeePool\";\r\n    bytes32 constant synthetixName = \"Synthetix\";\r\n    bytes32 constant rewardEscrowName = \"RewardEscrow\";\r\n\r\n    uint256 private constant MAX_UINT = 2**256 - 1;\r\n    uint256 private constant LIQUIDATION_WAIT_PERIOD = 3 weeks;\r\n\r\n    ISynthetix private synthetix;\r\n    TradeAccounting private tradeAccounting;\r\n    IAddressResolver private addressResolver;\r\n    IRebalancingSetIssuanceModule private rebalancingModule;\r\n\r\n    uint256 public withdrawableEthFees;\r\n    uint256 public withdrawableSusdFees;\r\n\r\n    uint256 public lastClaimedTimestamp;\r\n\r\n    event Mint(\r\n        address indexed user,\r\n        uint256 timestamp,\r\n        uint256 valueSent,\r\n        uint256 mintAmount,\r\n        bool mintWithEth\r\n    );\r\n    event Burn(\r\n        address indexed user,\r\n        uint256 timestamp,\r\n        uint256 burnAmount,\r\n        uint256 valueToSend\r\n    );\r\n    event RebalanceToSnx(uint256 timestamp, uint256 setSold);\r\n    event RebalanceToHedge(uint256 timestamp, uint256 snxSold);\r\n    event WithdrawFees(uint256 ethAmount, uint256 susdAmount);\r\n\r\n    struct FeeDivisors {\r\n        uint256 mintFee; // not charged on mintWithSnx\r\n        uint256 burnFee;\r\n        uint256 claimFee;\r\n    }\r\n\r\n    FeeDivisors public feeDivisors;\r\n\r\n    constructor(\r\n        address payable _tradeAccountingAddress,\r\n        address _setAddress,\r\n        address _snxAddress,\r\n        address _susdAddress,\r\n        address _setTransferProxy,\r\n        address _addressResolver,\r\n        address _rebalancingModule\r\n    ) public ERC20Detailed(\"xSNX\", \"xSNXa\", 18) {\r\n        tradeAccounting = TradeAccounting(_tradeAccountingAddress);\r\n        setAddress = _setAddress;\r\n        snxAddress = _snxAddress;\r\n        susdAddress = _susdAddress;\r\n        setTransferProxy = _setTransferProxy;\r\n        addressResolver = IAddressResolver(_addressResolver);\r\n        rebalancingModule = IRebalancingSetIssuanceModule(_rebalancingModule);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                     Investor-facing                                       */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice Mint new xSNX tokens from the contract by sending ETH\r\n     * @dev Exchanges ETH for SNX\r\n     * @dev Min rate ETH/SNX sourced from Kyber in JS\r\n     * @dev: Calculates overall fund NAV in ETH terms, using ETH/SNX price (via SNX oracle)\r\n     * @dev: Mints/distributes new xSNX tokens based on contribution to NAV\r\n     * @param: minRate: kyberProxy.getExpectedRate eth=>snx\r\n     */\r\n    function mint(uint256 minRate) external payable whenNotPaused {\r\n        require(msg.value > 0, \"Must send ETH\");\r\n\r\n        uint256 fee = _administerFee(msg.value, feeDivisors.mintFee);\r\n        uint256 ethContribution = msg.value.sub(fee);\r\n        uint256 snxBalanceBefore = tradeAccounting.getSnxBalance();\r\n\r\n        uint256 totalSupply = totalSupply();\r\n        (bool allocateToEth, uint256 nonSnxAssetValue) = tradeAccounting\r\n            .getMintWithEthUtils(ethContribution, totalSupply);\r\n\r\n        if (!allocateToEth) {\r\n            tradeAccounting.swapEtherToToken.value(ethContribution)(\r\n                snxAddress,\r\n                minRate\r\n            );\r\n        }\r\n\r\n        uint256 mintAmount = tradeAccounting.calculateTokensToMintWithEth(\r\n            snxBalanceBefore,\r\n            ethContribution,\r\n            nonSnxAssetValue,\r\n            totalSupply\r\n        );\r\n\r\n        emit Mint(msg.sender, block.timestamp, msg.value, mintAmount, true);\r\n        return super._mint(msg.sender, mintAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Mint new xSNX tokens from the contract by sending SNX\r\n     * @notice Won't run without ERC20 approval\r\n     * @dev: Calculates overall fund NAV in ETH terms, using ETH/SNX price (via SNX oracle)\r\n     * @dev: Mints/distributes new xSNX tokens based on contribution to NAV\r\n     * @param: snxAmount: SNX to contribute\r\n     */\r\n    function mintWithSnx(uint256 snxAmount) external whenNotPaused {\r\n        require(snxAmount > 0, \"Must send SNX\");\r\n        uint256 snxBalanceBefore = tradeAccounting.getSnxBalance();\r\n        IERC20(snxAddress).transferFrom(msg.sender, address(this), snxAmount);\r\n\r\n        uint256 mintAmount = tradeAccounting.calculateTokensToMintWithSnx(\r\n            snxBalanceBefore,\r\n            snxAmount,\r\n            totalSupply()\r\n        );\r\n\r\n        emit Mint(msg.sender, block.timestamp, snxAmount, mintAmount, false);\r\n        return super._mint(msg.sender, mintAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Redeems and burns xSNX tokens and sends ETH to user\r\n     * @dev Checks if ETH reserve is sufficient to settle redeem obligation\r\n     * @dev Will only redeem if ETH reserve is sufficient\r\n     * @param tokensToRedeem\r\n     */\r\n    function burn(uint256 tokensToRedeem) external {\r\n        require(tokensToRedeem > 0, \"Must burn tokens\");\r\n\r\n        uint256 valueToRedeem = tradeAccounting.calculateRedemptionValue(\r\n            totalSupply(),\r\n            tokensToRedeem\r\n        );\r\n\r\n        require(\r\n            tradeAccounting.getEthBalance() > valueToRedeem,\r\n            \"Redeem amount exceeds available liquidity\"\r\n        );\r\n\r\n        uint256 valueToSend = valueToRedeem.sub(\r\n            _administerFee(valueToRedeem, feeDivisors.burnFee)\r\n        );\r\n        super._burn(msg.sender, tokensToRedeem);\r\n        emit Burn(msg.sender, block.timestamp, tokensToRedeem, valueToSend);\r\n\r\n        (bool success, ) = msg.sender.call.value(valueToSend)(\"\");\r\n        require(success, \"Burn transfer failed\");\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                   Fund Management                                         */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice Hedge strategy management function callable by admin\r\n     * @dev Issues synths on Synthetix\r\n     * @dev Exchanges sUSD for Set and ETH in terms defined by tradeAccounting.ETH_TARGET\r\n     * @param mintAmount: susd to mint\r\n     * @param minKyberRates: kyber.getExpectedRate([usdc=>eth, usdc=>currentSetAsset])\r\n     * @param minCurveReturns: curve.get_dy_underlying([(ethAllocation, susd=>usdc), ((mintAmount.sub(ethAllocation)), susd>usdc)])\r\n     * @param ethAllocation: tradeAccounting.getEthAllocationOnHedge(mintAmount)\r\n     */\r\n    function hedge(\r\n        uint256 mintAmount,\r\n        uint256[] calldata minKyberRates,\r\n        uint256[] calldata minCurveReturns,\r\n        uint256 ethAllocation\r\n    ) external onlyOwnerOrManager whenNotPaused {\r\n        _stake(mintAmount);\r\n\r\n        _allocateToEth(ethAllocation, minKyberRates[0], minCurveReturns[0]);\r\n\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        _issueMaxSet(\r\n            mintAmount.sub(ethAllocation),\r\n            minKyberRates[1],\r\n            activeAsset,\r\n            minCurveReturns[1]\r\n        );\r\n    }\r\n\r\n    function _allocateToEth(\r\n        uint256 _susdValue,\r\n        uint256 _minKyberRate,\r\n        uint256 _minCurveReturn\r\n    ) private {\r\n        _swapTokenToEther(\r\n            susdAddress,\r\n            _susdValue,\r\n            _minKyberRate,\r\n            _minCurveReturn\r\n        );\r\n    }\r\n\r\n    function _stake(uint256 mintAmount) private {\r\n        synthetix.issueSynths(mintAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Claims weekly sUSD and SNX rewards\r\n     * @notice Fixes c-ratio if necessary\r\n     * @param susdToBurnToFixCollat: tradeAccounting.calculateSusdToBurnToFixRatioExternal()\r\n     * @param minKyberRates[]: kyber.getExpectedRate[setAsset => usdc, usdc => eth]\r\n     * @param minCurveReturns: curve.get_dy_underlying([(setAssetBalance, usdc=>susd), (susdBalance susd=>usdc)])\r\n     * @param feesClaimable: feePool.isFeesClaimable(address(this)) - on Synthetix contract\r\n     */\r\n    function claim(\r\n        uint256 susdToBurnToFixCollat,\r\n        uint256[] calldata minKyberRates,\r\n        uint256[] calldata minCurveReturns,\r\n        bool feesClaimable\r\n    ) external onlyOwnerOrManager {\r\n        lastClaimedTimestamp = block.timestamp;\r\n\r\n        if (!feesClaimable) {\r\n            _redeemSet(susdToBurnToFixCollat);\r\n            _swapTokenToToken(\r\n                getAssetCurrentlyActiveInSet(),\r\n                getActiveSetAssetBalance(),\r\n                susdAddress,\r\n                minKyberRates[0],\r\n                minCurveReturns[0]\r\n            );\r\n            _burnSynths(getSusdBalance());\r\n        }\r\n\r\n        IFeePool(addressResolver.getAddress(feePoolName)).claimFees();\r\n        withdrawableSusdFees = withdrawableSusdFees.add(\r\n            getSusdBalance().div(feeDivisors.claimFee)\r\n        );\r\n        _swapTokenToEther(\r\n            susdAddress,\r\n            getSusdBalance(),\r\n            minKyberRates[1],\r\n            minCurveReturns[1]\r\n        );\r\n    }\r\n\r\n    function _burnSynths(uint256 _amount) private {\r\n        synthetix.burnSynths(_amount);\r\n    }\r\n\r\n    function _swapTokenToEther(\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        uint256 _minKyberRate,\r\n        uint256 _minCurveReturn\r\n    ) private {\r\n        if (_amount > 0) {\r\n            IERC20(_fromToken).transfer(address(tradeAccounting), _amount);\r\n            tradeAccounting.swapTokenToEther(\r\n                _fromToken,\r\n                _amount,\r\n                _minKyberRate,\r\n                _minCurveReturn\r\n            );\r\n        }\r\n    }\r\n\r\n    function _swapTokenToToken(\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _toToken,\r\n        uint256 _minKyberRate,\r\n        uint256 _minCurveReturn\r\n    ) private {\r\n        IERC20(_fromToken).transfer(address(tradeAccounting), _amount);\r\n        tradeAccounting.swapTokenToToken(\r\n            _fromToken,\r\n            _amount,\r\n            _toToken,\r\n            _minKyberRate,\r\n            _minCurveReturn\r\n        );\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                      Rebalances                                           */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice Called when hedge assets value meaningfully exceeds debt liabilities\r\n     * @dev Hedge assets (Set + ETH) > liabilities (debt) by more than rebalance threshold\r\n     * @param: minRate: kyber.getExpectedRate(activeAsset=>snx)\r\n     */\r\n    function rebalanceTowardsSnx(uint256 minRate) external onlyOwnerOrManager {\r\n        require(\r\n            tradeAccounting.isRebalanceTowardsSnxRequired(),\r\n            \"Rebalance not necessary\"\r\n        );\r\n        (uint256 setToSell, address activeAsset) = tradeAccounting\r\n            .getRebalanceTowardsSnxUtils();\r\n\r\n        _redeemRebalancingSet(setToSell);\r\n\r\n        _swapTokenToToken(\r\n            activeAsset,\r\n            getActiveSetAssetBalance(),\r\n            snxAddress,\r\n            minRate,\r\n            0\r\n        );\r\n\r\n        emit RebalanceToSnx(block.timestamp, setToSell);\r\n    }\r\n\r\n    /*\r\n     * @notice Called when debt value meaningfully exceeds value of hedge assets\r\n     * @notice Allocates fully to ETH reserve\r\n     * @dev `Liabilities (debt) > assets (Set + ETH)` by more than rebalance threshold\r\n     * @param: totalSusdToBurn: tradeAccounting.getRebalanceTowardsHedgeUtils()\r\n     * @param: minKyberRates: kyber.getExpectedRate([activeSetAsset => usdc, snx => eth])\r\n     * @param minCurveReturns: curve.get_dy_underlying([(expectedUsdcBalance, usdc=>susd), (0)])\r\n     * @param: snxToSell: tradeAccounting.getRebalanceTowardsHedgeUtils()\r\n     */\r\n    function rebalanceTowardsHedge(\r\n        uint256 totalSusdToBurn,\r\n        uint256[] calldata minKyberRates,\r\n        uint256[] calldata minCurveReturns,\r\n        uint256 snxToSell\r\n    ) external onlyOwnerOrManager {\r\n        require(\r\n            tradeAccounting.isRebalanceTowardsHedgeRequired(),\r\n            \"Rebalance unnecessary\"\r\n        );\r\n\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        _unwindStakedPosition(\r\n            totalSusdToBurn,\r\n            activeAsset,\r\n            minKyberRates,\r\n            minCurveReturns,\r\n            snxToSell\r\n        );\r\n        emit RebalanceToHedge(block.timestamp, snxToSell);\r\n    }\r\n\r\n    /*\r\n     * @notice Callable whenever ETH bal is less than (hedgeAssets / ETH_TARGET)\r\n     * @dev Rebalances Set holdings to ETH holdings\r\n     * @param minRate: kyber.getExpectedRate(activeAsset => ETH)\r\n     */\r\n    function rebalanceSetToEth(uint256 minRate) external onlyOwnerOrManager {\r\n        uint256 redemptionQuantity = tradeAccounting\r\n            .calculateSetToSellForRebalanceSetToEth();\r\n        _redeemRebalancingSet(redemptionQuantity);\r\n\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        uint256 activeAssetBalance = getActiveSetAssetBalance();\r\n        _swapTokenToEther(activeAsset, activeAssetBalance, minRate, 0);\r\n    }\r\n\r\n    function _unwindStakedPosition(\r\n        uint256 _totalSusdToBurn,\r\n        address _activeAsset,\r\n        uint256[] memory _minKyberRates,\r\n        uint256[] memory _minCurveReturns,\r\n        uint256 _snxToSell\r\n    ) private {\r\n        if (_totalSusdToBurn > 0) {\r\n            _redeemSet(_totalSusdToBurn);\r\n            _swapTokenToToken(\r\n                _activeAsset,\r\n                getActiveSetAssetBalance(),\r\n                susdAddress,\r\n                _minKyberRates[0],\r\n                _minCurveReturns[0]\r\n            );\r\n            _burnSynths(getSusdBalance());\r\n        }\r\n\r\n        _swapTokenToEther(snxAddress, _snxToSell, _minKyberRates[1], 0);\r\n    }\r\n\r\n    /*\r\n     * @notice Exit valve to reduce staked position in favor of liquid ETH\r\n     * @notice Unlikely to be called in the normal course of mgmt\r\n     * @params: refer to `rebalanceToHedge` for descriptions, however params here are discretionary\r\n     */\r\n    function unwindStakedPosition(\r\n        uint256 totalSusdToBurn,\r\n        uint256[] calldata minKyberRates,\r\n        uint256[] calldata minCurveReturns,\r\n        uint256 snxToSell\r\n    ) external onlyOwnerOrManager {\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        _unwindStakedPosition(\r\n            totalSusdToBurn,\r\n            activeAsset,\r\n            minKyberRates,\r\n            minCurveReturns,\r\n            snxToSell\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @notice Emergency exit valve to reduce staked position in favor of liquid ETH\r\n     * in the event of operator failure/incapacitation\r\n     * @dev: Params will depend on current C-RATIO, i.e., may not immediately be able\r\n     * to liquidate all debt and SNX\r\n     * @dev: May be callable multiple times as SNX escrow vests\r\n     */\r\n    function liquidationUnwind(\r\n        uint256 totalSusdToBurn,\r\n        uint256[] calldata minKyberRates,\r\n        uint256[] calldata minCurveReturns,\r\n        uint256 snxToSell\r\n    ) external {\r\n        require(\r\n            lastClaimedTimestamp.add(LIQUIDATION_WAIT_PERIOD) < block.timestamp,\r\n            \"Liquidation not available\"\r\n        );\r\n\r\n        address activeAsset = getAssetCurrentlyActiveInSet();\r\n        _unwindStakedPosition(\r\n            totalSusdToBurn,\r\n            activeAsset,\r\n            minKyberRates,\r\n            minCurveReturns,\r\n            snxToSell\r\n        );\r\n\r\n        uint256 susdBalRemaining = getSusdBalance();\r\n        _swapTokenToEther(susdAddress, susdBalRemaining, 0, 0);\r\n    }\r\n\r\n    /*\r\n     * @notice Unlock escrowed SNX rewards\r\n     * @notice Won't be called until at least a year after deployment\r\n     */\r\n    function vest() public {\r\n        IRewardEscrow rewardEscrow = IRewardEscrow(\r\n            addressResolver.getAddress(rewardEscrowName)\r\n        );\r\n        rewardEscrow.vest();\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                     Set Protocol                                          */\r\n    /* ========================================================================================= */\r\n\r\n    function _issueMaxSet(\r\n        uint256 _susdAmount,\r\n        uint256 _minRate,\r\n        address _activeAsset,\r\n        uint256 _minCurveReturn\r\n    ) private {\r\n        _swapTokenToToken(\r\n            susdAddress,\r\n            _susdAmount,\r\n            _activeAsset,\r\n            _minRate,\r\n            _minCurveReturn\r\n        );\r\n\r\n        uint256 issuanceQuantity = tradeAccounting\r\n            .calculateSetIssuanceQuantity();\r\n        rebalancingModule.issueRebalancingSet(\r\n            setAddress,\r\n            issuanceQuantity,\r\n            false\r\n        );\r\n    }\r\n\r\n    function _redeemSet(uint256 _totalSusdToBurn) private {\r\n        uint256 redemptionQuantity = tradeAccounting\r\n            .calculateSetRedemptionQuantity(_totalSusdToBurn);\r\n        _redeemRebalancingSet(redemptionQuantity);\r\n    }\r\n\r\n    function _redeemRebalancingSet(uint256 _redemptionQuantity) private {\r\n        rebalancingModule.redeemRebalancingSet(\r\n            setAddress,\r\n            _redemptionQuantity,\r\n            false\r\n        );\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                        Utils                                              */\r\n    /* ========================================================================================= */\r\n\r\n    function getAssetCurrentlyActiveInSet() internal view returns (address) {\r\n        return tradeAccounting.getAssetCurrentlyActiveInSet();\r\n    }\r\n\r\n    function getActiveSetAssetBalance() internal view returns (uint256) {\r\n        return tradeAccounting.getActiveSetAssetBalance();\r\n    }\r\n\r\n    function getSusdBalance() internal view returns (uint256) {\r\n        return tradeAccounting.getSusdBalance();\r\n    }\r\n\r\n    function _administerFee(uint256 _value, uint256 _feeDivisor)\r\n        private\r\n        returns (uint256 fee)\r\n    {\r\n        if (_feeDivisor > 0) {\r\n            fee = _value.div(_feeDivisor);\r\n            withdrawableEthFees = withdrawableEthFees.add(fee);\r\n        }\r\n    }\r\n\r\n    function setSynthetixAddress() public {\r\n        address synthetixAddress = addressResolver.getAddress(synthetixName);\r\n        synthetix = ISynthetix(synthetixAddress);\r\n    }\r\n\r\n    function setManagerAddress(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager {\r\n        require(isOwner() || msg.sender == manager, \"Non-admin caller\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice Inverse of fee i.e., a fee divisor of 100 == 1%\r\n     * @notice Three fee types\r\n     * @notice Mint fee never charged on mintWithSnx\r\n     * @dev Mint fee 0 or <= 2%\r\n     * @dev Burn fee 0 or <= 1%\r\n     * @dev Claim fee 0 <= 4%\r\n     */\r\n    function setFeeDivisors(\r\n        uint256 mintFeeDivisor,\r\n        uint256 burnFeeDivisor,\r\n        uint256 claimFeeDivisor\r\n    ) public onlyOwner {\r\n        require(mintFeeDivisor == 0 || mintFeeDivisor >= 50, \"Invalid fee\");\r\n        require(burnFeeDivisor == 0 || burnFeeDivisor >= 100, \"Invalid fee\");\r\n        require(claimFeeDivisor >= 25, \"Invalid fee\");\r\n        feeDivisors.mintFee = mintFeeDivisor;\r\n        feeDivisors.burnFee = burnFeeDivisor;\r\n        feeDivisors.claimFee = claimFeeDivisor;\r\n    }\r\n\r\n    function withdrawFees() public onlyOwner {\r\n        require(\r\n            withdrawableEthFees > 0 || withdrawableSusdFees > 0,\r\n            \"No fees to withdraw\"\r\n        );\r\n\r\n        uint256 ethFeesToWithdraw = withdrawableEthFees;\r\n        uint256 susdFeesToWithdraw = withdrawableSusdFees;\r\n        withdrawableEthFees = 0;\r\n        withdrawableSusdFees = 0;\r\n\r\n        (bool success, ) = msg.sender.call.value(ethFeesToWithdraw)(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        IERC20(susdAddress).transfer(msg.sender, susdFeesToWithdraw);\r\n\r\n        emit WithdrawFees(ethFeesToWithdraw, susdFeesToWithdraw);\r\n    }\r\n\r\n    // approve [setComponentA, setComponentB] on deployment\r\n    function approveSetTransferProxy(address tokenAddress) public onlyOwner {\r\n        IERC20(tokenAddress).approve(setTransferProxy, MAX_UINT);\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender == address(tradeAccounting), \"Incorrect sender\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tradeAccountingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_setAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_snxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_susdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_setTransferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rebalancingModule\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueToSend\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintWithEth\",\"type\":\"bool\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snxSold\",\"type\":\"uint256\"}],\"name\":\"RebalanceToHedge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setSold\",\"type\":\"uint256\"}],\"name\":\"RebalanceToSnx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"approveSetTransferProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToRedeem\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"susdToBurnToFixCollat\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minKyberRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minCurveReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"feesClaimable\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDivisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minKyberRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minCurveReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ethAllocation\",\"type\":\"uint256\"}],\"name\":\"hedge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSusdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minKyberRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minCurveReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"snxToSell\",\"type\":\"uint256\"}],\"name\":\"liquidationUnwind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snxAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithSnx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"rebalanceSetToEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSusdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minKyberRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minCurveReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"snxToSell\",\"type\":\"uint256\"}],\"name\":\"rebalanceTowardsHedge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"rebalanceTowardsSnx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManagerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSynthetixAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSusdToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minKyberRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minCurveReturns\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"snxToSell\",\"type\":\"uint256\"}],\"name\":\"unwindStakedPosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawableEthFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawableSusdFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"xSNXCore","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f449ca5cd54b448d16468d9db128da723f03335600000000000000000000000093e01899c10532d76c0e864537a1d26433dbbddb000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f00000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f51000000000000000000000000882d80d3a191859d64477eb78cca46599307ec1c0000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef2000000000000000000000000ceda8318522d348f1d1aca48b24629b8fbf09020","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3daebbc42e34702cc311dcb1a6d63253b7e53c640ac404e4c75d919c4decefc4"}]}