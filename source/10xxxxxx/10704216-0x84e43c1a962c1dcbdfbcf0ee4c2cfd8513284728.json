{"status":"1","message":"OK","result":[{"SourceCode":"// File: browser/UnipumpErc20Helper.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IUnipumpContest\r\n{\r\n}\r\n// File: browser/IUnipumpStaking.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpStaking\r\n{\r\n    event Stake(address indexed _staker, uint256 _amount, uint256 _epochCount);\r\n    event Reward(address indexed _staker, uint256 _reward);\r\n    event RewardPotIncrease(uint256 _amount);\r\n\r\n    function stakingRewardPot() external view returns (uint256);\r\n    function currentEpoch() external view returns (uint256);\r\n    function nextEpochTimestamp() external view returns (uint256);\r\n    function isActivated() external view returns (bool);\r\n    function secondsUntilCanActivate() external view returns (uint256);\r\n    function totalStaked() external view returns (uint256);\r\n    \r\n    function increaseRewardsPot() external;\r\n    function activate() external;\r\n    function claimRewardsAt(uint256 index) external;\r\n    function claimRewards() external;\r\n    function updateEpoch() external returns (bool);\r\n    function stakeForProfit(uint256 epochCount) external;\r\n}\r\n// File: browser/IUnipumpDrain.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpDrain\r\n{\r\n    function drain(address token) external;\r\n}\r\n// File: browser/IUnipumpEscrow.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpEscrow is IUnipumpDrain\r\n{\r\n    function start() external;\r\n    function available() external view returns (uint256);\r\n}\r\n// File: browser/IUnipumpTradingGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTradingGroup\r\n{\r\n    function leader() external view returns (address);\r\n    function close() external;\r\n    function closeWithNonzeroTokenBalances() external;\r\n    function anyNonzeroTokenBalances() external view returns (bool);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function maxSecondsRemaining() external view returns (uint256);\r\n    function group() external view returns (IUnipumpGroup);\r\n    function externalBalanceChanges(address token) external view returns (bool);\r\n\r\n    function startTime() external view returns (uint256);\r\n    function endTime() external view returns (uint256);\r\n    function maxEndTime() external view returns (uint256);\r\n\r\n    function startingWethBalance() external view returns (uint256);\r\n    function finalWethBalance() external view returns (uint256);\r\n    function leaderWethProfitPayout() external view returns (uint256);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n        \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external;\r\n\r\n    function withdraw(address token) external;\r\n}\r\n// File: browser/IUnipumpTokenList.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTokenList\r\n{\r\n    function parentList() external view returns (IUnipumpTokenList);\r\n    function isLocked() external view returns (bool);\r\n    function tokens(uint256 index) external view returns (address);\r\n    function exists(address token) external view returns (bool);\r\n    function tokenCount() external view returns (uint256);\r\n\r\n    function lock() external;\r\n    function add(address token) external;\r\n    function addMany(address[] calldata _tokens) external;\r\n    function remove(address token) external;    \r\n}\r\n// File: browser/IUnipumpGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroup \r\n{\r\n    function contribute() external payable;\r\n    function abort() external;\r\n    function startPumping() external;\r\n    function isActive() external view returns (bool);\r\n    function withdraw() external;\r\n    function leader() external view returns (address);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function leaderUppCollateral() external view returns (uint256);\r\n    function requiredMemberUppFee() external view returns (uint256);\r\n    function minEthToJoin() external view returns (uint256);\r\n    function minEthToStart() external view returns (uint256);\r\n    function maxEthAcceptable() external view returns (uint256);\r\n    function maxRunTimeSeconds() external view returns (uint256);\r\n    function leaderProfitShareOutOf10000() external view returns (uint256);\r\n    function memberCount() external view returns (uint256);\r\n    function members(uint256 at) external view returns (address);\r\n    function contributions(address member) external view returns (uint256);\r\n    function totalContributions() external view returns (uint256);\r\n    function aborted() external view returns (bool);\r\n    function tradingGroup() external view returns (IUnipumpTradingGroup);\r\n}\r\n// File: browser/IUnipumpGroupFactory.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupFactory \r\n{\r\n    function createGroup(\r\n        address leader,\r\n        IUnipumpTokenList unipumpTokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup unipumpGroup);\r\n}\r\n// File: browser/IUnipumpGroupManager.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupManager\r\n{\r\n    function groupLeaders(uint256 at) external view returns (address);\r\n    function groupLeaderCount() external view returns (uint256);\r\n    function groups(uint256 at) external view returns (IUnipumpGroup);\r\n    function groupCount() external view returns (uint256);\r\n    function groupCountByLeader(address leader) external view returns (uint256);\r\n    function groupsByLeader(address leader, uint256 at) external view returns (IUnipumpGroup);\r\n\r\n    function createGroup(\r\n        IUnipumpTokenList tokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup group);\r\n}\r\n// File: browser/openzeppelin/IERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: browser/IUnipump.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipump is IERC20 {\r\n    event Sale(bool indexed _saleActive);\r\n    event LiquidityCrisis();\r\n\r\n    function WETH() external view returns (address);\r\n    \r\n    function groupManager() external view returns (IUnipumpGroupManager);\r\n    function escrow() external view returns (IUnipumpEscrow);\r\n    function staking() external view returns (IUnipumpStaking);\r\n    function contest() external view returns (IUnipumpContest);\r\n\r\n    function init(\r\n        IUnipumpEscrow _escrow,\r\n        IUnipumpStaking _staking) external;\r\n    function startUnipumpSale(uint256 _tokensPerEth, uint256 _maxSoldEth) external;\r\n    function start(\r\n        IUnipumpGroupManager _groupManager,\r\n        IUnipumpContest _contest) external;\r\n\r\n    function isSaleActive() external view returns (bool);\r\n    function tokensPerEth() external view returns (uint256);\r\n    function maxSoldEth() external view returns (uint256);\r\n    function soldEth() external view returns (uint256);\r\n    \r\n    function buy() external payable;\r\n    \r\n    function minSecondsUntilLiquidityCrisis() external view returns (uint256);\r\n    function createLiquidityCrisis() external payable;\r\n}\r\n// File: browser/openzeppelin/SafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract UnipumpErc20Helper\r\n{\r\n    function transferMax(address token, address from, address to) \r\n        internal\r\n        returns (uint256 amountTransferred)\r\n    {\r\n        uint256 balance = IERC20(token).balanceOf(from);\r\n        if (balance == 0) { return 0; }\r\n        uint256 allowed = IERC20(token).allowance(from, to);\r\n        amountTransferred = allowed > balance ? balance : allowed;\r\n        if (amountTransferred == 0) { return 0; }\r\n        require (IERC20(token).transferFrom(from, to, amountTransferred), \"Transfer failed\");\r\n    }\r\n}\r\n// File: browser/UnipumpDrain.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract UnipumpDrain is IUnipumpDrain\r\n{\r\n    address payable immutable drainTarget;\r\n\r\n    constructor()\r\n    {\r\n        drainTarget = msg.sender;\r\n    }\r\n\r\n    function drain(address token)\r\n        public\r\n        override\r\n    {\r\n        uint256 amount;\r\n        if (token == address(0))\r\n        {\r\n            require (address(this).balance > 0, \"Nothing to send\");\r\n            amount = _drainAmount(token, address(this).balance);\r\n            require (amount > 0, \"Nothing allowed to send\");\r\n            (bool success,) = drainTarget.call{ value: amount }(\"\");\r\n            require (success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        amount = IERC20(token).balanceOf(address(this));\r\n        require (amount > 0, \"Nothing to send\");\r\n        amount = _drainAmount(token, amount);\r\n        require (amount > 0, \"Nothing allowed to send\");\r\n        require (IERC20(token).transfer(drainTarget, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function _drainAmount(address token, uint256 available) internal virtual returns (uint256 amount);\r\n}\r\n// File: browser/IUnipumpContest.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: browser/UnipumpStaking.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UnipumpStaking is IUnipumpStaking, UnipumpDrain, UnipumpErc20Helper\r\n{    \r\n    using SafeMath for uint256;\r\n    \r\n    struct StakedCoinInfo \r\n    {\r\n        uint256 amount;\r\n        uint256 fractionalFirstEpochAmount;\r\n        uint256 stakeUntilEpoch;\r\n        uint256 stakingEpoch;\r\n        uint256 epochRewardsClaimed;\r\n    }\r\n    struct EpochRewardInfo \r\n    {\r\n        uint256 totalReward;\r\n        uint256 totalStaked;\r\n    }\r\n\r\n    IUnipump immutable unipump;\r\n\r\n    mapping (address => StakedCoinInfo[]) stakedTokens;\r\n    uint256 public override currentEpoch;\r\n    uint256 public override nextEpochTimestamp;\r\n    uint256 constant epochSeconds = 60 * 60 * 24; // 1 day = 1 epoch\r\n    EpochRewardInfo[] epochRewards;\r\n    uint256 public override totalStaked;\r\n    uint256 totalStakedFractionalFirstEpoch;\r\n    uint256 public override stakingRewardPot;\r\n    uint256 minStakingActivationTime;\r\n\r\n    constructor (\r\n        IUnipump _unipump,\r\n        uint256 _seconds\r\n    ) \r\n    {\r\n        require (address(_unipump) != address(0));\r\n        unipump = _unipump;\r\n        minStakingActivationTime = block.timestamp + _seconds;\r\n    }\r\n\r\n    receive()\r\n        external\r\n        payable\r\n    {\r\n    }\r\n\r\n    modifier epochUpToDate() { while (!updateEpoch()) { } _; }\r\n    modifier stakingActivated() { require (nextEpochTimestamp != 0, \"Staking is not yet available\"); _; }\r\n\r\n    function activate() \r\n        public\r\n        override\r\n    {\r\n        require (nextEpochTimestamp == 0, \"Staking is already activated\");\r\n        require (minStakingActivationTime > 0 && block.timestamp >= minStakingActivationTime, \"Staking is not yet available\");\r\n        nextEpochTimestamp = block.timestamp + epochSeconds;\r\n    }\r\n\r\n    function increaseRewardsPot() \r\n        public\r\n        override\r\n    {\r\n        uint256 amount = transferMax(address(unipump), msg.sender, address(this));\r\n        stakingRewardPot += amount;\r\n        emit RewardPotIncrease(amount);\r\n    }\r\n\r\n    function secondsUntilCanActivate()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 min = minStakingActivationTime;\r\n        if (block.timestamp >= min) { return 0; }\r\n        return min - block.timestamp;\r\n    }\r\n\r\n    function isActivated()\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return nextEpochTimestamp != 0;\r\n    }\r\n\r\n    function updateEpoch() \r\n        public \r\n        override\r\n        stakingActivated()\r\n        returns (bool upToDate) \r\n    {\r\n        uint256 next = nextEpochTimestamp;\r\n        if (block.timestamp < next) { return true; }\r\n        uint256 epoch = currentEpoch++;\r\n        next += epochSeconds;\r\n        nextEpochTimestamp = next;\r\n        uint256 pot = stakingRewardPot;\r\n        uint256 reward = \r\n            epoch < 20 ? pot * 3 / 100 :\r\n            epoch < 40 ? pot * 2 / 100 :\r\n            pot / 100;\r\n        epochRewards.push();\r\n        epochRewards[epoch].totalReward = reward;\r\n        epochRewards[epoch].totalStaked = totalStakedFractionalFirstEpoch;\r\n        stakingRewardPot = pot - reward;\r\n        totalStakedFractionalFirstEpoch = totalStaked;\r\n        return block.timestamp < next;\r\n    }\r\n   \r\n    function stakeForProfit(uint256 epochCount) \r\n        public\r\n        override\r\n        stakingActivated()\r\n        epochUpToDate()\r\n    {\r\n        require (epochCount > 0, \"Tokens must be staked until at least the next epoch\");\r\n        require (epochCount <= 3650, \"Tokens cannot be staked this long\");\r\n\r\n        uint256 amount = transferMax(address(unipump), msg.sender, address(this));\r\n        require (amount > 0, \"No UPP tokens have been authorized for transfer\");\r\n        \r\n        uint256 len = stakedTokens[msg.sender].length;\r\n        uint256 epoch = currentEpoch;\r\n        uint256 fractional = amount.mul(nextEpochTimestamp - block.timestamp) / epochSeconds;\r\n        stakedTokens[msg.sender].push();\r\n        stakedTokens[msg.sender][len].amount = amount;\r\n        stakedTokens[msg.sender][len].fractionalFirstEpochAmount = fractional;\r\n        stakedTokens[msg.sender][len].stakeUntilEpoch = epoch + epochCount;\r\n        stakedTokens[msg.sender][len].stakingEpoch = epoch;\r\n        totalStaked += amount;\r\n        totalStakedFractionalFirstEpoch += fractional;\r\n\r\n        emit Stake(msg.sender, amount, epochCount);\r\n    }\r\n    \r\n    // This is a backup in case claimRewards runs out of gas\r\n    function claimRewardsAt(uint256 index) \r\n        public\r\n        override\r\n        epochUpToDate()\r\n    {\r\n        uint256 len = stakedTokens[msg.sender].length;\r\n        require (index < len, \"There are no staked tokens\");\r\n        \r\n        uint256 claimCount = stakedTokens[msg.sender][index].epochRewardsClaimed;\r\n        uint256 firstEpoch = stakedTokens[msg.sender][index].stakingEpoch;\r\n        uint256 epoch = currentEpoch;\r\n        uint256 claimingEpoch = firstEpoch + claimCount;\r\n        require (epoch > claimingEpoch, \"Rewards are not available until the end of the epoch\");\r\n\r\n        uint256 amountStaked = stakedTokens[msg.sender][index].amount;\r\n        bool expired = epoch >= stakedTokens[msg.sender][index].stakeUntilEpoch;\r\n        uint256 reward = claimCount == 0 ? stakedTokens[msg.sender][index].fractionalFirstEpochAmount : amountStaked;\r\n        reward = reward.mul(epochRewards[claimingEpoch].totalReward) / epochRewards[claimingEpoch].totalStaked;\r\n        if (expired) {\r\n            reward += amountStaked;\r\n            if (len - 1 != index) {\r\n                stakedTokens[msg.sender][index] = stakedTokens[msg.sender][len - 1];                \r\n            }\r\n            stakedTokens[msg.sender].pop();\r\n            totalStaked -= amountStaked;\r\n            totalStakedFractionalFirstEpoch -= amountStaked;\r\n        }\r\n        else {\r\n            stakedTokens[msg.sender][index].epochRewardsClaimed = claimCount + 1;\r\n        }\r\n\r\n        unipump.transfer(msg.sender, reward);\r\n\r\n        emit Reward(msg.sender, reward);\r\n    }\r\n\r\n    function claimRewards()\r\n        public\r\n        override\r\n        epochUpToDate()\r\n    {\r\n        uint256 len = stakedTokens[msg.sender].length;\r\n        require (len > 0, \"There are no staked tokens\");\r\n        uint256 epoch = currentEpoch;\r\n        uint256 index = len;\r\n\r\n        uint256 removed = 0;\r\n        uint256 totalReward = 0;\r\n\r\n        while (index-- > 0)\r\n        {\r\n            uint256 claimCount = stakedTokens[msg.sender][index].epochRewardsClaimed;\r\n            uint256 firstEpoch = stakedTokens[msg.sender][index].stakingEpoch;\r\n            uint256 claimingEpoch = firstEpoch + claimCount;\r\n            if (claimingEpoch >= epoch) { continue; }\r\n            \r\n            uint256 amountStaked = stakedTokens[msg.sender][index].amount;\r\n            bool expired = epoch >= stakedTokens[msg.sender][index].stakeUntilEpoch;\r\n            \r\n            for (; claimingEpoch < epoch; ++claimingEpoch) {\r\n                uint256 reward = claimCount++ == 0 ? stakedTokens[msg.sender][index].fractionalFirstEpochAmount : amountStaked;\r\n                reward = reward.mul(epochRewards[claimingEpoch].totalReward) / epochRewards[claimingEpoch].totalStaked;\r\n                if (expired) {\r\n                    reward += amountStaked;\r\n                    if (len - 1 != index) {\r\n                        stakedTokens[msg.sender][index] = stakedTokens[msg.sender][len - 1];                \r\n                    }\r\n                    stakedTokens[msg.sender].pop();\r\n                    removed += amountStaked;\r\n                    removed += amountStaked;\r\n                }\r\n                totalReward += reward;\r\n            }\r\n            if (!expired) { stakedTokens[msg.sender][index].epochRewardsClaimed = claimCount; }\r\n        }\r\n        totalStaked -= removed;\r\n        totalStakedFractionalFirstEpoch -= removed;\r\n\r\n        unipump.transfer(msg.sender, totalReward);\r\n        emit Reward(msg.sender, totalReward);\r\n    }\r\n\r\n    function _drainAmount(address token, uint256 available) \r\n        internal \r\n        override \r\n        view\r\n        returns (uint256 amount) \r\n    { \r\n        // Unipump is for staking.  Anything else can be drained.\r\n        amount = token == address(unipump) ? 0 : available; \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUnipump\",\"name\":\"_unipump\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardPotIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochCount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseRewardsPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsUntilCanActivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochCount\",\"type\":\"uint256\"}],\"name\":\"stakeForProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upToDate\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnipumpStaking","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ce25b4271cc4d937a7d9bf75b2068a7892b9961d0000000000000000000000000000000000000000000000000000000000278d00","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e39202636c67bae8d36044215d8268b937fad051ab76bf810bc52d9903cbf7d"}]}