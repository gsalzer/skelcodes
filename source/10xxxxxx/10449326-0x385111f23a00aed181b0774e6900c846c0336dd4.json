{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title Auction NToken contract \r\n * @dev Auction for listing and generating NToken\r\n */\r\ncontract Nest_NToken_TokenAuction {\r\n    using SafeMath for uint256;\r\n    using address_make_payable for address;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    Nest_3_VoteFactory _voteFactory;                            //  Voting contract\r\n    Nest_NToken_TokenMapping _tokenMapping;                     //  NToken mapping contract\r\n    ERC20 _nestToken;                                           //  NestToken\r\n    Nest_3_OfferPrice _offerPrice;                              //  Price contract\r\n    address _destructionAddress;                                //  Destruction contract address\r\n    uint256 _duration = 5 days;                                 //  Auction duration\r\n    uint256 _minimumNest = 100000 ether;                        //  Minimum auction amount\r\n    uint256 _tokenNum = 1;                                      //  Auction token number\r\n    uint256 _incentiveRatio = 50;                               //  Incentive ratio\r\n    uint256 _minimumInterval = 10000 ether;                     //  Minimum auction interval\r\n    mapping(address => AuctionInfo) _auctionList;               //  Auction list\r\n    mapping(address => bool) _tokenBlackList;                   //  Auction blacklist\r\n    struct AuctionInfo {\r\n        uint256 endTime;                                        //  End time \r\n        uint256 auctionValue;                                   //  Auction price\r\n        address latestAddress;                                  //  Highest auctioneer\r\n        uint256 latestAmount;                                   //  Lastest auction amount \r\n    }\r\n    address[] _allAuction;                                      //  Auction list array\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor (address voteFactory) public {\r\n        Nest_3_VoteFactory voteFactoryMap = Nest_3_VoteFactory(address(voteFactory));\r\n        _voteFactory = voteFactoryMap;\r\n        _tokenMapping = Nest_NToken_TokenMapping(address(voteFactoryMap.checkAddress(\"nest.nToken.tokenMapping\")));\r\n        _nestToken = ERC20(address(voteFactoryMap.checkAddress(\"nest\")));\r\n        _destructionAddress = address(voteFactoryMap.checkAddress(\"nest.v3.destruction\"));\r\n        _offerPrice = Nest_3_OfferPrice(address(voteFactoryMap.checkAddress(\"nest.v3.offerPrice\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n        Nest_3_VoteFactory voteFactoryMap = Nest_3_VoteFactory(address(voteFactory));\r\n        _voteFactory = voteFactoryMap;\r\n        _tokenMapping = Nest_NToken_TokenMapping(address(voteFactoryMap.checkAddress(\"nest.nToken.tokenMapping\")));\r\n        _nestToken = ERC20(address(voteFactoryMap.checkAddress(\"nest\")));\r\n        _destructionAddress = address(voteFactoryMap.checkAddress(\"nest.v3.destruction\"));\r\n        _offerPrice = Nest_3_OfferPrice(address(voteFactoryMap.checkAddress(\"nest.v3.offerPrice\")));\r\n    }\r\n    \r\n    /**\r\n    * @dev Initiating auction\r\n    * @param token Auction token address\r\n    * @param auctionAmount Initial auction amount\r\n    */\r\n    function startAnAuction(address token, uint256 auctionAmount) public {\r\n        require(_tokenMapping.checkTokenMapping(token) == address(0x0), \"Token already exists\");\r\n        require(_auctionList[token].endTime == 0, \"Token is on sale\");\r\n        require(auctionAmount >= _minimumNest, \"AuctionAmount less than the minimum auction amount\");\r\n        require(_nestToken.transferFrom(address(msg.sender), address(this), auctionAmount), \"Authorization failed\");\r\n        require(!_tokenBlackList[token]);\r\n        // Verification\r\n        ERC20 tokenERC20 = ERC20(token);\r\n        tokenERC20.safeTransferFrom(address(msg.sender), address(this), 1);\r\n        require(tokenERC20.balanceOf(address(this)) >= 1);\r\n        tokenERC20.safeTransfer(address(msg.sender), 1);\r\n        AuctionInfo memory thisAuction = AuctionInfo(now.add(_duration), auctionAmount, address(msg.sender), auctionAmount);\r\n        _auctionList[token] = thisAuction;\r\n        _allAuction.push(token);\r\n    }\r\n    \r\n    /**\r\n    * @dev Auction\r\n    * @param token Auction token address \r\n    * @param auctionAmount Auction amount\r\n    */\r\n    function continueAuction(address token, uint256 auctionAmount) public {\r\n        require(now <= _auctionList[token].endTime && _auctionList[token].endTime != 0, \"Auction closed\");\r\n        require(auctionAmount > _auctionList[token].auctionValue, \"Insufficient auction amount\");\r\n        uint256 subAuctionAmount = auctionAmount.sub(_auctionList[token].auctionValue);\r\n        require(subAuctionAmount >= _minimumInterval);\r\n        uint256 excitation = subAuctionAmount.mul(_incentiveRatio).div(100);\r\n        require(_nestToken.transferFrom(address(msg.sender), address(this), auctionAmount), \"Authorization failed\");\r\n        require(_nestToken.transfer(_auctionList[token].latestAddress, _auctionList[token].auctionValue.add(excitation)), \"Transfer failure\");\r\n        // Update auction information\r\n        _auctionList[token].auctionValue = auctionAmount;\r\n        _auctionList[token].latestAddress = address(msg.sender);\r\n        _auctionList[token].latestAmount = _auctionList[token].latestAmount.add(subAuctionAmount.sub(excitation));\r\n    }\r\n    \r\n    /**\r\n    * @dev Listing\r\n    * @param token Auction token address\r\n    */\r\n    function auctionSuccess(address token) public {\r\n        Nest_3_TokenAbonus nestAbonus = Nest_3_TokenAbonus(_voteFactory.checkAddress(\"nest.v3.tokenAbonus\"));\r\n        uint256 nowTime = now;\r\n        uint256 nextTime = nestAbonus.getNextTime();\r\n        uint256 timeLimit = nestAbonus.checkTimeLimit();\r\n        uint256 getAbonusTimeLimit = nestAbonus.checkGetAbonusTimeLimit();\r\n        require(!(nowTime >= nextTime.sub(timeLimit) && nowTime <= nextTime.sub(timeLimit).add(getAbonusTimeLimit)), \"Not time to auctionSuccess\");\r\n        require(nowTime > _auctionList[token].endTime && _auctionList[token].endTime != 0, \"Token is on sale\");\r\n        //  Initialize NToken\r\n        Nest_NToken nToken = new Nest_NToken(strConcat(\"NToken\", getAddressStr(_tokenNum)), strConcat(\"N\", getAddressStr(_tokenNum)), address(_voteFactory), address(_auctionList[token].latestAddress));\r\n        //  Auction NEST destruction\r\n        require(_nestToken.transfer(_destructionAddress, _auctionList[token].latestAmount), \"Transfer failure\");\r\n        //  Add NToken mapping\r\n        _tokenMapping.addTokenMapping(token, address(nToken));\r\n        //  Initialize charging parameters\r\n        _offerPrice.addPriceCost(token);\r\n        _tokenNum = _tokenNum.add(1);\r\n    }\r\n    \r\n    function strConcat(string memory _a, string memory _b) public pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length);\r\n        bytes memory bret = bytes(ret);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) {\r\n            bret[k++] = _ba[i];\r\n        } \r\n        for (uint i = 0; i < _bb.length; i++) {\r\n            bret[k++] = _bb[i];\r\n        } \r\n        return string(ret);\r\n    } \r\n    \r\n    // Convert to 4-digit string\r\n    function getAddressStr(uint256 iv) public pure returns (string memory) {\r\n        bytes memory buf = new bytes(64);\r\n        uint256 index = 0;\r\n        do {\r\n            buf[index++] = byte(uint8(iv % 10 + 48));\r\n            iv /= 10;\r\n        } while (iv > 0 || index < 4);\r\n        bytes memory str = new bytes(index);\r\n        for(uint256 i = 0; i < index; ++i) {\r\n            str[i] = buf[index - i - 1];\r\n        }\r\n        return string(str);\r\n    }\r\n    \r\n    // Check auction duration\r\n    function checkDuration() public view returns(uint256) {\r\n        return _duration;\r\n    }\r\n    \r\n    // Check minimum auction amount\r\n    function checkMinimumNest() public view returns(uint256) {\r\n        return _minimumNest;\r\n    }\r\n    \r\n    // Check initiated number of auction tokens\r\n    function checkAllAuctionLength() public view returns(uint256) {\r\n        return _allAuction.length;\r\n    }\r\n    \r\n    // View auctioned token addresses\r\n    function checkAuctionTokenAddress(uint256 num) public view returns(address) {\r\n        return _allAuction[num];\r\n    }\r\n    \r\n    // View auction blacklist\r\n    function checkTokenBlackList(address token) public view returns(bool) {\r\n        return _tokenBlackList[token];\r\n    }\r\n    \r\n    // View auction token information\r\n    function checkAuctionInfo(address token) public view returns(uint256 endTime, uint256 auctionValue, address latestAddress) {\r\n        AuctionInfo memory info = _auctionList[token];\r\n        return (info.endTime, info.auctionValue, info.latestAddress);\r\n    }\r\n    \r\n    // View token number\r\n    function checkTokenNum() public view returns (uint256) {\r\n        return _tokenNum;\r\n    }\r\n    \r\n    // Modify auction duration\r\n    function changeDuration(uint256 num) public onlyOwner {\r\n        _duration = num.mul(1 days);\r\n    }\r\n    \r\n    // Modify minimum auction amount\r\n    function changeMinimumNest(uint256 num) public onlyOwner {\r\n        _minimumNest = num;\r\n    }\r\n    \r\n    // Modify auction blacklist\r\n    function changeTokenBlackList(address token, bool isBlack) public onlyOwner {\r\n        _tokenBlackList[token] = isBlack;\r\n    }\r\n    \r\n    // Administrator only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\n// Bonus logic contract\r\ninterface Nest_3_TokenAbonus {\r\n    // View next bonus time \r\n    function getNextTime() external view returns (uint256);\r\n    // View bonus period \r\n    function checkTimeLimit() external view returns (uint256);\r\n    // View duration of triggering calculation of bonus\r\n    function checkGetAbonusTimeLimit() external view returns (uint256);\r\n}\r\n\r\n//  voting contract \r\ninterface Nest_3_VoteFactory {\r\n    //  Check address \r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t//  check whether the administrator \r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title NToken contract \r\n * @dev Include standard erc20 method, mining method, and mining data \r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Nest_NToken is IERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _balances;                                 //  Balance ledger \r\n    mapping (address => mapping (address => uint256)) private _allowed;             //  Approval ledger \r\n    uint256 private _totalSupply = 0 ether;                                         //  Total supply \r\n    string public name;                                                             //  Token name \r\n    string public symbol;                                                           //  Token symbol \r\n    uint8 public decimals = 18;                                                     //  Precision\r\n    uint256 public _createBlock;                                                    //  Create block number\r\n    uint256 public _recentlyUsedBlock;                                              //  Recently used block number\r\n    Nest_3_VoteFactory _voteFactory;                                                //  Voting factory contract\r\n    address _bidder;                                                                //  Owner\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param _name Token name\r\n    * @param _symbol Token symbol\r\n    * @param voteFactory Voting factory contract address\r\n    * @param bidder Successful bidder address\r\n    */\r\n    constructor (string memory _name, string memory _symbol, address voteFactory, address bidder) public {\r\n    \tname = _name;                                                               \r\n    \tsymbol = _symbol;\r\n    \t_createBlock = block.number;\r\n    \t_recentlyUsedBlock = block.number;\r\n    \t_voteFactory = Nest_3_VoteFactory(address(voteFactory));\r\n    \t_bidder = bidder;\r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping (address voteFactory) public onlyOwner {\r\n    \t_voteFactory = Nest_3_VoteFactory(address(voteFactory));\r\n    }\r\n    \r\n    /**\r\n    * @dev Additional issuance\r\n    * @param value Additional issuance amount\r\n    */\r\n    function increaseTotal(uint256 value) public {\r\n        address offerMain = address(_voteFactory.checkAddress(\"nest.nToken.offerMain\"));\r\n        require(address(msg.sender) == offerMain, \"No authority\");\r\n        _balances[offerMain] = _balances[offerMain].add(value);\r\n        _totalSupply = _totalSupply.add(value);\r\n        _recentlyUsedBlock = block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the total amount of tokens\r\n    * @return Total supply\r\n    */\r\n    function totalSupply() override public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Check address balance\r\n    * @param owner Address to be checked\r\n    * @return Return the balance of the corresponding address\r\n    */\r\n    function balanceOf(address owner) override public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    /**\r\n    * @dev Check block information\r\n    * @return createBlock Initial block number\r\n    * @return recentlyUsedBlock Recently mined and issued block\r\n    */\r\n    function checkBlockInfo() public view returns(uint256 createBlock, uint256 recentlyUsedBlock) {\r\n        return (_createBlock, _recentlyUsedBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Check owner's approved allowance to the spender\r\n     * @param owner Approving address\r\n     * @param spender Approved address\r\n     * @return Approved amount\r\n     */\r\n    function allowance(address owner, address spender) override public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer method\r\n    * @param to Transfer target\r\n    * @param value Transfer amount\r\n    * @return Whether the transfer is successful\r\n    */\r\n    function transfer(address to, uint256 value) override public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approval method\r\n     * @param spender Approval target\r\n     * @param value Approval amount\r\n     * @return Whether the approval is successful\r\n     */\r\n    function approve(address spender, uint256 value) override public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens when approved\r\n     * @param from Transfer-out account address\r\n     * @param to Transfer-in account address\r\n     * @param value Transfer amount\r\n     * @return Whether approved transfer is successful\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the allowance\r\n     * @param spender Approval target\r\n     * @param addedValue Amount to increase\r\n     * @return whether increase is successful\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the allowance\r\n     * @param spender Approval target\r\n     * @param subtractedValue Amount to decrease\r\n     * @return Whether decrease is successful\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer method\r\n    * @param to Transfer target\r\n    * @param value Transfer amount\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Check the creator\r\n    * @return Creator address\r\n    */\r\n    function checkBidder() public view returns(address) {\r\n        return _bidder;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer creator\r\n    * @param bidder New creator address\r\n    */\r\n    function changeBidder(address bidder) public {\r\n        require(address(msg.sender) == _bidder);\r\n        _bidder = bidder; \r\n    }\r\n    \r\n    // Administrator only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\n// NToken mapping contract\r\ninterface Nest_NToken_TokenMapping {\r\n    //  Add mapping\r\n    function addTokenMapping(address token, address nToken) external;\r\n    function checkTokenMapping(address token) external view returns (address);\r\n}\r\n\r\n// Price contract\r\ninterface Nest_3_OfferPrice {\r\n    function addPriceCost(address tokenAddress) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"auctionSuccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeMinimumNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlack\",\"type\":\"bool\"}],\"name\":\"changeTokenBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllAuctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkAuctionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"latestAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"checkAuctionTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMinimumNest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkTokenBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"}],\"name\":\"continueAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iv\",\"type\":\"uint256\"}],\"name\":\"getAddressStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"}],\"name\":\"startAnAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Nest_NToken_TokenAuction","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77fbc4c43be639771459c32f3318282a620b89dd6d1b33464e078d434d771da1"}]}