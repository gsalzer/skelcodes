{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/SalesManagement.sol\n\npragma solidity 0.6.4;\n\ncontract SalesManagement {\n\n  address payable private adminAddress;\n  uint64 minPrice;\n\n  mapping(string => bool) contents;\n  mapping(string => mapping (address => bool)) private buyers;\n  mapping(string => address payable) private sellers;\n\n  event BuyContents(string cid, uint64 price, address seller, address buyer);\n\n  function initialize() public {\n    adminAddress = 0x4aBF3F2730963Aa034E9A146D1018928E1bb6485;\n    minPrice = 1;\n  }\n\n  function buyContents(\n    bytes32 r,\n    bytes32 s,\n    uint8 v,\n    bytes calldata metadata\n  ) external payable {\n    bytes32 metahash = keccak256(metadata);\n    require(ecrecover(metahash, v, r, s) == adminAddress, 'Signer address is not admin address');\n\n    bytes memory bytesPrice = bytes(metadata[78:]);\n    uint64 price = abi.decode(bytesPrice, (uint64));\n    require(price > minPrice);\n    require(price >= msg.value, 'The payment amount is small');\n\n    bytes memory bytesCid = bytes(metadata[:46]);\n    string memory cid = string(bytesCid);\n\n    bytes memory bytesSeller = bytes(metadata[46:78]);\n    address payable seller = abi.decode(bytesSeller,(address));\n    \n    if(!contents[cid]) {\n      setSeller(cid, seller);\n      contents[cid] = true;\n    }\n\n    buyers[cid][msg.sender] = true;\n    sellers[cid].transfer(msg.value);\n\n    emit BuyContents(cid, price, seller, msg.sender);\n  }\n\n  function setSeller(string memory cid, address payable seller) private {\n    sellers[cid] = seller;\n  }\n\n  function isBought(string memory cid, address buyer) public view returns (bool) {\n    return buyers[cid][buyer];\n  }\n\n  function changeMinPrice(uint64 _minPrice) public {\n    minPrice = _minPrice;\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyContents\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"buyContents\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minPrice\",\"type\":\"uint64\"}],\"name\":\"changeMinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"isBought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SalesManagement","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}