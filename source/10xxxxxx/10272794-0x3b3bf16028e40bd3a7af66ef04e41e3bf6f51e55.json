{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/utility/TokenHandler.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\ncontract TokenHandler {\r\n    bytes4 private constant APPROVE_FUNC_SELECTOR = bytes4(keccak256(\"approve(address,uint256)\"));\r\n    bytes4 private constant TRANSFER_FUNC_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\r\n    bytes4 private constant TRANSFER_FROM_FUNC_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `approve` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _spender approved address\r\n      * @param _value   allowance amount\r\n    */\r\n    function safeApprove(IERC20Token _token, address _spender, uint256 _value) public {\r\n       execute(_token, abi.encodeWithSelector(APPROVE_FUNC_SELECTOR, _spender, _value));\r\n    }\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `transfer` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _to      target address\r\n      * @param _value   transfer amount\r\n    */\r\n    function safeTransfer(IERC20Token _token, address _to, uint256 _value) public {\r\n       execute(_token, abi.encodeWithSelector(TRANSFER_FUNC_SELECTOR, _to, _value));\r\n    }\r\n\r\n    /**\r\n      * @dev executes the ERC20 token's `transferFrom` function and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _from    source address\r\n      * @param _to      target address\r\n      * @param _value   transfer amount\r\n    */\r\n    function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) public {\r\n       execute(_token, abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));\r\n    }\r\n\r\n    /**\r\n      * @dev executes a function on the ERC20 token and reverts upon failure\r\n      * the main purpose of this function is to prevent a non standard ERC20 token\r\n      * from failing silently\r\n      *\r\n      * @param _token   ERC20 token address\r\n      * @param _data    data to pass in to the token's contract for execution\r\n    */\r\n    function execute(IERC20Token _token, bytes memory _data) private {\r\n        uint256[1] memory ret = [uint256(1)];\r\n\r\n        assembly {\r\n            let success := call(\r\n                gas,            // gas remaining\r\n                _token,         // destination address\r\n                0,              // no ether\r\n                add(_data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n                mload(_data),   // input length (loaded from the first 32 bytes in the `data` array)\r\n                ret,            // output buffer\r\n                32              // output length\r\n            )\r\n            if iszero(success) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        require(ret[0] != 0, \"ERR_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/utility/ContractRegistryClient.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\r\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\r\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        _only(_contractName);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _only(bytes32 _contractName) internal view {\r\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      *\r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(_registry) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\r\n\r\n        // get the new contract-registry\r\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != address(registry) && newRegistry != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = newRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      *\r\n      * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\r\n    */\r\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\r\n        // change the permission to update the contract-registry\r\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n      *\r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/ITokenHolder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterAnchor.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Converter Anchor interface\r\n*/\r\ncontract IConverterAnchor is IOwned, ITokenHolder {\r\n}\r\n\r\n// File: contracts/utility/interfaces/IWhitelist.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverter.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter interface\r\n*/\r\ncontract IConverter is IOwned {\r\n    function converterType() public pure returns (uint16);\r\n    function anchor() public view returns (IConverterAnchor) {this;}\r\n    function isActive() public view returns (bool);\r\n\r\n    function rateAndFee(IERC20Token _sourceToken, IERC20Token _targetToken, uint256 _amount) public view returns (uint256, uint256);\r\n    function convert(IERC20Token _sourceToken,\r\n                     IERC20Token _targetToken,\r\n                     uint256 _amount,\r\n                     address _trader,\r\n                     address _beneficiary) public payable returns (uint256);\r\n\r\n    function conversionWhitelist() public view returns (IWhitelist) {this;}\r\n    function conversionFee() public view returns (uint32) {this;}\r\n    function maxConversionFee() public view returns (uint32) {this;}\r\n    function reserveBalance(IERC20Token _reserveToken) public view returns (uint256);\r\n    function() external payable;\r\n\r\n    function transferAnchorOwnership(address _newOwner) public;\r\n    function acceptAnchorOwnership() public;\r\n    function setConversionFee(uint32 _conversionFee) public;\r\n    function setConversionWhitelist(IWhitelist _whitelist) public;\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n    function withdrawETH(address _to) public;\r\n    function addReserve(IERC20Token _token, uint32 _ratio) public;\r\n\r\n    // deprecated, backward compatibility\r\n    function token() public view returns (IConverterAnchor);\r\n    function transferTokenOwnership(address _newOwner) public;\r\n    function acceptTokenOwnership() public;\r\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\r\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\r\n    function connectorTokens(uint256 _index) public view returns (IERC20Token);\r\n    function connectorTokenCount() public view returns (uint16);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterFactory.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter Factory interface\r\n*/\r\ncontract IConverterFactory {\r\n    function createAnchor(uint16 _type, string _name, string _symbol, uint8 _decimals) public returns (IConverterAnchor);\r\n    function createConverter(uint16 _type, IConverterAnchor _anchor, IContractRegistry _registry, uint32 _maxConversionFee) public returns (IConverter);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\ncontract IConverterRegistry {\r\n    function getAnchorCount() public view returns (uint256);\r\n    function getAnchors() public view returns (address[]);\r\n    function getAnchor(uint256 _index) public view returns (address);\r\n    function isAnchor(address _value) public view returns (bool);\r\n    function getLiquidityPoolCount() public view returns (uint256);\r\n    function getLiquidityPools() public view returns (address[]);\r\n    function getLiquidityPool(uint256 _index) public view returns (address);\r\n    function isLiquidityPool(address _value) public view returns (bool);\r\n    function getConvertibleTokenCount() public view returns (uint256);\r\n    function getConvertibleTokens() public view returns (address[]);\r\n    function getConvertibleToken(uint256 _index) public view returns (address);\r\n    function isConvertibleToken(address _value) public view returns (bool);\r\n    function getConvertibleTokenAnchorCount(address _convertibleToken) public view returns (uint256);\r\n    function getConvertibleTokenAnchors(address _convertibleToken) public view returns (address[]);\r\n    function getConvertibleTokenAnchor(address _convertibleToken, uint256 _index) public view returns (address);\r\n    function isConvertibleTokenAnchor(address _convertibleToken, address _value) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterRegistryData.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\ninterface IConverterRegistryData {\r\n    function addSmartToken(address _smartToken) external;\r\n    function removeSmartToken(address _smartToken) external;\r\n    function addLiquidityPool(address _liquidityPool) external;\r\n    function removeLiquidityPool(address _liquidityPool) external;\r\n    function addConvertibleToken(address _convertibleToken, address _smartToken) external;\r\n    function removeConvertibleToken(address _convertibleToken, address _smartToken) external;\r\n    function getSmartTokenCount() external view returns (uint256);\r\n    function getSmartTokens() external view returns (address[]);\r\n    function getSmartToken(uint256 _index) external view returns (address);\r\n    function isSmartToken(address _value) external view returns (bool);\r\n    function getLiquidityPoolCount() external view returns (uint256);\r\n    function getLiquidityPools() external view returns (address[]);\r\n    function getLiquidityPool(uint256 _index) external view returns (address);\r\n    function isLiquidityPool(address _value) external view returns (bool);\r\n    function getConvertibleTokenCount() external view returns (uint256);\r\n    function getConvertibleTokens() external view returns (address[]);\r\n    function getConvertibleToken(uint256 _index) external view returns (address);\r\n    function isConvertibleToken(address _value) external view returns (bool);\r\n    function getConvertibleTokenSmartTokenCount(address _convertibleToken) external view returns (uint256);\r\n    function getConvertibleTokenSmartTokens(address _convertibleToken) external view returns (address[]);\r\n    function getConvertibleTokenSmartToken(address _convertibleToken, uint256 _index) external view returns (address);\r\n    function isConvertibleTokenSmartToken(address _convertibleToken, address _value) external view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/ConverterRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev The ConverterRegistry maintains a list of all active converters in the Bancor Network.\r\n  *\r\n  * Since converters can be upgraded and thus their address can change, the registry actually keeps\r\n  * converter anchors internally and not the converters themselves.\r\n  * The active converter for each anchor can be easily accessed by querying the anchor's owner.\r\n  *\r\n  * The registry exposes 3 differnet lists that can be accessed and iterated, based on the use-case of the caller:\r\n  * - anchors - can be used to get all the latest / historical data in the network\r\n  * - Liquidity pools - can be used to get all liquidity pools for funding, liquidation etc.\r\n  * - Convertible tokens - can be used to get all tokens that can be converted in the network (excluding pool\r\n  *   tokens), and for each one - all anchors that hold it in their reserves\r\n  *\r\n  *\r\n  * The contract fires events whenever one of the primitives is added to or removed from the registry\r\n  *\r\n  * The contract is upgradable.\r\n*/\r\ncontract ConverterRegistry is IConverterRegistry, ContractRegistryClient, TokenHandler {\r\n    address private constant ETH_RESERVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /**\r\n      * @dev triggered when a converter anchor is added to the registry\r\n      *\r\n      * @param _anchor smart token\r\n    */\r\n    event ConverterAnchorAdded(address indexed _anchor);\r\n\r\n    /**\r\n      * @dev triggered when a converter anchor is removed from the registry\r\n      *\r\n      * @param _anchor smart token\r\n    */\r\n    event ConverterAnchorRemoved(address indexed _anchor);\r\n\r\n    /**\r\n      * @dev triggered when a liquidity pool is added to the registry\r\n      *\r\n      * @param _liquidityPool liquidity pool\r\n    */\r\n    event LiquidityPoolAdded(address indexed _liquidityPool);\r\n\r\n    /**\r\n      * @dev triggered when a liquidity pool is removed from the registry\r\n      *\r\n      * @param _liquidityPool liquidity pool\r\n    */\r\n    event LiquidityPoolRemoved(address indexed _liquidityPool);\r\n\r\n    /**\r\n      * @dev triggered when a convertible token is added to the registry\r\n      *\r\n      * @param _convertibleToken convertible token\r\n      * @param _smartToken associated smart token\r\n    */\r\n    event ConvertibleTokenAdded(address indexed _convertibleToken, address indexed _smartToken);\r\n\r\n    /**\r\n      * @dev triggered when a convertible token is removed from the registry\r\n      *\r\n      * @param _convertibleToken convertible token\r\n      * @param _smartToken associated smart token\r\n    */\r\n    event ConvertibleTokenRemoved(address indexed _convertibleToken, address indexed _smartToken);\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `ConverterAnchorAdded`\r\n    */\r\n    event SmartTokenAdded(address indexed _smartToken);\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `ConverterAnchorRemoved`\r\n    */\r\n    event SmartTokenRemoved(address indexed _smartToken);\r\n\r\n    /**\r\n      * @dev initializes a new ConverterRegistry instance\r\n      *\r\n      * @param _registry address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) ContractRegistryClient(_registry) public {\r\n    }\r\n\r\n    /**\r\n      * @dev creates a zero supply liquid token / empty liquidity pool and adds its converter to the registry\r\n      *\r\n      * @param _type                converter type, see ConverterBase contract main doc\r\n      * @param _name                token / pool name\r\n      * @param _symbol              token / pool symbol\r\n      * @param _decimals            token / pool decimals\r\n      * @param _maxConversionFee    maximum conversion-fee\r\n      * @param _reserveTokens       reserve tokens\r\n      * @param _reserveWeights      reserve weights\r\n      *\r\n      * @return new converter\r\n    */\r\n    function newConverter(\r\n        uint16 _type,\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        uint32 _maxConversionFee,\r\n        IERC20Token[] memory _reserveTokens,\r\n        uint32[] memory _reserveWeights\r\n    )\r\n    public returns (IConverter)\r\n    {\r\n        uint256 length = _reserveTokens.length;\r\n        require(length == _reserveWeights.length, \"ERR_INVALID_RESERVES\");\r\n        require(getLiquidityPoolByConfig(_type, _reserveTokens, _reserveWeights) == IConverterAnchor(0), \"ERR_ALREADY_EXISTS\");\r\n\r\n        IConverterFactory factory = IConverterFactory(addressOf(CONVERTER_FACTORY));\r\n        IConverterAnchor anchor = IConverterAnchor(factory.createAnchor(_type, _name, _symbol, _decimals));\r\n        IConverter converter = IConverter(factory.createConverter(_type, anchor, registry, _maxConversionFee));\r\n\r\n        anchor.acceptOwnership();\r\n        converter.acceptOwnership();\r\n\r\n        for (uint256 i = 0; i < length; i++)\r\n            converter.addReserve(_reserveTokens[i], _reserveWeights[i]);\r\n\r\n        anchor.transferOwnership(converter);\r\n        converter.acceptAnchorOwnership();\r\n        converter.transferOwnership(msg.sender);\r\n\r\n        addConverterInternal(converter);\r\n        return converter;\r\n    }\r\n\r\n    /**\r\n      * @dev adds an existing converter to the registry\r\n      * can only be called by the owner\r\n      *\r\n      * @param _converter converter\r\n    */\r\n    function addConverter(IConverter _converter) public ownerOnly {\r\n        require(isConverterValid(_converter), \"ERR_INVALID_CONVERTER\");\r\n        addConverterInternal(_converter);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a converter from the registry\r\n      * anyone can remove an existing converter from the registry, as long as the converter is invalid\r\n      * note that the owner can also remove valid converters\r\n      *\r\n      * @param _converter converter\r\n    */\r\n    function removeConverter(IConverter _converter) public {\r\n        require(msg.sender == owner || !isConverterValid(_converter), \"ERR_ACCESS_DENIED\");\r\n        removeConverterInternal(_converter);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the number of converter anchors in the registry\r\n      *\r\n      * @return number of anchors\r\n    */\r\n    function getAnchorCount() public view returns (uint256) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getSmartTokenCount();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the list of converter anchors in the registry\r\n      *\r\n      * @return list of anchors\r\n    */\r\n    function getAnchors() public view returns (address[]) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getSmartTokens();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the converter anchor at a given index\r\n      *\r\n      * @param _index index\r\n      * @return anchor at the given index\r\n    */\r\n    function getAnchor(uint256 _index) public view returns (address) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getSmartToken(_index);\r\n    }\r\n\r\n    /**\r\n      * @dev checks whether or not a given value is a converter anchor\r\n      *\r\n      * @param _value value\r\n      * @return true if the given value is an anchor, false if not\r\n    */\r\n    function isAnchor(address _value) public view returns (bool) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).isSmartToken(_value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the number of liquidity pools in the registry\r\n      *\r\n      * @return number of liquidity pools\r\n    */\r\n    function getLiquidityPoolCount() public view returns (uint256) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getLiquidityPoolCount();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the list of liquidity pools in the registry\r\n      *\r\n      * @return list of liquidity pools\r\n    */\r\n    function getLiquidityPools() public view returns (address[]) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getLiquidityPools();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the liquidity pool at a given index\r\n      *\r\n      * @param _index index\r\n      * @return liquidity pool at the given index\r\n    */\r\n    function getLiquidityPool(uint256 _index) public view returns (address) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getLiquidityPool(_index);\r\n    }\r\n\r\n    /**\r\n      * @dev checks whether or not a given value is a liquidity pool\r\n      *\r\n      * @param _value value\r\n      * @return true if the given value is a liquidity pool, false if not\r\n    */\r\n    function isLiquidityPool(address _value) public view returns (bool) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).isLiquidityPool(_value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the number of convertible tokens in the registry\r\n      *\r\n      * @return number of convertible tokens\r\n    */\r\n    function getConvertibleTokenCount() public view returns (uint256) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleTokenCount();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the list of convertible tokens in the registry\r\n      *\r\n      * @return list of convertible tokens\r\n    */\r\n    function getConvertibleTokens() public view returns (address[]) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleTokens();\r\n    }\r\n\r\n    /**\r\n      * @dev returns the convertible token at a given index\r\n      *\r\n      * @param _index index\r\n      * @return convertible token at the given index\r\n    */\r\n    function getConvertibleToken(uint256 _index) public view returns (address) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleToken(_index);\r\n    }\r\n\r\n    /**\r\n      * @dev checks whether or not a given value is a convertible token\r\n      *\r\n      * @param _value value\r\n      * @return true if the given value is a convertible token, false if not\r\n    */\r\n    function isConvertibleToken(address _value) public view returns (bool) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).isConvertibleToken(_value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the number of converter anchors associated with a given convertible token\r\n      *\r\n      * @param _convertibleToken convertible token\r\n      * @return number of anchors associated with the given convertible token\r\n    */\r\n    function getConvertibleTokenAnchorCount(address _convertibleToken) public view returns (uint256) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartTokenCount(_convertibleToken);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the list of aoncerter anchors associated with a given convertible token\r\n      *\r\n      * @param _convertibleToken convertible token\r\n      * @return list of anchors associated with the given convertible token\r\n    */\r\n    function getConvertibleTokenAnchors(address _convertibleToken) public view returns (address[]) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartTokens(_convertibleToken);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the converter anchor associated with a given convertible token at a given index\r\n      *\r\n      * @param _index index\r\n      * @return anchor associated with the given convertible token at the given index\r\n    */\r\n    function getConvertibleTokenAnchor(address _convertibleToken, uint256 _index) public view returns (address) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).getConvertibleTokenSmartToken(_convertibleToken, _index);\r\n    }\r\n\r\n    /**\r\n      * @dev checks whether or not a given value is a converter anchor of a given convertible token\r\n      *\r\n      * @param _convertibleToken convertible token\r\n      * @param _value value\r\n      * @return true if the given value is an anchor of the given convertible token, false if not\r\n    */\r\n    function isConvertibleTokenAnchor(address _convertibleToken, address _value) public view returns (bool) {\r\n        return IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA)).isConvertibleTokenSmartToken(_convertibleToken, _value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns a list of converters for a given list of anchors\r\n      * this is a utility function that can be used to reduce the number of calls to the contract\r\n      *\r\n      * @param _anchors list of converter anchors\r\n      * @return list of converters\r\n    */\r\n    function getConvertersByAnchors(address[] _anchors) public view returns (address[]) {\r\n        address[] memory converters = new address[](_anchors.length);\r\n\r\n        for (uint256 i = 0; i < _anchors.length; i++)\r\n            converters[i] = IConverterAnchor(_anchors[i]).owner();\r\n\r\n        return converters;\r\n    }\r\n\r\n    /**\r\n      * @dev checks whether or not a given converter is valid\r\n      *\r\n      * @param _converter converter\r\n      * @return true if the given converter is valid, false if not\r\n    */\r\n    function isConverterValid(IConverter _converter) public view returns (bool) {\r\n        // verify that the converter is active\r\n        return _converter.token().owner() == address(_converter);\r\n    }\r\n\r\n    /**\r\n      * @dev checks if a liquidity pool with given configuration is already registered\r\n      *\r\n      * @param _converter converter with specific configuration\r\n      * @return if a liquidity pool with the same configuration is already registered\r\n    */\r\n    function isSimilarLiquidityPoolRegistered(IConverter _converter) public view returns (bool) {\r\n        uint256 reserveTokenCount = _converter.connectorTokenCount();\r\n        IERC20Token[] memory reserveTokens = new IERC20Token[](reserveTokenCount);\r\n        uint32[] memory reserveWeights = new uint32[](reserveTokenCount);\r\n\r\n        // get the reserve-configuration of the converter\r\n        for (uint256 i = 0; i < reserveTokenCount; i++) {\r\n            IERC20Token reserveToken = _converter.connectorTokens(i);\r\n            reserveTokens[i] = reserveToken;\r\n            reserveWeights[i] = getReserveWeight(_converter, reserveToken);\r\n        }\r\n\r\n        // return if a liquidity pool with the same configuration is already registered\r\n        return getLiquidityPoolByConfig(_converter.converterType(), reserveTokens, reserveWeights) != IConverterAnchor(0);\r\n    }\r\n\r\n    /**\r\n      * @dev searches for a liquidity pool with specific configuration\r\n      *\r\n      * @param _type            converter type, see ConverterBase contract main doc\r\n      * @param _reserveTokens   reserve tokens\r\n      * @param _reserveWeights  reserve weights\r\n      * @return the liquidity pool, or zero if no such liquidity pool exists\r\n    */\r\n    function getLiquidityPoolByConfig(uint16 _type, IERC20Token[] memory _reserveTokens, uint32[] memory _reserveWeights) public view returns (IConverterAnchor) {\r\n        // verify that the input parameters represent a valid liquidity pool\r\n        if (_reserveTokens.length == _reserveWeights.length && _reserveTokens.length > 1) {\r\n            // get the anchors of the least frequent token (optimization)\r\n            address[] memory convertibleTokenAnchors = getLeastFrequentTokenAnchors(_reserveTokens);\r\n            // search for a converter with the same configuration\r\n            for (uint256 i = 0; i < convertibleTokenAnchors.length; i++) {\r\n                IConverterAnchor anchor = IConverterAnchor(convertibleTokenAnchors[i]);\r\n                IConverter converter = IConverter(anchor.owner());\r\n                if (isConverterReserveConfigEqual(converter, _type, _reserveTokens, _reserveWeights))\r\n                    return anchor;\r\n            }\r\n        }\r\n\r\n        return IConverterAnchor(0);\r\n    }\r\n\r\n    /**\r\n      * @dev adds a converter anchor to the registry\r\n      *\r\n      * @param _anchor converter anchor\r\n    */\r\n    function addAnchor(IConverterRegistryData _converterRegistryData, address _anchor) internal {\r\n        _converterRegistryData.addSmartToken(_anchor);\r\n        emit ConverterAnchorAdded(_anchor);\r\n        emit SmartTokenAdded(_anchor);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a converter anchor from the registry\r\n      *\r\n      * @param _anchor converter anchor\r\n    */\r\n    function removeAnchor(IConverterRegistryData _converterRegistryData, address _anchor) internal {\r\n        _converterRegistryData.removeSmartToken(_anchor);\r\n        emit ConverterAnchorRemoved(_anchor);\r\n        emit SmartTokenRemoved(_anchor);\r\n    }\r\n\r\n    /**\r\n      * @dev adds a liquidity pool to the registry\r\n      *\r\n      * @param _liquidityPool liquidity pool\r\n    */\r\n    function addLiquidityPool(IConverterRegistryData _converterRegistryData, address _liquidityPool) internal {\r\n        _converterRegistryData.addLiquidityPool(_liquidityPool);\r\n        emit LiquidityPoolAdded(_liquidityPool);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a liquidity pool from the registry\r\n      *\r\n      * @param _liquidityPool liquidity pool\r\n    */\r\n    function removeLiquidityPool(IConverterRegistryData _converterRegistryData, address _liquidityPool) internal {\r\n        _converterRegistryData.removeLiquidityPool(_liquidityPool);\r\n        emit LiquidityPoolRemoved(_liquidityPool);\r\n    }\r\n\r\n    /**\r\n      * @dev adds a convertible token to the registry\r\n      *\r\n      * @param _convertibleToken    convertible token\r\n      * @param _anchor              associated converter anchor\r\n    */\r\n    function addConvertibleToken(IConverterRegistryData _converterRegistryData, address _convertibleToken, address _anchor) internal {\r\n        _converterRegistryData.addConvertibleToken(_convertibleToken, _anchor);\r\n        emit ConvertibleTokenAdded(_convertibleToken, _anchor);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a convertible token from the registry\r\n      *\r\n      * @param _convertibleToken    convertible token\r\n      * @param _anchor              associated converter anchor\r\n    */\r\n    function removeConvertibleToken(IConverterRegistryData _converterRegistryData, address _convertibleToken, address _anchor) internal {\r\n        _converterRegistryData.removeConvertibleToken(_convertibleToken, _anchor);\r\n        emit ConvertibleTokenRemoved(_convertibleToken, _anchor);\r\n    }\r\n\r\n    function addConverterInternal(IConverter _converter) private {\r\n        IConverterRegistryData converterRegistryData = IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA));\r\n        IConverterAnchor anchor = IConverter(_converter).token();\r\n        uint256 reserveTokenCount = _converter.connectorTokenCount();\r\n\r\n        // add the converter anchor\r\n        addAnchor(converterRegistryData, anchor);\r\n        if (reserveTokenCount > 1)\r\n            addLiquidityPool(converterRegistryData, anchor);\r\n        else\r\n            addConvertibleToken(converterRegistryData, anchor, anchor);\r\n\r\n        // add all reserve tokens\r\n        for (uint256 i = 0; i < reserveTokenCount; i++)\r\n            addConvertibleToken(converterRegistryData, _converter.connectorTokens(i), anchor);\r\n    }\r\n\r\n    function removeConverterInternal(IConverter _converter) private {\r\n        IConverterRegistryData converterRegistryData = IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA));\r\n        IConverterAnchor anchor = IConverter(_converter).anchor();\r\n        uint256 reserveTokenCount = _converter.connectorTokenCount();\r\n\r\n        // remove the converter anchor\r\n        removeAnchor(converterRegistryData, anchor);\r\n        if (reserveTokenCount > 1)\r\n            removeLiquidityPool(converterRegistryData, anchor);\r\n        else\r\n            removeConvertibleToken(converterRegistryData, anchor, anchor);\r\n\r\n        // remove all reserve tokens\r\n        for (uint256 i = 0; i < reserveTokenCount; i++)\r\n            removeConvertibleToken(converterRegistryData, _converter.connectorTokens(i), anchor);\r\n    }\r\n\r\n    function getLeastFrequentTokenAnchors(IERC20Token[] memory _reserveTokens) private view returns (address[] memory) {\r\n        IConverterRegistryData converterRegistryData = IConverterRegistryData(addressOf(CONVERTER_REGISTRY_DATA));\r\n        uint256 minAnchorCount = converterRegistryData.getConvertibleTokenSmartTokenCount(_reserveTokens[0]);\r\n        uint256 index = 0;\r\n\r\n        // find the reserve token which has the smallest number of converter anchors\r\n        for (uint256 i = 1; i < _reserveTokens.length; i++) {\r\n            uint256 convertibleTokenAnchorCount = converterRegistryData.getConvertibleTokenSmartTokenCount(_reserveTokens[i]);\r\n            if (minAnchorCount > convertibleTokenAnchorCount) {\r\n                minAnchorCount = convertibleTokenAnchorCount;\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        return converterRegistryData.getConvertibleTokenSmartTokens(_reserveTokens[index]);\r\n    }\r\n\r\n    function isConverterReserveConfigEqual(IConverter _converter, uint16 _type, IERC20Token[] memory _reserveTokens, uint32[] memory _reserveWeights) private view returns (bool) {\r\n        if (_type != _converter.converterType())\r\n            return false;\r\n\r\n        if (_reserveTokens.length != _converter.connectorTokenCount())\r\n            return false;\r\n\r\n        for (uint256 i = 0; i < _reserveTokens.length; i++) {\r\n            if (_reserveWeights[i] != getReserveWeight(_converter, _reserveTokens[i]))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    bytes4 private constant CONNECTORS_FUNC_SELECTOR = bytes4(keccak256(\"connectors(address)\"));\r\n\r\n    // assembly is used since older converters didn't have the `getReserveWeight` function, so getting the weight\r\n    // requires calling the `connectors` property function, however that results in the `stack too deep` compiler\r\n    // error so using assembly to circumvent that issue\r\n    function getReserveWeight(address _converter, address _reserveToken) private view returns (uint32) {\r\n        uint256[2] memory ret;\r\n        bytes memory data = abi.encodeWithSelector(CONNECTORS_FUNC_SELECTOR, _reserveToken);\r\n\r\n        assembly {\r\n            let success := staticcall(\r\n                gas,           // gas remaining\r\n                _converter,    // destination address\r\n                add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n                mload(data),   // input length (loaded from the first 32 bytes in the `data` array)\r\n                ret,           // output buffer\r\n                64             // output length\r\n            )\r\n            if iszero(success) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return uint32(ret[1]);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getAnchorCount`\r\n    */\r\n    function getSmartTokenCount() public view returns (uint256) {\r\n        return getAnchorCount();\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getAnchors`\r\n    */\r\n    function getSmartTokens() public view returns (address[]) {\r\n        return getAnchors();\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getAnchor`\r\n    */\r\n    function getSmartToken(uint256 _index) public view returns (address) {\r\n        return getAnchor(_index);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `isAnchor`\r\n    */\r\n    function isSmartToken(address _value) public view returns (bool) {\r\n        return isAnchor(_value);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getConvertibleTokenAnchorCount`\r\n    */\r\n    function getConvertibleTokenSmartTokenCount(address _convertibleToken) public view returns (uint256) {\r\n        return getConvertibleTokenAnchorCount(_convertibleToken);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getConvertibleTokenAnchors`\r\n    */\r\n    function getConvertibleTokenSmartTokens(address _convertibleToken) public view returns (address[]) {\r\n        return getConvertibleTokenAnchors(_convertibleToken);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getConvertibleTokenAnchor`\r\n    */\r\n    function getConvertibleTokenSmartToken(address _convertibleToken, uint256 _index) public view returns (address) {\r\n        return getConvertibleTokenAnchor(_convertibleToken, _index);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `isConvertibleTokenAnchor`\r\n    */\r\n    function isConvertibleTokenSmartToken(address _convertibleToken, address _value) public view returns (bool) {\r\n        return isConvertibleTokenAnchor(_convertibleToken, _value);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getConvertersByAnchors`\r\n    */\r\n    function getConvertersBySmartTokens(address[] _smartTokens) public view returns (address[]) {\r\n        return getConvertersByAnchors(_smartTokens);\r\n    }\r\n\r\n    /**\r\n      * @dev deprecated, backward compatibility, use `getLiquidityPoolByConfig`\r\n    */\r\n    function getLiquidityPoolByReserveConfig(IERC20Token[] memory _reserveTokens, uint32[] memory _reserveWeights) public view returns (IConverterAnchor) {\r\n        return getLiquidityPoolByConfig(1, _reserveTokens, _reserveWeights);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSmartTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"}],\"name\":\"getConvertibleTokenAnchors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint16\"},{\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"name\":\"_reserveWeights\",\"type\":\"uint32[]\"}],\"name\":\"getLiquidityPoolByConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_smartTokens\",\"type\":\"address[]\"}],\"name\":\"getConvertersBySmartTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isConvertibleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isSmartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"}],\"name\":\"getConvertibleTokenAnchorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAnchor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_maxConversionFee\",\"type\":\"uint32\"},{\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"name\":\"_reserveWeights\",\"type\":\"uint32[]\"}],\"name\":\"newConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConvertibleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getConvertibleTokenAnchor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_anchors\",\"type\":\"address[]\"}],\"name\":\"getConvertersByAnchors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConvertibleTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"addConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isConvertibleTokenSmartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityPoolCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getConvertibleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"isSimilarLiquidityPoolRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"isConverterValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"removeConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSmartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"}],\"name\":\"getConvertibleTokenSmartTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLiquidityPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isConvertibleTokenAnchor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"name\":\"_reserveWeights\",\"type\":\"uint32[]\"}],\"name\":\"getLiquidityPoolByReserveConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAnchorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getConvertibleTokenSmartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isAnchor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSmartTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAnchors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertibleToken\",\"type\":\"address\"}],\"name\":\"getConvertibleTokenSmartTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_anchor\",\"type\":\"address\"}],\"name\":\"ConverterAnchorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_anchor\",\"type\":\"address\"}],\"name\":\"ConverterAnchorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_liquidityPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_liquidityPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_smartToken\",\"type\":\"address\"}],\"name\":\"ConvertibleTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_convertibleToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_smartToken\",\"type\":\"address\"}],\"name\":\"ConvertibleTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_smartToken\",\"type\":\"address\"}],\"name\":\"SmartTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_smartToken\",\"type\":\"address\"}],\"name\":\"SmartTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"ConverterRegistry","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://549179446a0998ba026e5c8e4b365af315ade9ed7573aee6d9e1feb0cee1e894"}]}