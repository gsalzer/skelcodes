{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Compound {\r\n    function mint ( uint256 mintAmount ) external returns ( uint256 );\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n    function exchangeRateStored() external view returns (uint);\r\n}\r\n\r\ninterface Fulcrum {\r\n    function mint(address receiver, uint256 amount) external payable returns (uint256 mintAmount);\r\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\r\n    function assetBalanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ninterface Aave {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external;\r\n}\r\n\r\ninterface AToken {\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\ninterface IIEarnManager {\r\n    function recommend(address _token) external view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    );\r\n}\r\n\r\ncontract Structs {\r\n    struct Val {\r\n        uint256 value;\r\n    }\r\n\r\n    enum ActionType {\r\n        Deposit,   // supply tokens\r\n        Withdraw  // borrow tokens\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei // the amount is denominated in wei\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta // the amount is given as a delta from the current value\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\ncontract DyDx is Structs {\r\n    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\r\n    function operate(Info[] memory, ActionArgs[] memory) public;\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ncontract yDAI is ERC20, ERC20Detailed, ReentrancyGuard, Structs {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public pool;\r\n  address public token;\r\n  address public compound;\r\n  address public fulcrum;\r\n  address public aave;\r\n  address public aavePool;\r\n  address public aaveToken;\r\n  address public dydx;\r\n  uint256 public dToken;\r\n  address public apr;\r\n  address public chai;\r\n\r\n  enum Lender {\r\n      NONE,\r\n      DYDX,\r\n      COMPOUND,\r\n      AAVE,\r\n      FULCRUM\r\n  }\r\n\r\n  Lender public provider = Lender.NONE;\r\n\r\n  constructor () public ERC20Detailed(\"iearn DAI\", \"yDAI\", 18) {\r\n    token = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    apr = address(0xdD6d648C991f7d47454354f4Ef326b04025a48A8);\r\n    dydx = address(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    aave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    aavePool = address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3);\r\n    fulcrum = address(0x493C57C4763932315A328269E1ADaD09653B9081);\r\n    aaveToken = address(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d);\r\n    compound = address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n    chai = address(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n    dToken = 3;\r\n    approveToken();\r\n  }\r\n\r\n  // Quick swap low gas method for pool swaps\r\n  function deposit(uint256 _amount)\r\n      external\r\n      nonReentrant\r\n  {\r\n      require(_amount > 0, \"deposit must be greater than 0\");\r\n      pool = calcPoolValueInToken();\r\n\r\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n      // Calculate pool shares\r\n      uint256 shares = 0;\r\n      if (pool == 0) {\r\n        shares = _amount;\r\n        pool = _amount;\r\n      } else {\r\n        shares = (_amount.mul(totalSupply())).div(pool);\r\n      }\r\n      pool = calcPoolValueInToken();\r\n      _mint(msg.sender, shares);\r\n  }\r\n\r\n  // No rebalance implementation for lower fees and faster swaps\r\n  function withdraw(uint256 _shares)\r\n      external\r\n      nonReentrant\r\n  {\r\n      require(_shares > 0, \"withdraw must be greater than 0\");\r\n\r\n      uint256 ibalance = balanceOf(msg.sender);\r\n      require(_shares <= ibalance, \"insufficient balance\");\r\n\r\n      // Could have over value from cTokens\r\n      pool = calcPoolValueInToken();\r\n      // Calc to redeem before updating balances\r\n      uint256 r = (pool.mul(_shares)).div(totalSupply());\r\n\r\n\r\n      _burn(msg.sender, _shares);\r\n\r\n      // Check balance\r\n      uint256 b = IERC20(token).balanceOf(address(this));\r\n      if (b < r) {\r\n        _withdrawSome(r.sub(b));\r\n      }\r\n\r\n      IERC20(token).safeTransfer(msg.sender, r);\r\n      pool = calcPoolValueInToken();\r\n  }\r\n\r\n  function recommend() public view returns (Lender) {\r\n    (,uint256 capr,uint256 iapr,uint256 aapr,uint256 dapr) = IIEarnManager(apr).recommend(token);\r\n    uint256 max = 0;\r\n    if (capr > max) {\r\n      max = capr;\r\n    }\r\n    if (iapr > max) {\r\n      max = iapr;\r\n    }\r\n    if (aapr > max) {\r\n      max = aapr;\r\n    }\r\n    if (dapr > max) {\r\n      max = dapr;\r\n    }\r\n\r\n    Lender newProvider = Lender.NONE;\r\n    if (max == capr) {\r\n      newProvider = Lender.COMPOUND;\r\n    } else if (max == iapr) {\r\n      newProvider = Lender.FULCRUM;\r\n    } else if (max == aapr) {\r\n      newProvider = Lender.AAVE;\r\n    } else if (max == dapr) {\r\n      newProvider = Lender.DYDX;\r\n    }\r\n    return newProvider;\r\n  }\r\n\r\n  function _supplyDydx(uint256 amount) internal {\r\n      Info[] memory infos = new Info[](1);\r\n      infos[0] = Info(address(this), 0);\r\n\r\n      AssetAmount memory amt = AssetAmount(true, AssetDenomination.Wei, AssetReference.Delta, amount);\r\n      ActionArgs memory act;\r\n      act.actionType = ActionType.Deposit;\r\n      act.accountId = 0;\r\n      act.amount = amt;\r\n      act.primaryMarketId = dToken;\r\n      act.otherAddress = address(this);\r\n\r\n      ActionArgs[] memory args = new ActionArgs[](1);\r\n      args[0] = act;\r\n\r\n      DyDx(dydx).operate(infos, args);\r\n  }\r\n\r\n  function _withdrawDydx(uint256 amount) internal {\r\n      Info[] memory infos = new Info[](1);\r\n      infos[0] = Info(address(this), 0);\r\n\r\n      AssetAmount memory amt = AssetAmount(false, AssetDenomination.Wei, AssetReference.Delta, amount);\r\n      ActionArgs memory act;\r\n      act.actionType = ActionType.Withdraw;\r\n      act.accountId = 0;\r\n      act.amount = amt;\r\n      act.primaryMarketId = dToken;\r\n      act.otherAddress = address(this);\r\n\r\n      ActionArgs[] memory args = new ActionArgs[](1);\r\n      args[0] = act;\r\n\r\n      DyDx(dydx).operate(infos, args);\r\n  }\r\n\r\n  function getAave() public view returns (address) {\r\n    return LendingPoolAddressesProvider(aave).getLendingPool();\r\n  }\r\n  function getAaveCore() public view returns (address) {\r\n    return LendingPoolAddressesProvider(aave).getLendingPoolCore();\r\n  }\r\n\r\n  function approveToken() public {\r\n      IERC20(token).safeApprove(compound, uint(-1)); //also add to constructor\r\n      IERC20(token).safeApprove(dydx, uint(-1));\r\n      IERC20(token).safeApprove(getAaveCore(), uint(-1));\r\n      IERC20(token).safeApprove(fulcrum, uint(-1));\r\n  }\r\n\r\n  function balance() public view returns (uint256) {\r\n    return IERC20(token).balanceOf(address(this));\r\n  }\r\n\r\n  function balanceDydx() public view returns (uint256) {\r\n      Wei memory bal = DyDx(dydx).getAccountWei(Info(address(this), 0), dToken);\r\n      return bal.value;\r\n  }\r\n  function balanceDydxAvailable() public view returns (uint256) {\r\n      return IERC20(token).balanceOf(dydx);\r\n  }\r\n  function balanceCompound() public view returns (uint256) {\r\n      return IERC20(compound).balanceOf(address(this));\r\n  }\r\n  function balanceCompoundInToken() public view returns (uint256) {\r\n    // Mantisa 1e18 to decimals\r\n    uint256 b = balanceCompound();\r\n    if (b > 0) {\r\n      b = b.mul(Compound(compound).exchangeRateStored()).div(1e18);\r\n    }\r\n    return b;\r\n  }\r\n  function balanceFulcrumAvailable() public view returns (uint256) {\r\n      return IERC20(chai).balanceOf(fulcrum);\r\n  }\r\n  function balanceFulcrumInToken() public view returns (uint256) {\r\n    uint256 b = balanceFulcrum();\r\n    if (b > 0) {\r\n      b = Fulcrum(fulcrum).assetBalanceOf(address(this));\r\n    }\r\n    return b;\r\n  }\r\n  function balanceFulcrum() public view returns (uint256) {\r\n    return IERC20(fulcrum).balanceOf(address(this));\r\n  }\r\n  function balanceAaveAvailable() public view returns (uint256) {\r\n      return IERC20(token).balanceOf(aavePool);\r\n  }\r\n  function balanceAave() public view returns (uint256) {\r\n    return IERC20(aaveToken).balanceOf(address(this));\r\n  }\r\n\r\n  function _withdrawAll() internal {\r\n    uint256 amount = balanceCompound();\r\n    if (amount > 0) {\r\n      _withdrawSomeCompound(balanceCompoundInToken().sub(1));\r\n    }\r\n    amount = balanceDydx();\r\n    if (amount > 0) {\r\n      if (amount > balanceDydxAvailable()) {\r\n        amount = balanceDydxAvailable();\r\n      }\r\n      _withdrawDydx(amount);\r\n    }\r\n    amount = balanceFulcrum();\r\n    if (amount > 0) {\r\n      if (amount > balanceFulcrumAvailable().sub(1)) {\r\n        amount = balanceFulcrumAvailable().sub(1);\r\n      }\r\n      _withdrawSomeFulcrum(amount);\r\n    }\r\n    amount = balanceAave();\r\n    if (amount > 0) {\r\n      if (amount > balanceAaveAvailable()) {\r\n        amount = balanceAaveAvailable();\r\n      }\r\n      _withdrawAave(amount);\r\n    }\r\n  }\r\n\r\n  function _withdrawSomeCompound(uint256 _amount) internal {\r\n    uint256 b = balanceCompound();\r\n    uint256 bT = balanceCompoundInToken();\r\n    require(bT >= _amount, \"insufficient funds\");\r\n    // can have unintentional rounding errors\r\n    uint256 amount = (b.mul(_amount)).div(bT).add(1);\r\n    _withdrawCompound(amount);\r\n  }\r\n\r\n  // 1999999614570950845\r\n  function _withdrawSomeFulcrum(uint256 _amount) internal {\r\n    // Balance of fulcrum tokens, 1 iDAI = 1.00x DAI\r\n    uint256 b = balanceFulcrum(); // 1970469086655766652\r\n    // Balance of token in fulcrum\r\n    uint256 bT = balanceFulcrumInToken(); // 2000000803224344406\r\n    require(bT >= _amount, \"insufficient funds\");\r\n    // can have unintentional rounding errors\r\n    uint256 amount = (b.mul(_amount)).div(bT).add(1);\r\n    _withdrawFulcrum(amount);\r\n  }\r\n\r\n  function _withdrawSome(uint256 _amount) internal returns (bool) {\r\n    uint256 origAmount = _amount;\r\n\r\n    uint256 amount = balanceCompound();\r\n    if (amount > 0) {\r\n      if (_amount > balanceCompoundInToken().sub(1)) {\r\n        _withdrawSomeCompound(balanceCompoundInToken().sub(1));\r\n        _amount = origAmount.sub(IERC20(token).balanceOf(address(this)));\r\n      } else {\r\n        _withdrawSomeCompound(_amount);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    amount = balanceDydx();\r\n    if (amount > 0) {\r\n      if (_amount > balanceDydxAvailable()) {\r\n        _withdrawDydx(balanceDydxAvailable());\r\n        _amount = origAmount.sub(IERC20(token).balanceOf(address(this)));\r\n      } else {\r\n        _withdrawDydx(_amount);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    amount = balanceFulcrum();\r\n    if (amount > 0) {\r\n      if (_amount > balanceFulcrumAvailable().sub(1)) {\r\n        amount = balanceFulcrumAvailable().sub(1);\r\n        _withdrawSomeFulcrum(balanceFulcrumAvailable().sub(1));\r\n        _amount = origAmount.sub(IERC20(token).balanceOf(address(this)));\r\n      } else {\r\n        _withdrawSomeFulcrum(amount);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    amount = balanceAave();\r\n    if (amount > 0) {\r\n      if (_amount > balanceAaveAvailable()) {\r\n        _withdrawAave(balanceAaveAvailable());\r\n        _amount = origAmount.sub(IERC20(token).balanceOf(address(this)));\r\n      } else {\r\n        _withdrawAave(_amount);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function rebalance() public {\r\n    Lender newProvider = recommend();\r\n\r\n    if (newProvider != provider) {\r\n      _withdrawAll();\r\n    }\r\n\r\n    if (balance() > 0) {\r\n      if (newProvider == Lender.DYDX) {\r\n        _supplyDydx(balance());\r\n      } else if (newProvider == Lender.FULCRUM) {\r\n        _supplyFulcrum(balance());\r\n      } else if (newProvider == Lender.COMPOUND) {\r\n        _supplyCompound(balance());\r\n      } else if (newProvider == Lender.AAVE) {\r\n        _supplyAave(balance());\r\n      }\r\n    }\r\n\r\n    provider = newProvider;\r\n  }\r\n\r\n  function _supplyAave(uint amount) internal {\r\n      Aave(getAave()).deposit(token, amount, 0);\r\n  }\r\n  function _supplyFulcrum(uint amount) internal {\r\n      require(Fulcrum(fulcrum).mint(address(this), amount) > 0, \"FULCRUM: supply failed\");\r\n  }\r\n  function _supplyCompound(uint amount) internal {\r\n      require(Compound(compound).mint(amount) == 0, \"COMPOUND: supply failed\");\r\n  }\r\n  function _withdrawAave(uint amount) internal {\r\n      AToken(aaveToken).redeem(amount);\r\n  }\r\n  function _withdrawFulcrum(uint amount) internal {\r\n      require(Fulcrum(fulcrum).burn(address(this), amount) > 0, \"FULCRUM: withdraw failed\");\r\n  }\r\n  function _withdrawCompound(uint amount) internal {\r\n      require(Compound(compound).redeem(amount) == 0, \"COMPOUND: withdraw failed\");\r\n  }\r\n\r\n  function calcPoolValueInToken() public view returns (uint) {\r\n    return balanceCompoundInToken()\r\n      .add(balanceFulcrumInToken())\r\n      .add(balanceDydx())\r\n      .add(balanceAave())\r\n      .add(balance());\r\n  }\r\n\r\n  function getPricePerFullShare() public view returns (uint) {\r\n    uint _pool = calcPoolValueInToken();\r\n    return _pool.mul(1e18).div(totalSupply());\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAaveAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceCompoundInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceDydx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceDydxAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFulcrum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFulcrumAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFulcrumInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcPoolValueInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dydx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fulcrum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAaveCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"enum yDAI.Lender\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommend\",\"outputs\":[{\"internalType\":\"enum yDAI.Lender\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"yDAI","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fbcfab95e818818e7c145c072352419ca0667032a72366ad477938f039de9287"}]}