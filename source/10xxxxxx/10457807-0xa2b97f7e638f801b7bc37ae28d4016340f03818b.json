{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\r\n*\r\n*\r\n* TTTTTTTT RRRRRR    AAA   BBBBBB    AAA    LL      HH   HH  OOOOO                            \r\n*    TT    RR   RR  AA AA  BB   BB  AA AA   LL      HH   HH OO   OO                \r\n*    TT    RRRRRR  AAAAAAA BBBBBB  AAAAAAA  LL      HHHHHHH OO   OO                            \r\n*    TT    RR  RR  AA   AA BB   BB AA   AA  LL      HH   HH OO   OO\r\n*    TT    RR   RR AA   AA BBBBBB  AA   AA  LLLLLL  HH   HH  OOOOO\r\n*\r\n* \r\n*\r\n* Trabalho\r\n* trabalho.io\r\n**/\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract Trabalho {\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n\r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n    }\r\n\r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 constant LAST_LEVEL = 12;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(uint8 => uint256) public levelPrice;\r\n\r\n    uint256 public lastUserId = 2;\r\n    address public owner;\r\n    uint256 public fila = 1;\r\n    uint8 vez = 1;\r\n    \r\n    event Registration(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 indexed userId,\r\n        uint256 referrerId\r\n    );\r\n    \r\n    event Reinvest(\r\n        address indexed user,\r\n        address indexed currentReferrer,\r\n        address indexed caller,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    \r\n    event Upgrade(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    \r\n    event NewUserPlace(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint8 place\r\n    );\r\n    \r\n    event MissedEthReceive(\r\n        address indexed receiver,\r\n        address indexed from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    \r\n    event SentExtraEthDividends(\r\n        address indexed from,\r\n        address indexed receiver,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n\r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.05 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n\r\n        owner = ownerAddress;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint256(0)\r\n        });\r\n\r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        if (msg.data.length == 0) {\r\n            if (vez == 3) {\r\n                fila++;\r\n                vez = 0;\r\n            } \r\n            vez++;             \r\n            return registration(msg.sender, idToAddress[fila]);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registerAddress(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function registerId(uint256 referrerId) external payable {\r\n        return registration(msg.sender, idToAddress[referrerId]);\r\n    } \r\n     \r\n    function register() external payable {\r\n\r\n        if (vez == 3) {\r\n            fila++;\r\n            vez = 0;\r\n        } \r\n\r\n        registration(msg.sender, idToAddress[fila]);\r\n        vez++;\r\n    } \r\n\r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(\r\n            isUserExists(msg.sender),\r\n            \"user is not exists. Register first.\"\r\n        );\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(\r\n                !users[msg.sender].activeX3Levels[level],\r\n                \"level already activated\"\r\n            );\r\n\r\n            if (users[msg.sender].x3Matrix[level - 1].blocked) {\r\n                users[msg.sender].x3Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\r\n        } else {\r\n            require(\r\n                !users[msg.sender].activeX6Levels[level],\r\n                \"level already activated\"\r\n            );\r\n\r\n            if (users[msg.sender].x6Matrix[level - 1].blocked) {\r\n                users[msg.sender].x6Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n\r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress)\r\n        private\r\n    {\r\n        require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeX3Levels[1] = true;\r\n        users[userAddress].activeX6Levels[1] = true;\r\n\r\n        idToAddress[lastUserId] = userAddress;\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n\r\n        emit Registration(\r\n            userAddress,\r\n            referrerAddress,\r\n            users[userAddress].id,\r\n            users[referrerAddress].id\r\n        );\r\n    }\r\n\r\n    function updateX3Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                1,\r\n                level,\r\n                uint8(users[referrerAddress].x3Matrix[level].referrals.length)\r\n            );\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (\r\n            !users[referrerAddress].activeX3Levels[level + 1] &&\r\n            level != LAST_LEVEL\r\n        ) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeX3Referrer(\r\n                referrerAddress,\r\n                level\r\n            );\r\n            if (\r\n                users[referrerAddress].x3Matrix[level].currentReferrer !=\r\n                freeReferrerAddress\r\n            ) {\r\n                users[referrerAddress].x3Matrix[level]\r\n                    .currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                1,\r\n                level\r\n            );\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        require(\r\n            users[referrerAddress].activeX6Levels[level],\r\n            \"500. Referrer level is inactive\"\r\n        );\r\n\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.length <\r\n            2\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(\r\n                userAddress\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n\r\n            //set current level\r\n            users[userAddress].x6Matrix[level]\r\n                .currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n\r\n            address ref = users[referrerAddress].x6Matrix[level]\r\n                .currentReferrer;\r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n            uint256 len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n\r\n            if (\r\n                (len == 2) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] ==\r\n                    referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] ==\r\n                    referrerAddress)\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            } else if (\r\n                (len == 1 || len == 2) &&\r\n                users[ref].x6Matrix[level].firstLevelReferrals[0] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (\r\n                len == 2 &&\r\n                users[ref].x6Matrix[level].firstLevelReferrals[1] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(\r\n            userAddress\r\n        );\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if (\r\n                (users[referrerAddress].x6Matrix[level]\r\n                    .firstLevelReferrals[0] ==\r\n                    users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level]\r\n                    .firstLevelReferrals[0] ==\r\n                    users[referrerAddress].x6Matrix[level].closedPart)\r\n            ) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            } else if (\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart\r\n            ) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            }\r\n        }\r\n\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] ==\r\n            userAddress\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return\r\n                updateX6ReferrerSecondLevel(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    level\r\n                );\r\n        } else if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n            userAddress\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return\r\n                updateX6ReferrerSecondLevel(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    level\r\n                );\r\n        }\r\n\r\n        if (\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .length <=\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .length\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n\r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level,\r\n        bool x2\r\n    ) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[0],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals[0]]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                2 +\r\n                    uint8(\r\n                        users[users[referrerAddress].x6Matrix[level]\r\n                            .firstLevelReferrals[0]]\r\n                            .x6Matrix[level]\r\n                            .firstLevelReferrals\r\n                            .length\r\n                    )\r\n            );\r\n            //set current level\r\n            users[userAddress].x6Matrix[level]\r\n                .currentReferrer = users[referrerAddress].x6Matrix[level]\r\n                .firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[users[referrerAddress].x6Matrix[level]\r\n                        .firstLevelReferrals[1]]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                4 +\r\n                    uint8(\r\n                        users[users[referrerAddress].x6Matrix[level]\r\n                            .firstLevelReferrals[1]]\r\n                            .x6Matrix[level]\r\n                            .firstLevelReferrals\r\n                            .length\r\n                    )\r\n            );\r\n            //set current level\r\n            users[userAddress].x6Matrix[level]\r\n                .currentReferrer = users[referrerAddress].x6Matrix[level]\r\n                .firstLevelReferrals[1];\r\n        }\r\n    }\r\n\r\n    function updateX6ReferrerSecondLevel(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].secondLevelReferrals.length <\r\n            4\r\n        ) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n\r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level]\r\n            .currentReferrer]\r\n            .x6Matrix[level]\r\n            .firstLevelReferrals;\r\n\r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress || x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer]\r\n                    .x6Matrix[level]\r\n                    .closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level]\r\n                        .currentReferrer]\r\n                        .x6Matrix[level]\r\n                        .closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level]\r\n            .firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level]\r\n            .secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (\r\n            !users[referrerAddress].activeX6Levels[level + 1] &&\r\n            level != LAST_LEVEL\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX6Referrer(\r\n                referrerAddress,\r\n                level\r\n            );\r\n\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                2,\r\n                level\r\n            );\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function findFreeX3Referrer(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findFreeX6Referrer(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersActiveX3Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            address[] memory,\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].x3Matrix[level].currentReferrer,\r\n            users[userAddress].x3Matrix[level].referrals,\r\n            users[userAddress].x3Matrix[level].blocked\r\n        );\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            address[] memory,\r\n            address[] memory,\r\n            bool,\r\n            address\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].x6Matrix[level].currentReferrer,\r\n            users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n            users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n            users[userAddress].x6Matrix[level].blocked,\r\n            users[userAddress].x6Matrix[level].closedPart\r\n        );\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n        \r\n    function findEthReceiver(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(\r\n            userAddress,\r\n            _from,\r\n            matrix,\r\n            level\r\n        );\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fila\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX6Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"registerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Trabalho","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000011d27598ca35d5e371a02d483901095f8ad6c213","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://adc1918b47616b1b686ef25923343ed84e9023a73a1c389ee14aa478f68384db"}]}