{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/mcd/maker/Manager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Manager {\r\n    function last(address) virtual public returns (uint);\r\n    function cdpCan(address, uint, address) virtual public view returns (uint);\r\n    function ilks(uint) virtual public view returns (bytes32);\r\n    function owns(uint) virtual public view returns (address);\r\n    function urns(uint) virtual public view returns (address);\r\n    function vat() virtual public view returns (address);\r\n    function open(bytes32, address) virtual public returns (uint);\r\n    function give(uint, address) virtual public;\r\n    function cdpAllow(uint, address, uint) virtual public;\r\n    function urnAllow(address, uint) virtual public;\r\n    function frob(uint, int, int) virtual public;\r\n    function flux(uint, address, uint) virtual public;\r\n    function move(uint, address, uint) virtual public;\r\n    function exit(address, uint, address, uint) virtual public;\r\n    function quit(uint, address) virtual public;\r\n    function enter(address, uint) virtual public;\r\n    function shift(uint, uint) virtual public;\r\n}\r\n\r\n// File: localhost/mcd/maker/Vat.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) virtual public view returns (uint);\r\n    function dai(address) virtual public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) virtual public;\r\n    function hope(address) virtual public;\r\n    function move(address, address, uint) virtual public;\r\n    function fork(bytes32, address, address, int, int) virtual public;\r\n}\r\n\r\n// File: localhost/shifter/LoanShifterTaker.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"../interfaces/ILendingPool.sol\";\r\n// import \"../interfaces/CTokenInterface.sol\";\r\n// import \"../interfaces/ILoanShifter.sol\";\r\n// import \"../interfaces/DSProxyInterface.sol\";\r\n\r\n\r\n// import \"../auth/AdminAuth.sol\";\r\n// import \"../auth/ProxyPermission.sol\";\r\n// import \"../loggers/FlashLoanLogger.sol\";\r\n// import \"../utils/ExchangeDataParser.sol\";\r\n// import \"../exchange/SaverExchangeCore.sol\";\r\n\r\n/// @title LoanShifterTaker Entry point for using the shifting operation\r\ncontract LoanShifterTaker // is AdminAuth, ProxyPermission\r\n{\r\n\r\n    // ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    // address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    // address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    // address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    // address public constant cDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n\r\n    // address payable public constant LOAN_SHIFTER_RECEIVER = 0xA94B7f0465E98609391C623d0560C5720a3f2D33;\r\n\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n\r\n    enum Protocols { MCD, COMPOUND, AAVE }\r\n\r\n    struct LoanShiftData {\r\n        Protocols fromProtocol;\r\n        Protocols toProtocol;\r\n        bool wholeDebt;\r\n        uint collAmount;\r\n        uint debtAmount;\r\n        address debtAddr;\r\n        address addrLoan1;\r\n        address addrLoan2;\r\n        uint id1;\r\n        uint id2;\r\n    }\r\n\r\n    // mapping (Protocols => address) public contractAddresses;\r\n\r\n    /// @notice Main entry point, it will move or transform a loan\r\n    /// @dev If the operation doesn't require exchange send empty data\r\n    function moveLoan(\r\n        LoanShiftData memory _loanShift //,\r\n        // SaverExchangeCore.ExchangeData memory _exchangeData\r\n    ) public {\r\n        if (_isSameTypeVaults(_loanShift)) {\r\n            _forkVault(_loanShift);\r\n            return;\r\n        }\r\n\r\n       // _callCloseAndOpen(_loanShift, _exchangeData);\r\n    }\r\n\r\n    /// @notice An admin only function to add/change a protocols address\r\n    // function addProtocol(uint8 _protoType, address _protoAddr) public onlyOwner {\r\n    //     contractAddresses[Protocols(_protoType)] = _protoAddr;\r\n    // }\r\n\r\n    // function getProtocolAddr(Protocols _proto) public view returns (address) {\r\n    //     return contractAddresses[_proto];\r\n    // }\r\n\r\n    //////////////////////// INTERNAL FUNCTIONS //////////////////////////\r\n\r\n    // function _callCloseAndOpen(\r\n    //     LoanShiftData memory _loanShift,\r\n    //     SaverExchangeCore.ExchangeData memory _exchangeData\r\n    // ) internal {\r\n    //     address protoAddr = getProtocolAddr(_loanShift.fromProtocol);\r\n\r\n    //     uint loanAmount = _loanShift.debtAmount;\r\n\r\n    //     if (_loanShift.wholeDebt) {\r\n    //         loanAmount = ILoanShifter(protoAddr).getLoanAmount(_loanShift.id1, _loanShift.addrLoan1);\r\n    //     }\r\n\r\n    //     (\r\n    //         uint[8] memory numData,\r\n    //         address[6] memory addrData,\r\n    //         uint8[3] memory enumData,\r\n    //         bytes memory callData\r\n    //     )\r\n    //     = _packData(_loanShift, _exchangeData);\r\n\r\n    //     // encode data\r\n    //     bytes memory paramsData = abi.encode(numData, addrData, enumData, callData, address(this));\r\n\r\n    //     // call FL\r\n    //     givePermission(LOAN_SHIFTER_RECEIVER);\r\n\r\n    //     lendingPool.flashLoan(LOAN_SHIFTER_RECEIVER, _loanShift.debtAddr, loanAmount, paramsData);\r\n\r\n    //     removePermission(LOAN_SHIFTER_RECEIVER);\r\n    // }\r\n\r\n    function _forkVault(LoanShiftData memory _loanShift) internal {\r\n        // Create new Vault to move to\r\n        if (_loanShift.id2 == 0) {\r\n            _loanShift.id2 = manager.open(manager.ilks(_loanShift.id1), address(this));\r\n        }\r\n\r\n        if (_loanShift.wholeDebt) {\r\n            manager.shift(_loanShift.id1, _loanShift.id2);\r\n        } else {\r\n            Vat(VAT_ADDRESS).fork(\r\n                manager.ilks(_loanShift.id1),\r\n                manager.urns(_loanShift.id1),\r\n                manager.urns(_loanShift.id2),\r\n                int(_loanShift.collAmount),\r\n                int(_loanShift.debtAmount)\r\n            );\r\n        }\r\n    }\r\n\r\n    function _isSameTypeVaults(LoanShiftData memory _loanShift) internal pure returns (bool) {\r\n        return _loanShift.fromProtocol == Protocols.MCD && _loanShift.toProtocol == Protocols.MCD\r\n                && _loanShift.addrLoan1 == _loanShift.addrLoan2;\r\n    }\r\n\r\n    // function _packData(\r\n    //     LoanShiftData memory _loanShift,\r\n    //     SaverExchangeCore.ExchangeData memory exchangeData\r\n    // ) internal pure returns (uint[8] memory numData, address[6] memory addrData, uint8[3] memory enumData, bytes memory callData) {\r\n\r\n    //     numData = [\r\n    //         _loanShift.collAmount,\r\n    //         _loanShift.debtAmount,\r\n    //         _loanShift.id1,\r\n    //         _loanShift.id2,\r\n    //         exchangeData.srcAmount,\r\n    //         exchangeData.destAmount,\r\n    //         exchangeData.minPrice,\r\n    //         exchangeData.price0x\r\n    //     ];\r\n\r\n    //     addrData = [\r\n    //         _loanShift.addrLoan1,\r\n    //         _loanShift.addrLoan2,\r\n    //         _loanShift.debtAddr,\r\n    //         exchangeData.srcAddr,\r\n    //         exchangeData.destAddr,\r\n    //         exchangeData.exchangeAddr\r\n    //     ];\r\n\r\n    //     enumData = [\r\n    //         uint8(_loanShift.fromProtocol),\r\n    //         uint8(_loanShift.toProtocol),\r\n    //         uint8(exchangeData.exchangeType)\r\n    //     ];\r\n\r\n    //     callData = exchangeData.callData;\r\n    // }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum LoanShifterTaker.Protocols\",\"name\":\"fromProtocol\",\"type\":\"uint8\"},{\"internalType\":\"enum LoanShifterTaker.Protocols\",\"name\":\"toProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"wholeDebt\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addrLoan1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addrLoan2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanShifterTaker.LoanShiftData\",\"name\":\"_loanShift\",\"type\":\"tuple\"}],\"name\":\"moveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoanShifterTaker","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd45b67fac32d0fe0c329dd20707bc7b1125261be3827e8413fd3ca64817014c"}]}