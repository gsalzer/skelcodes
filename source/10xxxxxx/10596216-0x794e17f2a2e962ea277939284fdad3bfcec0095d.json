{"status":"1","message":"OK","result":[{"SourceCode":"{\"HxyFreeze.sol\":{\"content\":\"\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n    //when a user freezes tokens\\r\\n    event TokenFreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        uint length\\r\\n    );\\r\\n\\r\\n    //when a user unfreezes tokens\\r\\n    event TokenUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        uint length\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HXYFREEZE CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HxyFreeze is TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public hxyAddress = 0xf3A2ace8e48751c965eA0A1D064303AcA53842b9;\\r\\n    IERC20 hxyInterface = IERC20(hxyAddress);\\r\\n    //freeze setup\\r\\n    uint internal daySeconds = 86400; // seconds in a day\\r\\n    uint public totalFrozen;\\r\\n    uint public total90Frozen;\\r\\n    uint public total180Frozen;\\r\\n    uint public total270Frozen;\\r\\n    uint public total365Frozen;\\r\\n    \\r\\n    mapping (address =\\u003e uint) public token90FrozenBalances;//balance of HXY frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public token180FrozenBalances;//balance of HXY frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public token270FrozenBalances;//balance of HXY frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public token365FrozenBalances;//balance of HXY frozen mapped by user\\r\\n    \\r\\n    bool private sync;\\r\\n\\r\\n    mapping (address =\\u003e Frozen) public frozen;\\r\\n\\r\\n    struct Frozen{\\r\\n        uint256 freeze90StartTimestamp;\\r\\n        uint256 freeze180StartTimestamp;\\r\\n        uint256 freeze270StartTimestamp;\\r\\n        uint256 freeze365StartTimestamp;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!sync, \\\"Sync lock\\\");\\r\\n        sync = true;\\r\\n        _;\\r\\n        sync = false;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - HXY FREEZE CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n\\r\\n    //freeze HXY tokens to contract\\r\\n    function FreezeTokens(uint amt, uint dayLength)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(hxyInterface.balanceOf(msg.sender) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isFreezeFinished(msg.sender, dayLength)){\\r\\n            UnfreezeTokens(dayLength);//unfreezes all currently frozen tokens + profit\\r\\n        }\\r\\n        //update balances\\r\\n        if(dayLength == 90){\\r\\n            token90FrozenBalances[msg.sender] = token90FrozenBalances[msg.sender].add(amt);\\r\\n            total90Frozen = total90Frozen.add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            frozen[msg.sender].freeze90StartTimestamp = now;\\r\\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 180){\\r\\n            token180FrozenBalances[msg.sender] = token180FrozenBalances[msg.sender].add(amt);\\r\\n            total180Frozen = total180Frozen.add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            frozen[msg.sender].freeze180StartTimestamp = now;\\r\\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 270){\\r\\n            token270FrozenBalances[msg.sender] = token270FrozenBalances[msg.sender].add(amt);\\r\\n            total270Frozen = total270Frozen.add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            frozen[msg.sender].freeze270StartTimestamp = now;\\r\\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 365){\\r\\n            token365FrozenBalances[msg.sender] = token365FrozenBalances[msg.sender].add(amt);\\r\\n            total365Frozen = total365Frozen.add(amt);\\r\\n            totalFrozen = totalFrozen.add(amt);\\r\\n            frozen[msg.sender].freeze365StartTimestamp = now;\\r\\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n        emit TokenFreeze(msg.sender, amt, dayLength);\\r\\n    }\\r\\n    \\r\\n    //unfreeze HXY tokens from contract\\r\\n    function UnfreezeTokens(uint dayLength)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        uint amt = 0;\\r\\n        if(dayLength == 90){\\r\\n            require(token90FrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n            require(isFreezeFinished(msg.sender, dayLength), \\\"tokens cannot be unfrozen yet, min 90 days\\\");\\r\\n            amt = token90FrozenBalances[msg.sender];\\r\\n            token90FrozenBalances[msg.sender] = 0;\\r\\n            frozen[msg.sender].freeze90StartTimestamp = 0;\\r\\n            total90Frozen = total90Frozen.sub(amt);\\r\\n            totalFrozen = totalFrozen.sub(amt);\\r\\n            hxyInterface.transfer(msg.sender, amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 180){\\r\\n            require(token180FrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n            require(isFreezeFinished(msg.sender, dayLength), \\\"tokens cannot be unfrozen yet, min 180 days\\\");\\r\\n            amt = token180FrozenBalances[msg.sender];\\r\\n            token180FrozenBalances[msg.sender] = 0;\\r\\n            frozen[msg.sender].freeze180StartTimestamp = 0;\\r\\n            total180Frozen = total180Frozen.sub(amt);\\r\\n            totalFrozen = totalFrozen.sub(amt);\\r\\n            hxyInterface.transfer(msg.sender, amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 270){\\r\\n            require(token270FrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n            require(isFreezeFinished(msg.sender, dayLength), \\\"tokens cannot be unfrozen yet, min 270 days\\\");\\r\\n            amt = token270FrozenBalances[msg.sender];\\r\\n            token270FrozenBalances[msg.sender] = 0;\\r\\n            frozen[msg.sender].freeze270StartTimestamp = 0;\\r\\n            total270Frozen = total270Frozen.sub(amt);\\r\\n            totalFrozen = totalFrozen.sub(amt);\\r\\n            hxyInterface.transfer(msg.sender, amt);//make transfer\\r\\n        }\\r\\n        else if(dayLength == 365){\\r\\n            require(token365FrozenBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n            require(isFreezeFinished(msg.sender, dayLength), \\\"tokens cannot be unfrozen yet, min 365 days\\\");\\r\\n            amt = token365FrozenBalances[msg.sender];\\r\\n            token365FrozenBalances[msg.sender] = 0;\\r\\n            frozen[msg.sender].freeze365StartTimestamp = 0;\\r\\n            total365Frozen = total365Frozen.sub(amt);\\r\\n            totalFrozen = totalFrozen.sub(amt);\\r\\n            hxyInterface.transfer(msg.sender, amt);//make transfer\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        emit TokenUnfreeze(msg.sender, amt, dayLength);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    function isFreezeFinished(address _user, uint freezeDayLength)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(freezeDayLength == 90){\\r\\n            if(frozen[_user].freeze90StartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return frozen[_user].freeze90StartTimestamp.add(freezeDayLength.mul(daySeconds)) \\u003c= now;               \\r\\n            }\\r\\n        }\\r\\n        else if(freezeDayLength == 180){\\r\\n            if(frozen[_user].freeze180StartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return frozen[_user].freeze180StartTimestamp.add(freezeDayLength.mul(daySeconds)) \\u003c= now;               \\r\\n            }\\r\\n        }\\r\\n        else if(freezeDayLength == 270){\\r\\n            if(frozen[_user].freeze270StartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return frozen[_user].freeze270StartTimestamp.add(freezeDayLength.mul(daySeconds)) \\u003c= now;               \\r\\n            }\\r\\n        }\\r\\n        else if(freezeDayLength == 365){\\r\\n            if(frozen[_user].freeze365StartTimestamp == 0){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n               return frozen[_user].freeze365StartTimestamp.add(freezeDayLength.mul(daySeconds)) \\u003c= now;               \\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"TokenFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreeze\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayLength\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayLength\",\"type\":\"uint256\"}],\"name\":\"UnfreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"freeze90StartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeze180StartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeze270StartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeze365StartTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freezeDayLength\",\"type\":\"uint256\"}],\"name\":\"isFreezeFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token180FrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token270FrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token365FrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token90FrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total180Frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total270Frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total365Frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total90Frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HxyFreeze","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://10c431858253d6eb4eb03b606da65e4b8006355de011e9d1828ed1903e20e0b2"}]}