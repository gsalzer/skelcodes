{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TheLobbyGuy.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.7.0;\\n\\n\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a == 0) {\\n            return 0;\\n        }\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO);\\n        uint256 c = _a / _b;\\n        return c;\\n    }\\n}\\n\\ninterface ERC20 {\\n    function balanceOf(address _to) external view returns (uint256);\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n}\\n\\ninterface MiniMeToken {\\n    function balanceOfAt(address _holder, uint256 _blockNumber) external view returns (uint256);\\n}\\n\\ninterface Voting {\\n    enum VoterState { Absent, Yea, Nay }\\n    enum VoteStatus { Active, Paused, Cancelled, Executed }\\n\\n    function token() external view returns (MiniMeToken);\\n    function getCastVote(uint256 _voteId, address _voter) external view returns (VoterState state, address caster);\\n    function getVote(uint256 _voteId) external view returns (uint256, uint256, uint256, uint256, uint256, VoteStatus, uint64, uint64, uint64, uint64, uint64, VoterState, bytes calldata);\\n}\\n\\ncontract TheLobbyGuy {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant FUNDS_WITHDRAW_WINDOW = 60 * 60 * 24 * 365; // 1 year\\n\\n    string private constant ERROR_SENDER_NOT_OWNER = \\\"TLG_SENDER_NOT_OWNER\\\";\\n    string private constant ERROR_CANNOT_RECOVER_FUNDS = \\\"TLG_CANNOT_RECOVER_FUNDS\\\";\\n    string private constant ERROR_VOTE_WAS_NOT_EXECUTED = \\\"TLG_VOTE_WAS_NOT_EXECUTED\\\";\\n    string private constant ERROR_VOTER_DID_NOT_SUPPORT = \\\"TLG_VOTER_DID_NOT_SUPPORT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"TLG_TOKEN_TRANSFER_FAILED\\\";\\n    string private constant ERROR_NO_BALANCE_TO_DISTRIBUTE = \\\"TLG_NO_BALANCE_TO_DISTRIBUTE\\\";\\n    string private constant ERROR_VOTER_HAS_ALREADY_CLAIMED = \\\"TLG_VOTER_HAS_ALREADY_CLAIMED\\\";\\n    string private constant ERROR_CONTRACT_ALREADY_INITIALIZED = \\\"TLG_CONTRACT_ALREADY_INITIALIZED\\\";\\n\\n    address public owner;\\n    uint256 public withdrawsEndDate;\\n\\n    Voting public voting;\\n    uint256 public voteId;\\n    mapping (address => bool) hasClaimed;\\n\\n    event ShareClaimed(address indexed sender, ERC20 token, uint256 amount);\\n    event FundsRecovered(address indexed sender, ERC20 token, uint256 amount);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function initialize(Voting _voting, uint256 _voteId) external {\\n        require(msg.sender == owner, ERROR_SENDER_NOT_OWNER);\\n        require(voting == Voting(0), ERROR_CONTRACT_ALREADY_INITIALIZED);\\n\\n        voting = _voting;\\n        voteId = _voteId;\\n    }\\n\\n    function recover(ERC20 _token) external {\\n        require(msg.sender == owner, ERROR_SENDER_NOT_OWNER);\\n        require(withdrawsEndDate != 0 && block.timestamp >= withdrawsEndDate, ERROR_CANNOT_RECOVER_FUNDS);\\n\\n        uint256 balance = _token.balanceOf(address(this));\\n        require(_token.transfer(msg.sender, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        emit FundsRecovered(msg.sender, _token, balance);\\n    }\\n\\n    function withdraw(ERC20 _token) external {\\n        require(!hasClaimed[msg.sender], ERROR_VOTER_HAS_ALREADY_CLAIMED);\\n\\n        (uint256 yeas,,,,, Voting.VoteStatus status,, uint64 snapshotBlock,,,,,) = voting.getVote(voteId);\\n        require(status == Voting.VoteStatus.Executed, ERROR_VOTE_WAS_NOT_EXECUTED);\\n\\n        uint256 currentBalance = _token.balanceOf(address(this));\\n        require(currentBalance > 0, ERROR_NO_BALANCE_TO_DISTRIBUTE);\\n\\n        (Voting.VoterState state,) = voting.getCastVote(voteId, msg.sender);\\n        require(state == Voting.VoterState.Yea, ERROR_VOTER_DID_NOT_SUPPORT);\\n\\n        MiniMeToken votingToken = voting.token();\\n        uint256 voterStake = votingToken.balanceOfAt(msg.sender, snapshotBlock);\\n\\n        uint256 share = voterStake.mul(currentBalance).div(yeas);\\n        require(_token.transfer(msg.sender, share), ERROR_TOKEN_TRANSFER_FAILED);\\n\\n        hasClaimed[msg.sender] = true;\\n        emit ShareClaimed(msg.sender, _token, share);\\n\\n        if (withdrawsEndDate == 0) {\\n            withdrawsEndDate = block.timestamp.add(FUNDS_WITHDRAW_WINDOW);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShareClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNDS_WITHDRAW_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Voting\",\"name\":\"_voting\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"internalType\":\"contract Voting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawsEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TheLobbyGuy","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}