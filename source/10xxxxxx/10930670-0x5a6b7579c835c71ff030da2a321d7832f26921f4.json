{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract GUBEscrow{\r\n   enum State {INIT,ACTIVE,COMPLETED}\r\n   State public state;\r\n   address payable _gubAddy;\r\n   uint public contractBalance;\r\n   uint public numberOfBets;\r\n   string[] public BetIDRec;\r\n   \r\n   struct Players{\r\n       uint _playerid;\r\n       uint _amount;\r\n       uint _winnerid;\r\n       address payable _playerAddress;\r\n   }\r\n   \r\n   struct Winners{\r\n       uint _playerid;\r\n       address payable _winnerAddress;\r\n   }\r\n   struct Bet{\r\n       uint pot;\r\n       uint serviceFee;\r\n       uint splitPot;\r\n       uint betterCount;\r\n       uint winnerCount;\r\n       bool isactive;\r\n   }\r\n   \r\n   mapping (string => Bet) public bets;\r\n   mapping (string => Players[]) public wagers;\r\n   mapping (string => Winners[]) public winners;\r\n   \r\n   constructor(address payable _gub) public{\r\n       _gubAddy = _gub;\r\n       state = State.INIT;\r\n   }\r\n   \r\n   function collectWagers(string memory _betid, uint _playerid, uint _winnerid) public payable {\r\n       require(_gubAddy != msg.sender, \"Funds cannot be sent from originating wallet\");\r\n       require(_playerid > 0, \"You must submit a valid GU Playerid\");\r\n       require(_winnerid > 0, \"You must submit a valid GU Playerid\");\r\n       require(msg.value > 0);\r\n       bytes memory isEmpty = bytes(_betid);\r\n       require(isEmpty.length > 0, \"You need a betid\");\r\n       if(wagers[_betid].length != 0){\r\n           for (uint i=0; i<= wagers[_betid].length - 1; i ++){\r\n             require(_playerid != wagers[_betid][i]._playerid ,\"You can only send one wager per bet.\");\r\n             require(msg.sender != wagers[_betid][i]._playerAddress, \"You can only send one wager per bet.\");\r\n            }\r\n       }\r\n       if(bets[_betid].isactive == false){\r\n           BetIDRec.push(_betid);\r\n           numberOfBets ++;\r\n       }\r\n       else{\r\n           require(msg.value >= bets[_betid].pot / bets[_betid].betterCount);\r\n       }\r\n      \r\n       bets[_betid] = Bet(\r\n           bets[_betid].pot + msg.value,\r\n           bets[_betid].serviceFee,\r\n           bets[_betid].splitPot,\r\n           wagers[_betid].length + 1,\r\n           bets[_betid].winnerCount,\r\n           bets[_betid].isactive = true\r\n           );\r\n        wagers[_betid].push(Players(_playerid, msg.value, _winnerid, msg.sender));\r\n        contractBalance = address(this).balance;\r\n        state = State.ACTIVE;\r\n   } \r\n\r\n   function parseWinnersandPayout(string memory _betid, uint _winner) public {\r\n       require(_gubAddy == msg.sender, \"Sender not Authorized\");\r\n       bytes memory isEmpty = bytes(_betid);\r\n       require(isEmpty.length >0, \"BetID required\");\r\n       require(_winner > 0, \"winnerid required\");\r\n       for(uint i = 0; i <= wagers[_betid].length - 1; i ++){\r\n           if(wagers[_betid][i]._winnerid == _winner){\r\n                winners[_betid].push(Winners(wagers[_betid][i]._playerid, wagers[_betid][i]._playerAddress));\r\n           }\r\n       }\r\n       bets[_betid].winnerCount = winners[_betid].length;\r\n       contractBalance = address(this).balance;\r\n       bets[_betid].serviceFee = bets[_betid].pot * 7/100;\r\n       bets[_betid].pot = bets[_betid].pot - bets[_betid].serviceFee;\r\n       bets[_betid].splitPot = (bets[_betid].pot) / bets[_betid].winnerCount;\r\n       _gubAddy.transfer(bets[_betid].serviceFee);\r\n       for(uint i = 0; i <= winners[_betid].length-1; i++){\r\n           winners[_betid][i]._winnerAddress.transfer(bets[_betid].splitPot);\r\n       }\r\n       delete bets[_betid];\r\n       delete wagers[_betid];\r\n       delete winners[_betid];\r\n       if(BetIDRec.length <= 1){\r\n           if(keccak256(abi.encodePacked(_betid)) == keccak256(abi.encodePacked(BetIDRec[0]))){\r\n               delete BetIDRec[0];\r\n               BetIDRec.length--;\r\n           }\r\n       }\r\n       else{\r\n        for(uint i = 0; i <= BetIDRec.length-1; i++){\r\n           if(keccak256(abi.encodePacked(_betid)) == keccak256(abi.encodePacked(BetIDRec[i]))){\r\n               delete BetIDRec[i];\r\n               string memory moveID = BetIDRec[BetIDRec.length-1];\r\n               BetIDRec[i] = moveID;\r\n               BetIDRec.length--;\r\n           }\r\n        }\r\n       }\r\n       numberOfBets--;\r\n   }\r\n   \r\n\r\n  \r\n   \r\n   function refundPlayer(string memory _betid, uint _playerid) public payable{\r\n       require(_gubAddy == msg.sender, \"Sender not Authorized\");\r\n       uint serviceFee;\r\n       for(uint i = 0; i <= wagers[_betid].length-1; i++){\r\n          if(wagers[_betid][i]._playerid == _playerid){\r\n              if(i == 0 || i == 1){\r\n                for(uint j = 0; j <= wagers[_betid].length-1; j++){\r\n                    serviceFee = (wagers[_betid][j]._amount * 7) / 100;\r\n                    _gubAddy.transfer(serviceFee);\r\n                    wagers[_betid][j]._amount = wagers[_betid][j]._amount - serviceFee;\r\n                    wagers[_betid][j]._playerAddress.transfer(wagers[_betid][j]._amount);\r\n                }  \r\n                contractBalance = address(this).balance;\r\n                delete bets[_betid];\r\n                delete wagers[_betid];\r\n                delete winners[_betid];\r\n                if(BetIDRec.length <= 1){\r\n                    if(keccak256(abi.encodePacked(_betid)) == keccak256(abi.encodePacked(BetIDRec[0]))){\r\n                        delete BetIDRec[0];\r\n                        BetIDRec.length--;\r\n                    }\r\n                }\r\n                else{\r\n                    for(uint x = 0; x <= BetIDRec.length-1; x++){\r\n                        if(keccak256(abi.encodePacked(_betid)) == keccak256(abi.encodePacked(BetIDRec[x]))){\r\n                            delete BetIDRec[x];\r\n                            string memory moveID = BetIDRec[BetIDRec.length-1];\r\n                            BetIDRec[x] = moveID;\r\n                            BetIDRec.length--;\r\n                        }\r\n                    }\r\n                }\r\n                numberOfBets--;\r\n                return;\r\n              }\r\n              serviceFee = (wagers[_betid][i]._amount * 7) / 100;\r\n              _gubAddy.transfer(serviceFee);\r\n              wagers[_betid][i]._amount = wagers[_betid][i]._amount - serviceFee;\r\n              wagers[_betid][i]._playerAddress.transfer(wagers[_betid][i]._amount);\r\n              bets[_betid].pot = bets[_betid].pot - wagers[_betid][i]._amount;\r\n              bets[_betid].betterCount = bets[_betid].betterCount - 1;\r\n              contractBalance = address(this).balance;\r\n              delete wagers[_betid][i];\r\n              Players memory moveItem = wagers[_betid][wagers[_betid].length -1];\r\n              wagers[_betid][i] = moveItem;\r\n              wagers[_betid].length--;\r\n          }\r\n       }\r\n   }\r\n   \r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gub\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BetIDRec\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betterCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isactive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_betid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_playerid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerid\",\"type\":\"uint256\"}],\"name\":\"collectWagers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_betid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_winner\",\"type\":\"uint256\"}],\"name\":\"parseWinnersandPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_betid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_playerid\",\"type\":\"uint256\"}],\"name\":\"refundPlayer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GUBEscrow.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wagers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_winnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GUBEscrow","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083ac6c31ebb3af472975719b9739293fb736e78d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a07ea83f961a93cdbd076968732c4a046bdcc24577bb9529c0e6dd55b5b86ba5"}]}