{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/dolomite-options/protocol/interfaces/IOptionsController.sol\r\n\r\n/*\r\n * Copyright 2020 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.13;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract IOptionsController {\r\n\r\n    function name() public view returns (bytes32);\r\n    function symbol() public view returns (bytes32);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n\r\n    function transfer(address from, address to, uint amount) public returns (bool);\r\n    function transferFrom(address from, address to, address spender, uint amount) public returns (bool);\r\n    function approve(address owner, address spender, uint amount) public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/dolomite-options/protocol/impl/OptionsTokenProxyImpl.sol\r\n\r\n/*\r\n * Copyright 2020 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\n//contract OptionsTokenImpl is IERC20 {\r\ncontract OptionsTokenProxyImpl {\r\n\r\n    // keccack(\"org.zeppelinos.proxy.implementation\")\r\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n    constructor(address _implementation) public {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(slot, _implementation)\r\n        }\r\n    }\r\n\r\n    function() external {\r\n        // _optionsTokenImpl must be a local variable to be accessed in inline assembly\r\n        address impl = _implementation();\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize)\r\n            let result := delegatecall(gas, impl, 0, calldatasize, 0, 0)\r\n            returndatacopy(0, 0, returndatasize)\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize)\r\n            }\r\n            default {\r\n                return (0, returndatasize)\r\n            }\r\n        }\r\n    }\r\n\r\n    function _implementation() internal view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"OptionsTokenProxyImpl","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"1","Implementation":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","SwarmSource":"bzzr://dd0848aa87bc7cc418972e7245557ec7e6ca01669699ee0cd747dd2ba249a3f0"}]}