{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @dev Gets the USD value of a currency with 8 decimals.\n */\ninterface IUsdAggregatorV2 {\n\n    /**\n     * @return The USD value of a currency, with 8 decimals.\n     */\n    function latestAnswer() external view returns (uint);\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ninterface IUnderlyingTokenValuator {\n\n    /**\n      * @dev Gets the tokens value in terms of USD.\n      *\n      * @return The value of the `amount` of `token`, as a number with the same number of decimals as `amount` passed\n      *         in to this function.\n      */\n    function getTokenValue(address token, uint amount) external view returns (uint);\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ninterface IUnderlyingTokenValuatorV5 {\n\n    // ============ Events ============\n\n    event TokenInsertedOrUpdated(\n        address indexed token,\n        address indexed aggregator,\n        address indexed quoteSymbol\n    );\n\n    // ============ Admin Functions ============\n\n    function initialize(\n        address owner,\n        address guardian,\n        address weth,\n        address[] calldata tokens,\n        address[] calldata chainlinkAggregators,\n        address[] calldata quoteSymbols\n    ) external;\n\n    function insertOrUpdateOracleToken(\n        address token,\n        address chainlinkAggregator,\n        address quoteSymbol\n    ) external;\n\n    // ============ Public Functions ============\n\n    function weth() external view returns (address);\n\n    function getAggregatorByToken(\n        address token\n    ) external view returns (address);\n\n    function getQuoteSymbolByToken(\n        address token\n    ) external view returns (address);\n\n    function getTokenValue(\n        address token,\n        uint amount\n    ) external view returns (uint);\n\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\n *          UPGRADEABLE CONTRACTS.\n */\ncontract IOwnableOrGuardian is Initializable {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\n\n    modifier onlyOwnerOrGuardian {\n        require(\n            msg.sender == _owner || msg.sender == _guardian,\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\n        );\n        _;\n    }\n\n    modifier onlyOwner {\n        require(\n            msg.sender == _owner,\n            \"OwnableOrGuardian: UNAUTHORIZED\"\n        );\n        _;\n    }\n    // *********************************************\n    // ***** State Variables DO NOT CHANGE OR MOVE\n    // *********************************************\n\n    // ******************************\n    // ***** DO NOT CHANGE OR MOVE\n    // ******************************\n    address internal _owner;\n    address internal _guardian;\n    // ******************************\n    // ***** DO NOT CHANGE OR MOVE\n    // ******************************\n\n    // ******************************\n    // ***** Misc Functions\n    // ******************************\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    function guardian() external view returns (address) {\n        return _guardian;\n    }\n\n    // ******************************\n    // ***** Admin Functions\n    // ******************************\n\n    function initialize(\n        address owner,\n        address guardian\n    ) public initializer {\n        _transferOwnership(owner);\n        _transferGuardian(guardian);\n    }\n\n    function transferOwnership(\n        address owner\n    )\n    public\n    onlyOwner {\n        require(\n            owner != address(0),\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\n        );\n        _transferOwnership(owner);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferGuardian(\n        address guardian\n    )\n    public\n    onlyOwner {\n        require(\n            guardian != address(0),\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\n        );\n        _transferGuardian(guardian);\n    }\n\n    function renounceGuardian() public onlyOwnerOrGuardian {\n        _transferGuardian(address(0));\n    }\n\n    // ******************************\n    // ***** Internal Functions\n    // ******************************\n\n    function _transferOwnership(\n        address owner\n    )\n    internal {\n        address previousOwner = _owner;\n        _owner = owner;\n        emit OwnershipTransferred(previousOwner, owner);\n    }\n\n    function _transferGuardian(\n        address guardian\n    )\n    internal {\n        address previousGuardian = _guardian;\n        _guardian = guardian;\n        emit GuardianTransferred(previousGuardian, guardian);\n    }\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\n *          UPGRADEABLE CONTRACTS.\n */\ncontract OwnableOrGuardian is IOwnableOrGuardian {\n\n    constructor(\n        address owner,\n        address guardian\n    ) public {\n        IOwnableOrGuardian.initialize(owner, guardian);\n    }\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ncontract UnderlyingTokenValuatorData is IOwnableOrGuardian {\n\n    // ============ State Values ============\n\n    address internal _weth;\n\n    mapping(address => IUsdAggregatorV2) internal _tokenToAggregatorMap;\n\n    // Defaults to USD if the value is the ZERO address\n    mapping(address => address) internal _tokenToQuoteSymbolMap;\n\n    // ============ Constants ============\n\n    uint8 public constant CHAINLINK_USD_DECIMALS = 8;\n    uint public constant CHAINLINK_USD_FACTOR = 10 ** uint(CHAINLINK_USD_DECIMALS);\n\n    uint8 public constant CHAINLINK_ETH_DECIMALS = 18;\n    uint public constant CHAINLINK_ETH_FACTOR = 10 ** uint(CHAINLINK_ETH_DECIMALS);\n\n}\n\n/*\n * Copyright 2020 DMM Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ncontract UnderlyingTokenValuatorImplV5 is IUnderlyingTokenValuator, IUnderlyingTokenValuatorV5, UnderlyingTokenValuatorData {\n\n    using SafeMath for uint;\n\n    /**\n     * Note, these arrays are set up, such that each index corresponds with one-another.\n     *\n     * @param tokens                The tokens that are supported by this adapter.\n     * @param chainlinkAggregators  The Chainlink aggregators that have on-chain prices.\n     * @param quoteSymbols          The token against which this token's value is compared using the aggregator. The\n     *                              zero address corresponds with USD.\n     */\n    function initialize(\n        address owner,\n        address guardian,\n        address weth,\n        address[] calldata tokens,\n        address[] calldata chainlinkAggregators,\n        address[] calldata quoteSymbols\n    )\n    external\n    initializer {\n        require(\n            tokens.length == chainlinkAggregators.length,\n            \"UnderlyingTokenValuatorImplV5: INVALID_AGGREGATORS\"\n        );\n        require(\n            chainlinkAggregators.length == quoteSymbols.length,\n            \"UnderlyingTokenValuatorImplV5: INVALID_TOKEN_PAIRS\"\n        );\n\n        IOwnableOrGuardian.initialize(owner, guardian);\n\n        _weth = weth;\n\n        for (uint i = 0; i < tokens.length; i++) {\n            _insertOrUpdateOracleToken(tokens[i], chainlinkAggregators[i], quoteSymbols[i]);\n        }\n    }\n\n    // ============ Admin Functions ============\n\n    function insertOrUpdateOracleToken(\n        address token,\n        address chainlinkAggregator,\n        address quoteSymbol\n    )\n    public\n    onlyOwnerOrGuardian {\n        _insertOrUpdateOracleToken(token, chainlinkAggregator, quoteSymbol);\n    }\n\n    // ============ Public Functions ============\n\n    function weth() external view returns (address) {\n        return _weth;\n    }\n\n    function getAggregatorByToken(\n        address token\n    ) external view returns (address) {\n        return address(_tokenToAggregatorMap[token]);\n    }\n\n    function getQuoteSymbolByToken(\n        address token\n    ) external view returns (address) {\n        return _tokenToQuoteSymbolMap[token];\n    }\n\n    function getTokenValue(\n        address token,\n        uint amount\n    )\n    public\n    view\n    returns (uint) {\n        require(\n            address(_tokenToAggregatorMap[token]) != address(0),\n            \"UnderlyingTokenValuatorImplV5::getTokenValue: INVALID_TOKEN\"\n        );\n\n        uint chainlinkPrice = uint(_tokenToAggregatorMap[token].latestAnswer());\n        address quoteSymbol = _tokenToQuoteSymbolMap[token];\n\n        if (quoteSymbol == address(0)) {\n            // The pair has a USD base, we are done.\n            return amount.mul(chainlinkPrice).div(CHAINLINK_USD_FACTOR);\n        } else if (quoteSymbol == _weth) {\n            // The price we just got and converted is NOT against USD. So we need to get its pair's price against USD.\n            // We can do so by recursively calling #getTokenValue using the `quoteSymbol` as the parameter instead of `token`.\n            return getTokenValue(quoteSymbol, amount.mul(chainlinkPrice).div(CHAINLINK_ETH_FACTOR));\n        } else {\n            revert(\"UnderlyingTokenValuatorImplV5::getTokenValue: INVALID_QUOTE_SYMBOL\");\n        }\n    }\n\n    // ============ Internal Functions ============\n\n    function _insertOrUpdateOracleToken(\n        address token,\n        address chainlinkAggregator,\n        address quoteSymbol\n    ) internal {\n        _tokenToAggregatorMap[token] = IUsdAggregatorV2(chainlinkAggregator);\n        if (quoteSymbol != address(0)) {\n            // The aggregator's price is NOT against USD. Therefore, we need to store what it's against as well as the\n            // # of decimals the aggregator's price has.\n            _tokenToQuoteSymbolMap[token] = quoteSymbol;\n        }\n        emit TokenInsertedOrUpdated(token, chainlinkAggregator, quoteSymbol);\n    }\n\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteSymbol\",\"type\":\"address\"}],\"name\":\"TokenInsertedOrUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHAINLINK_ETH_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHAINLINK_ETH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHAINLINK_USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHAINLINK_USD_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregatorByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getQuoteSymbolByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"chainlinkAggregators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"quoteSymbols\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteSymbol\",\"type\":\"address\"}],\"name\":\"insertOrUpdateOracleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UnderlyingTokenValuatorImplV5","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}