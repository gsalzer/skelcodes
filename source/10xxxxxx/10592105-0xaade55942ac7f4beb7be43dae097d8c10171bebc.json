{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-09-17\r\n*/\r\n\r\npragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token is SafeMath {\r\n     // Functions:\r\n     /// @return total amount of tokens\r\n     function totalSupply() constant returns (uint256 supply);\r\n\r\n     /// @param _owner The address from which the balance will be retrieved\r\n     /// @return The balance\r\n     function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n     /// @notice send `_value` token to `_to` from `msg.sender`\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     function transfer(address _to, uint256 _value) returns(bool);\r\n\r\n     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     /// @param _from The address of the sender\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     /// @return Whether the transfer was successful or not\r\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool);\r\n\r\n     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @param _value The amount of wei to be approved for transfer\r\n     /// @return Whether the approval was successful or not\r\n     function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n     /// @param _owner The address of the account owning tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @return Amount of remaining tokens allowed to spent\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n     // Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StdToken is Token {\r\n     // Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint public supply = 0;\r\n\r\n     // Functions:\r\n     function transfer(address _to, uint256 _value) returns(bool) {\r\n          require(balances[msg.sender] >= _value);\r\n          require(balances[_to] + _value > balances[_to]);\r\n\r\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n\r\n          Transfer(msg.sender, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool){\r\n          require(balances[_from] >= _value);\r\n          require(allowed[_from][msg.sender] >= _value);\r\n          require(balances[_to] + _value > balances[_to]);\r\n\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n          balances[_from] = safeSub(balances[_from],_value);\r\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n\r\n          Transfer(_from, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function totalSupply() constant returns (uint256) {\r\n          return supply;\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool) {\r\n          // To change the approve amount you first have to reduce the addresses`\r\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n          //  already 0 to mitigate the race condition described here:\r\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n}\r\n\r\ncontract EthDBNToken is StdToken\r\n{\r\n/// Fields:\r\n    string public constant name = \"Deep Belief Network\";\r\n    string public constant symbol = \"DBN\";\r\n    uint public constant decimals = 18;\r\n\r\n    // this includes DEVELOPERS_BONUS\r\n    uint public constant TOTAL_SUPPLY = 2000000000 * (1 ether / 1 wei);\r\n\r\n    uint public constant PRESALE_PRICE_1 = 240000;\r\n    uint public constant PRESALE_PRICE_2 = 200000;\r\n    uint public constant PRESALE_PRICE_3 = 150000;\r\n    uint public constant PRESALE_MAX_ETH_PER_ROUND = 1000;\r\n\r\n    // 1bln - this includes presale tokens\r\n    // uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 1000000000* (1 ether / 1 wei);\r\n\r\n    enum DBNState {\r\n        Selling,\r\n        Pending,\r\n        Working\r\n    }\r\n\r\n    DBNState public currentState = DBNState.Pending;\r\n    address public tokenManager = 0;\r\n\r\n/// Modifiers:\r\n    modifier onlyTokenManager()\r\n    {\r\n        require(msg.sender == tokenManager); \r\n        _; \r\n    }\r\n    \r\n/// Events:\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n\r\n/// Functions:\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    \r\n    constructor (address _tokenManager) public\r\n    {\r\n        tokenManager = _tokenManager;\r\n        balances[_tokenManager] += TOTAL_SUPPLY;\r\n    }\r\n\r\n    function setState(DBNState _nextState) public onlyTokenManager\r\n    {\r\n        currentState = _nextState;\r\n    }\r\n\r\n/// Overrides:\r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        require(currentState == DBNState.Working || msg.sender == tokenManager);\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n        require(currentState == DBNState.Working || msg.sender == tokenManager);\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(currentState == DBNState.Working || msg.sender == tokenManager);\r\n        return super.approve(_spender,_value);\r\n    }\r\n\r\n\r\n/// Setters/getters\r\n    function setTokenManager(address _mgr) public onlyTokenManager\r\n    {\r\n        tokenManager = _mgr;\r\n    }\r\n\r\n    // Default fallback function\r\n    function() payable \r\n    {\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PRICE_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PRICE_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PRICE_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAX_ETH_PER_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EthDBNToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a85218bb8c5e977e8740d8bc6e6a85e14e643d1","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a5d0208008d34090f1a55fb7b5f74df4bc56e6a9b407152c6e2d3156f78586eb"}]}