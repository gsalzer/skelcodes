{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract pyzusReferral is SafeMath  {\r\n    \r\n    struct Account {\r\n        address referrer;\r\n        uint referredCount;\r\n        uint referredCountIndirect;\r\n        uint reward;\r\n        bool referrerSet;\r\n        bool canReferrer;\r\n    }\r\n    \r\n    \r\n    mapping(address => Account) public accounts;\r\n    \r\n    uint256[] levelRate = [100,50,30,20];\r\n   \r\n    uint decimals = 1000;\r\n  \r\n    uint priceETH = 395;\r\n    \r\n    // Original payzus contract address.\r\n    address payzusAddr = 0x86690e2613be52EE927d395dB87f69EBCdf88f27;\r\n    // owner Address of payzus contract.\r\n    address owner = 0x3C32030b5018050DB5798c9EC655EaF1173e42b3;\r\n      \r\n    event RegisteredReferer(address referee, address referrer);\r\n    event PaidReferral(address from, address to, uint amount, uint level);\r\n    event BuyTokens(uint value);\r\n    \r\n    \r\n    \r\n// Buy tokens.\r\n    \r\n    function buyTokens(uint _value) public payable returns (bool){\r\n        \r\n        require(_value != 0, \"Tokens must be greater than 0\");\r\n        uint price;\r\n        uint tokenPrice;\r\n        price = safeDiv(safeMul(_value,67 ),1000);\r\n        tokenPrice = safeDiv(safeMul(safeMul(_value,67 ),10**18),safeMul(priceETH,1000));\r\n        require (price > 15, \"Tokens price must be greater than $15 i.e min. 230 tokens\");\r\n        require(price < 500, \"Tokens price must be smaller than $500 i.e max 7450 tokens\");\r\n        require(msg.value == tokenPrice, \"Send the correct amount of ether.\");\r\n        \r\n        owner.transfer(msg.value);\r\n        _value = safeMul(_value,10**18);\r\n        bool success = payzusAddr.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",owner,msg.sender,_value));\r\n        accounts[msg.sender].canReferrer = true;  \r\n          \r\n        payReferral(_value);\r\n        emit BuyTokens(_value);\r\n        return success;\r\n           \r\n    }\r\n    \r\n\r\n    function priceOf(uint _value) public view returns (uint) {\r\n        return safeDiv(safeMul(safeMul(_value,67 ),10**18),safeMul(priceETH,1000));\r\n    } \r\n\r\n\r\n\r\n    function isCircularReference(address referrer, address referee) internal view returns(bool){\r\n        address parent = referrer;\r\n    \r\n        for (uint i; i < levelRate.length; i++) {\r\n          if (parent == address(0)) {\r\n            break;\r\n          }\r\n    \r\n          if (parent == referee) {\r\n            return true;\r\n          }\r\n    \r\n          parent = accounts[parent].referrer;\r\n        }\r\n    \r\n        return false;\r\n      }\r\n\r\n\r\n\r\n   function addReferrer(address referrer) public returns(bool){\r\n       require(referrer != address(0), \"Referrer cannot be 0x0 address\");\r\n       require( accounts[msg.sender].referrerSet != true, \"Referrer already set\");\r\n       require( accounts[referrer].canReferrer != false , \"Referrer is not eligible.\");\r\n       require( isCircularReference(referrer, msg.sender) != true, \"Referee cannot be one of referrer uplines\");\r\n       require( accounts[msg.sender].referrer == address(0), \"Address have been registered upline\");\r\n    \r\n        Account storage userAccount = accounts[msg.sender];\r\n        Account storage parentAccount = accounts[referrer];\r\n    \r\n        userAccount.referrer = referrer;\r\n        userAccount.referrerSet = true;\r\n        parentAccount.referredCount = safeAdd(parentAccount.referredCount,1);\r\n        \r\n        for (uint i; i<levelRate.length-1; i++) {\r\n            address parent = parentAccount.referrer;\r\n            Account storage parentAccount2 = accounts[parentAccount.referrer];\r\n    \r\n          if (parent == address(0)) {\r\n            break;\r\n          }\r\n          \r\n          parentAccount2.referredCountIndirect = safeAdd(parentAccount2.referredCountIndirect,1); \r\n          \r\n          parentAccount = parentAccount2;\r\n                \r\n        }\r\n    \r\n        emit RegisteredReferer(msg.sender, referrer);\r\n        return true;\r\n      }\r\n    \r\n    \r\n    \r\n    function payReferral(uint value) internal returns (bool){\r\n        Account memory userAccount = accounts[msg.sender];\r\n        bool success;\r\n\r\n        for (uint i; i < levelRate.length; i++) {\r\n          address parent = userAccount.referrer;\r\n          Account storage parentAccount = accounts[userAccount.referrer];\r\n    \r\n          if (parent == address(0)) {\r\n            break;\r\n          }\r\n    \r\n          \r\n            uint c = safeDiv(safeMul(value,levelRate[i]),decimals);\r\n            \r\n            success = payzusAddr.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",owner,parent,c));\r\n            \r\n            c = safeDiv(c,10**18);\r\n            parentAccount.reward = safeAdd(parentAccount.reward,c);\r\n          \r\n            emit PaidReferral(msg.sender, parent, c, i);\r\n          \r\n    \r\n          userAccount = parentAccount;\r\n        }\r\n        return success;\r\n      }\r\n    \r\n      \r\n    function () public payable {\r\n            revert();\r\n        }      \r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"referredCount\",\"type\":\"uint256\"},{\"name\":\"referredCountIndirect\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"referrerSet\",\"type\":\"bool\"},{\"name\":\"canReferrer\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"RegisteredReferer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"PaidReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"}]","ContractName":"pyzusReferral","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5c1469f86e7605d22dec64eccbf11f745308c04f63ff601cc350d1e8998c17b1"}]}