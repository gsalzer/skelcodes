{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SALE {\r\n    event Received(address, uint);\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public owner;\r\n    IERC20 public saleToken;\r\n    uint256 public rate = 25000;\r\n    uint256 public maxVestAmount = 10 ether;\r\n    uint256 public ethGoal = 1600 ether;\r\n    \r\n    uint256 public ethCollected = 0;\r\n    \r\n    bool public allowUserWithdrawls = false; // and end the sale - modifes DAPP functionality\r\n    bool public saleHasStarted = false;\r\n    \r\n    mapping(address => uint256) public userVestedMap;\r\n    \r\n    constructor() public {\r\n      owner =  msg.sender;\r\n    }\r\n    \r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n    \r\n    // keep all tokens sent to this address\r\n    function receive() payable public {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    function setSaleHasStarted (bool allowed) onlyOwner public {\r\n        saleHasStarted = allowed;\r\n    }\r\n    \r\n    function setAllowUserWithdrawls (bool allowed) onlyOwner public {\r\n        allowUserWithdrawls = allowed;\r\n    }\r\n    \r\n    function setToken (address _token) onlyOwner public {\r\n        saleToken = IERC20(_token);\r\n    }\r\n    \r\n    function setRate (uint256 _rate) onlyOwner public {\r\n        rate = _rate;\r\n    }\r\n    \r\n    function setEthGoal (uint256 goal) onlyOwner public {\r\n        ethGoal = goal;\r\n    }\r\n    \r\n    function setMaxVestAmount (uint256 _amount) onlyOwner public {\r\n        maxVestAmount = _amount;\r\n    }\r\n    \r\n    function withdrawToken (address _token) onlyOwner public {\r\n        IERC20 token = IERC20(_token);\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    function withdrawETH () onlyOwner public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function doSale () public payable {\r\n        require(saleHasStarted, 'The sale has not yet begun');\r\n        require(ethCollected < ethGoal, 'The hardcap has been reached');\r\n        ethCollected = ethCollected.add(msg.value);\r\n        require(ethCollected <= ethGoal, 'Not enough sale tokens for this amount of ether, try a lower value');\r\n        uint256 vested = userVestedMap[msg.sender];\r\n        require(vested < maxVestAmount, 'You have used up your quota for this address');\r\n        require(vested.add(msg.value) <= maxVestAmount, 'You are trying to purchase more than your remaining quota');\r\n        // uint256 payout = getNumTokensForEther(msg.value);\r\n        // require(saleToken.balanceOf(address(this)) >= payout, 'Not enough sale tokens for this amount of ether');\r\n        userVestedMap[msg.sender] = vested.add(msg.value);\r\n        // require(saleToken.transfer(msg.sender, payout), 'Transfer failed');\r\n    }\r\n    \r\n    function participantWithdrawl () public {\r\n        require(allowUserWithdrawls, 'Withdrawls are disabled until the sale has finished');\r\n        uint256 payout = getParticipantsAllocation(msg.sender);\r\n        require(payout > 0, 'You have no tokens left to withdraw');\r\n        require(saleToken.balanceOf(address(this)) >= payout, 'Not enough sale tokens for this amount of ether');\r\n        userVestedMap[msg.sender] = 0;\r\n        require(saleToken.transfer(msg.sender, payout), 'Transfer failed');\r\n    }\r\n    \r\n    function getParticipantsAllocation (address user) public view returns (uint256) {\r\n        uint256 vested = userVestedMap[user];\r\n        uint256 payout = getNumTokensForEther(vested);\r\n        return payout;\r\n    }\r\n    \r\n    function getNumTokensForEther(uint256 eth_amount) public view returns (uint256) {\r\n        return eth_amount.mul(rate).div(1 ether);\r\n    }\r\n    \r\n    function getUserVestedAmount(address _address) public view returns (uint256) {\r\n        return userVestedMap[_address];\r\n    }\r\n    \r\n    function getEthBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getTokenBalance() public view returns (uint256) {\r\n        return saleToken.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowUserWithdrawls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"getNumTokensForEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParticipantsAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxVestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participantWithdrawl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowUserWithdrawls\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"setEthGoal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxVestAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setSaleHasStarted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVestedMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SALE","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://92d90e714cfa1b64c5111bca1635f5a557e278b24f05b30e49ae673cc6532574"}]}