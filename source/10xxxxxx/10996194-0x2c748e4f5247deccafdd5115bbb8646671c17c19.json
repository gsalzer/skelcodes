{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n\r\n// File: contracts/Governable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Governable {\r\n\r\n  Storage public store;\r\n\r\n  constructor(address _store) public {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(store.isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return store.governance();\r\n  }\r\n}\r\n\r\n// File: contracts/Controllable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Controllable is Governable {\r\n\r\n  constructor(address _storage) Governable(_storage) public {\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(store.isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return store.controller();\r\n  }\r\n}\r\n\r\n// File: contracts/hardworkInterface/IController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IController {\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external view returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/HardWorkHelper.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\ncontract HardWorkHelper is Controllable {\r\n\r\n  address[] public vaults;\r\n  IERC20 public farmToken;\r\n\r\n  constructor(address _storage, address _farmToken)\r\n  Controllable(_storage) public {\r\n    farmToken = IERC20(_farmToken);\r\n  }\r\n\r\n  /**\r\n  * Initializes the vaults and order of calls\r\n  */\r\n  function setVaults(address[] memory newVaults) public onlyGovernance {\r\n    if (getNumberOfVaults() > 0) {\r\n      for (uint256 i = vaults.length - 1; i > 0 ; i--) {\r\n        delete vaults[i];\r\n      }\r\n      // delete the last one without underflowing on i\r\n      delete vaults[0];\r\n    }\r\n    vaults.length = 0;\r\n    for (uint256 i = 0; i < newVaults.length; i++) {\r\n      vaults.push(newVaults[i]);\r\n    }\r\n  }\r\n\r\n  function getNumberOfVaults() public view returns(uint256) {\r\n    return vaults.length;\r\n  }\r\n\r\n  /**\r\n  * Does the hard work for all the pools. Cannot be called by smart contracts in order to avoid\r\n  * a possible flash loan liquidation attack.\r\n  */\r\n  function doHardWork() public {\r\n    require(msg.sender == tx.origin, \"Smart contracts cannot work hard\");\r\n    for (uint256 i = 0; i < vaults.length; i++) {\r\n      IController(controller()).doHardWork(vaults[i]);\r\n    }\r\n    // transfer the reward to the caller\r\n    uint256 balance = farmToken.balanceOf(address(this));\r\n    farmToken.transfer(msg.sender, balance);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newVaults\",\"type\":\"address[]\"}],\"name\":\"setVaults\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HardWorkHelper","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197000000000000000000000000a0246c9032bc3a600820415ae600c6388619a14d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6c3c4ef0acf9d990918ca950e14900d57353f1e95268e1eab1cf4c5e499f5073"}]}