{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner\r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts\r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address _owner;\r\n\r\n   event transferOwn(address _owner, address newOwner);\r\n\r\n\t\tmodifier onlyOwner() {\r\n\t\t\trequire(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isOwner(address account) public view returns (bool) {\r\n\t\t\treturn account == _owner;\r\n\t\t}\r\n\r\n\t\tfunction getOwner() public view returns (address) {\r\n\t\t\treturn _owner;\r\n\t\t}\r\n\r\n\t\t function transferOwnership(address newOwner) public onlyOwner returns (address) {\r\n\t         require( newOwner != address(0), \"new owner address is invalid\");\r\n\t\t\t emit transferOwn(_owner, newOwner);\r\n\t         _owner = newOwner;\r\n\t\t\t return _owner;\r\n      }\r\n}\r\n\r\n// File: contracts/Authorizable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has an authorizables address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n  mapping(address => bool) public authorized;\r\n\r\n\t\tmodifier onlyAuthorized() {\r\n\t\t\trequire(isAuthorized(msg.sender), \"AuthorizeError: caller does not have the Owner or Authorized role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isAuthorized(address account) public view returns (bool) {\r\n\t\t\treturn authorized[account];\r\n\t\t}\r\n\r\n\t\tfunction addAuthorized(address _addr) public onlyOwner {\r\n\r\n\t\t\tauthorized[_addr] = true;\r\n\t\t}\r\n\r\n\t\tfunction addAuthorizedInternal( address _addr ) internal {\r\n\t\t\tauthorized[_addr] = true;\r\n\t\t}\r\n\r\n\t\tfunction removeAuthorizedInternal( address _addr ) internal {\r\n\t\t\tauthorized[_addr] = false;\r\n\t\t}\r\n\r\n\t\tfunction removeAuthorized(address _addr) public onlyOwner {\r\n   \r\n\t\t\tauthorized[_addr] = false;\r\n\t\t}\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/TokenStorage.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n/**\r\n* @title TokenStorage\r\n*/\r\ncontract TokenStorage  is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n\t// variables\r\n\taddress internal _registryContract;\r\n\r\n\tuint8 internal _decimals;\r\n\tstring internal _name;\r\n\tstring internal _symbol;\r\n\tuint256 internal _supply;\r\n\r\n\tmapping( address => bool ) public whitelistedContracts;\r\n\r\n\t// struct\r\n\tstruct tkyc {\r\n\t\tbytes32 dochash;\r\n\t\tbool status;\r\n\t}\r\n\r\n\t// mapping\r\n\tmapping(address => mapping(address => uint256)) internal _allowances;\r\n\tmapping(address => uint256) internal _balances;\r\n\tmapping(address => tkyc) internal _kycs;\r\n\r\n\tconstructor() public {\r\n    \r\n\t\t_owner = msg.sender;\r\n\t\t_decimals = 18;\r\n\t\t_name = \"XFA\";\r\n\t\t_symbol = \"XFA\";\r\n\r\n\t\t_supply = 1000000000 * 10**18; // 18 decimal places are allowed\r\n\t\t_balances[_owner] = _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// proxy\r\n\tfunction _setRegistry(address _registry) public onlyOwner {\r\n\t\trequire(_registry != address(0), \"InvalidAddress: invalid address passed for proxy contract\");\r\n\t\t_registryContract = _registry;\r\n\t}\r\n\r\n\tfunction _getRegistry() public view returns (address) {\r\n\t\treturn _registryContract;\r\n\t}\r\n\r\n\tmodifier isRegistry() {\r\n\t\trequire(msg.sender == _registryContract, \"AccessDenied: This address is not allowed to access the storage\");\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// utils\r\n\tfunction _getName() public view isRegistry returns (string) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction _getSymbol() public view isRegistry returns (string) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction _getDecimals() public view isRegistry returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction _subSupply(uint256 _value) public isRegistry {\r\n\t\t_supply = _supply.sub(_value);\r\n\t}\r\n\r\n\tfunction _getSupply() public view isRegistry returns (uint256) {\r\n\t\treturn _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// allowance\r\n\tfunction _setAllowance(address _owner, address _spender, uint256 _value) public isRegistry {\r\n \r\n\t\t_allowances[_owner][_spender] = _value;\r\n\t}\r\n\r\n\tfunction _getAllowance(address _owner, address _spender) public view isRegistry returns (uint256) {\r\n\r\n\t\treturn _allowances[_owner][_spender];\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// balance\r\n\tfunction _addBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].add(_value);\r\n\t}\r\n\r\n\tfunction _subBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].sub(_value);\r\n\t}\r\n\r\n\tfunction _getBalance(address _addr) public view isRegistry returns (uint256) {\r\n\t\treturn _balances[_addr];\r\n\t}\r\n\r\n\r\n\r\n\t// kyc\r\n\tfunction _setKyc(address _addr, bytes32 _value) public isRegistry {\r\n\t\t tkyc memory item = tkyc( _value, true );\r\n\t\t_kycs[ _addr ] = item;\r\n\t}\r\n\r\n\tfunction _removeKyc(address _addr) public isRegistry {\r\n\t\t_kycs[_addr].dochash = \"0x0\";\r\n\t\t_kycs[_addr].status = false;\r\n\t}\r\n\r\n\tfunction _getKyc(address _addr) public view isRegistry returns (bytes32 dochash, bool status) {\r\n\t\treturn (_kycs[_addr].dochash, _kycs[_addr].status);\r\n\t}\r\n\r\n\tfunction _verifyKyc(address _from, address _to) public view isRegistry returns (bool) {\r\n\t\tif (_kycs[_from].status == true && _kycs[_to].status == true) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction addWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = true;\r\n\t}\r\n\r\n\tfunction removeWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = false;\r\n\t}\r\n\r\n\tfunction isWhitelistedContract( address _admin ) public view returns (bool) {\r\n\t\treturn whitelistedContracts[_admin];\r\n\t}\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/Proxy.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/TokenProxy.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n* @title TokenProxy\r\n* @notice A proxy contract that serves the latest implementation of TokenProxy.\r\n*/\r\ncontract TokenProxy is UpgradeabilityProxy, Authorizable {\r\n\t\r\n  TokenStorage private dataStore;\r\n\r\n\tconstructor(address _implementation, address storageAddress) public UpgradeabilityProxy(_implementation) {\r\n  \r\n\t\t_owner = msg.sender;\r\n\t\tdataStore = TokenStorage(storageAddress);\r\n\t}\r\n\r\n\tfunction upgradeTo(address _nimplementation) public onlyOwner {\r\n \r\n\t\t_upgradeTo(_nimplementation);\r\n\t}\r\n\r\n\tfunction implementation() public view returns (address) {\r\n \r\n\t\treturn _implementation();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nimplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"storageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"TokenProxy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee7bb9cf196bea347548a8af619a678b448a73c2000000000000000000000000530c59248c907f0e30316a1ab39cd58be3cd5ccf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://970f0461aded6ff8d40c8747023d1095385f7d53a270059376e56308ac42084d"}]}