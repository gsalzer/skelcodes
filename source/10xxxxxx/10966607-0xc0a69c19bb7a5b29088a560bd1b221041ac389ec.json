{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.7.2;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract Pairs {\r\n    \r\n    function getPair(address pairAddress) public view returns \r\n        ( address token0\r\n        , address token1\r\n        , uint112 reserve0\r\n        , uint112 reserve1\r\n        , uint balance0\r\n        , uint balance1\r\n        ) {\r\n        \r\n        IUniswapV2Pair _pair = IUniswapV2Pair(pairAddress);\r\n        \r\n        token0 = _pair.token0();\r\n        token1 = _pair.token1();\r\n        (reserve0, reserve1,) = _pair.getReserves();\r\n        balance0 = _safeBalanceOf(token0, pairAddress);\r\n        balance1 = _safeBalanceOf(token1, pairAddress);\r\n    }\r\n    \r\n    function getAllPairs(address factoryAddress, uint fromIndex, uint toIndex) external view returns \r\n        ( address[] memory pairs\r\n        , address[] memory tokens0\r\n        , address[] memory tokens1\r\n        , uint112[] memory reserves0\r\n        , uint112[] memory reserves1\r\n        , uint[] memory balances0\r\n        , uint[] memory balances1\r\n        ) {\r\n            \r\n        IUniswapV2Factory _factory = IUniswapV2Factory(factoryAddress);\r\n        uint _count = _factory.allPairsLength();\r\n        uint _to = toIndex < _count ? toIndex : _count - 1;\r\n        uint _from = fromIndex <= _to ? fromIndex : _to;\r\n        uint _length = _to - _from + 1;\r\n        \r\n        \r\n        pairs = new address[](_length);\r\n        \r\n        tokens0 = new address[](_length);\r\n        tokens1 = new address[](_length);\r\n        reserves0 = new uint112[](_length);\r\n        reserves1 = new uint112[](_length);\r\n        \r\n        for (uint i = 0; i < _length; i++) {\r\n            pairs[i] = _factory.allPairs(i + _from);\r\n            (tokens0[i], tokens1[i],reserves0[i],reserves1[i],,) = getPair(pairs[i]);\r\n        }\r\n        \r\n        balances0 = new uint[](_length);\r\n        balances1 = new uint[](_length);\r\n        \r\n        for (uint i = 0; i < _length; i++) {\r\n            address _pair = pairs[i];\r\n            (,,,,balances0[i], balances1[i]) = getPair(_pair);\r\n        }\r\n    }\r\n    \r\n    function _safeBalanceOf(address token, address owner) private view returns (uint) {\r\n        (bool success, bytes memory returnData) = token.staticcall(abi.encodeWithSignature(\"balanceOf(address)\", owner));\r\n        if (success && returnData.length == 32) {\r\n            return abi.decode(returnData, (uint));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"}],\"name\":\"getAllPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens1\",\"type\":\"address[]\"},{\"internalType\":\"uint112[]\",\"name\":\"reserves0\",\"type\":\"uint112[]\"},{\"internalType\":\"uint112[]\",\"name\":\"reserves1\",\"type\":\"uint112[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances1\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"balance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Pairs","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee99bca35843b650e6b6afda30f0d0bf6aedf96d1f703094d6dd5a8193713241"}]}