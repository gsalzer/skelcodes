{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n/*************************\r\n**************************\r\n* https://nexus-dapp.com *\r\n**************************\r\n*************************/\r\n\r\ncontract Nexus {\r\n\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n    /// @dev Only people with tokens\r\n    modifier onlyBagholders {\r\n        require(myTokens(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only people with profits\r\n    modifier onlySetherghands {\r\n        require(myDividends(true, msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev isControlled\r\n    modifier isControlled() {\r\n      require(isStarted());\r\n      _;\r\n    }\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEther,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 etherEarned,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 etherReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 etherWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\t\r\n    event Approval(\r\n\t\taddress indexed admin, \r\n\t\taddress indexed spender, \r\n\t\tuint256 value\r\n\t);\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n\r\n    string public name = \"Nexus\";\r\n    string public symbol = \"NEX\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    /// @dev 5% dividends for token selling\r\n    uint8 constant internal exitFee_ = 5;\r\n\r\n    /// @dev 33% masternode\r\n    uint8 constant internal refferalFee_ = 30;\r\n\r\n    /// @dev P3D pricing\r\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n\r\n    /// @dev 100 needed for masternode activation\r\n    uint256 public stakingRequirement = 100e18;\r\n\r\n    /// @dev light the marketing\r\n    address payable public marketing;\r\n\t\r\n\t// @dev ERC20 allowances\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n   /*=================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => int256) public payoutsTo_;\r\n    mapping(address => uint256) public referralBalance_;\r\n\t\r\n\t// referrers\r\n\tmapping(address => address) public referrers_;\t\r\n    \r\n\tuint256 public jackPot_;\r\n\taddress payable public jackPotPretender_;\t\r\n\tuint256 public jackPotStartTime_;\r\n\t\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    uint256 public depositCount_;\r\n\r\n\r\n    /*=======================================\r\n    =            CONSTRUCTOR                =\r\n    =======================================*/\r\n\r\n   constructor (address payable _marketing) public {\r\n\r\n\t\tmarketing = _marketing;\r\n\t\tjackPotStartTime_ = now;\r\n\t\tjackPot_ = 20 ether;\r\n \r\n   }\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS           =\r\n    =======================================*/\r\n\r\n    /**\r\n     * @dev Fallback function to handle ethereum that was send straight to the contract\r\n     *  Unfortunately we cannot use a referral address this way.\r\n     */\r\n    \r\n\tfunction() external isControlled payable  {\t\r\n        purchaseTokens(msg.value, address(0x0), msg.sender);\r\n    }\r\n\r\n    /// @dev Converts all incoming ether to tokens for the caller, and passes down the referral addy (if any)\r\n    function buyNEX(address _referredBy) isControlled public payable  returns (uint256) {\r\n        purchaseTokens(msg.value, _referredBy , msg.sender);\r\n    }\r\n\r\n    /// @dev Converts to tokens on behalf of the customer - this allows gifting and integration with other systems\r\n    function purchaseFor(address _referredBy, address payable _customerAddress) isControlled public payable returns (uint256) {\r\n        purchaseTokens(msg.value, _referredBy , _customerAddress);\r\n    }\r\n\r\n    /// @dev Converts all of caller's dividends to tokens.\r\n    function reinvest() onlySetherghands public {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false, msg.sender); // retrieve ref. bonus later in the code\r\n\r\n        // pay out the dividends virtually\r\n        address payable _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, address(0x0) , _customerAddress);\r\n\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\t\r\n\t/// @dev The new user welcome function\r\n    function reg() public returns(bool) {\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n    /// @dev Alias of sell() and withdraw().\r\n    function exit() public {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n\r\n        // capitulation\r\n        withdraw();\r\n    }\r\n\r\n    /// @dev Withdraws all of the callers earnings.\r\n    function withdraw() onlySetherghands public {\r\n        // setup data\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false, msg.sender); // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    /// @dev Liquifies tokens to ether.\r\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ether = tokensToEther_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ether, exitFee_), 100);\r\n        uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEther * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        // fire event\r\n\t\temit Transfer(_customerAddress, address(0x0), _tokens);\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEther, now, buyPrice());\r\n    }\r\n\t\r\n    /**\r\n     * @dev ERC20 functions.\r\n     */\r\n    function allowance(address _admin, address _spender) public view returns (uint256) {\r\n        return _allowances[_admin][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amountOfTokens) public returns (bool) {\r\n        approveInternal(msg.sender, _spender, _amountOfTokens);\r\n        return true;\r\n    }\r\n\r\n    function approveInternal(address _admin, address _spender, uint256 _amountOfTokens) internal {\r\n        require(_admin != address(0x0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0x0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_admin][_spender] = _amountOfTokens;\r\n        emit Approval(_admin, _spender, _amountOfTokens);\r\n    }\r\n\t\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        approveInternal(msg.sender, spender, SafeMath.add(_allowances[msg.sender][spender], addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        approveInternal(msg.sender, spender, SafeMath.sub(_allowances[msg.sender][spender], subtractedValue));\r\n        return true;\r\n    }\t\r\n\t\r\n    /**\r\n     * @dev Transfer tokens from the caller to a new holder.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if (myDividends(true, msg.sender) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        return transferInternal(_toAddress,_amountOfTokens,_customerAddress);\r\n    }\r\n\t\r\n    function transferFrom(address _fromAddress, address _toAddress, uint256 _amountOfTokens) public returns (bool) {\r\n        transferInternal(_toAddress, _amountOfTokens, _fromAddress);\r\n        approveInternal(_fromAddress, msg.sender, SafeMath.sub(_allowances[_fromAddress][msg.sender], _amountOfTokens));\r\n        return true;\r\n    }\t\r\n\r\n    function transferInternal(address _toAddress, uint256 _amountOfTokens , address _fromAddress) internal returns (bool) {\r\n        // setup\r\n        address _customerAddress = _fromAddress;\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\t\r\n\r\n    /*=====================================\r\n    =      HELPERS AND CALCULATORS        =\r\n    =====================================*/\r\n\r\n    /**\r\n     * @dev Method to view the current Ether stored in the contract\r\n     *  Example: totalEtherBalance()\r\n     */\r\n    function totalEtherBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /// @dev Retrieve the total token supply.\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /// @dev Retrieve the tokens balance.\r\n    function myTokens(address _customerAddress) public view returns (uint256) {\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve the dividends owned by the caller.\r\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     *  But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus, address _customerAddress) public view returns (uint256) {\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    /// @dev Retrieve the token balance of any single address.\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /// @dev Retrieve the dividend balance of any single address.\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    /// @dev Return the sell price of 1 individual token.\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ether = tokensToEther_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ether, exitFee_), 100);\r\n            uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n\r\n            return _taxedEther;\r\n        }\r\n    }\r\n\r\n    /// @dev Return the buy price of 1 individual token.\r\n    function buyPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ether = tokensToEther_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ether, entryFee()), 100);\r\n            uint256 _taxedEther = SafeMath.add(_ether, _dividends);\r\n\r\n            return _taxedEther;\r\n        }\r\n    }\r\n\r\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n    function calculateTokensReceived(uint256 _etherToSpend) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_etherToSpend, entryFee()), 100);\r\n        uint256 _taxedEther = SafeMath.sub(_etherToSpend, _dividends);\r\n        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n    function calculateEtherReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ether = tokensToEther_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ether, exitFee_), 100);\r\n        uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n        return _taxedEther;\r\n    }\r\n\r\n    /// @dev Function for the frontend to get untaxed receivable ether.\r\n    function calculateUntaxedEtherReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ether = tokensToEther_(_tokensToSell);\r\n        //uint256 _dividends = SafeMath.div(SafeMath.mul(_ether, exitFee()), 100);\r\n        //uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\r\n        return _ether;\r\n    }\r\n\r\n    function entryFee() private view returns (uint8){\r\n      uint256 volume = address(this).balance  - msg.value;\r\n\r\n      if (volume<=1 ether){\r\n        return 22;\r\n      }\r\n      if (volume<=2 ether){\r\n        return 21;\r\n      }\r\n      if (volume<=5000 ether){\r\n        return 20;\r\n      }\r\n      if (volume<=6000 ether){\r\n        return 19;\r\n      }\r\n      if (volume<=7000 ether){\r\n        return 18;\r\n      }\r\n\r\n      return 17;\r\n\t  \r\n    }\r\n\r\n     // @dev Function for find if premine\r\n    function jackPotInfo() public view returns (uint256 jackPot, uint256 timer, address jackPotPretender) {\r\n\t\tjackPot = jackPot_;\r\n\t\tif (jackPot > address(this).balance) {\r\n\t\t\tjackPot = address(this).balance;\r\n\t\t}\r\n\t\tjackPot = SafeMath.div(jackPot,2);\r\n\t\t\r\n\t\ttimer = now - jackPotStartTime_;\r\n\t\tjackPotPretender = jackPotPretender_;\r\n    }\r\n\t\r\n\t// @dev Function for find if premine\r\n    function isPremine() public view returns (bool) {\r\n      return depositCount_<=5;\r\n    }\r\n\r\n    // @dev Function for find if premine\r\n    function isStarted() public pure returns (bool) {\r\n      return true; //startTime!=0 && now > startTime;\r\n    }\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\r\n    /// @dev Internal function to actually purchase the tokens.\r\n    function purchaseTokens(uint256 _incomingEther, address _referredBy , address payable _customerAddress) internal returns (uint256) {\r\n        // data setup\r\n\t\trequire (_incomingEther > 0);\r\n\t\t\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEther, entryFee()), 100);\r\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEther = SafeMath.sub(_incomingEther, _undividedDividends);\r\n        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\r\n        uint256 _fee = _dividends * magnitude;\r\n\t\tuint256 _marketing = SafeMath.div(SafeMath.mul(_incomingEther, 4), 100); //4%\r\n\t\t\r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n        // is the user referred by a masternode?\r\n        if (\r\n            // is this a referred purchase?\r\n            _referredBy != address(0x0) &&\r\n\r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n\r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ) {\r\n            // wealth redistribution\r\n\t\t\tif (referrers_[_customerAddress] == address(0x0)) {\r\n\t\t\t\treferrers_[_customerAddress] = _referredBy;\r\n\t\t\t}\r\n\t\t\tcalculateReferrers(_customerAddress, _referralBonus, 1);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        // we can't give people infinite ether\r\n        if (tokenSupply_ > 0) {\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\t\t\t\r\n\t\t\t// fire event\r\n\t\t\temit Transfer(address(0x0), _customerAddress, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        // really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\t\t\r\n\t\t// JackPot calculate\r\n\t\tcalculateJackPot(_incomingEther, _customerAddress);\r\n\t\t\r\n\t\t// 4% for marketing \r\n\t\tmarketing.send(_marketing);\r\n\r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEther, _amountOfTokens, _referredBy, now, buyPrice());\r\n\r\n        // Keep track\r\n        depositCount_++;\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate Referrers reward \r\n     * Level 1: 35%, Level 2: 20%, Level 3: 15%, Level 4: 10%, Level 5: 10%, Level 6: 5%, Level 7: 5%\r\n     */\t\r\n\tfunction calculateReferrers(address _customerAddress, uint256 _referralBonus, uint8 _level) internal {\r\n\t\taddress _referredBy = referrers_[_customerAddress];\r\n\t\tuint256 _percent = 35;\r\n\t\tif (_referredBy != address(0x0)) {\r\n\t\t\tif (_level == 2) _percent = 20;\r\n\t\t\tif (_level == 3) _percent = 15;\r\n\t\t\tif (_level == 4 || _level == 5) _percent = 10;\r\n\t\t\tif (_level == 6 || _level == 7) _percent = 5;\r\n\t\t\tuint256 _newReferralBonus = SafeMath.div(SafeMath.mul(_referralBonus, _percent), 100);\r\n\t\t\treferralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _newReferralBonus);\r\n\t\t\tif (_level < 7) {\r\n\t\t\t\tcalculateReferrers(_referredBy, _referralBonus, _level+1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    /**\r\n     * @dev Calculate JackPot \r\n     * 40% from entryFee is going to JackPot \r\n     * The last investor (with 0.2 ether) will receive the jackpot in 12 hours \r\n     */\t\r\n\tfunction calculateJackPot(uint256 _incomingEther, address payable _customerAddress) internal {\r\n\t\tuint256 timer = SafeMath.div(SafeMath.sub(now, jackPotStartTime_), 12 hours);\r\n\t\tif (timer > 0 && jackPotPretender_ != address(0x0) && jackPot_ > 0) {\r\n\t\t\t//pay jackPot\r\n\t\t\tif (address(this).balance < jackPot_) {\r\n\t\t\t\tjackPot_ = address(this).balance;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tjackPotPretender_.send(SafeMath.div(jackPot_,2));\r\n\t\t\tjackPot_ = SafeMath.div(jackPot_,2);\r\n\t\t\tjackPotStartTime_ = now;\r\n\t\t\tjackPotPretender_ = address(0x0);\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEther, entryFee()), 100);\r\n\t\tjackPot_ += SafeMath.div(SafeMath.mul(_undividedDividends, 40), 100);\r\n\t\t\r\n\t\tif (_incomingEther >= 0.2 ether) { \r\n\t\t\tjackPotPretender_ = _customerAddress;\r\n\t\t\tjackPotStartTime_ = now;\r\n\t\t}\r\n\t}\t\r\n\t\r\n    /**\r\n     * @dev Calculate Token price based on an amount of incoming ether\r\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function etherToTokens_(uint256 _ether) internal view returns (uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial ** 2)\r\n                            +\r\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ether * 1e18))\r\n                            +\r\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\r\n                            +\r\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            ) / (tokenPriceIncremental_)\r\n        ) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate token sell value.\r\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEther_(uint256 _tokens) internal view returns (uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n                        ) - tokenPriceIncremental_\r\n                    ) * (tokens_ - 1e18)\r\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n            )\r\n        / 1e18);\r\n\r\n        return _etherReceived;\r\n    }\r\n\r\n    /// @dev This is where all your gas goes.\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketing\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingEther\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buyNEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEtherReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_etherToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateUntaxedEtherReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositCount_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPremine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jackPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"jackPotPretender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotPretender_\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPotStartTime_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackPot_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nexus","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003957dd168014a5d2e66a2d84b7c2577a543d59ed","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://46f2496d7b9410f74affd4f350d6bdacdba071c50738aa3bb48b20fd1b7daf65"}]}