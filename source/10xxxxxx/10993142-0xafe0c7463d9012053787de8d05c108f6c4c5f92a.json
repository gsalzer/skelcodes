{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.9;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Fixed Supply Token ðŸ‘Š + Factory v1.20-pre-release\r\n//\r\n// A factory to conveniently deploy your own source code verified fixed supply\r\n// token contracts\r\n//\r\n// Factory deployment address: 0x{something}\r\n//\r\n// https://github.com/bokkypoobah/FixedSupplyTokenFactory\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function max(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a <= b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n\r\n\r\ncontract Owned {\r\n\r\n    address private mOwner;   \r\n    bool private initialised;    \r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function _initOwned(address _owner) internal {\r\n        require(!initialised);\r\n        mOwner = address(uint160(_owner));\r\n        initialised = true;\r\n        emit OwnershipTransferred(address(0), mOwner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return mOwner;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == mOwner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public {\r\n        require(isOwner());\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(mOwner, newOwner);\r\n        mOwner = address(uint160(newOwner));\r\n        newOwner = address(0);\r\n    }\r\n    function recoverTokens(address token, uint tokens) public {\r\n        require(isOwner());\r\n        if (token == address(0)) {\r\n            payable(mOwner).transfer((tokens == 0 ? address(this).balance : tokens));\r\n        } else {\r\n            IERC20(token).transfer(mOwner, tokens == 0 ? IERC20(token).balanceOf(address(this)) : tokens);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ApproveAndCall Fallback\r\n// NOTE for contracts implementing this interface:\r\n// 1. An error must be thrown if there are errors executing `transferFrom(...)`\r\n// 2. The calling token contract must be checked to prevent malicious behaviour\r\n// ----------------------------------------------------------------------------\r\ninterface ApproveAndCallFallback {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) external;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Token Interface = ERC20 + symbol + name + decimals + approveAndCall\r\n// ----------------------------------------------------------------------------\r\ninterface TokenInterface is IERC20 {\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) external returns (bool success);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// FixedSupplyToken ðŸ‘Š = ERC20 + symbol + name + decimals + approveAndCall\r\n// ----------------------------------------------------------------------------\r\ncontract FixedSupplyToken is TokenInterface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string _symbol;\r\n    string  _name;\r\n    uint8 _decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {\r\n        _initOwned(tokenOwner);\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = fixedSupply;\r\n        balances[tokenOwner] = _totalSupply;\r\n        emit Transfer(address(0), tokenOwner, _totalSupply);\r\n    }\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    function balanceOf(address tokenOwner) public view override returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public override returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public override returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    // NOTE Only use this call with a trusted spender contract\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public override returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallback(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Fixed Supply Token ðŸ‘Š Factory\r\n//\r\n// Notes:\r\n//   * The `newContractAddress` deprecation is just advisory\r\n//   * A fee equal to or above `minimumFee` must be sent with the\r\n//   `deployTokenContract(...)` call\r\n//\r\n// Execute `deployTokenContract(...)` with the following parameters to deploy\r\n// your very own FixedSupplyToken contract:\r\n//   symbol         symbol\r\n//   name           name\r\n//   decimals       number of decimal places for the token contract\r\n//   totalSupply    the fixed token total supply\r\n//\r\n// For example, deploying a FixedSupplyToken contract with a `totalSupply`\r\n// of 1,000.000000000000000000 tokens:\r\n//   symbol         \"ME\"\r\n//   name           \"My Token\"\r\n//   decimals       18\r\n//   initialSupply  10000000000000000000000 = 1,000.000000000000000000 tokens\r\n//\r\n// The TokenDeployed() event is logged with the following parameters:\r\n//   owner          the account that execute this transaction\r\n//   token          the newly deployed FixedSupplyToken address\r\n//   symbol         symbol\r\n//   name           name\r\n//   decimals       number of decimal places for the token contract\r\n//   totalSupply    the fixed token total supply\r\n// ----------------------------------------------------------------------------\r\ncontract BokkyPooBahsFixedSupplyTokenFactory is Owned {\r\n    using SafeMath for uint;\r\n\r\n    address public newAddress;\r\n    uint public minimumFee = 0.1 ether;\r\n    mapping(address => bool) public isChild;\r\n    address[] public children;\r\n\r\n    event FactoryDeprecated(address _newAddress);\r\n    event MinimumFeeUpdated(uint oldFee, uint newFee);\r\n    event TokenDeployed(address indexed owner, address indexed token, string symbol, string name, uint8 decimals, uint totalSupply);\r\n\r\n    constructor () public {\r\n        _initOwned(msg.sender);\r\n    }\r\n    function numberOfChildren() public view returns (uint) {\r\n        return children.length;\r\n    }\r\n    function deprecateFactory(address _newAddress) public {\r\n        require(isOwner());\r\n        require(newAddress == address(0));\r\n        emit FactoryDeprecated(_newAddress);\r\n        newAddress = _newAddress;\r\n    }\r\n    function setMinimumFee(uint _minimumFee) public {\r\n        require(isOwner());\r\n        emit MinimumFeeUpdated(minimumFee, _minimumFee);\r\n        minimumFee = _minimumFee;\r\n    }\r\n    function deployTokenContract(string memory symbol, string memory name, uint8 decimals, uint totalSupply) public payable returns (FixedSupplyToken token) {\r\n        require(msg.value >= minimumFee);\r\n        require(decimals <= 27);\r\n        require(totalSupply > 0);\r\n        token = new FixedSupplyToken();\r\n        token.init(msg.sender, symbol, name, decimals, totalSupply);\r\n        isChild[address(token)] = true;\r\n        children.push(address(token));\r\n        emit TokenDeployed(owner(), address(token), symbol, name, decimals, totalSupply);\r\n        if (msg.value > 0) {\r\n            payable(owner()).transfer(msg.value);\r\n        }\r\n    }\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedSupply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FixedSupplyToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1139d53dda28d001e8cdf426fb661dbc00f62e5612b24fdfa34ca5ace4a3652b"}]}