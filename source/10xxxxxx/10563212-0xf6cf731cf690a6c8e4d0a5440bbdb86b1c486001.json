{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// Drizzle.sol -- Publicly updatable ilk registry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\ninterface IlkRegistry {\r\n    function list() external view returns (bytes32[] memory);\r\n}\r\n\r\ninterface PotLike {\r\n    function drip() external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external;\r\n}\r\n\r\ncontract Drizzle {\r\n\r\n    IlkRegistry private _reg;\r\n    PotLike     private _pot;\r\n    JugLike     private _jug;\r\n\r\n    constructor(address ilkRegistry, address dss_pot, address dss_jug) public {\r\n        _reg = IlkRegistry(ilkRegistry);\r\n        _pot = PotLike(dss_pot);\r\n        _jug = JugLike(dss_jug);\r\n    }\r\n\r\n    function drizzle(bytes32[] memory ilks) public {\r\n        _pot.drip();\r\n        for (uint i = 0; i < ilks.length; i++) {\r\n            _jug.drip(ilks[i]);\r\n        }\r\n    }\r\n\r\n    function drizzle() external {\r\n        bytes32[] memory ilks = _reg.list();\r\n        drizzle(ilks);\r\n    }\r\n\r\n    function registry() external view returns (address) {\r\n        return address(_reg);\r\n    }\r\n\r\n    function pot() external view returns (address) {\r\n        return address(_pot);\r\n    }\r\n\r\n    function jug() external view returns (address) {\r\n        return address(_jug);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ilkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dss_pot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dss_jug\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"drizzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ilks\",\"type\":\"bytes32[]\"}],\"name\":\"drizzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Drizzle","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000be4f921cdfef2cf5080f9cf00cc2c14f1f96bd07000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf700000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f1","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6f00d55f5da1b15b6566bbe498087818b34781c31ab76bf4b0bf07b1fec8d2ef"}]}