{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary stringToBytes32 {\r\n  function convert(string memory source) internal pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n   }\r\n}\r\n\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n    Bancor Network interface\r\n*/\r\ninterface BancorNetworkInterface {\r\n   function getReturnByPath(\r\n     address[] _path,\r\n     uint256 _amount)\r\n     external\r\n     view\r\n     returns (uint256, uint256);\r\n\r\n    function conversionPath(\r\n      ERC20 _sourceToken,\r\n      ERC20 _targetToken\r\n    ) external view returns (address[]);\r\n\r\n    function rateByPath(\r\n        address[] _path,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract GetBancorData is Ownable{\r\n  using stringToBytes32 for string;\r\n\r\n  IContractRegistry public bancorRegistry;\r\n\r\n  constructor(address _bancorRegistry)public{\r\n    bancorRegistry = IContractRegistry(_bancorRegistry);\r\n  }\r\n\r\n  // return contract address from Bancor registry by name\r\n  function getBancorContractAddresByName(string _name) public view returns (address result){\r\n     bytes32 name = stringToBytes32.convert(_name);\r\n     result = bancorRegistry.addressOf(name);\r\n  }\r\n\r\n  /**\r\n  * @dev get ratio between Bancor assets\r\n  *\r\n  * @param _from  ERC20 or Relay\r\n  * @param _to  ERC20 or Relay\r\n  * @param _amount  amount for _from\r\n  */\r\n  function getBancorRatioForAssets(ERC20 _from, ERC20 _to, uint256 _amount) public view returns(uint256 result){\r\n    if(_amount > 0){\r\n      BancorNetworkInterface bancorNetwork = BancorNetworkInterface(\r\n        getBancorContractAddresByName(\"BancorNetwork\")\r\n      );\r\n\r\n      // get Bancor path array\r\n      address[] memory path = bancorNetwork.conversionPath(_from, _to);\r\n\r\n      // get Ratio\r\n      return bancorNetwork.rateByPath(path, _amount);\r\n    }\r\n    else{\r\n      result = 0;\r\n    }\r\n  }\r\n\r\n  // get addresses array of token path\r\n  function getBancorPathForAssets(ERC20 _from, ERC20 _to) public view returns(address[] memory){\r\n    BancorNetworkInterface bancorNetwork = BancorNetworkInterface(\r\n      getBancorContractAddresByName(\"BancorNetwork\")\r\n    );\r\n\r\n    address[] memory path = bancorNetwork.conversionPath(_from, _to);\r\n\r\n    return path;\r\n  }\r\n\r\n  // update bancor registry\r\n  function changeRegistryAddress(address _bancorRegistry) public onlyOwner{\r\n    bancorRegistry = IContractRegistry(_bancorRegistry);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bancorRegistry\",\"type\":\"address\"}],\"name\":\"changeRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBancorRatioForAssets\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getBancorPathForAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getBancorContractAddresByName\",\"outputs\":[{\"name\":\"result\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bancorRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GetBancorData","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50c7e92d9606bf7fc82190940746d25881ef60080c43933bd554b879a6d4f75c"}]}