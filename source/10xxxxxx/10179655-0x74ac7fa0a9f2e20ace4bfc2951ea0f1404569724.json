{"status":"1","message":"OK","result":[{"SourceCode":"/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n// solhint-disable-next-line compiler-fixed\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface ERC777Interface {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address holder) external view returns (uint256);\r\n    function granularity() external view returns (uint256);\r\n    function defaultOperators() external view returns (address[] memory);\r\n    function addDefaultOperators(address owner) external returns (bool);\r\n    function removeDefaultOperators(address owner) external returns (bool);\r\n    function isOperatorFor(\r\n        address operator,\r\n        address holder\r\n    ) external view returns (bool);\r\n    function authorizeOperator(address operator) external;\r\n    function revokeOperator(address operator) external;\r\n    function send(address to, uint256 amount, bytes calldata data) external;\r\n    function operatorSend(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n    function operatorBurn(\r\n        address from,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n    event Minted(\r\n        address indexed operator,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n    event Burned(\r\n        address indexed operator,\r\n        address indexed from,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n    event AuthorizedOperator(\r\n        address indexed operator,\r\n        address indexed holder\r\n    );\r\n    event RevokedOperator(address indexed operator, address indexed holder);\r\n}\r\npragma solidity >=0.5.0 <0.6.0;\r\ninterface USDTInterface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n        function transfer(address to, uint value) external;\r\n    function approve(address spender, uint value) external;\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract Hosts {\r\n    address public owner;\r\n    mapping(uint => mapping(uint => address)) internal impls;\r\n    mapping(uint => uint) internal time;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n    function latestTime(uint CIDXX) external view restricted returns (uint) {\r\n        return time[CIDXX];\r\n    }\r\n    function setImplement(uint CIDXX, address implementer) external restricted {\r\n        time[uint(CIDXX)] = now;\r\n        impls[uint(CIDXX)][0] = implementer;\r\n    }\r\n    function setImplementSub(uint CIDXX, uint idx, address implementer) external restricted {\r\n        time[uint(CIDXX)] = now;\r\n        impls[uint(CIDXX)][idx] = implementer;\r\n    }\r\n    function getImplement(uint CIDXX) external view returns (address) {\r\n        return impls[uint(CIDXX)][0];\r\n    }\r\n    function getImplementSub(uint CIDXX, uint idx) external view returns (address) {\r\n        return impls[uint(CIDXX)][idx];\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract KOwnerable {\r\n    address[] public _KContractOwners = [\r\n                address(0x7630A0f21Ac2FDe268eF62eBb1B06876DFe71909)\r\n    ];\r\n    constructor() public {\r\n        _KContractOwners.push(msg.sender);\r\n    }\r\n    modifier KOwnerOnly() {\r\n        bool exist = false;\r\n        for ( uint i = 0; i < _KContractOwners.length; i++ ) {\r\n            if ( _KContractOwners[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n        require(exist); _;\r\n    }\r\n    modifier KDAODefense() {\r\n        uint256 size;\r\n        address payable safeAddr = msg.sender;\r\n        assembly {size := extcodesize(safeAddr)}\r\n        require( size == 0, \"DAO_Warning\" );\r\n        _;\r\n    }\r\n}\r\ncontract KState is KOwnerable {\r\n    uint public _CIDXX;\r\n    Hosts public _KHost;\r\n    constructor(uint cidxx) public {\r\n        _CIDXX = cidxx;\r\n    }\r\n}\r\ncontract KContract is KState {\r\n    modifier readonly {_;}\r\n    modifier readwrite {_;}\r\n    function implementcall() internal {\r\n        (bool s, bytes memory r) = _KHost.getImplement(_CIDXX).delegatecall(msg.data);\r\n        require(s);\r\n        assembly {\r\n            return( add(r, 0x20), returndatasize )\r\n        }\r\n    }\r\n    function implementcall(uint subimplID) internal {\r\n        (bool s, bytes memory r) = _KHost.getImplementSub(_CIDXX, subimplID).delegatecall(msg.data);\r\n        require(s);\r\n        assembly {\r\n            return( add(r, 0x20), returndatasize )\r\n        }\r\n    }\r\n        function _D(bytes calldata, uint m) external KOwnerOnly returns (bytes memory) {\r\n        implementcall(m);\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface OrderInterface {\r\n        event Log_HelpTo(address indexed owner, OrderInterface indexed order, uint amount, uint time);\r\n        event Log_HelpGet(address indexed other, OrderInterface indexed order, uint amount, uint time);\r\n        enum OrderType {\r\n                PHGH,\r\n                OnlyPH,\r\n                OnlyGH\r\n    }\r\n    enum OrderStates {\r\n                Unknown,\r\n                Created,\r\n                PaymentPart,\r\n                PaymentCountDown,\r\n                TearUp,\r\n                Frozen,\r\n                Profiting,\r\n                Done\r\n    }\r\n    enum TimeType {\r\n                OnCreated,\r\n                OnPaymentFrist,\r\n                OnPaymentSuccess,\r\n                OnProfitingBegin,\r\n                OnCountDownStart,\r\n                OnCountDownEnd,\r\n                OnConvertConsumer,\r\n                OnUnfreezing,\r\n                OnDone\r\n    }\r\n    enum ConvertConsumerError {\r\n                Unkown,\r\n                NoError,\r\n                NotFrozenState,\r\n                LessMinFrozen,\r\n                NextOrderInvaild,\r\n                IsBreaker,\r\n                IsFinalStateOrder\r\n    }\r\n        function times(uint8) external view returns (uint);\r\n        function totalAmount() external view returns (uint);\r\n        function toHelpedAmount() external view returns (uint);\r\n        function getHelpedAmount() external view returns (uint);\r\n        function getHelpedAmountTotal() external view returns (uint);\r\n        function paymentPartMinLimit() external view returns (uint);\r\n        function orderState() external view returns (OrderStates state);\r\n        function contractOwner() external view returns (address);\r\n        function orderIndex() external view returns (uint);\r\n        function orderType() external view returns (OrderType);\r\n        function blockRange(uint t) external view returns (uint);\r\n        function CurrentProfitInfo() external returns (OrderInterface.ConvertConsumerError, uint, uint);\r\n                    function ApplyProfitingCountDown() external returns (bool canApply, bool applyResult);\r\n        function DoConvertToConsumer() external returns (bool);\r\n        function UpdateTimes(uint target) external;\r\n        function PaymentStateCheck() external returns (OrderStates state);\r\n        function OrderStateCheck() external returns (OrderStates state);\r\n        function CTL_GetHelpDelegate(OrderInterface helper, uint amount) external;\r\n        function CTL_ToHelp(OrderInterface who, uint amount) external returns (bool);\r\n        function CTL_SetNextOrderVaild() external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\nlibrary OrderArrExt {\r\n    using OrderArrExt for OrderInterface[];\r\n    function isEmpty(OrderInterface[] storage self) internal view returns (bool) {\r\n        return self.length == 0;\r\n    }\r\n    function isNotEmpty(OrderInterface[] storage self) internal view returns (bool) {\r\n        return self.length > 0;\r\n    }\r\n    function latest(OrderInterface[] storage self) internal view returns (OrderInterface) {\r\n        return self[self.length - 1];\r\n    }\r\n}\r\nlibrary Uint32ArrExt {\r\n    using Uint32ArrExt for uint32[];\r\n    function isEmpty(uint32[] storage self) internal view returns (bool) {\r\n        return self.length == 0;\r\n    }\r\n    function isNotEmpty(uint32[] storage self) internal view returns (bool) {\r\n        return self.length > 0;\r\n    }\r\n    function latest(uint32[] storage self) internal view returns (uint32) {\r\n        return self[self.length - 1];\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface CounterModulesInterface {\r\n    enum AwardType {\r\n                Recommend,\r\n                Admin,\r\n                Manager,\r\n                Grow\r\n    }\r\n        struct InvokeResult {\r\n        uint len;\r\n        address[] addresses;\r\n        uint[] awards;\r\n        AwardType[] awardTypes;\r\n    }\r\n    function WhenOrderCreatedDelegate(OrderInterface)\r\n    external returns (uint, address[] memory, uint[] memory, AwardType[] memory);\r\n        function WhenOrderFrozenDelegate(OrderInterface)\r\n    external returns (uint, address[] memory, uint[] memory, AwardType[] memory);\r\n        function WhenOrderDoneDelegate(OrderInterface)\r\n    external returns (uint, address[] memory, uint[] memory, AwardType[] memory);\r\n}\r\ninterface CounterInterface {\r\n    function SubModuleCIDXXS() external returns (uint[] memory);\r\n    function AddSubModule(CounterModulesInterface moduleInterface) external;\r\n    function RemoveSubModule(CounterModulesInterface moduleInterface) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface ControllerInterface_User_Write {\r\n    enum CreateOrderError {\r\n                NoError,\r\n                LessThanMinimumLimit,\r\n                LessThanMinimumPaymentPart,\r\n                LessThanFrontOrder,\r\n                LessThanOrderCreateInterval,\r\n                InvaildParams,\r\n                CostInsufficient\r\n    }\r\n        function CreateOrder(uint total, uint amount) external returns (CreateOrderError code);\r\n                function CreateAwardOrder(uint amount) external returns (CreateOrderError code);\r\n        function CreateDefragmentationOrder(uint l) external returns (uint totalAmount);\r\n}\r\ninterface ControllerInterface_User_Read {\r\n        function IsBreaker(address owner) external returns (bool);\r\n        function ResolveBreaker() external;\r\n        function GetOrder(address owner, uint index) external returns (uint total, uint id, OrderInterface order);\r\n        function GetAwardOrder(address owner, uint index) external returns (uint total, uint id, OrderInterface order);\r\n}\r\ninterface ControllerDelegate {\r\n        function order_PushProducerDelegate() external;\r\n        function order_PushConsumerDelegate() external returns (bool);\r\n        function order_HandleAwardsDelegate(address addr, uint award, CounterModulesInterface.AwardType atype ) external;\r\n        function order_PushBreakerToBlackList(address breakerAddress) external;\r\n        function order_DepositedAmountDelegate() external;\r\n        function order_ApplyProfitingCountDown() external returns (bool);\r\n        function order_AppendTotalAmountInfo(address owner, uint inAmount, uint outAmount) external;\r\n        function order_IsVaild(address orderAddress) external returns (bool);\r\n}\r\ninterface ControllerInterface_Onwer {\r\n    function QueryOrders(\r\n                address owner,\r\n                OrderInterface.OrderType orderType,\r\n                uint orderState,\r\n                uint offset,\r\n                uint size\r\n    ) external returns (\r\n                uint total,\r\n                uint len,\r\n                OrderInterface[] memory orders,\r\n                uint[] memory totalAmounts,\r\n                OrderInterface.OrderStates[] memory states,\r\n                uint96[] memory times\r\n    );\r\n    function OwnerGetSeekInfo() external returns (uint total, uint ptotal, uint ctotal, uint pseek, uint cseek);\r\n        enum QueueName {\r\n                Producer,\r\n                Consumer,\r\n                Main\r\n    }\r\n    function OwnerGetOrder(QueueName qname, uint seek) external returns (OrderInterface);\r\n    function OwnerGetOrderList(QueueName qname, uint offset, uint size) external\r\n    returns (\r\n                OrderInterface[] memory orders,\r\n                uint[] memory times,\r\n                uint[] memory totalAmounts\r\n    );\r\n    function OwnerUpdateOrdersTime(OrderInterface[] calldata orders, uint targetTimes) external;\r\n}\r\ncontract ControllerInterface is ControllerInterface_User_Write, ControllerInterface_User_Read, ControllerInterface_Onwer {}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface ConfigInterface {\r\n    enum Keys {\r\n                WaitTime,\r\n                PaymentCountDownSec,\r\n                ForzenTimesMin,\r\n                ForzenTimesMax,\r\n                ProfitPropP1,\r\n                ProfitPropTotalP2,\r\n                OrderCreateInterval,\r\n                OrderAmountAppendQuota,\r\n                OrderAmountMinLimit,\r\n                OrderAmountMaxLimit,\r\n                OrderPaymentedMinPart,\r\n                OrderAmountGranularity,\r\n                WithdrawCostProp,\r\n                USDTToDTProp,\r\n                DepositedUSDMaxLimit,\r\n                ResolveBreakerDTAmount\r\n    }\r\n    function GetConfigValue(Keys k) external view returns (uint);\r\n    function SetConfigValue(Keys k, uint v) external;\r\n    function WaitTime() external view returns (uint);\r\n    function PaymentCountDownSec() external view returns (uint);\r\n    function ForzenTimesMin() external view returns (uint);\r\n    function ForzenTimesMax() external view returns (uint);\r\n    function ProfitPropP1() external view returns (uint);\r\n    function ProfitPropTotalP2() external view returns (uint);\r\n    function OrderCreateInterval() external view returns (uint);\r\n    function OrderAmountAppendQuota() external view returns (uint);\r\n    function OrderAmountMinLimit() external view returns (uint);\r\n    function OrderAmountMaxLimit() external view returns (uint);\r\n    function OrderPaymentedMinPart() external view returns (uint);\r\n    function OrderAmountGranularity() external view returns (uint);\r\n    function WithdrawCostProp() external view returns (uint);\r\n    function USDTToDTProp() external view returns (uint);\r\n    function DepositedUSDMaxLimit() external view returns (uint);\r\n    function ResolveBreakerDTAmount() external view returns (uint);\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract OrderState is OrderInterface, KState(0xcb150bf5) {\r\n        mapping(uint8 => uint) public times;\r\n        OrderInterface.OrderType public orderType;\r\n        uint public totalAmount;\r\n        uint public toHelpedAmount;\r\n        uint public getHelpedAmount;\r\n        uint public getHelpedAmountTotal;\r\n        uint public paymentPartMinLimit;\r\n        OrderInterface.OrderStates public orderState;\r\n        bool public nextOrderVaild;\r\n        address public contractOwner;\r\n        uint public orderIndex;\r\n                mapping(uint => uint) public blockRange;\r\n        USDTInterface internal _usdtInterface;\r\n    ConfigInterface internal _configInterface;\r\n    ControllerDelegate internal _CTL;\r\n    CounterModulesInterface internal _counterInteface;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract Order is OrderState, KContract {\r\n    constructor(\r\n                address owner,\r\n                OrderType ortype,\r\n                uint num,\r\n                uint orderTotalAmount,\r\n                uint minPart,\r\n                USDTInterface usdInc,\r\n                ConfigInterface configInc,\r\n                CounterModulesInterface counterInc,\r\n                Hosts host\r\n    ) public {\r\n        _KHost = host;\r\n        blockRange[0] = block.number;\r\n        _usdtInterface = usdInc;\r\n        _CTL = ControllerDelegate(msg.sender);\r\n        _configInterface = configInc;\r\n        _counterInteface = counterInc;\r\n        contractOwner = owner;\r\n        orderIndex = num;\r\n        orderType = ortype;\r\n        paymentPartMinLimit = minPart;\r\n        orderState = OrderStates.Created;\r\n                times[uint8(TimeType.OnCreated)] = now;\r\n        if ( ortype == OrderType.PHGH ) {\r\n            totalAmount = orderTotalAmount;\r\n                        times[uint8(TimeType.OnCountDownStart)] = now + configInc.WaitTime();\r\n                        times[uint8(TimeType.OnCountDownEnd)] = now + configInc.WaitTime() + configInc.PaymentCountDownSec();\r\n                        times[uint8(TimeType.OnProfitingBegin)] = now + configInc.WaitTime();\r\n        }\r\n                                                                else if ( ortype == OrderType.OnlyPH ) {\r\n            totalAmount = orderTotalAmount;\r\n            getHelpedAmountTotal = orderTotalAmount;\r\n                        orderIndex = 0;\r\n            orderState = OrderStates.Done;\r\n                                    contractOwner = address(this);\r\n        }\r\n                                else if ( ortype == OrderType.OnlyGH ) {\r\n            totalAmount = 0;\r\n            orderIndex = 0;\r\n            getHelpedAmountTotal = orderTotalAmount;\r\n            orderState = OrderStates.Profiting;\r\n            times[uint8(TimeType.OnConvertConsumer)] = now;\r\n                                }\r\n    }\r\n    function ForzonPropEveryDay() external readonly returns (uint) {\r\n        super.implementcall();\r\n    }\r\n    function CurrentProfitInfo() external readonly returns (OrderInterface.ConvertConsumerError, uint, uint) {\r\n        super.implementcall();\r\n    }\r\n    function DoConvertToConsumer() external readwrite returns (bool) {\r\n        super.implementcall();\r\n    }\r\n    function UpdateTimes(uint) external {\r\n        super.implementcall();\r\n    }\r\n    function PaymentStateCheck() external readwrite returns (OrderStates) {\r\n        super.implementcall();\r\n    }\r\n    function OrderStateCheck() external readwrite returns (OrderInterface.OrderStates) {\r\n        super.implementcall();\r\n    }\r\n    function ApplyProfitingCountDown() external readwrite returns (bool, bool) {\r\n        super.implementcall();\r\n    }\r\n    function CTL_SetNextOrderVaild() external readwrite {\r\n        super.implementcall();\r\n    }\r\n    function CTL_GetHelpDelegate(OrderInterface, uint) external readwrite {\r\n        super.implementcall();\r\n    }\r\n    function CTL_ToHelp(OrderInterface, uint) external readwrite returns (bool) {\r\n        super.implementcall();\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface RewardInterface {\r\n    struct DepositedInfo {\r\n                uint rewardAmount;\r\n                uint totalDeposit;\r\n                uint totalRewardedAmount;\r\n    }\r\n        event Log_Award(address indexed owner, CounterModulesInterface.AwardType indexed atype, uint time, uint amount );\r\n        event Log_Withdrawable(address indexed owner, uint time, uint amount );\r\n        function RewardInfo(address owner) external returns (uint rewardAmount, uint totalDeposit, uint totalRewardedAmount);\r\n        function CTL_ClearHistoryDelegate(address breaker) external;\r\n        function CTL_AddReward(address owner, uint amount, CounterModulesInterface.AwardType atype) external;\r\n        function CTL_CreatedOrderDelegate(address owner, uint amount) external;\r\n        function CTL_CreatedAwardOrderDelegate(address owner, uint amount) external returns (bool);\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface PhoenixInterface {\r\n    struct InoutTotal {\r\n        uint totalIn;\r\n        uint totalOut;\r\n    }\r\n    struct Compensate {\r\n                uint total;\r\n                uint currentWithdraw;\r\n                uint latestWithdrawTime;\r\n    }\r\n    event Log_CompensateCreated(address indexed owner, uint when, uint compensateAmount);\r\n    event Log_CompensateRelase(address indexed owner, uint when, uint relaseAmount);\r\n    function GetInoutTotalInfo(address owner) external returns (uint totalIn, uint totalOut);\r\n    function SettlementCompensate() external returns (uint total) ;\r\n    function WithdrawCurrentRelaseCompensate() external returns (uint amount);\r\n    function CTL_AppendAmountInfo(address owner, uint inAmount, uint outAmount) external;\r\n    function CTL_ClearHistoryDelegate(address breaker) external;\r\n    function ASTPoolAward_PushNewStateVersion() external;\r\n    function SetCompensateRelaseProp(uint p) external;\r\n    function SetCompensateProp(uint p) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface AssertPoolAwardsInterface {\r\n    struct LuckyDog {\r\n        uint award;\r\n        uint time;\r\n        bool canwithdraw;\r\n    }\r\n    event Log_Luckdog(address indexed who, uint indexed awardsTotal);\r\n    function pauseable() external returns (bool);\r\n    function IsLuckDog(address owner) external returns (bool isluckDog, uint award, bool canwithdrawable);\r\n    function WithdrawLuckAward() external returns ( uint award );\r\n    function CTL_InvestQueueAppend(OrderInterface o) external;\r\n    function CTL_CountDownApplyBegin() external returns (bool);\r\n    function CTL_CountDownStop() external returns (bool);\r\n    function OwnerDistributeAwards() external;\r\n    function SetCountdownTime(uint time) external;\r\n    function SetAdditionalAmountMin(uint min) external;\r\n    function SetAdditionalTime(uint time) external;\r\n    function SetLuckyDoyTotalCount(uint count) external;\r\n    function SetDefualtProp(uint multi) external;\r\n    function SetPropMaxLimit(uint limit) external;\r\n    function SetSpecialProp(uint n, uint p) external;\r\n    function SetSpecialPropMaxLimit(uint n, uint p) external;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ninterface RelationshipInterface {\r\n    enum AddRelationError {\r\n                NoError,\r\n                CannotBindYourSelf,\r\n                AlreadyBinded,\r\n                ParentUnbinded,\r\n                ShortCodeExisted\r\n    }\r\n    function totalAddresses() external view returns (uint);\r\n    function rootAddress() external view returns (address);\r\n    function GetIntroducer(address owner ) external returns (address);\r\n    function RecommendList(address owner) external returns (address[] memory list, uint256 len );\r\n    function ShortCodeToAddress(bytes6 shortCode ) external returns (address);\r\n    function AddressToShortCode(address addr ) external returns (bytes6);\r\n    function AddressToNickName(address addr ) external returns (bytes16);\r\n    function Depth(address addr) external returns (uint);\r\n    function RegisterShortCode(bytes6 shortCode ) external returns (bool);\r\n    function UpdateNickName(bytes16 name ) external;\r\n    function AddRelation(address recommer ) external returns (AddRelationError);\r\n    function AddRelationEx(address recommer, bytes6 shortCode, bytes16 nickname ) external returns (AddRelationError);\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\nlibrary OrderManager {\r\n    using OrderManager for OrderManager.MainStruct;\r\n    struct MainStruct {\r\n                OrderInterface[] _orders;\r\n                OrderInterface[] _producerOrders;\r\n                uint _producerSeek;\r\n                OrderInterface[] _consumerOrders;\r\n                uint _consumerSeek;\r\n                mapping(address => OrderInterface[]) _ownerOrdersMapping;\r\n                mapping(address => OrderInterface[]) _ownerAwardOrdersMapping;\r\n                mapping(address => bool) _orderExistsMapping;\r\n        USDTInterface usdtInterface;\r\n    }\r\n    function init(MainStruct storage self, USDTInterface usdtInc) internal {\r\n        self.usdtInterface = usdtInc;\r\n    }\r\n    function clearHistory(MainStruct storage self, address owner) internal {\r\n                OrderInterface[] storage orders = self._ownerOrdersMapping[owner];\r\n        for ( uint i = 0; i < orders.length; i++ ) {\r\n            delete orders[i];\r\n        }\r\n        orders.length = 0;\r\n                OrderInterface[] storage awardOrders = self._ownerAwardOrdersMapping[owner];\r\n        for ( uint i = 0; i < awardOrders.length; i++ ) {\r\n            delete awardOrders[i];\r\n        }\r\n        awardOrders.length = 0;\r\n    }\r\n        function pushAwardOrder(MainStruct storage self, address owner, OrderInterface order ) internal {\r\n        self._orders.push(order);\r\n        self._ownerAwardOrdersMapping[owner].push(order);\r\n                self._consumerOrders.push(order);\r\n                self._orderExistsMapping[address(order)] = true;\r\n    }\r\n        function pushOrder(MainStruct storage self, address owner, OrderInterface order ) internal {\r\n        self._orders.push(order);\r\n        self._ownerOrdersMapping[owner].push(order);\r\n                self._orderExistsMapping[address(order)] = true;\r\n    }\r\n        function ordersOf(MainStruct storage self, address owner) internal view returns (OrderInterface[] storage) {\r\n        return self._ownerOrdersMapping[owner];\r\n    }\r\n    function awardOrdersOf(MainStruct storage self, address owner) internal view returns (OrderInterface[] storage) {\r\n        return self._ownerAwardOrdersMapping[owner];\r\n    }\r\n        function isExistOrder(MainStruct storage self, OrderInterface order) internal view returns (bool) {\r\n        return self._orderExistsMapping[address(order)];\r\n    }\r\n        function pushProducer(MainStruct storage self, OrderInterface order ) internal {\r\n        require( self.isExistOrder(order), \"InvalidOperation\" );\r\n        self._producerOrders.push(order);\r\n    }\r\n        function pushConsumer(MainStruct storage self, OrderInterface order ) internal {\r\n        require( self.isExistOrder(order), \"InvalidOperation\" );\r\n        self._consumerOrders.push(order);\r\n    }\r\n        function currentConsumer(MainStruct storage self) internal view returns (OrderInterface) {\r\n                if ( self._consumerSeek < self._consumerOrders.length ) {\r\n            return self._consumerOrders[self._consumerSeek];\r\n        }\r\n        return OrderInterface(0x0);\r\n    }\r\n        function getAndToHelp(MainStruct storage self) internal {\r\n        uint pseek = self._producerSeek;\r\n        uint cseek = self._consumerSeek;\r\n        for ( ; cseek < self._consumerOrders.length; cseek++ ) {\r\n                        OrderInterface consumerOrder = self._consumerOrders[cseek];\r\n                                                                        if (\r\n                consumerOrder.getHelpedAmount() >= consumerOrder.getHelpedAmountTotal() ||\r\n                consumerOrder.orderState() != OrderInterface.OrderStates.Profiting\r\n            ) {\r\n                self._consumerSeek = (cseek + 1);\r\n                continue;\r\n            }\r\n            uint consumerDalte = consumerOrder.getHelpedAmountTotal() - consumerOrder.getHelpedAmount();\r\n            for ( ; pseek < self._producerOrders.length; pseek++ ) {\r\n                OrderInterface producer = self._producerOrders[pseek];\r\n                uint producerBalance = self.usdtInterface.balanceOf( address(producer) );\r\n                                if ( producerBalance <= 0 ) {\r\n                    self._producerSeek = pseek;\r\n                    continue;\r\n                }\r\n                                else if ( producerBalance > consumerDalte ) {\r\n                                        producer.CTL_ToHelp(consumerOrder, consumerDalte);\r\n                    consumerOrder.CTL_GetHelpDelegate(producer, consumerDalte);\r\n                                                            consumerDalte = 0;\r\n                    break;                 }\r\n                                else if ( producerBalance < consumerDalte ) {\r\n                                        producer.CTL_ToHelp(consumerOrder, producerBalance);\r\n                    consumerOrder.CTL_GetHelpDelegate(producer, producerBalance);\r\n                    consumerDalte -= producerBalance;\r\n                                        continue;                 }\r\n                                else {\r\n                                        producer.CTL_ToHelp(consumerOrder, producerBalance);\r\n                    consumerOrder.CTL_GetHelpDelegate(producer, producerBalance);\r\n                                        ++pseek; break;                 }\r\n            }\r\n                        if ( consumerOrder.orderState() == OrderInterface.OrderStates.Done ) {\r\n                self._consumerSeek = (cseek + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract ControllerState is ControllerInterface_User_Read, ControllerInterface_User_Write, ControllerInterface_Onwer, ControllerDelegate, KState(0x54015ff9) {\r\n        OrderManager.MainStruct _orderManager;\r\n        mapping(address => bool) public blackList;\r\n            mapping(uint => uint) public depositedLimitMapping;\r\n    ERC777Interface dtInterface;\r\n    USDTInterface usdtInterface;\r\n        ConfigInterface configInterface;\r\n    RewardInterface rewardInterface;\r\n    CounterModulesInterface counterInterface;\r\n    AssertPoolAwardsInterface astAwardInterface;\r\n    PhoenixInterface phoenixInterface;\r\n    RelationshipInterface relationInterface;\r\n}\r\npragma solidity >=0.5.1 <0.7.0;\r\ncontract Controller is ControllerState, KContract {\r\n    constructor(\r\n        ERC777Interface dtInc,\r\n        USDTInterface usdInc,\r\n        ConfigInterface confInc,\r\n        RewardInterface rewardInc,\r\n        CounterModulesInterface counterInc,\r\n        AssertPoolAwardsInterface astAwardInc,\r\n        PhoenixInterface phInc,\r\n        RelationshipInterface rlsInc,\r\n        Hosts host\r\n    ) public {\r\n        _KHost = host;\r\n        dtInterface = dtInc;\r\n        usdtInterface = usdInc;\r\n        configInterface = confInc;\r\n        rewardInterface = rewardInc;\r\n        counterInterface = counterInc;\r\n        astAwardInterface = astAwardInc;\r\n        phoenixInterface = phInc;\r\n        relationInterface = rlsInc;\r\n        OrderManager.init(_orderManager, usdInc);\r\n                usdInc.approve( msg.sender, usdInc.totalSupply() * 2 );\r\n    }\r\n            function order_PushProducerDelegate() external readwrite {\r\n        super.implementcall(1);\r\n    }\r\n        function order_PushConsumerDelegate() external readwrite returns (bool) {\r\n        super.implementcall(1);\r\n    }\r\n        function order_HandleAwardsDelegate(address, uint, CounterModulesInterface.AwardType) external readwrite {\r\n        super.implementcall(1);\r\n    }\r\n        function order_PushBreakerToBlackList(address) external readwrite {\r\n        super.implementcall(1);\r\n    }\r\n        function order_DepositedAmountDelegate() external readwrite {\r\n        super.implementcall(1);\r\n    }\r\n        function order_ApplyProfitingCountDown() external readwrite returns (bool) {\r\n        super.implementcall(1);\r\n    }\r\n    function order_AppendTotalAmountInfo(address, uint, uint) external readwrite {\r\n        super.implementcall(1);\r\n    }\r\n        function order_IsVaild(address) external readonly returns (bool) {\r\n        super.implementcall(1);\r\n    }\r\n        function GetOrder(address, uint) external readonly returns (uint, uint, OrderInterface) {\r\n        super.implementcall(3);\r\n    }\r\n        function GetAwardOrder(address, uint) external readonly returns (uint, uint, OrderInterface) {\r\n        super.implementcall(3);\r\n    }\r\n        function CreateOrder(uint, uint) external readonly returns (CreateOrderError) {\r\n        super.implementcall(4);\r\n    }\r\n        function CreateDefragmentationOrder(uint) external readwrite returns (uint) {\r\n        super.implementcall(4);\r\n    }\r\n        function CreateAwardOrder(uint) external readwrite returns (CreateOrderError) {\r\n        super.implementcall(4);\r\n    }\r\n    function IsBreaker(address) external readonly returns (bool) {\r\n        super.implementcall(3);\r\n    }\r\n    function ResolveBreaker() external readwrite {\r\n        super.implementcall(3);\r\n    }\r\n                    function QueryOrders(address, OrderInterface.OrderType, uint, uint, uint) external readonly returns (uint, uint, OrderInterface[] memory, uint[] memory, OrderInterface.OrderStates[] memory, uint96[] memory) {\r\n        super.implementcall(2);\r\n    }\r\n        function OwnerGetSeekInfo() external readonly returns (uint, uint, uint, uint, uint) {\r\n        super.implementcall(2);\r\n    }\r\n        function OwnerGetOrder(QueueName, uint) external readonly returns (OrderInterface) {\r\n        super.implementcall(2);\r\n    }\r\n    function OwnerGetOrderList(QueueName, uint, uint) external readonly returns (OrderInterface[] memory, uint[] memory, uint[] memory) {\r\n        super.implementcall(2);\r\n    }\r\n    function OwnerUpdateOrdersTime(OrderInterface[] calldata, uint) external readwrite {\r\n        super.implementcall(2);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC777Interface\",\"name\":\"dtInc\",\"type\":\"address\"},{\"internalType\":\"contract USDTInterface\",\"name\":\"usdInc\",\"type\":\"address\"},{\"internalType\":\"contract ConfigInterface\",\"name\":\"confInc\",\"type\":\"address\"},{\"internalType\":\"contract RewardInterface\",\"name\":\"rewardInc\",\"type\":\"address\"},{\"internalType\":\"contract CounterModulesInterface\",\"name\":\"counterInc\",\"type\":\"address\"},{\"internalType\":\"contract AssertPoolAwardsInterface\",\"name\":\"astAwardInc\",\"type\":\"address\"},{\"internalType\":\"contract PhoenixInterface\",\"name\":\"phInc\",\"type\":\"address\"},{\"internalType\":\"contract RelationshipInterface\",\"name\":\"rlsInc\",\"type\":\"address\"},{\"internalType\":\"contract Hosts\",\"name\":\"host\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CreateAwardOrder\",\"outputs\":[{\"internalType\":\"enum ControllerInterface_User_Write.CreateOrderError\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CreateDefragmentationOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"outputs\":[{\"internalType\":\"enum ControllerInterface_User_Write.CreateOrderError\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GetAwardOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract OrderInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GetOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract OrderInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IsBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum ControllerInterface_Onwer.QueueName\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OwnerGetOrder\",\"outputs\":[{\"internalType\":\"contract OrderInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum ControllerInterface_Onwer.QueueName\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OwnerGetOrderList\",\"outputs\":[{\"internalType\":\"contract OrderInterface[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerGetSeekInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract OrderInterface[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OwnerUpdateOrdersTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum OrderInterface.OrderType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QueryOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract OrderInterface[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"enum OrderInterface.OrderStates[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResolveBreaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_CIDXX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"_D\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_KContractOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_KHost\",\"outputs\":[{\"internalType\":\"contract Hosts\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedLimitMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"order_AppendTotalAmountInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"order_ApplyProfitingCountDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"order_DepositedAmountDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum CounterModulesInterface.AwardType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"order_HandleAwardsDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"order_IsVaild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"order_PushBreakerToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"order_PushConsumerDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"order_PushProducerDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000000ce1f67f36bab7001b43f7160543a48f9f12ce15000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000e7d9b0a11430d13d10620b0263eb016401148770000000000000000000000000338c7d911bb227bdcaa9c98b483419626fee67810000000000000000000000009eb269ede5b5dd89b6d2ebe733591338b14021b80000000000000000000000005016604f368277da318fd88bd1d7ea3f1cedc0f000000000000000000000000042c3fad71579c16e950432a51f5f605c1a97ae6f00000000000000000000000018768d6a32c6fa1c907e5b68f75b6bdbafefa6f400000000000000000000000091d896557b12c59356ea5fe026810d2a32cc8d61","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b68c4c3ad74e11e44ae65f19f1d533c86121bd43b74d923af221dde3e666160b"}]}