{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libs/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _val));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}\r\n\r\n// File: contracts/libs/PineUtils.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\nlibrary PineUtils {\r\n    address internal constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    /**\r\n     * @notice Get the account's balance of token or ETH\r\n     * @param _token - Address of the token\r\n     * @param _addr - Address of the account\r\n     * @return uint256 - Account's balance of token or ETH\r\n     */\r\n    function balanceOf(IERC20 _token, address _addr) internal view returns (uint256) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            return _addr.balance;\r\n        }\r\n\r\n        return _token.balanceOf(_addr);\r\n    }\r\n\r\n     /**\r\n     * @notice Transfer token or ETH to a destinatary\r\n     * @param _token - Address of the token\r\n     * @param _to - Address of the recipient\r\n     * @param _val - Uint256 of the amount to transfer\r\n     * @return bool - Whether the transfer was success or not\r\n     */\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            (bool success, ) = _to.call{value:_val}(\"\");\r\n            return success;\r\n        }\r\n\r\n        return SafeERC20.transfer(_token, _to, _val);\r\n    }\r\n}\r\n\r\n// File: contracts/commons/Order.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ncontract Order {\r\n    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n}\r\n\r\n// File: contracts/interfaces/IHandler.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ninterface IHandler {\r\n    /// @notice receive ETH\r\n    receive() external payable;\r\n\r\n    /**\r\n     * @notice Handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function handle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external payable returns (uint256 bought);\r\n\r\n    /**\r\n     * @notice Check whether can handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     */\r\n    function canHandle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/uniswapV1/IUniswapExchange.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\nabstract contract IUniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external virtual view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external virtual view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external virtual payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external virtual returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external virtual view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external virtual view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external virtual view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external virtual view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external virtual payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external virtual payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external virtual payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external virtual payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external virtual returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external virtual returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external virtual returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external virtual returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external virtual returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external virtual returns (bool);\r\n    function approve(address _spender, uint256 _value) external virtual returns (bool);\r\n    function allowance(address _owner, address _spender) external virtual view returns (uint256);\r\n    function balanceOf(address _owner) external virtual view returns (uint256);\r\n    function totalSupply() external virtual view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external virtual;\r\n}\r\n\r\n// File: contracts/interfaces/uniswapV1/IUniswapFactory.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\nabstract contract IUniswapFactory {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external virtual returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external virtual view returns (IUniswapExchange exchange);\r\n    function getToken(address exchange) external virtual view returns (IERC20 token);\r\n    function getTokenWithId(uint256 tokenId) external virtual view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external virtual;\r\n}\r\n\r\n// File: contracts/handlers/UniswapV1Handler.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice UniswapV1 Handler used to execute an order\r\ncontract UniswapV1Handler is IHandler, Order {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant never = uint(-1);\r\n\r\n    IUniswapFactory public immutable uniswapFactory;\r\n\r\n    /**\r\n     * @notice Creates the handler\r\n     * @param _uniswapFactory - Address of the uniswap v1 factory contract\r\n     */\r\n    constructor(IUniswapFactory _uniswapFactory) public {\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    /// @notice receive ETH\r\n    receive() external override payable {\r\n        require(msg.sender != tx.origin, \"UniswapV1Handler#receive: NO_SEND_ETH_PLEASE\");\r\n    }\r\n\r\n    /**\r\n     * @notice Handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function handle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata _data\r\n    ) external payable override returns (uint256 bought) {\r\n        // Load real initial balance, don't trust provided value\r\n        uint256 inputAmount = PineUtils.balanceOf(_inputToken, address(this));\r\n\r\n        (,address payable relayer, uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        if (address(_inputToken) == ETH_ADDRESS) {\r\n            // Keep some eth for paying the fee\r\n            uint256 sell = inputAmount.sub(fee);\r\n            bought = _ethToToken(uniswapFactory, _outputToken, sell, msg.sender);\r\n        } else if (address(_outputToken) == ETH_ADDRESS) {\r\n            // Convert\r\n            bought = _tokenToEth(uniswapFactory, _inputToken, inputAmount);\r\n            bought = bought.sub(fee);\r\n\r\n            // Send amount bought\r\n            (bool successSender,) = msg.sender.call{value: bought}(\"\");\r\n            require(successSender, \"UniswapV1Handler#handle: TRANSFER_ETH_TO_CALLER_FAILED\");\r\n        } else {\r\n            // Convert from fromToken to ETH\r\n            uint256 boughtEth = _tokenToEth(uniswapFactory, _inputToken, inputAmount);\r\n\r\n            // Convert from ETH to toToken\r\n            bought = _ethToToken(uniswapFactory, _outputToken, boughtEth.sub(fee), msg.sender);\r\n        }\r\n\r\n        // Send fee to relayer\r\n        (bool successRelayer,) = relayer.call{value: fee}(\"\");\r\n        require(successRelayer, \"UniswapV1Handler#handle: TRANSFER_ETH_TO_RELAYER_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether can handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     */\r\n    function canHandle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external override view returns (bool) {\r\n        (,,uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        uint256 bought;\r\n\r\n        if (address(_inputToken) == ETH_ADDRESS) {\r\n            if (_inputAmount <= fee) {\r\n                return false;\r\n            }\r\n\r\n            uint256 sell = _inputAmount.sub(fee);\r\n            bought = _outEthToToken(uniswapFactory, _outputToken, sell);\r\n        } else if (address(_outputToken) == ETH_ADDRESS) {\r\n            bought = _outTokenToEth(uniswapFactory ,_inputToken, _inputAmount);\r\n\r\n            if (bought <= fee) {\r\n                return false;\r\n            }\r\n\r\n            bought = bought.sub(fee);\r\n        } else {\r\n            uint256 boughtEth =  _outTokenToEth(uniswapFactory, _inputToken, _inputAmount);\r\n            if (boughtEth <= fee) {\r\n                return false;\r\n            }\r\n\r\n            bought = _outEthToToken(uniswapFactory, _outputToken, boughtEth.sub(fee));\r\n        }\r\n\r\n        return bought >= _minReturn;\r\n    }\r\n\r\n    /**\r\n     * @notice Simulate an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     * @return uint256 - Amount of output token bought\r\n     */\r\n    function simulate(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external view returns (bool, uint256) {\r\n        (,,uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        uint256 bought;\r\n\r\n        if (address(_inputToken) == ETH_ADDRESS) {\r\n            if (_inputAmount <= fee) {\r\n                return (false, 0);\r\n            }\r\n\r\n            uint256 sell = _inputAmount.sub(fee);\r\n            bought = _outEthToToken(uniswapFactory, _outputToken, sell);\r\n        } else if (address(_outputToken) == ETH_ADDRESS) {\r\n            bought = _outTokenToEth(uniswapFactory ,_inputToken, _inputAmount);\r\n\r\n            if (bought <= fee) {\r\n                return (false, 0);\r\n            }\r\n\r\n            bought = bought.sub(fee);\r\n        } else {\r\n            uint256 boughtEth =  _outTokenToEth(uniswapFactory, _inputToken, _inputAmount);\r\n            if (boughtEth <= fee) {\r\n                return (false, 0);\r\n            }\r\n\r\n            bought = _outEthToToken(uniswapFactory, _outputToken, boughtEth.sub(fee));\r\n        }\r\n\r\n        return (bought >= _minReturn, bought);\r\n    }\r\n\r\n    /**\r\n     * @notice Trade ETH to token\r\n     * @param _uniswapFactory - Address of uniswap v1 factory\r\n     * @param _token - Address of the output token\r\n     * @param _amount - uint256 of the ETH amount\r\n     * @param _dest - Address of the trade recipient\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function _ethToToken(\r\n        IUniswapFactory _uniswapFactory,\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _dest\r\n    ) private returns (uint256) {\r\n        IUniswapExchange uniswap = _uniswapFactory.getExchange(address(_token));\r\n\r\n        return uniswap.ethToTokenTransferInput{value: _amount}(1, never, _dest);\r\n    }\r\n\r\n    /**\r\n     * @notice Trade token to ETH\r\n     * @param _uniswapFactory - Address of uniswap v1 factory\r\n     * @param _token - Address of the input token\r\n     * @param _amount - uint256 of the input token amount\r\n     * @return bought - Amount of ETH bought\r\n     */\r\n    function _tokenToEth(\r\n        IUniswapFactory _uniswapFactory,\r\n        IERC20 _token,\r\n        uint256 _amount\r\n    ) private returns (uint256) {\r\n        IUniswapExchange uniswap = _uniswapFactory.getExchange(address(_token));\r\n        require(address(uniswap) != address(0), \"UniswapV1Handler#_tokenToEth: EXCHANGE_DOES_NOT_EXIST\");\r\n\r\n        // Check if previous allowance is enough and approve Uniswap if not\r\n        uint256 prevAllowance = _token.allowance(address(this), address(uniswap));\r\n        if (prevAllowance < _amount) {\r\n            if (prevAllowance != 0) {\r\n                _token.approve(address(uniswap), 0);\r\n            }\r\n\r\n            _token.approve(address(uniswap), uint(-1));\r\n        }\r\n\r\n        // Execute the trade\r\n        return uniswap.tokenToEthSwapInput(_amount, 1, never);\r\n    }\r\n\r\n    /**\r\n     * @notice Simulate a ETH to token trade\r\n     * @param _uniswapFactory - Address of uniswap v1 factory\r\n     * @param _token - Address of the output token\r\n     * @param _amount - uint256 of the ETH amount\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function _outEthToToken(IUniswapFactory _uniswapFactory, IERC20 _token, uint256 _amount) private view returns (uint256) {\r\n        return _uniswapFactory.getExchange(address(_token)).getEthToTokenInputPrice(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Simulate a token to ETH trade\r\n     * @param _uniswapFactory - Address of uniswap v1 factory\r\n     * @param _token - Address of the input token\r\n     * @param _amount - uint256 of the input token amount\r\n     * @return bought - Amount of ETH bought\r\n     */\r\n    function _outTokenToEth(IUniswapFactory _uniswapFactory, IERC20 _token, uint256 _amount) private view returns (uint256) {\r\n        return _uniswapFactory.getExchange(address(_token)).getTokenToEthInputPrice(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canHandle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapV1Handler","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://de3547d66d4a31ca228c2d1358060c3135af64a669aae8fc149cbdf7a38bfa19"}]}