{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function mint(address reciever, uint256 value,bytes32[3] memory _mrs, uint8 _v) public returns(bool);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract EtokenLink {\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint currentLevel;\r\n        uint totalEarningEth;\r\n        address[] referral;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n    address public ownerAddress;\r\n    uint public adminFee = 15 ether;\r\n    uint public currentId = 0;\r\n    uint referrer1Limit = 2;\r\n    uint public PERIOD_LENGTH = 60 days;\r\n    bool public lockStatus;\r\n    ERC20 Token;\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    mapping(uint => uint) public UPLINE_PERCENTAGE;\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    mapping(address => mapping (uint => uint)) public EarnedEth;\r\n    mapping(address=> uint) public loopCheck;\r\n    mapping (address => uint) public createdDate;\r\n    mapping (bytes32 => bool) private hashConfirmation;\r\n    \r\n    event regLevelEvent(address indexed UserAddress, address indexed ReferrerAddress, uint Time);\r\n    event buyLevelEvent(address indexed UserAddress, uint Levelno, uint Time);\r\n    event getMoneyForLevelEvent(address indexed UserAddress,uint UserId,address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    event lostMoneyForLevelEvent(address indexed UserAddress,uint UserId,address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    \r\n    constructor(address _tokenAddress) public {\r\n        ownerAddress = msg.sender;\r\n        Token = ERC20(_tokenAddress);\r\n        \r\n        // Level_Price\r\n        LEVEL_PRICE[1] = 0.05 ether;\r\n        LEVEL_PRICE[2] = 0.07 ether;\r\n        LEVEL_PRICE[3] = 0.15 ether;\r\n        LEVEL_PRICE[4] = 0.6 ether;\r\n        LEVEL_PRICE[5] = 1.5 ether;\r\n        LEVEL_PRICE[6] = 3 ether;\r\n        LEVEL_PRICE[7] = 7 ether;\r\n        LEVEL_PRICE[8] = 15 ether;\r\n        LEVEL_PRICE[9] = 21 ether;\r\n        \r\n        UPLINE_PERCENTAGE[1] = 30 ether;\r\n        UPLINE_PERCENTAGE[2] = 15 ether;\r\n        UPLINE_PERCENTAGE[3] = 12 ether;\r\n        UPLINE_PERCENTAGE[4] = 9 ether;\r\n        UPLINE_PERCENTAGE[5] = 7 ether;\r\n        UPLINE_PERCENTAGE[6] = 6 ether;\r\n        UPLINE_PERCENTAGE[7] = 6 ether;\r\n        UPLINE_PERCENTAGE[8] = 3 ether;\r\n        UPLINE_PERCENTAGE[9] = 3 ether;\r\n        UPLINE_PERCENTAGE[10] = 3 ether;\r\n        UPLINE_PERCENTAGE[11] = 3 ether;\r\n        UPLINE_PERCENTAGE[12] = 3 ether;\r\n        \r\n        UserStruct memory userStruct;\r\n        currentId = currentId.add(1);\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: 0,\r\n            currentLevel:1,\r\n            totalEarningEth:0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerAddress] = userStruct;\r\n        userList[currentId] = ownerAddress;\r\n\r\n        for (uint i = 1; i <= 9; i++) {\r\n            users[ownerAddress].currentLevel = i;\r\n            users[ownerAddress].levelExpired[i] = 55555555555;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev To register the User\r\n     * @param _referrerID id of user/referrer who is already in matrix\r\n     * @param _mrs _mrs[0] - message hash _mrs[1] - r of signature _mrs[2] - s of signature \r\n     * @param _v  v of signature\r\n     */ \r\n    function regUser(uint _referrerID, bytes32[3] calldata _mrs, uint8 _v) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist == false, \"User exist\");\r\n        require(_referrerID > 0 && _referrerID <= currentId, \"Incorrect referrer Id\");\r\n        require(hashConfirmation[_mrs[0]] == false, \"Hash Exits\");\r\n        require(msg.value == LEVEL_PRICE[1], \"Incorrect Value\");\r\n        \r\n        if(users[userList[_referrerID]].referral.length >= referrer1Limit) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currentId++;\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: _referrerID,\r\n            currentLevel: 1,\r\n            totalEarningEth:0,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currentId] = msg.sender;\r\n        users[msg.sender].levelExpired[1] = now.add(PERIOD_LENGTH);\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n        createdDate[msg.sender] = now;\r\n        loopCheck[msg.sender] = 0;\r\n\r\n        payForRegister(1, msg.sender, ((LEVEL_PRICE[1].mul(adminFee)).div(10**20)), _mrs, _v);\r\n        hashConfirmation[_mrs[0]] = true;\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n    \r\n    /**\r\n     * @dev To update the admin fee percentage\r\n     * @param _adminFee  feePercentage (in ether)\r\n     */ \r\n    function updateFeePercentage(uint256 _adminFee) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Only OwnerWallet\");\r\n        adminFee = _adminFee;\r\n        return true;  \r\n    }\r\n    \r\n    /**\r\n     * @dev To update the upline fee percentage\r\n     * @param _level Level which wants to change\r\n     * @param _upline  feePercentage (in ether)\r\n     */ \r\n    function updateUplineFee(uint256 _level,uint256 _upline) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Only OwnerWallet\");\r\n         require(_level > 0 && _level <= 12, \"Incorrect level\");\r\n        UPLINE_PERCENTAGE[_level] = _upline;\r\n        return true;  \r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev To update the level price\r\n     * @param _level Level which wants to change\r\n     * @param _price Level price (in ether)\r\n     */ \r\n    function updatePrice(uint _level, uint _price) external returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Only OwnerWallet\");\r\n        require(_level > 0 && _level <= 9, \"Incorrect level\");\r\n        LEVEL_PRICE[_level] = _price;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To buy the next level by User\r\n     * @param _level level wants to buy\r\n     * @param _mrs _mrs[0] - message hash _mrs[1] - r of signature _mrs[2] - s of signature \r\n     * @param _v  v of signature\r\n     */ \r\n    function buyLevel(uint256 _level, bytes32[3] calldata _mrs, uint8 _v) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist, \"User not exist\");\r\n        require(hashConfirmation[_mrs[0]] == false, \"Hash Exits\");\r\n        require(_level > 0 && _level <= 9, \"Incorrect level\");\r\n\r\n        if (_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], \"Incorrect Value\");\r\n            users[msg.sender].levelExpired[1] =  users[msg.sender].levelExpired[1].add(PERIOD_LENGTH);\r\n            users[msg.sender].currentLevel = 1;\r\n        }else {\r\n            require(msg.value == LEVEL_PRICE[_level], \"Incorrect Value\");\r\n            \r\n            users[msg.sender].currentLevel = _level;\r\n\r\n            for (uint i =_level - 1; i > 0; i--) require(users[msg.sender].levelExpired[i] >= now, \"Buy the previous level\");\r\n            \r\n            if(users[msg.sender].levelExpired[_level] == 0)\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            else \r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n        }\r\n       \r\n        loopCheck[msg.sender] = 0;\r\n       \r\n        payForLevels(_level, msg.sender, ((LEVEL_PRICE[_level].mul(adminFee)).div(10**20)), _mrs, _v);\r\n       \r\n        hashConfirmation[_mrs[0]] = true;\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function\r\n     */ \r\n    function payForRegister(uint _level,address _userAddress,uint _adminPrice,bytes32[3] memory _mrs,uint8 _v) internal {\r\n\r\n        address referer;\r\n\r\n        referer = userList[users[_userAddress].referrerID];\r\n\r\n        if (!users[referer].isExist) referer = userList[1];\r\n\r\n        if (users[referer].levelExpired[_level] >= now) {\r\n            uint256 tobeminted = ((LEVEL_PRICE[_level]).mul(10**3)).div(0.005 ether);\r\n            require((address(uint160(ownerAddress)).send(_adminPrice)) && address(uint160(referer)).send(LEVEL_PRICE[_level].sub(_adminPrice)) && Token.mint(msg.sender,tobeminted,_mrs,_v), \"Transaction Failure\");\r\n            users[referer].totalEarningEth = users[referer].totalEarningEth.add(LEVEL_PRICE[_level].sub(_adminPrice));\r\n            EarnedEth[referer][_level] =  EarnedEth[referer][_level].add(LEVEL_PRICE[_level].sub(_adminPrice));\r\n        }else {\r\n            emit lostMoneyForLevelEvent(msg.sender,users[msg.sender].id,referer,users[referer].id, _level, LEVEL_PRICE[_level],now);\r\n            revert(\"Referer Not Active\");\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function\r\n     */ \r\n    function payForLevels(uint _level, address _userAddress, uint _adminPrice, bytes32[3] memory _mrs, uint8 _v) internal {\r\n\r\n        address referer;\r\n\r\n        referer = userList[users[_userAddress].referrerID];\r\n\r\n        if (!users[referer].isExist) referer = userList[1];\r\n\r\n        if (loopCheck[msg.sender] > 12) {\r\n            referer = userList[1];\r\n        }\r\n\r\n        if (loopCheck[msg.sender] == 0) {\r\n            require((address(uint160(ownerAddress)).send(_adminPrice)), \"Transaction Failure\");\r\n            loopCheck[msg.sender] = loopCheck[msg.sender].add(1);\r\n        }\r\n\r\n\r\n        if (users[referer].levelExpired[_level] >= now) {\r\n\r\n            if (loopCheck[msg.sender] <= 12) {\r\n\r\n                uint uplinePrice = LEVEL_PRICE[_level].sub(_adminPrice);\r\n\r\n                // transactions \r\n                uint256 tobeminted = ((_adminPrice).mul(10**3)).div(0.005 ether);\r\n                require((address(uint160(referer)).send(uplinePrice.mul(UPLINE_PERCENTAGE[loopCheck[msg.sender]]).div(10**20)))\r\n                && Token.mint(referer,tobeminted.mul(UPLINE_PERCENTAGE[loopCheck[msg.sender]]).div(10**20),_mrs,_v),\"Transaction Failure\");\r\n                users[referer].totalEarningEth = users[referer].totalEarningEth.add(uplinePrice.mul(UPLINE_PERCENTAGE[loopCheck[msg.sender]]).div(10**20));\r\n                EarnedEth[referer][_level] =  EarnedEth[referer][_level].add(uplinePrice.mul(UPLINE_PERCENTAGE[loopCheck[msg.sender]]).div(10**20));\r\n                loopCheck[msg.sender] = loopCheck[msg.sender].add(1);\r\n                emit getMoneyForLevelEvent(msg.sender, users[msg.sender].id, referer, users[referer].id, _level, LEVEL_PRICE[_level], now);\r\n                payForLevels(_level, referer, _adminPrice, _mrs, _v);\r\n            }\r\n        }else {\r\n            if (loopCheck[msg.sender] <= 12) {\r\n                emit lostMoneyForLevelEvent(msg.sender, users[msg.sender].id, referer,users[referer].id, _level, LEVEL_PRICE[_level], now);\r\n                payForLevels(_level, referer, _adminPrice, _mrs, _v);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev View free Referrer Address\r\n     */ \r\n    function findFreeReferrer(address _userAddress) public view returns (address) {\r\n        if (users[_userAddress].referral.length < referrer1Limit) \r\n            return _userAddress;\r\n\r\n        address[] memory referrals = new address[](254);\r\n        referrals[0] = users[_userAddress].referral[0];\r\n        referrals[1] = users[_userAddress].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for (uint i = 0; i < 254; i++) { \r\n            if (users[referrals[i]].referral.length == referrer1Limit) {\r\n                if (i < 126) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n    \r\n   /**\r\n     * @dev To view the referrals\r\n     * @param _userAddress  User who is already in matrix\r\n     */ \r\n    function viewUserReferral(address _userAddress) external view returns(address[] memory) {\r\n        return users[_userAddress].referral;\r\n    }\r\n    \r\n    /**\r\n     * @dev To view the level expired time\r\n     * @param _userAddress  User who is already in matrix\r\n     * @param _level Level which is wants to view\r\n     */ \r\n    function viewUserLevelExpired(address _userAddress,uint _level) external view returns(uint) {\r\n        return users[_userAddress].levelExpired[_level];\r\n    }\r\n    \r\n    /**\r\n     * @dev To lock/unlock the contract\r\n     * @param _lockStatus  status in bool\r\n     */ \r\n    function contractLock(bool _lockStatus) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Invalid User\");\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To update the token contract address\r\n     * @param _newToken  new Token Address \r\n     */ \r\n    function updateToken(address _newToken) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Invalid User\");\r\n        Token = ERC20(_newToken);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev To get the total earning ether till now\r\n     */\r\n    function getTotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for (uint i = 1; i <= currentId; i++) {\r\n            totalEth = totalEth.add(users[userList[i]].totalEarningEth);\r\n        }\r\n        \r\n        return totalEth;\r\n    }  \r\n\r\n    /**\r\n     * @dev Revert statement\r\n     */ \r\n    function () external payable {\r\n        revert(\"Invalid Transaction\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Contract balance withdraw\r\n     */ \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"Only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UPLINE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_mrs\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createdDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loopCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[3]\",\"name\":\"_mrs\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upline\",\"type\":\"uint256\"}],\"name\":\"updateUplineFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarningEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtokenLink","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fd239cea00fbcad75fdd5e5a7bea049832b918b0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c8c784bfe48604de46270bdf025d57620f93b8d55164325f08b3294831c06490"}]}