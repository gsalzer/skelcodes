{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.5.17;\r\n\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes20 data) external;\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  function mult(uint256 x, uint256 y) internal pure returns (uint256) {\r\n      if (x == 0) {\r\n          return 0;\r\n      }\r\n\r\n      uint256 z = x * y;\r\n      require(z / x == y, \"Mult overflow\");\r\n      return z;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\r\n      require(y != 0, \"Div by zero\");\r\n      uint256 r = x / y;\r\n      if (x % y != 0) {\r\n          r = r + 1;\r\n      }\r\n\r\n      return r;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 amount) external;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ConTribute is ApproveAndCallFallBack{\r\n\r\n    mapping(address => bool) internal ambassadors_;\r\n\r\n    uint256 constant internal ambassadorMaxPurchase_ = 2500e18;\r\n\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n\r\n    bool public onlyAmbassadors = true;\r\n\r\n    uint256 ACTIVATION_TIME = now+100 days;\r\n\r\n    modifier antiEarlyWhale(\r\n        uint256 _amountOfERC20,\r\n        address _customerAddress\r\n    )\r\n    {\r\n        if (now >= ACTIVATION_TIME) {\r\n            onlyAmbassadors = false;\r\n        }\r\n\r\n        if (onlyAmbassadors) {\r\n\r\n            require((ambassadors_[_customerAddress] == true &&\r\n\r\n            (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfERC20) <=\r\n                ambassadorMaxPurchase_));\r\n\r\n            ambassadorAccumulatedQuota_[_customerAddress] =\r\n                SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfERC20);\r\n\r\n            _;\r\n\r\n        } else {\r\n            //if (now < (ACTIVATION_TIME + 60 seconds)) {\r\n            //    require(tx.gasprice <= 0.1 szabo);\r\n            //}\r\n\r\n            //not needed because it's already false if it gets to here\r\n            //onlyAmbassadors = false;\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyTokenHolders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    event onDistribute(\r\n        address indexed customerAddress,\r\n        uint256 price\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingERC20,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ERC20Earned,\r\n        uint timestamp\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ERC20Reinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ERC20Withdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    string public name = \"conTRIBUTE\";\r\n\r\n    string public symbol = \"CTRBT\";\r\n\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 public entryFee_ = 5;// 5%\r\n\r\n    uint256 public exitFee_ = 15; // 15%\r\n\r\n    uint256 public referralFee_ = 20; // 1% from the 5% fee\r\n\r\n    uint256 internal maintenanceFee_ = 0;//10; // 1% of the 10% fee\r\n\r\n    address internal maintenanceAddress;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n\r\n    mapping(address => uint256) public tokenBalanceLedger_;\r\n\r\n    mapping(address => uint256) public referralBalance_;\r\n\r\n    mapping(address => uint256) public totalReferralEarnings_;\r\n\r\n    mapping(address => int256) public payoutsTo_;\r\n\r\n    mapping(address => uint256) public invested_;\r\n\r\n    uint256 internal tokenSupply_;\r\n\r\n    uint256 internal profitPerShare_;\r\n\r\n    ERC20 erc20;\r\n\r\n//testnet token 0x6A401A535a55f2BDAaE34622E4c3046E638c0d6e\r\n//mainnet token 0x6b785a0322126826d8226d77e173d75DAfb84d11\r\n    constructor(address token,address extraAmbassador) public {\r\n        maintenanceAddress = address(0xaEbbd80Fd7dAe979d965A3a5b09bBCD23eB40e5F);\r\n        ambassadors_[extraAmbassador] = true;\r\n        ambassadors_[0xaEbbd80Fd7dAe979d965A3a5b09bBCD23eB40e5F] = true;\r\n        ambassadors_[0xf3850EA23B46fb4182d9cf60c938Da69aC2527d7] = true;\r\n        ambassadors_[0x9bEDbd434cEAda2ce139335f21905f8fF7894C5D] = true;\r\n        ambassadors_[0x1264EB4ad33ceF667C0fe2A84150b6a98fF4caf7] = true;\r\n        erc20 = ERC20(token);\r\n    }\r\n\r\n    function activate() public{\r\n      require(ambassadors_[msg.sender]);\r\n      ACTIVATION_TIME = now;\r\n    }\r\n    /*\r\n      allows playing without using approve\r\n    */\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes20 data) public{\r\n      require(msg.sender==address(erc20)); //calling address must be the token itself\r\n      _buy(tokens,from,address(data)); //buy tokens on behalf of the user\r\n    }\r\n    function checkAndTransfer(\r\n        uint256 _amount\r\n    )\r\n        private\r\n    {\r\n        require(\r\n            erc20.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            ) == true, \"transfer must succeed\"\r\n        );\r\n    }\r\n    /*\r\n      transfer from custom address, only use with _buy\r\n    */\r\n    function checkAndTransfer2(\r\n        uint256 _amount,\r\n        address _from\r\n    )\r\n        private\r\n    {\r\n        require(\r\n            erc20.transferFrom(\r\n                _from,\r\n                address(this),\r\n                _amount\r\n            ) == true, \"transfer must succeed\"\r\n        );\r\n    }\r\n    /*\r\n      Private buy function for use by approveandcall, to purchase tokens on behalf of the user when msg.sender is the token\r\n    */\r\n    function _buy(\r\n        uint256 _amount,\r\n        address _sender,\r\n        address _referredBy\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        checkAndTransfer2(_amount,_sender);\r\n\r\n        return purchaseTokens(\r\n            _referredBy,\r\n            _sender,\r\n            _amount\r\n        );\r\n    }\r\n    function buy(\r\n        uint256 _amount,\r\n        address _referredBy\r\n    )\r\n        public\r\n        returns(uint256)\r\n    {\r\n        checkAndTransfer(_amount);\r\n\r\n        return purchaseTokens(\r\n            _referredBy,\r\n            msg.sender,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function buyFor(\r\n        uint256 _amount,\r\n        address _customerAddress,\r\n        address _referredBy\r\n    )\r\n        public\r\n        returns(uint256)\r\n    {\r\n        checkAndTransfer(_amount);\r\n        return purchaseTokens(\r\n            _referredBy,\r\n            _customerAddress,\r\n            _amount\r\n        );\r\n    }\r\n\r\n\r\n    function reinvest()\r\n        onlyDivis\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 _dividends = myDividends(false);\r\n\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        _dividends += referralBalance_[_customerAddress];\r\n\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        uint256 _tokens = purchaseTokens(address(0), _customerAddress, _dividends);\r\n\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() external {\r\n\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n\r\n        if (_tokens > 0) sell(_tokens);\r\n\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw()\r\n        onlyDivis\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n        uint256 _dividends = myDividends(false);\r\n\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        _dividends += referralBalance_[_customerAddress];\r\n\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        erc20.transfer(_customerAddress, _dividends);\r\n\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(\r\n        uint256 _amountOfERC20s\r\n    )\r\n        onlyTokenHolders\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfERC20s <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfERC20s, exitFee_), 100);\r\n        uint256 _taxedERC20 = SafeMath.sub(_amountOfERC20s, _dividends);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfERC20s);\r\n\r\n        tokenBalanceLedger_[_customerAddress] =\r\n            SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfERC20s);\r\n\r\n        int256 _updatedPayouts =\r\n            (int256)(profitPerShare_ * _amountOfERC20s + (_taxedERC20 * magnitude));\r\n\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(\r\n                profitPerShare_, (_dividends * magnitude) / tokenSupply_\r\n            );\r\n        }\r\n\r\n        emit Transfer(_customerAddress, address(0), _amountOfERC20s);\r\n        emit onTokenSell(_customerAddress, _amountOfERC20s, _taxedERC20, now);\r\n    }\r\n\r\n    function totalERC20Balance()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(\r\n        bool _includeReferralBonus\r\n    )\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) +\r\n            referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    function balanceOf(\r\n        address _customerAddress\r\n    )\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(\r\n        address _customerAddress\r\n    )\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (uint256)((int256)(\r\n            profitPerShare_ * tokenBalanceLedger_[_customerAddress]) -\r\n            payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _erc20 = 1e18;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, exitFee_), 100);\r\n        uint256 _taxedERC20 = SafeMath.sub(_erc20, _dividends);\r\n\r\n        return _taxedERC20;\r\n    }\r\n\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _erc20 = 1e18;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, entryFee_), 100);\r\n        uint256 _taxedERC20 = SafeMath.add(_erc20, _dividends);\r\n\r\n        return _taxedERC20;\r\n    }\r\n\r\n    function getInvested()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return invested_[msg.sender];\r\n    }\r\n\r\n    function totalReferralEarnings(\r\n        address _client\r\n    )\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalReferralEarnings_[_client];\r\n    }\r\n    //event DebugTest3(uint256 amount,address sender,address this,uint approved,uint balance);\r\n    function donateTokens(uint256 todonate) public {\r\n      require(tokenSupply_>0,\"must be some shares in first to distribute to\");\r\n      //transfer tokens\r\n      //emit DebugTest3(todonate,msg.sender,address(this),erc20.allowance(msg.sender,address(this)),erc20.balanceOf(msg.sender));\r\n      checkAndTransfer(todonate);\r\n      profitPerShare_ = SafeMath.add(profitPerShare_, (todonate * magnitude) / tokenSupply_);\r\n    }\r\n    function purchaseTokens(\r\n        address _referredBy,\r\n        address _customerAddress,\r\n        uint256 _incomingERC20\r\n    )\r\n        internal\r\n        antiEarlyWhale(_incomingERC20, _customerAddress)\r\n        returns(uint256)\r\n    {\r\n        invested_[_customerAddress] += _incomingERC20;\r\n\r\n        uint256 _undividedDividends =\r\n            SafeMath.div(\r\n                SafeMath.mul(\r\n                    _incomingERC20, entryFee_\r\n                ),\r\n            100);\r\n\r\n        uint256 _maintenance =\r\n            SafeMath.div(\r\n                SafeMath.mul(\r\n                    _undividedDividends, maintenanceFee_\r\n                ),\r\n            100);\r\n\r\n\r\n        uint256 _referralBonus =\r\n            SafeMath.div(\r\n                SafeMath.mul(\r\n                    _undividedDividends, referralFee_\r\n                ),\r\n            100);\r\n\r\n        uint256 _dividends =\r\n            SafeMath.sub(\r\n                _undividedDividends, SafeMath.add(\r\n                    _referralBonus, _maintenance\r\n                )\r\n            );\r\n\r\n        uint256 _amountOfERC20s =\r\n            SafeMath.sub(_incomingERC20, _undividedDividends);\r\n\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(\r\n            _amountOfERC20s > 0 &&\r\n            SafeMath.add(_amountOfERC20s, tokenSupply_) > tokenSupply_\r\n        );\r\n\r\n        referralBalance_[maintenanceAddress] =\r\n            SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);\r\n\r\n        if (_referredBy != address(0) &&\r\n            _referredBy != _customerAddress)\r\n        {\r\n            referralBalance_[_referredBy] =\r\n                SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n\r\n            totalReferralEarnings_[_referredBy] =\r\n                SafeMath.add(totalReferralEarnings_[_referredBy], _referralBonus);\r\n        } else {\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ > 0)\r\n        {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfERC20s);\r\n\r\n            profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));\r\n            _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));\r\n\r\n        } else {\r\n            tokenSupply_ = _amountOfERC20s;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] =\r\n            SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfERC20s);\r\n\r\n        int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfERC20s) - _fee);\r\n\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(\r\n            address(0),\r\n            _customerAddress,\r\n            _amountOfERC20s\r\n        );\r\n\r\n        emit onTokenPurchase(\r\n            _customerAddress,\r\n            _incomingERC20,\r\n            _amountOfERC20s,\r\n            _referredBy,\r\n            now\r\n        );\r\n\r\n        return _amountOfERC20s;\r\n    }\r\n\r\n    function multiData()\r\n    public\r\n    view\r\n    returns(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    )\r\n    {\r\n        return (\r\n\r\n        // [0] Total ERC20 in contract\r\n        totalERC20Balance(),\r\n\r\n        // [1] Total STAKE TOKEN supply\r\n        totalSupply(),\r\n\r\n        // [2] User STAKE TOKEN balance\r\n        balanceOf(msg.sender),\r\n\r\n        // [3] User ERC20 balance\r\n        erc20.balanceOf(msg.sender),\r\n\r\n        // [4] User divs\r\n        dividendsOf(msg.sender),\r\n\r\n        // [5] Buy price\r\n        buyPrice(),\r\n\r\n        // [6] Sell price\r\n        sellPrice(),\r\n\r\n        // [7] Total referral eranings\r\n        totalReferralEarnings(msg.sender)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extraAmbassador\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ERC20Reinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ERC20Earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ERC20Withdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"todonate\",\"type\":\"uint256\"}],\"name\":\"donateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"data\",\"type\":\"bytes20\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfERC20s\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceLedger_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"totalReferralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralEarnings_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConTribute","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007031ab87dcc46818806ec07af46fa8c2ad2a2bfc000000000000000000000000aebbd80fd7dae979d965a3a5b09bbcd23eb40e5f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://694140a8761bcabb1cd2877f70ef3337a5a56340ad39a5404b81000ba2bb9750"}]}