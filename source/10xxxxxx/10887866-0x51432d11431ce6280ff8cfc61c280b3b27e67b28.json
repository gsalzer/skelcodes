{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ISwerve {\r\n    function get_virtual_price() external view returns (uint256 out);\r\n    function underlying_coins(int128 tokenId) external view returns (address token);\r\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit) external view returns (uint256 amount);\r\n    function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external view returns (uint256 buyTokenAmt);\r\n}\r\n\r\ninterface ISwerveZap {\r\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256 amount);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface IStakingRewards {\r\n  function balanceOf(address) external view returns (uint256);\r\n  function earned(address) external view returns (uint256);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract SwerveHelpers is DSMath {\r\n    /**\r\n     * @dev Return Swerve Swap Address\r\n    */\r\n    function getSwerveSwapAddr() internal pure returns (address) {\r\n        return 0x329239599afB305DA0A2eC69c58F8a6697F9F88d;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Swerve Token Address\r\n    */\r\n    function getSwerveTokenAddr() internal pure returns (address) {\r\n        return 0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Swerve Zap Address\r\n    */\r\n    function getSwerveZapAddr() internal pure returns (address) {\r\n        return 0xa746c67eB7915Fa832a4C2076D403D4B68085431;\r\n    }\r\n\r\n    function getTokenI(address token) internal pure returns (int128 i) {\r\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\r\n        // DAI Token\r\n        i = 0;\r\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n        // USDC Token\r\n        i = 1;\r\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\r\n        // USDT Token\r\n        i = 2;\r\n        } else if (token == address(0x0000000000085d4780B73119b644AE5ecd22b376)) {\r\n        // TUSD Token\r\n        i = 3;\r\n        } else {\r\n        revert(\"token-not-found.\");\r\n        }\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18(TokenInterface(sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(TokenInterface(buyAddr).decimals(), buyAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getDepositUnitAmt(\r\n        address token,\r\n        uint depositAmt,\r\n        uint swerveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _depositAmt = convertTo18(TokenInterface(token).decimals(), depositAmt);\r\n        uint _swerveAmt = convertTo18(TokenInterface(getSwerveTokenAddr()).decimals(), swerveAmt);\r\n        unitAmt = wdiv(_swerveAmt, _depositAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getWithdrawtUnitAmt(\r\n        address token,\r\n        uint withdrawAmt,\r\n        uint swerveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _withdrawAmt = convertTo18(TokenInterface(token).decimals(), withdrawAmt);\r\n        uint _swerveAmt = convertTo18(TokenInterface(getSwerveTokenAddr()).decimals(), swerveAmt);\r\n        unitAmt = wdiv(_swerveAmt, _withdrawAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is SwerveHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint buyAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        ISwerve swerve = ISwerve(getSwerveSwapAddr());\r\n        buyAmt = swerve.get_dy(getTokenI(sellAddr), getTokenI(buyAddr), sellAmt);\r\n        virtualPrice = swerve.get_virtual_price();\r\n        unitAmt = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, buyAmt, slippage);\r\n    }\r\n\r\n    function getDepositAmount(address token, uint depositAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint swerveAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = depositAmt;\r\n        ISwerve swerve = ISwerve(getSwerveSwapAddr());\r\n        swerveAmt = swerve.calc_token_amount(amts, true);\r\n        virtualPrice = swerve.get_virtual_price();\r\n        unitAmt = getDepositUnitAmt(token, depositAmt, swerveAmt, slippage);\r\n    }\r\n\r\n    function getWithdrawSwerveAmount(address token, uint withdrawAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint swerveAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = withdrawAmt;\r\n        ISwerve swerve = ISwerve(getSwerveSwapAddr());\r\n        swerveAmt = swerve.calc_token_amount(amts, false);\r\n        virtualPrice = swerve.get_virtual_price();\r\n        unitAmt = getWithdrawtUnitAmt(token, withdrawAmt, swerveAmt, slippage);\r\n    }\r\n\r\n    function getWithdrawTokenAmount(address token, uint swerveAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint tokenAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        tokenAmt = ISwerveZap(getSwerveZapAddr()).calc_withdraw_one_coin(swerveAmt, getTokenI(token));\r\n        virtualPrice = ISwerve(getSwerveSwapAddr()).get_virtual_price();\r\n        unitAmt = getWithdrawtUnitAmt(token, tokenAmt, swerveAmt, slippage);\r\n    }\r\n\r\n    function getPosition(\r\n        address user\r\n    ) public view returns (\r\n        uint userBal,\r\n        uint totalSupply,\r\n        uint virtualPrice,\r\n        uint userShare,\r\n        uint poolDaiBal,\r\n        uint poolUsdcBal,\r\n        uint poolUsdtBal,\r\n        uint poolSusdBal\r\n    ) {\r\n        TokenInterface swerveToken = TokenInterface(getSwerveTokenAddr());\r\n        userBal = swerveToken.balanceOf(user);\r\n        totalSupply = swerveToken.totalSupply();\r\n        userShare = wdiv(userBal, totalSupply);\r\n        ISwerve swerveContract = ISwerve(getSwerveSwapAddr());\r\n        virtualPrice = swerveContract.get_virtual_price();\r\n        poolDaiBal = TokenInterface(swerveContract.underlying_coins(0)).balanceOf(getSwerveSwapAddr());\r\n        poolUsdcBal = TokenInterface(swerveContract.underlying_coins(1)).balanceOf(getSwerveSwapAddr());\r\n        poolUsdtBal = TokenInterface(swerveContract.underlying_coins(2)).balanceOf(getSwerveSwapAddr());\r\n        poolSusdBal = TokenInterface(swerveContract.underlying_coins(3)).balanceOf(getSwerveSwapAddr());\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaSwerveResolver is Resolver {\r\n    string public constant name = \"Swerve-swUSD-Resolver-v1.0\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swerveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDaiBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUsdcBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUsdtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSusdBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawSwerveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swerveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swerveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaSwerveResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f04360eeedda1d5e5999ded2af017bd27a09da3a18474a83aff502b6b2eecbc"}]}