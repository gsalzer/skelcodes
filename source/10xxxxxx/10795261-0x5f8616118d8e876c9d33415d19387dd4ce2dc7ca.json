{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\nlibrary SushiHelper {\r\n    function deposit(address masterChef, uint256 pid, uint256 amount) internal {\r\n        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0xe2bbb158, pid, amount));\r\n        require(success && data.length == 0, \"SushiHelper: DEPOSIT FAILED\");\r\n    }\r\n\r\n    function withdraw(address masterChef, uint256 pid, uint256 amount) internal {\r\n        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x441a3e70, pid, amount));\r\n        require(success && data.length == 0, \"SushiHelper: WITHDRAW FAILED\");\r\n    }\r\n\r\n    function pendingSushi(address masterChef, uint256 pid, address user) internal returns (uint256 amount) {\r\n        (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x195426ec, pid, user));\r\n        require(success && data.length != 0, \"SushiHelper: WITHDRAW FAILED\");\r\n        amount = abi.decode(data, (uint256));\r\n    }\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interface/IWasabi.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IWasabi {\r\n    function getOffer(address  _lpToken,  uint index) external view returns (address offer);\r\n    function getOfferLength(address _lpToken) external view returns (uint length);\r\n    function pool(address _token) external view returns (uint);\r\n    function increaseProductivity(uint amount) external;\r\n    function decreaseProductivity(uint amount) external;\r\n    function tokenAddress() external view returns(address);\r\n    function addTakerOffer(address _offer, address _user) external returns (uint);\r\n    function getUserOffer(address _user, uint _index) external view returns (address);\r\n    function getUserOffersLength(address _user) external view returns (uint length);\r\n    function getTakerOffer(address _user, uint _index) external view returns (address);\r\n    function getTakerOffersLength(address _user) external view returns (uint length);\r\n    function offerStatus() external view returns(uint amountIn, address masterChef, uint sushiPid);\r\n    function cancel(address _from, address _sushi) external ;\r\n    function take(address taker,uint amountWasabi) external;\r\n    function payback(address _from) external;\r\n    function close(address _from, uint8 _state, address _sushi) external  returns (address tokenToOwner, address tokenToTaker, uint amountToOwner, uint amountToTaker);\r\n    function upgradeGovernance(address _newGovernor) external;\r\n    function acceptToken() external view returns(address);\r\n    function rewardAddress() external view returns(address);\r\n    function getTokensLength() external view returns (uint);\r\n    function tokens(uint _index) external view returns(address);\r\n    function offers(address _offer) external view returns(address tokenIn, address tokenOut, uint amountIn, uint amountOut, uint expire, uint interests, uint duration);\r\n    function getRateForOffer(address _offer) external view returns (uint offerFeeRate, uint offerInterestrate);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interface/IERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Root file: contracts/WasabiGovernance.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\n// import 'contracts/libraries/TransferHelper.sol';\r\n// import 'contracts/interface/IWasabi.sol';\r\n// import 'contracts/interface/IERC20.sol';\r\n\r\n// todo\r\ncontract WasabiGovernance  {\r\n    uint public version = 1;\r\n    address public wasabi;\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n    event Upgraded(address indexed _from, address indexed _to, uint _value);\r\n    event RewardManagerChanged(address indexed _from, address indexed _to, uint _rewardTokenBalance, uint _wsbTokenBalance);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'WasabiGovernance: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function initialize(address _wasabi) external onlyOwner {\r\n        require(_wasabi != address(0), 'WasabiGovernance: INPUT_ADDRESS_IS_ZERO');\r\n        wasabi = _wasabi;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'WasabiGovernance: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function upgrade(address _newGovernor) external onlyOwner returns (bool) {\r\n        IWasabi(wasabi).upgradeGovernance(_newGovernor);\r\n        return true; \r\n    }\r\n\r\n    function changeRewardManager(address _manager) external onlyOwner returns (bool) {\r\n        address rewardToken = IWasabi(wasabi).acceptToken();\r\n        address wsbToken = IWasabi(wasabi).tokenAddress();\r\n        uint rewardTokenBalance = IERC20(rewardToken).balanceOf(address(this));\r\n        uint wsbTokenBalance = IERC20(wsbToken).balanceOf(address(this));\r\n        require(rewardTokenBalance > 0 || wsbTokenBalance > 0, 'WasabiGovernance: NO_REWARD');\r\n        require(_manager != address(this), 'WasabiGovernance: NO_CHANGE');\r\n        if (rewardTokenBalance > 0) TransferHelper.safeTransfer(rewardToken, _manager, rewardTokenBalance);\r\n        if (wsbTokenBalance > 0) TransferHelper.safeTransfer(wsbToken, _manager, wsbTokenBalance);\r\n        emit RewardManagerChanged(address(this), _manager, rewardTokenBalance, wsbTokenBalance);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wsbTokenBalance\",\"type\":\"uint256\"}],\"name\":\"RewardManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"changeRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wasabi\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasabi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WasabiGovernance","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://617ed0963358671b3be506595f28eb7aefe4e08b1eb6a55822c8d13d852e2301"}]}