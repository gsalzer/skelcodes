{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\n\ncontract PaytoWin {\n  uint256 public lastblock;\n  uint256 public lastbuy;\n  address payable public biggestWhale;\n  address payable public owner;\n   \n  constructor() public {\n    owner = msg.sender;\n  }\n\n  event BiggerWhale(address whale, uint256 buyin);\n  event RoundEnded(address whale, uint256 pot);\n\n  /**\n   * @dev End the current round and pay the pot to the biggest whale.\n   * Note: Only callable after 1 day has passed since the last contribution.\n   * Throws if there is no current highest whale.\n  */\n  function claim() external {\n    address payable whale = biggestWhale;\n    require(now >= 1 days + lastblock, \"Must wait 24 hours to claim winnings.\");\n    require(whale != address(0), \"No current whales.\");\n    lastbuy = 0;\n    biggestWhale = address(0);\n    owner.transfer(address(this).balance / 50);\n    uint256 pot = address(this).balance;\n    whale.transfer(pot);\n    emit RoundEnded(whale, pot);\n  }\n\n  /**\n   * @dev buy into the pot and become the biggest whale.\n   * If another whale currently has the highest spot,\n   * refund half their contribution.\n   * Note: msg.value must be greater than `lastbuy`\n  */\n  function Buy() external payable {\n    require(msg.value > lastbuy, \"Insufficient input.\");\n    address payable whale = biggestWhale;\n    lastbuy = msg.value;\n    biggestWhale = msg.sender;\n    lastblock = now;\n    if (whale != address(0)) whale.transfer(lastbuy / 2);\n    emit BiggerWhale(msg.sender, msg.value);\n  }\n\n  /**\n   * @dev Check the time remaining in the current round.\n   */\n  function timeRemaining() external view returns (uint256) {\n    if (now >= 1 days + lastblock) return 0;\n    return (1 days + lastblock) - now;\n  }    function lstbuy() public view returns (uint) {\n        return lastbuy;\n\n    }\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyin\",\"type\":\"uint256\"}],\"name\":\"BiggerWhale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biggestWhale\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lstbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PaytoWin","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}