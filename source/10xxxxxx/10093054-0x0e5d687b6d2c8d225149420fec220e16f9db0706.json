{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract Aandrom {\r\n    \r\n    /**\r\n     * Aandrom token is Zero Investo Risk Coin  -  ZIRA.\r\n     * Thats mean user can get back invested ether \r\n     * with the following rules:\r\n     *  1.  If user one time buy coin and  do nothing with them\r\n     *      he can get invested ether back if token sale is not end\r\n     * \r\n     *  2.  If user do anything with coin, he lose possibility to\r\n     *      get invested ether back.\r\n     *      if the user does the following things:\r\n     *          1.  If user send coins.\r\n     *          2.  If user to allow Approval.\r\n     *          3.  If user buy coins more then 1 time\r\n     *          4.  If user lock coins\r\n     *          5.  If user get invested ether back and buy coins another time\r\n     * */\r\n\r\n    string public constant name = \"Aandrom\";\r\n    string public constant symbol = \"AND\";\r\n    uint8 public constant decimals = 3;  \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    uint256 totalSupply_;\r\n    \r\n    mapping(address => uint256)private locked;\r\n    mapping(address => uint256)private lockedDays;\r\n    mapping(address => uint256)private startDay;\r\n    mapping(address => uint256)private endDay;\r\n    mapping(address => uint256)private revertBalance;\r\n    mapping(address => bool)private canBeReverted;\r\n    mapping(address => bool)private isFirstBuying;\r\n    mapping(address => bool)private participate;\r\n    mapping(address => bool)private isTakeReward;\r\n\r\n    uint256 circulate = 0;\r\n    uint256 totalLocked = 0;\r\n    uint256 shareReward = 0;\r\n    uint256 unrevertedBalance;\r\n    uint256 genesis;\r\n    address creator;\r\n    bytes32  pass = 0xb829e805ab160bf10124b48da39c07eecc55bea7b9229820abbcc396ebf35cf1;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n    \r\n    \r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor() public {  \r\n\ttotalSupply_ = 30000000000;\r\n\tbalances[address(this)] = 10000000000;\r\n\tbalances[address(uint160(0x0000000000000000000000000000000000000000))] = 20000000000;\r\n\tgenesis = now - 1 days;\r\n\tcreator = msg.sender;\r\n    }  \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\treturn totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        \r\n        if(canBeReverted[msg.sender] == false){\r\n            canBeReverted[msg.sender] = true;\r\n        }\r\n        uint256 _transeth = revertBalance[msg.sender];\r\n        if(_transeth > 0){\r\n            unrevertedBalance = unrevertedBalance.add(_transeth);\r\n            revertBalance[msg.sender] = 0;\r\n        }\r\n        \r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        if(canBeReverted[msg.sender] == false){\r\n            canBeReverted[msg.sender] = true;\r\n        }\r\n        uint256 _transeth = revertBalance[msg.sender];\r\n        if(_transeth > 0){\r\n            unrevertedBalance = unrevertedBalance.add(_transeth);\r\n            revertBalance[msg.sender] = 0;\r\n        }\r\n        \r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        if(canBeReverted[msg.sender] == false){\r\n            canBeReverted[msg.sender] = true;\r\n        }\r\n        uint256 _transeth = revertBalance[msg.sender];\r\n        if(_transeth > 0){\r\n            unrevertedBalance = unrevertedBalance.add(_transeth);\r\n            revertBalance[msg.sender] = 0;\r\n        }\r\n        \r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function buy()external payable{\r\n        /**\r\n         * Price will increase by 10% every day\r\n         * for next 100 days\r\n         * */\r\n        uint256 currBalance = balances[address(this)];\r\n        uint256 startedPrice = 90000000000;\r\n        uint256 _now = now;\r\n        uint256 _genesis = genesis;\r\n        uint256 distance = _now - _genesis;\r\n        uint256 safeCalcDays = distance.div(1 days);\r\n        uint256 priceUp = safeCalcDays.mul(10000000000);\r\n        uint256 finalPrice = startedPrice.add(priceUp);\r\n        uint256 finalAmount = msg.value.div(finalPrice);\r\n        uint256 calcIsSaleEnd = now.sub(genesis);\r\n        \r\n        if(calcIsSaleEnd <= 100 days && currBalance >= finalAmount && finalAmount > 0){\r\n            balances[msg.sender] = balances[msg.sender].add(finalAmount);\r\n            balances[address(this)] = balances[address(this)].sub(finalAmount);\r\n            circulate = circulate.add(finalAmount);\r\n            \r\n            if(isFirstBuying[msg.sender] == false && canBeReverted[msg.sender] == false){\r\n                uint256 _transeth = msg.value;\r\n                revertBalance[msg.sender] = revertBalance[msg.sender].add(_transeth);\r\n                isFirstBuying[msg.sender] = true;\r\n            }\r\n            else{\r\n                uint256 etherfromtrans = msg.value;\r\n                uint256 etherfromunclamed = revertBalance[msg.sender];\r\n                if(isFirstBuying[msg.sender] == false){\r\n                    isFirstBuying[msg.sender] = true;\r\n                }\r\n                if(canBeReverted[msg.sender] == false){\r\n                    canBeReverted[msg.sender] = true;\r\n                    \r\n                }\r\n                if(etherfromunclamed > 0){\r\n                    uint256 total = etherfromunclamed.add(etherfromtrans);\r\n                    unrevertedBalance = unrevertedBalance.add(total);\r\n                    revertBalance[msg.sender] = 0;\r\n                }\r\n                if(etherfromunclamed <= 0){\r\n                    unrevertedBalance = unrevertedBalance.add(etherfromtrans);\r\n                }\r\n            }\r\n            if(isFirstBuying[msg.sender] == true && canBeReverted[msg.sender] == true){\r\n                if(participate[msg.sender] == false && balances[msg.sender] >0){\r\n                    participate[msg.sender] = true;\r\n                    shareReward = shareReward.add(1);\r\n                }\r\n            }\r\n            emit Transfer(address(this), msg.sender, finalAmount);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    \r\n    function activateZIR()external{\r\n        uint256 eth = revertBalance[msg.sender];\r\n        uint256 coins = balances[msg.sender];\r\n        uint256 _now = now;\r\n        uint256 _genesis = genesis;\r\n        uint256 isTime = _now.sub(_genesis);\r\n        if(eth > 0 && canBeReverted[msg.sender] == false && isFirstBuying[msg.sender] == true && coins > 0 && isTime <= 100 days){\r\n            canBeReverted[msg.sender] = true;\r\n            revertBalance[msg.sender] = 0;\r\n            address(uint160(msg.sender)).transfer(eth);\r\n            balances[msg.sender] = 0;\r\n            balances[address(this)] = balances[address(this)].add(coins);\r\n            circulate = circulate.sub(coins);\r\n            emit Transfer(msg.sender,address(this),coins);\r\n        }else{\r\n            revert();\r\n        }\r\n        \r\n    }\r\n    \r\n    function stake(uint256 _value,uint256 _days)external{\r\n        \r\n        uint256 coins = balances[msg.sender];\r\n        uint256 value = _value;\r\n        uint256 reserved = _days;\r\n        uint256 reservedt = reserved.mul(1 days);\r\n        uint256 start = now;\r\n        uint256 end = start.add(reservedt);\r\n        if(coins >= value && locked[msg.sender] == 0 && value > 0 && reserved > 0){\r\n            if(canBeReverted[msg.sender] == false){\r\n                canBeReverted[msg.sender] = true;\r\n            }\r\n            uint256 eth = revertBalance[msg.sender];\r\n                if(eth > 0){\r\n                    revertBalance[msg.sender] = 0;\r\n                    unrevertedBalance = unrevertedBalance.add(eth);\r\n                }\r\n            startDay[msg.sender] = start;\r\n            endDay[msg.sender] = end;\r\n            lockedDays[msg.sender] = reserved;\r\n            circulate = circulate.sub(value);\r\n            locked[msg.sender] = locked[msg.sender].add(value);\r\n            totalLocked = totalLocked.add(value);\r\n            balances[msg.sender] = balances[msg.sender].sub(value);\r\n            balances[0x0000000000000000000000000000000000000000] = balances[0x0000000000000000000000000000000000000000].add(value);\r\n            emit Transfer(msg.sender,0x0000000000000000000000000000000000000000,value);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function closeStake()external{\r\n        \r\n        uint256 currTime = now;\r\n        uint256 endTime = endDay[msg.sender];\r\n        bool comply = currTime >= endTime;\r\n        bool isNotEmpty = locked[msg.sender] > 0;\r\n        \r\n        uint256 value = locked[msg.sender];\r\n        uint256 _days = lockedDays[msg.sender];\r\n        uint256 onePerc = value.div(100); \r\n        uint256 rewardPerc = onePerc.mul(_days);                                   //1% of invested coins per day\r\n        uint256 reward = value.add(rewardPerc);\r\n        \r\n        uint256 penalPerc = value.div(10);                                          // -10% of locked coins if  stake is closed befor end day\r\n        uint256 penal = value.sub(penalPerc);\r\n        \r\n        if(isNotEmpty == true && comply == true){\r\n            if(balances[0x0000000000000000000000000000000000000000] >= reward){\r\n                balances[msg.sender] = balances[msg.sender].add(reward);\r\n                balances[0x0000000000000000000000000000000000000000] = balances[0x0000000000000000000000000000000000000000].sub(reward);\r\n                locked[msg.sender] = 0;\r\n                lockedDays[msg.sender] = 0;\r\n                endDay[msg.sender] = 0;\r\n                startDay[msg.sender] = 0;\r\n                circulate = circulate.add(reward);\r\n                totalLocked = totalLocked.sub(value);\r\n                emit Transfer(0x0000000000000000000000000000000000000000,msg.sender,reward);\r\n            }else if(balances[0x0000000000000000000000000000000000000000] < reward && balances[0x0000000000000000000000000000000000000000] > 0){\r\n                uint256 maxreward = balances[0x0000000000000000000000000000000000000000];\r\n                balances[msg.sender] = balances[msg.sender].add(maxreward);\r\n                balances[0x0000000000000000000000000000000000000000] = 0;\r\n                locked[msg.sender] = 0;\r\n                lockedDays[msg.sender] = 0;\r\n                endDay[msg.sender] = 0;\r\n                startDay[msg.sender] = 0;\r\n                circulate = circulate.add(maxreward);\r\n                totalLocked = totalLocked.sub(value);\r\n                emit Transfer(0x0000000000000000000000000000000000000000,msg.sender,maxreward);\r\n            }else{\r\n                revert();\r\n            }\r\n        }else if(isNotEmpty == true && comply == false){\r\n            \r\n            if(balances[0x0000000000000000000000000000000000000000] >= penal){\r\n                balances[msg.sender] = balances[msg.sender].add(penal);\r\n                balances[0x0000000000000000000000000000000000000000] = balances[0x0000000000000000000000000000000000000000].sub(penal);\r\n                locked[msg.sender] = 0;\r\n                lockedDays[msg.sender] = 0;\r\n                endDay[msg.sender] = 0;\r\n                startDay[msg.sender] = 0;\r\n                circulate = circulate.add(penal);\r\n                totalLocked = totalLocked.sub(value);\r\n                emit Transfer(0x0000000000000000000000000000000000000000,msg.sender,penal);\r\n            }else if(balances[0x0000000000000000000000000000000000000000] < penal && balances[0x0000000000000000000000000000000000000000] > 0){\r\n                uint256 maxreward = balances[0x0000000000000000000000000000000000000000];\r\n                balances[msg.sender] = balances[msg.sender].add(maxreward);\r\n                balances[0x0000000000000000000000000000000000000000] = 0;\r\n                locked[msg.sender] = 0;\r\n                lockedDays[msg.sender] = 0;\r\n                endDay[msg.sender] = 0;\r\n                startDay[msg.sender] = 0;\r\n                circulate = circulate.add(maxreward);\r\n                totalLocked = totalLocked.sub(value);                                                          //totallocked will delete total user amount of staking\r\n                emit Transfer(0x0000000000000000000000000000000000000000,msg.sender,maxreward);\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            revert();\r\n        }\r\n        \r\n    }\r\n    \r\n    function ownable()external{\r\n        uint256 x = unrevertedBalance;\r\n        if(x > 0 && msg.sender == creator){\r\n            address(uint160(msg.sender)).transfer(x);\r\n            unrevertedBalance = 0;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function claimReward()external{\r\n        uint256 _genesis = genesis;\r\n        uint256 _now = now;\r\n        uint256 isTime = _now.sub(_genesis);\r\n        if(isTime >= 100 days){\r\n            if(isTakeReward[msg.sender] == false && participate[msg.sender] == true){\r\n                uint256 foreach = shareReward;\r\n                uint256 currbalance = balances[address(this)];\r\n                uint256 reward = currbalance.div(foreach);\r\n                if(currbalance >= reward && reward > 0 && foreach > 0){\r\n                    balances[address(this)] = balances[address(this)].sub(reward);\r\n                    balances[msg.sender] = balances[msg.sender].add(reward);\r\n                    circulate = circulate.add(reward);\r\n                    isTakeReward[msg.sender] = true;\r\n                    shareReward = shareReward.sub(1);\r\n                    emit Transfer(address(this),msg.sender,reward);\r\n                }else{\r\n                    revert();\r\n                }\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    \r\n    function ViewStakeDetails(address a)public view returns(uint256,uint256,uint256,uint256){\r\n        return (lockedDays[a],startDay[a],endDay[a],locked[a]);\r\n    }\r\n    \r\n    function viewCirculate()public view returns(uint256){\r\n        return circulate;\r\n    }\r\n    \r\n    function canActivateZIR(address a)public view returns(bool){\r\n        if(balances[a] > 0 && isFirstBuying[a] == true && canBeReverted[a] == false && revertBalance[a] > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function totalInStake()public view returns(uint256){\r\n        return totalLocked;\r\n    }\r\n    \r\n    \r\n    function viewUntakenETH(string memory pass__)public view returns(uint256){\r\n        uint256 _fee = unrevertedBalance;\r\n        if(sha256(abi.encodePacked((pass__))) == pass && _fee > 0){\r\n            return _fee;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n     function viewCurrPrice()public view returns(uint256,bool){\r\n        uint256 startedPrice = 90000000000;\r\n        uint256 distance = now - genesis;\r\n        uint256 safeCalcDays = distance.div(1 days);\r\n        uint256 priceUp = safeCalcDays.mul(10000000000);\r\n        uint256 finalPrice = startedPrice.add(priceUp);\r\n        uint256 calcIsSaleEndx = now.sub(genesis);\r\n\r\n        if(calcIsSaleEndx <= 100 days){\r\n            finalPrice = finalPrice.mul(1000);\r\n            return (finalPrice,true);\r\n        }\r\n        else{\r\n            return (0,false);\r\n        }\r\n    }\r\n    \r\n    function viewEndSales()public view returns(uint256,bool){\r\n        uint256 _genesis = genesis;\r\n        uint256 _now = now;\r\n        uint256 isEnd = _now.sub(_genesis);\r\n        uint256 __days = 100 days;\r\n        if(__days >= isEnd){\r\n            uint256 res = __days.sub(isEnd);\r\n            return (res,true);\r\n        }else{\r\n            return (0,false);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"ViewStakeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateZIR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"canActivateZIR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCirculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCurrPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEndSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pass__\",\"type\":\"string\"}],\"name\":\"viewUntakenETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Aandrom","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f7b732fb250a9179be3860de9219f6118c954840309008196bc14fc911a3eb2f"}]}