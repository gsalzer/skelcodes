{"status":"1","message":"OK","result":[{"SourceCode":"// Built by @ragonzal - 2020\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface Poap {\r\n    function mintToken(uint256 eventId, address to) external returns (bool);\r\n}\r\n\r\ncontract PoapAirdrop {\r\n\r\n    string public name;\r\n\r\n    // POAP Contract - Only Mint Token function\r\n    Poap POAPToken;\r\n\r\n    // Processed claims\r\n    mapping(address => bool) public claimed;\r\n\r\n    // Merkle tree root hash\r\n    bytes32 public rootHash;\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     * @param contractName Contract name\r\n     * @param contractAddress Address of the POAP contract\r\n     * @param merkleTreeRootHash Processed merkle tree root hash\r\n     */\r\n    constructor (string memory contractName, address contractAddress, bytes32 merkleTreeRootHash) public {\r\n        name = contractName;\r\n        POAPToken = Poap(contractAddress);\r\n        rootHash = merkleTreeRootHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to verify merkle tree proofs and mint POAPs to the recipient\r\n     * @param index Leaf position in the merkle tree\r\n     * @param recipient Recipient address of the POAPs to be minted\r\n     * @param events Array of event ids to be minted\r\n     * @param proofs Array of proofs to verify the claim\r\n     */\r\n    function claim(uint256 index, address recipient, uint256[] calldata events, bytes32[] calldata proofs) external {\r\n        require(claimed[recipient] == false, \"Recipient already processed!\");\r\n        require(verify(index, recipient, events, proofs), \"Recipient not in merkle tree!\");\r\n\r\n        claimed[recipient] = true;\r\n\r\n        require(mintTokens(recipient, events), \"Could not mint POAPs\");\r\n    }\r\n\r\n    /**\r\n     * @dev Function to verify merkle tree proofs\r\n     * @param index Leaf position in the merkle tree\r\n     * @param recipient Recipient address of the POAPs to be minted\r\n     * @param events Array of event ids to be minted\r\n     * @param proofs Array of proofs to verify the claim\r\n     */\r\n    function verify(uint256 index, address recipient, uint256[] memory events, bytes32[] memory proofs) public view returns (bool) {\r\n\r\n        // Compute the merkle root\r\n        bytes32 node = keccak256(abi.encodePacked(index, recipient, events));\r\n        for (uint16 i = 0; i < proofs.length; i++) {\r\n            bytes32 proofElement = proofs[i];\r\n            if (proofElement < node) {\r\n                node = keccak256(abi.encodePacked(proofElement, node));\r\n            } else {\r\n                node = keccak256(abi.encodePacked(node, proofElement));\r\n            }\r\n        }\r\n\r\n        // Check the merkle proof\r\n        return node == rootHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint POAPs\r\n     * @param recipient Recipient address of the POAPs to be minted\r\n     * @param events Array of event ids to be minted\r\n     */\r\n    function mintTokens(address recipient, uint256[] memory events) internal returns (bool) {\r\n        for (uint256 i = 0; i < events.length; i++) {\r\n            POAPToken.mintToken(events[i], recipient);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleTreeRootHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"events\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"events\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoapAirdrop","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000009ba1a632125c82acb38d2a60c19f437ff9e55228e7245df323298c003a1adc296cca75e1037f09e9e49ceeb59793d745008f8e4b0000000000000000000000000000000000000000000000000000000000000017504f41502059414d204865726f65732041697264726f70000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec0eacd6139a0006fef469da65305b658e682fbe25ccf8781c140854eda0bf81"}]}