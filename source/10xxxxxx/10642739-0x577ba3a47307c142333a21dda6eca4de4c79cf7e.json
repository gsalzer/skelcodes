{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract AtisStaking {\r\n\tusing SafeMath for uint256;\r\n \taddress payable internal owner;\r\n    IERC20 internal atis = IERC20(address(0x821144518dfE9e7b44fCF4d0824e15e8390d4637));\r\n    uint256 constant internal MAGNITUDE = 2 ** 64;\r\n    uint32 constant private DROP_RATE = 3;\r\n    uint32 constant private PENALITY_FEE = 3;\r\n    uint32 constant private DROP_FREQUENCY = 48 hours;\r\n    uint32 constant private TIME_LOCK_FREQUENCY = 48 hours;\r\n    \r\n\r\n    mapping(address => uint256) public stakedOf;\r\n    mapping(address => int256) private payoutsTo;\r\n    mapping(address => uint256) public claimedOf;\r\n    mapping(address => uint256) public unstakedOf;\r\n    mapping(address => uint256) public timeLock;\r\n    \r\n    uint256 private profitPerShare;\r\n    uint256 private pool;\r\n    uint256 private totalSupply;\r\n\r\n    uint256 public lastDripTime  = now;\r\n    \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner,\"NO_AUTH\");\r\n    _;\r\n    }\r\n \r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n    }\r\n\r\n\r\n     modifier hasDripped(){\r\n        if(pool > 0 && totalSupply > 0){ \r\n          uint256 cyclePassed = SafeMath.sub(now,lastDripTime)/DROP_FREQUENCY;\r\n         \r\n          uint256 dividends =  cyclePassed*((pool * DROP_RATE) / 100);\r\n\r\n          if (dividends > pool) {\r\n              dividends = pool;\r\n          }\r\n\r\n          profitPerShare = SafeMath.add(profitPerShare, (dividends * MAGNITUDE) / totalSupply);\r\n          pool = pool.sub(dividends);\r\n          lastDripTime = lastDripTime + (cyclePassed * DROP_FREQUENCY);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function feed() public payable{\r\n        require(msg.value > 0);\r\n        if(pool == 0 && totalSupply > 0){//START DRIPPING\r\n            lastDripTime = now;\r\n        }\r\n        pool += msg.value;\r\n       \r\n    }\r\n\r\n\r\n    function stake(uint256 amount) hasDripped  public \r\n    {\r\n        require(amount > 0);\r\n        uint256 currentBalance = atis.balanceOf(address(this));\r\n        atis.transferFrom(msg.sender, address(this), amount);\r\n        uint256 diff = atis.balanceOf(address(this)) - currentBalance;\r\n        \r\n        require(diff > 0);\r\n        \r\n        if(pool > 0 && totalSupply == 0){//START DRIPPING\r\n            lastDripTime = now;\r\n        }\r\n        totalSupply = SafeMath.add(totalSupply,diff);\r\n        stakedOf[msg.sender] = SafeMath.add(stakedOf[msg.sender], diff);\r\n        payoutsTo[msg.sender] += (int256) (profitPerShare * diff);\r\n    }\r\n\r\n    function unstake(uint256 _amount) hasDripped public \r\n    {\r\n        require(_amount <= stakedOf[msg.sender]);\r\n        totalSupply -= _amount;\r\n        stakedOf[msg.sender]= SafeMath.sub(stakedOf[msg.sender], _amount);\r\n        unstakedOf[msg.sender] += _amount;\r\n        payoutsTo[msg.sender] -= (int256) (profitPerShare * _amount);\r\n        timeLock[msg.sender] = now + TIME_LOCK_FREQUENCY;\r\n        \r\n    }\r\n\r\n    function withdraw() hasDripped public \r\n    {\r\n        require(unstakedOf[msg.sender] > 0);\r\n        require(timeLock[msg.sender] < now , \"LOCKED\");\r\n        uint256 amount = unstakedOf[msg.sender];\r\n        uint256 penality = (amount * PENALITY_FEE) / 100;\r\n        unstakedOf[msg.sender] = 0;\r\n        \r\n        atis.transfer(address(0xe82954Fc979A8CE3b9BBC1B19c6D6A2Aa6d240B2),penality);\r\n        atis.transfer(msg.sender,SafeMath.sub(amount,penality));\r\n    }\r\n\r\n    function claimEarning() hasDripped public {\r\n        uint256 divs = dividendsOf(msg.sender);\r\n\r\n        require(divs > 0 , \"NO_DIV\");\r\n        payoutsTo[msg.sender] += (int256) (divs * MAGNITUDE);\r\n        claimedOf[msg.sender] += divs;\r\n        msg.sender.transfer(divs);\r\n    }\r\n\r\n\r\n    function getGlobalInfo() public view returns (uint256 ,uint256){\r\n        return (pool,totalSupply);\r\n    }\r\n    \r\n\r\n    function estimateDividendsOf(address _customerAddress) public view returns (uint256) {\r\n        if(pool > 0 && totalSupply > 0){\r\n            uint256 _profitPerShare = profitPerShare;\r\n            uint256 cyclePassed = SafeMath.sub(now,lastDripTime) / DROP_FREQUENCY;\r\n            uint256 dividends =  cyclePassed*((pool * DROP_RATE) / 100);\r\n    \r\n            if (dividends > pool) {\r\n                dividends = pool;\r\n            }\r\n    \r\n            _profitPerShare = SafeMath.add(profitPerShare, (dividends * MAGNITUDE) / totalSupply);\r\n    \r\n            return  (uint256) ((int256) (_profitPerShare * stakedOf[_customerAddress]) - payoutsTo[_customerAddress]) / MAGNITUDE;\r\n            \r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare * stakedOf[_customerAddress]) -payoutsTo[_customerAddress]) / MAGNITUDE ;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"feed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"estimateDividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGlobalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AtisStaking","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dc32ec9433db4515aca153fbda61e4e3367aa171ca5a3697cfe4aca305f5b97a"}]}