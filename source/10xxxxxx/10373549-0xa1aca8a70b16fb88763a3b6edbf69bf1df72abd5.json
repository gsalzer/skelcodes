{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address payable public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface AccessControllerInterface {\r\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SimpleWriteAccessController\r\n * @notice Gives access to accounts explicitly added to an access list by the\r\n * controller's owner.\r\n * @dev does not make any special permissions for externally, see\r\n * SimpleReadAccessController for that.\r\n */\r\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\r\n\r\n  bool public checkEnabled;\r\n  mapping(address => bool) internal accessList;\r\n\r\n  event AddedAccess(address user);\r\n  event RemovedAccess(address user);\r\n  event CheckAccessEnabled();\r\n  event CheckAccessDisabled();\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    checkEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the access of an address\r\n   * @param _user The address to query\r\n   */\r\n  function hasAccess(\r\n    address _user,\r\n    bytes memory\r\n  )\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return accessList[_user] || !checkEnabled;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an address to the access list\r\n   * @param _user The address to add\r\n   */\r\n  function addAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!accessList[_user]) {\r\n      accessList[_user] = true;\r\n\r\n      emit AddedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Removes an address from the access list\r\n   * @param _user The address to remove\r\n   */\r\n  function removeAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (accessList[_user]) {\r\n      accessList[_user] = false;\r\n\r\n      emit RemovedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check enforced\r\n   */\r\n  function enableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!checkEnabled) {\r\n      checkEnabled = true;\r\n\r\n      emit CheckAccessEnabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check unenforced\r\n   */\r\n  function disableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (checkEnabled) {\r\n      checkEnabled = false;\r\n\r\n      emit CheckAccessDisabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if the caller does not have access\r\n   */\r\n  modifier checkAccess() {\r\n    require(hasAccess(msg.sender, msg.data), \"No access\");\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SimpleReadAccessController\r\n * @notice Gives access to:\r\n * - any externally owned account (note that offchain actors can always read\r\n * any contract storage regardless of onchain access control measures, so this\r\n * does not weaken the access control while improving usability)\r\n * - accounts explicitly added to an access list\r\n * @dev SimpleReadAccessController is not suitable for access controlling writes\r\n * since it grants any externally owned account access! See\r\n * SimpleWriteAccessController for that.\r\n */\r\ncontract SimpleReadAccessController is SimpleWriteAccessController {\r\n\r\n  /**\r\n   * @notice Returns the access of an address\r\n   * @param _user The address to query\r\n   */\r\n  function hasAccess(\r\n    address _user,\r\n    bytes memory _calldata\r\n  )\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return super.hasAccess(_user, _calldata) || _user == tx.origin;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The Flags contract\r\n * @notice Allows flags to signal to any reader on the access control list.\r\n * The owner can set flags, or designate other addresses to set flags. The\r\n * owner must turn the flags off, other setters cannot.\r\n */\r\ncontract Flags is SimpleReadAccessController {\r\n\r\n  AccessControllerInterface public raisingAccessController;\r\n\r\n  mapping(address => bool) private flags;\r\n\r\n  event FlagOn(\r\n    address indexed subject\r\n  );\r\n  event FlagOff(\r\n    address indexed subject\r\n  );\r\n  event RaisingAccessControllerChanged(\r\n    address indexed previous,\r\n    address indexed current\r\n  );\r\n\r\n  /**\r\n   * @param racAddress address for the raising access controller.\r\n   */\r\n  constructor(\r\n    address racAddress\r\n  )\r\n    public\r\n  {\r\n    setRaisingAccessController(racAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice read the warning flag status of a contract address.\r\n   * @param subject The contract address being checked for a flag.\r\n   * @return A true value indicates that a flag was raised and a\r\n   * false value indicates that no flag was raised.\r\n   */\r\n  function getFlag(address subject)\r\n    external\r\n    view\r\n    checkAccess()\r\n    returns (bool)\r\n  {\r\n    return flags[subject];\r\n  }\r\n\r\n  /**\r\n   * @notice read the warning flag status of a contract address.\r\n   * @param subjects An array of addresses being checked for a flag.\r\n   * @return An array of bools where a true value for any flag indicates that\r\n   * a flag was raised and a false value indicates that no flag was raised.\r\n   */\r\n  function getFlags(address[] calldata subjects)\r\n    external\r\n    view\r\n    checkAccess()\r\n    returns (bool[] memory)\r\n  {\r\n    bool[] memory responses = new bool[](subjects.length);\r\n    for (uint256 i = 0; i < subjects.length; i++) {\r\n      responses[i] = flags[subjects[i]];\r\n    }\r\n    return responses;\r\n  }\r\n\r\n  /**\r\n   * @notice enable the warning flags for mulitple addresses.\r\n   * Access is controlled by raisingAccessController, except for owner\r\n   * who always has access.\r\n   * @param subjects List of the contract addresses whose flag is being raised\r\n   */\r\n  function raiseFlags(address[] calldata subjects)\r\n    external\r\n  {\r\n    require(allowedToRaiseFlags(), \"Not allowed to raise flags\");\r\n\r\n    for (uint256 i = 0; i < subjects.length; i++) {\r\n      address subject = subjects[i];\r\n\r\n      if (!flags[subject]) {\r\n        flags[subject] = true;\r\n        emit FlagOn(subject);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice allows owner to disable the warning flags for mulitple addresses.\r\n   * @param subjects List of the contract addresses whose flag is being lowered\r\n   */\r\n  function lowerFlags(address[] calldata subjects)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    for (uint256 i = 0; i < subjects.length; i++) {\r\n      address subject = subjects[i];\r\n\r\n      if (flags[subject]) {\r\n        flags[subject] = false;\r\n        emit FlagOff(subject);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice allows owner to change the access controller for raising flags.\r\n   * @param racAddress new address for the raising access controller.\r\n   */\r\n  function setRaisingAccessController(\r\n    address racAddress\r\n  )\r\n    public\r\n    onlyOwner()\r\n  {\r\n    address previous = address(raisingAccessController);\r\n\r\n    raisingAccessController = AccessControllerInterface(racAddress);\r\n\r\n    emit RaisingAccessControllerChanged(previous, racAddress);\r\n  }\r\n\r\n\r\n  // PRIVATE\r\n\r\n  function allowedToRaiseFlags()\r\n    private\r\n    returns (bool)\r\n  {\r\n    return msg.sender == owner ||\r\n      raisingAccessController.hasAccess(msg.sender, msg.data);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"racAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"FlagOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"FlagOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"RaisingAccessControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"subjects\",\"type\":\"address[]\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"subjects\",\"type\":\"address[]\"}],\"name\":\"lowerFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"subjects\",\"type\":\"address[]\"}],\"name\":\"raiseFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisingAccessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"racAddress\",\"type\":\"address\"}],\"name\":\"setRaisingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Flags","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c95f64ff4ecf7a7a4e7d21c43c62083cc9be212649f1c391da204de05e40d3b"}]}