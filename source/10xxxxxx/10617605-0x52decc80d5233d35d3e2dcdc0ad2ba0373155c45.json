{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n// ERC20 Interface\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\ninterface POOLS {\r\n    function stakeForMember(uint inputVether, uint inputAsset, address pool, address member) external payable returns (uint units);\r\n}\r\ninterface MATH {\r\n    function calcPart(uint bp, uint total) external pure returns (uint part);\r\n    function calcShare(uint part, uint total, uint amount) external pure returns (uint share);\r\n    function calcSwapOutput(uint x, uint X, uint Y) external pure returns (uint output);\r\n    function calcSwapFee(uint x, uint X, uint Y) external pure returns (uint output);\r\n    function calcStakeUnits(uint a, uint A, uint v, uint V) external pure returns (uint units);\r\n    function calcAsymmetricShare(uint s, uint T, uint A) external pure returns (uint share);\r\n}\r\n// SafeMath\r\nlibrary SafeMath {\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint)   {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract VetherPools2 {\r\n    using SafeMath for uint;\r\n\r\n    address public VETHER;\r\n    uint public one = 10**18;\r\n    uint public VETHCAP = 10000 * one;\r\n    uint public DAY = 86400;\r\n    uint public DAYCAP = 30*DAY;\r\n\r\n    MATH public math;\r\n\r\n    address[] public arrayPools;\r\n    mapping(address => PoolData) public poolData;\r\n    struct PoolData {\r\n        bool listed;\r\n        uint genesis;\r\n        uint vether;\r\n        uint asset;\r\n        uint vetherStaked;\r\n        uint assetStaked;\r\n        address[] arrayStakers;\r\n        uint poolUnits;\r\n        uint fees;\r\n        uint volume;\r\n        uint txCount;\r\n    }\r\n    \r\n    address[] public arrayMembers;\r\n    mapping(address => MemberData) public memberData;\r\n    struct MemberData {\r\n        bool isMember;\r\n        mapping(address => StakeData) stakeData;\r\n        address[] arrayPools;\r\n    }\r\n\r\n    struct StakeData {\r\n        uint vether;\r\n        uint asset;\r\n        uint stakeUnits;\r\n    }\r\n   \r\n    event Staked(address pool, address member, uint inputAsset, uint inputVether, uint unitsIssued);\r\n    event Unstaked(address pool, address member, uint outputAsset, uint outputVether, uint unitsClaimed);\r\n    event Swapped(address assetFrom, address assetTo, uint inputAmount, uint transferAmount, uint outputAmount, uint fee, address recipient);\r\n\r\n    constructor () public payable {\r\n        VETHER = 0x4Ba6dDd7b89ed838FEd25d208D4f644106E34279;\r\n        math = MATH(0xe5087d4B22194bEd83556edEDca846c91E550b5B);\r\n    }\r\n\r\n    receive() external payable {\r\n        swap(msg.value, address(0), VETHER);\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Staking functions\r\n\r\n    function stake(uint inputVether, uint inputAsset, address pool) public payable returns (uint units) {\r\n        units = stakeForMember(inputVether, inputAsset, pool, msg.sender);\r\n        return units;\r\n    }\r\n\r\n    function stakeForMember(uint inputVether, uint inputAsset, address pool, address member) public payable returns (uint units) {\r\n        require(pool != VETHER, \"Pool must not be Vether\");\r\n        if (!poolData[pool].listed) { \r\n            require((inputAsset > 0 && inputVether > 0), \"Must get both assets for new pool\");\r\n            _createNewPool(pool);\r\n        }\r\n        uint _allowedVether;\r\n        if((ERC20(VETHER).balanceOf(address(this)) + inputVether) > VETHCAP){\r\n            if(ERC20(VETHER).balanceOf(address(this)) > VETHCAP){\r\n                _allowedVether = 0;\r\n            } else {\r\n                _allowedVether = VETHCAP.sub(ERC20(VETHER).balanceOf(address(this)));\r\n            }\r\n        } else {\r\n            _allowedVether = inputVether;\r\n        }\r\n        uint _actualInputAsset = _handleTransferIn(pool, inputAsset);\r\n        uint _actualInputVether = _handleTransferIn(VETHER, _allowedVether);\r\n        units = _stake(_actualInputVether, _actualInputAsset, pool, member);\r\n        return units;\r\n    }\r\n\r\n    function _createNewPool(address _pool) internal {\r\n        arrayPools.push(_pool);\r\n        poolData[_pool].listed = true;\r\n        poolData[_pool].genesis = now;\r\n    }\r\n\r\n    function _stake(uint _vether, uint _asset, address _pool, address _member) internal returns (uint _units) {\r\n        uint _V = poolData[_pool].vether.add(_vether);\r\n        uint _A = poolData[_pool].asset.add(_asset);\r\n        _units = math.calcStakeUnits(_asset, _A, _vether, _V);   \r\n        _incrementPoolBalances(_units, _vether, _asset, _pool);                                                  \r\n        _addDataForMember(_member, _units, _vether, _asset, _pool);\r\n        emit Staked(_pool, _member, _asset, _vether, _units);\r\n        return _units;\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Unstaking functions\r\n\r\n    // Unstake % for self\r\n    function unstake(uint basisPoints, address pool) public returns (bool success) {\r\n        require((basisPoints > 0 && basisPoints <= 10000), \"Must be valid BasisPoints\");\r\n        uint _units = math.calcPart(basisPoints, memberData[msg.sender].stakeData[pool].stakeUnits);\r\n        unstakeExact(_units, pool);\r\n        return true;\r\n    }\r\n\r\n    // Unstake an exact qty of units\r\n    function unstakeExact(uint units, address pool) public returns (bool success) {\r\n        require(units <= memberData[msg.sender].stakeData[pool].stakeUnits, \"Must own the units\");\r\n        uint _outputVether = math.calcShare(units, poolData[pool].poolUnits, poolData[pool].vether);\r\n        uint _outputAsset = math.calcShare(units, poolData[pool].poolUnits, poolData[pool].asset);\r\n        _handleUnstake(units, _outputVether, _outputAsset, msg.sender, pool);\r\n        return true;\r\n    }\r\n\r\n    // Unstake % Asymmetrically\r\n    function unstakeAsymmetric(uint basisPoints, address pool, bool toVether) public returns (uint outputAmount){\r\n        uint _units = math.calcPart(basisPoints, memberData[msg.sender].stakeData[pool].stakeUnits);\r\n        outputAmount = unstakeExactAsymmetric(_units, pool, toVether);\r\n        return outputAmount;\r\n    }\r\n    // Unstake Exact Asymmetrically\r\n    function unstakeExactAsymmetric(uint units, address pool, bool toVether) public returns (uint outputAmount){\r\n        require(units <= memberData[msg.sender].stakeData[pool].stakeUnits, \"Must own the units\");\r\n        uint _poolUnits = poolData[pool].poolUnits;\r\n        require(units < _poolUnits, \"Must not be last staker\");\r\n        uint _outputVether; uint _outputAsset; \r\n        if(toVether){\r\n            _outputVether = math.calcAsymmetricShare(units, _poolUnits, poolData[pool].vether);\r\n            _outputAsset = 0;\r\n            outputAmount = _outputVether;\r\n        } else {\r\n            _outputVether = 0;\r\n            _outputAsset = math.calcAsymmetricShare(units, _poolUnits, poolData[pool].asset);\r\n            outputAmount = _outputAsset;\r\n        }\r\n        _handleUnstake(units, _outputVether, _outputAsset, msg.sender, pool);\r\n        return outputAmount;\r\n    }\r\n\r\n    // Internal - handle Unstake\r\n    function _handleUnstake(uint _units, uint _outputVether, uint _outputAsset, address payable _member, address _pool) internal {\r\n        _decrementPoolBalances(_units, _outputVether, _outputAsset, _pool);\r\n        _removeDataForMember(_member, _units, _pool);\r\n        emit Unstaked(_pool, _member, _outputAsset, _outputVether, _units);\r\n        _handleTransferOut(_pool, _outputAsset, _member);\r\n        _handleTransferOut(VETHER, _outputVether, _member);\r\n    } \r\n\r\n    //==================================================================================//\r\n    // Upgrade functions\r\n\r\n    // Upgrade from this contract to a new one - opt in\r\n    function upgrade(address payable newContract, address pool) public {\r\n        uint _units = memberData[msg.sender].stakeData[pool].stakeUnits;\r\n        uint _outputVether = math.calcShare(_units, poolData[pool].poolUnits, poolData[pool].vether);\r\n        uint _outputAsset = math.calcShare(_units, poolData[pool].poolUnits, poolData[pool].asset);\r\n        _decrementPoolBalances(_units, _outputVether, _outputAsset, pool);\r\n        _removeDataForMember(msg.sender, _units, pool);\r\n        emit Unstaked(pool, msg.sender, _outputAsset, _outputVether, _units);\r\n        ERC20(VETHER).approve(newContract, _outputVether);\r\n        if(pool == address(0)){\r\n            POOLS(newContract).stakeForMember{value:_outputAsset}(_outputVether, _outputAsset, pool, msg.sender);\r\n        } else {\r\n            ERC20(pool).approve(newContract, _outputAsset);\r\n            POOLS(newContract).stakeForMember(_outputVether, _outputAsset, pool, msg.sender);\r\n        }\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Swapping functions\r\n\r\n    function swap(uint inputAmount, address withAsset, address toAsset) public payable returns (uint outputAmount, uint fee) {\r\n        require(now < poolData[address(0)].genesis + DAYCAP, \"Must not be after Day Cap\");\r\n        require(withAsset != toAsset, \"Asset must not be the same\");\r\n        uint _actualAmount = _handleTransferIn(withAsset, inputAmount); uint _transferAmount;\r\n        if(withAsset == VETHER){\r\n            (outputAmount, fee) = _swapVetherToAsset(_actualAmount, toAsset);\r\n            emit Swapped(VETHER, toAsset, _actualAmount, 0, outputAmount, fee, msg.sender);\r\n        } else if(toAsset == VETHER) {\r\n            (outputAmount, fee) = _swapAssetToVether(_actualAmount, withAsset);\r\n            emit Swapped(withAsset, VETHER, _actualAmount, 0, outputAmount, fee, msg.sender);\r\n        } else {\r\n            (_transferAmount, outputAmount, fee) = _swapAssetToAsset(_actualAmount, withAsset, toAsset);\r\n            emit Swapped(withAsset, toAsset, _actualAmount, _transferAmount, outputAmount, fee, msg.sender);\r\n        }\r\n        _handleTransferOut(toAsset, outputAmount, msg.sender);\r\n        return (outputAmount, fee);\r\n    }\r\n\r\n    function _swapVetherToAsset(uint _x, address _pool) internal returns (uint _y, uint _fee){\r\n        uint _X = poolData[_pool].vether;\r\n        uint _Y = poolData[_pool].asset;\r\n        _y =  math.calcSwapOutput(_x, _X, _Y);\r\n        _fee = math.calcSwapFee(_x, _X, _Y);\r\n        poolData[_pool].vether = poolData[_pool].vether.add(_x);\r\n        poolData[_pool].asset = poolData[_pool].asset.sub(_y);\r\n        _updatePoolMetrics(_y+_fee, _fee, _pool, false);\r\n        return (_y, _fee);\r\n    }\r\n\r\n    function _swapAssetToVether(uint _x, address _pool) internal returns (uint _y, uint _fee){\r\n        uint _X = poolData[_pool].asset;\r\n        uint _Y = poolData[_pool].vether;\r\n        _y =  math.calcSwapOutput(_x, _X, _Y);\r\n        _fee = math.calcSwapFee(_x, _X, _Y);\r\n        poolData[_pool].asset = poolData[_pool].asset.add(_x);\r\n        poolData[_pool].vether = poolData[_pool].vether.sub(_y);\r\n        _updatePoolMetrics(_y+_fee, _fee, _pool, true);\r\n        return (_y, _fee);\r\n    }\r\n\r\n    function _swapAssetToAsset(uint _x, address _pool1, address _pool2) internal returns (uint _y, uint _z, uint _fee){\r\n        (uint _yy, uint _feey) = _swapAssetToVether(_x, _pool1);\r\n        (uint _zz, uint _feez) = _swapVetherToAsset(_yy, _pool2);\r\n        _fee = _feez + calcValueInAsset(_feey, _pool2);\r\n        return (_yy, _zz, _fee);\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Data Model\r\n\r\n    function _incrementPoolBalances(uint _units, uint _vether, uint _asset, address _pool) internal {\r\n        poolData[_pool].poolUnits = poolData[_pool].poolUnits.add(_units);\r\n        poolData[_pool].vether = poolData[_pool].vether.add(_vether);\r\n        poolData[_pool].asset = poolData[_pool].asset.add(_asset); \r\n        poolData[_pool].vetherStaked = poolData[_pool].vetherStaked.add(_vether);\r\n        poolData[_pool].assetStaked = poolData[_pool].assetStaked.add(_asset); \r\n    }\r\n\r\n    function _decrementPoolBalances(uint _units, uint _vether, uint _asset, address _pool) internal {\r\n        uint _unstakedVether = math.calcShare(_vether, poolData[_pool].vether, poolData[_pool].vetherStaked);\r\n        uint _unstakedAsset = math.calcShare(_asset, poolData[_pool].asset, poolData[_pool].assetStaked);\r\n        poolData[_pool].vetherStaked = poolData[_pool].vetherStaked.sub(_unstakedVether);\r\n        poolData[_pool].assetStaked = poolData[_pool].assetStaked.sub(_unstakedAsset); \r\n        poolData[_pool].poolUnits = poolData[_pool].poolUnits.sub(_units);\r\n        poolData[_pool].vether = poolData[_pool].vether.sub(_vether);\r\n        poolData[_pool].asset = poolData[_pool].asset.sub(_asset); \r\n    }\r\n\r\n    function _addDataForMember(address _member, uint _units, uint _vether, uint _asset, address _pool) internal {\r\n        if(isMember(_member)){\r\n            arrayMembers.push(_member);\r\n        }\r\n        if( memberData[_member].stakeData[_pool].stakeUnits == 0){\r\n            memberData[_member].arrayPools.push(_pool);\r\n            poolData[_pool].arrayStakers.push(_member);\r\n        }\r\n        memberData[_member].stakeData[_pool].stakeUnits = memberData[_member].stakeData[_pool].stakeUnits.add(_units);\r\n        memberData[_member].stakeData[_pool].vether = memberData[_member].stakeData[_pool].vether.add(_vether);\r\n        memberData[_member].stakeData[_pool].asset = memberData[_member].stakeData[_pool].asset.add(_asset);\r\n    }\r\n\r\n    function _removeDataForMember(address _member, uint _units, address _pool) internal{\r\n        uint stakeUnits = memberData[_member].stakeData[_pool].stakeUnits;\r\n        uint _vether = math.calcShare(_units, stakeUnits, memberData[_member].stakeData[_pool].vether);\r\n        uint _asset = math.calcShare(_units, stakeUnits, memberData[_member].stakeData[_pool].asset);\r\n        memberData[_member].stakeData[_pool].stakeUnits = memberData[_member].stakeData[_pool].stakeUnits.sub(_units);\r\n        memberData[_member].stakeData[_pool].vether = memberData[_member].stakeData[_pool].vether.sub(_vether);\r\n        memberData[_member].stakeData[_pool].asset = memberData[_member].stakeData[_pool].asset.sub(_asset);\r\n    }\r\n\r\n    function _updatePoolMetrics(uint _tx, uint _fee, address _pool, bool _toVether) internal {\r\n        poolData[_pool].txCount += 1;\r\n        uint _volume = poolData[_pool].volume;\r\n        uint _fees = poolData[_pool].fees;\r\n        if(_toVether){\r\n            poolData[_pool].volume = _tx.add(_volume); \r\n            poolData[_pool].fees = _fee.add(_fees); \r\n        } else {\r\n            uint _txVether = calcValueInVether(_tx, _pool);\r\n            uint _feeVether = calcValueInVether(_fee, _pool);\r\n            poolData[_pool].volume = _volume.add(_txVether); \r\n            poolData[_pool].fees = _fees.add(_feeVether); \r\n        }\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Asset Transfer Functions\r\n\r\n    function _handleTransferIn(address _asset, uint _amount) internal returns(uint actual){\r\n        if(_amount > 0) {\r\n            if(_asset == address(0)){\r\n                require((_amount == msg.value), \"Must get Eth\");\r\n                actual = _amount;\r\n            } else {\r\n                uint startBal = ERC20(_asset).balanceOf(address(this)); \r\n                ERC20(_asset).transferFrom(msg.sender, address(this), _amount); \r\n                actual = ERC20(_asset).balanceOf(address(this)).sub(startBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _handleTransferOut(address _asset, uint _amount, address payable _recipient) internal {\r\n        if(_amount > 0) {\r\n            if (_asset == address(0)) {\r\n                _recipient.call{value:_amount}(\"\"); \r\n            } else {\r\n                ERC20(_asset).transfer(_recipient, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sync(address pool) public {\r\n        if (pool == address(0)) {\r\n            poolData[pool].asset = address(this).balance;\r\n        } else {\r\n            poolData[pool].asset = ERC20(pool).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    //==================================================================================//\r\n    // Helper functions\r\n\r\n    function getStakerUnits(address member, address pool) public view returns(uint stakerUnits){\r\n        return (memberData[member].stakeData[pool].stakeUnits);\r\n    }\r\n    function getStakerShareVether(address member, address pool) public view returns(uint vether){\r\n        uint _units = memberData[member].stakeData[pool].stakeUnits;\r\n        vether = math.calcShare(_units, poolData[pool].poolUnits, poolData[pool].vether);\r\n        return vether;\r\n    }\r\n    function getStakerShareAsset(address member, address pool) public view returns(uint asset){\r\n        uint _units = memberData[member].stakeData[pool].stakeUnits;\r\n        asset = math.calcShare(_units, poolData[pool].poolUnits, poolData[pool].asset);\r\n        return asset;\r\n    }\r\n\r\n    function getPoolStaker(address pool, uint index) public view returns(address staker){\r\n        return(poolData[pool].arrayStakers[index]);\r\n    }\r\n\r\n    function getMemberPool(address member, uint index) public view returns(address staker){\r\n        return(memberData[member].arrayPools[index]);\r\n    }\r\n    function poolCount() public view returns(uint){\r\n        return arrayPools.length;\r\n    }\r\n    function memberCount() public view returns(uint){\r\n        return arrayMembers.length;\r\n    }\r\n    function getMemberPoolCount(address member) public view returns(uint){\r\n        return(memberData[member].arrayPools.length);\r\n    }\r\n    function getPoolStakerCount(address pool) public view returns(uint){\r\n        return(poolData[pool].arrayStakers.length);\r\n    }\r\n\r\n    function getMemberStakeData(address member, address pool) public view returns(StakeData memory){\r\n        return(memberData[member].stakeData[pool]);\r\n    }\r\n\r\n    function isMember(address member) public view returns(bool){\r\n        if (memberData[member].arrayPools.length > 0){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getPoolAge(address pool) public view returns (uint daysSinceGenesis){\r\n        if(now < (poolData[pool].genesis).add(86400)){\r\n            return 1;\r\n        } else {\r\n            return (now.sub(poolData[pool].genesis)).div(86400);\r\n        }\r\n    }\r\n\r\n    function getPoolROI(address pool) public view returns (uint roi){\r\n        uint _vetherStart = poolData[pool].vetherStaked.mul(2);\r\n        uint _vetherEnd = poolData[pool].vether.mul(2);\r\n        uint _ROIV = (_vetherEnd.mul(10000)).div(_vetherStart);\r\n        uint _assetStart = poolData[pool].assetStaked.mul(2);\r\n        uint _assetEnd = poolData[pool].asset.mul(2);\r\n        uint _ROIA = (_assetEnd.mul(10000)).div(_assetStart);\r\n        return (_ROIV + _ROIA).div(2);\r\n   }\r\n\r\n   function getPoolAPY(address pool) public view returns (uint apy){\r\n        uint avgROI = getPoolROI(pool);\r\n        uint poolAge = getPoolAge(pool);\r\n        return (avgROI.mul(365)).div(poolAge);\r\n   }\r\n\r\n    function getMemberROI(address member, address pool) public view returns (uint roi){\r\n        uint _vetherStart = memberData[member].stakeData[pool].vether.mul(2);\r\n        if(isMember(member)){\r\n            uint _vetherEnd = getStakerShareVether(member, pool).mul(2);\r\n            uint _ROIV = 0; uint _ROIA = 0;\r\n            if(_vetherStart > 0){\r\n                _ROIV = (_vetherEnd.mul(10000)).div(_vetherStart);\r\n            }\r\n            uint _assetStart = memberData[member].stakeData[pool].asset.mul(2);\r\n            uint _assetEnd = getStakerShareAsset(member, pool).mul(2);\r\n            if(_assetStart > 0){\r\n                _ROIA = (_assetEnd.mul(10000)).div(_assetStart);\r\n            }\r\n            return (_ROIV + _ROIA).div(2);\r\n        } else {\r\n            return 0;\r\n        }\r\n        \r\n   }\r\n\r\n   function calcValueInVether(uint a, address pool) public view returns (uint value){\r\n       uint _asset = poolData[pool].asset;\r\n       uint _vether = poolData[pool].vether;\r\n       return (a.mul(_vether)).div(_asset);\r\n   }\r\n\r\n    function calcValueInAsset(uint v, address pool) public view returns (uint value){\r\n       uint _asset = poolData[pool].asset;\r\n       uint _vether = poolData[pool].vether;\r\n       return (v.mul(_asset)).div(_vether);\r\n   }\r\n\r\n   function calcAssetPPinVether(uint amount, address pool) public view returns (uint _output){\r\n        uint _asset = poolData[pool].asset;\r\n        uint _vether = poolData[pool].vether;\r\n        return  math.calcSwapOutput(amount, _asset, _vether);\r\n   }\r\n\r\n    function calcVetherPPinAsset(uint amount, address pool) public view returns (uint _output){\r\n        uint _asset = poolData[pool].asset;\r\n        uint _vether = poolData[pool].vether;\r\n        return  math.calcSwapOutput(amount, _vether, _asset);\r\n   }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputVether\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitsIssued\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputVether\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitsClaimed\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VETHCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VETHER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"calcAssetPPinVether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"calcValueInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"calcValueInVether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"calcVetherPPinAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemberPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getMemberPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMemberROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMemberStakeData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnits\",\"type\":\"uint256\"}],\"internalType\":\"struct VetherPools2.StakeData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysSinceGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStakerShareAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStakerShareVether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vether\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStakerUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"math\",\"outputs\":[{\"internalType\":\"contract MATH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vetherStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"stakeForMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toVether\",\"type\":\"bool\"}],\"name\":\"unstakeAsymmetric\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unstakeExact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toVether\",\"type\":\"bool\"}],\"name\":\"unstakeExactAsymmetric\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VetherPools2","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://edbfc9cbc9298997443b4c89ece5d66e5e2008354490c2b94f835f5992d6973f"}]}