{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\ncontract ImitationGame {\r\n    \r\n    uint entropy;\r\n    function getRandomNumber() internal returns (uint){\r\n        entropy = uint(keccak256(abi.encodePacked(now, msg.sender, blockhash(block.number - 1), entropy)));\r\n        return entropy;\r\n    }\r\n    \r\n    uint public maxValue = 2**256-1;\r\n    \r\n    uint public schedule;\r\n    uint public period = 28 days;\r\n    uint public hour;\r\n    \r\n    struct Reg {\r\n        bool rank;\r\n        uint id;\r\n        bool[] signatures;\r\n        bool verified;\r\n    }\r\n    \r\n    mapping (uint => mapping (address => Reg)) public registry;\r\n    mapping (uint => address[]) public shuffler;\r\n    mapping (uint => mapping (uint => bool[2])) public completed;\r\n    mapping (uint => mapping (uint => bool)) public disputed;\r\n\r\n    mapping (uint => uint) public population;\r\n    mapping (uint => mapping (address => uint)) public proofOfPersonhood;\r\n    mapping (uint => mapping (uint => address)) public personhoodIndex;\r\n    \r\n    mapping (uint => mapping (address => uint)) public immigrationToken;\r\n    mapping (uint => mapping (address => mapping (address => uint))) public delegatedImmigrationToken;\r\n    mapping (uint => mapping (address => uint)) public registrationToken;\r\n    mapping (uint => mapping (address => mapping (address => uint))) public delegatedRegistrationToken;\r\n    mapping (uint => mapping (address => uint)) public verificationToken;\r\n    mapping (uint => mapping (address => mapping (address => uint))) public delegatedVerificationToken;\r\n\r\n    function pseudonymEvent() public view returns (uint) { return schedule + period + hour * 3600; }\r\n    modifier scheduler() {\r\n        if(block.timestamp > pseudonymEvent()) {\r\n            schedule += period;\r\n            hour = getRandomNumber()%24;\r\n        }\r\n        _;\r\n    }\r\n    function getSchedule() public scheduler returns (uint) { return schedule; }    \r\n\r\n    function register() public scheduler {\r\n        require(registry[schedule][msg.sender].id == 0 && registrationToken[schedule][msg.sender] >= 1);\r\n        registrationToken[schedule][msg.sender]--;\r\n        uint id = 1;\r\n        if(shuffler[schedule].length != 0) {\r\n            id += getRandomNumber() % shuffler[schedule].length;\r\n            shuffler[schedule].push(shuffler[schedule][id-1]);\r\n            registry[schedule][shuffler[schedule][id-1]].id = shuffler[schedule].length;\r\n        }\r\n        else shuffler[schedule].push();\r\n\r\n        shuffler[schedule][id-1] = msg.sender;\r\n        registry[schedule][msg.sender] = Reg(true, id, new bool[](1), false);\r\n\r\n        immigrationToken[schedule+period][msg.sender]++;\r\n    }\r\n    function immigrate() public scheduler {\r\n        require(registry[schedule][msg.sender].id == 0 && immigrationToken[schedule][msg.sender] >= 1);\r\n        immigrationToken[schedule][msg.sender]--;\r\n        registry[schedule][msg.sender] = Reg(false, 1 + getRandomNumber()%maxValue, new bool[](2), false);\r\n        immigrationToken[schedule][shuffler[schedule-period][getRandomNumber()%shuffler[schedule-period].length]]++;\r\n    }\r\n    function transferRegistrationKey(address _to) public scheduler {\r\n        require(registry[schedule][msg.sender].id != 0 && registry[schedule][_to].id == 0);\r\n        if(registry[schedule][msg.sender].rank == true) shuffler[schedule][registry[schedule][msg.sender].id-1] = _to;\r\n        registry[schedule][_to] = registry[schedule][msg.sender];\r\n        delete registry[schedule][msg.sender];\r\n    }\r\n    function pairVerified(uint _pair) public view returns (bool) {\r\n        return (completed[schedule-period][_pair][0] == true && completed[schedule-period][_pair][1] == true);\r\n    }\r\n    function dispute() public scheduler {\r\n        require(registry[schedule-period][msg.sender].rank == true);\r\n        uint pair = (1 + registry[schedule-period][msg.sender].id)/2;\r\n        require(!pairVerified(pair));\r\n        disputed[schedule-period][pair] = true;\r\n    }\r\n    function getPair(address _account) public view returns (uint) {\r\n        if(registry[schedule-period][_account].rank == true) return (1 + registry[schedule-period][_account].id)/2;\r\n        return 1 + registry[schedule-period][msg.sender].id%(shuffler[schedule-period].length/2);\r\n    }    \r\n    function reassign() public scheduler {\r\n        require(disputed[schedule-period][getPair(msg.sender)] == true);\r\n        delete registry[schedule-period][msg.sender];\r\n        registry[schedule-period][msg.sender] = Reg(false, 1 + getRandomNumber()%maxValue, new bool[](2), false);\r\n    }\r\n    function lockProofOfPersonhood() public scheduler {\r\n        require(verificationToken[schedule][msg.sender] >= 1);\r\n        require(proofOfPersonhood[schedule][msg.sender] == 0);\r\n        verificationToken[schedule][msg.sender]--;\r\n        population[schedule]++;\r\n        proofOfPersonhood[schedule][msg.sender] = population[schedule];\r\n        personhoodIndex[schedule][population[schedule]] = msg.sender;\r\n    }\r\n    function transferPersonhoodKey(address _to) public scheduler {\r\n        require(proofOfPersonhood[schedule][_to] == 0 && _to != msg.sender);\r\n        proofOfPersonhood[schedule][_to] = proofOfPersonhood[schedule][msg.sender];\r\n        personhoodIndex[schedule][proofOfPersonhood[schedule][msg.sender]] = _to;\r\n        delete proofOfPersonhood[schedule][msg.sender];\r\n    }\r\n    function collectPersonhood() public scheduler {\r\n        require(registry[schedule-period][msg.sender].verified = false);\r\n        require(pairVerified(getPair(msg.sender)) == true);\r\n        if(registry[schedule-period][msg.sender].rank == false) {\r\n            require(registry[schedule-period][msg.sender].signatures[0] == true && registry[schedule-period][msg.sender].signatures[1] == true);\r\n        }\r\n        registrationToken[schedule][msg.sender]++;\r\n        verificationToken[schedule][msg.sender]++;\r\n        registry[schedule-period][msg.sender].verified = true;\r\n    }\r\n    function verify(address _account, address _signer) internal {\r\n        require(_account != _signer && registry[schedule-period][_signer].rank == true);\r\n        uint pair = getPair(_account);\r\n        require(disputed[schedule-period][pair] == false && pair == getPair(_signer));\r\n        uint peer = registry[schedule-period][_signer].id%2;\r\n        if(registry[schedule-period][_account].rank == true) {\r\n            registry[schedule-period][_account].signatures[0] = true;\r\n            completed[schedule-period][pair][peer] = true;\r\n        }\r\n        else registry[schedule-period][_account].signatures[peer] = true;\r\n    }\r\n    function verifyAccount(address _account) public scheduler {\r\n\t    verify(_account, msg.sender);\r\n    }\r\n    function uploadSignature(address _account, bytes memory _signature) public scheduler {\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(_signature,0x20))\r\n            s := mload(add(_signature,0x40))\r\n            v := and(mload(add(_signature, 0x41)), 0xFF)\r\n        }\r\n        if (v < 27) v += 27;\r\n\r\n        bytes32 msgHash = keccak256(abi.encodePacked(_account, schedule-period));\r\n\r\n        verify(_account, ecrecover(msgHash, v, r, s));\r\n    }\r\n    function transferImmigrationToken(address _to, uint _value) public scheduler { \r\n        require(immigrationToken[schedule][msg.sender] >= _value);\r\n        immigrationToken[schedule][msg.sender] -= _value;\r\n        immigrationToken[schedule][_to] += _value;        \r\n    }\r\n    function transferRegistrationToken(address _to, uint _value) public scheduler { \r\n        require(registrationToken[schedule][msg.sender] >= _value);\r\n        registrationToken[schedule][msg.sender] -= _value;\r\n        registrationToken[schedule][_to] += _value;        \r\n    }\r\n    function transferVerificationToken(address _to, uint _value) public scheduler { \r\n        require(verificationToken[schedule][msg.sender] >= _value);\r\n        verificationToken[schedule][msg.sender] -= _value;\r\n        verificationToken[schedule][_to] += _value;        \r\n    }\r\n    function delegateImmigrationToken(address _spender, uint _value) public scheduler {\r\n        delegatedImmigrationToken[schedule][msg.sender][_spender] = _value;\r\n    }\r\n    function delegateRegistrationToken(address _spender, uint _value) public scheduler {\r\n        delegatedRegistrationToken[schedule][msg.sender][_spender] = _value;\r\n    }\r\n    function delegateVerificationToken(address _spender, uint _value) public scheduler {\r\n        delegatedVerificationToken[schedule][msg.sender][_spender] = _value;\r\n    }\r\n    function collectImmigrationToken(address _from, address _to, uint _value) public scheduler {\r\n        require(delegatedImmigrationToken[schedule][_from][msg.sender] >= _value);\r\n        require(immigrationToken[schedule][_from] >= _value);\r\n        immigrationToken[schedule][_from] -= _value;\r\n        immigrationToken[schedule][_to] += _value;    \r\n        delegatedImmigrationToken[schedule][_from][msg.sender] -= _value;\r\n    }\r\n    function collectRegistrationToken(address _from, address _to, uint _value) public scheduler {\r\n        require(delegatedRegistrationToken[schedule][_from][msg.sender] >= _value);\r\n        require(registrationToken[schedule][_from] >= _value);\r\n        registrationToken[schedule][_from] -= _value;\r\n        registrationToken[schedule][_to] += _value;    \r\n        delegatedRegistrationToken[schedule][_from][msg.sender] -= _value;\r\n    }\r\n    function collectVerificationToken(address _from, address _to, uint _value) public scheduler {\r\n        require(delegatedVerificationToken[schedule][_from][msg.sender] >= _value);\r\n        require(verificationToken[schedule][_from] >= _value);\r\n        verificationToken[schedule][_from] -= _value;\r\n        verificationToken[schedule][_to] += _value;    \r\n        delegatedVerificationToken[schedule][_from][msg.sender] -= _value;\r\n    }\r\n    function initiateNetwork() public scheduler {\r\n        require(shuffler[schedule-period].length < 2);\r\n        schedule = 198000 + ((block.timestamp - 198000)/ 7 days) * 7 days - 21 days;\r\n        registrationToken[schedule][msg.sender] = maxValue;\r\n        shuffler[schedule-period] = new address[](2);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"collectImmigrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPersonhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"collectRegistrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"collectVerificationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegateImmigrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegateRegistrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegateVerificationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedImmigrationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedRegistrationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedVerificationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"immigrationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockProofOfPersonhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pair\",\"type\":\"uint256\"}],\"name\":\"pairVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personhoodIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proofOfPersonhood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pseudonymEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reassign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rank\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shuffler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferImmigrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferPersonhoodKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferRegistrationKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRegistrationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferVerificationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"uploadSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"verifyAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ImitationGame","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f7cdbe14fc721083845802e6b97c3034ca293e1821ce4d649253b7565e21a4f"}]}