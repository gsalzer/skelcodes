{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/DexRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./base/Owned.sol\\\";\\nimport \\\"./IDexRegistry.sol\\\";\\n\\n/**\\n * @title DexRegistry\\n * @notice Simple registry containing whitelisted DEX adapters to be used with the TokenExchanger.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ncontract DexRegistry is IDexRegistry, Owned {\\n\\n    // Whitelisted DEX adapters\\n    mapping(address => bool) public isAuthorised;\\n\\n    event DexAdded(address indexed _dex);\\n    event DexRemoved(address indexed _dex);\\n\\n\\n    /**\\n     * @notice Add/Remove a DEX adapter to/from the whitelist.\\n     * @param _dexes array of DEX adapters to add to (or remove from) the whitelist\\n     * @param _authorised array where each entry is true to add the corresponding DEX to the whitelist, false to remove it\\n     */\\n    function setAuthorised(address[] calldata _dexes, bool[] calldata _authorised) external onlyOwner {\\n        for(uint256 i = 0; i < _dexes.length; i++) {\\n            if(isAuthorised[_dexes[i]] != _authorised[i]) {\\n                isAuthorised[_dexes[i]] = _authorised[i];\\n                if(_authorised[i]) { \\n                    emit DexAdded(_dexes[i]); \\n                } else { \\n                    emit DexRemoved(_dexes[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function verifyExchangeAdapters(IAugustusSwapper.Path[] calldata _path) external override view {\\n        for (uint i = 0; i < _path.length; i++) {\\n            for (uint j = 0; j < _path[i].routes.length; j++) {\\n                require(isAuthorised[_path[i].routes[j].exchange], \\\"DR: Unauthorised DEX\\\");\\n            }\\n        }\\n    }\\n\\n    function verifyExchangeAdapters(IAugustusSwapper.BuyRoute[] calldata _routes) external override view {\\n        for (uint j = 0; j < _routes.length; j++) {\\n            require(isAuthorised[_routes[j].exchange], \\\"DR: Unauthorised DEX\\\");\\n        }\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/IDexRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/paraswap/IAugustusSwapper.sol\\\";\\n\\n/**\\n * @title IDexRegistry\\n * @notice Interface for DexRegistry.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ninterface IDexRegistry {\\n    function verifyExchangeAdapters(IAugustusSwapper.Path[] calldata _path) external view;\\n    function verifyExchangeAdapters(IAugustusSwapper.BuyRoute[] calldata _routes) external view;\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/base/Owned.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * @title Owned\\n * @notice Basic contract to define an owner.\\n * @author Julien Niset - <julien@argent.xyz>\\n */\\ncontract Owned {\\n\\n    // The owner\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _newOwner);\\n\\n    /**\\n     * @notice Throws if the sender is not the owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Must be owner\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Lets the owner transfer ownership of the contract to a new owner.\\n     * @param _newOwner The new owner.\\n     */\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Address must not be null\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(_newOwner);\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/lib/paraswap/IAugustusSwapper.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.4 <0.7.0;\\n\\ninterface IAugustusSwapper {\\n    function getTokenTransferProxy() external view returns (address);\\n\\n    struct Route {\\n        address payable exchange;\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee; // only used for 0xV3\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; // only used for 0xV3\\n        Route[] routes;\\n    }\\n\\n    struct BuyRoute {\\n        address payable exchange;\\n        address targetExchange;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        bytes payload;\\n        uint256 networkFee; // only used for 0xV3\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"DexAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"DexRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexes\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_authorised\",\"type\":\"bool[]\"}],\"name\":\"setAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IAugustusSwapper.BuyRoute[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"verifyExchangeAdapters\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IAugustusSwapper.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IAugustusSwapper.Path[]\",\"name\":\"_path\",\"type\":\"tuple[]\"}],\"name\":\"verifyExchangeAdapters\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DexRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}