{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n     // function totalSupply() public view returns (uint256);\r\n      function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n      function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n      function approve(address spender, uint256 tokens) public returns (bool success);\r\n      function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n      function decimals() public view returns(uint256);\r\n      function intTransfer(address _from, address _to, uint256 _amount) external returns(bool); // only for shuttleone token\r\n      function deposit(address _from,uint256 amount) public returns (bool);\r\n      function withdrawInternal(uint256 _amount,address _to) public returns(bool); // only for USDC\r\n }\r\n\r\ncontract Permissions {\r\n\r\n  mapping (address=>bool) public permits;\r\n  bool allPermit;\r\n\r\n// all events will be saved as log files\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n\r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    allPermit = false;\r\n  }\r\n\r\n  \r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n\r\n  function addPermit(address _addr) public onlyPermits{\r\n    require(permits[_addr] == false);\r\n    permits[_addr] = true;\r\n    emit AddPermit(_addr);\r\n  }\r\n\r\n\r\n\r\n  function removePermit(address _addr) public onlyPermits{\r\n    require(_addr != msg.sender);\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n  \r\n\r\n\r\n}\r\n\r\ncontract ProfitCal{\r\n    function getInterest(address _contract,address _addr) public view returns(uint256);\r\n    function getWithdrawInterest(address _contract,address _addr) public view returns(uint256);\r\n}\r\n\r\n// contract RewardPools{\r\n//     function getReward(address _contract,address _wallet,uint256 _amount,uint256 _depositTime) public view returns(uint256);\r\n//     function claimReward(address _contract,address _wallet,uint256 _amount,uint256 _depositTime) public  returns(uint256); // 0 not claim;\r\n// }\r\n\r\n\r\ncontract SpacePodsUSDC is Permissions{\r\n  \r\n    event Deposit(address indexed _from,uint256 amount);\r\n    event Withdraw(address indexed _from,uint256 amount);\r\n    event WithdrawInterest(address indexed _from,uint256 amount);\r\n    event Borrow(address indexed _from,uint256 amount,uint256 interest);\r\n    event SetInterest(uint256 _interest);\r\n    event Repayment(address indexed,uint256 indexed contractID,uint256 amount);\r\n\r\n    struct BorrowContract{\r\n        uint256 amount;\r\n        uint256 repayAmount;\r\n        uint256 interestPay;\r\n        uint256 interest;\r\n        uint256 time;\r\n        uint256 status;  // 1 active 0 close\r\n        uint256 startTime;\r\n    }\r\n\r\n    struct DepositContract{\r\n        uint256 amount;\r\n        uint256 lastDeposit;\r\n        uint256 term;   // Add on V8\r\n        \r\n    }\r\n    \r\n    struct InterestStruct{\r\n        uint256 startTime;\r\n        uint256 interest;\r\n    }\r\n\r\n    mapping (address => uint256) public balance;\r\n   \r\n\r\n    BorrowContract[] borrows;\r\n    DepositContract[] deposits;\r\n    InterestStruct[] public interests;\r\n\r\n    mapping (address=>uint256[]) contracts;\r\n    mapping (address=>uint256[]) depositIdxs; // all index\r\n    mapping (address=>bool) stopAdminControl; // default false;\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public borrowInterest;\r\n    uint256 public totalInterest;\r\n    uint256 public totalClaimInterest;\r\n    // uint256 public supplyInterest;\r\n    uint256 public totalSupply;\r\n    uint256 public totalBorrow;\r\n    uint256 public decimal = 18;\r\n    string public TOKEN_POOLS = \"szUSDC\";\r\n    uint256 public startPools;\r\n    uint256 public POOL_HARDCAP;\r\n\r\n    ERC20  public token;\r\n    ERC20  public catToken;\r\n    ProfitCal public profitCal; // profit calculaate class;\r\n    \r\n  //  RewardPools public reward;\r\n\r\n\r\n    uint256 oneYear = 365 days;\r\n    uint256 hundred = 100 ether;\r\n\r\n    uint256 public version = 10;\r\n    uint256 public minimumTerm; // minimumDeposit Time;  \r\n\r\n// support only wrap token and 18 decimal only\r\n    constructor() public{\r\n        \r\n        token = ERC20(0x55b123B169400Da201Dd69814BAe2B8C2660c2Bf); // szUSDC\r\n        catToken = ERC20(0x2D916e99E53b31Ae968991472b15b90e1355E7B9); // CAT MAIN NET\r\n\r\n        startPools = now;\r\n        profitCal = ProfitCal(0x1Ef037764BED4c1f8598e57e142FA166eE32d8ad);  \r\n\r\n        minimumTerm = 30 days;\r\n        POOL_HARDCAP = 1000000 ether;\r\n        setBorrowInterest(10 ether);\r\n    }\r\n    \r\n    function setSZToken(address _addr) public onlyPermits{\r\n        token = ERC20(_addr);\r\n    }\r\n    \r\n    function setPoolHardcap(uint256 amount) public onlyPermits{\r\n      require(amount > totalSupply,\"CAN'T SET BELOW TOTALSUPPLY\");\r\n      POOL_HARDCAP = amount;\r\n    }\r\n    function getMaxInterestData() public view returns(uint256){\r\n         return interests.length;    \r\n    }\r\n    \r\n    // incase of some one directy transfer dai to this contract\r\n    // normmaly this contract not recieve dai\r\n    function withdrawStupidUser(uint256 amount,address _contract,address _to) public onlyPermits{\r\n      require(_contract != address(token),\"Can't Withdraw SZUSDC\"); \r\n      ERC20  stupid = ERC20(_contract);\r\n      stupid.transfer(_to,amount);\r\n    }\r\n  \r\n    function setMinimumDeposit(uint256 _min) public onlyPermits{\r\n      minimumTerm = _min;\r\n    }\r\n  \r\n  \r\n    function setProfitCal(address _addr) public onlyPermits{\r\n      profitCal = ProfitCal(_addr);\r\n    }\r\n\r\n    function loanBalance() public view returns(uint256){\r\n        if(totalBorrow > totalSupply) \r\n            return 0;\r\n        else\r\n        return totalSupply - totalBorrow;\r\n    }\r\n\r\n    function setCatToken(address _addr) public onlyPermits{\r\n        catToken = ERC20(_addr);\r\n    }\r\n\r\n    function setBorrowInterest(uint256 _newInterst) public onlyPermits{\r\n     \r\n        InterestStruct memory _interest = InterestStruct({\r\n                        startTime:now,\r\n                        interest: _newInterst\r\n                        });\r\n     \r\n        interests.push(_interest);\r\n      \r\n        emit SetInterest(_newInterst);\r\n        borrowInterest = _newInterst;\r\n    }\r\n\r\n    function getInterestProfit(address _addr) public view returns(uint256){\r\n        return profitCal.getInterest(address(this),_addr);\r\n    }\r\n  \r\n    function setAdminControl(bool _set) public{\r\n         stopAdminControl[msg.sender] = _set;\r\n    }\r\n  \r\n    function _depositContract(address _from,uint256 amount,uint256 _term) internal{\r\n        require(amount <= POOL_HARDCAP - totalSupply,\"THIS POOL NOT ALLOW TO DEPOSIT THIS TIME\");\r\n        balance[_from] += amount;\r\n        emit Deposit(_from,amount);\r\n        totalSupply += amount;\r\n\r\n        uint256 idxSize = depositIdxs[_from].length;\r\n        uint256 idx;\r\n    \r\n        if(idxSize == 0){\r\n            DepositContract memory dep = DepositContract({\r\n                amount:amount,\r\n                lastDeposit:now,\r\n                term:_term\r\n            });\r\n            idx = deposits.push(dep);\r\n            depositIdxs[_from].push(idx);\r\n        }\r\n        else\r\n        {\r\n            for(uint256 i=0;i<idxSize;i++)\r\n            {\r\n                idx = depositIdxs[_from][i] - 1;\r\n                if(deposits[idx].amount == 0){\r\n                    deposits[idx].amount = amount;\r\n                    deposits[idx].lastDeposit = now;\r\n                    return;\r\n                \r\n                }\r\n            }\r\n        \r\n            // Not found add new again\r\n            DepositContract memory dep = DepositContract({\r\n                amount:amount,\r\n                lastDeposit:now,\r\n                term:_term\r\n            });\r\n            idx = deposits.push(dep);\r\n            depositIdxs[_from].push(idx);\r\n     \r\n        }\r\n    }\r\n\r\n\r\n    function depositToken(address _from,uint256 amount) public returns (bool){\r\n        return depositTokenTerm(_from,amount,minimumTerm);\r\n    }\r\n\r\n    // use can direct deposit USDC and it will auto swap to szUSDC\r\n    function depositTokenTerm(address _from,uint256 amount,uint256 _term) public returns (bool){\r\n        require(msg.sender == _from || \r\n        (permits[msg.sender] == true && stopAdminControl[_from] == false));\r\n        require(_term >= minimumTerm);\r\n      \r\n        // check amount should not have decimal\r\n        uint256 havDecimal;\r\n        havDecimal = amount % (10 ** 6);\r\n        if(havDecimal > 0){\r\n              return false;\r\n        }\r\n      \r\n        if(token.deposit(_from,amount) == false)\r\n            return false;\r\n      \r\n        if(token.intTransfer(_from,address(this),amount * (10 ** 12)) == true){\r\n                _depositContract(_from,amount * (10 ** 12),_term);\r\n                return true;\r\n            }\r\n        \r\n        return false;\r\n    } \r\n  \r\n    function depositSZToken(address _from,uint256 amount) public returns (bool){\r\n        return depositSZTokenTerm(_from,amount,minimumTerm);\r\n    }\r\n    // use can direct deposit szUSDC\r\n    function depositSZTokenTerm(address _from,uint256 amount,uint256 _term) public returns (bool){\r\n      require(msg.sender == _from || \r\n      (permits[msg.sender] == true && stopAdminControl[_from] == false));\r\n      require(_term >= minimumTerm);\r\n      // check amount should not have decimal\r\n      uint256 havDecimal;\r\n      havDecimal = amount % (10 ** decimal);\r\n      if(havDecimal > 0){\r\n            \r\n          return false;\r\n      }\r\n            \r\n       if(token.intTransfer(_from,address(this),amount) == true){\r\n            _depositContract(_from,amount,_term);\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } \r\n\r\n    // When witdraw interest will reset to 0\r\n    function _withdraw(address _to,uint256 _amount) internal returns(uint256){\r\n        if(_amount == 0) return 0;\r\n      \r\n        uint256 interest =  profitCal.getWithdrawInterest(address(this),_to);\r\n        uint256 idxSize = depositIdxs[_to].length;\r\n        uint256 idx;\r\n        uint256 principle;\r\n        uint256 tempPrinciple;\r\n      \r\n        for(uint256 i=0;i<idxSize;i++){\r\n            idx = depositIdxs[_to][i] - 1;\r\n            if(deposits[idx].amount > 0)\r\n                deposits[idx].lastDeposit = now;\r\n        }\r\n    \r\n        totalClaimInterest += interest;\r\n \r\n        if(interest > _amount){\r\n            require(interest <= loanBalance(),\"ERROR01 Insuffician Fund to withdraw\");\r\n            token.transfer(_to,interest);\r\n            token.transfer(_to,0);\r\n            totalSupply -= interest;\r\n            return interest;\r\n        }\r\n        else\r\n        {\r\n        \r\n            principle = _amount - interest;\r\n            if(principle > balance[_to])\r\n                principle = balance[_to];\r\n        \r\n            require(principle + interest <=loanBalance(),\"ERROR02 Insuffician Fund to withdraw\");\r\n            tempPrinciple = principle;\r\n        \r\n            for(uint256 i=0;i<idxSize;i++){\r\n                idx = depositIdxs[_to][i] - 1;\r\n            if(tempPrinciple >0)\r\n            {\r\n                if(tempPrinciple >= deposits[idx].amount){\r\n                    tempPrinciple -=deposits[idx].amount;\r\n                    deposits[idx].amount = 0;\r\n                }\r\n                else\r\n                {\r\n                    deposits[idx].amount -= tempPrinciple;\r\n                    tempPrinciple = 0;\r\n                }\r\n            }\r\n            }\r\n                totalSupply -= principle + interest;\r\n                balance[_to] -= principle;\r\n                token.transfer(_to,interest);\r\n                token.transfer(_to,principle);\r\n                 return interest + principle;\r\n        }\r\n    }\r\n  \r\n    function withdrawPercent(address _to,uint256 percent) public returns(uint256){\r\n       require(msg.sender == _to || \r\n       (permits[msg.sender] == true && stopAdminControl[_to] == false),\"No Permission to call\");\r\n      \r\n       require(percent >0 && percent <= 100,\"Percent Error\");\r\n       \r\n       uint256 amount = balance[_to];\r\n       uint256 interest =  profitCal.getInterest(address(this),_to);\r\n       \r\n       amount += interest;\r\n       amount = amount * percent / 100;\r\n       require(loanBalance() >= amount,\"Not enouth FUND to withdraw\");\r\n       \r\n       return _withdraw(_to,amount);\r\n       \r\n    }\r\n\r\n    function withdraw(address _to,uint256 amount) public returns(uint256){\r\n       require(msg.sender == _to || \r\n       (permits[msg.sender] == true && stopAdminControl[_to] == false),\"No Permission to call\");\r\n      \r\n       require(loanBalance() >= amount,\"Not enouth FUND to withdraw\");\r\n\r\n       return _withdraw(_to,amount);\r\n    }\r\n\r\n\r\n// this function will withdraw all interest only\r\n  function withdrawInterest(address _to) public returns(uint256){\r\n      require(msg.sender == _to || \r\n      (permits[msg.sender] == true && stopAdminControl[_to] == false),\"No Permission to call\");\r\n      require(depositIdxs[_to].length > 0,\"Not deposit\");\r\n\r\n      \r\n      uint256 amount =  profitCal.getWithdrawInterest(address(this),_to);\r\n      uint256 idxSize = depositIdxs[_to].length;\r\n      uint256 idx;\r\n      \r\n      if(amount == 0) return 0;\r\n      \r\n      for(uint256 i=0;i<idxSize;i++){\r\n          idx = depositIdxs[_to][i] - 1;\r\n          if(deposits[idx].amount > 0)\r\n              deposits[idx].lastDeposit = now;\r\n      }\r\n \r\n      totalClaimInterest += amount;\r\n      token.transfer(_to,amount);\r\n      return amount;\r\n \r\n  }\r\n  \r\n  function withdrawAll(address _to) public returns(uint256){\r\n      require(msg.sender == _to || \r\n      (permits[msg.sender] == true && stopAdminControl[_to] == false),\"No Permission to call\");\r\n      \r\n      require(depositIdxs[_to].length > 0,\"Not deposit\");\r\n\r\n      uint256 interest =  profitCal.getWithdrawInterest(address(this),_to);\r\n      require(balance[_to] + interest <= loanBalance());\r\n    //  require(totalClaimInterest + interest >= totalInterest);\r\n\r\n      return _withdraw(_to,balance[_to] + interest);\r\n  }\r\n  \r\n  function withdrawStable(address _to,uint256 amount) public returns(bool){\r\n       require(msg.sender == _to || \r\n       (permits[msg.sender] == true && stopAdminControl[_to] == false),\"NO Permission to call\");\r\n      \r\n       uint256 szGot = withdraw(_to,amount);\r\n       if(szGot > 0){\r\n         token.withdrawInternal(szGot,msg.sender);\r\n         return true;\r\n       }\r\n       return false;\r\n  }\r\n\r\n  function withdrawIntStable(address _to) public returns(bool){\r\n      require(msg.sender == _to || \r\n       (permits[msg.sender] == true && stopAdminControl[_to] == false));\r\n      \r\n      uint256 szGot = withdrawInterest(_to);\r\n      if(szGot > 0){\r\n        token.withdrawInternal(szGot,_to);\r\n        return true;\r\n      }\r\n      return false;\r\n      \r\n  }\r\n\r\n  function withdrawAllStable(address _to) public returns(bool){\r\n      require(msg.sender == _to || \r\n      (permits[msg.sender] == true && stopAdminControl[_to] == false),\"NO Permission to call\");\r\n      uint256 szGot =  withdrawAll(_to);\r\n    \r\n      if(szGot > 0){\r\n         token.withdrawInternal(szGot,_to);\r\n         return true;\r\n      }\r\n \r\n      return false;\r\n    }\r\n   function withdrawPercentStable(address _to,uint256 percent) public returns(bool){\r\n       require(msg.sender == _to || \r\n       (permits[msg.sender] == true && stopAdminControl[_to] == false),\"NO Permission to call\");\r\n      \r\n       uint256 szGot = withdrawPercent(_to,percent);\r\n      \r\n        if(szGot > 0){\r\n           token.withdrawInternal(szGot,_to);\r\n           return true;\r\n        }\r\n \r\n        return false;\r\n       \r\n   }\r\n\r\n//============ All About contract ==============\r\n  function maxContracBorrow() public view returns(uint256){\r\n    return contracts[msg.sender].length;\r\n  }\r\n\r\n  function getContractBorrow() public view returns(uint256[] memory cons){\r\n    uint256 leng = contracts[msg.sender].length;\r\n    cons = new uint256[](leng);\r\n    cons = contracts[msg.sender];\r\n    \r\n  }\r\n  \r\n  function getMaxDeposit() public view returns(uint256){\r\n      return deposits.length;\r\n  }\r\n  \r\n  function getDepositDataIdx(uint256 idx) public view returns(uint256[] memory _data){\r\n      require(idx >=0 && idx < deposits.length);\r\n      \r\n      _data = new uint256[](3);\r\n      _data[0] = deposits[idx].amount;\r\n      _data[1] = deposits[idx].lastDeposit;\r\n      _data[2] = deposits[idx].term;\r\n  }\r\n  \r\n  function getMaxDepositContract(address _addr) public view returns(uint256 _max){\r\n      return depositIdxs[_addr].length;\r\n  }\r\n  \r\n  function getAllDepositIdx(address _addr) public view returns(uint256[] memory _idx){\r\n\r\n        return depositIdxs[_addr];      \r\n      \r\n  }\r\n  \r\n  \r\n  \r\n  function getMaxBorrowContract() public view returns(uint256){\r\n      return borrows.length;\r\n  }\r\n\r\n  function getBorrowData(uint256 condIdx) public view returns(uint256[] memory _data){\r\n      require(condIdx <= borrows.length && condIdx > 0,\"Error not have this idx\");\r\n      uint256 idx = condIdx - 1;\r\n      _data = new uint256[](7);\r\n\r\n      _data[0] = borrows[idx].amount;\r\n      _data[1] = borrows[idx].interest;\r\n      _data[2] = borrows[idx].repayAmount;\r\n      _data[3] = borrows[idx].interestPay;\r\n      _data[4] = borrows[idx].time;\r\n      _data[5] = borrows[idx].status;\r\n      _data[6] = borrows[idx].startTime;\r\n\r\n  }\r\n\r\n  uint256 public SECPYEAR = 31536000;\r\n\r\n  \r\n    function _interest(uint256 _amount,uint256 _intPY,uint256 _time) internal view returns(uint256 fullInt){\r\n      \r\n\r\n      fullInt = _intPY / SECPYEAR / 100;\r\n      fullInt = (fullInt * _time); //fullInt.mul(_amount,decimal);\r\n      fullInt = fullInt.mul(_amount,decimal);\r\n\r\n  }\r\n  \r\n\r\n\r\n  function pricipleAndInterest(uint256 conIdx) public view returns(uint256 principle,uint256 _int){\r\n      require(conIdx <= borrows.length && conIdx > 0,\"Error not have this idx\");\r\n  \r\n      uint256 idx = conIdx - 1;\r\n\r\n      if(borrows[idx].status == 0)\r\n      {\r\n         return (0,0);\r\n      }\r\n\r\n      if(borrows[idx].repayAmount > borrows[idx].amount)\r\n        principle = 0;\r\n      else\r\n        principle = borrows[idx].amount - borrows[idx].repayAmount; \r\n\r\n      uint256 fullInt = _interest(principle,borrows[idx].interest,now - borrows[idx].time); //_intPerSec(borrows[idx].interest) * (now - borrows[idx].time); \r\n\r\n//      fullInt = fullInt.mul(borrows[idx].amount,decimal);\r\n\r\n      if(borrows[idx].interestPay > fullInt)\r\n         _int = 0;\r\n      else\r\n         _int  = fullInt - borrows[idx].interestPay;\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n  function supplyInterest() public view returns(uint256){\r\n      uint256 supInt;\r\n      uint256 totalSupplyNoDecimal = totalSupply / (10 ** decimal);\r\n      \r\n      if(totalSupplyNoDecimal == 0)\r\n          return 0;\r\n      else\r\n      {\r\n          supInt =  (totalInterest * 100) / totalSupplyNoDecimal;\r\n      \r\n        //supInt =  totalInterest.div(totalSupply,decimal);\r\n        //supInt = supInt.mul(hundred,decimal);\r\n         return supInt;\r\n      }\r\n  }\r\n\r\n\r\n// amount in CATToken only\r\n  function _borrow(uint256 amount,address _addr) internal returns(uint256 contractID){\r\n      amount  = (amount / (10 ** 18)) * (10 ** 18);\r\n      require(amount <= catToken.balanceOf(_addr),\"not enought CAT Token\");\r\n      uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);\r\n      require(amountStable <= totalSupply - totalBorrow,\"Not have fund to borrw\");\r\n\r\n      BorrowContract memory br = BorrowContract({\r\n          amount : amountStable,\r\n          interest: borrowInterest,\r\n          repayAmount:0,\r\n          interestPay:0,\r\n          time:now,\r\n          status:1,\r\n          startTime:now\r\n        });\r\n\r\n      uint256 idx = borrows.push(br);\r\n      contracts[_addr].push(idx);\r\n      catToken.intTransfer(_addr,address(this),amount);\r\n      token.transfer(_addr,amountStable);\r\n      totalBorrow += amountStable;\r\n\r\n      emit Borrow(_addr,amountStable,borrowInterest);\r\n      \r\n      return idx;\r\n  }\r\n\r\n  function borrow(uint256 amount) public returns(uint256 contractID){\r\n    return _borrow(amount,msg.sender);\r\n\r\n  }\r\n\r\n  function borrowWithAddr(uint256 amount,address _addr)public onlyPermits returns(uint256 contractID){\r\n    return _borrow(amount,_addr);\r\n  }\r\n  \r\n  function _getSupplyPercent(uint256 amount) internal view returns(uint256){\r\n      uint256 totalSupplyNoDecimal = totalSupply / (10 ** decimal);\r\n      uint256 percent = amount / totalSupplyNoDecimal;\r\n      \r\n      return percent;\r\n  }\r\n\r\n\r\n  //rePayment address want to approve first for DAI token\r\n  // Then will got CAT back\r\n\r\n  function _rePayment(uint256 amount,uint256 conIdx,address _addr,bool wrap) internal returns(bool){\r\n        require(conIdx > 0 && conIdx <= borrows.length);\r\n        uint256 idx = conIdx - 1;\r\n        require(borrows[idx].status == 1);\r\n\r\n        uint256 principle;\r\n        uint256 interest;\r\n        uint256 catReturn;\r\n        (principle,interest) = pricipleAndInterest(conIdx);\r\n\r\n\r\n        if(amount >= principle + interest){\r\n            amount = principle + interest; \r\n            if(wrap == true)\r\n              token.intTransfer(_addr,address(this),amount);\r\n            else\r\n              token.transferFrom(_addr,address(this),amount);\r\n\r\n            emit Repayment(_addr,conIdx,amount);\r\n\r\n            borrows[idx].interestPay += interest;\r\n            borrows[idx].repayAmount += principle;\r\n            totalInterest += interest;  \r\n            totalBorrow -= principle;\r\n            // if(decimal < 18)\r\n            //   catReturn = principle * (10 ** (18 - decimal));\r\n            // else\r\n               catReturn = principle;\r\n\r\n\r\n            catToken.transfer(_addr,catReturn);\r\n          //  _shareInterest(interest);\r\n            borrows[idx].time = now;\r\n            return true;\r\n        }\r\n        else{\r\n       //    if(wrap == true)\r\n            token.intTransfer(_addr,address(this),amount);\r\n    //       else\r\n     //       token.transferFrom(_addr,address(this),amount);\r\n           emit Repayment(_addr,conIdx,amount);\r\n\r\n           if(amount > interest){\r\n              principle = amount - interest;\r\n              borrows[idx].interestPay += interest;\r\n              borrows[idx].repayAmount += principle;\r\n              totalInterest += interest;\r\n              totalBorrow -= principle;\r\n              if(decimal < 18)\r\n                catReturn = principle * (10 ** (18 - decimal));\r\n              else\r\n                catReturn = principle;\r\n\r\n\r\n              catToken.transfer(_addr,catReturn);\r\n         //     _shareInterest(interest);\r\n               borrows[idx].time = now;\r\n              return true;\r\n           }\r\n           else\r\n           {\r\n              borrows[idx].interestPay += amount;\r\n              totalInterest += amount;\r\n          //    _shareInterest(amount);\r\n               borrows[idx].time = now;\r\n              return true;\r\n           }\r\n        }\r\n     \r\n  }\r\n \r\n  function rePaymentWithWrap(uint256 amount,uint256 conIdx,address _addr) public onlyPermits returns(bool){\r\n      return _rePayment(amount,conIdx,_addr,true);\r\n  }\r\n\r\n  function rePayment(uint256 amount,uint256 conIdx) public returns(bool){\r\n      return _rePayment(amount,conIdx,msg.sender,false);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"SetInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawInterest\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOL_HARDCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECPYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_POOLS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"borrowWithAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositSZToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"depositSZTokenTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"depositTokenTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAllDepositIdx\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_idx\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"condIdx\",\"type\":\"uint256\"}],\"name\":\"getBorrowData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBorrow\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cons\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDepositDataIdx\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInterestProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBorrowContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMaxDepositContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxInterestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContracBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"}],\"name\":\"pricipleAndInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_int\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitCal\",\"outputs\":[{\"internalType\":\"contract ProfitCal\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"}],\"name\":\"rePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"rePaymentWithWrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setAdminControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterst\",\"type\":\"uint256\"}],\"name\":\"setBorrowInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCatToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setProfitCal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSZToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawIntStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"withdrawPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"withdrawPercentStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawStupidUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpacePodsUSDC","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2575cc067a35195760f4c0fe22b76890d8462e56762979cacb41775dbfc15ef3"}]}