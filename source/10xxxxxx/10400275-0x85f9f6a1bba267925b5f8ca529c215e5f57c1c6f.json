{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IAllocationStrategy.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n/**\r\n * @notice Allocation strategy for assets.\r\n *         - It invests the underlying assets into some yield generating contracts,\r\n *           usually lending contracts, in return it gets new assets aka. saving assets.\r\n *         - Savings assets can be redeemed back to the underlying assets plus interest any time.\r\n */\r\ninterface IAllocationStrategy {\r\n    /**\r\n     * @notice Set withdrawal address for tokens sent to contract\r\n     * @param account The account that can withdraw tokens\r\n     */\r\n    function setWithdrawAddress(address account) external;\r\n\r\n    /**\r\n     * @notice Underlying asset for the strategy\r\n     * @return address Underlying asset address\r\n     */\r\n    function underlying() external view returns (address);\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from underlying to saving assets\r\n     * @return uint256 Calculated exchange rate scaled by 1e18\r\n     *\r\n     * NOTE:\r\n     *\r\n     *   underlying = savingAssets Ã— exchangeRate\r\n     */\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    /**\r\n      * @notice Applies accrued interest to all savings\r\n      * @dev This should calculates interest accrued from the last checkpointed\r\n      *      block up to the current block and writes new checkpoint to storage.\r\n      * @return bool success(true) or failure(false)\r\n      */\r\n    function accrueInterest() external returns (bool);\r\n\r\n    /**\r\n     * @notice Sender supplies underlying assets into the market and receives saving assets in exchange\r\n     * @dev Interst shall be accrued\r\n     * @param investAmount The amount of the underlying asset to supply\r\n     * @return uint256 Amount of saving assets created\r\n     */\r\n    function investUnderlying(uint256 investAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sender redeems saving assets in exchange for a specified amount of underlying asset\r\n     * @dev Interst shall be accrued\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint256 Amount of saving assets burned\r\n     */\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Owner redeems all saving assets\r\n     * @dev Interst shall be accrued\r\n     * @return uint256 savingsAmount Amount of savings redeemed\r\n     * @return uint256 underlyingAmount Amount of underlying redeemed\r\n     */\r\n    function redeemAll() external returns (uint256 savingsAmount, uint256 underlyingAmount);\r\n\r\n    /**\r\n     * @notice Owner redeems reward tokens sent to this contract.\r\n     * @dev Implementation should block the transfer of the investment assets such as the underlying asset or cTokens\r\n     * @param erc20 The address of the ERC20 token\r\n     * @return uint256 Amount of tokens held by this contract\r\n     */\r\n    function redeemArbitraryTokens(IERC20 erc20) external returns (uint256);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: compound/contracts/CErc20Interface.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n// converted from ethereum/contracts/compound/abi/CErc20.json\r\ninterface CErc20Interface {\r\n\r\n    function name() external view returns (\r\n        string memory\r\n    );\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function repayBorrow(\r\n        uint256 repayAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function reserveFactorMantissa() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function borrowBalanceCurrent(\r\n        address account\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalSupply() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function exchangeRateStored() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function repayBorrowBehalf(\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function pendingAdmin() external view returns (\r\n        address\r\n    );\r\n\r\n    function decimals() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function balanceOfUnderlying(\r\n        address owner\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function getCash() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _setComptroller(\r\n        address newComptroller\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalBorrows() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function comptroller() external view returns (\r\n        address\r\n    );\r\n\r\n    function _reduceReserves(\r\n        uint256 reduceAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function initialExchangeRateMantissa() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function accrualBlockNumber() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function underlying() external view returns (\r\n        address\r\n    );\r\n\r\n    function balanceOf(\r\n        address owner\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function totalBorrowsCurrent() external returns (\r\n        uint256\r\n    );\r\n\r\n    function redeemUnderlying(\r\n        uint256 redeemAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function totalReserves() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function symbol() external view returns (\r\n        string memory\r\n    );\r\n\r\n    function borrowBalanceStored(\r\n        address account\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function mint(\r\n        uint256 mintAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function accrueInterest() external returns (\r\n        uint256\r\n    );\r\n\r\n    function transfer(\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (\r\n        bool\r\n    );\r\n\r\n    function borrowIndex() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function supplyRatePerBlock() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function _setPendingAdmin(\r\n        address newPendingAdmin\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function exchangeRateCurrent() external returns (\r\n        uint256\r\n    );\r\n\r\n    function getAccountSnapshot(\r\n        address account\r\n    ) external view returns (\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    );\r\n\r\n    function borrow(\r\n        uint256 borrowAmount\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function redeem(\r\n        uint256 redeemTokens\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _acceptAdmin() external returns (\r\n        uint256\r\n    );\r\n\r\n    function _setInterestRateModel(\r\n        address newInterestRateModel\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function interestRateModel() external view returns (\r\n        address\r\n    );\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function admin() external view returns (\r\n        address\r\n    );\r\n\r\n    function borrowRatePerBlock() external view returns (\r\n        uint256\r\n    );\r\n\r\n    function _setReserveFactor(\r\n        uint256 newReserveFactorMantissa\r\n    ) external returns (\r\n        uint256\r\n    );\r\n\r\n    function isCToken() external view returns (\r\n        bool\r\n    );\r\n\r\n    /*\r\n    constructor(\r\n        address underlying_,\r\n        address comptroller_,\r\n        address interestRateModel_,\r\n        uint256 initialExchangeRateMantissa_,\r\n        string  calldata name_,\r\n        string  calldata symbol_,\r\n        uint256 decimals_\r\n    );\r\n    */\r\n\r\n    event AccrueInterest(\r\n        uint256 interestAccumulated,\r\n        uint256 borrowIndex,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event Mint(\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n\r\n    event Redeem(\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    );\r\n\r\n    event Borrow(\r\n        address borrower,\r\n        uint256 borrowAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral,\r\n        uint256 seizeTokens\r\n    );\r\n\r\n    event NewPendingAdmin(\r\n        address oldPendingAdmin,\r\n        address newPendingAdmin\r\n    );\r\n\r\n    event NewAdmin(\r\n        address oldAdmin,\r\n        address newAdmin\r\n    );\r\n\r\n    event NewComptroller(\r\n        address oldComptroller,\r\n        address newComptroller\r\n    );\r\n\r\n    event NewMarketInterestRateModel(\r\n        address oldInterestRateModel,\r\n        address newInterestRateModel\r\n    );\r\n\r\n    event NewReserveFactor(\r\n        uint256 oldReserveFactorMantissa,\r\n        uint256 newReserveFactorMantissa\r\n    );\r\n\r\n    event ReservesReduced(\r\n        address admin,\r\n        uint256 reduceAmount,\r\n        uint256 newTotalReserves\r\n    );\r\n\r\n    event Failure(\r\n        uint256 error,\r\n        uint256 info,\r\n        uint256 detail\r\n    );\r\n\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    );\r\n\r\n    event Approval(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/CompoundAllocationStrategy.sol\r\n\r\npragma solidity >=0.5.10 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract CompoundAllocationStrategy is IAllocationStrategy, Ownable {\r\n\r\n    CErc20Interface private cToken;\r\n    IERC20 private token;\r\n\r\n    address public withdrawAddress;\r\n\r\n    constructor(CErc20Interface cToken_) public {\r\n        cToken = cToken_;\r\n        token = IERC20(cToken.underlying());\r\n    }\r\n\r\n    function setWithdrawAddress(address account) external onlyOwner {\r\n      require(account != address(0));\r\n      withdrawAddress = account;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.underlying implementation\r\n    function underlying() external view returns (address) {\r\n        return cToken.underlying();\r\n    }\r\n\r\n    /// @dev ISavingStrategy.exchangeRateStored implementation\r\n    function exchangeRateStored() external view returns (uint256) {\r\n        return cToken.exchangeRateStored();\r\n    }\r\n\r\n    /// @dev ISavingStrategy.accrueInterest implementation\r\n    function accrueInterest() external returns (bool) {\r\n        return cToken.accrueInterest() == 0;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.investUnderlying implementation\r\n    function investUnderlying(uint256 investAmount) external onlyOwner returns (uint256) {\r\n        token.transferFrom(msg.sender, address(this), investAmount);\r\n        token.approve(address(cToken), investAmount);\r\n        uint256 cTotalBefore = cToken.totalSupply();\r\n        // TODO should we handle mint failure?\r\n        require(cToken.mint(investAmount) == 0, \"mint failed\");\r\n        uint256 cTotalAfter = cToken.totalSupply();\r\n        uint256 cCreatedAmount;\r\n        require (cTotalAfter >= cTotalBefore, \"Compound minted negative amount!?\");\r\n        cCreatedAmount = cTotalAfter - cTotalBefore;\r\n        return cCreatedAmount;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.redeemUnderlying implementation\r\n    function redeemUnderlying(uint256 redeemAmount) external onlyOwner returns (uint256) {\r\n        uint256 cTotalBefore = cToken.totalSupply();\r\n        // TODO should we handle redeem failure?\r\n        require(cToken.redeemUnderlying(redeemAmount) == 0, \"cToken.redeemUnderlying failed\");\r\n        uint256 cTotalAfter = cToken.totalSupply();\r\n        uint256 cBurnedAmount;\r\n        require(cTotalAfter <= cTotalBefore, \"Compound redeemed negative amount!?\");\r\n        cBurnedAmount = cTotalBefore - cTotalAfter;\r\n        token.transfer(msg.sender, redeemAmount);\r\n        return cBurnedAmount;\r\n    }\r\n\r\n    /// @dev ISavingStrategy.redeemAll implementation\r\n    function redeemAll() external onlyOwner\r\n        returns (uint256 savingsAmount, uint256 underlyingAmount) {\r\n        savingsAmount = cToken.balanceOf(address(this));\r\n        require(cToken.redeem(savingsAmount) == 0, \"cToken.redeem failed\");\r\n        underlyingAmount = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, underlyingAmount);\r\n    }\r\n\r\n    function redeemArbitraryTokens(IERC20 erc20) external\r\n      returns (uint256 tokenAmount) {\r\n      require(msg.sender == withdrawAddress, \"msg.sender not withdrawAddress\");\r\n      require(address(erc20) != address(token), \"cannot redeem underlying token\");\r\n      require(address(erc20) != address(cToken), \"cannot redeem cToken\");\r\n      tokenAmount = erc20.balanceOf(address(this));\r\n      require(tokenAmount > 0, \"zero balance\");\r\n      erc20.transfer(msg.sender, tokenAmount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract CErc20Interface\",\"name\":\"cToken_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"name\":\"investUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"savingsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"redeemArbitraryTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundAllocationStrategy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8dbb381578a3281debf63a48cfbe1cde912b224dc67c4342ffe2582a25f7596a"}]}