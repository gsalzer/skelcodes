{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice This contract adds liquidity to Curve stablecoin and BTC liquidity pools in one transaction with ETH or ERC tokens.\r\n\r\n// File: Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: OpenZepplinOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: OpenZepplinSafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: OpenZepplinIERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: OpenZepplinReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IUniswapRouter02 {\r\n    //get estimated amountOut\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    //token 2 token\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    //eth 2 token\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    //token 2 eth\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ICurveExchange {\r\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\r\n        external;\r\n}\r\n\r\ninterface IrenBtcCurveExchange {\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\r\n        external;\r\n}\r\n\r\ninterface IsBtcCurveExchange {\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\r\n        external;\r\n}\r\n\r\ninterface yERC20 {\r\n    function deposit(uint256 _amount) external;\r\n}\r\n\r\ninterface IBalancer {\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        address tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ncontract Curve_ZapIn_General_V1_6 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    bool public stopped = false;\r\n    uint16 public goodwill;\r\n    address public zgoodwillAddress = 0xE737b6AfEC2320f616297e59445b60a11e3eF75F;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapV2Factory\r\n        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address private constant DaiTokenAddress = address(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n    address private constant UsdcTokenAddress = address(\r\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    );\r\n    address private constant sUSDCurveExchangeAddress = address(\r\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\r\n    );\r\n    address private constant sUSDCurvePoolTokenAddress = address(\r\n        0xC25a3A3b969415c80451098fa907EC722572917F\r\n    );\r\n    address private constant yCurveExchangeAddress = address(\r\n        0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3\r\n    );\r\n    address private constant yCurvePoolTokenAddress = address(\r\n        0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8\r\n    );\r\n    address private constant bUSDCurveExchangeAddress = address(\r\n        0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB\r\n    );\r\n    address private constant bUSDCurvePoolTokenAddress = address(\r\n        0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B\r\n    );\r\n    address private constant paxCurveExchangeAddress = address(\r\n        0xA50cCc70b6a011CffDdf45057E39679379187287\r\n    );\r\n    address private constant paxCurvePoolTokenAddress = address(\r\n        0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8\r\n    );\r\n    address private constant renBtcCurveExchangeAddress = address(\r\n        0x93054188d876f558f4a66B2EF1d97d16eDf0895B\r\n    );\r\n    address private constant renBtcCurvePoolTokenAddress = address(\r\n        0x49849C98ae39Fff122806C06791Fa73784FB3675\r\n    );\r\n    address private constant sBtcCurveExchangeAddress = address(\r\n        0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714\r\n    );\r\n    address private constant sBtcCurvePoolTokenAddress = address(\r\n        0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3\r\n    );\r\n\r\n    IBalancer private BalWBTCPool = IBalancer(\r\n        0x1efF8aF5D577060BA4ac8A29A13525bb0Ee2A3D5\r\n    );\r\n\r\n    address private constant wethTokenAddress = address(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    address private constant wbtcTokenAddress = address(\r\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\r\n    );\r\n    address private constant renBtcTokenAddress = address(\r\n        0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\r\n    );\r\n    address private constant sBtcTokenAddress = address(\r\n        0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6\r\n    );\r\n\r\n    uint256\r\n        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    mapping(address => address) internal exchange2Token;\r\n\r\n    constructor(uint16 _goodwill) public {\r\n        goodwill = _goodwill;\r\n        exchange2Token[sUSDCurveExchangeAddress] = sUSDCurvePoolTokenAddress;\r\n        exchange2Token[yCurveExchangeAddress] = yCurvePoolTokenAddress;\r\n        exchange2Token[bUSDCurveExchangeAddress] = bUSDCurvePoolTokenAddress;\r\n        exchange2Token[paxCurveExchangeAddress] = paxCurvePoolTokenAddress;\r\n        exchange2Token[renBtcCurveExchangeAddress] = renBtcCurvePoolTokenAddress;\r\n        exchange2Token[sBtcCurveExchangeAddress] = sBtcCurvePoolTokenAddress;\r\n\r\n        approveToken();\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function approveToken() public {\r\n        IERC20(DaiTokenAddress).safeApprove(sUSDCurveExchangeAddress, uint256(-1));\r\n        IERC20(DaiTokenAddress).safeApprove(yCurveExchangeAddress, uint256(-1));\r\n        IERC20(DaiTokenAddress).safeApprove(bUSDCurveExchangeAddress, uint256(-1));\r\n        IERC20(DaiTokenAddress).safeApprove(paxCurveExchangeAddress, uint256(-1));\r\n\r\n        IERC20(UsdcTokenAddress).safeApprove(sUSDCurveExchangeAddress, uint256(-1));\r\n        IERC20(UsdcTokenAddress).safeApprove(yCurveExchangeAddress, uint256(-1));\r\n        IERC20(UsdcTokenAddress).safeApprove(bUSDCurveExchangeAddress, uint256(-1));\r\n        IERC20(UsdcTokenAddress).safeApprove(paxCurveExchangeAddress, uint256(-1));\r\n    }\r\n\r\n    function ZapIn(\r\n        address _toWhomToIssue,\r\n        address _IncomingTokenAddress,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _IncomingTokenQty,\r\n        uint256 _minPoolTokens\r\n    ) public payable stopInEmergency returns (uint256 crvTokensBought) {\r\n        require(\r\n            _curvePoolExchangeAddress == sUSDCurveExchangeAddress ||\r\n                _curvePoolExchangeAddress == yCurveExchangeAddress ||\r\n                _curvePoolExchangeAddress == bUSDCurveExchangeAddress ||\r\n                _curvePoolExchangeAddress == paxCurveExchangeAddress ||\r\n                _curvePoolExchangeAddress == renBtcCurveExchangeAddress ||\r\n                _curvePoolExchangeAddress == sBtcCurveExchangeAddress,\r\n            \"Invalid Curve Pool Address\"\r\n        );\r\n\r\n        if (_IncomingTokenAddress == address(0)) {\r\n            crvTokensBought = ZapInWithETH(\r\n                _toWhomToIssue,\r\n                _curvePoolExchangeAddress,\r\n                _minPoolTokens\r\n            );\r\n        } else {\r\n            crvTokensBought = ZapInWithERC20(\r\n                _toWhomToIssue,\r\n                _IncomingTokenAddress,\r\n                _curvePoolExchangeAddress,\r\n                _IncomingTokenQty,\r\n                _minPoolTokens\r\n            );\r\n        }\r\n    }\r\n\r\n    function ZapInWithETH(\r\n        address _toWhomToIssue,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _minPoolTokens\r\n    ) internal stopInEmergency returns (uint256 crvTokensBought) {\r\n        require(msg.value > 0, \"Err: No ETH sent\");\r\n\r\n        if (\r\n            _curvePoolExchangeAddress != sBtcCurveExchangeAddress &&\r\n            _curvePoolExchangeAddress != renBtcCurveExchangeAddress\r\n        ) {\r\n            uint256 daiBought = _eth2Token(DaiTokenAddress, (msg.value).div(2));\r\n            uint256 usdcBought = _eth2Token(\r\n                UsdcTokenAddress,\r\n                (msg.value).div(2)\r\n            );\r\n            crvTokensBought = _enter2Curve(\r\n                _toWhomToIssue,\r\n                daiBought,\r\n                usdcBought,\r\n                _curvePoolExchangeAddress,\r\n                _minPoolTokens\r\n            );\r\n        } else {\r\n            uint256 wbtcBought = _eth2WBTC(msg.value, false);\r\n            crvTokensBought = _enter2BtcCurve(\r\n                _toWhomToIssue,\r\n                wbtcTokenAddress,\r\n                _curvePoolExchangeAddress,\r\n                wbtcBought,\r\n                _minPoolTokens\r\n            );\r\n        }\r\n    }\r\n\r\n    function ZapInWithERC20(\r\n        address _toWhomToIssue,\r\n        address _IncomingTokenAddress,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _IncomingTokenQty,\r\n        uint256 _minPoolTokens\r\n    ) internal stopInEmergency returns (uint256 crvTokensBought) {\r\n        require(_IncomingTokenQty > 0, \"Err: No ERC20 sent\");\r\n\r\n            IERC20(_IncomingTokenAddress).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _IncomingTokenQty\r\n            );\r\n        \r\n        if (\r\n            _curvePoolExchangeAddress == sBtcCurveExchangeAddress ||\r\n            _curvePoolExchangeAddress == renBtcCurveExchangeAddress\r\n        ) {\r\n            if (\r\n                _IncomingTokenAddress == wbtcTokenAddress ||\r\n                _IncomingTokenAddress == renBtcTokenAddress ||\r\n                _IncomingTokenAddress == sBtcTokenAddress\r\n            ) {\r\n                crvTokensBought = _enter2BtcCurve(\r\n                    _toWhomToIssue,\r\n                    _IncomingTokenAddress,\r\n                    _curvePoolExchangeAddress,\r\n                    _IncomingTokenQty,\r\n                    _minPoolTokens\r\n                );\r\n            } else {\r\n                // token to weth (via uniswapV2)\r\n                uint256 wethBought = _token2Token(\r\n                    _IncomingTokenAddress,\r\n                    wethTokenAddress,\r\n                    _IncomingTokenQty\r\n                );\r\n\r\n                // weth to wbtc (via balancer)\r\n                uint256 wbtcBought = _eth2WBTC(wethBought, true);\r\n\r\n                // enter curve with wbtc\r\n                crvTokensBought = _enter2BtcCurve(\r\n                    _toWhomToIssue,\r\n                    wbtcTokenAddress,\r\n                    _curvePoolExchangeAddress,\r\n                    wbtcBought,\r\n                    _minPoolTokens\r\n                );\r\n            }\r\n        } else {\r\n            uint256 daiBought;\r\n            uint256 usdcBought;\r\n\r\n            if (_IncomingTokenAddress == DaiTokenAddress) {\r\n                daiBought = _IncomingTokenQty;\r\n                usdcBought = 0;\r\n            } else if (_IncomingTokenAddress == UsdcTokenAddress) {\r\n                daiBought = 0;\r\n                usdcBought = _IncomingTokenQty;\r\n            } else {\r\n                daiBought = _token2Token(\r\n                    _IncomingTokenAddress,\r\n                    DaiTokenAddress,\r\n                    (_IncomingTokenQty).div(2)\r\n                );\r\n                usdcBought = _token2Token(\r\n                    _IncomingTokenAddress,\r\n                    UsdcTokenAddress,\r\n                    (_IncomingTokenQty).div(2)\r\n                );\r\n            }\r\n\r\n            crvTokensBought = _enter2Curve(\r\n                _toWhomToIssue,\r\n                daiBought,\r\n                usdcBought,\r\n                _curvePoolExchangeAddress,\r\n                _minPoolTokens\r\n            );\r\n        }\r\n    }\r\n\r\n    function _enter2BtcCurve(\r\n        address _toWhomToIssue,\r\n        address _incomingBtcTokenAddress,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _incomingBtcTokenAmt,\r\n        uint256 _minPoolTokens \r\n    ) internal returns (uint256 crvTokensBought) {\r\n        require(\r\n            _incomingBtcTokenAddress == sBtcTokenAddress ||\r\n                _incomingBtcTokenAddress == wbtcTokenAddress ||\r\n                _incomingBtcTokenAddress == renBtcTokenAddress,\r\n            \"ERR: Incorrect BTC Token Address\"\r\n        );\r\n\r\n        IERC20(_incomingBtcTokenAddress).safeApprove(\r\n            _curvePoolExchangeAddress,\r\n            _incomingBtcTokenAmt\r\n        );\r\n\r\n        address btcCurvePoolTokenAddress\r\n         = exchange2Token[_curvePoolExchangeAddress];\r\n        uint256 iniTokenBal = IERC20(btcCurvePoolTokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        // 0 = renBTC, 1 = wBTC, 2 = sBTC\r\n        if (_incomingBtcTokenAddress == wbtcTokenAddress) {\r\n            if (_curvePoolExchangeAddress == renBtcCurveExchangeAddress) {\r\n                IrenBtcCurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n                    [0, _incomingBtcTokenAmt],\r\n                    _minPoolTokens\r\n                );\r\n            } else {\r\n                IsBtcCurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n                    [0, _incomingBtcTokenAmt, 0],\r\n                    _minPoolTokens\r\n                );\r\n            }\r\n        } else if (_incomingBtcTokenAddress == renBtcTokenAddress) {\r\n            if (_curvePoolExchangeAddress == renBtcCurveExchangeAddress) {\r\n                IrenBtcCurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n                    [_incomingBtcTokenAmt, 0],\r\n                    _minPoolTokens\r\n                );\r\n            } else {\r\n                IsBtcCurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n                    [_incomingBtcTokenAmt, 0, 0],\r\n                    _minPoolTokens\r\n                );\r\n            }\r\n        } else {\r\n            IsBtcCurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n                [0, 0, _incomingBtcTokenAmt],\r\n                0\r\n            );\r\n        }\r\n        crvTokensBought = (\r\n            IERC20(btcCurvePoolTokenAddress).balanceOf(address(this))\r\n        )\r\n\r\n            .sub(iniTokenBal);\r\n        require(\r\n            crvTokensBought > _minPoolTokens,\r\n            \"Error less than min pool tokens\"\r\n        );\r\n\r\n        IERC20(btcCurvePoolTokenAddress).safeTransfer(\r\n            _toWhomToIssue,\r\n            crvTokensBought\r\n        );\r\n    }\r\n\r\n    function _enter2Curve(\r\n        address _toWhomToIssue,\r\n        uint256 daiBought,\r\n        uint256 usdcBought,\r\n        address _curvePoolExchangeAddress,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256 crvTokensBought) {\r\n        // 0 = DAI, 1 = USDC, 2 = USDT, 3 = TUSD/sUSD\r\n        address poolTokenAddress = exchange2Token[_curvePoolExchangeAddress];\r\n        uint256 iniTokenBal = IERC20(poolTokenAddress).balanceOf(address(this));\r\n        ICurveExchange(_curvePoolExchangeAddress).add_liquidity(\r\n            [daiBought, usdcBought, 0, 0],\r\n            _minPoolTokens\r\n        );\r\n        crvTokensBought = (IERC20(poolTokenAddress).balanceOf(address(this)))\r\n            .sub(iniTokenBal);\r\n        require(\r\n            crvTokensBought > _minPoolTokens,\r\n            \"Error less than min pool tokens\"\r\n        );\r\n\r\n        uint256 goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(crvTokensBought, goodwill),\r\n            10000\r\n        );\r\n      \r\n        IERC20(poolTokenAddress).safeTransfer(\r\n            zgoodwillAddress,\r\n            goodwillPortion\r\n        );\r\n\r\n        IERC20(poolTokenAddress).safeTransfer(\r\n            _toWhomToIssue,\r\n            SafeMath.sub(crvTokensBought, goodwillPortion)\r\n        );\r\n    }\r\n\r\n    function _eth2WBTC(uint256 ethReceived, bool fromWeth)\r\n        internal\r\n        returns (uint256 tokensBought)\r\n    {\r\n        if (!fromWeth) IWETH(wethTokenAddress).deposit.value(ethReceived)();\r\n\r\n        IERC20(wethTokenAddress).safeApprove(\r\n            address(BalWBTCPool), \r\n            ethReceived\r\n        );\r\n\r\n        (tokensBought, ) = BalWBTCPool.swapExactAmountIn(\r\n            wethTokenAddress,\r\n            ethReceived,\r\n            wbtcTokenAddress,\r\n            0,\r\n            uint256(-1)\r\n        );\r\n    }\r\n\r\n    function _eth2Token(address _tokenContractAddress, uint256 ethReceived)\r\n        internal\r\n        returns (uint256 tokensBought)\r\n    {\r\n        require(\r\n            _tokenContractAddress != wethTokenAddress,\r\n            \"ERR: Invalid Swap to ETH\"\r\n        );\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = wethTokenAddress;\r\n        path[1] = _tokenContractAddress;\r\n        tokensBought = uniswapRouter.swapExactETHForTokens.value(ethReceived)(\r\n            1,\r\n            path,\r\n            address(this),\r\n            deadline\r\n        )[path.length - 1];\r\n    }\r\n\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 tokenBought) {\r\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\r\n            return tokens2Trade;\r\n        }\r\n\r\n        IERC20(_FromTokenContractAddress).safeApprove(\r\n            address(uniswapRouter),\r\n            tokens2Trade\r\n        );\r\n\r\n        if (_FromTokenContractAddress != wethTokenAddress) {\r\n            if (_ToTokenContractAddress != wethTokenAddress) {\r\n                address[] memory path = new address[](3);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n                path[2] = _ToTokenContractAddress;\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                    tokens2Trade,\r\n                    1,\r\n                    path,\r\n                    address(this),\r\n                    deadline\r\n                )[path.length - 1];\r\n            } else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                    tokens2Trade,\r\n                    1,\r\n                    path,\r\n                    address(this),\r\n                    deadline\r\n                )[path.length - 1];\r\n            }\r\n        } else {\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _ToTokenContractAddress;\r\n            tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                tokens2Trade,\r\n                1,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[path.length - 1];\r\n        }\r\n    }\r\n\r\n    function setNewBalWBTCPool(address _newBalWBTCPool) public onlyOwner {\r\n        require(\r\n            _newBalWBTCPool != address(0) &&\r\n                _newBalWBTCPool != address(BalWBTCPool),\r\n            \"Invalid Pool\"\r\n        );\r\n        BalWBTCPool = IBalancer(_newBalWBTCPool);\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        IERC20(_TokenAddress).safeTransfer(_owner, qty);\r\n    }\r\n\r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_new_zgoodwillAddress(address _new_zgoodwillAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        zgoodwillAddress = _new_zgoodwillAddress;\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_IncomingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curvePoolExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crvTokensBought\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBalWBTCPool\",\"type\":\"address\"}],\"name\":\"setNewBalWBTCPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_zgoodwillAddress\",\"type\":\"address\"}],\"name\":\"set_new_zgoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zgoodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Curve_ZapIn_General_V1_6","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://24040849122cd24fa785e974101940fb180d9e32916a95497c98ed1b1a01824a"}]}