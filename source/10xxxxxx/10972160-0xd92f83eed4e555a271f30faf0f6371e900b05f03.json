{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * token contract functions\r\n*/\r\ncontract Token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal constant returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract owned {\r\n        address public owner;\r\n\r\n        function owned() public {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n}\r\n\r\ncontract lockContract is owned{\r\n    using SafeMath for uint256;\r\n    \r\n    /*\r\n     * deposit vars\r\n    */\r\n    struct Items {\r\n        address tokenAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n        bool withdrawn;\r\n    }\r\n    \r\n    uint256 public depositId;\r\n    uint256[] public allDepositIds;\r\n    mapping (uint256 => Items) public lockedToken;\r\n    \r\n    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\r\n    \r\n    /**\r\n     * Constrctor function\r\n    */\r\n    function lockContract() public {\r\n\r\n    }\r\n    \r\n    /**\r\n     *lock tokens\r\n    */\r\n    function lockTokens(address _tokenAddress, uint256 _amount, uint256 _unlockTime) onlyOwner public returns (uint256 _id) {\r\n        require(_amount > 0);\r\n        require(_unlockTime < 10000000000);\r\n        require(Token(_tokenAddress).transferFrom(msg.sender, this, _amount));\r\n        \r\n        _id = ++depositId;\r\n        lockedToken[_id].tokenAddress = _tokenAddress;\r\n        lockedToken[_id].tokenAmount = _amount;\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n        lockedToken[_id].withdrawn = false;\r\n        \r\n        allDepositIds.push(_id);\r\n    }\r\n    \r\n    /**\r\n     *withdraw tokens\r\n    */\r\n    function withdrawTokens(uint256 _id) public onlyOwner {\r\n        require(block.timestamp >= lockedToken[_id].unlockTime);\r\n        require(!lockedToken[_id].withdrawn);\r\n        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount));\r\n        \r\n        lockedToken[_id].withdrawn = true;\r\n        \r\n        LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\r\n    }\r\n\r\n     /*get total token balance in contract*/\r\n    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\r\n    {\r\n       return Token(_tokenAddress).balanceOf(this);\r\n    }\r\n    \r\n    /*get allDepositIds*/\r\n    function getAllDepositIds() view public returns (uint256[])\r\n    {\r\n        return allDepositIds;\r\n    }\r\n    \r\n    /*get getDepositDetails*/\r\n    function getDepositDetails(uint256 _id) view public returns (address tokenAddress, uint256 tokenAmount, uint256 unlockTime, bool withdrawn)\r\n    {\r\n        return(lockedToken[_id].tokenAddress,lockedToken[_id].tokenAmount,\r\n        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\r\n    }\r\n    \r\n    /*get number of active deposits*/\r\n    function numOfActiveDeposits() public view returns (uint256) {\r\n        uint256 staked = 0;\r\n        for (uint i = 0; i < allDepositIds.length; i++) {\r\n            if (!lockedToken[allDepositIds[i]].withdrawn) {\r\n                staked++;\r\n            }\r\n        }\r\n        return staked;\r\n    }\r\n    \r\n    /*get getWithdrawableDeposits*/\r\n    function getWithdrawableDeposits() view public returns (uint256[])\r\n    {\r\n        uint256[] memory deposits = new uint256[](numOfActiveDeposits());\r\n        uint256 tempIdx = 0;\r\n        for(uint256 i = 0; i < allDepositIds.length; i++) {\r\n            if(!lockedToken[allDepositIds[i]].withdrawn) {\r\n                deposits[tempIdx] =  allDepositIds[i];\r\n                tempIdx ++;\r\n            }\r\n        }\r\n        return deposits;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numOfActiveDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawableDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"}]","ContractName":"lockContract","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://51da1cd45a8cf6c11a0d1ed9a286e0b667cc50a70313b9312eaf2b926181d47c"}]}