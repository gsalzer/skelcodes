{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-06-04\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(\r\n            c / a == b,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            b <= a,\r\n            \"UINT256_UNDERFLOW\"\r\n        );\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(\r\n            c >= a,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ncontract IOwnable {\r\n\r\n    function transferOwnership(address newOwner)\r\n        public;\r\n}\r\n\r\ncontract Ownable is\r\n    IOwnable\r\n{\r\n    address public owner;\r\n\r\n    constructor ()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"ONLY_CONTRACT_OWNER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract IERC20Token {\r\n\r\n    // solhint-disable no-simple-event-func-name\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    /// @dev send `value` token to `to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return True if transfer was successful\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool);\r\n\r\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return True if transfer was successful\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        returns (bool);\r\n    \r\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Always true if the call has enough gas to complete execution\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        returns (bool);\r\n\r\n    /// @dev Query total supply of token\r\n    /// @return Total supply of token\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n    \r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return Balance of owner\r\n    function balanceOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\ncontract ERC20Token is\r\n    IERC20Token\r\n{\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /// @dev send `value` token to `to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return True if transfer was successful\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(\r\n            balances[msg.sender] >= _value,\r\n            \"ERC20_INSUFFICIENT_BALANCE\"\r\n        );\r\n        require(\r\n            balances[_to] + _value >= balances[_to],\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(\r\n            msg.sender,\r\n            _to,\r\n            _value\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return True if transfer was successful\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(\r\n            balances[_from] >= _value,\r\n            \"ERC20_INSUFFICIENT_BALANCE\"\r\n        );\r\n        require(\r\n            allowed[_from][msg.sender] >= _value,\r\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\r\n        );\r\n        require(\r\n            balances[_to] + _value >= balances[_to],\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n    \r\n        emit Transfer(\r\n            _from,\r\n            _to,\r\n            _value\r\n        );\r\n    \r\n        return true;\r\n    }\r\n\r\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Always true if the call has enough gas to complete execution\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(\r\n            msg.sender,\r\n            _spender,\r\n            _value\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev Query total supply of token\r\n    /// @return Total supply of token\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev Query the balance of owner\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return Balance of owner\r\n    function balanceOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract UnlimitedAllowanceERC20Token is\r\n    ERC20Token\r\n{\r\n    uint256 constant internal MAX_UINT = 2**256 - 1;\r\n\r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance. See https://github.com/ethereum/EIPs/issues/717\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(\r\n            balances[_from] >= _value,\r\n            \"ERC20_INSUFFICIENT_BALANCE\"\r\n        );\r\n        require(\r\n            allowance >= _value,\r\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\r\n        );\r\n        require(\r\n            balances[_to] + _value >= balances[_to],\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        emit Transfer(\r\n            _from,\r\n            _to,\r\n            _value\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableERC20Token is \r\n    SafeMath,\r\n    UnlimitedAllowanceERC20Token\r\n{\r\n    /// @dev Mints new tokens\r\n    /// @param _to Address of the beneficiary that will own the minted token\r\n    /// @param _value Amount of tokens to mint\r\n    function _mint(address _to, uint256 _value)\r\n        internal\r\n    {\r\n        balances[_to] = safeAdd(_value, balances[_to]);\r\n        _totalSupply = safeAdd(_totalSupply, _value);\r\n\r\n        emit Transfer(\r\n            address(0),\r\n            _to,\r\n            _value\r\n        );\r\n    }\r\n\r\n    /// @dev Mints new tokens\r\n    /// @param _owner Owner of tokens that will be burned\r\n    /// @param _value Amount of tokens to burn\r\n    function _burn(address _owner, uint256 _value)\r\n        internal\r\n    {\r\n        balances[_owner] = safeSub(balances[_owner], _value);\r\n        _totalSupply = safeSub(_totalSupply, _value);\r\n\r\n        emit Transfer(\r\n            _owner,\r\n            address(0),\r\n            _value\r\n        );\r\n    }\r\n}\r\n\r\ncontract DummyERC20Token is \r\n    Ownable,\r\n    MintableERC20Token\r\n{\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public constant MAX_MINT_AMOUNT = 100000000000000000000000;\r\n\r\n    constructor (\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _decimals,\r\n        uint256 _totalSupply\r\n    )\r\n        public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        _totalSupply = _totalSupply;\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /// @dev Sets the balance of target address\r\n    /// @param _target Address or which balance will be updated\r\n    /// @param _value New balance of target address\r\n    function setBalance(address _target, uint256 _value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 currBalance = balances[_target];\r\n        if (_value < currBalance) {\r\n            _totalSupply = safeSub(_totalSupply, safeSub(currBalance, _value));\r\n        } else {\r\n            _totalSupply = safeAdd(_totalSupply, safeSub(_value, currBalance));\r\n        }\r\n        balances[_target] = _value;\r\n    }\r\n\r\n    /// @dev Mints new tokens for sender\r\n    /// @param _value Amount of tokens to mint\r\n    function mint(uint256 _value)\r\n        external\r\n    {\r\n        require(\r\n            _value <= MAX_MINT_AMOUNT,\r\n            \"VALUE_TOO_LARGE\"\r\n        );\r\n\r\n        _mint(msg.sender, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MINT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DummyERC20Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000004a1183535dbc5bac9502a000000000000000000000000000000000000000000000000000000000000000a544553544d41544348410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045454454100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5cde2b9bdfdac09eed7ca6f0fbc9c60db6ec070a6d6e50cb89182c59c1c8f705"}]}