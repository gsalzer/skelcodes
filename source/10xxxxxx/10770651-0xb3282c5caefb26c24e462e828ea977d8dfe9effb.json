{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function burn(uint) external;\r\n}\r\n\r\ninterface VoteInterface {\r\n    function voter2VotingValue(address, uint, address) external view returns (uint32);\r\n}\r\n\r\ninterface YFVRewards {\r\n    function periodFinish() external view returns (uint);\r\n}\r\n\r\ncontract VIP2 {\r\n\r\n    address payable owner;\r\n    YFVRewards pool0 = YFVRewards(0xa8d3084Fa61C893eACAE2460ee77E3E5f11C8CFE);\r\n    TokenInterface usdt = TokenInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    VoteInterface vote = VoteInterface(0x6ba70f65877Da18e751fF42fC1C3Fee8c66280E6);\r\n    address payable whaleAddress = 0xCebaa26C11Bdf4F239424CcC17864B2C0f03e2BD;\r\n    uint public contractDeployTime;\r\n    uint public initialPeriodFinish;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        contractDeployTime = block.timestamp;\r\n        initialPeriodFinish = pool0.periodFinish();\r\n    }\r\n\r\n    // If whale voted yes, and fund is unlocked, calling this function will send the 10,000 USDT to the whale address\r\n    function donationToWhale() public {\r\n        require(isWhaleVotedYes());\r\n        require(isFundUnlocked());\r\n        usdt.transfer(whaleAddress, usdt.balanceOf(address(this)));\r\n    }\r\n\r\n    // Check if whale voted Yes\r\n    function isWhaleVotedYes() public view returns (bool) {\r\n        address poolAddress = 0x0e6ffd4dAecA13A8158146516f847D2F44AD4A30; // YFV Staking Pool V1\r\n        uint votingItem = 2; // VIP2\r\n\r\n        return vote.voter2VotingValue(poolAddress, votingItem, whaleAddress) != 0; // any value other than 0 is Yes\r\n    }\r\n\r\n    // Use the periodFinish data to check if pool0 is unlocked\r\n    function isFundUnlocked() public view returns (bool) {\r\n        return pool0.periodFinish() > initialPeriodFinish;\r\n    }\r\n\r\n    // If the fund is not unlocked after 2 weeks, owner can get back all assets in this contract\r\n    function getBackAfterTwoWeeks() public {\r\n        require(msg.sender == owner);\r\n        require(block.timestamp > contractDeployTime + 14 days);\r\n        usdt.transfer(owner, usdt.balanceOf(address(this)));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractDeployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donationToWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBackAfterTwoWeeks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhaleVotedYes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VIP2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d688e7f1ed7f28026474578b8657284767f9340a8e868c487a8877b518f5475"}]}