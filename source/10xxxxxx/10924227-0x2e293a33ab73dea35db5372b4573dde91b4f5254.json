{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"},\"Aip.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract Pool2 is IERC20 {\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function withdraw(uint256 amount) external returns (bool);\\n\\n    function exit() external returns (bool);\\n}\\n\\ncontract BptToken is IERC20 {\\n    function getBalance(address token) external returns (uint256);\\n\\n    function calcOutGivenIn(uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 tokenAmountIn, uint256 swapFee) external returns (uint256);\\n\\n    function calcSpotPrice(uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 swapFee) external returns (uint256);\\n\\n    function joinswapExternAmountIn(address tokenIn, uint256 tokenAmountIn, uint256 minPoolAmountOut) external returns (uint256);\\n\\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn) external returns (uint256);\\n\\n    function swapExactAmountIn(address tokenIn, uint256 tokenAmountIn, address tokenOut, uint256 minAmountOut, uint256 maxPrice) external returns (bool);\\n}\\n\\ncontract WETHToken is IERC20 {\\n    function deposit() public payable ;\\n}\\n\\nlibrary SafePool2 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeStake(Pool2 token, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.stake.selector, value));\\n    }\\n\\n    function safeGetReward(Pool2 token) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.getReward.selector));\\n    }\\n\\n    function safeWithdraw(Pool2 token, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.withdraw.selector, value));\\n    }\\n\\n    function safeExit(Pool2 token) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.exit.selector));\\n    }\\n\\n    function callOptionalReturn(Pool2 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary SafeBpt {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(BptToken token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function callOptionalReturn(BptToken token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary SafeWETH {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ncontract AipRewards is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafePool2 for Pool2;\\n    using SafeWETH for WETHToken;\\n    using SafeBpt for BptToken;\\n\\n    // pool0\\n    IERC20 public pool0 = IERC20(0xFB594B135A09dD86Bf764fd902a544435091a42A);\\n    // weth\\n    WETHToken public weth = WETHToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    // kani\\n    IERC20 public kani = IERC20(0x790aCe920bAF3af2b773D4556A69490e077F6B4A);\\n    // bpt\\n    BptToken public bpt = BptToken(0x8B2E66C3B277b2086a976d053f1762119A92D280);\\n    // pool2\\n    Pool2 public pool2 = Pool2(0x14d41EAaC22eb027dC9EC49bB7F98b123f9e0c68);\\n\\n    // weth\\n    uint256 public constant totalSupply = 500*1e18;\\n    uint256 public constant dailyJoin = 50*1e18;\\n    uint256 public totalJoined = 0;\\n    uint256 public lastJoinTime = 0;\\n\\n    uint256 public rewardStartTime = 0;\\n    uint256 public totalReward = 0;\\n    uint256 public rewardPaid = 0;\\n    uint256 public bptPaid = 0;\\n    uint256 public bptReward = 0;\\n    mapping(address =\\u003e uint256) public rewardPaids;\\n    mapping(address =\\u003e uint256) public bptPaids;\\n\\n    event JoinPool(address indexed pool, uint256 amount);\\n    event Staked(address indexed pool, uint256 amount);\\n    event RewardPaid(address indexed user, address indexed token, uint256 reward);\\n\\n    function() external payable {\\n        weth.deposit.value(msg.value)();\\n    }\\n\\n    function init() public onlyOwner{\\n        require(weth.balanceOf(address(this)) \\u003e= totalSupply, \\\"balance not enough\\\");\\n        require(lastJoinTime == 0, \\\"inited\\\");\\n        lastJoinTime = block.timestamp.sub(1 days);\\n        rewardStartTime = block.timestamp.add(1 days);\\n        joinPool();\\n    }\\n\\n    /** balancer pool actions */\\n    // balancer pool : weth \\u003c=\\u003e kani\\n    // deposit eth to weth\\n    // join weth to b-pool and get bpt back\\n    // stake bpt to pool2\\n    function joinPool() public {\\n        require(lastJoinTime \\u003e 0, \\\"not start\\\");\\n        if (block.timestamp.sub(lastJoinTime) \\u003e= 1 days\\n            \\u0026\\u0026 totalJoined \\u003c totalSupply) {\\n            totalJoined = totalJoined.add(dailyJoin);\\n            lastJoinTime = block.timestamp;\\n            // and liquidity and get bpt\\n            uint256 reward = dailyJoin.mul(1).div(100);\\n            weth.approve(address(bpt), dailyJoin.sub(reward));\\n            uint256 amount = bpt.joinswapExternAmountIn(address(weth), dailyJoin.sub(reward), 0);\\n            emit JoinPool(address(bpt), dailyJoin.sub(reward));\\n            // stake bpt to pool2\\n            stake(amount);\\n            // get kani reward from pool2\\n            withdrawKani();\\n            // reward\\n            weth.safeTransfer(msg.sender, reward);\\n        }\\n    }\\n\\n    // get weth back from balancer pool\\n    function exitBPool(uint256 amount) public onlyOwner {\\n        bpt.exitswapExternAmountOut(address(weth), amount, bpt.balanceOf(address(this)));\\n    }\\n\\n    /** pool2 actions */\\n    // stake bpt to pool2\\n    function stake(uint256 amount) internal {\\n        if (amount \\u003e 0) {\\n            bpt.approve(address(pool2), amount);\\n            pool2.safeStake(amount);\\n            emit Staked(address(pool2), amount);\\n        }\\n    }\\n\\n    // get kani reward from pool2\\n    function withdrawKani() internal {\\n        pool2.safeGetReward();\\n        totalReward = kani.balanceOf(address(this)).add(rewardPaid);\\n    }\\n\\n    // get bpt \\u0026 kani reward back\\n    function exitPool2() public onlyOwner {\\n        pool2.safeExit();\\n        totalReward = kani.balanceOf(address(this)).add(rewardPaid);\\n    }\\n\\n    // get bpt back\\n    function withdrawBpt(uint256 amount) public onlyOwner {\\n        require(block.timestamp.sub(rewardStartTime) \\u003e 10 days, \\\"not start\\\");\\n        require(pool2.balanceOf(address(this)) \\u003e= amount, \\\"balance not enough\\\");\\n        pool2.safeWithdraw(amount);\\n        bptReward = bpt.balanceOf(address(this)).add(bptPaid);\\n    }\\n\\n    /** user actions */\\n    // user get total earned kani\\n    function kaniEarned(address account) public view returns (uint256) {\\n        if (block.timestamp \\u003c rewardStartTime || totalReward \\u003c= 0)  return 0;\\n        return pool0.balanceOf(account).mul(totalReward).div(totalSupply);\\n    }\\n\\n    // user get kani reward\\n    function getKaniReward() public checkStart {\\n        uint256 reward = kaniEarned(msg.sender).sub(rewardPaids[msg.sender]);\\n        if (reward \\u003e 0) {\\n            rewardPaids[msg.sender] = rewardPaids[msg.sender].add(reward);\\n            kani.safeTransfer(msg.sender, reward);\\n            rewardPaid = rewardPaid.add(reward);\\n            emit RewardPaid(msg.sender, address(kani), reward);\\n        }\\n    }\\n\\n    // user get total earned bpt\\n    function bptEarned(address account) public view returns (uint256) {\\n        return pool0.balanceOf(account).mul(bptReward).div(totalSupply);\\n    }\\n\\n    // user get bpt reward\\n    function getBptReward() public {\\n        require(block.timestamp.sub(rewardStartTime) \\u003e 10 days, \\\"not start\\\");\\n        uint256 reward = bptEarned(msg.sender).sub(bptPaids[msg.sender]);\\n        if (reward \\u003e 0) {\\n            bptPaids[msg.sender] = bptPaids[msg.sender].add(reward);\\n            bpt.safeTransfer(msg.sender, reward);\\n            bptPaid = bptPaid.add(reward);\\n            emit RewardPaid(msg.sender, address(bpt), reward);\\n        }\\n    }\\n\\n    // user add weth to bpt pool, get kani back\\n    function swapKani(uint256 wethAmount) public onlyOwner {\\n        weth.approve(address(bpt), wethAmount);\\n        uint256 wethBalance = bpt.getBalance(address(weth));\\n        uint256 kaniBalance = bpt.getBalance(address(kani));\\n        uint256 wethWeight = 49000000000000000000;\\n        uint256 kaniWeight = 1000000000000000000;\\n        uint256 swapFee = 2000000000000000;\\n        uint256 kaniOutAmount = bpt.calcOutGivenIn(wethBalance, wethWeight, kaniBalance, kaniWeight, wethAmount, swapFee);\\n        wethBalance = wethBalance.add(wethAmount);\\n        kaniBalance = kaniBalance.sub(kaniOutAmount);\\n        uint256 spotPrice = bpt.calcSpotPrice(wethBalance, wethWeight, kaniBalance, kaniWeight, swapFee);\\n        bpt.swapExactAmountIn(address(weth), wethAmount, address(kani), kaniOutAmount, spotPrice);\\n    }\\n\\n    modifier checkStart(){\\n        require(block.timestamp \\u003e rewardStartTime,\\\"not start\\\");\\n        _;\\n    }\\n\\n    function exitToken(address token, address payable account, uint256 amount) public onlyOwner {\\n        IERC20 t = IERC20(token);\\n        require(t.balanceOf(address(this)) \\u003e= amount, \\\"balance not enough\\\");\\n        t.safeTransfer(account, amount);\\n    }\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract Context {\\n    constructor () internal { }\\n    \\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function mint(address account, uint amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary Math {\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JoinPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"bpt\",\"outputs\":[{\"internalType\":\"contract BptToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bptEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bptPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bptPaids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bptReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitBPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitPool2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBptReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getKaniReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kani\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"kaniEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastJoinTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2\",\"outputs\":[{\"internalType\":\"contract Pool2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPaids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"swapKani\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalJoined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract WETHToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBpt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AipRewards","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://feaa99e8dad52ded6a511a2093847fd377f6cc7f07fd16647c2b785b0f49e303"}]}