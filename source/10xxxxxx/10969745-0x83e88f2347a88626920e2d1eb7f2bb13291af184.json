{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n *  Ticket 1.0\r\n *  VERSION: 1.0\r\n *\r\n */\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ERC20{\r\n    function allowance(address owner, address spender) external view returns (uint256){}\r\n    function transfer(address recipient, uint256 amount) external returns (bool){}\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool){}\r\n    function balanceOf(address account) external view returns (uint256){}\r\n}\r\n\r\n\r\ncontract HappyBox{\r\n    \r\n    event Shipped(address shipped);\r\n    \r\n    address[] public modules_list;\r\n    mapping(address => bool)public modules;\r\n    address master;\r\n    \r\n    constructor() public{\r\n        master=msg.sender;\r\n    }\r\n    \r\n    function gift(address tkn,uint amount,address destination) public returns(bool){\r\n        require(modules[msg.sender]);\r\n        require(ERC20(tkn).transfer(destination, amount));\r\n        emit Shipped(tkn);\r\n        return true;\r\n    } \r\n    \r\n    //mode 1 = install module\r\n    //mode 2 = set master\r\n    //mode 3 = enable module\r\n    //mode 4 = pull token\r\n    function set(address tkn,bool what,uint mode)public{\r\n         require((msg.sender==master)||(modules[msg.sender]));\r\n        if(mode==1){\r\n            require(MVMCertList(0x261CaA04e78D6226Ec7DDdE1C64FEAe155d3dEb2).isModule(tkn));\r\n            modules[tkn]=true;\r\n            modules_list.push(tkn);\r\n        }else if(mode==2){\r\n                master=tkn;\r\n        }else if(mode==3){\r\n                modules[tkn]=what;\r\n        }else if(mode==4){\r\n              ERC20 token=ERC20(tkn);\r\n                token.transfer(master,token.balanceOf(address(this)));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\ncontract priceList {\r\n    \r\n    event priceSet(address token);\r\n    \r\n    address public master;\r\n    mapping(address => uint)public price;\r\n    address[] list;\r\n    \r\n\r\n    constructor() public {\r\n        master=msg.sender;\r\n    }\r\n    \r\n    function priceListing(uint index)view public returns(address,uint,uint){\r\n        return (list[index],price[list[index]],list.length);\r\n    }\r\n    \r\n    function setPrice(address tkn,uint prc)public returns(bool){\r\n        require(msg.sender==master);\r\n        require(prc > 0, \"Price > 0 please\");\r\n        if(price[tkn]==0)list.push(tkn);\r\n        price[tkn]=prc;\r\n        emit priceSet(tkn);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\ncontract MVMCertList {\r\n\r\n    address public master;\r\n    mapping(address => bool)public isFactory;\r\n    mapping(address => bool)public isModule;\r\n    address[] public factory;\r\n\r\n    constructor() public {\r\n        master=msg.sender;\r\n    }\r\n    \r\n    function setFactory(address tkn,bool val)public returns(bool){\r\n        require((msg.sender==master)||(isFactory[msg.sender]));\r\n        isFactory[tkn]=val;\r\n        if(val)factory.push(tkn);\r\n        return true;\r\n    }\r\n    \r\n    function setModule(address tkn)public returns(bool){\r\n        require(isFactory[msg.sender]||(msg.sender==master));\r\n        isModule[tkn]=true;\r\n        return true;\r\n    }\r\n    \r\n    function setMaster(address mstr)public returns(bool){\r\n        require((msg.sender==master)||(isFactory[msg.sender]));\r\n        master=mstr;\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\ncontract Ticket_1_0_Factory{\r\n    \r\n        uint public code=1;\r\n        \r\n        function install(address happyBox,address priceList)public returns(bool){\r\n            address tkt=address(new Ticket(msg.sender,priceList,happyBox));\r\n            MVMCertList(0x261CaA04e78D6226Ec7DDdE1C64FEAe155d3dEb2).setModule(tkt);\r\n            HappyBox(happyBox).set(tkt,false,1);\r\n            return true;\r\n        }\r\n}\r\n\r\n\r\ncontract Ticket {\r\n    \r\n    uint8 public code=1;\r\n    address public vault;\r\n    HappyBox public box;\r\n    priceList public prices;\r\n    \r\n    constructor(address vlt, address prcs, address gftr) public{\r\n        vault=vlt;\r\n        prices=priceList(prcs);\r\n        box=HappyBox(gftr);\r\n    }\r\n    \r\n    function buy(address tkn,address ref) payable public returns(bool){\r\n        require(box.gift(tkn,msg.value*1000/prices.price(tkn),msg.sender));\r\n        payable(ref).transfer(msg.value/10);\r\n        return true;\r\n    } \r\n    \r\n    function pull() public {\r\n       payable(vault).transfer(address(this).balance);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shipped\",\"type\":\"address\"}],\"name\":\"Shipped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"gift\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modules_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HappyBox","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://56497fe478bf062742b6c7f9dc188ab79d46918b229bf60c8864073a2a0bfbbc"}]}