{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0), \"Ownable: initial owner is the zero address\");\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _isOwner(address account) internal view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for.\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Custom extension of {ERC20} that adds a set of Minter accounts,\r\n * which have permission to mint (create) new tokens as they see fit.\r\n */\r\nabstract contract ERC20Mintable is ERC20Burnable, Ownable {\r\n\r\n    address[] internal _minters;\r\n\r\n    mapping (address => Minter) public minterInfo;\r\n    struct Minter {\r\n        bool active;\r\n        uint256 limit;\r\n        uint256 minted;\r\n    }\r\n\r\n    modifier canMint(uint256 amount) virtual {\r\n        require(isMinter(msg.sender), \"Caller has no permission\");\r\n        require(minterInfo[msg.sender].minted.add(amount) <= minterInfo[msg.sender].limit, \"Minter limit overflow\");\r\n        minterInfo[msg.sender].minted = minterInfo[msg.sender].minted.add(amount);\r\n        _;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public canMint(amount) returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function setMinter(address account, uint256 limit) public onlyOwner {\r\n        require(account != address(0));\r\n\r\n        if (!minterInfo[account].active && limit > 0) {\r\n            _minters.push(account);\r\n            minterInfo[account].active = true;\r\n        }\r\n\r\n        if (limit > minterInfo[account].minted) {\r\n            minterInfo[account].limit = limit;\r\n        } else {\r\n            minterInfo[account].limit = minterInfo[account].minted;\r\n        }\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return(minterInfo[account].active);\r\n    }\r\n\r\n    function getMinters() public view returns(address[] memory) {\r\n        return _minters;\r\n    }\r\n\r\n    function getMintersInfo() public view returns(uint256 amountOfMinters, uint256 totalLimit, uint256 totalMinted) {\r\n        amountOfMinters = _minters.length;\r\n        for (uint256 i = 0; i < amountOfMinters; i++) {\r\n            totalLimit += minterInfo[_minters[i]].limit;\r\n            totalMinted += minterInfo[_minters[i]].minted;\r\n        }\r\n        return (amountOfMinters, totalLimit, totalMinted);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ApproveAndCall Interface.\r\n * @dev ApproveAndCall system allows to communicate with smart-contracts.\r\n */\r\nabstract contract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) virtual external;\r\n}\r\n\r\n/**\r\n * @title The main project contract.\r\n */\r\ncontract FinandyToken is ERC20Mintable {\r\n\r\n    // initial supply\r\n    uint256 public INITIAL_SUPPLY = 100000000 * 10 ** 8;\r\n\r\n    // maximum cap\r\n    uint256 public MAXIMUM_SUPPLY = 200000000 * 10 ** 8;\r\n\r\n    // registered contracts (to prevent loss of token via transfer function)\r\n    mapping (address => bool) private _contracts;\r\n\r\n    // modified canMint modifier (to prevent exceeding the maximum cap)\r\n    modifier canMint(uint256 amount) override {\r\n        require(isMinter(msg.sender), \"Caller has no permission\");\r\n        require(minterInfo[msg.sender].minted.add(amount) <= minterInfo[msg.sender].limit, \"Minter limit overflow\");\r\n        require(totalSupply().add(amount) <= MAXIMUM_SUPPLY, \"Total supply cannot exceed the cap\");\r\n        minterInfo[msg.sender].minted = minterInfo[msg.sender].minted.add(amount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev constructor function that is called once at deployment of the contract.\r\n      * @param recipient Address to receive initial supply.\r\n      */\r\n    constructor(address initialOwner, address recipient) public Ownable(initialOwner) {\r\n\r\n        // name of the token\r\n        _name = \"Finandy\";\r\n        // symbol of the token\r\n        _symbol = \"FIN\";\r\n        // decimals of the token\r\n        _decimals = 8;\r\n\r\n        // creation of initial supply\r\n        _mint(recipient, INITIAL_SUPPLY);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev modified transfer function that allows to safely send tokens to smart-contract.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public override returns (bool) {\r\n\r\n        if (_contracts[to]) {\r\n            approveAndCall(to, value, new bytes(0));\r\n        } else {\r\n            super.transfer(to, value);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart-contract.\r\n    * @param spender Address of smart contracts to work with.\r\n    * @param amount Amount of tokens to send.\r\n    * @param extraData Any extra data.\r\n    */\r\n    function approveAndCall(address spender, uint256 amount, bytes memory extraData) public returns (bool) {\r\n        require(approve(spender, amount));\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to register other smart-contracts (to prevent loss of tokens via transfer function).\r\n     * @param account Address of smart contracts to work with.\r\n     */\r\n    function registerContract(address account) external onlyOwner {\r\n        require(_isContract(account), \"DigexToken: account is not a smart-contract\");\r\n        _contracts[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to unregister registered smart-contracts.\r\n     * @param account Address of smart contracts to work with.\r\n     */\r\n    function unregisterContract(address account) external onlyOwner {\r\n        require(isRegistered(account), \"DigexToken: account is not registered yet\");\r\n        _contracts[account] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (for example promo or bounties).\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return true if the address is registered as contract\r\n     * @param account Address to be checked.\r\n     */\r\n    function isRegistered(address account) public view returns (bool) {\r\n        return _contracts[account];\r\n    }\r\n\r\n    /**\r\n     * @return true if `account` is a contract.\r\n     * @param account Address to be checked.\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfMinters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FinandyToken","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033bbc10f643e88d86d072d5fd8c6c2f5e7cb4b7200000000000000000000000033bbc10f643e88d86d072d5fd8c6c2f5e7cb4b72","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f00ed608f1d2f1b6a8156ec1979d0bd7fb5d45bcf09f83070f2b05697de6badd"}]}