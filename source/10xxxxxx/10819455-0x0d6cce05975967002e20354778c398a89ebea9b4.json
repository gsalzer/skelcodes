{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// This is for per user\r\nlibrary AccountTokenLib {\r\n    using SafeMath for uint256;\r\n    struct TokenInfo {\r\n        // Deposit info\r\n        uint256 depositPrincipal;   // total deposit principal of ther user\r\n        uint256 depositInterest;    // total deposit interest of the user\r\n        uint256 lastDepositBlock;   // the block number of user's last deposit\r\n        // Borrow info\r\n        uint256 borrowPrincipal;    // total borrow principal of ther user\r\n        uint256 borrowInterest;     // total borrow interest of ther user\r\n        uint256 lastBorrowBlock;    // the block number of user's last borrow\r\n    }\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // returns the principal\r\n    function getDepositPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositPrincipal;\r\n    }\r\n\r\n    function getBorrowPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowPrincipal;\r\n    }\r\n\r\n    function getDepositBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(calculateDepositInterest(self, accruedRate));\r\n    }\r\n\r\n    function getBorrowBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.borrowPrincipal.add(calculateBorrowInterest(self, accruedRate));\r\n    }\r\n\r\n    function getLastDepositBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastDepositBlock;\r\n    }\r\n\r\n    function getLastBorrowBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastBorrowBlock;\r\n    }\r\n\r\n    function getDepositInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositInterest;\r\n    }\r\n\r\n    function getBorrowInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowInterest;\r\n    }\r\n\r\n    function borrow(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        self.borrowPrincipal = self.borrowPrincipal.add(amount);\r\n    }\r\n\r\n    /**\r\n     * Update token info for withdraw. The interest will be withdrawn with higher priority.\r\n     */\r\n    function withdraw(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        if (self.depositInterest >= amount) {\r\n            self.depositInterest = self.depositInterest.sub(amount);\r\n        } else if (self.depositPrincipal.add(self.depositInterest) >= amount) {\r\n            self.depositPrincipal = self.depositPrincipal.sub(amount.sub(self.depositInterest));\r\n            self.depositInterest = 0;\r\n        } else {\r\n            self.depositPrincipal = 0;\r\n            self.depositInterest = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update token info for deposit\r\n     */\r\n    function deposit(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        self.depositPrincipal = self.depositPrincipal.add(amount);\r\n    }\r\n\r\n    function repay(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        // updated rate (new index rate), applying the rate from startBlock(checkpoint) to currBlock\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        // user owes money, then he tries to repays\r\n        if (self.borrowInterest > amount) {\r\n            self.borrowInterest = self.borrowInterest.sub(amount);\r\n        } else if (self.borrowPrincipal.add(self.borrowInterest) > amount) {\r\n            self.borrowPrincipal = self.borrowPrincipal.sub(amount.sub(self.borrowInterest));\r\n            self.borrowInterest = 0;\r\n        } else {\r\n            self.borrowPrincipal = 0;\r\n            self.borrowInterest = 0;\r\n        }\r\n    }\r\n\r\n    function newDepositCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.depositInterest = calculateDepositInterest(self, accruedRate);\r\n        self.lastDepositBlock = _block;\r\n    }\r\n\r\n    function newBorrowCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.borrowInterest = calculateBorrowInterest(self, accruedRate);\r\n        self.lastBorrowBlock = _block;\r\n    }\r\n\r\n    // Calculating interest according to the new rate\r\n    // calculated starting from last deposit checkpoint\r\n    function calculateDepositInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(self.depositInterest).mul(accruedRate).sub(self.depositPrincipal.mul(BASE)).div(BASE);\r\n    }\r\n\r\n    function calculateBorrowInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        uint256 _balance = self.borrowPrincipal;\r\n        if(accruedRate == 0 || _balance == 0 || BASE >= accruedRate) {\r\n            return self.borrowInterest;\r\n        } else {\r\n            return _balance.add(self.borrowInterest).mul(accruedRate).sub(_balance.mul(BASE)).div(BASE);\r\n        }\r\n    }\r\n}","ABI":"[]","ContractName":"AccountTokenLib","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://60a6b2f0b0565dfa963451e88e71aafc08c3eeb96a8174719d93e692f5d6eb80"}]}