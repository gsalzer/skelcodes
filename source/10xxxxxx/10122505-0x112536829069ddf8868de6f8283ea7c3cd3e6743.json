{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract DIST {\r\n    function accounting() public;\r\n}\r\n\r\ncontract EXCH {\r\n    function appreciateTokenPrice(uint256 _amount) public;\r\n}\r\n\r\ncontract TOKEN {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n    function stakeCount(address stakerAddr) external view returns (uint256);\r\n    function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\r\n    function currentDay() external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n      owner = address(0x583A013373A9e91fB64CBFFA999668bEdfdcf87C);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n}\r\n\r\ncontract HTI is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 ACTIVATION_TIME = 1590274800;\r\n\r\n    modifier isActivated {\r\n        require(now >= ACTIVATION_TIME);\r\n\r\n        if (now <= (ACTIVATION_TIME + 2 minutes)) {\r\n            require(tx.gasprice <= 0.2 szabo);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyCustodian() {\r\n        require(msg.sender == custodianAddress);\r\n        _;\r\n    }\r\n\r\n    modifier hasDripped {\r\n        if (dividendPool > 0) {\r\n          uint256 secondsPassed = SafeMath.sub(now, lastDripTime);\r\n          uint256 dividends = secondsPassed.mul(dividendPool).div(dailyRate);\r\n\r\n          if (dividends > dividendPool) {\r\n            dividends = dividendPool;\r\n          }\r\n\r\n          profitPerShare = SafeMath.add(profitPerShare, (dividends * divMagnitude) / tokenSupply);\r\n          dividendPool = dividendPool.sub(dividends);\r\n          lastDripTime = now;\r\n        }\r\n\r\n        if (hexToSendFund(\"hexmax\") >= 10000e8) {\r\n            payFund(\"hexmax\");\r\n        }\r\n\r\n        if (hexToSendFund(\"stableth\") >= 10000e8) {\r\n            payFund(\"stableth\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenHolders {\r\n        require(myTokens(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier isStakeActivated {\r\n        require(stakeActivated == true);\r\n        _;\r\n    }\r\n\r\n    event onDonation(\r\n        address indexed customerAddress,\r\n        uint256 tokens\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingHEX,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 hexEarned,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onRoll(\r\n        address indexed customerAddress,\r\n        uint256 hexRolled,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 hexWithdrawn\r\n    );\r\n\r\n    event onStakeStart(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onStakeEnd(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 returnAmount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    string public name = \"Infinihex\";\r\n    string public symbol = \"HEX5\";\r\n    uint8 constant public decimals = 8;\r\n    uint256 constant private divMagnitude = 2 ** 64;\r\n\r\n    uint8 public percentage1 = 2;\r\n    uint8 public percentage2 = 2;\r\n    uint32 public dailyRate = 4320000;\r\n    uint8 constant private buyInFee = 40;\r\n    uint8 constant private rewardFee = 5;\r\n    uint8 constant private referralFee = 1;\r\n    uint8 constant private devFee = 1;\r\n    uint8 constant private hexMaxFee = 1;\r\n    uint8 constant private stableETHFee = 2;\r\n    uint8 constant private sellOutFee = 9;\r\n    uint8 constant private transferFee = 1;\r\n\r\n    mapping(address => uint256) private tokenBalanceLedger;\r\n    mapping(address => uint256) public lockedTokenBalanceLedger;\r\n    mapping(address => uint256) private referralBalance;\r\n    mapping(address => int256) private payoutsTo;\r\n\r\n    struct Stats {\r\n       uint256 deposits;\r\n       uint256 withdrawals;\r\n       uint256 staked;\r\n       uint256 activeStakes;\r\n    }\r\n\r\n    mapping(address => Stats) public playerStats;\r\n\r\n    uint256 public dividendPool = 0;\r\n    uint256 public lastDripTime = ACTIVATION_TIME;\r\n    uint256 public referralRequirement = 1000e8;\r\n    uint256 public totalStakeBalance = 0;\r\n    uint256 public totalPlayer = 0;\r\n    uint256 public totalDonation = 0;\r\n    uint256 public totalStableFundReceived = 0;\r\n    uint256 public totalStableFundCollected = 0;\r\n    uint256 public totalMaxFundReceived = 0;\r\n    uint256 public totalMaxFundCollected = 0;\r\n\r\n    uint256 private tokenSupply = 0;\r\n    uint256 private profitPerShare = 0;\r\n\r\n    address public uniswapAddress;\r\n    address public approvedAddress1;\r\n    address public approvedAddress2;\r\n    address public distributionAddress;\r\n    address public custodianAddress;\r\n\r\n    EXCH hexmax;\r\n    DIST stablethdist;\r\n\r\n    TOKEN erc20;\r\n\r\n    struct StakeStore {\r\n      uint40 stakeID;\r\n      uint256 hexAmount;\r\n      uint72 stakeShares;\r\n      uint16 lockedDay;\r\n      uint16 stakedDays;\r\n      uint16 unlockedDay;\r\n      bool started;\r\n      bool ended;\r\n    }\r\n\r\n    bool stakeActivated = true;\r\n    bool feedActivated = true;\r\n    mapping(address => mapping(uint256 => StakeStore)) public stakeLists;\r\n\r\n    constructor() public {\r\n        custodianAddress = address(0x24B23bB643082026227e945C7833B81426057b10);\r\n        hexmax = EXCH(address(0xd52dca990CFC3760e0Cb0A60D96BE0da43fEbf19));\r\n        uniswapAddress = address(0x05cDe89cCfa0adA8C88D5A23caaa79Ef129E7883);\r\n        distributionAddress = address(0x699C01b92f2b036A1879416fC1977f60153A1729);\r\n        stablethdist = DIST(distributionAddress);\r\n        erc20 = TOKEN(address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39));\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n\r\n    function checkAndTransferHEX(uint256 _amount) private {\r\n        require(erc20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n\r\n    function distribute(uint256 _amount) isActivated public {\r\n        require(_amount > 0, \"must be a positive value\");\r\n        checkAndTransferHEX(_amount);\r\n        totalDonation += _amount;\r\n        profitPerShare = SafeMath.add(profitPerShare, (_amount * divMagnitude) / tokenSupply);\r\n        emit onDonation(msg.sender, _amount);\r\n    }\r\n\r\n    function distributePool(uint256 _amount) public {\r\n        require(_amount > 0 && tokenSupply > 0, \"must be a positive value and have supply\");\r\n        checkAndTransferHEX(_amount);\r\n        totalDonation += _amount;\r\n        dividendPool = dividendPool.add(_amount);\r\n        emit onDonation(msg.sender, _amount);\r\n    }\r\n\r\n    function payFund(bytes32 exchange) public {\r\n        if (exchange == \"hexmax\") {\r\n          uint256 _hexToPay = totalMaxFundCollected.sub(totalMaxFundReceived);\r\n          require(_hexToPay > 0);\r\n          totalMaxFundReceived = totalMaxFundReceived.add(_hexToPay);\r\n          erc20.approve(address(0xd52dca990CFC3760e0Cb0A60D96BE0da43fEbf19), _hexToPay);\r\n          hexmax.appreciateTokenPrice(_hexToPay);\r\n        } else if (exchange == \"stableth\") {\r\n          uint256 _hexToPay = totalStableFundCollected.sub(totalStableFundReceived);\r\n          require(_hexToPay > 0);\r\n          totalStableFundReceived = totalStableFundReceived.add(_hexToPay);\r\n\r\n          if (feedActivated && uniswapAddress.balance >= 500e18) {\r\n            erc20.transfer(distributionAddress, _hexToPay);\r\n            uint256 _balance = erc20.balanceOf(distributionAddress);\r\n\r\n            if (_balance >= 10000e8) {\r\n              stablethdist.accounting();\r\n            }\r\n          } else {\r\n            profitPerShare = SafeMath.add(profitPerShare, (_hexToPay * divMagnitude) / tokenSupply);\r\n          }\r\n        }\r\n    }\r\n\r\n    function roll() hasDripped onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo[_customerAddress] +=  (int256) (_dividends * divMagnitude);\r\n        _dividends += referralBalance[_customerAddress];\r\n        referralBalance[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(address(0), _customerAddress, _dividends);\r\n        emit onRoll(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function withdraw() hasDripped onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo[_customerAddress] += (int256) (_dividends * divMagnitude);\r\n        _dividends += referralBalance[_customerAddress];\r\n        referralBalance[_customerAddress] = 0;\r\n        erc20.transfer(_customerAddress, _dividends);\r\n        playerStats[_customerAddress].withdrawals += _dividends;\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function buy(address _referredBy, uint256 _amount) hasDripped public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(_referredBy, msg.sender, _amount);\r\n    }\r\n\r\n    function buyFor(address _referredBy, address _customerAddress, uint256 _amount) hasDripped public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(_referredBy, _customerAddress, _amount);\r\n    }\r\n\r\n    function _purchaseTokens(address _customerAddress, uint256 _incomingHEX, uint256 _rewards) private returns(uint256) {\r\n        uint256 _amountOfTokens = _incomingHEX;\r\n        uint256 _fee = _rewards * divMagnitude;\r\n\r\n        require(_amountOfTokens > 0 && _amountOfTokens.add(tokenSupply) > tokenSupply);\r\n\r\n        if (tokenSupply > 0) {\r\n            tokenSupply = tokenSupply.add(_amountOfTokens);\r\n            profitPerShare += (_rewards * divMagnitude / tokenSupply);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_rewards * divMagnitude / tokenSupply)));\r\n        } else {\r\n            tokenSupply = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger[_customerAddress] =  tokenBalanceLedger[_customerAddress].add(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens - _fee);\r\n        payoutsTo[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(address(0), _customerAddress, _amountOfTokens);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingHEX) isActivated private returns (uint256) {\r\n        if (playerStats[_customerAddress].deposits == 0) {\r\n            totalPlayer++;\r\n        }\r\n\r\n        playerStats[_customerAddress].deposits += _incomingHEX;\r\n\r\n        require(_incomingHEX > 0);\r\n\r\n        uint256 _dividendFee = _incomingHEX.mul(buyInFee).div(100);\r\n        uint256 _rewardFee = _incomingHEX.mul(rewardFee).div(100);\r\n        uint256 _referralBonus = _incomingHEX.mul(referralFee).div(100);\r\n        uint256 _devFee = _incomingHEX.mul(devFee).div(100);\r\n        uint256 _hexMaxFee = _incomingHEX.mul(hexMaxFee).div(100);\r\n        uint256 _stableETHFee = _incomingHEX.mul(stableETHFee).div(100);\r\n\r\n        uint256 _entryFee = _incomingHEX.mul(50).div(100);\r\n        uint256 _taxedHEX = _incomingHEX.sub(_entryFee);\r\n\r\n        _purchaseTokens(owner, _devFee, 0);\r\n\r\n        if (_referredBy != address(0) && _referredBy != _customerAddress && tokenBalanceLedger[_referredBy] >= referralRequirement) {\r\n            referralBalance[_referredBy] = referralBalance[_referredBy].add(_referralBonus);\r\n        } else {\r\n            _rewardFee = _rewardFee.add(_referralBonus);\r\n        }\r\n\r\n        uint256 _amountOfTokens = _purchaseTokens(_customerAddress, _taxedHEX, _rewardFee);\r\n\r\n        dividendPool = dividendPool.add(_dividendFee);\r\n        totalMaxFundCollected = totalMaxFundCollected.add(_hexMaxFee);\r\n        totalStableFundCollected = totalStableFundCollected.add(_stableETHFee);\r\n\r\n        emit onTokenPurchase(_customerAddress, _incomingHEX, _amountOfTokens, _referredBy, now);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) isActivated hasDripped onlyTokenHolders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens > 0 && _amountOfTokens <= tokenBalanceLedger[_customerAddress].sub(lockedTokenBalanceLedger[_customerAddress]));\r\n\r\n        uint256 _dividendFee = _amountOfTokens.mul(sellOutFee).div(100);\r\n        uint256 _devFee = _amountOfTokens.mul(devFee).div(100);\r\n        uint256 _taxedHEX = _amountOfTokens.sub(_dividendFee).sub(_devFee);\r\n\r\n        _purchaseTokens(owner, _devFee, 0);\r\n\r\n        tokenSupply = tokenSupply.sub(_amountOfTokens);\r\n        tokenBalanceLedger[_customerAddress] = tokenBalanceLedger[_customerAddress].sub(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens + (_taxedHEX * divMagnitude));\r\n        payoutsTo[_customerAddress] -= _updatedPayouts;\r\n\r\n        dividendPool = dividendPool.add(_dividendFee);\r\n\r\n        emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n        emit onTokenSell(_customerAddress, _amountOfTokens, _taxedHEX, now);\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) isActivated hasDripped onlyTokenHolders external returns (bool) {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens > 0 && _amountOfTokens <= tokenBalanceLedger[_customerAddress].sub(lockedTokenBalanceLedger[_customerAddress]));\r\n\r\n        if (myDividends(true) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = _amountOfTokens.mul(transferFee).div(100);\r\n        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\r\n\r\n        tokenBalanceLedger[_customerAddress] = tokenBalanceLedger[_customerAddress].sub(_amountOfTokens);\r\n        tokenBalanceLedger[_toAddress] = tokenBalanceLedger[_toAddress].add(_taxedTokens);\r\n        tokenBalanceLedger[owner] = tokenBalanceLedger[owner].add(_tokenFee);\r\n\r\n        payoutsTo[_customerAddress] -= (int256) (profitPerShare * _amountOfTokens);\r\n        payoutsTo[_toAddress] += (int256) (profitPerShare * _taxedTokens);\r\n        payoutsTo[owner] += (int256) (profitPerShare * _tokenFee);\r\n\r\n        emit Transfer(_customerAddress, owner, _tokenFee);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function stakeStart(uint256 _amount, uint256 _days) public isStakeActivated {\r\n        require(_amount <= 4722366482869645213695);\r\n        require(balanceOf(msg.sender, true) >= _amount);\r\n\r\n        erc20.stakeStart(_amount, _days); // revert or succeed\r\n\r\n        uint256 _stakeIndex;\r\n        uint40 _stakeID;\r\n        uint72 _stakeShares;\r\n        uint16 _lockedDay;\r\n        uint16 _stakedDays;\r\n\r\n        _stakeIndex = erc20.stakeCount(address(this));\r\n        _stakeIndex = SafeMath.sub(_stakeIndex, 1);\r\n\r\n        (_stakeID,,_stakeShares,_lockedDay,_stakedDays,,) = erc20.stakeLists(address(this), _stakeIndex);\r\n\r\n        uint256 _uniqueID =  uint256(keccak256(abi.encodePacked(_stakeID, _stakeShares))); // unique enough\r\n        require(stakeLists[msg.sender][_uniqueID].started == false); // still check for collision\r\n        stakeLists[msg.sender][_uniqueID].started = true;\r\n\r\n        stakeLists[msg.sender][_uniqueID] = StakeStore(_stakeID, _amount, _stakeShares, _lockedDay, _stakedDays, uint16(0), true, false);\r\n\r\n        totalStakeBalance = SafeMath.add(totalStakeBalance, _amount);\r\n\r\n        playerStats[msg.sender].activeStakes += 1;\r\n        playerStats[msg.sender].staked += _amount;\r\n\r\n        lockedTokenBalanceLedger[msg.sender] = SafeMath.add(lockedTokenBalanceLedger[msg.sender], _amount);\r\n\r\n        emit onStakeStart(msg.sender, _uniqueID, now);\r\n    }\r\n\r\n    function _stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) private view returns (uint16){\r\n        uint40 _stakeID;\r\n        uint72 _stakedHearts;\r\n        uint72 _stakeShares;\r\n        uint16 _lockedDay;\r\n        uint16 _stakedDays;\r\n        uint16 _unlockedDay;\r\n\r\n        (_stakeID,_stakedHearts,_stakeShares,_lockedDay,_stakedDays,_unlockedDay,) = erc20.stakeLists(address(this), _stakeIndex);\r\n        require(stakeLists[msg.sender][_uniqueID].started == true && stakeLists[msg.sender][_uniqueID].ended == false);\r\n        require(stakeLists[msg.sender][_uniqueID].stakeID == _stakeIdParam && _stakeIdParam == _stakeID);\r\n        require(stakeLists[msg.sender][_uniqueID].hexAmount == uint256(_stakedHearts));\r\n        require(stakeLists[msg.sender][_uniqueID].stakeShares == _stakeShares);\r\n        require(stakeLists[msg.sender][_uniqueID].lockedDay == _lockedDay);\r\n        require(stakeLists[msg.sender][_uniqueID].stakedDays == _stakedDays);\r\n\r\n        return _unlockedDay;\r\n    }\r\n\r\n    function stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) hasDripped public {\r\n        uint16 _unlockedDay = _stakeEnd(_stakeIndex, _stakeIdParam, _uniqueID);\r\n\r\n        if (_unlockedDay == 0){\r\n          stakeLists[msg.sender][_uniqueID].unlockedDay = uint16(erc20.currentDay()); // no penalty/penalty/reward\r\n        } else {\r\n          stakeLists[msg.sender][_uniqueID].unlockedDay = _unlockedDay;\r\n        }\r\n\r\n        uint256 _balance = erc20.balanceOf(address(this));\r\n\r\n        erc20.stakeEnd(_stakeIndex, _stakeIdParam); // revert or 0 or less or equal or more hex returned.\r\n        stakeLists[msg.sender][_uniqueID].ended = true;\r\n\r\n        uint256 _amount = SafeMath.sub(erc20.balanceOf(address(this)), _balance);\r\n        uint256 _stakedAmount = stakeLists[msg.sender][_uniqueID].hexAmount;\r\n        uint256 _difference;\r\n\r\n        if (_amount <= _stakedAmount) {\r\n          _difference = SafeMath.sub(_stakedAmount, _amount);\r\n          tokenSupply = SafeMath.sub(tokenSupply, _difference);\r\n          tokenBalanceLedger[msg.sender] = SafeMath.sub(tokenBalanceLedger[msg.sender], _difference);\r\n          int256 _updatedPayouts = (int256) (profitPerShare * _difference);\r\n          payoutsTo[msg.sender] -= _updatedPayouts;\r\n          emit Transfer(msg.sender, address(0), _difference);\r\n        } else if (_amount > _stakedAmount) {\r\n          _difference = SafeMath.sub(_amount, _stakedAmount);\r\n          _difference = purchaseTokens(address(0), msg.sender, _difference);\r\n        }\r\n\r\n        totalStakeBalance = SafeMath.sub(totalStakeBalance, _stakedAmount);\r\n        playerStats[msg.sender].activeStakes -= 1;\r\n\r\n        lockedTokenBalanceLedger[msg.sender] = SafeMath.sub(lockedTokenBalanceLedger[msg.sender], _stakedAmount);\r\n\r\n        emit onStakeEnd(msg.sender, _uniqueID, _amount, now);\r\n    }\r\n\r\n    function setName(string memory _name) onlyOwner public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string memory _symbol) onlyOwner public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setHexStaking(bool _stakeActivated) onlyOwner public\r\n    {\r\n        stakeActivated = _stakeActivated;\r\n    }\r\n\r\n    function setFeeding(bool _feedActivated) onlyOwner public\r\n    {\r\n        feedActivated = _feedActivated;\r\n    }\r\n\r\n    function setUniswapAddress(address _proposedAddress) onlyOwner public\r\n    {\r\n       uniswapAddress = _proposedAddress;\r\n    }\r\n\r\n    function approveAddress1(address _proposedAddress) onlyOwner public\r\n    {\r\n       approvedAddress1 = _proposedAddress;\r\n    }\r\n\r\n    function approveAddress2(address _proposedAddress) onlyCustodian public\r\n    {\r\n       approvedAddress2 = _proposedAddress;\r\n    }\r\n\r\n    function setDistributionAddress() public\r\n    {\r\n        require(approvedAddress1 != address(0) && approvedAddress1 == approvedAddress2);\r\n        distributionAddress = approvedAddress1;\r\n        stablethdist = DIST(approvedAddress1);\r\n    }\r\n\r\n    function approveDrip1(uint8 _percentage) onlyOwner public\r\n    {\r\n        require(_percentage > 1 && _percentage < 6);\r\n        percentage1 = _percentage;\r\n    }\r\n\r\n    function approveDrip2(uint8 _percentage) onlyCustodian public\r\n    {\r\n        require(_percentage > 1 && _percentage < 6);\r\n        percentage2 = _percentage;\r\n    }\r\n\r\n    function setDripPercentage() public\r\n    {\r\n        require(percentage1 == percentage2);\r\n        dailyRate = 86400 / percentage1 * 100;\r\n    }\r\n\r\n    function totalHexBalance() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply;\r\n    }\r\n\r\n    function myTokens(bool _stakeable) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress, _stakeable);\r\n    }\r\n\r\n    function myEstimateDividends(bool _includeReferralBonus, bool _dayEstimate) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? estimateDividendsOf(_customerAddress, _dayEstimate) + referralBalance[_customerAddress] : estimateDividendsOf(_customerAddress, _dayEstimate) ;\r\n    }\r\n\r\n    function estimateDividendsOf(address _customerAddress, bool _dayEstimate) public view returns (uint256) {\r\n        uint256 _profitPerShare = profitPerShare;\r\n\r\n        if (dividendPool > 0) {\r\n          uint256 secondsPassed = 0;\r\n\r\n          if (_dayEstimate == true){\r\n            secondsPassed = 86400;\r\n          } else {\r\n            secondsPassed = SafeMath.sub(now, lastDripTime);\r\n          }\r\n\r\n          uint256 dividends = secondsPassed.mul(dividendPool).div(dailyRate);\r\n\r\n          if (dividends > dividendPool) {\r\n            dividends = dividendPool;\r\n          }\r\n\r\n          _profitPerShare = SafeMath.add(_profitPerShare, (dividends * divMagnitude) / tokenSupply);\r\n        }\r\n\r\n        return (uint256) ((int256) (_profitPerShare * tokenBalanceLedger[_customerAddress]) - payoutsTo[_customerAddress]) / divMagnitude;\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare * tokenBalanceLedger[_customerAddress]) - payoutsTo[_customerAddress]) / divMagnitude;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress, bool _stakeable) public view returns (uint256) {\r\n        if (_stakeable == false) {\r\n            return tokenBalanceLedger[_customerAddress];\r\n        }\r\n        else if (_stakeable == true) {\r\n            return (tokenBalanceLedger[_customerAddress].sub(lockedTokenBalanceLedger[_customerAddress]));\r\n        }\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        uint256 _hex = 1e8;\r\n        uint256 _dividendFee = _hex.mul(sellOutFee).div(100);\r\n        uint256 _devFee = _hex.mul(devFee).div(100);\r\n\r\n        return (_hex.sub(_dividendFee).sub(_devFee));\r\n    }\r\n\r\n    function buyPrice() public view returns(uint256) {\r\n        uint256 _hex = 1e8;\r\n        uint256 _entryFee = _hex.mul(50).div(100);\r\n        return (_hex.add(_entryFee));\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _tronToSpend) public view returns (uint256) {\r\n        uint256 _entryFee = _tronToSpend.mul(50).div(100);\r\n        uint256 _amountOfTokens = _tronToSpend.sub(_entryFee);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateHexReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply);\r\n        uint256 _exitFee = _tokensToSell.mul(10).div(100);\r\n        uint256 _taxedHEX = _tokensToSell.sub(_exitFee);\r\n\r\n        return _taxedHEX;\r\n    }\r\n\r\n    function hexToSendFund(bytes32 exchange) public view returns(uint256) {\r\n        if (exchange == \"hexmax\") {\r\n          return totalMaxFundCollected.sub(totalMaxFundReceived);\r\n        } else if (exchange == \"stableth\") {\r\n          return totalStableFundCollected.sub(totalStableFundReceived);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingHEX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"approveDrip1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"approveDrip2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateHexReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tronToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodianAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dayEstimate\",\"type\":\"bool\"}],\"name\":\"estimateDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"exchange\",\"type\":\"bytes32\"}],\"name\":\"hexToSendFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokenBalanceLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_dayEstimate\",\"type\":\"bool\"}],\"name\":\"myEstimateDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"exchange\",\"type\":\"bytes32\"}],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage2\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeStakes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDistributionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDripPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feedActivated\",\"type\":\"bool\"}],\"name\":\"setFeeding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakeActivated\",\"type\":\"bool\"}],\"name\":\"setHexStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"setUniswapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_stakeIdParam\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeID\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHexBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMaxFundCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMaxFundReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStableFundCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStableFundReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HTI","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0c3a0e08bae2c92473d4a5ac651f0aa3b44faba9dc59a3abfa9f1f068bc1c585"}]}