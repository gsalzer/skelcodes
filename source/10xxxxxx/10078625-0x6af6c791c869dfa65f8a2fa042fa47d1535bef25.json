{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface SoloMarginContract {\r\n\r\n    struct Info {\r\n        address owner;\r\n        uint256 number;\r\n    }\r\n\r\n    enum ActionType {\r\n        Deposit,\r\n        Withdraw,\r\n        Transfer,\r\n        Buy,\r\n        Sell,\r\n        Trade,\r\n        Liquidate,\r\n        Vaporize,\r\n        Call\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei,\r\n        Par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta,\r\n        Target\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign;\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign;\r\n        uint256 value;\r\n    }\r\n\r\n    function operate(Info[] calldata accounts, ActionArgs[] calldata actions) external;\r\n    function getAccountWei(Info calldata account, uint256 marketId) external returns (Wei memory);\r\n    function getNumMarkets() external view returns (uint256);\r\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return memory variable address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n     */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n     */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev emit event on event contract\r\n     */\r\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\r\n        (uint model, uint id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 18);\r\n    }\r\n\r\n}\r\n\r\ncontract DSMath {\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n}\r\n\r\ncontract DydxHelpers is DSMath, Stores {\r\n    /**\r\n     * @dev get WETH address\r\n    */\r\n    function getWETHAddr() public pure returns (address weth) {\r\n        weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev get Dydx Solo Address\r\n    */\r\n    function getDydxAddress() public pure returns (address addr) {\r\n        addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Dydx Actions args.\r\n    */\r\n    function getActionsArgs(uint256 marketId, uint256 amt, bool sign) internal view returns (SoloMarginContract.ActionArgs[] memory) {\r\n        SoloMarginContract.ActionArgs[] memory actions = new SoloMarginContract.ActionArgs[](1);\r\n        SoloMarginContract.AssetAmount memory amount = SoloMarginContract.AssetAmount(\r\n            sign,\r\n            SoloMarginContract.AssetDenomination.Wei,\r\n            SoloMarginContract.AssetReference.Delta,\r\n            amt\r\n        );\r\n        bytes memory empty;\r\n        SoloMarginContract.ActionType action = sign ? SoloMarginContract.ActionType.Deposit : SoloMarginContract.ActionType.Withdraw;\r\n        actions[0] = SoloMarginContract.ActionArgs(\r\n            action,\r\n            0,\r\n            amount,\r\n            marketId,\r\n            0,\r\n            address(this),\r\n            0,\r\n            empty\r\n        );\r\n        return actions;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Dydx Acccount arg\r\n    */\r\n    function getAccountArgs() internal view returns (SoloMarginContract.Info[] memory) {\r\n        SoloMarginContract.Info[] memory accounts = new SoloMarginContract.Info[](1);\r\n        accounts[0] = (SoloMarginContract.Info(address(this), 0));\r\n        return accounts;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Dydx Position\r\n    */\r\n    function getDydxPosition(SoloMarginContract solo, uint256 marketId) internal returns (uint tokenBal, bool tokenSign) {\r\n        SoloMarginContract.Wei memory tokenWeiBal = solo.getAccountWei(getAccountArgs()[0], marketId);\r\n        tokenBal = tokenWeiBal.value;\r\n        tokenSign = tokenWeiBal.sign;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Dydx Market ID from token Address\r\n    */\r\n    function getMarketId(SoloMarginContract solo, address token) internal view returns (uint _marketId) {\r\n        uint markets = solo.getNumMarkets();\r\n        address _token = token == getEthAddr() ? getWETHAddr() : token;\r\n\r\n        for (uint i = 0; i < markets; i++) {\r\n            if (_token == solo.getMarketTokenAddress(i)) {\r\n                _marketId = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract BasicResolver is DydxHelpers {\r\n    event LogDeposit(address indexed token, uint marketId, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogWithdraw(address indexed token, uint marketId, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogBorrow(address indexed token, uint marketId, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogPayback(address indexed token, uint marketId, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Deposit ETH/ERC20_Token.\r\n     * @param token token address to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount to deposit.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function deposit(address token, uint amt, uint getId, uint setId) external payable{\r\n        SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _marketId = getMarketId(dydxContract, token);\r\n\r\n        (uint depositedAmt, bool sign) = getDydxPosition(dydxContract, _marketId);\r\n        require(depositedAmt == 0 || sign, \"token-borrowed\");\r\n\r\n        if (token == getEthAddr()) {\r\n            TokenInterface tokenContract = TokenInterface(getWETHAddr());\r\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\r\n            tokenContract.deposit.value(_amt)();\r\n            tokenContract.approve(getDydxAddress(), _amt);\r\n        } else {\r\n            TokenInterface tokenContract = TokenInterface(token);\r\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\r\n            tokenContract.approve(getDydxAddress(), _amt);\r\n        }\r\n\r\n        dydxContract.operate(getAccountArgs(), getActionsArgs(_marketId, _amt, true));\r\n        setUint(setId, _amt);\r\n\r\n        emit LogDeposit(token, _marketId, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogDeposit(address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _marketId, _amt, getId, setId);\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH/ERC20_Token.\r\n     * @param token token address to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount to withdraw.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdraw(address token, uint amt, uint getId, uint setId) external payable{\r\n        SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _marketId = getMarketId(dydxContract, token);\r\n\r\n        (uint depositedAmt, bool sign) = getDydxPosition(dydxContract, _marketId);\r\n        require(sign, \"try-payback\");\r\n\r\n        _amt = _amt == uint(-1) ? depositedAmt : _amt;\r\n        require(_amt <= depositedAmt, \"withdraw-exceeds\");\r\n\r\n        dydxContract.operate(getAccountArgs(), getActionsArgs(_marketId, _amt, false));\r\n\r\n        if (token == getEthAddr()) {\r\n            TokenInterface tokenContract = TokenInterface(getWETHAddr());\r\n            tokenContract.approve(address(tokenContract), _amt);\r\n            tokenContract.withdraw(_amt);\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdraw(token, _marketId, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdraw(address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _marketId, _amt, getId, setId);\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Borrow ETH/ERC20_Token.\r\n     * @param token token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount to borrow.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function borrow(address token, uint amt, uint getId, uint setId) external payable {\r\n        SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _marketId = getMarketId(dydxContract, token);\r\n\r\n        (uint borrowedAmt, bool sign) = getDydxPosition(dydxContract, _marketId);\r\n        require(borrowedAmt == 0 || !sign, \"token-deposited\");\r\n\r\n        dydxContract.operate(getAccountArgs(), getActionsArgs(_marketId, _amt, false));\r\n\r\n        if (token == getEthAddr()) {\r\n            TokenInterface tokenContract = TokenInterface(getWETHAddr());\r\n            tokenContract.approve(address(tokenContract), _amt);\r\n            tokenContract.withdraw(_amt);\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogBorrow(token, _marketId, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogBorrow(address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _marketId, _amt, getId, setId);\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed ETH/ERC20_Token.\r\n     * @param token token address to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount to payback.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function payback(address token, uint amt, uint getId, uint setId) external payable {\r\n        SoloMarginContract dydxContract = SoloMarginContract(getDydxAddress());\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _marketId = getMarketId(dydxContract, token);\r\n\r\n        (uint borrowedAmt, bool sign) = getDydxPosition(dydxContract, _marketId);\r\n        require(!sign, \"try-withdraw\");\r\n\r\n        _amt = _amt == uint(-1) ? borrowedAmt : _amt;\r\n        require(_amt <= borrowedAmt, \"payback-exceeds\");\r\n\r\n        if (token == getEthAddr()) {\r\n            TokenInterface tokenContract = TokenInterface(getWETHAddr());\r\n            require(address(this).balance >= _amt, \"not-enough-eth\");\r\n            tokenContract.deposit.value(_amt)();\r\n            tokenContract.approve(getDydxAddress(), _amt);\r\n        } else {\r\n            TokenInterface tokenContract = TokenInterface(token);\r\n            require(tokenContract.balanceOf(address(this)) >= _amt, \"not-enough-token\");\r\n            tokenContract.approve(getDydxAddress(), _amt);\r\n        }\r\n\r\n        dydxContract.operate(getAccountArgs(), getActionsArgs(_marketId, _amt, true));\r\n        setUint(setId, _amt);\r\n\r\n        emit LogPayback(token, _marketId, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogPayback(address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _marketId, _amt, getId, setId);\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract ConnectDydx is BasicResolver {\r\n    string public name = \"Dydx-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDydxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectDydx","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4db37084d64d02e5f971be4fa2b4dcb4a1ae0495927b555b2768beb4b0287a5e"}]}