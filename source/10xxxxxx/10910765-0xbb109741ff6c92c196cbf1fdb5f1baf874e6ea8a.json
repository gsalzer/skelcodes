{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AaveGenesisExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IProxyWithAdminActions} from './interfaces/IProxyWithAdminActions.sol';\\nimport {\\n  ILendToAaveMigratorImplWithInitialize\\n} from './interfaces/ILendToAaveMigratorImplWithInitialize.sol';\\nimport {IAaveTokenImpl} from './interfaces/IAaveTokenImpl.sol';\\nimport {\\n  IAaveIncentivesVaultImplWithInitialize\\n} from './interfaces/IAaveIncentivesVaultImplWithInitialize.sol';\\nimport {IStakedAaveImplWithInitialize} from './interfaces/IStakedAaveImplWithInitialize.sol';\\n\\nimport {IAaveGenesisExecutor} from './interfaces/IAaveGenesisExecutor.sol';\\n\\n/**\\n * @title AaveGenesisExecutor\\n * @notice Smart contract to trigger the LEND -> AAVE migration and enable the staking Safety Module\\n * - The Aave Governance, on the payload of the proposal will call `setActivationBlock()` with the block\\n *   number at which the migration and staking starts\\n * - Once that block number is reached, `startMigration()` will be opened to call by anybody, to execute the\\n *   programmed process\\n * - As to execute all the operations with proxy contracts this contract needs to be the admin, a `returnAdminsToGovernance()`\\n *   function has be added to return back the admin rights to the Aave Governance if after 1 day of the `activationBlock` the\\n *   ownership of the proxies is still on this contract\\n * @author Aave\\n **/\\ncontract AaveGenesisExecutor is IAaveGenesisExecutor {\\n  address public immutable AAVE_GOVERNANCE;\\n  IProxyWithAdminActions public immutable LEND_TO_AAVE_MIGRATOR_PROXY;\\n  ILendToAaveMigratorImplWithInitialize public immutable LEND_TO_AAVE_MIGRATOR_IMPL;\\n  IProxyWithAdminActions public immutable AAVE_TOKEN_PROXY;\\n  IAaveTokenImpl public immutable AAVE_TOKEN_IMPL;\\n  IProxyWithAdminActions public immutable AAVE_INCENTIVES_VAULT_PROXY;\\n  IAaveIncentivesVaultImplWithInitialize public immutable AAVE_INCENTIVES_VAULT_IMPL;\\n  IProxyWithAdminActions public immutable STAKED_AAVE_PROXY;\\n\\n  /// @dev Number of blocks per day\\n  uint256 public constant BLOCKS_PER_DAY = 6650;\\n\\n  /// @dev Allowance of AAVE given by the AaveIncentivesVault to the StakedAave to pull incentives for stakers\\n  uint256 public immutable AAVE_ALLOWANCE_FOR_STAKE;\\n\\n  /// @dev Block number of when the activateMigration() will be triggered\\n  uint256 internal activationBlock;\\n\\n  constructor(\\n    address aaveGovernance,\\n    uint256 aaveAllowanceForStake,\\n    IProxyWithAdminActions lendToAaveMigratorProxy,\\n    ILendToAaveMigratorImplWithInitialize lendToAaveMigratorImpl,\\n    IProxyWithAdminActions aaveTokenProxy,\\n    IAaveTokenImpl aaveTokenImpl,\\n    IProxyWithAdminActions aaveIncentivesVaultProxy,\\n    IAaveIncentivesVaultImplWithInitialize aaveIncentivesVaultImpl,\\n    IProxyWithAdminActions stakedAaveProxy\\n  ) public {\\n    AAVE_GOVERNANCE = aaveGovernance;\\n    AAVE_ALLOWANCE_FOR_STAKE = aaveAllowanceForStake;\\n    LEND_TO_AAVE_MIGRATOR_PROXY = lendToAaveMigratorProxy;\\n    LEND_TO_AAVE_MIGRATOR_IMPL = lendToAaveMigratorImpl;\\n    AAVE_TOKEN_PROXY = aaveTokenProxy;\\n    AAVE_TOKEN_IMPL = aaveTokenImpl;\\n    AAVE_INCENTIVES_VAULT_PROXY = aaveIncentivesVaultProxy;\\n    AAVE_INCENTIVES_VAULT_IMPL = aaveIncentivesVaultImpl;\\n    STAKED_AAVE_PROXY = stakedAaveProxy;\\n  }\\n\\n  /**\\n   * @dev Called by the Aave Governance contract to set the block at which the LEND -> AAVE and the staking will start\\n   * @param blockNumber The future block number\\n   */\\n  function setActivationBlock(uint256 blockNumber) external override {\\n    require(msg.sender == AAVE_GOVERNANCE);\\n\\n    activationBlock = blockNumber;\\n\\n    emit MigrationProgrammedForBlock(blockNumber);\\n  }\\n\\n  /**\\n   * @dev Once the `activationBlock` is reached, this funcion can be called by anybody to trigger the migration + startup of staking\\n   */\\n  function startMigration() external override {\\n    // ensures that the migration can only be called after the initialization has been performed\\n    require(activationBlock != 0 && block.number >= activationBlock);\\n\\n    // step 1: Initializes the LendToAaveMigrator to enable the migration contract\\n    bytes memory migratorParams = abi.encodeWithSelector(\\n      LEND_TO_AAVE_MIGRATOR_IMPL.initialize.selector\\n    );\\n    LEND_TO_AAVE_MIGRATOR_PROXY.upgradeToAndCall(\\n      address(LEND_TO_AAVE_MIGRATOR_IMPL),\\n      migratorParams\\n    );\\n\\n    // step 2: Initializes the AAVE token. The initialization triggers the following events:\\n    // - 13M AAVE are minted to the LendToAaveMigrator, which enables the migration process\\n    // - 3M AAVE are minted to the incentives vault\\n    bytes memory aaveTokenParams = abi.encodeWithSelector(\\n      AAVE_TOKEN_IMPL.initialize.selector,\\n      address(LEND_TO_AAVE_MIGRATOR_PROXY),\\n      address(AAVE_INCENTIVES_VAULT_PROXY), // Where the incentives will be minted to\\n      address(0) // No hook to the governance is needed for now on the AaveToken\\n    );\\n    AAVE_TOKEN_PROXY.upgradeToAndCall(address(AAVE_TOKEN_IMPL), aaveTokenParams);\\n\\n    // step 3: Initializes the Aave incentives vault.\\n    // The initialization will approve the Aave stake to pull funds from the vault in order to distribute\\n    // staking incentives\\n    bytes memory aaveIncentivesVaultParams = abi.encodeWithSelector(\\n      AAVE_INCENTIVES_VAULT_IMPL.initialize.selector,\\n      address(AAVE_TOKEN_PROXY),\\n      address(STAKED_AAVE_PROXY), // The StakedAave will be approved to pull AAVE for incentives\\n      AAVE_ALLOWANCE_FOR_STAKE\\n    );\\n    AAVE_INCENTIVES_VAULT_PROXY.upgradeToAndCall(\\n      address(AAVE_INCENTIVES_VAULT_IMPL),\\n      aaveIncentivesVaultParams\\n    );\\n\\n    _returnAdminsToGovernance();\\n\\n    emit MigrationStarted();\\n  }\\n\\n  /**\\n   * @dev Emergency function to return the admin rights on all the proxy contracts if something went wrong on `startMigration()`.\\n   * - Anybody can call it once > ~1 day in blocks passed since the `activationBlock`\\n   */\\n  function returnAdminsToGovernance() external override {\\n    require(activationBlock != 0 && block.number >= activationBlock + BLOCKS_PER_DAY);\\n\\n    _returnAdminsToGovernance();\\n  }\\n\\n  function _returnAdminsToGovernance() private {\\n    LEND_TO_AAVE_MIGRATOR_PROXY.changeAdmin(AAVE_GOVERNANCE);\\n    AAVE_TOKEN_PROXY.changeAdmin(AAVE_GOVERNANCE);\\n    AAVE_INCENTIVES_VAULT_PROXY.changeAdmin(AAVE_GOVERNANCE);\\n    STAKED_AAVE_PROXY.changeAdmin(AAVE_GOVERNANCE);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyWithAdminActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IProxyWithAdminActions {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n  function changeAdmin(address newAdmin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendToAaveMigratorImplWithInitialize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface ILendToAaveMigratorImplWithInitialize {\\n  function initialize() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveTokenImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IAaveTokenImpl {\\n  function initialize(\\n    address migrator,\\n    address distributor,\\n    address aaveGovernance\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesVaultImplWithInitialize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IAaveIncentivesVaultImplWithInitialize {\\n  function initialize(\\n    address aave,\\n    address stakedAave,\\n    uint256 initialStakingDistribution\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakedAaveImplWithInitialize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IStakedAaveImplWithInitialize {\\n  function initialize(\\n    address aaveGovernance,\\n    string calldata name,\\n    string calldata symbol,\\n    uint8 decimals\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveGenesisExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IAaveGenesisExecutor {\\n    event MigrationProgrammedForBlock(uint256 blockNumber);\\n    event MigrationStarted();\\n\\n    function setActivationBlock(uint256 blockNumber) external;\\n    function startMigration() external;\\n    function returnAdminsToGovernance() external;\\n}\"\r\n    },\r\n    \"contracts/AaveGenesisProposalPayload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IProposalExecutor} from './interfaces/IProposalExecutor.sol';\\nimport {IAaveGenesisExecutor} from './interfaces/IAaveGenesisExecutor.sol';\\nimport {IProxyWithAdminActions} from './interfaces/IProxyWithAdminActions.sol';\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {IAssetVotingWeightProvider} from './interfaces/IAssetVotingWeightProvider.sol';\\nimport {IStakedAaveConfig} from './interfaces/IStakedAaveConfig.sol';\\n\\n/**\\n * @title AaveGenesisProposalPayload\\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\\n * - Transfers ownership of the different proxies to the `AaveGenesisExecutor`\\n * - Lists AAVE and stkAAVE as voting asset in the Aave Governance\\n * - Activates the cooldown for the activation of the LEND -> AAVE migration\\n * @author Aave\\n **/\\ncontract AaveGenesisProposalPayload is IProposalExecutor {\\n  event ProposalExecuted();\\n\\n  /// @dev Voting weight to set for AAVE and stkAAVE in the governance\\n  /// 100 as 100 LEND = 1 AAVE = 1 stkAAVE and the voting weight of LEND is 1\\n  uint256 public constant NEW_ASSETS_VOTING_WEIGHT = 100;\\n\\n  /// @dev Initial emission per second approved by the Aave community: 400 AAVE/day\\n  uint128 public constant EMISSION_PER_SECOND_FOR_STAKED_AAVE = 0.00462962962962963 ether;\\n\\n  /// @dev Delta of blocks from the execution of this payload until the activation of the migration\\n  uint256 public immutable ACTIVATION_BLOCK_DELAY;\\n\\n  /// @dev The smart contract that will execute the activation of the migration (`AaveGenesisExecutor`)\\n  IAaveGenesisExecutor public immutable AAVE_GENESIS_EXECUTOR;\\n\\n  /// @dev The smart contract registry for the voting weights of all the whitelisted voting assets on the Aave governance\\n  IAssetVotingWeightProvider public immutable ASSET_VOTING_WEIGHT_PROVIDER;\\n\\n  /// @dev Proxy contracts involved in the migration. This payload contract will need to transfer the admin rights of them,\\n  /// to allow it to do the upgrade of the implementations\\n  IProxyWithAdminActions public immutable LEND_TO_AAVE_MIGRATOR_PROXY;\\n  IProxyWithAdminActions public immutable AAVE_TOKEN_PROXY;\\n  IProxyWithAdminActions public immutable AAVE_INCENTIVES_VAULT_PROXY;\\n  IProxyWithAdminActions public immutable STAKED_AAVE_PROXY;\\n\\n  constructor(\\n    uint256 activationBlockDelay,\\n    IAssetVotingWeightProvider assetVotingWeightProvider,\\n    IAaveGenesisExecutor aaveGenesisExecutor,\\n    IProxyWithAdminActions lendToAaveMigratorProxy,\\n    IProxyWithAdminActions aaveTokenProxy,\\n    IProxyWithAdminActions aaveIncentivesVaultProxy,\\n    IProxyWithAdminActions stakedAaveProxy\\n  ) public {\\n    ACTIVATION_BLOCK_DELAY = activationBlockDelay;\\n    ASSET_VOTING_WEIGHT_PROVIDER = assetVotingWeightProvider;\\n    AAVE_GENESIS_EXECUTOR = aaveGenesisExecutor;\\n    LEND_TO_AAVE_MIGRATOR_PROXY = lendToAaveMigratorProxy;\\n    AAVE_TOKEN_PROXY = aaveTokenProxy;\\n    AAVE_INCENTIVES_VAULT_PROXY = aaveIncentivesVaultProxy;\\n    STAKED_AAVE_PROXY = stakedAaveProxy;\\n  }\\n\\n  /**\\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\\n   */\\n  function execute() external override {\\n    address newAdmin = address(AAVE_GENESIS_EXECUTOR);\\n\\n    LEND_TO_AAVE_MIGRATOR_PROXY.changeAdmin(newAdmin);\\n    AAVE_TOKEN_PROXY.changeAdmin(newAdmin);\\n    AAVE_INCENTIVES_VAULT_PROXY.changeAdmin(newAdmin);\\n    STAKED_AAVE_PROXY.changeAdmin(newAdmin);\\n\\n    ASSET_VOTING_WEIGHT_PROVIDER.setVotingWeight(\\n      IERC20(address(AAVE_TOKEN_PROXY)),\\n      NEW_ASSETS_VOTING_WEIGHT\\n    );\\n\\n    // After transferring the admin to `newAdmin`, as this contract is the EMISSION_MANAGER of StakedAave,\\n    // we configure the initial emission of AAVE incentives\\n    IStakedAaveConfig.AssetConfigInput[] memory config = new IStakedAaveConfig.AssetConfigInput[](\\n      1\\n    );\\n    config[0] = IStakedAaveConfig.AssetConfigInput({\\n      emissionPerSecond: EMISSION_PER_SECOND_FOR_STAKED_AAVE,\\n      totalStaked: 0,\\n      underlyingAsset: address(AAVE_TOKEN_PROXY)\\n    });\\n\\n    IStakedAaveConfig(address(STAKED_AAVE_PROXY)).configureAssets(config);\\n\\n    AAVE_GENESIS_EXECUTOR.setActivationBlock(block.number + ACTIVATION_BLOCK_DELAY);\\n    emit ProposalExecuted();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProposalExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IProposalExecutor {\\n    function execute() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetVotingWeightProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IAssetVotingWeightProvider {\\n    function getVotingWeight(IERC20 _asset) external view returns(uint256);\\n    function setVotingWeight(IERC20 _asset, uint256 _weight) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakedAaveConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStakedAaveConfig {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  function configureAssets(AssetConfigInput[] calldata assetsConfigInput) external;\\n}\\n\"\r\n    },\r\n    \"contracts/AaveIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {VersionedInitializable} from './libs/VersionedInitializable.sol';\\nimport {SafeERC20} from './libs/SafeERC20.sol';\\n\\n/**\\n * @title AaveIncentivesVault\\n * @notice Stores all the AAVE kept for incentives, just giving approval to the different\\n * systems that will pull AAVE funds for their specific use case\\n * @author Aave\\n **/\\ncontract AaveIncentivesVault is VersionedInitializable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant REVISION = 1;\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   */\\n  function getRevision() internal override pure returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev initializes the contract upon assignment to the InitializableAdminUpgradeabilityProxy\\n   * On this first revision:\\n   * - Approves the StakedAave contract to pull AAVE funds to distribute as incentives\\n   * @param aave Address of the AAVE token\\n   * @param stakedAave Address of the stkAAVE token (AAVE staking contract)\\n   * @param initialStakingDistribution Amount of AAVE to approve to the stkAAVE contract\\n   */\\n  function initialize(\\n    IERC20 aave,\\n    address stakedAave,\\n    uint256 initialStakingDistribution\\n  ) external initializer {\\n    aave.safeApprove(stakedAave, initialStakingDistribution);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal virtual pure returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\n/**\\n * @dev Interface for ERC20 including metadata\\n **/\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32\\n    internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), 'Cannot change the admin of a proxy to the zero address');\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\n    external\\n    payable\\n    ifAdmin\\n  {\\n    _upgradeTo(newImplementation);\\n    (bool success, ) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return adm The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal virtual override {\\n    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './Proxy.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32\\n    internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal override view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(\\n      Address.isContract(newImplementation),\\n      'Cannot set a proxy implementation to a non-contract address'\\n    );\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal virtual view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {}\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal virtual view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal virtual view returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IERC20Detailed} from '../interfaces/IERC20Detailed.sol';\\nimport {Context} from './Context.sol';\\nimport {SafeMath} from './SafeMath.sol';\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave\\n **/\\ncontract ERC20 is Context, IERC20, IERC20Detailed {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n  }\\n\\n  /**\\n   * @return the name of the token\\n   **/\\n  function name() public override view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @return the symbol of the token\\n   **/\\n  function symbol() public override view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @return the decimals of the token\\n   **/\\n  function decimals() public override view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @return the total supply of the token\\n   **/\\n  function totalSupply() public override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @return the balance of the token\\n   **/\\n  function balanceOf(address account) public override view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev executes a transfer of tokens from msg.sender to recipient\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev returns the allowance of spender on the tokens owned by owner\\n   * @param owner the owner of the tokens\\n   * @param spender the user allowed to spend the owner's tokens\\n   * @return the amount of owner's tokens spender is allowed to spend\\n   **/\\n  function allowance(address owner, address spender)\\n    public\\n    virtual\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev allows spender to spend the tokens owned by msg.sender\\n   * @param spender the user allowed to spend msg.sender tokens\\n   * @return true\\n   **/\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n   * @param sender the owner of the tokens\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev increases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param addedValue the amount being added to the allowance\\n   * @return true\\n   **/\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev decreases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param subtractedValue the amount being subtracted to the allowance\\n   * @return true\\n   **/\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\nimport './InitializableUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for\\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is\\n  BaseAdminUpgradeabilityProxy,\\n  InitializableUpgradeabilityProxy\\n{\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) public payable {\\n    require(_implementation() == address(0));\\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {\\n    BaseAdminUpgradeabilityProxy._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/MintableErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {ERC20} from '../libs/ERC20.sol';\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract MintableErc20 is ERC20 {\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public ERC20(name, symbol, decimals) {}\\n\\n  /**\\n   * @dev Function to mint tokens\\n   * @param value The amount of tokens to mint.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function mint(uint256 value) public returns (bool) {\\n    _mint(msg.sender, value);\\n    return true;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGovernance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aaveAllowanceForStake\",\"type\":\"uint256\"},{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"lendToAaveMigratorProxy\",\"type\":\"address\"},{\"internalType\":\"contract ILendToAaveMigratorImplWithInitialize\",\"name\":\"lendToAaveMigratorImpl\",\"type\":\"address\"},{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"aaveTokenProxy\",\"type\":\"address\"},{\"internalType\":\"contract IAaveTokenImpl\",\"name\":\"aaveTokenImpl\",\"type\":\"address\"},{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"aaveIncentivesVaultProxy\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesVaultImplWithInitialize\",\"name\":\"aaveIncentivesVaultImpl\",\"type\":\"address\"},{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"stakedAaveProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MigrationProgrammedForBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_ALLOWANCE_FOR_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_GOVERNANCE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_INCENTIVES_VAULT_IMPL\",\"outputs\":[{\"internalType\":\"contract IAaveIncentivesVaultImplWithInitialize\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_INCENTIVES_VAULT_PROXY\",\"outputs\":[{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_TOKEN_IMPL\",\"outputs\":[{\"internalType\":\"contract IAaveTokenImpl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_TOKEN_PROXY\",\"outputs\":[{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_TO_AAVE_MIGRATOR_IMPL\",\"outputs\":[{\"internalType\":\"contract ILendToAaveMigratorImplWithInitialize\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_TO_AAVE_MIGRATOR_PROXY\",\"outputs\":[{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_AAVE_PROXY\",\"outputs\":[{\"internalType\":\"contract IProxyWithAdminActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAdminsToGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setActivationBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveGenesisExecutor","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da8ad436e1dfe962091d86a341e957c6a5168a9d00000000000000000000000000000000000000000000080bfbefcb5f0bc000000000000000000000000000003368fefe5465c5593a3fd09f50d4660309e4738a000000000000000000000000b49c03bf8eba52ec3a53b240036b35470e4129b30000000000000000000000009c0435779f5e52cec404d957c9baa6f7d674c8ba000000000000000000000000d1ec5d22ca2c0a47e06440bff4221c7f1f702d0f000000000000000000000000253f7b06c1d60c1fbbc9d82c301327eb86e3ba81000000000000000000000000238fcb066a2e4662078836237a62b59664d6f76d0000000000000000000000003b42cd463d247aaeffb38cff5d5ee42e9ddc4430","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}