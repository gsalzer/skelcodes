{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Voomo {\r\n    address public owner;\r\n    uint256 public lastUserId = 2;\r\n    uint256 public autoSystemLastUserId = 1;\r\n    uint8 public constant LAST_LEVEL = 12;\r\n    uint256 public constant registrationFee = 0.1 ether;\r\n\r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n    }\r\n\r\n    struct X4 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    struct X3_AUTO {\r\n        uint8 level;\r\n        uint256 upline_id;\r\n        address upline;\r\n        uint256 profit;\r\n        address[] referrals;\r\n    }\r\n\r\n    struct X4_AUTO {\r\n        uint8 level;\r\n        uint256 upline_id;\r\n        address upline;\r\n        uint256 profit;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n    }\r\n\r\n    struct User {\r\n        uint256 id;\r\n        uint256 autoSystemId;\r\n\r\n        address referrer;\r\n        uint256 partnersCount;\r\n\r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX4Levels;\r\n\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X4) x4Matrix;\r\n\r\n        // Only the 1st element will be used\r\n        mapping(uint8 => X3_AUTO) x3Auto;\r\n        mapping(uint8 => X4_AUTO) x4Auto;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(uint256 => address) public autoIdToAddress;\r\n    mapping(uint256 => address) public userIds;\r\n    mapping(address => uint256) public balances;\r\n    mapping(uint8 => uint256) public levelPrice;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint256 indexed userId, uint256 referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n\r\n    event AutoSystemRegistration(address indexed user, address indexed initiator, uint256 indexed userId);\r\n    event AutoSystemLevelUp(address indexed user, uint8 matrix, uint8 level);\r\n    event AutoSystemEarning(address indexed to, address indexed from);\r\n    event AutoSystemReinvest(address indexed to, address from, uint256 amount, uint8 matrix);\r\n\r\n    // -----------------------------------------\r\n    // CONSTRUCTOR\r\n    // -----------------------------------------\r\n\r\n    constructor (address ownerAddress) public {\r\n        require(ownerAddress != address(0), \"constructor: owner address can not be 0x0 address\");\r\n        owner = ownerAddress;\r\n\r\n        levelPrice[1] = 0.025 ether;\r\n        levelPrice[2] = 0.05 ether;\r\n        levelPrice[3] = 0.1 ether;\r\n        levelPrice[4] = 0.2 ether;\r\n        levelPrice[5] = 0.4 ether;\r\n        levelPrice[6] = 0.8 ether;\r\n        levelPrice[7] = 1.6 ether;\r\n        levelPrice[8] = 3.2 ether;\r\n        levelPrice[9] = 6.4 ether;\r\n        levelPrice[10] = 12.8 ether;\r\n        levelPrice[11] = 25.6 ether;\r\n        levelPrice[12] = 51.2 ether;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            autoSystemId: 0,\r\n            referrer: address(0),\r\n            partnersCount: uint256(0)\r\n        });\r\n\r\n        users[ownerAddress] = user;\r\n\r\n        userIds[1] = ownerAddress;\r\n        idToAddress[1] = ownerAddress;\r\n\r\n        // Init levels for X3 and X4 Matrix\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX4Levels[i] = true;\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // FALLBACK\r\n    // -----------------------------------------\r\n\r\n    function () external payable {\r\n        if(msg.data.length == 0) {\r\n            return _registration(msg.sender, owner);\r\n        }\r\n\r\n        _registration(msg.sender, _bytesToAddress(msg.data));\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // SETTERS\r\n    // -----------------------------------------\r\n\r\n    function registration(address referrerAddress) external payable {\r\n        _registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(_isUserExists(msg.sender), \"buyNewLevel: user is not exists\");\r\n        require(matrix == 1 || matrix == 2, \"buyNewLevel: invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"buyNewLevel: invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"buyNewLevel: invalid level\");\r\n\r\n        _buyNewLevel(matrix, level);\r\n    }\r\n\r\n    function checkState() external {\r\n        require(msg.sender == owner, \"checkState: access denied\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // PRIVATE\r\n    // -----------------------------------------\r\n\r\n    function _registration(address userAddress, address referrerAddress) private {\r\n        _registrationValidation(userAddress, referrerAddress);\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            autoSystemId: 0,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n\r\n        users[userAddress] = user;\r\n        userIds[lastUserId] = userAddress;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        _newX3X4Member(userAddress);\r\n        lastUserId++;\r\n\r\n        if (users[referrerAddress].partnersCount == 1) {\r\n            // Register AUTO systems for referrer user\r\n            _newX3X4AutoMember(referrerAddress);\r\n            emit AutoSystemRegistration(referrerAddress, msg.sender, autoSystemLastUserId);\r\n            autoSystemLastUserId++;\r\n        }\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function _registrationValidation(address userAddress, address referrerAddress) private {\r\n        require(msg.value == registrationFee, \"_registrationValidation: registration fee is not correct\");\r\n        require(!_isUserExists(userAddress), \"_registrationValidation: user exists\");\r\n        require(_isUserExists(referrerAddress), \"_registrationValidation: referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n\r\n        require(size == 0, \"_registrationValidation: cannot be a contract\");\r\n    }\r\n\r\n    function _isUserExists(address user) private view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function _isUserAutoSystemActve(address user) private view returns (bool) {\r\n        return (users[user].autoSystemId != 0);\r\n    }\r\n\r\n    function _send(address to, uint256 value) private {\r\n        require(to != address(0), \"_send: zero address\");\r\n        if (to == owner) {\r\n            (bool success, ) = owner.call.value(value)(\"\");\r\n            require(success, \"_send: transfer to owner contract failed.\");\r\n        } else {\r\n            address(uint160(to)).transfer(value);\r\n        }\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // PRIVATE (X3 X4)\r\n    // -----------------------------------------\r\n\r\n    function _newX3X4Member(address userAddress) private {\r\n        users[userAddress].activeX3Levels[1] = true;\r\n        users[userAddress].activeX4Levels[1] = true;\r\n\r\n        address freeX3Referrer = _findFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n\r\n        _updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n        _updateX4Referrer(userAddress, _findFreeX4Referrer(userAddress, 1), 1);\r\n    }\r\n\r\n    function _buyNewLevel(uint8 matrix, uint8 level) private {\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"_buyNewLevel: level already activated\");\r\n            require(users[msg.sender].activeX3Levels[level - 1], \"_buyNewLevel: this level can not be bought\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX3Referrer = _findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            _updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\r\n        } else {\r\n            require(!users[msg.sender].activeX4Levels[level], \"_buyNewLevel: level already activated\");\r\n            require(users[msg.sender].activeX4Levels[level - 1], \"_buyNewLevel: this level can not be bought\");\r\n\r\n            if (users[msg.sender].x4Matrix[level-1].blocked) {\r\n                users[msg.sender].x4Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX4Referrer = _findFreeX4Referrer(msg.sender, level);\r\n\r\n            users[msg.sender].activeX4Levels[level] = true;\r\n            _updateX4Referrer(msg.sender, freeX4Referrer, level);\r\n\r\n            emit Upgrade(msg.sender, freeX4Referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function _updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return _sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = _findFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n\r\n            _updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            _sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function _updateX4Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX4Levels[level], \"_updateX4Referrer: referrer level is inactive\");\r\n\r\n        // ADD 2ND PLACE OF FIRST LEVEL (3 members available)\r\n        if (users[referrerAddress].x4Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x4Matrix[level].firstLevelReferrals.length));\r\n\r\n            //set current level\r\n            users[userAddress].x4Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return _sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n\r\n            address ref = users[referrerAddress].x4Matrix[level].currentReferrer;\r\n            users[ref].x4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n            uint256 len = users[ref].x4Matrix[level].firstLevelReferrals.length;\r\n\r\n            if ((len == 2) &&\r\n                (users[ref].x4Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x4Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x4Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x4Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return _updateX4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x4Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x4Matrix[level].closedPart)) {\r\n\r\n                _updateX4(userAddress, referrerAddress, level, true);\r\n                return _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x4Matrix[level].closedPart) {\r\n                _updateX4(userAddress, referrerAddress, level, true);\r\n                return _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                _updateX4(userAddress, referrerAddress, level, false);\r\n                return _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x4Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            _updateX4(userAddress, referrerAddress, level, false);\r\n            return _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            _updateX4(userAddress, referrerAddress, level, true);\r\n            return _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n\r\n        if (users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]].x4Matrix[level].firstLevelReferrals.length <=\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]].x4Matrix[level].firstLevelReferrals.length) {\r\n            _updateX4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            _updateX4(userAddress, referrerAddress, level, true);\r\n        }\r\n\r\n        _updateX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function _updateX4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]].x4Matrix[level].firstLevelReferrals.push(userAddress);\r\n\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x4Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]].x4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]].x4Matrix[level].firstLevelReferrals.length));\r\n\r\n            //set current level\r\n            users[userAddress].x4Matrix[level].currentReferrer = users[referrerAddress].x4Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]].x4Matrix[level].firstLevelReferrals.push(userAddress);\r\n\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x4Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]].x4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]].x4Matrix[level].firstLevelReferrals.length));\r\n\r\n            //set current level\r\n            users[userAddress].x4Matrix[level].currentReferrer = users[referrerAddress].x4Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n\r\n    function _updateX4ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x4Matrix[level].secondLevelReferrals.length < 4) {\r\n            return _sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n\r\n        address[] memory x4 = users[users[referrerAddress].x4Matrix[level].currentReferrer].x4Matrix[level].firstLevelReferrals;\r\n\r\n        if (x4.length == 2) {\r\n            if (x4[0] == referrerAddress ||\r\n                x4[1] == referrerAddress) {\r\n                users[users[referrerAddress].x4Matrix[level].currentReferrer].x4Matrix[level].closedPart = referrerAddress;\r\n            }\r\n        } else if (x4.length == 1) {\r\n            if (x4[0] == referrerAddress) {\r\n                users[users[referrerAddress].x4Matrix[level].currentReferrer].x4Matrix[level].closedPart = referrerAddress;\r\n            }\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x4Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x4Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX4Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x4Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level].reinvestCount++;\r\n\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = _findFreeX4Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            _updateX4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            _sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function _findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = _findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        _send(receiver, levelPrice[level]);\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function _findFreeX3Referrer(address userAddress, uint8 level) private view returns (address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function _findFreeX4Referrer(address userAddress, uint8 level) private view returns (address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX4Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n\r\n    // -----------------------------------------\r\n    // PRIVATE (X3 X4 AUTO)\r\n    // -----------------------------------------\r\n\r\n    function _newX3X4AutoMember(address userAddress) private {\r\n        autoIdToAddress[autoSystemLastUserId] = userAddress;\r\n\r\n        // Get upline ID of user\r\n        (address x3AutoUpline, address x4AutoUpline) = _detectUplinesAddresses(autoSystemLastUserId);\r\n\r\n        users[userAddress].autoSystemId = autoSystemLastUserId;\r\n\r\n        // Register x3Auto values\r\n        users[userAddress].x3Auto[0].upline = x3AutoUpline;\r\n        users[userAddress].x3Auto[0].upline_id = users[x3AutoUpline].autoSystemId;\r\n\r\n        // Register x4Auto values\r\n        users[userAddress].x4Auto[0].upline = x4AutoUpline;\r\n        users[userAddress].x4Auto[0].upline_id = users[x4AutoUpline].autoSystemId;\r\n\r\n        if (userAddress != owner) {\r\n            // Add member to x3Auto upline referrals\r\n            users[x3AutoUpline].x3Auto[0].referrals.push(userAddress);\r\n\r\n            // Add member to x4Auto upline first referrals and second line referalls\r\n            users[x4AutoUpline].x4Auto[0].firstLevelReferrals.push(userAddress);\r\n            users[users[x4AutoUpline].x4Auto[0].upline].x4Auto[0].secondLevelReferrals.push(userAddress);\r\n        }\r\n\r\n        // Increase level of user\r\n        _x3AutoUpLevel(userAddress, 1);\r\n        _x4AutoUpLevel(userAddress, 1);\r\n\r\n        if (x4AutoUpline == owner) {\r\n            x4AutoUpline = address(0);\r\n        }\r\n\r\n        // Check the state and pay to uplines\r\n        _x3AutoUplinePay(0.025 ether, x3AutoUpline, userAddress);\r\n        _x4AutoUplinePay(0.025 ether, users[x4AutoUpline].x4Auto[0].upline, userAddress);\r\n    }\r\n\r\n    function _detectUplinesAddresses(uint256 id) private view returns(address, address) {\r\n        address x3AutoUplineAddress = owner;\r\n        address x4AutoUplineAddress = owner;\r\n\r\n        // When 1st member registered\r\n        if (id == 1) return (address(0), address(0));\r\n\r\n        // If owner address required\r\n        if (id < 3) return (x3AutoUplineAddress, x4AutoUplineAddress);\r\n\r\n        // Get X3_AUTO upline\r\n        if (id % 3 == 0)        x3AutoUplineAddress = idToAddress[id / 3];\r\n        else if (id % 3 == 1)   x3AutoUplineAddress = idToAddress[(id - 1) / 3];\r\n        else if (id % 3 == 2)   x3AutoUplineAddress = idToAddress[(id + 1) / 3];\r\n\r\n        // Get X4_AUTO upline\r\n        if (id % 2 == 0)        x4AutoUplineAddress = idToAddress[id / 2];\r\n        else                    x4AutoUplineAddress = idToAddress[(id - 1) / 2];\r\n\r\n        return (\r\n            x3AutoUplineAddress,\r\n            x4AutoUplineAddress\r\n        );\r\n    }\r\n\r\n    function _x3AutoUpLevel(address user, uint8 level) private {\r\n        users[user].x3Auto[0].level = level;\r\n        emit AutoSystemLevelUp(user, 1, level);\r\n    }\r\n\r\n    function _x4AutoUpLevel(address user, uint8 level) private {\r\n        users[user].x4Auto[0].level = level;\r\n        emit AutoSystemLevelUp(user, 2, level);\r\n    }\r\n\r\n    function _getX4AutoReinvestReceiver(address user) private view returns (address) {\r\n        return users[users[user].x4Auto[0].upline].x4Auto[0].upline;\r\n    }\r\n\r\n    function _x3AutoUplinePay(uint256 value, address upline, address downline) private {\r\n        // If upline not defined\r\n        if (upline == address(0)) {\r\n            return _send(owner, value);\r\n        }\r\n\r\n        bool isReinvest = users[upline].x3Auto[0].referrals.length == 3 && users[upline].x3Auto[0].referrals[2] == downline;\r\n\r\n        if (isReinvest) {\r\n            // Transfer funds to upline of msg.senders' upline\r\n            address reinvestReceiver = _findFreeX3AutoReferrer(downline);\r\n            emit AutoSystemReinvest(reinvestReceiver, downline, value, 1);\r\n\r\n            return _send(reinvestReceiver, value);\r\n        } else {\r\n            // Increase upgrade profit of users' upline\r\n            users[upline].x3Auto[0].profit += value;\r\n\r\n            // The limit, which needed to my upline for achieving a new level\r\n            uint256 levelMaxCap = levelPrice[users[upline].x3Auto[0].level + 1];\r\n\r\n            // If upline level limit reached\r\n            if (users[upline].x3Auto[0].profit >= levelMaxCap) {\r\n                users[upline].x3Auto[0].profit = 0;\r\n\r\n                _x3AutoUpLevel(upline, users[upline].x3Auto[0].level + 1);\r\n                _x3AutoUplinePay(levelMaxCap, users[upline].x3Auto[0].upline, upline);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _x4AutoUplinePay(uint256 value, address upline, address downline) private {\r\n        // If upline not defined\r\n        if (upline == address(0)) {\r\n            return _send(owner, value);\r\n        }\r\n\r\n        bool isEarning = users[upline].x4Auto[0].secondLevelReferrals.length == 3 && users[upline].x4Auto[0].secondLevelReferrals[2] == downline;\r\n        bool isReinvest = users[upline].x4Auto[0].secondLevelReferrals.length == 4 && (users[upline].x4Auto[0].secondLevelReferrals[3] == downline || users[upline].x4Auto[0].secondLevelReferrals[2] == downline);\r\n\r\n        if (isReinvest) {\r\n            // Transfer funds to upline of msg.senders' upline\r\n            address reinvestReceiver = _findFreeX4AutoReferrer(upline);\r\n            emit AutoSystemReinvest(reinvestReceiver, downline, value, 2);\r\n\r\n            return _send(reinvestReceiver, value);\r\n        } else if (isEarning) {\r\n            emit AutoSystemEarning(upline, downline);\r\n            return _send(upline, value);\r\n        } else {\r\n            address uplineOfUpline = _getX4AutoReinvestReceiver(upline);\r\n\r\n            // Increase upgrade profit of upline\r\n            users[upline].x4Auto[0].profit += value;\r\n\r\n            // The limit, which needed to my upline for achieving a new level\r\n            uint256 levelMaxCap = levelPrice[users[upline].x4Auto[0].level + 1];\r\n\r\n            // If upline level limit reached\r\n            if (users[upline].x4Auto[0].profit >= levelMaxCap) {\r\n                users[upline].x4Auto[0].profit = 0;\r\n\r\n                _x4AutoUpLevel(upline, users[upline].x4Auto[0].level + 1);\r\n                _x4AutoUplinePay(levelMaxCap, uplineOfUpline, upline);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _findFreeX3AutoReferrer(address userAddress) private view returns (address) {\r\n        while (true) {\r\n            address upline = users[userAddress].x3Auto[0].upline;\r\n\r\n            if (upline == address(0) || userAddress == owner) {\r\n                return owner;\r\n            }\r\n\r\n            if (users[upline].x3Auto[0].referrals[2] != userAddress) {\r\n                return upline;\r\n            }\r\n\r\n            userAddress = upline;\r\n        }\r\n    }\r\n\r\n    function _findFreeX4AutoReferrer(address userAddress) private view returns (address) {\r\n        while (true) {\r\n            address upline = _getX4AutoReinvestReceiver(userAddress);\r\n\r\n            if (upline == address(0) || userAddress == owner) {\r\n                return owner;\r\n            }\r\n\r\n            if (users[upline].x4Auto[0].secondLevelReferrals[3] != userAddress) {\r\n                return upline;\r\n            }\r\n\r\n            userAddress = upline;\r\n        }\r\n    }\r\n    // -----------------------------------------\r\n    // GETTERS\r\n    // -----------------------------------------\r\n\r\n    function findFreeX3Referrer(address userAddress, uint8 level) external view returns (address) {\r\n        return _findFreeX3Referrer(userAddress, level);\r\n    }\r\n\r\n    function findFreeX4Referrer(address userAddress, uint8 level) external view returns (address) {\r\n        return _findFreeX4Referrer(userAddress, level);\r\n    }\r\n\r\n    function findFreeX3AutoReferrer(address userAddress) external view returns (address) {\r\n        return _findFreeX3AutoReferrer(userAddress);\r\n    }\r\n\r\n    function findFreeX4AutoReferrer(address userAddress) external view returns (address) {\r\n        return _findFreeX4AutoReferrer(userAddress);\r\n    }\r\n\r\n    function findAutoUplines() external view returns(address, address, uint256, uint256) {\r\n        (address x3UplineAddr, address x4UplineAddr) = _detectUplinesAddresses(autoSystemLastUserId);\r\n        return (\r\n            x3UplineAddr,\r\n            x4UplineAddr,\r\n            users[x3UplineAddr].autoSystemId,\r\n            users[x4UplineAddr].autoSystemId\r\n        );\r\n    }\r\n\r\n    function findX4AutoReinvestReceiver(address user) external view returns (address) {\r\n        return _getX4AutoReinvestReceiver(user);\r\n    }\r\n\r\n    function usersActiveX3Levels(address userAddress, uint8 level) external view returns (bool) {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n\r\n    function usersActiveX4Levels(address userAddress, uint8 level) external view returns (bool) {\r\n        return users[userAddress].activeX4Levels[level];\r\n    }\r\n\r\n    function getUserX3Matrix(address userAddress, uint8 level) external view returns (\r\n        address currentReferrer,\r\n        address[] memory referrals,\r\n        bool blocked,\r\n        uint256 reinvestCount\r\n    ) {\r\n        return (\r\n            users[userAddress].x3Matrix[level].currentReferrer,\r\n            users[userAddress].x3Matrix[level].referrals,\r\n            users[userAddress].x3Matrix[level].blocked,\r\n            users[userAddress].x3Matrix[level].reinvestCount\r\n        );\r\n    }\r\n\r\n    function getUserX4Matrix(address userAddress, uint8 level) external view returns (\r\n        address currentReferrer,\r\n        address[] memory firstLevelReferrals,\r\n        address[] memory secondLevelReferrals,\r\n        bool blocked,\r\n        address closedPart,\r\n        uint256 reinvestCount\r\n    ) {\r\n        return (\r\n            users[userAddress].x4Matrix[level].currentReferrer,\r\n            users[userAddress].x4Matrix[level].firstLevelReferrals,\r\n            users[userAddress].x4Matrix[level].secondLevelReferrals,\r\n            users[userAddress].x4Matrix[level].blocked,\r\n            users[userAddress].x4Matrix[level].closedPart,\r\n            users[userAddress].x3Matrix[level].reinvestCount\r\n        );\r\n    }\r\n\r\n    function getUserX3Auto(address user) external view returns (\r\n        uint256 id,\r\n        uint8 level,\r\n        uint256 upline_id,\r\n        address upline,\r\n        uint256 profit,\r\n        address[] memory referrals\r\n    ) {\r\n        return (\r\n            users[user].autoSystemId,\r\n            users[user].x3Auto[0].level,\r\n            users[user].x3Auto[0].upline_id,\r\n            users[user].x3Auto[0].upline,\r\n            users[user].x3Auto[0].profit,\r\n            users[user].x3Auto[0].referrals\r\n        );\r\n    }\r\n\r\n    function getUserX4Auto(address user) external view returns (\r\n        uint256 id,\r\n        uint8 level,\r\n        uint256 upline_id,\r\n        address upline,\r\n        uint256 profit,\r\n        address[] memory firstLevelReferrals,\r\n        address[] memory secondLevelReferrals\r\n    ) {\r\n        return (\r\n            users[user].autoSystemId,\r\n            users[user].x4Auto[0].level,\r\n            users[user].x4Auto[0].upline_id,\r\n            users[user].x4Auto[0].upline,\r\n            users[user].x4Auto[0].profit,\r\n            users[user].x4Auto[0].firstLevelReferrals,\r\n            users[user].x4Auto[0].secondLevelReferrals\r\n        );\r\n    }\r\n\r\n    function isUserExists(address user) external view returns (bool) {\r\n        return _isUserExists(user);\r\n    }\r\n\r\n    function isUserAutoSystemActve(address user) external view returns (bool) {\r\n        return _isUserAutoSystemActve(user);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"findFreeX4AutoReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserX4Auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upline_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"firstLevelReferrals\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"secondLevelReferrals\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserAutoSystemActve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX4Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getUserX4Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"firstLevelReferrals\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"secondLevelReferrals\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"closedPart\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoSystemLastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX4Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoSystemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"findFreeX3AutoReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getUserX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserX3Auto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upline_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"findX4AutoReinvestReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"findAutoUplines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"AutoSystemRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"AutoSystemLevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AutoSystemEarning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"}],\"name\":\"AutoSystemReinvest\",\"type\":\"event\"}]","ContractName":"Voomo","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d4e0fb4fa34d9c382c0a2dfed6705dc08a859727","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0db96d42427971c6349d3269c608931dbdb2f15e4b454738fc196b3aaa8e06c6"}]}