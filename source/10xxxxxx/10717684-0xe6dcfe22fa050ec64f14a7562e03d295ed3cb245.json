{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  bool private initialized;\r\n  bool private initializing;\r\n\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  function isConstructor() private view returns (bool) {\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n\r\n  address private _owner;\r\n  uint256 private _ownershipLocked;\r\n\r\n  event OwnershipLocked(address lockedOwner);\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  function initialize(address sender) internal initializer {\r\n    _owner = sender;\r\n\t_ownershipLocked = 0;\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(_ownershipLocked == 0);\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n  \r\n  function lockOwnership() public onlyOwner {\r\n\trequire(_ownershipLocked == 0);\r\n\temit OwnershipLocked(_owner);\r\n    _ownershipLocked = 1;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMathInt {\r\n\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary UInt256Lib {\r\n\r\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\r\n\r\n    /**\r\n     * @dev Safely converts a uint256 to an int256.\r\n     */\r\n    function toInt256Safe(uint256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a <= MAX_INT256);\r\n        return int256(a);\r\n    }\r\n}\r\n\r\ninterface ITrend {\r\n\r\n    event TransactionFailed(address indexed destination, uint index, bytes data);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n    function rebase(int256 supplyDelta) external returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner_, address spender) external returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function addTransaction(address destination, bytes calldata data) external;\r\n    function removeTransaction(uint index) external;\r\n    function setTransactionEnabled(uint index, bool enabled) external;\r\n    function transactionsSize() external returns (uint256);\r\n    \r\n    function transferOwnership(address newOwner) external;\r\n    function lockOwnership() external;\r\n    \r\n}\r\ncontract Orchestrator is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using UInt256Lib for uint256;\r\n\r\n    event LogRebase(\r\n        uint256 indexed epoch,\r\n        uint256  lagFactor,\r\n        uint256 totalSupply,\r\n        uint256 price,\r\n        int256 delta,\r\n        uint256 timestampSec,\r\n        uint rebaseId\r\n    );\r\n\r\n    ITrend private _trend;\r\n    // Uniswap V2 Pairs fpr ETH-Trend \r\n\tIUniswapV2Pair private _pairTrend;\r\n\r\n    uint256 private _priceTarget;\r\n\r\n\r\n    // The number of rebase cycles since inception\r\n    uint256 public epoch;\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant TREND_DECIMALS = 9;\r\n    uint256 private constant ETH_DECIMALS = 18;\r\n    uint256 private constant WEEK_FREQUENCY = 7 days;\r\n    uint256 private constant MONTH_FREQUENCY = 30 days;\r\n        \r\n\tuint256 private constant PRICE_PRECISION = 10**8;\r\n    // Due to the expression in computeSupplyDelta(), MAX_RATE * MAX_SUPPLY must fit into an int256.\r\n    // Both are 18 decimals fixed point numbers.\r\n    uint256 private constant MAX_RATE = 10**6 * 10**DECIMALS;\r\n    // MAX_SUPPLY = MAX_INT256 / MAX_RATE\r\n    uint256 private constant MAX_SUPPLY = ~(uint256(1) << 255) / MAX_RATE;\r\n    uint256 private next_monthly_round;\r\n    uint256 private next_weekly_round;\r\n    \r\n    int256 private constant LAG_PRECISION = 10**2;\r\n\r\n     struct Rebase {\r\n        uint execution_time;\r\n        bool executed;\r\n        bool isMonthly;\r\n    }\r\n\r\n    mapping (uint => Rebase) private rebases;\r\n\r\n\r\n\tconstructor() public {\r\n\t\r\n\t\tOwnable.initialize(msg.sender);\r\n        epoch = 0;\r\n        _priceTarget = 5 * 10**15;\r\n        next_weekly_round = now + 1 days + WEEK_FREQUENCY;\r\n        next_monthly_round = now + 1 days + MONTH_FREQUENCY;\r\n        _trend = ITrend(address(0x0cC0d75340C0658eC370859252f40Ed92620A807));\r\n        _pairTrend = IUniswapV2Pair(UniswapV2Library.pairFor(address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f ), address(0x0cC0d75340C0658eC370859252f40Ed92620A807) , address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)));\r\n       \r\n        rebases[0] = Rebase(getHashRandom(blockhash(block.number  - 1), now + 1 days, next_monthly_round),false,true);\r\n       \r\n        rebases[1] = Rebase(getHashRandom(blockhash(block.number - 2), now + 1 days, next_weekly_round),false,false);\r\n        rebases[2] = Rebase(getHashRandom(blockhash(block.number - 3), now + 1 days, next_weekly_round),false,false);\r\n        rebases[3] = Rebase(getHashRandom(blockhash(block.number - 4), now + 1 days, next_weekly_round),false,false);\r\n        rebases[4] = Rebase(getHashRandom(blockhash(block.number - 5), now + 1 days, next_weekly_round),false,false);\r\n    }\r\n\r\n\r\n\r\n       \r\n\tfunction transferTrendOwner(address newOwner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(address(_trend) != address(0));\r\n        _trend.transferOwnership(newOwner);\r\n    }\r\n\r\n    function rebase()  external  returns (uint256) {\r\n\r\n       \r\n        (bool canRebase ,uint rebaseId) = getRebaseInfo();\r\n        \r\n        require(canRebase , \"NO_REBASE_AVAILABLE\");\r\n        rebases[rebaseId].executed = true;\r\n        epoch = epoch.add(1);\r\n\r\n        bytes32 bhLast = blockhash(block.number - 1);\r\n\r\n        require(address(_trend) != address(0));\r\n        require(address(_pairTrend) != address(0));\r\n        \r\n        int256 supplyDelta = 0;\r\n        uint256 totalSupply = _trend.totalSupply();\r\n        uint256 price = getPriceTrend_ETH();\r\n\r\n        \r\n        supplyDelta = totalSupply.toInt256Safe().mul(price.toInt256Safe().sub(_priceTarget.toInt256Safe())).div(_priceTarget.toInt256Safe());\r\n        \r\n        if(rebases[rebaseId].isMonthly) supplyDelta = supplyDelta*2;\r\n\r\n        uint256 lagFactor = getLagFactor(bhLast, totalSupply);\r\n            \t\t\r\n        // Apply random lag factor\r\n        \r\n        supplyDelta = supplyDelta.mul(LAG_PRECISION).div(lagFactor.toInt256Safe());\r\n\r\n        if (supplyDelta > 0 && totalSupply.add(uint256(supplyDelta)) > MAX_SUPPLY) {\r\n            supplyDelta = (MAX_SUPPLY.sub(totalSupply)).toInt256Safe();\r\n        }\r\n\r\n        uint256 supplyAfterRebase = _trend.rebase(supplyDelta);\r\n        assert(supplyAfterRebase <= MAX_SUPPLY);\r\n        emit LogRebase(epoch,lagFactor,totalSupply, price, supplyDelta, block.timestamp , rebaseId);\r\n        \r\n        _pairTrend.sync();\r\n        \r\n        tryGenerateNextRebases();\r\n\r\n        return supplyAfterRebase;\r\n    }\r\n\r\n    function getPriceTrend_ETH() public view returns (uint256) {\r\n\t    \r\n\t    require(address(_pairTrend) != address(0));\r\n\t \r\n\t    (uint256 reserves0, uint256 reserves1,) = _pairTrend.getReserves();\r\n\t    \r\n\t    uint256 input_amount_with_fee = (1*10**TREND_DECIMALS).mul(997);\r\n        uint256 numerator = input_amount_with_fee.mul(reserves1);\r\n        uint256 denominator = reserves0.mul(1000).add(input_amount_with_fee);\r\n\r\n        uint256 price = numerator.div(denominator);\r\n        \r\n        return price;\r\n    }\r\n\r\n\tfunction getLagFactor(bytes32 hash, uint256 totalSupply) internal pure returns (uint256) {\r\n\r\n\t    uint256 supply10M = 10 * 10**6 * 10 ** TREND_DECIMALS;\r\n        uint256 supply90M = 90 * 10**6 * 10 ** TREND_DECIMALS;\r\n        \r\n\t    uint256 min = 1000;\r\n\t    uint256 max = 1400;\r\n\t    \r\n\t    if (totalSupply <= (10 * 10**6 * TREND_DECIMALS)) {\r\n\t        min = 600;\r\n\t    } else {\r\n\t        if (totalSupply >= (100 * 10**6 * TREND_DECIMALS)) {\r\n\t            min = 800;\r\n\t        } else {\r\n                min = uint256(totalSupply.toInt256Safe().sub(supply10M.toInt256Safe()).mul(100).div(supply90M.toInt256Safe())) ** 2;\r\n                min = min.mul(200).div(100 ** 2).add(600);\r\n\t        }\r\n\t    }\r\n\r\n\t    if (totalSupply <= (10 * 10**6 * TREND_DECIMALS)) {\r\n\t        max = 1000;\r\n\t    } else {\r\n\t        if (totalSupply >= (100 * 10**6 * TREND_DECIMALS)) {\r\n\t            max = 1400;\r\n\t        } else {\r\n\t            max = uint256(totalSupply.toInt256Safe().sub(supply10M.toInt256Safe()).mul(100).div(supply90M.toInt256Safe())) ** 2;\r\n                max = max.mul(400).div(100 ** 2).add(800);\r\n\t        }\r\n\t    }\r\n\t    \r\n        return getHashRandom(hash, min, max);\r\n    }\r\n        \r\n    function getHashRandom(bytes32 hash, uint256 min, uint256 max) internal pure returns (uint256) {\t\t\r\n        uint256 hashInt = uint256(hash);\r\n        uint256 randMod = hashInt % (max - min);\r\n        return randMod + min;\r\n    }\r\n\r\n    function getRebaseInfo() internal view returns (bool,uint) {\t\t\r\n        \r\n        bool canRebase = false;\r\n        uint id = 0;\r\n        \r\n    \r\n       for (uint i = 0; i < 5; i++) { \r\n\r\n           if(rebases[i].execution_time < now && !rebases[i].executed){\r\n                canRebase = true;\r\n                id = i;\r\n                break;\r\n           }\r\n       }\r\n\r\n       return (canRebase,id);\r\n    }\r\n    \r\n    function getCurrentSupply() public view returns (uint256){\r\n        return _trend.totalSupply();\r\n    }\r\n    \r\n    function getCurrentRebases() public view returns (uint[] memory,uint256[] memory, bool[] memory){\r\n        \r\n        uint[] memory ids = new uint[](5) ;\r\n        uint256[] memory times = new uint256[](5) ;\r\n        bool[] memory executed = new bool[](5) ;\r\n        \r\n        for (uint i = 0; i < 5; i++) { \r\n            ids[i] = i;\r\n            times[i] = rebases[i].execution_time;\r\n            executed[i] = rebases[i].executed;\r\n            \r\n        }\r\n        return (ids,times,executed);\r\n    }\r\n    \r\n    function tryGenerateNextRebases() internal {\r\n    \r\n         if(now > next_monthly_round || rebases[0].executed){\r\n       \r\n            rebases[0].execution_time = getHashRandom(blockhash(block.number - 1), next_monthly_round, next_monthly_round + MONTH_FREQUENCY);\r\n            rebases[0].executed = false;\r\n            next_monthly_round = next_monthly_round + MONTH_FREQUENCY;\r\n        }\r\n        \r\n        if(now > next_weekly_round || (rebases[1].executed && rebases[2].executed && rebases[3].executed && rebases[4].executed)){\r\n            \r\n            rebases[1].execution_time = getHashRandom(blockhash(block.number - 2), next_weekly_round, next_weekly_round + WEEK_FREQUENCY);\r\n            rebases[2].execution_time = getHashRandom(blockhash(block.number - 3), next_weekly_round, next_weekly_round + WEEK_FREQUENCY);\r\n            rebases[3].execution_time = getHashRandom(blockhash(block.number - 4), next_weekly_round, next_weekly_round + WEEK_FREQUENCY);\r\n            rebases[4].execution_time = getHashRandom(blockhash(block.number - 5), next_weekly_round, next_weekly_round + WEEK_FREQUENCY);\r\n            rebases[1].executed = false;\r\n            rebases[2].executed = false;\r\n            rebases[3].executed = false;\r\n            rebases[4].executed = false;\r\n            \r\n            next_weekly_round = next_weekly_round + WEEK_FREQUENCY;\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"lockOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceTrend_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRebases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTrendOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lagFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"delta\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestampSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rebaseId\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Orchestrator","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://87bfd6c517878a2f6cd87c9789d544a4b307e061d6ef9370ff37c7395479d238"}]}