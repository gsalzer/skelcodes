{"status":"1","message":"OK","result":[{"SourceCode":"{\"ConfinaleToken.sol\":{\"content\":\"pragma solidity \\u003e=0.5.16 \\u003c0.7.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Latency.sol\\\";\\r\\n\\r\\ncontract ConfinaleToken is ERC20 {\\r\\n    string  public name = \\\"Confinale Token\\\";\\r\\n    string  public symbol = \\\"CNFI\\\";\\r\\n\\r\\n    //the Latency Contract is managing the value that one is allowed to withdraw\\r\\n    mapping(address =\\u003e Latency) _latencyOf;\\r\\n    address public owner;\\r\\n\\r\\n    event TransferWei(\\r\\n        address indexed _from,\\r\\n        uint256 _value\\r\\n    );\\r\\n\\r\\n    modifier onlyOwner()\\r\\n    {\\r\\n        require(msg.sender == owner, \\\"only owner allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256  _initialSupply) public\\r\\n    {\\r\\n        owner = msg.sender;\\r\\n        _mint(msg.sender, _initialSupply);\\r\\n    }\\r\\n\\r\\n    function etherBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function modifyTotalSupply(int256 _value) public onlyOwner returns (uint256 New_totalSupply)\\r\\n    {\\r\\n        uint256 absValue;\\r\\n        if (_value\\u003c0)\\r\\n        {\\r\\n            absValue = uint256(-_value);\\r\\n            _burn(msg.sender, absValue);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            absValue = uint256(_value);\\r\\n            _mint(msg.sender, absValue);\\r\\n        }\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    function initialTransfer(address _to, uint256 _value, uint256 _waitingTime) public onlyOwner returns (bool success) {\\r\\n        require(_to != msg.sender,\\u0027you cant transfer token to yourself\\u0027);\\r\\n        require(_value\\u003e0,\\u0027you have to transfer more than zero\\u0027);\\r\\n        require(balanceOf(msg.sender) \\u003e= _value, \\u0027You have not sufficent Token in our balance\\u0027);\\r\\n\\r\\n         if (balanceOf(_to)==0)\\r\\n        // if( _latencyOf[_to] == Latency(0))\\r\\n        {\\r\\n            // we need to initialize the _latencyOf Contract\\r\\n            _latencyOf[_to] = new Latency();\\r\\n        }\\r\\n\\r\\n        _latencyOf[_to].addValueCustomTime(_value, _waitingTime);\\r\\n        super.transfer(_to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //the parameter _waitingTime is only needed for the owner\\r\\n    // for all others the waiting time is computed as an averaged weight of all future times\\r\\n     function transfer(address _to, uint256 _value) public returns (bool success)\\r\\n     {\\r\\n        require(_to != msg.sender,\\u0027you cant transfer token to yourself\\u0027);\\r\\n        require(_value\\u003e0,\\u0027you have to transfer more than zero\\u0027);\\r\\n        require(super.balanceOf(msg.sender) \\u003e= _value, \\u0027You have not sufficent Token in our balance\\u0027);\\r\\n\\r\\n        require(super.balanceOf(_to)!=0,\\\"Use initalTransfer to send Token to new addresses\\\");\\r\\n        require(msg.sender != owner, \\\"The owner must use the initialTransfer function to send Token\\\");\\r\\n\\r\\n        uint256 steps = _latencyOf[msg.sender].withdrawSteps(_value);\\r\\n        uint256 amount = 0;\\r\\n\\r\\n        if (_to != owner)\\r\\n        {\\r\\n                uint256 waitingTime = 0;\\r\\n                if (steps \\u003e 0 ) // first in - first out logic\\r\\n                {\\r\\n                    // equivalent to:\\r\\n                    // amount= _latencyOf[msg.sender].withdrawValue(0);\\r\\n                    // waitingTime=_latencyOf[msg.sender].withdrawTime(0);\\r\\n                    (waitingTime,amount) = _latencyOf[msg.sender].withdrawTupel(0);\\r\\n                    _latencyOf[_to].addValueCustomTime(amount,waitingTime);\\r\\n\\r\\n                    for (uint i = 1; i\\u003csteps; i++)\\r\\n                    {\\r\\n                        amount = (_latencyOf[msg.sender].withdrawValue(i)-_latencyOf[msg.sender].withdrawValue(i-1));\\r\\n                        waitingTime = _latencyOf[msg.sender].withdrawTime(i);\\r\\n                        _latencyOf[_to].addValueCustomTime(amount,waitingTime);\\r\\n                    }\\r\\n\\r\\n                    amount = _value - _latencyOf[msg.sender].withdrawValue(steps-1);\\r\\n                    waitingTime = _latencyOf[msg.sender].withdrawTime(steps);\\r\\n                    _latencyOf[_to].addValueCustomTime(amount,waitingTime);\\r\\n                }\\r\\n                else //the amount is smaller than the first block\\r\\n                {\\r\\n                    amount = _value;\\r\\n                    waitingTime = _latencyOf[msg.sender].withdrawTime(0);\\r\\n                    _latencyOf[_to].addValueCustomTime(amount,waitingTime);\\r\\n                }\\r\\n        }\\r\\n\\r\\n        _latencyOf[msg.sender].reduceValue(_value);\\r\\n        super.transfer(_to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw(uint256 _AmountConf) public\\r\\n    {\\r\\n        require(_AmountConf \\u003c= balanceOf(msg.sender),\\u0027 not sufficient Confinale token to withdraw\\u0027);\\r\\n        if (msg.sender != owner)\\r\\n        {\\r\\n            require(_latencyOf[msg.sender].withdrawableAmount() \\u003e= _AmountConf,\\u0027 value cant be withdrawn yet - wait longer\\u0027);\\r\\n        }\\r\\n\\r\\n        uint256 value = SafeMath.div(address(this).balance*_AmountConf, totalSupply());\\r\\n        msg.sender.transfer(value);\\r\\n        _burn(msg.sender, _AmountConf);\\r\\n\\r\\n        if (msg.sender != owner)\\r\\n        {\\r\\n            _latencyOf[msg.sender].withdraw(_AmountConf);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //everyone can deposit ether into the contract\\r\\n    function deposit() public payable\\r\\n    {\\r\\n        // nothing else to do!\\r\\n       // require(msg.value\\u003e0); // value is always unsigned -\\u003e if someone sends negative values it will increase the balance\\r\\n        emit TransferWei(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function valueConfinaleToken(uint256 _amountConf) public view returns (uint256 val)\\r\\n    {\\r\\n        return SafeMath.div(address(this).balance * _amountConf, totalSupply());\\r\\n    }\\r\\n\\r\\n    // optional functions useful for debugging\\r\\n    function withdrawableAmount(address _addr) public view returns(uint256 value)\\r\\n    {\\r\\n        if (balanceOf(_addr)==0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (_addr != owner)\\r\\n        {\\r\\n            return  _latencyOf[_addr].withdrawableAmount();\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return balanceOf(_addr); // the owner can always access its token\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawSteps(address _addr, uint256 _amount) public view returns (uint256 steps)\\r\\n    {\\r\\n        if (balanceOf(_addr)==0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return _latencyOf[_addr].withdrawSteps(_amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTupel(address _addr, uint256 _index) public view returns (uint256 holdingPeriod, uint256 token)\\r\\n    {\\r\\n\\r\\n        if(_addr==owner){\\r\\n            if(_index==0){\\r\\n                return(0, balanceOf(_addr));\\r\\n            } else {\\r\\n                return (0,0);\\r\\n            }\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n        if (balanceOf(_addr)==0) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n        return _latencyOf[_addr].withdrawTupel(_index);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function changeOwner(address _newOwner) public onlyOwner returns (bool success)\\r\\n    {\\r\\n        uint256 ownerBalance= balanceOf(owner);\\r\\n        super.transfer(_newOwner, ownerBalance);\\r\\n        owner=  _newOwner;\\r\\n\\r\\n        return true;\\r\\n\\r\\n    }\\r\\n\\r\\n    // emergency function\\r\\n    function fixValueDifference (address _address) public onlyOwner\\r\\n    {\\r\\n        uint256 balance = balanceOf(_address);\\r\\n        uint256 steps = _latencyOf[_address].withdrawSteps(balance);\\r\\n        uint256 maxValue = _latencyOf[_address].withdrawValue(steps);\\r\\n        if (maxValue \\u003c balance)\\r\\n        {\\r\\n            _latencyOf[_address].addValueCustomTime(balance - maxValue, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () internal { }\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20Mintable}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Latency.sol\":{\"content\":\"pragma solidity \\u003e=0.5.16 \\u003c0.7.0;\\r\\n\\r\\ncontract Latency {\\r\\n  \\r\\n\\r\\n    struct LatencyPoint\\r\\n    {\\r\\n        uint256 time;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    LatencyPoint[] public _latencyArray;\\r\\n    address owner;\\r\\n     \\r\\n    constructor ( ) public\\r\\n    {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner()\\r\\n    {\\r\\n        require(msg.sender == owner, \\\"only latency owner allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // the value which is incremeted in the struct after the waitingTime\\r\\n    function addValueCustomTime(uint256 _transferedValue, uint256 _waitingTime)   public onlyOwner\\r\\n    {\\r\\n       if(_transferedValue \\u003e 0 ) // otherwise there is no need to add a value in the array\\r\\n        {\\r\\n            uint256 unlockTime = block.timestamp + _waitingTime;\\r\\n            bool found = false;\\r\\n            uint256 index;\\r\\n\\r\\n            for(uint i = 0; i\\u003c_latencyArray.length; i++)\\r\\n            {\\r\\n                if (_latencyArray[i].time \\u003e unlockTime)\\r\\n                {\\r\\n                    index = i;\\r\\n                    found = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (found)\\r\\n            {  // we need to shift all the indices\\r\\n            _latencyArray.push(LatencyPoint(_latencyArray[_latencyArray.length-1].time, _latencyArray[_latencyArray.length-1].value + _transferedValue));\\r\\n\\r\\n                 for(uint i = _latencyArray.length - 2; i\\u003eindex; i--)\\r\\n                 {\\r\\n                     _latencyArray[i].time = _latencyArray[i-1].time;\\r\\n                     _latencyArray[i].value = _latencyArray[i-1].value + _transferedValue;\\r\\n                 }\\r\\n\\r\\n                 _latencyArray[index].time = unlockTime;\\r\\n\\r\\n                 if (index\\u003e0){\\r\\n                    _latencyArray[index].value = _latencyArray[index-1].value + _transferedValue;\\r\\n                 }else\\r\\n                 {\\r\\n                    _latencyArray[index].value = _transferedValue;\\r\\n                 }\\r\\n            }else\\r\\n            { // the timestamp is after all the others\\r\\n                 if (_latencyArray.length\\u003e0){\\r\\n                    _latencyArray.push(LatencyPoint(unlockTime,_latencyArray[_latencyArray.length-1].value + _transferedValue));\\r\\n                 }\\r\\n                 else\\r\\n                 {\\r\\n                    _latencyArray.push(LatencyPoint(unlockTime, _transferedValue));\\r\\n                 }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawableAmount() public view returns(uint256 value)\\r\\n    {\\r\\n        uint i = 0;\\r\\n        if (_latencyArray.length==0)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        while (i \\u003c _latencyArray.length \\u0026\\u0026 _latencyArray[i].time \\u003c block.timestamp)\\r\\n        {\\r\\n          i++;\\r\\n        }\\r\\n\\r\\n        if (i==0) // nothing can be taken out\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          return _latencyArray[i-1].value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function currentTime() public view returns(uint256 time) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function removePoint(uint i) private\\r\\n    {\\r\\n        while (i\\u003c_latencyArray.length-1)\\r\\n        {\\r\\n            _latencyArray[i] = _latencyArray[i+1];\\r\\n            i++;\\r\\n        }\\r\\n        _latencyArray.length--;\\r\\n    }\\r\\n\\r\\n    // you need to keep at least the last one such that you know how much you can withdraw\\r\\n    function removePastPoints() private\\r\\n    {\\r\\n        uint i = 0;\\r\\n        while (i \\u003c _latencyArray.length \\u0026\\u0026 _latencyArray[i].time \\u003c block.timestamp)\\r\\n        {\\r\\n            i++;\\r\\n        }\\r\\n        if (i==0) // everything is still in the future\\r\\n        {\\r\\n            //_latencyArray.length=0;\\r\\n        }\\r\\n        else if (i == _latencyArray.length) // then we need to keep the last entry\\r\\n        {\\r\\n          _latencyArray[0] = _latencyArray[i-1];\\r\\n          _latencyArray.length = 1;\\r\\n        }\\r\\n        else // i is the first item that is bigger -\\u003e so we need to keep all the coming ones\\r\\n        {\\r\\n            i--; // you need to keep the last entry of the past if its not zero\\r\\n            uint j = 0;\\r\\n            while (j\\u003c_latencyArray.length-i)\\r\\n            {\\r\\n              _latencyArray[j] = _latencyArray[j+i];\\r\\n              j++;\\r\\n            }\\r\\n            _latencyArray.length = _latencyArray.length-i;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // you need to keep at least the last one such that you know how much you can withdraw\\r\\n    function removeZeroValues() private\\r\\n    {\\r\\n        uint i = 0;\\r\\n        while (i \\u003c _latencyArray.length \\u0026\\u0026 _latencyArray[i].value == 0)\\r\\n        {\\r\\n            i++;\\r\\n        }\\r\\n        if (i==0) // everything is still in the future\\r\\n        {\\r\\n            //_latencyArray.length=0;\\r\\n        }\\r\\n        else if (i == _latencyArray.length) // then we need to keep the last entry\\r\\n        {\\r\\n          _latencyArray[0] = _latencyArray[i-1];\\r\\n          _latencyArray.length = 1;\\r\\n        }\\r\\n        else // i is the first item that is not zero -\\u003e so we need to keep from i on all values  all the coming ones\\r\\n        {\\r\\n            //i--; // you need to keep the last entry of the past if its not zero\\r\\n            uint j=0;\\r\\n            while (j\\u003c_latencyArray.length-i)\\r\\n            {\\r\\n                _latencyArray[j] = _latencyArray[j+i];\\r\\n                j++;\\r\\n            }\\r\\n            _latencyArray.length = _latencyArray.length-i;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _value) public onlyOwner\\r\\n    {\\r\\n        require (withdrawableAmount() \\u003e= _value,\\u0027you cant withdraw that amount at this moment\\u0027);\\r\\n        removePastPoints();\\r\\n        removeZeroValues();\\r\\n        for(uint i=0; i\\u003c_latencyArray.length; i++)\\r\\n        {\\r\\n            _latencyArray[i].value -= _value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //if you transfer token from one address to the other you reduce the total amount\\r\\n    function reduceValue(uint256 _value) public onlyOwner\\r\\n    {\\r\\n        removePastPoints();\\r\\n\\r\\n        for(uint i=0; i\\u003c_latencyArray.length; i++)\\r\\n        {\\r\\n            if(_latencyArray[i].value\\u003c_value)\\r\\n            {\\r\\n                _latencyArray[i].value = 0;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                _latencyArray[i].value -= _value;\\r\\n            }\\r\\n        }\\r\\n        removeZeroValues(); //removes zero values form the array\\r\\n    }\\r\\n\\r\\n    // returns the first point that is strictly larger than the amount\\r\\n    function withdrawSteps(uint256 _amount) public view returns (uint256 Steps)\\r\\n    {\\r\\n        uint256 steps = 0;\\r\\n        // we need the first index, that is larger or euqal to the amount\\r\\n        for(uint i = 0;i\\u003c_latencyArray.length;i++)\\r\\n        {\\r\\n            steps = i;\\r\\n            if(_latencyArray[i].value \\u003e _amount)\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n        }\\r\\n        return steps;\\r\\n    }\\r\\n\\r\\n    function withdrawTupel(uint256 _index) public view returns (uint256 Time, uint256 Val)\\r\\n    {\\r\\n        if(_index \\u003c _latencyArray.length)\\r\\n        {\\r\\n            if (_latencyArray[_index].time\\u003eblock.timestamp)\\r\\n            {\\r\\n                return (_latencyArray[_index].time-block.timestamp, _latencyArray[_index].value) ;\\r\\n            }\\r\\n            else // time is already in the past\\r\\n            {\\r\\n                return (0,_latencyArray[_index].value) ;\\r\\n            }\\r\\n        } else //index out of range\\r\\n        {\\r\\n            return (0,0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawTime(uint256 _index) public view returns (uint256 Time)\\r\\n    {\\r\\n        if(_index \\u003c _latencyArray.length)\\r\\n        {\\r\\n            if (_latencyArray[_index].time\\u003eblock.timestamp)\\r\\n            {\\r\\n                return _latencyArray[_index].time-block.timestamp;\\r\\n            }\\r\\n            else // time is already in the past\\r\\n            {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n        else //index out of range \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawValue(uint256 _index) public view returns (uint256 Value){\\r\\n        if(_index \\u003c _latencyArray.length)\\r\\n        {\\r\\n            return _latencyArray[_index].value;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"},\"Migrations.sol\":{\"content\":\"pragma solidity \\u003e=0.4.21 \\u003c0.7.0;\\r\\n\\r\\ncontract Migrations {\\r\\n    address public owner;\\r\\n    uint public last_completed_migration;\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier restricted() {\\r\\n        if (msg.sender == owner) _;\\r\\n    }\\r\\n\\r\\n    function setCompleted(uint completed) public restricted {\\r\\n        last_completed_migration = completed;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferWei\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"fixValueDifference\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waitingTime\",\"type\":\"uint256\"}],\"name\":\"initialTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"modifyTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"New_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountConf\",\"type\":\"uint256\"}],\"name\":\"valueConfinaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_AmountConf\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"steps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawTupel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConfinaleToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000002710","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://efddc27cc5099fb1b2cfa2e241177e2141affd5ca3b1f8a3e14a6708385462b3"}]}