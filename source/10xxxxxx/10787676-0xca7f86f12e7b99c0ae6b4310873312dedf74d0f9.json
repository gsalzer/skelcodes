{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/sogur/interfaces/IModelDataSource.sol\n\n/**\n * @title Model Data Source Interface.\n */\ninterface IModelDataSource {\n    /**\n     * @dev Get interval parameters.\n     * @param _rowNum Interval row index.\n     * @param _colNum Interval column index.\n     * @return Interval minimum amount of SGR.\n     * @return Interval maximum amount of SGR.\n     * @return Interval minimum amount of SDR.\n     * @return Interval maximum amount of SDR.\n     * @return Interval alpha value (scaled up).\n     * @return Interval beta  value (scaled up).\n     */\n    function getInterval(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\n\n    /**\n     * @dev Get interval alpha and beta.\n     * @param _rowNum Interval row index.\n     * @param _colNum Interval column index.\n     * @return Interval alpha value (scaled up).\n     * @return Interval beta  value (scaled up).\n     */\n    function getIntervalCoefs(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256);\n\n    /**\n     * @dev Get the amount of SGR required for moving to the next minting-point.\n     * @param _rowNum Interval row index.\n     * @return Required amount of SGR.\n     */\n    function getRequiredMintAmount(uint256 _rowNum) external view returns (uint256);\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/sogur/ModelDataSource.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sugor.org/software/readme_v1\n */\n\n/**\n * @title Model Data Source.\n */\ncontract ModelDataSource is IModelDataSource, Claimable {\n    string public constant VERSION = \"1.0.0\";\n\n    struct Interval {\n        uint256 minN;\n        uint256 maxN;\n        uint256 minR;\n        uint256 maxR;\n        uint256 alpha;\n        uint256 beta;\n    }\n\n    bool public intervalListsLocked;\n    Interval[11][95] public intervalLists;\n\n    /**\n     * @dev Lock the interval lists.\n     */\n    function lock() external onlyOwner {\n        intervalListsLocked = true;\n    }\n\n    /**\n     * @dev Set interval parameters.\n     * @param _rowNum Interval row index.\n     * @param _colNum Interval column index.\n     * @param _minN   Interval minimum amount of SGR.\n     * @param _maxN   Interval maximum amount of SGR.\n     * @param _minR   Interval minimum amount of SDR.\n     * @param _maxR   Interval maximum amount of SDR.\n     * @param _alpha  Interval alpha value (scaled up).\n     * @param _beta   Interval beta  value (scaled up).\n     */\n    function setInterval(uint256 _rowNum, uint256 _colNum, uint256 _minN, uint256 _maxN, uint256 _minR, uint256 _maxR, uint256 _alpha, uint256 _beta) external onlyOwner {\n        require(!intervalListsLocked, \"interval lists are already locked\");\n        intervalLists[_rowNum][_colNum] = Interval({minN: _minN, maxN: _maxN, minR: _minR, maxR: _maxR, alpha: _alpha, beta: _beta});\n    }\n\n    /**\n     * @dev Get interval parameters.\n     * @param _rowNum Interval row index.\n     * @param _colNum Interval column index.\n     * @return Interval minimum amount of SGR.\n     * @return Interval maximum amount of SGR.\n     * @return Interval minimum amount of SDR.\n     * @return Interval maximum amount of SDR.\n     * @return Interval alpha value (scaled up).\n     * @return Interval beta  value (scaled up).\n     */\n    function getInterval(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        Interval storage interval = intervalLists[_rowNum][_colNum];\n        return (interval.minN, interval.maxN, interval.minR, interval.maxR, interval.alpha, interval.beta);\n    }\n\n    /**\n     * @dev Get interval alpha and beta.\n     * @param _rowNum Interval row index.\n     * @param _colNum Interval column index.\n     * @return Interval alpha value (scaled up).\n     * @return Interval beta  value (scaled up).\n     */\n    function getIntervalCoefs(uint256 _rowNum, uint256 _colNum) external view returns (uint256, uint256) {\n        Interval storage interval = intervalLists[_rowNum][_colNum];\n        return (interval.alpha, interval.beta);\n    }\n\n    /**\n     * @dev Get the amount of SGR required for moving to the next minting-point.\n     * @param _rowNum Interval row index.\n     * @return Required amount of SGR.\n     */\n    function getRequiredMintAmount(uint256 _rowNum) external view returns (uint256) {\n        uint256 currMaxN = intervalLists[_rowNum + 0][0].maxN;\n        uint256 nextMinN = intervalLists[_rowNum + 1][0].minN;\n        assert(nextMinN >= currMaxN);\n        return nextMinN - currMaxN;\n    }\n}\n\n// File: contracts/sogur/BatchSetModelDataSource.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title Batch Set Model Data Source.\n */\ncontract BatchSetModelDataSource is Claimable {\n    string public constant VERSION = \"1.0.0\";\n\n    uint256 public constant MAX_INTERVAL_INPUT_LENGTH = 32;\n\n    ModelDataSource public modelDataSource;\n\n    /*\n     * @dev Create the contract.\n     */\n    constructor(address _modelDataSourceAddress) public {\n        require(_modelDataSourceAddress != address(0), \"model data source address is illegal\");\n        modelDataSource = ModelDataSource(_modelDataSourceAddress);\n    }\n\n    /**\n     * @dev Set model data source intervals.\n     */\n    function setIntervals(uint256 _intervalsCount,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _rowNum,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _colNum,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _minN,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _maxN,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _minR,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _maxR,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _alpha,\n        uint256[MAX_INTERVAL_INPUT_LENGTH] _beta) external onlyOwner {\n        require(_intervalsCount < MAX_INTERVAL_INPUT_LENGTH, \"intervals count must be lower than MAX_INTERVAL_INPUT_LENGTH\");\n\n        for (uint256 i = 0; i < _intervalsCount; i++) {\n            modelDataSource.setInterval(_rowNum[i], _colNum[i], _minN[i], _maxN[i], _minR[i], _maxR[i], _alpha[i], _beta[i]);\n        }\n    }\n\n    /**\n     * @dev Claim model data source ownership.\n     */\n    function claimOwnershipModelDataSource() external onlyOwner {\n        modelDataSource.claimOwnership();\n    }\n\n    /**\n     * @dev Renounce model data source ownership.\n     */\n    function renounceOwnershipModelDataSource() external onlyOwner {\n        modelDataSource.renounceOwnership();\n    }\n\n    /**\n     * @dev Lock model data source.\n     */\n    function lockModelDataSource() external onlyOwner {\n        modelDataSource.lock();\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnershipModelDataSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INTERVAL_INPUT_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnershipModelDataSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_intervalsCount\",\"type\":\"uint256\"},{\"name\":\"_rowNum\",\"type\":\"uint256[32]\"},{\"name\":\"_colNum\",\"type\":\"uint256[32]\"},{\"name\":\"_minN\",\"type\":\"uint256[32]\"},{\"name\":\"_maxN\",\"type\":\"uint256[32]\"},{\"name\":\"_minR\",\"type\":\"uint256[32]\"},{\"name\":\"_maxR\",\"type\":\"uint256[32]\"},{\"name\":\"_alpha\",\"type\":\"uint256[32]\"},{\"name\":\"_beta\",\"type\":\"uint256[32]\"}],\"name\":\"setIntervals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"modelDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockModelDataSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_modelDataSourceAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BatchSetModelDataSource","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"0000000000000000000000004e341adb6899cfbfb01d6e0e9b83167db7e1354a","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}