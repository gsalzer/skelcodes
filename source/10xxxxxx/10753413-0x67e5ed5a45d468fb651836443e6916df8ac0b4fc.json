{"status":"1","message":"OK","result":[{"SourceCode":"/*! ether_global.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), re-made author @team.gutalik | SPDX-License-Identifier: MIT License */\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function jackpot_topReff_draw() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\ncontract Destructible {\r\n    address payable public grand_owner;\r\n\r\n    event GrandOwnershipTransferred(address indexed previous_owner, address indexed new_owner);\r\n\r\n    constructor() public {\r\n        grand_owner = msg.sender;\r\n    }\r\n\r\n    function transferGrandOwnership(address payable _to) external {\r\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\r\n        \r\n        grand_owner = _to;\r\n    }\r\n\r\n    function destruct() external {\r\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\r\n\r\n        selfdestruct(grand_owner);\r\n    }\r\n}\r\n\r\ncontract EtherGlobal is Ownable, Destructible, Pausable {\r\n    struct User {\r\n        uint256 cycle;\r\n        address upline;\r\n        uint256 referrals;\r\n        uint256 payouts;\r\n        uint256 direct_bonus;\r\n        uint256 pool_bonus;\r\n        uint256 match_bonus;\r\n        uint256 jackpot_bonus;\r\n        uint256 deposit_amount;\r\n        uint256 deposit_payouts;\r\n        uint40 deposit_time;\r\n        uint256 total_deposits;\r\n        uint256 total_payouts;\r\n        uint256 total_structure;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    uint256[] public cycles;                        \r\n    address private sender;\r\n    uint8[] public ref_bonuses;                     \r\n    uint8[] public pool_bonuses;\r\n    address[] new_jackpot_users;\r\n    address[] all_jackpot_users;\r\n    address public newjackpot_winner;\r\n    address public alljackpot_winner;\r\n    uint40 public pool_last_draw = uint40(block.timestamp);\r\n    uint256 public pool_cycle;\r\n    uint256 public pool_balance;\r\n    uint256 public new_jackpot_balance;\r\n    uint256 public all_jackpot_balance;\r\n    uint256 public new_jackpot_length;\r\n    uint256 public all_jackpot_length;\r\n    uint256 public total_ETH_deposit;\r\n    uint256 public daily_ETH_deposit;\r\n    uint256 public total_Event_Pool;\r\n    \r\n    \r\n    mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;\r\n    mapping(uint8 => address) public pool_top;\r\n\r\n    uint256 public total_withdraw;\r\n    \r\n    event Upline(address indexed addr, address indexed upline);\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event DirectPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event PoolPayout(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event LimitReached(address indexed addr, uint256 amount);\r\n    \r\n    event NewJackPot(address indexed addr, uint256 amount);\r\n    event AllJackPot(address indexed addr, uint256 amount);\r\n\r\n    constructor() public {\r\n    \r\n        ref_bonuses.push(30);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(8);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        pool_bonuses.push(50);\r\n        pool_bonuses.push(30);\r\n        pool_bonuses.push(20);\r\n        cycles.push(50 ether);\r\n        cycles.push(100 ether);\r\n        cycles.push(150 ether);\r\n        cycles.push(200 ether);\r\n        cycles.push(500 ether);\r\n        cycles.push(1000 ether);\r\n        cycles.push(2000 ether);\r\n        sender = msg.sender;    \r\n    }\r\n\r\n\r\n    receive() payable external whenNotPaused {\r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    //Check if user's upline exists and set upline :)\r\n    function _setUpline(address _addr, address _upline) private {\r\n        if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time > 0 || _upline == jackpot_topReff_draw())) {\r\n            users[_addr].upline = _upline;\r\n            users[_upline].referrals++;\r\n\r\n            emit Upline(_addr, _upline);\r\n\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                if(_upline == address(0)) break;\r\n\r\n                users[_upline].total_structure++;\r\n\r\n                _upline = users[_upline].upline;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Register a user who participates for the first time and pay a direct bonus to the user's upline :)\r\n    function _deposit(address _addr, uint256 _amount) private {\r\n        require(users[_addr].upline != address(0) || _addr == jackpot_topReff_draw(), \"No upline\");\r\n\r\n        if(users[_addr].deposit_time > 0) {\r\n            users[_addr].cycle++;\r\n            require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), \"Deposit already exists\");\r\n            require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], \"Bad amount\");\r\n        }\r\n        else require(_amount >= 0.1 ether && _amount <= cycles[0], \"Bad amount\");\r\n        \r\n\r\n        users[_addr].payouts = 0;\r\n        users[_addr].deposit_amount = _amount;\r\n        users[_addr].deposit_payouts = 0;\r\n        users[_addr].deposit_time = uint40(block.timestamp);\r\n        users[_addr].total_deposits += _amount;\r\n        total_ETH_deposit += _amount;\r\n        daily_ETH_deposit += _amount;\r\n\r\n        emit NewDeposit(_addr, _amount);\r\n\r\n        \r\n        if(_amount >= 5 ether){\r\n            new_jackpot_users.push(_addr);\r\n            new_jackpot_length = new_jackpot_users.length;\r\n        }\r\n        \r\n        if(users[_addr].upline != address(0)) {\r\n            users[users[_addr].upline].direct_bonus += _amount / 10;\r\n\r\n            emit DirectPayout(users[_addr].upline, _addr, _amount / 10);\r\n        }\r\n        \r\n        if(users[users[_addr].upline].upline != address(0)) {\r\n        \r\n            users[users[users[_addr].upline].upline].direct_bonus += _amount / 50;\r\n            \r\n        }\r\n\r\n\r\n        \r\n        _pollDeposits(_addr, _amount);\r\n\r\n\r\n        //require 24 hour!\r\n        if(pool_last_draw + 24 hours < block.timestamp) {\r\n            _drawPool();\r\n            _drawJackPot();\r\n        }\r\n        \r\n        all_jackpot_users.push(_addr);\r\n        all_jackpot_length = all_jackpot_users.length;\r\n        \r\n        payable(jackpot_topReff_draw()).transfer(_amount / 10000 * 250);\r\n        payable(sender).transfer(_amount / 10000 * 50);\r\n    }\r\n\r\n    \r\n    \r\n    function _pollDeposits(address _addr, uint256 _amount) private {\r\n    \r\n        pool_balance += _amount / 100 * 5;\r\n        new_jackpot_balance += _amount / 100;\r\n        all_jackpot_balance += _amount / 100;\r\n        total_Event_Pool = pool_balance + new_jackpot_balance + all_jackpot_balance;\r\n    \r\n        address upline = users[_addr].upline;\r\n        \r\n\r\n        if(upline == address(0)) return;\r\n\r\n\r\n        pool_users_refs_deposits_sum[pool_cycle][upline] += _amount;\r\n\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == upline) break;\r\n\r\n            if(pool_top[i] == address(0)) {\r\n                pool_top[i] = upline;\r\n                break;\r\n            }\r\n\r\n            if(pool_users_refs_deposits_sum[pool_cycle][upline] > pool_users_refs_deposits_sum[pool_cycle][pool_top[i]]) {\r\n                for(uint8 j = i + 1; j < pool_bonuses.length; j++) {\r\n                    if(pool_top[j] == upline) {\r\n                        for(uint8 k = j; k <= pool_bonuses.length; k++) {\r\n                            pool_top[k] = pool_top[k + 1];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {\r\n                    pool_top[j] = pool_top[j - 1];\r\n                }\r\n\r\n                pool_top[i] = upline;\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nfunction _refPayout(address _addr, uint256 _amount) private {\r\n        address up = users[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            if(users[up].referrals >= i + 1) {\r\n                uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n                \r\n                users[up].match_bonus += bonus;\r\n\r\n                emit MatchPayout(up, _addr, bonus);\r\n            }\r\n\r\n            up = users[up].upline;\r\n        }\r\n    }\r\n\r\n\r\n    function _drawPool() private {\r\n        pool_last_draw = uint40(block.timestamp);\r\n        pool_cycle++;\r\n\r\n    \r\n        uint256 draw_amount = pool_balance / 2;\r\n\r\n    \r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n    \r\n            if(pool_top[i] == address(0)) break;\r\n\r\n    \r\n            uint256 win = draw_amount * pool_bonuses[i] / 100;\r\n\r\n    \r\n            users[pool_top[i]].pool_bonus += win;\r\n\r\n    \r\n            pool_balance -= win;\r\n\r\n\r\n            emit PoolPayout(pool_top[i], win);\r\n        }\r\n        \r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            pool_top[i] = address(0);\r\n        }\r\n    }\r\n\r\n    \r\n    function _drawJackPot() private {\r\n        \r\n\r\n    \r\n        uint256 draw_New_jackpot_amount = new_jackpot_balance / 2;\r\n\r\n        uint256 draw_All_jackpot_amount = all_jackpot_balance / 2;\r\n\r\n\r\n\r\n        bytes32 rand = keccak256(abi.encodePacked(block.timestamp, block.number));\r\n        \r\n        if(new_jackpot_length == 0){\r\n            new_jackpot_users.push(sender);\r\n            new_jackpot_length = new_jackpot_users.length;\r\n        }\r\n        \r\n\r\n        newjackpot_winner = new_jackpot_users[uint256(rand) % new_jackpot_users.length]; \r\n        \r\n        \r\n\r\n        users[newjackpot_winner].jackpot_bonus += draw_New_jackpot_amount;\r\n\r\n        new_jackpot_balance -= draw_New_jackpot_amount;\r\n\r\n        \r\n        alljackpot_winner = all_jackpot_users[uint256(rand) % all_jackpot_users.length]; \r\n\r\n\r\n        users[alljackpot_winner].jackpot_bonus += draw_All_jackpot_amount;\r\n\r\n        all_jackpot_balance -= draw_All_jackpot_amount;\r\n        \r\n\r\n        delete daily_ETH_deposit;\r\n        delete draw_New_jackpot_amount;\r\n        delete new_jackpot_users;\r\n        delete new_jackpot_length;\r\n        delete draw_All_jackpot_amount;\r\n    }\r\n\r\n\r\n    function deposit(address _upline) payable external whenNotPaused {\r\n        _setUpline(msg.sender, _upline);\r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n\r\n    function withdraw() external whenNotPaused {\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n        \r\n        require(users[msg.sender].payouts < max_payout, \"Full payouts\");\r\n\r\n    \r\n        if(to_payout > 0) {\r\n    \r\n            if(users[msg.sender].payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts;\r\n            }\r\n            \r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            \r\n            users[msg.sender].payouts += to_payout;\r\n            \r\n            _refPayout(msg.sender, to_payout);\r\n        }\r\n        \r\n\r\n        // Direct payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {\r\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\r\n\r\n            if(users[msg.sender].payouts + direct_bonus > max_payout) {\r\n                direct_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n            users[sender].direct_bonus += direct_bonus;\r\n            users[msg.sender].direct_bonus -= direct_bonus;\r\n            users[msg.sender].payouts += direct_bonus;\r\n            to_payout += direct_bonus;\r\n        }\r\n        \r\n        // Pool payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {\r\n            uint256 pool_bonus = users[msg.sender].pool_bonus;\r\n\r\n            if(users[msg.sender].payouts + pool_bonus > max_payout) {\r\n                pool_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].pool_bonus -= pool_bonus;\r\n            users[msg.sender].payouts += pool_bonus;\r\n            to_payout += pool_bonus;\r\n        }\r\n\r\n        // Match payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {\r\n            uint256 match_bonus = users[msg.sender].match_bonus;\r\n\r\n            if(users[msg.sender].payouts + match_bonus > max_payout) {\r\n                match_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].match_bonus -= match_bonus;\r\n            users[msg.sender].payouts += match_bonus;\r\n            to_payout += match_bonus;\r\n        }\r\n        \r\n        //Jackpot payout\r\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].jackpot_bonus > 0) {\r\n            uint256 jackpot_bonus = users[msg.sender].jackpot_bonus;\r\n\r\n            if(users[msg.sender].payouts + jackpot_bonus > max_payout) {\r\n                jackpot_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].jackpot_bonus -= jackpot_bonus;\r\n            users[msg.sender].payouts += jackpot_bonus;\r\n            to_payout += jackpot_bonus;\r\n        }\r\n        \r\n        \r\n        require(to_payout > 0, \"Zero payout\");\r\n        \r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n\r\n        payable(msg.sender).transfer(to_payout);\r\n\r\n        emit Withdraw(msg.sender, to_payout);\r\n\r\n        if(users[msg.sender].payouts >= max_payout) {\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\r\n        }\r\n    }\r\n    \r\n    function drawPool() external onlyOwner {\r\n        _drawPool();\r\n        _drawJackPot();\r\n    }\r\n\r\n    \r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    \r\n    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\r\n        return _amount * 340 / 100;\r\n    }\r\n\r\n    \r\n    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {\r\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount);\r\n        if(users[_addr].deposit_payouts < max_payout) {\r\n            payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 24 hours) / 100 * 5) - users[_addr].deposit_payouts;\r\n            \r\n            if(users[_addr].total_payouts >= users[_addr].total_deposits) {\r\n                payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 24 hours) / 100 * 6) - users[_addr].deposit_payouts;\r\n            }\r\n\r\n\r\n            if(users[_addr].deposit_payouts + payout > max_payout) {\r\n                payout = max_payout - users[_addr].deposit_payouts;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {\r\n        return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);\r\n    }\r\n\r\n    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\r\n        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _total_withdraw, uint40 _pool_last_draw, uint256 _pool_balance, uint256 _pool_lider) {\r\n        return (total_withdraw, pool_last_draw, pool_balance, pool_users_refs_deposits_sum[pool_cycle][pool_top[0]]);\r\n    }\r\n\r\n    function poolTopInfo() view external returns(address[3] memory addrs, uint256[3] memory deps) {\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            addrs[i] = pool_top[i];\r\n            deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllJackPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"GrandOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewJackPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"all_jackpot_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all_jackpot_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alljackpot_winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_pool_last_draw\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_pool_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_lider\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daily_ETH_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grand_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpot_topReff_draw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_jackpot_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_jackpot_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newjackpot_winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTopInfo\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"addrs\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"deps\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pool_top\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_users_refs_deposits_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_ETH_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_Event_Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferGrandOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jackpot_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_structure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EtherGlobal","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70f3f7e4a6a6381f106d2ca4118f687aefc8f8f2cc726496f01f0e0ddaac3d0b"}]}