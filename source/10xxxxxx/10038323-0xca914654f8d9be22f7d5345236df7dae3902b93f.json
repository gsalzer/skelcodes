{"status":"1","message":"OK","result":[{"SourceCode":"//Legacy contract to support the Sell-Kyber-Exchange functionality from earlier tutorials\r\n\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes  hint) external payable returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n}\r\ninterface Kyber {\r\n    function getOutputAmount(ERC20 from, ERC20 to, uint256 amount) external view returns(uint256);\r\n\r\n    function getInputAmount(ERC20 from, ERC20 to, uint256 amount) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\n  \r\n    // ERC20 Token Smart Contract\r\n    contract oracleInfo {\r\n        \r\n    \r\n      address owner; \r\n      OrFeedInterface orfeed = OrFeedInterface(0x8316b082621cfedab95bf4a44a1d4b64a6ffc336);\r\n       address kyberProxyAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n     IKyberNetworkProxy kyberProxy = IKyberNetworkProxy(kyberProxyAddress);\r\n\r\n\r\n      modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n        }\r\n        \r\n      constructor() public payable {\r\n            owner = msg.sender; \r\n           \r\n        }\r\n        \r\n        \r\n    function getPriceFromOracle(string fromParam, string toParam, string  side, uint256 amount) public constant returns (uint256){  \r\n\r\n\r\n\r\n      address sellToken = orfeed.getTokenAddress(fromParam);\r\n        address buyToken = orfeed.getTokenAddress(toParam);\r\n        \r\n        ERC20 sellToken1 = ERC20(sellToken);\r\n        ERC20 buyToken1 = ERC20(buyToken);\r\n        \r\n        uint sellDecim = sellToken1.decimals();\r\n         uint buyDecim = buyToken1.decimals();\r\n\r\n\r\n          \r\n        Kyber kyber = Kyber(0xFd9304Db24009694c680885e6aa0166C639727D6);\r\n        uint256 price;\r\n          \r\n        price = kyber.getOutputAmount(sellToken1, buyToken1, amount);\r\n                 \r\n                \r\n           \r\n         \r\n        return price;\r\n        \r\n          \r\n    }\r\n      \r\n      \r\n         \r\n     \r\n      \r\n      function changeOwner(address newOwner) onlyOwner returns(bool){\r\n          owner = newOwner;\r\n          return true;\r\n      }\r\n      \r\n     function withdrawBalance() onlyOwner returns(bool) {\r\n        uint amount = this.balance;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromParam\",\"type\":\"string\"},{\"name\":\"toParam\",\"type\":\"string\"},{\"name\":\"side\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"oracleInfo","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://786179d8933cd7f8acc15b44b25049b734601e21f20d6b7700ccd24fbf68e423"}]}