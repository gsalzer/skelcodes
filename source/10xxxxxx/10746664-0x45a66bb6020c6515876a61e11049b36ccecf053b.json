{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\nlibrary BasisPoints {\r\n    using SafeMath for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n\r\ninterface IStakeHandler {\r\n    function handleStake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\r\n    function handleUnstake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\r\n}\r\n\r\n\r\ninterface ILidCertifiableToken {\r\n    function activateTransfers() external;\r\n    function activateTax() external;\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function addMinter(address account) external;\r\n    function renounceMinter() external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function isMinter(address account) external view returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract LidStaking is Initializable, Ownable {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint256 constant internal DISTRIBUTION_MULTIPLIER = 2 ** 64;\r\n\r\n    uint public stakingTaxBP;\r\n    uint public unstakingTaxBP;\r\n    ILidCertifiableToken private lidToken;\r\n\r\n    mapping(address => uint) public stakeValue;\r\n    mapping(address => int) public stakerPayouts;\r\n\r\n\r\n    uint public totalDistributions;\r\n    uint public totalStaked;\r\n    uint public totalStakers;\r\n    uint public profitPerShare;\r\n    uint private emptyStakeTokens; //These are tokens given to the contract when there are no stakers.\r\n\r\n    IStakeHandler[] public stakeHandlers;\r\n    uint public startTime;\r\n\r\n    uint public registrationFeeWithReferrer;\r\n    uint public registrationFeeWithoutReferrer;\r\n    mapping(address => uint) public accountReferrals;\r\n    mapping(address => bool) public stakerIsRegistered;\r\n\r\n    event OnDistribute(address sender, uint amountSent);\r\n    event OnStake(address sender, uint amount, uint tax);\r\n    event OnUnstake(address sender, uint amount, uint tax);\r\n    event OnReinvest(address sender, uint amount, uint tax);\r\n    event OnWithdraw(address sender, uint amount);\r\n\r\n    modifier onlyLidToken {\r\n        require(msg.sender == address(lidToken), \"Can only be called by LidToken contract.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStakingActive {\r\n        require(startTime != 0 && now > startTime, \"Staking not yet started.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _stakingTaxBP,\r\n        uint _ustakingTaxBP,\r\n        uint _registrationFeeWithReferrer,\r\n        uint _registrationFeeWithoutReferrer,\r\n        address owner,\r\n        ILidCertifiableToken _lidToken\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n        stakingTaxBP = _stakingTaxBP;\r\n        unstakingTaxBP = _ustakingTaxBP;\r\n        lidToken = _lidToken;\r\n        registrationFeeWithReferrer = _registrationFeeWithReferrer;\r\n        registrationFeeWithoutReferrer = _registrationFeeWithoutReferrer;\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function registerAndStake(uint amount) public {\r\n        registerAndStake(amount, address(0x0));\r\n    }\r\n\r\n    function registerAndStake(uint amount, address referrer) public whenStakingActive {\r\n        require(!stakerIsRegistered[msg.sender], \"Staker must not be registered\");\r\n        require(lidToken.balanceOf(msg.sender) >= amount, \"Must have enough balance to stake amount\");\r\n        uint finalAmount;\r\n        if(address(0x0) == referrer) {\r\n            //No referrer\r\n            require(amount >= registrationFeeWithoutReferrer, \"Must send at least enough LID to pay registration fee.\");\r\n            distribute(registrationFeeWithoutReferrer);\r\n            finalAmount = amount.sub(registrationFeeWithoutReferrer);\r\n        } else {\r\n            //has referrer\r\n            require(amount >= registrationFeeWithReferrer, \"Must send at least enough LID to pay registration fee.\");\r\n            require(lidToken.transferFrom(msg.sender, referrer, registrationFeeWithReferrer), \"Stake failed due to failed referral transfer.\");\r\n            accountReferrals[referrer] = accountReferrals[referrer].add(1);\r\n            finalAmount = amount.sub(registrationFeeWithReferrer);\r\n        }\r\n        stakerIsRegistered[msg.sender] = true;\r\n        stake(finalAmount);\r\n    }\r\n\r\n    function stake(uint amount) public whenStakingActive {\r\n        require(stakerIsRegistered[msg.sender] == true, \"Must be registered to stake.\");\r\n        require(amount >= 1e18, \"Must stake at least one LID.\");\r\n        require(lidToken.balanceOf(msg.sender) >= amount, \"Cannot stake more LID than you hold unstaked.\");\r\n        if (stakeValue[msg.sender] == 0) totalStakers = totalStakers.add(1);\r\n        uint tax = _addStake(amount);\r\n        require(lidToken.transferFrom(msg.sender, address(this), amount), \"Stake failed due to failed transfer.\");\r\n        emit OnStake(msg.sender, amount, tax);\r\n    }\r\n\r\n    function unstake(uint amount) external whenStakingActive {\r\n        require(amount >= 1e18, \"Must unstake at least one LID.\");\r\n        require(stakeValue[msg.sender] >= amount, \"Cannot unstake more LID than you have staked.\");\r\n        //must withdraw all dividends, to prevent overflows\r\n        withdraw(dividendsOf(msg.sender));\r\n        if (stakeValue[msg.sender] == amount) totalStakers = totalStakers.sub(1);\r\n        totalStaked = totalStaked.sub(amount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount);\r\n\r\n        uint tax = findTaxAmount(amount, unstakingTaxBP);\r\n        uint earnings = amount.sub(tax);\r\n        _increaseProfitPerShare(tax);\r\n        stakerPayouts[msg.sender] = uintToInt(profitPerShare.mul(stakeValue[msg.sender]));\r\n\r\n        for (uint i=0; i < stakeHandlers.length; i++) {\r\n            stakeHandlers[i].handleUnstake(msg.sender, amount, stakeValue[msg.sender]);\r\n        }\r\n\r\n        require(lidToken.transferFrom(address(this), msg.sender, earnings), \"Unstake failed due to failed transfer.\");\r\n        emit OnUnstake(msg.sender, amount, tax);\r\n    }\r\n\r\n    function withdraw(uint amount) public whenStakingActive {\r\n        require(dividendsOf(msg.sender) >= amount, \"Cannot withdraw more dividends than you have earned.\");\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(amount.mul(DISTRIBUTION_MULTIPLIER));\r\n        lidToken.transfer(msg.sender, amount);\r\n        emit OnWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    function reinvest(uint amount) external whenStakingActive {\r\n        require(dividendsOf(msg.sender) >= amount, \"Cannot reinvest more dividends than you have earned.\");\r\n        uint payout = amount.mul(DISTRIBUTION_MULTIPLIER);\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\r\n        uint tax = _addStake(amount);\r\n        emit OnReinvest(msg.sender, amount, tax);\r\n    }\r\n\r\n    function distribute(uint amount) public {\r\n        require(lidToken.balanceOf(msg.sender) >= amount, \"Cannot distribute more LID than you hold unstaked.\");\r\n        totalDistributions = totalDistributions.add(amount);\r\n        _increaseProfitPerShare(amount);\r\n        require(\r\n            lidToken.transferFrom(msg.sender, address(this), amount),\r\n            \"Distribution failed due to failed transfer.\"\r\n        );\r\n        emit OnDistribute(msg.sender, amount);\r\n    }\r\n\r\n    function handleTaxDistribution(uint amount) external onlyLidToken {\r\n        totalDistributions = totalDistributions.add(amount);\r\n        _increaseProfitPerShare(amount);\r\n        emit OnDistribute(msg.sender, amount);\r\n    }\r\n\r\n    function dividendsOf(address staker) public view returns (uint) {\r\n        int divPayout = uintToInt(profitPerShare.mul(stakeValue[staker]));\r\n        require(divPayout >= stakerPayouts[staker], \"dividend calc overflow\");\r\n        return uint(divPayout - stakerPayouts[staker])\r\n            .div(DISTRIBUTION_MULTIPLIER);\r\n    }\r\n\r\n    function findTaxAmount(uint value, uint taxBP) public pure returns (uint) {\r\n        return value.mulBP(taxBP);\r\n    }\r\n\r\n    function numberStakeHandlersRegistered() external view returns (uint) {\r\n        return stakeHandlers.length;\r\n    }\r\n\r\n    function registerStakeHandler(IStakeHandler sc) external onlyOwner {\r\n        stakeHandlers.push(sc);\r\n    }\r\n\r\n    function unregisterStakeHandler(uint index) external onlyOwner {\r\n        IStakeHandler sc = stakeHandlers[stakeHandlers.length-1];\r\n        stakeHandlers.pop();\r\n        stakeHandlers[index] = sc;\r\n    }\r\n\r\n    function setStakingBP(uint valueBP) external onlyOwner {\r\n        require(valueBP < 10000, \"Tax connot be over 100% (10000 BP)\");\r\n        stakingTaxBP = valueBP;\r\n    }\r\n\r\n    function setUnstakingBP(uint valueBP) external onlyOwner {\r\n        require(valueBP < 10000, \"Tax connot be over 100% (10000 BP)\");\r\n        unstakingTaxBP = valueBP;\r\n    }\r\n\r\n    function setStartTime(uint _startTime) external onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setRegistrationFees(uint valueWithReferrer, uint valueWithoutReferrer) external onlyOwner {\r\n        registrationFeeWithReferrer = valueWithReferrer;\r\n        registrationFeeWithoutReferrer = valueWithoutReferrer;\r\n    }\r\n\r\n    function uintToInt(uint val) internal pure returns (int) {\r\n        if (val >= uint(-1).div(2)) {\r\n            require(false, \"Overflow. Cannot convert uint to int.\");\r\n        } else {\r\n            return int(val);\r\n        }\r\n    }\r\n\r\n    function _addStake(uint amount) internal returns (uint tax) {\r\n        tax = findTaxAmount(amount, stakingTaxBP);\r\n        uint stakeAmount = amount.sub(tax);\r\n        totalStaked = totalStaked.add(stakeAmount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].add(stakeAmount);\r\n        for (uint i=0; i < stakeHandlers.length; i++) {\r\n            stakeHandlers[i].handleStake(msg.sender, stakeAmount, stakeValue[msg.sender]);\r\n        }\r\n        uint payout = profitPerShare.mul(stakeAmount);\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\r\n        _increaseProfitPerShare(tax);\r\n    }\r\n\r\n    function _increaseProfitPerShare(uint amount) internal {\r\n        if (totalStaked != 0) {\r\n            if (emptyStakeTokens != 0) {\r\n                amount = amount.add(emptyStakeTokens);\r\n                emptyStakeTokens = 0;\r\n            }\r\n            profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked));\r\n        } else {\r\n            emptyStakeTokens = emptyStakeTokens.add(amount);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LidSimplifiedPresaleAccess is Initializable {\r\n    using SafeMath for uint;\r\n    LidStaking private staking;\r\n\r\n    uint[24] private decayCurve;\r\n\r\n    function initialize(LidStaking _staking) external initializer {\r\n        staking = _staking;\r\n        //Precalculated\r\n        decayCurve = [\r\n            1000000,\r\n            750000,\r\n            562500,\r\n            421875,\r\n            316406,\r\n            237305,\r\n            177979,\r\n            133484,\r\n            100113,\r\n            75085,\r\n            56314,\r\n            42235,\r\n            31676,\r\n            23757,\r\n            17818,\r\n            13363,\r\n            10023,\r\n            7517,\r\n            5638,\r\n            4228,\r\n            3171,\r\n            2378,\r\n            1784,\r\n            0\r\n        ];\r\n    }\r\n\r\n    function getAccessTime(address account, uint startTime) external view returns (uint accessTime) {\r\n        uint stakeValue = staking.stakeValue(account);\r\n        if (stakeValue == 0) return startTime.add(24 hours);\r\n        if (stakeValue >= decayCurve[0]) return startTime;\r\n        uint i=0;\r\n        uint stake2 = decayCurve[0];\r\n        while (stake2 > stakeValue && i < 24) {\r\n            i++;\r\n            stake2 = decayCurve[i];\r\n        }\r\n        if (stake2 == stakeValue) return startTime.add(i.add(1).mul(1 hours));\r\n        return interpolate(\r\n            startTime.add(i.mul(1 hours)),\r\n            startTime.add(i.add(1).mul(1 hours)),\r\n            decayCurve[i.sub(1)],\r\n            decayCurve[i],\r\n            stakeValue\r\n        );\r\n    }\r\n\r\n    //Returns the linearly interpolated time between two timeX/stakeX points based on a stakeValue.\r\n    function interpolate(\r\n        uint time1,\r\n        uint time2,\r\n        uint stake1,\r\n        uint stake2,\r\n        uint stakeValue\r\n    ) public pure returns (uint) {\r\n        require(stakeValue > stake2, \"stakeValue must be gt stake2\");\r\n        require(stakeValue < stake1, \"stakeValue must be lt stake1\");\r\n        require(time2 > time1, \"time2 must be after time1\");\r\n        return time1.mul(\r\n            stakeValue.sub(stake2)\r\n        ).add(\r\n            time2.mul(\r\n                stake1.sub(stakeValue)\r\n            )\r\n        ).div(\r\n            stake1.sub(stake2)\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"getAccessTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accessTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract LidStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeValue\",\"type\":\"uint256\"}],\"name\":\"interpolate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"LidSimplifiedPresaleAccess","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://73edd86362abd383316b8ee0b5f4992e8503ffbdda5daf94bf115cd98a7e45ed"}]}