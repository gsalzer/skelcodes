{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/utils/EIP1167/CloneFactory.sol\n\npragma solidity ^0.5.0;\n\n/*\nThe MIT License (MIT)\nCopyright (c) 2018 Murray Software, LLC.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n//solhint-disable max-line-length\n//solhint-disable no-inline-assembly\n\n\ncontract CloneFactory {\n\n    function createClone(address target) internal returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            result := create(0, clone, 0x37)\n        }\n    }\n\n    function isClone(address target, address query) internal view returns (bool result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n            mstore(add(clone, 0xa), targetBytes)\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n            let other := add(clone, 0x40)\n            extcodecopy(query, other, 0, 0x2d)\n            result := and(\n            eq(mload(clone), mload(other)),\n            eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n            )\n        }\n    }\n}\n\n// File: contracts/upgradable/OwnableUpgradable.sol\n\npragma solidity ^0.5.16;\n\n// import \"../openzeppelin/upgrades/contracts/Initializable.sol\";\n\n\ncontract OwnableUpgradable is Initializable {\n    address payable public owner;\n    address payable internal newOwnerCandidate;\n\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Permission denied\");\n        _;\n    }\n\n\n    // ** INITIALIZERS – Constructors for Upgradable contracts **\n\n    function initialize() public initializer {\n        owner = msg.sender;\n    }\n\n    function initialize(address payable newOwner) public initializer {\n        owner = newOwner;\n    }\n\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        newOwnerCandidate = newOwner;\n    }\n\n    function acceptOwner() public {\n        require(msg.sender == newOwnerCandidate, \"Permission denied\");\n        owner = newOwnerCandidate;\n    }\n\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/tokenizedStrategy/interfaces/IDfTokenizedStrategy.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IDfTokenizedStrategy {\n\n    function initialize(\n        string calldata _tokenName,\n        string calldata _tokenSymbol,\n        address payable _owner,\n        address _issuer,\n        bool _onlyWithProfit,\n        bool _transferDepositToOwner,\n        uint[5] calldata _params,     // extraCoef [0], profitPercent [1], usdcToBuyEth [2], ethType [3], closingType [4]\n        bytes calldata _exchangeData\n    ) external payable;\n\n    function profitToken() external returns(address);\n\n}\n\n// File: contracts/tokenizedStrategy/interfaces/IDfTokenizedAdmin.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IDfTokenizedAdmin {\n\n    function initialize(\n        address _dfTokenizedStrategy\n    ) external;\n\n}\n\n// File: contracts/tokenizedStrategy/DfTokenizedStrategyFactory.sol\n\npragma solidity ^0.5.16;\n\n\n\n\n\n\n\ncontract DfTokenizedStrategyFactory is Initializable, OwnableUpgradable, CloneFactory {\n\n    // Minimal Proxy Contract – DfTokenizedStrategy Source\n    address public dfTokenizedStrategySource;\n\n    // Minimal Proxy Contract – DfTokenizedAdmin Source\n    address public dfTokenizedAdminSource;\n\n\n    // ** EVENTS **\n\n    event TokenizedStrategyCreated(\n        address indexed tokenizedStrategy\n    );\n\n    event TokenizedAdminCreated(\n        address indexed tokenizedAdmin\n    );\n\n\n    // INITIALIZER – Constructor for Upgradable contracts\n\n    function initialize() public initializer {\n        OwnableUpgradable.initialize();  // Initialize Parent Contract\n\n        dfTokenizedStrategySource = address(0x04F1a848dD8f7b0fF170D99fad8825631b0102B9);  // TODO: set address\n        dfTokenizedAdminSource = address(0);  // TODO: set address\n    }\n\n\n    // ** ONLY_OWNER functions **\n\n    function setDfTokenizedStrategySource(address _dfTokenizedStrategySource) public onlyOwner {\n        dfTokenizedStrategySource = _dfTokenizedStrategySource;\n    }\n\n    function setDfTokenizedAdminSource(address _dfTokenizedAdminSource) public onlyOwner {\n        dfTokenizedAdminSource = _dfTokenizedAdminSource;\n    }\n\n\n    // ** PUBLIC PAYABLE functions **\n\n    function launchStrategy(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        bool _onlyWithProfit,       // can only be closed with enough profit\n        uint[5] memory _params,     // extraCoef [0], profitPercent [1], usdcToBuyEth [2],\n                                    // ethType [3], closingType [4] (0 – ANY TYPE, 1 - ETH, 2 - USDC, 3 - ETH+USDC)\n        bytes memory _exchangeData\n    ) public payable returns(\n        address dfTokenizedStrategy\n    ) {\n        address payable userAddr = msg.sender;\n\n        dfTokenizedStrategy = _launchStrategy(\n            _tokenName,\n            _tokenSymbol,\n            userAddr,       // DfTokenizedStrategy owner\n            userAddr,       // issuer of tokens\n            _onlyWithProfit,\n            true,           // transfer deposit to issuer address after closing\n            _params,\n            _exchangeData\n        );\n\n    }\n\n    function launchStrategyWithProxyAdmin(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        bool _onlyWithProfit,       // can only be closed with enough profit\n        uint[5] memory _params,     // extraCoef [0], profitPercent [1], usdcToBuyEth [2],\n                                    // ethType [3], closingType [4] (0 – ANY TYPE, 1 - ETH, 2 - USDC, 3 - ETH+USDC)\n        bytes memory _exchangeData\n    ) public payable returns(\n        address dfTokenizedStrategy,\n        address payable dfTokenizedAdmin\n    ) {\n        dfTokenizedAdmin = address(uint160(_createTokenizedAdmin()));\n\n        dfTokenizedStrategy = _launchStrategy(\n            _tokenName,\n            _tokenSymbol,\n            dfTokenizedAdmin,   // DfTokenizedStrategy owner\n            msg.sender,         // issuer of tokens\n            _onlyWithProfit,\n            false,              // do not transfer deposit to issuer address after closing\n            _params,\n            _exchangeData\n        );\n\n        // set dfTokenizedStrategy address\n        IDfTokenizedAdmin(dfTokenizedAdmin).initialize(\n            dfTokenizedStrategy\n        );\n    }\n\n\n    // ** INTERNAL functions **\n\n    function _launchStrategy(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        address payable _owner,\n        address _issuer,\n        bool _onlyWithProfit,\n        bool _transferDepositToOwner,\n        uint[5] memory _params,     // extraCoef [0], profitPercent [1], usdcToBuyEth [2], ethType [3], closingType [4]\n        bytes memory _exchangeData\n    ) internal returns(\n        address dfTokenizedStrategy\n    ) {\n        dfTokenizedStrategy = createClone(dfTokenizedStrategySource);\n\n        IDfTokenizedStrategy(dfTokenizedStrategy)\n            .initialize\n            .value(msg.value)\n            (\n                _tokenName,\n                _tokenSymbol,\n                _owner,\n                _issuer,\n                _onlyWithProfit,\n                _transferDepositToOwner,\n                _params,\n                _exchangeData\n            );\n\n        emit TokenizedStrategyCreated(dfTokenizedStrategy);\n    }\n\n    function _createTokenizedAdmin() internal returns(\n        address dfTokenizedAdmin\n    ) {\n        dfTokenizedAdmin = createClone(dfTokenizedAdminSource);\n\n        emit TokenizedAdminCreated(dfTokenizedAdmin);\n    }\n\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenizedAdmin\",\"type\":\"address\"}],\"name\":\"TokenizedAdminCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenizedStrategy\",\"type\":\"address\"}],\"name\":\"TokenizedStrategyCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfTokenizedAdminSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfTokenizedStrategySource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_onlyWithProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256[5]\",\"name\":\"_params\",\"type\":\"uint256[5]\"},{\"internalType\":\"bytes\",\"name\":\"_exchangeData\",\"type\":\"bytes\"}],\"name\":\"launchStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfTokenizedStrategy\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_onlyWithProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256[5]\",\"name\":\"_params\",\"type\":\"uint256[5]\"},{\"internalType\":\"bytes\",\"name\":\"_exchangeData\",\"type\":\"bytes\"}],\"name\":\"launchStrategyWithProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfTokenizedStrategy\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dfTokenizedAdmin\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfTokenizedAdminSource\",\"type\":\"address\"}],\"name\":\"setDfTokenizedAdminSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfTokenizedStrategySource\",\"type\":\"address\"}],\"name\":\"setDfTokenizedStrategySource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfTokenizedStrategyFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}