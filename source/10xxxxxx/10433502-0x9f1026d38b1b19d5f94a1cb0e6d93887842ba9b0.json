{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n         \t\t \t\t\t\t\t \r\ntelegram: @etheriums\r\nhashtag: #etheriums\r\n\r\n*/\r\npragma solidity ^0.5.7;\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public manager;\r\n  address public ownerWallet;\r\n  address public refererWallet;\r\n\r\n  constructor() public {\r\n    owner \t\t\t= msg.sender;\r\n    manager \t\t= msg.sender;\r\n    ownerWallet \t= 0xEF8498198158959FFd4900Be18C61B02BDE93882;\r\n    refererWallet \t= 0x61B596e5FEaa6B0fb9164206aD1DdA58707136b7;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrManager() {\r\n     require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n\r\n  function setManager(address _manager) public onlyOwnerOrManager {\r\n      manager = _manager;\r\n  }\r\n}\r\n\r\ncontract ETHERIUMS is Ownable {\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _amount);\r\n    event regWithoutPaymentEvent(address indexed _user, address indexed _referrer, uint _amount);\r\n    event getMoneyForReferralEvent(address indexed _user, address indexed _referral, uint _amount, uint _level);\r\n    event accountStatusChanged(address indexed _user, uint _status);\r\n    event accountStatusFailed(address indexed _user, uint _status,  uint _type);\r\n    //------------------------------\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint isActive;\r\n        uint referrerID;\r\n        address[] referral;\r\n    }\r\n    mapping (uint => uint) public LEVEL_COMMISION;\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_COMMISION[1] =  30;\r\n        LEVEL_COMMISION[2] =  20;\r\n        LEVEL_COMMISION[3] =  10;\r\n        LEVEL_COMMISION[4] =  6;\r\n        LEVEL_COMMISION[5] =  4;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            isActive : 1,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\t\t\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n\t\t\tisActive : 1,\r\n            referrerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[refererWallet] = userStruct;\r\n        userList[currUserID] = refererWallet;\r\n\t\t\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        if(users[msg.sender].isExist){\r\n            revert('User already subscribed');\r\n        } else{\r\n            uint refId = 0;\r\n\t\t\t\r\n            address referrer = bytesToAddress(msg.data);\r\n    \r\n            if (users[referrer].isExist){\r\n                refId = users[referrer].id;\r\n            } else { // if no referrer then refererWallet will be referer\r\n                refId = users[refererWallet].id;\r\n            }\r\n            regUser(refId);\r\n        } \r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n\t\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n\t\t\tisActive : 1,\r\n            referrerID : _referrerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] \t\t= \tuserStruct;\r\n        userList[currUserID] \t= \tmsg.sender;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForReferral(msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], msg.value);\r\n    }\r\n\r\n    function payForReferral(address _address) internal {\r\n\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n        address referer5;\r\n\t\r\n\t\tuint amount;\r\n\t\t\r\n\t\treferer1 = userList[users[_address].referrerID];\r\n\t\tif(users[referer1].isExist && users[referer1].isActive==1){\r\n\t\t\tamount \t=\t(LEVEL_COMMISION[1] * msg.value) / 100;\r\n\t\t\taddress(uint160(referer1)).transfer(amount);\r\n\t\t\temit getMoneyForReferralEvent(referer1, msg.sender, amount, 1);\r\n        }\r\n\t\treferer2 = userList[users[referer1].referrerID];\r\n\t\tif(users[referer2].isExist && users[referer2].isActive==1){\r\n            amount \t=\t(LEVEL_COMMISION[2] * msg.value) / 100;\r\n\t\t\taddress(uint160(referer2)).transfer(amount);\r\n\t\t\temit getMoneyForReferralEvent(referer2, msg.sender, amount, 2);\r\n        }\r\n\t\treferer3 = userList[users[referer2].referrerID];\r\n\t\tif(users[referer3].isExist && users[referer3].isActive==1){\r\n            amount \t=\t(LEVEL_COMMISION[3] * msg.value) / 100;\r\n\t\t\taddress(uint160(referer3)).transfer(amount);\r\n\t\t\temit getMoneyForReferralEvent(referer3, msg.sender, amount, 3);\r\n        }\r\n\t\treferer4 = userList[users[referer3].referrerID];\r\n\t\tif(users[referer4].isExist && users[referer4].isActive==1){\r\n            amount \t=\t(LEVEL_COMMISION[4] * msg.value) / 100;\r\n\t\t\taddress(uint160(referer4)).transfer(amount);\r\n\t\t\temit getMoneyForReferralEvent(referer4, msg.sender, amount, 4);\r\n        }\r\n\t\treferer5 = userList[users[referer4].referrerID];\r\n\t\tif(users[referer5].isExist && users[referer5].isActive==1){\r\n            amount \t=\t(LEVEL_COMMISION[5] * msg.value) / 100;\r\n\t\t\taddress(uint160(referer5)).transfer(amount);\r\n\t\t\temit getMoneyForReferralEvent(referer5, msg.sender, amount, 5);\r\n        }\r\n\t\tsendBalance();\r\n    }\r\n\t\r\n\tfunction getEthBalance() public view returns(uint) {\r\n\t\treturn address(this).balance;\r\n    }\r\n\t\r\n\tfunction makeAccountActiveInactive(address _address, address _referrer, uint _active)  public onlyOwnerOrManager returns(bool) {\r\n\t\t\r\n\t\tif(users[_address].isExist){\r\n\t\t\tif(_active==1){\r\n\t\t\t\tif(users[_address].isActive==1){\r\n\t\t\t\t\temit accountStatusFailed(_address, _active, 1);\r\n\t\t\t\t\trevert('Already Active');\r\n\t\t\t\t}else{\r\n\t\t\t\t\tusers[_address].isActive\t=\t1;\r\n\t\t\t\t\temit accountStatusChanged(_address, 1);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}else if(_active==0){\r\n\t\t\t\tif(users[_address].isActive==0){\r\n\t\t\t\t\temit accountStatusFailed(_address, _active, 2);\r\n\t\t\t\t\trevert('Already inactive');\r\n\t\t\t\t}else{\r\n\t\t\t\t\tusers[_address].isActive\t=\t0;\r\n\t\t\t\t\temit accountStatusChanged(_address, 0);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\temit accountStatusFailed(_address, _active, 3);\r\n\t\t\t\trevert('Invalid Type');\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(_active==1){\r\n\t\t\t\tuint _referrerID;\r\n\t\t\t\tif (users[_referrer].isExist){\r\n\t\t\t\t\t_referrerID = users[_referrer].id;\r\n\t\t\t\t} else { // if no _referrer then refererWallet will be referer\r\n\t\t\t\t\t_referrerID = users[refererWallet].id;\r\n\t\t\t\t}\r\n\t\t\t\tUserStruct memory userStruct;\r\n\t\t\t\tcurrUserID++;\r\n\r\n\t\t\t\tuserStruct = UserStruct({\r\n\t\t\t\t\tisExist : true,\r\n\t\t\t\t\tid : currUserID,\r\n\t\t\t\t\tisActive : 1,\r\n\t\t\t\t\treferrerID : _referrerID,\r\n\t\t\t\t\treferral : new address[](0)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tusers[_address] \t\t= \tuserStruct;\r\n\t\t\t\tuserList[currUserID] \t= \t_address;\r\n\t\t\t\tusers[userList[_referrerID]].referral.push(_address);\r\n\t\t\t\t\r\n\t\t\t\temit regWithoutPaymentEvent(_address, userList[_referrerID], 0);\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\temit accountStatusFailed(_address, _active, 4);\r\n\t\t\t\trevert('Invalid address');\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tfunction getAccountStatus(address _address) public view returns(uint) {\r\n\t\treturn users[_address].isActive;\t\r\n\t}\r\n\t\r\n    \r\n    function sendBalance() private\r\n    {\r\n\t\tuint amount =\tgetEthBalance();\r\n\t\taddress(uint160(ownerWallet)).transfer(amount);\r\n\t\temit getMoneyForReferralEvent(ownerWallet, msg.sender, amount, 1);\r\n    }\r\n\t\r\n    function viewUserReferral(address _address) public view returns(address[] memory) {\r\n        return users[_address].referral;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"refererWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_COMMISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isActive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_active\",\"type\":\"uint256\"}],\"name\":\"makeAccountActiveInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAccountStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"regWithoutPaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMoneyForReferralEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"accountStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"accountStatusFailed\",\"type\":\"event\"}]","ContractName":"ETHERIUMS","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://81513dff597827a3e3bd03ccf0b79ec8d16023ce90ea78ecf18bc2331b7e566f"}]}