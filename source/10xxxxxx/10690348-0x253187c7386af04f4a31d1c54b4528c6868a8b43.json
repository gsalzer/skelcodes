{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Developed by The Flowchain Foundation\r\n */\r\npragma solidity 0.5.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender != address(0));\r\n        require(msg.sender == newOwner);\r\n        _;\r\n    }\r\n    \r\n    function isOwner(address account) public view returns (bool) {\r\n        if( account == owner ){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public onlyNewOwner {\r\n        emit OwnershipTransferred(owner, newOwner);        \r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev The Pausable can pause and unpause the token transfers.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () public {\r\n        _paused = false;\r\n    }    \r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title The mintable tokens.\r\n */\r\ncontract Mintable {\r\n    using SafeMath for uint;\r\n\r\n    function addMinter(address minter) external returns (bool success);\r\n    function removeMinter(address minter) external returns (bool success);\r\n    function mint(address to, uint amount) external returns (bool success);    \r\n}\r\n\r\n/**\r\n * @title The off-chain issuable tokens.\r\n */\r\ncontract OffchainIssuable {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function setMinWithdrawAmount(uint amount) external returns (bool success);\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function getMinWithdrawAmount() external view returns (uint amount);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens redeemed to `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountRedeemOf(address _owner) external view returns (uint amount);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens withdrawn by `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountWithdrawOf(address _owner) external view returns (uint amount);\r\n\r\n    /**\r\n     * @dev Redeem the value of tokens to the address 'msg.sender'\r\n     * @param to The user that will receive the redeemed token.\r\n     * @param amount Number of tokens to redeem.\r\n     */\r\n    function redeem(address to, uint amount) external returns (bool success);\r\n\r\n    /**\r\n     * @dev The user withdraw API.\r\n     * @param amount Number of tokens to redeem.\r\n     */\r\n    function withdraw(address pool, uint amount) external returns (bool success);\r\n}\r\n\r\n/**\r\n * @title The ERC20 tokens\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev The ERC20 standard implementation.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of ERC-20 that adds off-chain issuable and mintable tokens.\r\n * It allows miners to mint (create) new tokens.\r\n *\r\n * At construction, the contract `_mintableAddress` is the only token minter.\r\n */\r\ncontract DexToken is ERC20, ERC20Detailed, Mintable, OffchainIssuable, Ownable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    bool internal _isIssuable;\r\n    uint private _min_withdraw_amount = 100;\r\n\r\n    mapping (address => uint) private _amountMinted;\r\n    mapping (address => uint) private _amountRedeem;\r\n\r\n    event Freeze(address indexed account);\r\n    event Unfreeze(address indexed account);\r\n\r\n    mapping (address => bool) public minters;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    modifier notFrozen(address _account) {\r\n        require(!frozenAccount[_account]);\r\n        _;\r\n    }\r\n\r\n    constructor () public ERC20Detailed(\"Dextoken Governance\", \"DEXG\", 18) {\r\n        _isIssuable = true;\r\n    }\r\n\r\n    function transfer(address to, uint value) public notFrozen(msg.sender) whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }   \r\n\r\n    function transferFrom(address from, address to, uint value) public notFrozen(from) whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function suspendIssuance() external onlyOwner {\r\n        _isIssuable = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function resumeIssuance() external onlyOwner {\r\n        _isIssuable = true;\r\n    }\r\n\r\n    /**\r\n     * @return bool return 'true' if tokens can still be issued by the issuer, \r\n     * 'false' if they can't anymore.\r\n     */\r\n    function isIssuable() external view returns (bool success) {\r\n        return _isIssuable;\r\n    }\r\n\r\n    /**\r\n     * @dev Freeze an user\r\n     * @param account The address of the user who will be frozen\r\n     * @return The result of freezing an user\r\n     */\r\n    function freezeAccount(address account) external onlyOwner returns (bool) {\r\n        require(!frozenAccount[account], \"ERC20: account frozen\");\r\n        frozenAccount[account] = true;\r\n        emit Freeze(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze an user\r\n     * @param account The address of the user who will be unfrozen\r\n     * @return The result of unfreezing an user\r\n     */\r\n    function unfreezeAccount(address account) external onlyOwner returns (bool) {\r\n        require(frozenAccount[account], \"ERC20: account not frozen\");\r\n        frozenAccount[account] = false;\r\n        emit Unfreeze(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Setup the contract address that can mint tokens\r\n     * @param minter The address of the smart contract\r\n     * @return The result of the setup\r\n     */\r\n    function addMinter(address minter) external onlyOwner returns (bool success) {\r\n        minters[minter] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeMinter(address minter) external onlyOwner returns (bool success) {\r\n        minters[minter] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function setMinWithdrawAmount(uint amount) external onlyOwner returns (bool success) {\r\n        require(amount > 0, \"ERC20: amount invalid\");\r\n        _min_withdraw_amount = amount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function getMinWithdrawAmount() external view returns (uint amount) {\r\n        return _min_withdraw_amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens redeemed to `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountRedeemOf(address _owner) external view returns (uint amount) {\r\n        return _amountRedeem[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens withdrawn by `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountWithdrawOf(address _owner) external view returns (uint amount) {\r\n        return _amountMinted[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem user mintable tokens. Only the mining contract can redeem tokens.\r\n     * @param pool The token pool that will receive the redeemed token.     \r\n     * @param amount The amount of tokens to be withdrawn\r\n     * @return The result of the redeem\r\n     */\r\n    function redeem(address pool, uint amount) external returns (bool success) {\r\n        require(minters[msg.sender], \"!minter\");    \r\n        require(_isIssuable == true, \"ERC20: token not issuable\");\r\n        require(amount > 0, \"ERC20: amount invalid\");\r\n\r\n        // The total amount of redeem tokens to the user.\r\n        _amountRedeem[pool].sub(amount, \"ERC20: transfer amount exceeds redeem\");\r\n\r\n        // Mint new tokens and send the funds to the account `mintableAddress`\r\n        // Users can withdraw funds.\r\n        _amountMinted[pool].add(amount);\r\n        _mint(pool, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev The user can withdraw his minted tokens from the staking pool.\r\n     * @param amount The amount of tokens to be withdrawn\r\n     * @return The result of the withdraw\r\n     */\r\n    function withdraw(address pool, uint amount) external returns (bool success) {\r\n        require(minters[pool], \"!minter\");    \r\n        require(_isIssuable == true, \"ERC20: not issuable\");\r\n\r\n        // Safety check\r\n        require(amount > 0, \"ERC20: redeem must greater than zero\");        \r\n        require(amount <= _amountRedeem[msg.sender], \"ERC20: redeem not enough balance\");\r\n        require(amount >= _min_withdraw_amount, \"ERC20: redeem too small\");\r\n\r\n        // The balance of the user redeemed tokens.\r\n        _amountRedeem[msg.sender].sub(amount, \"ERC20: redeem exceeds balance\");\r\n\r\n        // Keep track of the tokens minted by the user.\r\n        _amountMinted[msg.sender].add(amount);\r\n\r\n        _transfer(pool, msg.sender, amount);\r\n        \r\n        emit Transfer(pool, msg.sender, amount);\r\n        return true;               \r\n    }\r\n\r\n    /**\r\n     * @dev Mint an amount of tokens and transfer to the user\r\n     * @param account The address of the user who will receive the tokens\r\n     * @param amount The amount of tokens\r\n     * @return The result of token minting\r\n     */\r\n    function mint(address account, uint amount) external returns (bool success) {\r\n        require(minters[msg.sender], \"!minter\");    \r\n        _amountRedeem[account].add(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn an amount of tokens\r\n     * @param account The address of the wallet\r\n     * @param amount The amount of tokens to burn\r\n     * @return The result of token burning\r\n     */\r\n    function burn(address account, uint amount) external onlyOwner returns (bool success) {\r\n        _burn(account, amount);\r\n        return true;\r\n    }    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"amountRedeemOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"amountWithdrawOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIssuable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspendIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DexToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://02827c5c355d6d8a34c26d20df57495d4e6a8c38e06709713be1c97c57b89f1e"}]}