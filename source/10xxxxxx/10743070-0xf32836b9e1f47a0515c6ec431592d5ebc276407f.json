{"status":"1","message":"OK","result":[{"SourceCode":"/// flip.sol -- Collateral auction\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.12;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize()                       // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller(),                            // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ninterface VatLike {\r\n    function move(address,address,uint256) external;\r\n    function flux(bytes32,address,address,uint256) external;\r\n}\r\n\r\ninterface CatLike {\r\n    function claw(uint256) external;\r\n}\r\n\r\n/*\r\n   This thing lets you flip some gems for a given amount of dai.\r\n   Once the given amount of dai is raised, gems are forgone instead.\r\n\r\n - `lot` gems in return for bid\r\n - `tab` total dai wanted\r\n - `bid` dai paid\r\n - `gal` receives dai income\r\n - `usr` receives gem forgone\r\n - `ttl` single bid lifetime\r\n - `beg` minimum bid increase\r\n - `end` max auction duration\r\n*/\r\n\r\ncontract Flipper is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Flipper/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Bid {\r\n        uint256 bid;  // dai paid                 [rad]\r\n        uint256 lot;  // gems in return for bid   [wad]\r\n        address guy;  // high bidder\r\n        uint48  tic;  // bid expiry time          [unix epoch time]\r\n        uint48  end;  // auction expiry time      [unix epoch time]\r\n        address usr;\r\n        address gal;\r\n        uint256 tab;  // total dai wanted         [rad]\r\n    }\r\n\r\n    mapping (uint256 => Bid) public bids;\r\n\r\n    VatLike public   vat;            // CDP Engine\r\n    bytes32 public   ilk;            // collateral type\r\n\r\n    uint256 constant ONE = 1.00E18;\r\n    uint256 public   beg = 1.05E18;  // 5% minimum bid increase\r\n    uint48  public   ttl = 3 hours;  // 3 hours bid duration         [seconds]\r\n    uint48  public   tau = 2 days;   // 2 days total auction length  [seconds]\r\n    uint256 public kicks = 0;\r\n    CatLike public   cat;            // cat liquidation module\r\n\r\n    // --- Events ---\r\n    event Kick(\r\n      uint256 id,\r\n      uint256 lot,\r\n      uint256 bid,\r\n      uint256 tab,\r\n      address indexed usr,\r\n      address indexed gal\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor(address vat_, address cat_, bytes32 ilk_) public {\r\n        vat = VatLike(vat_);\r\n        cat = CatLike(cat_);\r\n        ilk = ilk_;\r\n        wards[msg.sender] = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint48 x, uint48 y) internal pure returns (uint48 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Admin ---\r\n    function file(bytes32 what, uint256 data) external note auth {\r\n        if (what == \"beg\") beg = data;\r\n        else if (what == \"ttl\") ttl = uint48(data);\r\n        else if (what == \"tau\") tau = uint48(data);\r\n        else revert(\"Flipper/file-unrecognized-param\");\r\n    }\r\n    function file(bytes32 what, address data) external note auth {\r\n        if (what == \"cat\") cat = CatLike(data);\r\n        else revert(\"Flipper/file-unrecognized-param\");\r\n    }\r\n\r\n    // --- Auction ---\r\n    function kick(address usr, address gal, uint256 tab, uint256 lot, uint256 bid)\r\n        public auth returns (uint256 id)\r\n    {\r\n        require(kicks < uint256(-1), \"Flipper/overflow\");\r\n        id = ++kicks;\r\n\r\n        bids[id].bid = bid;\r\n        bids[id].lot = lot;\r\n        bids[id].guy = msg.sender;  // configurable??\r\n        bids[id].end = add(uint48(now), tau);\r\n        bids[id].usr = usr;\r\n        bids[id].gal = gal;\r\n        bids[id].tab = tab;\r\n\r\n        vat.flux(ilk, msg.sender, address(this), lot);\r\n\r\n        emit Kick(id, lot, bid, tab, usr, gal);\r\n    }\r\n    function tick(uint256 id) external note {\r\n        require(bids[id].end < now, \"Flipper/not-finished\");\r\n        require(bids[id].tic == 0, \"Flipper/bid-already-placed\");\r\n        bids[id].end = add(uint48(now), tau);\r\n    }\r\n    function tend(uint256 id, uint256 lot, uint256 bid) external note {\r\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\r\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\r\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\r\n\r\n        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\r\n        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\r\n        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\r\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\r\n\r\n        if (msg.sender != bids[id].guy) {\r\n            vat.move(msg.sender, bids[id].guy, bids[id].bid);\r\n            bids[id].guy = msg.sender;\r\n        }\r\n        vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);\r\n\r\n        bids[id].bid = bid;\r\n        bids[id].tic = add(uint48(now), ttl);\r\n    }\r\n    function dent(uint256 id, uint256 lot, uint256 bid) external note {\r\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\r\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\r\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\r\n\r\n        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\r\n        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\r\n        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\r\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\r\n\r\n        if (msg.sender != bids[id].guy) {\r\n            vat.move(msg.sender, bids[id].guy, bid);\r\n            bids[id].guy = msg.sender;\r\n        }\r\n        vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);\r\n\r\n        bids[id].lot = lot;\r\n        bids[id].tic = add(uint48(now), ttl);\r\n    }\r\n    function deal(uint256 id) external note {\r\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\r\n        cat.claw(bids[id].tab);\r\n        vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);\r\n        delete bids[id];\r\n    }\r\n\r\n    function yank(uint256 id) external note auth {\r\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\r\n        require(bids[id].bid < bids[id].tab, \"Flipper/already-dent-phase\");\r\n        cat.claw(bids[id].tab);\r\n        vat.flux(ilk, address(this), msg.sender, bids[id].lot);\r\n        vat.move(msg.sender, bids[id].guy, bids[id].bid);\r\n        delete bids[id];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cat_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gal\",\"type\":\"address\"}],\"name\":\"Kick\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"beg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"tic\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cat\",\"outputs\":[{\"internalType\":\"contract CatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"dent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"kick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kicks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tau\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"tend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Flipper","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000a5679c04fc3d9d8b0aab1f0ab83555b301ca70ea4554482d41000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://93663ba43dedfa09aef4de625adb63616d22377dbe6e93b60f247eab6115a0d4"}]}