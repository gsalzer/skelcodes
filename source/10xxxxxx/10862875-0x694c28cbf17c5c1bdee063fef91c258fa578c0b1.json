{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function safeExponent(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 result;\r\n        assembly {\r\n            result := exp(a, b)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // calculates a^(1/n) to dp decimal places\r\n    // maxIts bounds the number of iterations performed\r\n    function nthRoot(\r\n        uint256 _a,\r\n        uint256 _n,\r\n        uint256 _dp,\r\n        uint256 _maxIts\r\n    ) internal pure returns (uint256) {\r\n        assert(_n > 1);\r\n\r\n        // The scale factor is a crude way to turn everything into integer calcs.\r\n        // Actually do (a * (10 ^ ((dp + 1) * n))) ^ (1/n)\r\n        // We calculate to one extra dp and round at the end\r\n        uint256 one = 10**(1 + _dp);\r\n        uint256 a0 = one**_n * _a;\r\n\r\n        // Initial guess: 1.0\r\n        uint256 xNew = one;\r\n        uint256 x;\r\n\r\n        uint256 iter = 0;\r\n        while (xNew != x && iter < _maxIts) {\r\n            x = xNew;\r\n            uint256 t0 = x**(_n - 1);\r\n            if (x * t0 > a0) {\r\n                xNew = x - (x - a0 / t0) / _n;\r\n            } else {\r\n                xNew = x + (a0 / t0 - x) / _n;\r\n            }\r\n            ++iter;\r\n        }\r\n\r\n        // Round to nearest in the last dp.\r\n        return (xNew + 5) / 10;\r\n    }\r\n}\r\n\r\ncontract Constant {\r\n    string constant ERR_CONTRACT_SELF_ADDRESS = \"ERR_CONTRACT_SELF_ADDRESS\";\r\n\r\n    string constant ERR_ZERO_ADDRESS = \"ERR_ZERO_ADDRESS\";\r\n\r\n    string constant ERR_NOT_OWN_ADDRESS = \"ERR_NOT_OWN_ADDRESS\";\r\n\r\n    string constant ERR_VALUE_IS_ZERO = \"ERR_VALUE_IS_ZERO\";\r\n\r\n    string constant ERR_SAME_ADDRESS = \"ERR_SAME_ADDRESS\";\r\n\r\n    string constant ERR_AUTHORIZED_ADDRESS_ONLY = \"ERR_AUTHORIZED_ADDRESS_ONLY\";\r\n\r\n    modifier notOwnAddress(address _which) {\r\n        require(msg.sender != _which, ERR_NOT_OWN_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    // validates an address is not zero\r\n    modifier notZeroAddress(address _which) {\r\n        require(_which != address(0), ERR_ZERO_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThisAddress(address _which) {\r\n        require(_which != address(this), ERR_CONTRACT_SELF_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroValue(uint256 _value) {\r\n        require(_value > 0, ERR_VALUE_IS_ZERO);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Ownable is Constant {\r\n    address public primaryOwner = address(0);\r\n\r\n    address public authorityAddress = address(0);\r\n\r\n    address public systemAddress = address(0);\r\n\r\n    address public newAuthorityAddress = address(0);\r\n\r\n    event OwnershipTransferred(\r\n        string ownerType,\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event AuthorityAddressChnageCall(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the `primaryOwner` and `systemAddress` and '_multisigAddress'\r\n     * account.\r\n     */\r\n    constructor(address _systemAddress, address _authorityAddress)\r\n        public\r\n        notZeroAddress(_systemAddress)\r\n    {\r\n        require(msg.sender != _systemAddress, ERR_SAME_ADDRESS);\r\n\r\n        require(_systemAddress != _authorityAddress, ERR_SAME_ADDRESS);\r\n\r\n        require(msg.sender != _authorityAddress, ERR_SAME_ADDRESS);\r\n\r\n        primaryOwner = msg.sender;\r\n\r\n        systemAddress = _systemAddress;\r\n\r\n        authorityAddress = _authorityAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == primaryOwner, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    modifier onlySystem() {\r\n        require(msg.sender == systemAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOneOfOnwer() {\r\n        require(\r\n            msg.sender == primaryOwner || msg.sender == systemAddress,\r\n            ERR_AUTHORIZED_ADDRESS_ONLY\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == authorityAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev change primary ownership\r\n     * @param _which The address to which is new owner address\r\n     */\r\n    function changePrimaryOwner(address _which)\r\n        public\r\n        onlyAuthorized()\r\n        notZeroAddress(_which)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _which != systemAddress &&\r\n                _which != authorityAddress &&\r\n                _which != primaryOwner,\r\n            ERR_SAME_ADDRESS\r\n        );\r\n\r\n        emit OwnershipTransferred(\"PRIMARY_OWNER\", primaryOwner, _which);\r\n\r\n        primaryOwner = _which;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change system address\r\n     * @param _which The address to which is new system address\r\n     */\r\n    function changeSystemAddress(address _which)\r\n        public\r\n        onlyAuthorized()\r\n        notThisAddress(_which)\r\n        notZeroAddress(_which)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _which != systemAddress &&\r\n                _which != authorityAddress &&\r\n                _which != primaryOwner,\r\n            ERR_SAME_ADDRESS\r\n        );\r\n        emit OwnershipTransferred(\"SYSTEM_ADDRESS\", systemAddress, _which);\r\n        systemAddress = _which;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change system address\r\n     * @param _which The address to which is new Authority address\r\n     */\r\n    function changeAuthorityAddress(address _which)\r\n        public\r\n        onlyAuthorized()\r\n        notZeroAddress(_which)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _which != systemAddress &&\r\n                _which != authorityAddress &&\r\n                _which != primaryOwner,\r\n            ERR_SAME_ADDRESS\r\n        );\r\n        newAuthorityAddress = _which;\r\n        return true;\r\n    }\r\n\r\n    function acceptAuthorityAddress() public returns (bool) {\r\n        require(msg.sender == newAuthorityAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        emit OwnershipTransferred(\r\n            \"AUTHORITY_ADDRESS\",\r\n            authorityAddress,\r\n            newAuthorityAddress\r\n        );\r\n        authorityAddress = newAuthorityAddress;\r\n        newAuthorityAddress = address(0);\r\n        return true;\r\n    }\r\n}\r\ninterface Icontract {\r\n    function updateAddresses() external returns (bool);\r\n}\r\n\r\ncontract AuctionRegistery is Ownable, SafeMath {\r\n    // store all contract address with bytes32 representation\r\n    mapping(bytes32 => address payable) private contractAddress;\r\n\r\n    // store contractIndex\r\n    mapping(bytes32 => uint256) public contractIndex;\r\n\r\n    // store all contract Name\r\n    string[] public contracts;\r\n\r\n    event ContractAddressUpdated(\r\n        bytes32 indexed _contractName,\r\n        address _contractAddressFrom,\r\n        address _contractAddressTo\r\n    );\r\n\r\n    constructor(address _systemAddess, address _multisig)\r\n        public\r\n        Ownable(_systemAddess, _multisig)\r\n    {}\r\n\r\n    function totalContracts() external view returns (uint256) {\r\n        return contracts.length;\r\n    }\r\n\r\n    function getAddressOf(bytes32 _contractName)\r\n        external\r\n        view\r\n        returns (address payable)\r\n    {\r\n        return contractAddress[_contractName];\r\n    }\r\n\r\n    /**\r\n     * @dev add new contarct address to the registery\r\n     * @return bool\r\n     */\r\n    function registerContractAddress(\r\n        bytes32 _contractName,\r\n        address payable _contractAddress\r\n    )\r\n        external\r\n        onlyOneOfOnwer()\r\n        notZeroValue(_contractName.length)\r\n        notZeroAddress(_contractAddress)\r\n        returns (bool)\r\n    {\r\n        require(contractAddress[_contractName] == address(0), ERR_SAME_ADDRESS);\r\n\r\n        contractAddress[_contractName] = _contractAddress;\r\n\r\n        contractIndex[_contractName] = contracts.length;\r\n\r\n        contracts.push(bytes32ToString(_contractName));\r\n\r\n        emit ContractAddressUpdated(\r\n            _contractName,\r\n            address(0),\r\n            _contractAddress\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev update contarct address to the registery\r\n     * note that we dont need to update contractAddress index we just update contract addres only\r\n     * @return bool\r\n     */\r\n    function updateContractAddress(\r\n        bytes32 _contractName,\r\n        address payable _contractAddress\r\n    )\r\n        external\r\n        onlyAuthorized()\r\n        notZeroValue(_contractName.length)\r\n        notZeroAddress(_contractAddress)\r\n        notZeroAddress(contractAddress[_contractName])\r\n        returns (bool)\r\n    {\r\n        emit ContractAddressUpdated(\r\n            _contractName,\r\n            contractAddress[_contractName],\r\n            _contractAddress\r\n        );\r\n        contractAddress[_contractName] = _contractAddress;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove contarct address to the registery\r\n     * @return bool\r\n     */\r\n    function removeContractAddress(bytes32 _contractName)\r\n        external\r\n        onlyAuthorized()\r\n        notZeroValue(_contractName.length)\r\n        notZeroAddress(contractAddress[_contractName])\r\n        returns (bool)\r\n    {\r\n        uint256 _contractIndex = contractIndex[_contractName];\r\n\r\n        string memory lastContract = contracts[safeSub(contracts.length, 1)];\r\n\r\n        bytes32 lastContractBytes = stringToBytes32(lastContract);\r\n\r\n        contracts[_contractIndex] = lastContract;\r\n\r\n        contractIndex[lastContractBytes] = _contractIndex;\r\n\r\n        emit ContractAddressUpdated(\r\n            _contractName,\r\n            contractAddress[_contractName],\r\n            address(0)\r\n        );\r\n\r\n        delete contractAddress[_contractName];\r\n\r\n        delete contractIndex[_contractName];\r\n\r\n        contracts.pop();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev utility, converts bytes32 to a string\r\n     * note that the bytes32 argument is assumed to be UTF8 encoded ASCII string\r\n     *\r\n     * @return string representation of the given bytes32 argument\r\n     */\r\n    function bytes32ToString(bytes32 _bytes)\r\n        public\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory byteArray = new bytes(32);\r\n        for (uint256 i; i < 32; i++) {\r\n            byteArray[i] = _bytes[i];\r\n        }\r\n\r\n        return string(byteArray);\r\n    }\r\n\r\n    /**\r\n     * @dev utility, converts string to bytes32\r\n     * note that the bytes32 argument is assumed to be UTF8 encoded ASCII string\r\n     *\r\n     * @return string representation of the given bytes32 argument\r\n     */\r\n    function stringToBytes32(string memory _string)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        bytes32 result;\r\n        assembly {\r\n            result := mload(add(_string, 32))\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"}],\"name\":\"changeSystemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"}],\"name\":\"changeAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bytes\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"}],\"name\":\"removeContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"updateContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"}],\"name\":\"changePrimaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contractIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"registerContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"}],\"name\":\"getAddressOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_systemAddess\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_contractAddressFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contractAddressTo\",\"type\":\"address\"}],\"name\":\"ContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerType\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AuthorityAddressChnageCall\",\"type\":\"event\"}]","ContractName":"AuctionRegistery","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000004a88313d287abfd1ef62c8561ddfde09510b9ca0000000000000000000000002071195f2071c066853a904f9459a8668f0b3e46","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://58aa1664c1610ff879a73eda5bbbc3da9be07b85a779295ca887e1b391fccb8f"}]}