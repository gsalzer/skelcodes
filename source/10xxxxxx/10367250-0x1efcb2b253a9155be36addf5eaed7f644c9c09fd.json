{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string public constant MODULE_ACCESS            = \"access\";\r\n    string public constant MODULE_PTOKEN            = \"ptoken\";\r\n    string public constant MODULE_CURVE             = \"curve\";\r\n    string public constant MODULE_FUNDS             = \"funds\";\r\n    string public constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string public constant MODULE_LOAN              = \"loan\";\r\n    string public constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string public constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string public constant MODULE_LTOKEN            = \"ltoken\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanLimitsModule {\r\n    // List of limit types. See LoanLimits struct for descriptions\r\n    enum LoanLimitType {\r\n        L_DEBT_AMOUNT_MIN,\r\n        DEBT_INTEREST_MIN,\r\n        PLEDGE_PERCENT_MIN,\r\n        L_MIN_PLEDGE_MAX,    \r\n        DEBT_LOAD_MAX,       \r\n        MAX_OPEN_PROPOSALS_PER_USER,\r\n        MIN_CANCEL_PROPOSAL_TIMEOUT\r\n    }\r\n\r\n    function set(LoanLimitType limit, uint256 value) external;\r\n    function get(LoanLimitType limit) external view returns(uint256);\r\n\r\n    function lDebtAmountMin() external view returns(uint256);\r\n    function debtInterestMin() external view returns(uint256);\r\n    function pledgePercentMin() external view returns(uint256);\r\n    function lMinPledgeMax() external view returns(uint256);\r\n    function debtLoadMax() external view returns(uint256);\r\n    function maxOpenProposalsPerUser() external view returns(uint256);\r\n    function minCancelProposalTimeout() external view returns(uint256);\r\n}\r\n\r\ncontract LoanLimitsModule is Module, ILoanLimitsModule{\r\n    // This constants are copied from LoanModule   \r\n    uint256 public constant INTEREST_MULTIPLIER = 10**3;\r\n    uint256 public constant PLEDGE_PERCENT_MULTIPLIER = 10**3;\r\n    uint256 public constant DEBT_LOAD_MULTIPLIER = 10**3;\r\n\r\n\r\n\r\n    // struct LoanLimits {\r\n    //     uint256 lDebtAmountMin;     // Minimal amount of proposed credit (DebtProposal.lAmount)\r\n    //     uint256 debtInterestMin;    // Minimal value of debt interest\r\n    //     uint256 pledgePercentMin;   // Minimal pledge as percent of credit collateral amount. Value is divided to PLEDGE_PERCENT_MULTIPLIER for calculations\r\n    //     uint256 lMinPledgeMax;      // Maximal value of minimal pledge (in liquid tokens), works together with pledgePercentMin\r\n    //     uint256 debtLoadMax;        // Maximal ratio LoanModule.lDebts/(FundsModule.lBalance+LoanModule.lDebts)<=debtLoadMax; multiplied to DEBT_LOAD_MULTIPLIER\r\n    //     uint256 maxOpenProposalsPerUser;  // How many open proposals are allowed for user\r\n    //     uint256 minCancelProposalTimeout; // Minimal time (seconds) before a proposal can be cancelled\r\n    // }\r\n    //LoanLimits public limits;\r\n\r\n    uint256[7] limits;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        // limits = LoanLimits({\r\n        //     lDebtAmountMin: 100*10**18,                         // 100 DAI min credit\r\n        //     debtInterestMin: INTEREST_MULTIPLIER*10/100,        // 10% min interest\r\n        //     pledgePercentMin: PLEDGE_PERCENT_MULTIPLIER*10/100, // 10% min pledge \r\n        //     lMinPledgeMax: 500*10**18,                          // 500 DAI max minimal pledge\r\n        //     debtLoadMax: DEBT_LOAD_MULTIPLIER*50/100,           // 50% max debt load\r\n        //     maxOpenProposalsPerUser: 1,                         // 1 open proposal per user\r\n        //     minCancelProposalTimeout: 7*24*60*60                // 7-day timeout before cancelling proposal\r\n        // });\r\n        limits[uint256(LoanLimitType.L_DEBT_AMOUNT_MIN)] = 100*10**18;                           // 100 DAI min credit\r\n        limits[uint256(LoanLimitType.DEBT_INTEREST_MIN)] = INTEREST_MULTIPLIER*10/100;           // 10% min interest\r\n        limits[uint256(LoanLimitType.PLEDGE_PERCENT_MIN)] = PLEDGE_PERCENT_MULTIPLIER*10/100;     // 10% min pledge \r\n        limits[uint256(LoanLimitType.L_MIN_PLEDGE_MAX)] = 500*10**18;                           // 500 DAI max minimal pledge\r\n        limits[uint256(LoanLimitType.DEBT_LOAD_MAX)] = DEBT_LOAD_MULTIPLIER*50/100;          // 50% max debt load\r\n        limits[uint256(LoanLimitType.MAX_OPEN_PROPOSALS_PER_USER)] = 1;                           // 1 open proposal per user\r\n        limits[uint256(LoanLimitType.MIN_CANCEL_PROPOSAL_TIMEOUT)] = 7*24*60*60;                   // 7-day timeout before cancelling proposal\r\n    }\r\n\r\n    function set(LoanLimitType limit, uint256 value) public onlyOwner {\r\n        limits[uint256(limit)] = value;\r\n    }\r\n\r\n    function get(LoanLimitType limit) public view returns(uint256) {\r\n        return limits[uint256(limit)];\r\n    }\r\n\r\n    function lDebtAmountMin() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.L_DEBT_AMOUNT_MIN)];\r\n    }     \r\n\r\n    function debtInterestMin() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.DEBT_INTEREST_MIN)];\r\n    }\r\n\r\n    function pledgePercentMin() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.PLEDGE_PERCENT_MIN)];\r\n    }\r\n\r\n    function lMinPledgeMax() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.L_MIN_PLEDGE_MAX)];\r\n    }\r\n\r\n    function debtLoadMax() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.DEBT_LOAD_MAX)];\r\n    }\r\n\r\n    function maxOpenProposalsPerUser() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.MAX_OPEN_PROPOSALS_PER_USER)];\r\n    }\r\n\r\n    function minCancelProposalTimeout() public view returns(uint256){\r\n        return limits[uint256(LoanLimitType.MIN_CANCEL_PROPOSAL_TIMEOUT)];\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEBT_LOAD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTEREST_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_ACCESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_CURVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_FUNDS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LIQUIDITY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_LIMTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_PROPOSALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_PTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLEDGE_PERCENT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtInterestMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtLoadMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum ILoanLimitsModule.LoanLimitType\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lDebtAmountMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lMinPledgeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxOpenProposalsPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCancelProposalTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pledgePercentMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum ILoanLimitsModule.LoanLimitType\",\"name\":\"limit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoanLimitsModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0285297a59af496e7c9f535d1dee8db2af6704dfff0b1fa280e966730e2b505e"}]}