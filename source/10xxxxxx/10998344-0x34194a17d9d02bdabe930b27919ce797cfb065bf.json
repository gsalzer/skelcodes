{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract TimeLock {\r\n    using SafeMath for uint;\r\n\r\n    uint8 private nextSubtract;\r\n    uint8 private nextScheduleId;\r\n    bool public initialized;\r\n    bool private configured;\r\n\r\n    address[] private beneficiaries; //\r\n    uint[] private scheduleList; //\r\n\r\n    mapping(uint8 => uint) private schedules;\r\n    mapping(address => mapping(address => uint)) private balances;\r\n    mapping(address => uint) private percentages; //\r\n    \r\n    event NewVesting(address newVestingContract, uint indexed timeCreated);\r\n    event Distributed(address token, address executor, uint round);\r\n    event Withdrawn(address token, address beneficiary, uint amount);\r\n    event EtherWithdrawn(address _addr, uint _value);\r\n    \r\n    modifier whenNotInitialized() {\r\n        require(initialized == false, \"Vesting has already been initialized\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenInitialized() {\r\n        require(initialized == true, \"Vesting has not been initialized\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBeneficiary() {\r\n        bool isApproved = false;\r\n        for(uint i = 0; i < beneficiaries.length; i++) {\r\n            if (beneficiaries[i] == msg.sender) {\r\n                isApproved = true;\r\n            }\r\n        }\r\n        require(isApproved == true, \"Only a beneficiary can do this\");\r\n        _;\r\n    }\r\n    \r\n    function addParameters(address[] calldata _beneficiary, uint[] calldata _percentages, uint[] calldata _schedules) external whenNotInitialized {\r\n        require(_beneficiary.length == _percentages.length, 'Beneficiary and percentage arrays must have the same length');\r\n        require(configured == false, 'Parameters have already been added');\r\n        uint totalPercentages;\r\n        for(uint i = 0; i < _beneficiary.length; i++) {\r\n            beneficiaries.push(_beneficiary[i]);\r\n            percentages[_beneficiary[i]] = _percentages[i];\r\n            totalPercentages = totalPercentages.add(_percentages[i]);\r\n        }\r\n        require(totalPercentages == 100, 'Percentages must sum up to 100');\r\n        for(uint8 i = 0; i < _schedules.length; i++) {\r\n            scheduleList.push(_schedules[i]);\r\n        }\r\n        configured = true;\r\n    }\r\n    \r\n    function startVesting() external whenNotInitialized onlyBeneficiary {\r\n         for(uint8 i = 0; i < scheduleList.length; i++) {\r\n            schedules[i] = now + scheduleList[i];\r\n         }\r\n         initialized = true;\r\n    }\r\n    \r\n    function nextScheduleTime() external view whenInitialized returns(uint secondsLeft){\r\n        uint time = schedules[nextScheduleId];\r\n        uint nextTime = time - now;\r\n        if (time < now) {\r\n            revert ('distribute payment for previous round');\r\n        } else {\r\n            return nextTime;\r\n        }\r\n    }\r\n    \r\n    function endingTime() external view whenInitialized returns(uint secondsLeft){\r\n        uint allTime = scheduleList.length;\r\n        uint time = schedules[uint8(allTime) - 1];\r\n        return time - now;\r\n        \r\n    }\r\n\r\n    function getSchedules() external view whenInitialized returns(uint[] memory schedule){\r\n        return scheduleList;\r\n    }\r\n    \r\n    function currentSchedule() external view whenInitialized returns(uint schedule){\r\n        return scheduleList[nextScheduleId];\r\n    }\r\n    \r\n    function getBalance(address userAddress, address tokenAddress) external view whenInitialized returns(uint){\r\n        return balances[userAddress][tokenAddress];\r\n    }\r\n    \r\n    function getBeneficiaries() external view returns(address[] memory beneficiary) {\r\n        require(configured == true, 'Need to add beneficiaries first');\r\n        return beneficiaries;\r\n    }\r\n    \r\n    function percentageOf(address _beneficiary) external view returns(uint){\r\n        return percentages[_beneficiary];\r\n    }\r\n    \r\n    function _calculatePayment(address _beneficiary, address token, uint totalBalances) internal view returns(uint){\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n        require(balance > 0, 'Empty pool');\r\n        return percentages[_beneficiary].mul(balance.sub(totalBalances)).div((scheduleList.length.sub(nextSubtract)).mul(100));\r\n    }\r\n\r\n    function distributePayment(address token) external whenInitialized {\r\n        require(now >= schedules[nextScheduleId], 'Realease time not reached');\r\n        uint totalBalances;\r\n        for(uint i = 0; i < beneficiaries.length; i++) {\r\n            totalBalances = totalBalances.add(balances[beneficiaries[i]][token]);\r\n        } \r\n        for(uint i = 0; i < beneficiaries.length; i++){\r\n            uint payment = _calculatePayment(beneficiaries[i], token, totalBalances);\r\n            balances[beneficiaries[i]][token] = balances[beneficiaries[i]][token].add(payment);\r\n        }\r\n        nextScheduleId++; \r\n        nextSubtract++;\r\n        emit Distributed(token, msg.sender, nextScheduleId);\r\n    }\r\n    \r\n    function withdrawPayment(address token) external whenInitialized onlyBeneficiary returns (bool success) {\r\n        require(balances[msg.sender][token] > 0, 'No balance to withdraw'); \r\n        \r\n        uint256 amount = balances[msg.sender][token];\r\n        \r\n        balances[msg.sender][token] = 0;\r\n        \r\n        IERC20(token).transfer(msg.sender, amount);\r\n        \r\n        emit Withdrawn(token, msg.sender, amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVestingContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeCreated\",\"type\":\"uint256\"}],\"name\":\"NewVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiary\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_schedules\",\"type\":\"uint256[]\"}],\"name\":\"addParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"schedule\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiary\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchedules\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"schedule\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextScheduleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"percentageOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimeLock","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b707179d7e1f5129e0918f08cb7f3d9b5eff917a3ee12a31d2acd6681c8354fb"}]}