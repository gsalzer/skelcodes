{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Root file: contracts/TempusStake.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ninterface ITempusToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function transferReward(address to, uint256 amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ncontract TempusStake is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ITempusToken private tempusToken;\r\n    address private uniswapPool;\r\n\r\n    bool public allowStaking = false;\r\n    uint256 public unstakeTax = 7;\r\n\r\n    uint256 public constant BURN_RATE = 2;\r\n    uint256 public constant BURN_REWARD = 2;\r\n    uint256 public constant POOL_REWARD = 48;\r\n    uint256 public rewardPool;\r\n    uint256 public lastBurnTime;\r\n    uint256 public totalBurned;\r\n\r\n    uint256 public totalStakedTokens;\r\n    uint256 public totalStakedTokenTime;\r\n    uint256 public rewardShareClaimed;\r\n    uint256 private lastAccountingTimestamp;\r\n\r\n    struct UserTotals {\r\n        uint256 stakedTokens;\r\n        uint256 totalStakedTokenTime;\r\n        uint256 lastAccountingTimestamp;\r\n        uint256 lastRewardClaimedTimestamp;\r\n    }\r\n\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    modifier stakingEnabled {\r\n        require(allowStaking, \"TempusStake: Staking is not enabled.\");\r\n        _;\r\n    }\r\n\r\n    event Stake(address addr, uint256 amount, uint256 totalStaked);\r\n    event Unstake(address addr, uint256 withdrawAmount, uint256 tax);\r\n    event SanitisePool(\r\n        address caller,\r\n        uint256 burnAmount,\r\n        uint256 userReward,\r\n        uint256 poolReward,\r\n        uint256 tempusSupply,\r\n        uint256 uniswapBalance\r\n    );\r\n    event ClaimReward(address addr, uint256 rewardAmount, uint256 rewardPool);\r\n\r\n    constructor(ITempusToken _tempusToken, address _uniswapPool) public Ownable() {\r\n        tempusToken = _tempusToken;\r\n        uniswapPool = _uniswapPool;\r\n    }\r\n\r\n    function info(address value)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _userTotals[value].stakedTokens,\r\n            _userTotals[value].totalStakedTokenTime,\r\n            _userTotals[value].lastAccountingTimestamp,\r\n            _userTotals[value].lastRewardClaimedTimestamp,\r\n            totalStakedTokens,\r\n            totalStakedTokenTime,\r\n            rewardPool,\r\n            lastAccountingTimestamp\r\n        );\r\n    }\r\n\r\n    function updateGlobalStakedTokenTime() internal {\r\n        if (lastAccountingTimestamp == 0) {\r\n            lastAccountingTimestamp = now;\r\n        }\r\n        uint256 newStakedTokenTime = now.sub(lastAccountingTimestamp).mul(totalStakedTokens);\r\n        totalStakedTokenTime = totalStakedTokenTime.add(newStakedTokenTime);\r\n        lastAccountingTimestamp = now;\r\n    }\r\n\r\n    function updateUserStakedTokenTime(UserTotals storage totals) internal {\r\n        uint256 currentStakedTokenTime = now.sub(totals.lastAccountingTimestamp).mul(totals.stakedTokens);\r\n        totals.totalStakedTokenTime = currentStakedTokenTime.add(totals.totalStakedTokenTime);\r\n        totals.lastAccountingTimestamp = now;\r\n    }\r\n\r\n    function stake(uint256 amount) external stakingEnabled {\r\n        require(amount >= 1e18, \"TempusStake: minimum stake amount is 1\");\r\n        require(tempusToken.balanceOf(msg.sender) >= amount, \"TempusStake: amount is greater than senders balance\");\r\n\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n\r\n        updateGlobalStakedTokenTime();\r\n        updateUserStakedTokenTime(totals);\r\n\r\n        totals.stakedTokens = totals.stakedTokens.add(amount);\r\n\r\n        totalStakedTokens = totalStakedTokens.add(amount);\r\n\r\n        tempusToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Stake(msg.sender, amount, totals.stakedTokens);\r\n    }\r\n\r\n    function unstake() external stakingEnabled {\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n\r\n        updateGlobalStakedTokenTime();\r\n        updateUserStakedTokenTime(totals);\r\n\r\n        uint256 withdrawAmount = totals.stakedTokens;\r\n        uint256 tax = withdrawAmount.mul(unstakeTax).div(100);\r\n\r\n        rewardPool = rewardPool.add(tax);\r\n        totalStakedTokens = totalStakedTokens.sub(withdrawAmount);\r\n\r\n        totalStakedTokenTime = totalStakedTokenTime.sub(totals.totalStakedTokenTime);\r\n        totals.stakedTokens = 0;\r\n        totals.lastAccountingTimestamp = 0;\r\n        totals.lastRewardClaimedTimestamp = 0;\r\n        totals.totalStakedTokenTime = 0;\r\n\r\n        tempusToken.transfer(msg.sender, withdrawAmount.sub(tax));\r\n\r\n        emit Unstake(msg.sender, withdrawAmount, tax);\r\n    }\r\n\r\n    function sanitisePool() external stakingEnabled {\r\n        uint256 timeSinceLastBurn = now - lastBurnTime;\r\n        require(timeSinceLastBurn >= 6 hours, \"TempusStake: only 1 burn every 6 hours\");\r\n\r\n        uint256 burnAmount = getBurnAmount();\r\n        require(burnAmount >= 1 * 1e18, \"TempusStake: min burn amount not reached.\");\r\n\r\n        // Reset last burn time\r\n        lastBurnTime = now;\r\n\r\n        uint256 userReward = burnAmount.mul(BURN_REWARD).div(100);\r\n        uint256 poolReward = burnAmount.mul(POOL_REWARD).div(100);\r\n        uint256 finalBurn = burnAmount.sub(userReward).sub(poolReward);\r\n\r\n        tempusToken.burn(finalBurn);\r\n\r\n        totalBurned = totalBurned.add(finalBurn);\r\n        rewardPool = rewardPool.add(poolReward);\r\n        rewardShareClaimed = 0;\r\n\r\n        tempusToken.transferReward(msg.sender, userReward);\r\n        tempusToken.transferReward(address(this), poolReward);\r\n\r\n        IUniswapV2Pair(uniswapPool).sync();\r\n\r\n        uint256 tempusSupply = tempusToken.totalSupply();\r\n        uint256 uniswapBalance = tempusToken.balanceOf(uniswapPool);\r\n\r\n        emit SanitisePool(msg.sender, finalBurn, userReward, poolReward, tempusSupply, uniswapBalance);\r\n    }\r\n\r\n    function getBurnAmount() public view stakingEnabled returns (uint256) {\r\n        uint256 tokensInUniswapPool = tempusToken.balanceOf(uniswapPool);\r\n        return tokensInUniswapPool.mul(BURN_RATE).div(100);\r\n    }\r\n\r\n    function claimReward() external {\r\n        require(rewardPool > 1e18, \"TempusStake: reward pool is too small.\");\r\n\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n\r\n        require(totals.stakedTokens > 0, \"TempusStake: user is not staked.\");\r\n        require(userCanClaim(totals), \"TempusStake: reward from this burn already claimed.\");\r\n\r\n        updateGlobalStakedTokenTime();\r\n        updateUserStakedTokenTime(totals);\r\n\r\n        uint256 rewardShare = rewardShare(totals.totalStakedTokenTime);\r\n\r\n        uint256 rewardAmount = rewardPool.mul(rewardShare).div(10000);\r\n        totals.stakedTokens = totals.stakedTokens.add(rewardAmount);\r\n        totals.lastRewardClaimedTimestamp = now;\r\n\r\n        totalStakedTokens = totalStakedTokens.add(rewardAmount);\r\n        rewardPool = rewardPool.sub(rewardAmount);\r\n        rewardShareClaimed = rewardShareClaimed.add(rewardShare);\r\n\r\n        emit ClaimReward(msg.sender, rewardAmount, rewardPool);\r\n    }\r\n\r\n    function setAllowStaking(bool value) external onlyOwner {\r\n        allowStaking = value;\r\n        lastBurnTime = now;\r\n    }\r\n\r\n    function userCanClaim(UserTotals memory totals) internal view returns (bool) {\r\n        uint256 timeSinceLastBurn = now - lastBurnTime;\r\n        uint256 timeSinceLastClaim = now - totals.lastRewardClaimedTimestamp;\r\n        return (totals.lastRewardClaimedTimestamp == 0 || timeSinceLastClaim > timeSinceLastBurn);\r\n    }\r\n\r\n    function rewardShare(uint256 userTokenTime) internal view returns (uint256) {\r\n        uint256 max = 10000;\r\n        uint256 shareLeft = max.sub(rewardShareClaimed);\r\n        uint256 globalTokenTime = totalStakedTokenTime.mul(shareLeft).div(max);\r\n        uint256 dec = 10**uint256(18);\r\n        uint256 prec = 10000 * dec;\r\n        uint256 gtt = globalTokenTime * dec;\r\n        uint256 utt = userTokenTime * dec;\r\n        uint256 share = utt.mul(dec).div(gtt);\r\n        return share.mul(prec).div(dec) / dec;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITempusToken\",\"name\":\"_tempusToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tempusSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniswapBalance\",\"type\":\"uint256\"}],\"name\":\"SanitisePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardShareClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanitisePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TempusStake","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e41c0f52a0d7fa33de379e3fee63358e6c8c8510000000000000000000000002fcb3da81c8b3793b6176d4524c94a596b96915c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8622680abed383ac08d1ef11646661f0c7f637b80266c9aa52384a92618d00ac"}]}