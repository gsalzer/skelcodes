{"status":"1","message":"OK","result":[{"SourceCode":"{\"core.no.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\r\\nimport \\\"./safeMath.sol\\\";\\r\\ncontract Core {\\r\\n    using SafeMath for uint256;\\r\\n    USDT usdt;\\r\\n    Db db;\\r\\n    Token token;\\r\\n    Tool tool;\\r\\n    address[] public developer;\\r\\n    uint minInvestValue = 100e6;\\r\\n    uint minInvestParticle = 1e6;\\r\\n    uint lastMinBalance = 100e6;\\r\\n    address own = msg.sender;\\r\\n    mapping(address =\\u003e uint) surplusTokenNum;\\r\\n    modifier isOwn(){\\r\\n        require(msg.sender == own);\\r\\n        _;\\r\\n    }\\r\\n    function init(address usdtAddress,address dbAddress,address tokenAddress,address toolAddress) public isOwn {\\r\\n        usdt = USDT(usdtAddress);\\r\\n        db = Db(dbAddress);\\r\\n        token = Token(tokenAddress);\\r\\n        tool = Tool(toolAddress);\\r\\n    }\\r\\n    function setDevAddress(address _devAddress) public isOwn{\\r\\n        for(uint i = 0;i \\u003c developer.length;i++){\\r\\n            if(developer[i] == _devAddress){\\r\\n                developer[i] = developer[(developer.length-1)];\\r\\n                developer.pop();\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        developer.push(_devAddress);\\r\\n    }\\r\\n    function _setDevReward(uint _balance) internal {\\r\\n        uint _ratio = developer.length;\\r\\n        uint _giveBalance = _balance.div(_ratio);\\r\\n        for (uint i = 0; i \\u003c _ratio; i++) {\\r\\n            if(developer[i] == address(0x00)){\\r\\n                continue;\\r\\n            }\\r\\n            _sendUsdtToAddress(developer[i],_giveBalance);\\r\\n        }\\r\\n    }\\r\\n    function _sendUsdtToAddress(address _own,uint _balance) internal{\\r\\n        require(usdt.balanceOf(address(this)) \\u003e _balance);\\r\\n        usdt.transfer(_own,_balance);\\r\\n    }\\r\\n    function getAllowBalance(address _own) public view returns (uint){\\r\\n        return  usdt.allowance(_own,address(this));\\r\\n    }\\r\\n    function _fromUsdtToAddress(uint _balance) internal{\\r\\n        address _own = msg.sender;\\r\\n        uint _allowBalance =  getAllowBalance(_own);\\r\\n        require(_allowBalance \\u003e= _balance,\\\"allow balance \\u003c balance\\\");\\r\\n        usdt.transferFrom(_own,address(this),_balance);\\r\\n    }\\r\\n    function bindParentAndBuyTicket(address _parent,uint _balance) public {\\r\\n        address _own = msg.sender;\\r\\n        (,,bool _isParent) = db.getPlayerInfo(_own);\\r\\n        if(false == _isParent){\\r\\n            if(db.systemPlayerNum() == 0){\\r\\n                _parent = address(0x0);\\r\\n            }else{\\r\\n                (,bool _parentIsExits,) = db.getPlayerInfo(_parent);\\r\\n                require(_parentIsExits == true,\\\"parent not exist\\\");\\r\\n            }\\r\\n            db.setPlayerParentAddress(_own,_parent);\\r\\n        }\\r\\n        _fromUsdtToAddress(_balance.mul(1e6));\\r\\n        uint _price = token.price();\\r\\n        uint _tokenNum = _balance.mul(_price);\\r\\n        token.sendTokenToAddress(_own,_tokenNum);\\r\\n    }\\r\\n    function _useTicket(uint _value) internal returns (bool) {\\r\\n        address _own = address(this);\\r\\n        return token.sendTokenToGame(_own, _value);\\r\\n    }\\r\\n    function getNow() public view returns(uint){\\r\\n        return now;\\r\\n    }\\r\\n    function _setLastTime(uint _balance) internal {\\r\\n        uint _ratio = _balance / lastMinBalance;\\r\\n        uint _t = 2 * 3600;\\r\\n        uint _maxTime = 36 * 3600;\\r\\n        uint _lastTime = db.lastTime();\\r\\n        if(_lastTime \\u003c getNow()){\\r\\n            _lastTime = getNow();\\r\\n        }\\r\\n        uint _nowLastTime = _lastTime;\\r\\n        uint _newLastTime = _nowLastTime.add(_t.mul(_ratio));\\r\\n        if (_newLastTime \\u003e _maxTime.add(getNow())) {\\r\\n            _newLastTime = _maxTime.add(getNow());\\r\\n        }\\r\\n        db.setLastTime(_newLastTime);\\r\\n    }\\r\\n    receive() payable external {\\r\\n        withdraw();\\r\\n    }\\r\\n    function openLastReward() public{\\r\\n        if(db.lastTime() \\u003e= now){\\r\\n            return;\\r\\n        }\\r\\n        db.openLastPoolReward();\\r\\n    }\\r\\n    function openReward() public{\\r\\n        db.openReward();\\r\\n    }\\r\\n    function _setforceLuckCode(address _own,uint _balance) internal{\\r\\n        if(_balance \\u003c= 0){\\r\\n            return;\\r\\n        }\\r\\n        uint _tokenPrice = token.getTokenPrice();\\r\\n        uint _scale = _tokenPrice;\\r\\n        uint _tokenNum = _balance.mul(_tokenPrice).div(1e6);\\r\\n        _balance = _balance.div(1e6);\\r\\n        uint _lastTokenNum = surplusTokenNum[_own];\\r\\n        uint _allTokenNum = _tokenNum.add(_lastTokenNum);\\r\\n        uint _surplusNum = _allTokenNum.mod(_scale);\\r\\n        surplusTokenNum[_own] = _surplusNum;\\r\\n        uint _codeNum = _allTokenNum.sub(_surplusNum).div(_scale);\\r\\n        db.addCodeToPlayer(_own,_codeNum);\\r\\n    }\\r\\n    function getParent(address _own) view public returns (address,bool,bool){\\r\\n        (address _parent,bool _isExist, bool _isParent) = db.getPlayerInfo(_own);\\r\\n        return (_parent,_isExist,_isParent);\\r\\n    }\\r\\n    function getAddressInfo(address _own) public view returns(uint _teamCount,uint _sonCount,uint _investBalance,uint _lev, uint _incomeBalance,uint _withdrawBalance){\\r\\n        return db.getAddressSomeInfo(_own);\\r\\n    }\\r\\n    function getAreaPerformance(address _own) public view returns(uint _maxPerformance, uint _minPerformance){\\r\\n        return db.getAreaPerformance(_own);\\r\\n    }\\r\\n    function getLastTime() public view returns(uint){\\r\\n        return db.lastTime();\\r\\n    }\\r\\n    function getLastPool() public view returns(uint){\\r\\n        return db.lastPool();\\r\\n    }\\r\\n    function getEstimateReward(address _own) public view returns(uint,uint){\\r\\n        return db.getEstimateReward(_own);\\r\\n    }\\r\\n    function getIncomeList(address _own) public view  returns (uint[50] memory , uint[50] memory , uint[50] memory, address[50] memory ){\\r\\n        return db.getIncomeList(_own);\\r\\n    }\\r\\n    function getMyReward(address _own) public view returns (uint[9] memory){\\r\\n        return db.getMyReward(_own);\\r\\n    }\\r\\n    function getLuckNum() public view returns(uint){\\r\\n        return db.luckCodeNum();\\r\\n    }\\r\\n    function getLuckCodePool() public view returns(uint,uint,uint,uint){\\r\\n        uint _luckNum = getLuckNum();\\r\\n        return (\\r\\n            db.luckPool(_luckNum,1,0),\\r\\n            db.luckPool(_luckNum,1,1),\\r\\n            db.luckPool(_luckNum,1,2),\\r\\n            db.luckPool(_luckNum,1,3)\\r\\n        );\\r\\n    }\\r\\n    function getIncomePool() public view returns(uint,uint,uint,uint){\\r\\n        uint _luckNum = getLuckNum();\\r\\n        return (\\r\\n            db.luckPool(_luckNum,0,0),\\r\\n            db.luckPool(_luckNum,0,1),\\r\\n            db.luckPool(_luckNum,0,2),\\r\\n            db.luckPool(_luckNum,0,3)\\r\\n        );\\r\\n    }\\r\\n    function playLuckCode(uint _num) public{\\r\\n        address _own = msg.sender;\\r\\n        uint _tokenPrice = token.price();\\r\\n        uint _needTokenNum = _tokenPrice.mul(_num).mul(1e18);\\r\\n        uint _ownBalance = token.getToken(_own);\\r\\n        require(_ownBalance \\u003e= _needTokenNum,\\\"token \\u003c need\\\");\\r\\n        token.sendTokenToGame(_own,_needTokenNum);\\r\\n        db.addCodeToPlayer(_own,_num);\\r\\n    }\\r\\n    function getPlayerLuckCode(address _own) public view returns(uint[100] memory){\\r\\n        return db.getLuckCode(_own);\\r\\n    } \\r\\n    function getLastOpenLuckCodeList() public view returns(uint[] memory){\\r\\n        return db.getLastOpenLuckCodeList();\\r\\n    }\\r\\n    function getLastInvestAddress() public view returns(address[50] memory ,uint[50] memory ){\\r\\n        uint _length = db.getSystemInvestLength();\\r\\n        uint j = 0;\\r\\n        address[50] memory _address;\\r\\n        uint[50] memory _balance;\\r\\n        for(uint i = _length; i\\u003e 0;i--){\\r\\n            if(j \\u003e= 50){\\r\\n                break;\\r\\n            }\\r\\n            (address _tempAddress,uint _tempBalance) = db.getSystemInvestInfo(i.sub(1));\\r\\n            _address[j] = _tempAddress;\\r\\n            _balance[j] = _tempBalance;\\r\\n            j++;\\r\\n        }\\r\\n        return (_address,_balance);\\r\\n    }\\r\\n    function getInvestList(bool _flag) public view returns(address[21] memory){\\r\\n        return db.getInvestList(_flag);\\r\\n    }\\r\\n    \\r\\n    function getSystemLevNum(uint _num) public view returns (uint){\\r\\n        return db.systemLevNum(_num);\\r\\n    }\\r\\n    function invest(uint _balance) public {\\r\\n        _balance = _balance.mul(1e6);\\r\\n        require(_balance \\u003e= minInvestValue, \\\"insufficient investment amount\\\");\\r\\n        require(_balance.mod(minInvestParticle) == 0, \\\"wrong investment amount\\\");\\r\\n        _fromUsdtToAddress(_balance);\\r\\n        address _selfAddress = msg.sender;\\r\\n        (,,bool _isParent) = db.getPlayerInfo(_selfAddress);\\r\\n        require(_isParent == true, \\\"parent does not exist\\\");\\r\\n        uint _myTicketNum = token.getToken(_selfAddress);\\r\\n        uint _needTicketNum = tool._getNeedTicketNum(_balance);\\r\\n        _needTicketNum = _needTicketNum.mul(1e18);\\r\\n        require(_myTicketNum \\u003e= _needTicketNum, \\\"Insufficient tickets\\\");\\r\\n        _useTicket(_needTicketNum);\\r\\n        db.addInvestBurnNum(_balance.div(10));\\r\\n        db.addInvest(_selfAddress,_balance);\\r\\n        db.setAssignment(_balance);\\r\\n        db.giveShare(_selfAddress, _balance);\\r\\n        db.setParentLev(_selfAddress);\\r\\n        db.setTeamLevReward(_selfAddress, _balance);\\r\\n        _setDevReward(_balance.mul(3).div(100));\\r\\n        db.setTopLevReward(_balance.mul(3).div(100));\\r\\n        _setLastTime(_balance);\\r\\n    }\\r\\n    function withdraw() public{\\r\\n        openLastReward();\\r\\n        openReward();\\r\\n        address payable _own = tx.origin;\\r\\n        db.setAllStaticReward(_own);\\r\\n        uint _giveAmount = db.getFreeWithdrawBalance(_own);\\r\\n        uint _tokenGiveAmount = _giveAmount.mul(5).div(100);\\r\\n        uint _newGiveAmount = _giveAmount.sub(_tokenGiveAmount);\\r\\n        _setforceLuckCode(_own,_tokenGiveAmount);\\r\\n        db.setPlayerWithdraw(_own);\\r\\n        _sendUsdtToAddress(_own,_newGiveAmount);\\r\\n    }\\r\\n}\\r\\nabstract contract USDT {\\r\\n    function transfer(address to, uint value) public virtual;\\r\\n    function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n    function transferFrom(address from, address to, uint value) public virtual;\\r\\n    function approve(address spender, uint value) public virtual;\\r\\n    function balanceOf(address spender) public virtual view returns (uint);\\r\\n}\\r\\nabstract contract Token {\\r\\n    function getToken(address _own) public virtual returns (uint);\\r\\n    function sendTokenToGame(address _to, uint _value) public virtual returns (bool);\\r\\n    function sendTokenToAddress(address _own,uint _balance) public virtual;\\r\\n    function getTokenPrice() public virtual view returns (uint);\\r\\n    function price() public view virtual returns (uint);\\r\\n}\\r\\nabstract contract Db {\\r\\n    function setPlayerParentAddress(address _own,address _parent) public virtual;\\r\\n    function systemPlayerNum() public virtual returns (uint);\\r\\n    function getPlayerInfo(address _own) public view virtual returns(address _parent,bool _isExist,bool _isParent);\\r\\n    function addInvest(address _own,uint _balance) public virtual;\\r\\n    function setAssignment(uint _balance) public virtual;\\r\\n    function giveShare(address _own, uint _balance) public virtual;\\r\\n    function setParentLev(address _own) public virtual;\\r\\n    function setTeamLevReward(address _own, uint _balance) public virtual;\\r\\n    function setTopLevReward(uint _balance) public virtual;\\r\\n    function lastTime() public view virtual returns (uint);\\r\\n    function lastPool() public view virtual returns (uint);\\r\\n    function setLastTime(uint _lastTime) public virtual;\\r\\n    function setAllStaticReward(address _own) public virtual;\\r\\n    function getFreeWithdrawBalance(address _own) public virtual returns (uint);\\r\\n    function addCodeToPlayer(address _own,uint _count) public virtual;\\r\\n    function setPlayerWithdraw(address _own) public virtual;\\r\\n    function getAreaPerformance(address _own) public view virtual returns (uint _maxPerformance, uint _minPerformance);\\r\\n    function getAddressSomeInfo(address _own) public view virtual returns(uint _teamCount,uint _sonCount,uint _investBalance,uint _lev,uint _incomeBalance,uint _withdrawBalance);\\r\\n    function luckPool(uint _num,uint _type,uint _index) public view virtual returns (uint _balance);\\r\\n    function getEstimateReward(address _own) public view virtual returns(uint,uint);\\r\\n    function getMyReward(address _own) public view virtual  returns (uint[9] memory);\\r\\n    function getIncomeList(address _own) public view virtual returns (uint[50] memory , uint[50] memory , uint[50] memory, address[50] memory);\\r\\n    function luckCodeNum() public view virtual returns (uint);\\r\\n    function getSystemInvestLength() public view virtual returns (uint);\\r\\n    function getSystemInvestInfo(uint _index) public view virtual returns (address,uint);\\r\\n    function getLastOpenLuckCodeList() public view virtual returns(uint[] memory);\\r\\n    function getLuckCode(address _own) public view virtual returns(uint[100] memory);\\r\\n    function getInvestList(bool _flag) public view virtual returns (address[21] memory);\\r\\n    function openLastPoolReward() public virtual;\\r\\n    function openReward() public virtual;\\r\\n    function systemLevNum(uint _lev) public view virtual returns(uint);\\r\\n    function addInvestBurnNum(uint _num) public virtual;\\r\\n}\\r\\nabstract contract Tool {\\r\\n    function _getNeedTicketNum(uint _balance) view public virtual returns (uint);\\r\\n    function _getRatio(uint _balance) pure public virtual returns (uint);\\r\\n    function _createRandomNum(uint _min, uint _max, uint _randNonce) public virtual view returns (uint);\\r\\n    function _crateLuckCodeList(uint _max) public view virtual returns (uint[25] memory);\\r\\n}\\r\\n\\r\\n\"},\"safeMath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"bindParentAndBuyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getAddressInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sonCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incomeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getAllowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getAreaPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerformance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPerformance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getEstimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getIncomeList\",\"outputs\":[{\"internalType\":\"uint256[50]\",\"name\":\"\",\"type\":\"uint256[50]\"},{\"internalType\":\"uint256[50]\",\"name\":\"\",\"type\":\"uint256[50]\"},{\"internalType\":\"uint256[50]\",\"name\":\"\",\"type\":\"uint256[50]\"},{\"internalType\":\"address[50]\",\"name\":\"\",\"type\":\"address[50]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncomePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"getInvestList\",\"outputs\":[{\"internalType\":\"address[21]\",\"name\":\"\",\"type\":\"address[21]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastInvestAddress\",\"outputs\":[{\"internalType\":\"address[50]\",\"name\":\"\",\"type\":\"address[50]\"},{\"internalType\":\"uint256[50]\",\"name\":\"\",\"type\":\"uint256[50]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastOpenLuckCodeList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuckCodePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuckNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getMyReward\",\"outputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"name\":\"getPlayerLuckCode\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"\",\"type\":\"uint256[100]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getSystemLevNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toolAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openLastReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"playLuckCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Core","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67b0cd19298943674721316a62b4d3dba70a91499d041c0206c81c64413fb232"}]}