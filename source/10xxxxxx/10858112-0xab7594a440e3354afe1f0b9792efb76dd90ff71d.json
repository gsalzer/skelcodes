{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: No License (None)\r\npragma solidity ^0.6.9;\r\n\r\n// This contract address should be the Owner of other contracts which setting we will change.\r\ncontract GovernanceProxy {\r\n    address public governance;\r\n    address public _newGovernance;\r\n    event ChangeGovernance(address indexed previousGovernance, address indexed newGovernance);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Governance (Voting system).\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(governance == msg.sender, \"Not Governance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The constructor sets the original `governance` system\r\n     * @param newGovernance The address of Governance smart contract\r\n     */\r\n    constructor (address newGovernance) public {\r\n        require(newGovernance != address(0),\"Zero address not allowed\");\r\n        emit ChangeGovernance(governance, newGovernance);\r\n        governance = newGovernance;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernance.\r\n     * @param newGovernance The new address of Governance smart contract.\r\n     */\r\n    function SetNewGovernance(address newGovernance) external {\r\n        require(address(this) == msg.sender, \"Not allowed\");\r\n        require(newGovernance != address(0),\"Zero address not allowed\");\r\n        _newGovernance = newGovernance;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept Governance from new Governance contract address.\r\n     */    \r\n    function acceptGovernanceAddress() external {\r\n        require(msg.sender == _newGovernance, \"Not allowed\");\r\n        emit ChangeGovernance(governance, _newGovernance);\r\n        governance = _newGovernance;\r\n    }    \r\n\r\n    /**\r\n     * @dev Apply changes from Governance System. Call destination contract.\r\n     * @param contr The contract address to call\r\n     * @param params encoded params\r\n     */\r\n    function trigger(address contr, bytes calldata params) external onlyGovernance {\r\n        contr.call(params);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"ChangeGovernance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"SetNewGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_newGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GovernanceProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ee897382603a2b54d02e542bb1204d1e2ced86b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f2d6f76cb69b1f449038d0a75e92f8c414c103427524bd9b3342263bf488d5be"}]}