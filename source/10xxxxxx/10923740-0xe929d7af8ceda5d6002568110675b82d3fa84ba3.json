{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT;\r\npragma solidity =0.7.0;\r\n\r\ninterface Uniswap {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    \r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address guy) external view returns (uint256);\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\r\n    function approve(address guy, uint256 wad) external returns (bool);\r\n    function allowance(address src, address dst) external view returns (uint256);\r\n}\r\n\r\ncontract UniswapWrapper {\r\n    address private janitor;\r\n    address constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    constructor() {\r\n        janitor = msg.sender;\r\n    }\r\n\r\n    function swap(\r\n        address token_in,\r\n        address token_out,\r\n        uint256 amount_in,\r\n        uint256 min_amount_out,\r\n        address to\r\n    ) external returns (bool) {\r\n        IERC20 token = IERC20(token_in);\r\n        token.transferFrom(msg.sender, address(this), amount_in);\r\n\r\n        bool is_weth = token_in == weth || token_out == weth;\r\n        address[] memory path = new address[](is_weth ? 2 : 3);\r\n        path[0] = token_in;\r\n        if (is_weth) {\r\n            path[1] = token_out;\r\n        } else {\r\n            path[1] = weth;\r\n            path[2] = token_out;\r\n        }\r\n\r\n        if (token.allowance(address(this), uniswap) == 0) {\r\n            token.approve(uniswap, type(uint256).max);\r\n        }\r\n        Uniswap(uniswap).swapExactTokensForTokens(\r\n            amount_in,\r\n            min_amount_out,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function quote(address token_in, address token_out, uint256 amount_in) external view returns (uint256) {\r\n        bool is_weth = token_in == weth || token_out == weth;\r\n        address[] memory path = new address[](is_weth ? 2 : 3);\r\n        path[0] = token_in;\r\n        if (is_weth) {\r\n            path[1] = token_out;\r\n        } else {\r\n            path[1] = weth;\r\n            path[2] = token_out;\r\n        }\r\n        uint256[] memory amounts = Uniswap(uniswap).getAmountsOut(amount_in, path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function dust(address _token) external returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        return token.transfer(janitor, token.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"dust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_in\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapWrapper","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b8a5eee52302e86913de11bf044e776df6ef66956c9ac473b8f944f619621c93"}]}