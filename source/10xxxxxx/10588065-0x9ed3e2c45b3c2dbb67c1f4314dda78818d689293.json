{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n/**\r\n *   @title SafeMath\r\n *   @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns(uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns(uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns(uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n *   @dev USDD token contract\r\n */\r\n\r\ncontract USDD {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public owner;\r\n  string public name = \"USDD\";\r\n\r\n  uint public totalSupply;\r\n  uint public decimals;\r\n\r\n  // basisPointsRate - for use if transaction fees ever became necessary\r\n  uint public basisPointsRate = 0;\r\n  // maximim possible fee\r\n  uint public maximumFee = 0;\r\n\r\n  mapping (address => uint) public balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n  mapping (address => bool) public isBlackListed;\r\n  mapping (address => bool) public isFrozen;\r\n\r\n  // Allows execution by the owner only\r\n  modifier onlyOwner{\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  constructor(uint _initialSupply, uint _decimals) public {\r\n    owner = msg.sender;\r\n    totalSupply = _initialSupply;\r\n    decimals = _decimals;\r\n    balances[owner] = _initialSupply;\r\n  }\r\n\r\n  /**\r\n    *   @dev Get balance of investor\r\n    *   @param _tokenOwner   investor's address\r\n    *   @return              balance of investor\r\n    */\r\n\r\n  function balanceOf(address _tokenOwner) public view returns (uint balance) {\r\n    return balances[_tokenOwner];\r\n  }\r\n\r\n  /**\r\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    *   @param _tokenOwner        the address which owns the funds\r\n    *   @param _spender           the address which will spend the funds\r\n    *\r\n    *   @return                   the amount of tokens still avaible for the spender\r\n    */\r\n  function allowance(address _tokenOwner, address _spender) public view returns (uint){\r\n    return allowed[_tokenOwner][_spender];\r\n  }\r\n\r\n  /**\r\n    *   @return true if the transfer was successful\r\n    */\r\n  function transfer(address _to, uint _amount) public payable returns(bool){\r\n\r\n    //  check for being in the black list and for frozen funds\r\n    require(!isBlackListed[msg.sender]);\r\n    require(!isBlackListed[_to]);\r\n\r\n    require(!isFrozen[msg.sender]);\r\n    require(!isFrozen[_to]);\r\n\r\n    require(balances[msg.sender] >= _amount);\r\n\r\n    uint fee = (_amount.mul(basisPointsRate)).div(10000);\r\n    if (fee > maximumFee) {\r\n      fee = maximumFee;\r\n    }\r\n\r\n    uint sendAmount = _amount.sub(fee);\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n\r\n    if (fee > 0) {\r\n      balances[owner] = balances[owner].add(fee);\r\n      emit Transfer(msg.sender, owner, fee);\r\n    }\r\n\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n   /**\r\n    *   @dev Allows another account/contract to spend some tokens on its behalf\r\n    * approve has to be called twice in 2 separate transactions - once to\r\n    *   change the allowance to 0 and secondly to change it to the new allowance value\r\n    *   @param _spender      approved address\r\n    *   @param _amount       allowance amount\r\n    *\r\n    *   @return true if the approval was successful\r\n    */\r\n  function approve(address _spender, uint _amount) public payable returns(bool){\r\n    require(!isBlackListed[msg.sender]);\r\n    require(!isBlackListed[_spender]);\r\n\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    *   @return true if the transfer was successful\r\n    */\r\n  function transferFrom(address _from, address _to, uint _amount) public payable returns (bool) {\r\n    require(!isBlackListed[msg.sender]);\r\n    require(!isFrozen[_from]);\r\n    require(!isFrozen[_to]);\r\n    require(!isBlackListed[_to]);\r\n\r\n    require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_from].add(_amount) >= balances[_from]);\r\n\r\n    uint fee = (_amount.mul(basisPointsRate)).div(10000);\r\n    if (fee > maximumFee) {\r\n      fee = maximumFee;\r\n    }\r\n\r\n    uint sendAmount = _amount.sub(fee);\r\n  \r\n    balances[_from] = balances[_from].sub(_amount);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n\r\n    if (fee > 0) {\r\n      balances[owner] = balances[owner].add(fee);\r\n      emit Transfer(_from, owner, fee);\r\n    }\r\n\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    *   adds the user to the blacklist\r\n    *   blacklisted user cannot make any transactions with tokens\r\n    */\r\n  function addToBlackList(address user)public onlyOwner {\r\n    require(balances[user] == 0);\r\n    isBlackListed[user] = true;\r\n    emit AddedBlackList(user);\r\n  }\r\n\r\n  //    removes the user from the blacklist\r\n  function removeFromBlackList(address user)public onlyOwner {\r\n    isBlackListed[user] = false;\r\n    emit RemovedBlackList(user);\r\n  }\r\n\r\n  /**\r\n    *   freezes user funds\r\n    *   user cannot dispose of frozen funds\r\n    */\r\n  function freezeUser(address user)public onlyOwner {\r\n    require(balances[user] > 0);\r\n    isFrozen[user] = true;\r\n    emit Freeze(user);\r\n  }\r\n\r\n  //    defrosts user tools\r\n  function defrostUser(address user)public onlyOwner {\r\n    isFrozen[user] = false;\r\n    emit Defrost(user);\r\n  }\r\n\r\n  //    replenishment of funds\r\n  function mintTokens(uint value) public payable onlyOwner {\r\n    balances[owner] = balances[owner].add(value);\r\n    totalSupply = totalSupply.add(value);\r\n    emit IncreaseFunds(value);\r\n  }\r\n\r\n  //    burning of funds\r\n  function burnFunds(uint value) public payable onlyOwner {\r\n    balances[owner] = balances[owner].sub(value);\r\n    totalSupply = totalSupply.sub(value);\r\n    emit BurnFunds(value);\r\n  }\r\n\r\n  function setFee(uint newBasisPoints, uint newMaxFee) public payable onlyOwner {\r\n    // commission range limitation\r\n    require(newBasisPoints < 20);\r\n    require(newMaxFee < 50);\r\n\r\n    basisPointsRate = newBasisPoints;\r\n    maximumFee = newMaxFee.mul(10**decimals);\r\n\r\n    emit Params(basisPointsRate, maximumFee);\r\n  }\r\n\r\n  // Events Log\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n  event AddedBlackList(address user);\r\n  event RemovedBlackList(address user);\r\n\r\n  event IncreaseFunds(uint value);\r\n  event BurnFunds(uint value);\r\n\r\n  event Freeze(address user);\r\n  event Defrost(address user);\r\n\r\n  event Params(uint currentFee, uint maximumFee);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Defrost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IncreaseFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defrostUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freezeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"USDD","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000009184e72a0000000000000000000000000000000000000000000000000000000000000000008","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e0cde2dea4b60db98427afba0f527ede8f3fc2df806ab408c25c9f0a376a783f"}]}