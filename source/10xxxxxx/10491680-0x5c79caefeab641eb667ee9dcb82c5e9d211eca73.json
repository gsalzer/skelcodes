{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/***\r\n *         _____                                               ___           ___     \r\n *        /  /::\\       ___           ___        ___          /  /\\         /  /\\    \r\n *       /  /:/\\:\\     /  /\\         /__/\\      /  /\\        /  /:/_       /  /:/_   \r\n *      /  /:/  \\:\\   /  /:/         \\  \\:\\    /  /:/       /  /:/ /\\     /  /:/ /\\  \r\n *     /__/:/ \\__\\:| /__/::\\          \\  \\:\\  /__/::\\      /  /:/ /:/_   /  /:/ /::\\ \r\n *     \\  \\:\\ /  /:/ \\__\\/\\:\\__   ___  \\__\\:\\ \\__\\/\\:\\__  /__/:/ /:/ /\\ /__/:/ /:/\\:\\\r\n *      \\  \\:\\  /:/     \\  \\:\\/\\ /__/\\ |  |:|    \\  \\:\\/\\ \\  \\:\\/:/ /:/ \\  \\:\\/:/~/:/\r\n *       \\  \\:\\/:/       \\__\\::/ \\  \\:\\|  |:|     \\__\\::/  \\  \\::/ /:/   \\  \\::/ /:/ \r\n *        \\  \\::/        /__/:/   \\  \\:\\__|:|     /__/:/    \\  \\:\\/:/     \\__\\/ /:/  \r\n *         \\__\\/         \\__\\/     \\__\\::::/      \\__\\/      \\  \\::/        /__/:/   \r\n *                                     ~~~~                   \\__\\/         \\__\\/    \r\n *  v 1.1.0\r\n *  \"Spread the Love\"\r\n *\r\n *  Ethereum Commonwealth.gg Divies(based on contract @ ETC:0x93123bA3781bc066e076D249479eEF760970aa32)\r\n *  Modifications: \r\n *  -> reinvest Crop Function\r\n *\r\n *  What?\r\n *  -> eWLTH div interface. Send ETH here, and then call distribute to give to eWLTH holders.\r\n *  -> Distributes 75% of the contract balance.\r\n * \r\n *                                ┌────────────────────┐\r\n *                                │ Usage Instructions │\r\n *                                └────────────────────┘\r\n * Transfer funds directly to this contract. These will be distributed via the distribute function.\r\n *   \r\n *    address diviesAddress = 0xd1A231ae68eBE7Aec3ECDAEAC4C0776eB525D969;\r\n *    diviesAddress.transfer(232000000000000000000); \r\n * \r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \r\n * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n \r\ninterface HourglassInterface {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress, bool) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\n\r\ncontract Divies {\r\n    using SafeMath for uint256;\r\n    using UintCompressor for uint256;\r\n    address private eWLTHAddress = 0x5833C959C3532dD5B3B6855D590D70b01D2d9fA6;\r\n\r\n    HourglassInterface constant eWLTH = HourglassInterface(eWLTHAddress);\r\n    \r\n    uint256 public pusherTracker_ = 100;\r\n    mapping (address => Pusher) public pushers_;\r\n    struct Pusher\r\n    {\r\n        uint256 tracker;\r\n        uint256 time;\r\n    }\r\n\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // BALANCE\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    function balances()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (address(this).balance);\r\n    }\r\n    \r\n    \r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // DEPOSIT\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    function deposit()\r\n        external\r\n        payable\r\n    {\r\n        \r\n    }\r\n    \r\n    // used so the distribute function can call hourglass's withdraw\r\n    function() external payable {}\r\n    \r\n    \r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // EVENTS\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    event onDistribute(\r\n        address pusher,\r\n        uint256 startingBalance,\r\n        uint256 finalBalance,\r\n        uint256 compressedData\r\n    );\r\n    /* compression key\r\n    [0-14] - timestamp\r\n    [15-29] - caller pusher tracker \r\n    [30-44] - global pusher tracker \r\n    */  \r\n    \r\n    \r\n  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // DISTRIBUTE\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    function distribute()\r\n        public\r\n    {\r\n        uint256 _percent = 75;\r\n        // data setup\r\n        address _pusher = msg.sender;\r\n        uint256 _bal = address(this).balance;\r\n        uint256 _compressedData;\r\n        \r\n        // update pushers wait que \r\n        pushers_[_pusher].tracker = pusherTracker_;\r\n        pusherTracker_++;\r\n            \r\n        // setup _stop.  this will be used to tell the loop to stop\r\n        uint256 _stop = (_bal.mul(100 - _percent)) / 100;\r\n            \r\n        // buy & sell    \r\n        eWLTH.buy.value(_bal)(address(0));\r\n        eWLTH.sell(eWLTH.balanceOf(address(this)));\r\n            \r\n        // setup tracker.  this will be used to tell the loop to stop\r\n        uint256 _tracker = eWLTH.dividendsOf(address(this), true);\r\n    \r\n        // reinvest/sell loop\r\n        while (_tracker >= _stop) \r\n        {\r\n            // lets burn some tokens to distribute dividends to eWLTH holders\r\n            eWLTH.reinvest();\r\n            eWLTH.sell(eWLTH.balanceOf(address(this)));\r\n                \r\n            // update our tracker with estimates (yea. not perfect, but cheaper on gas)\r\n            _tracker = (_tracker.mul(81)) / 100;\r\n        }\r\n            \r\n        // withdraw\r\n        eWLTH.withdraw();\r\n        \r\n        // update pushers timestamp  (do outside of \"if\" for super saiyan level top kek)\r\n        pushers_[_pusher].time = now;\r\n    \r\n        // prep event compression data \r\n        _compressedData = _compressedData.insert(now, 0, 14);\r\n        _compressedData = _compressedData.insert(pushers_[_pusher].tracker, 15, 29);\r\n        _compressedData = _compressedData.insert(pusherTracker_, 30, 44);\r\n\r\n        // fire event\r\n        emit onDistribute(_pusher, _bal, address(this).balance, _compressedData);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title -UintCompressor- v0.1.9\r\n*/\r\nlibrary UintCompressor {\r\n    using SafeMath for *;\r\n    \r\n    function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        // check conditions \r\n        require(_end < 77 && _start < 77);\r\n        require(_end >= _start);\r\n        \r\n        // format our start/end points\r\n        _end = exponent(_end).mul(10);\r\n        _start = exponent(_start);\r\n        \r\n        // check that the include data fits into its segment \r\n        require(_include < (_end / _start));\r\n        \r\n        // build middle\r\n        if (_include > 0)\r\n            _include = _include.mul(_start);\r\n        \r\n        return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));\r\n    }\r\n    \r\n    function extract(uint256 _input, uint256 _start, uint256 _end)\r\n\t    internal\r\n\t    pure\r\n\t    returns(uint256)\r\n    {\r\n        // check conditions\r\n        require(_end < 77 && _start < 77);\r\n        require(_end >= _start);\r\n        \r\n        // format our start/end points\r\n        _end = exponent(_end).mul(10);\r\n        _start = exponent(_start);\r\n        \r\n        // return requested section\r\n        return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);\r\n    }\r\n    \r\n    function exponent(uint256 _position)\r\n        private\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return((10).pwr(_position));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pushers_\",\"outputs\":[{\"name\":\"tracker\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pusherTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pusher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"}]","ContractName":"Divies","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://568ce06bbe22a00a41e1efc90c8404ca48bede6b1f30059ed8d879b684aa6ba4"}]}