{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Database {\r\n      address public dappAddress;\r\n      address public contractOwner;\r\n      address public ownerWallet;\r\n      address public balAdmin;\r\n      uint public currUserID = 0;\r\n      uint public p1CUId = 0;\r\n      uint public p2CUId = 0;\r\n      uint public p3CUId = 0;\r\n      uint public p4CUId = 0;\r\n      uint public p5CUId = 0;\r\n      uint public p6CUId = 0;\r\n      uint public p7CUId = 0;\r\n      uint public p8CUId = 0;\r\n      uint public p9CUId = 0;\r\n      uint public p10CUId = 0;\r\n      \r\n      uint public p1AcUId = 0;\r\n      uint public p2AcUId = 0;\r\n      uint public p3AcUId = 0;\r\n      uint public p4AcUId = 0;\r\n      uint public p5AcUId = 0;\r\n      uint public p6AcUId = 0;\r\n      uint public p7AcUId = 0;\r\n      uint public p8AcUId = 0;\r\n      uint public p9AcUId = 0;\r\n      uint public p10AcUId = 0;\r\n      \r\n      uint public unlimited_level_price=0;\r\n     \r\n      struct User {\r\n        bool isExist;\r\n        uint id;\r\n        uint refId;\r\n        uint refUsers;\r\n     }\r\n    \r\n     struct PoolUser {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received; \r\n    }\r\n    \r\n    mapping (address => User) public users;\r\n     mapping (uint => address) public userList;\r\n     \r\n     mapping (address => PoolUser) public pool1users;\r\n     mapping (uint => address) public pool1userList;\r\n     \r\n     mapping (address => PoolUser) public pool2users;\r\n     mapping (uint => address) public pool2userList;\r\n     \r\n     mapping (address => PoolUser) public pool3users;\r\n     mapping (uint => address) public pool3userList;\r\n     \r\n     mapping (address => PoolUser) public pool4users;\r\n     mapping (uint => address) public pool4userList;\r\n     \r\n     mapping (address => PoolUser) public pool5users;\r\n     mapping (uint => address) public pool5userList;\r\n     \r\n     mapping (address => PoolUser) public pool6users;\r\n     mapping (uint => address) public pool6userList;\r\n     \r\n     mapping (address => PoolUser) public pool7users;\r\n     mapping (uint => address) public pool7userList;\r\n     \r\n     mapping (address => PoolUser) public pool8users;\r\n     mapping (uint => address) public pool8userList;\r\n     \r\n     mapping (address => PoolUser) public pool9users;\r\n     mapping (uint => address) public pool9userList;\r\n     \r\n     mapping (address => PoolUser) public pool10users;\r\n     mapping (uint => address) public pool10userList;\r\n     \r\n    mapping(uint => uint) public L_PRICE;\r\n    mapping(uint => uint) public L_PRICE1;\r\n    mapping(uint => uint) public L_PRICE2;\r\n    mapping(uint => uint) public L_PRICE3;\r\n    mapping(uint => uint) public L_PRICE4;\r\n    mapping(uint => uint) public L_PRICE5;\r\n    mapping(uint => uint) public L_PRICE6;\r\n    mapping(uint => uint) public L_PRICE7;\r\n    mapping(uint => uint) public L_PRICE8;\r\n    mapping(uint => uint) public L_PRICE9;\r\n    mapping(uint => uint) public L_PRICE10;\r\n    \r\n    function saveNewRegData(address oldUAddr, uint referrerID) public {}\r\n    function saveNewPlData(uint pool,address _poolAddress) public {}\r\n    function updPlPayment(uint pool,address _poolAddress) public {}\r\n    function updCurAndActUsr(uint pool, uint cType) public {}\r\n}\r\n\r\ncontract Akodax2_0 {\r\n    Database dbInst;\r\n    address public dbAddress;\r\n    address public owner;\r\n    \r\n    struct User {\r\n        bool isExist;\r\n        uint id;\r\n        uint refId;\r\n        uint refUsers;\r\n     }\r\n    \r\n     struct PoolUser {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received; \r\n    }\r\n    \r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    \r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n\r\n    event getPoolMoneyForLevelEvent(uint _pool, address indexed _user, address indexed _referral, uint _level, uint _time);\r\n\r\n    event regPoolEntry(address indexed _user, uint _pool, uint _time);\r\n\r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n        dbAddress = address(0);\r\n    }\r\n    \r\n    function changeDbAddress(address _addr) public returns (bool) {\r\n        require(msg.sender==owner);\r\n        dbAddress = _addr;\r\n        dbInst = Database(dbAddress);\r\n        return true;\r\n    }\r\n    \r\n     function regUser(uint _referrerID) public payable  {\r\n         (bool isExist,,,) = dbInst.users(msg.sender);\r\n          if(!isExist){\r\n                require(_referrerID > 0 && _referrerID <= dbInst.currUserID(),'Incorrect referral ID');\r\n                require(msg.value == 0.1 ether,'Incorrect Value');\r\n               dbInst.saveNewRegData(msg.sender,_referrerID);\r\n               payReferral(1,msg.sender);\r\n                emit regLevelEvent(msg.sender,dbInst.userList(_referrerID), now);\r\n          }\r\n    }\r\n     function payReferral(uint _level,address _user) internal {\r\n         (,,uint256 rId,) = dbInst.users(_user);\r\n         address referer = dbInst.userList(rId);\r\n         bool sent = false;\r\n            uint level_price_local=0;\r\n            if(_level>3){\r\n                level_price_local=uint(dbInst.unlimited_level_price());\r\n            }\r\n            else{\r\n                level_price_local=dbInst.L_PRICE(_level);\r\n            }\r\n            sent = address(uint160(referer)).send(level_price_local);\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer,msg.sender,_level,now);\r\n                (,,uint256 refId,) = dbInst.users(referer);\r\n                if(_level < 100 && refId >= 1){\r\n                    payReferral(_level+1,referer);\r\n                }\r\n                else\r\n                {\r\n                    sendBalance();\r\n                }\r\n            }\r\n        if(!sent) {\r\n            payReferral(_level,referer);\r\n        }\r\n     }\r\n      function payPoolReferral(uint _level,address _user,uint pool) internal {\r\n        (,,uint256 rId,) = dbInst.users(_user);\r\n        address referer = dbInst.userList(rId);\r\n        bool sent = false;\r\n        uint level_price_local=0;\r\n        if(pool==1){\r\n            (bool isExist,,) = dbInst.pool1users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE1(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE1(_level));    \r\n                }\r\n            }                \r\n        }else if(pool==2){\r\n          (isExist,,) = dbInst.pool2users(referer);\r\n          if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE2(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE2(_level));    \r\n                }\r\n          }\r\n        }else if(pool==3){\r\n            (isExist,,) = dbInst.pool3users(referer);\r\n            if(isExist){\r\n             if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE3(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE3(_level));    \r\n                }\r\n            }\r\n        }else if(pool==4){\r\n          (isExist,,) = dbInst.pool4users(referer);\r\n            if(isExist){\r\n                 if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE4(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE4(_level));    \r\n                }\r\n            }\r\n        }else if(pool==5){\r\n          (isExist,,) = dbInst.pool5users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE5(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE5(_level));    \r\n                }\r\n             }\r\n        }else if(pool==6){\r\n             (isExist,,) = dbInst.pool6users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE6(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE6(_level));    \r\n                }\r\n             }\r\n        }else if(pool==7){\r\n          (isExist,,) = dbInst.pool7users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE7(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE7(_level));    \r\n                }\r\n             }\r\n        }else if(pool==8){\r\n         (isExist,,) = dbInst.pool8users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE8(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE8(_level));    \r\n                }\r\n             }\r\n        }else if(pool==9){\r\n             (isExist,,) = dbInst.pool9users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE9(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE9(_level));    \r\n                }\r\n             }\r\n        }else if(pool==10){\r\n            (isExist,,) = dbInst.pool10users(referer);\r\n            if(isExist){\r\n                if(_level>=2){\r\n                    level_price_local=uint(dbInst.L_PRICE10(2));\r\n                }else{\r\n                    level_price_local=uint(dbInst.L_PRICE10(_level));    \r\n                }\r\n             }\r\n        }\r\n        if(level_price_local>0){\r\n            if(address(this).balance > level_price_local) \r\n                sent = address(uint160(referer)).send(level_price_local);\r\n            if (sent) {\r\n                emit getPoolMoneyForLevelEvent(pool,referer,msg.sender,_level,now);\r\n                (,,uint256 refId,) = dbInst.users(referer);\r\n                if(_level < 4 && refId >= 1){\r\n                    payPoolReferral(_level+1,referer,pool);\r\n                }\r\n                else\r\n                {\r\n                    sendBalance();\r\n                }\r\n            }\r\n            if(!sent) {\r\n              //  emit lostMoneyForLevelEvent(referer, msg.sender, level,now);\r\n                payPoolReferral(_level,referer,pool);\r\n            }              \r\n        }else{\r\n            payPoolReferral(_level,referer,pool);\r\n        }\r\n            \r\n}\r\n     \r\n modifier userExist(){\r\n     (bool isExist,,,) = dbInst.users(msg.sender);\r\n     require(isExist==true,\"User Not Registered\");\r\n    _;\r\n}\r\n     \r\n  function poolExist(bool isExist) pure private {\r\n      require(isExist!=true,\"Already in Pool\");\r\n  }\r\n   \r\n   function buyPool(uint _pool) public payable userExist {\r\n       address poolCurrentuser = address(0);\r\n       bool give=true;\r\n       (,,uint256 payment_received) = (false,0,0);\r\n       if(_pool==1){\r\n           require(msg.value == 0.25 ether,'Incorrect Value');\r\n           (bool isExist,,) = dbInst.pool1users(msg.sender);\r\n            if(isExist){ \r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool1userList(dbInst.p1AcUId());\r\n               (,,payment_received) = dbInst.pool1users(poolCurrentuser);\r\n                 uint256 amtSend = 200000000000000000;\r\n            }\r\n       }else if(_pool==2){\r\n           (isExist,,) = dbInst.pool2users(msg.sender);\r\n            if(isExist || msg.value != 500000000000000000){ // 0.5 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool2userList(dbInst.p2AcUId());\r\n                (,,payment_received) = dbInst.pool2users(poolCurrentuser);\r\n                amtSend = 400000000000000000;\r\n            }\r\n       }else if(_pool==3){\r\n           (isExist,,) = dbInst.pool3users(msg.sender);\r\n             if(isExist || msg.value != 1000000000000000000){ // 1 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool3userList(dbInst.p3AcUId());\r\n                (,,payment_received) = dbInst.pool3users(poolCurrentuser);\r\n                amtSend = 800000000000000000;\r\n            }\r\n       }else if(_pool==4){\r\n           require(msg.value == 2.5 ether,'Incorrect Value');\r\n           (isExist,,) = dbInst.pool4users(msg.sender);\r\n            poolExist(isExist);\r\n           poolCurrentuser=dbInst.pool4userList(dbInst.p4AcUId());\r\n           (,,payment_received) = dbInst.pool4users(poolCurrentuser);\r\n           amtSend = 2000000000000000000;\r\n       }else if(_pool==5){\r\n           (isExist,,) = dbInst.pool5users(msg.sender);\r\n             if(isExist || msg.value != 6000000000000000000){ // 6 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool5userList(dbInst.p5AcUId());\r\n               (,,payment_received) = dbInst.pool5users(poolCurrentuser);\r\n                amtSend = 4800000000000000000;\r\n            }\r\n       }else if(_pool==6){\r\n           (isExist,,) = dbInst.pool6users(msg.sender);\r\n           if(isExist || msg.value != 15000000000000000000){ // 15 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool6userList(dbInst.p6AcUId());\r\n               (,,payment_received) = dbInst.pool6users(poolCurrentuser);\r\n               amtSend = 12000000000000000000;                \r\n            }\r\n       }else if(_pool==7){\r\n           (isExist,,) = dbInst.pool7users(msg.sender);\r\n           if(isExist || msg.value != 35000000000000000000){ // 35 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool7userList(dbInst.p7AcUId());\r\n               (,,payment_received) = dbInst.pool7users(poolCurrentuser);\r\n               amtSend = 28000000000000000000;\r\n            }\r\n       }else if(_pool==8){\r\n           (isExist,,) = dbInst.pool8users(msg.sender);\r\n            if(isExist || msg.value != 85000000000000000000){ // 85 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool8userList(dbInst.p8AcUId());\r\n               (,,payment_received) = dbInst.pool8users(poolCurrentuser);\r\n               amtSend = 68000000000000000000;\r\n            }\r\n       }else if(_pool==9){\r\n           (isExist,,) = dbInst.pool9users(msg.sender);\r\n            if(isExist || msg.value!=210000000000000000000){ // 210 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool9userList(dbInst.p10AcUId());\r\n               (,,payment_received) = dbInst.pool9users(poolCurrentuser);\r\n               amtSend = 168000000000000000000;\r\n            }\r\n       }else if(_pool==10){\r\n           (isExist,,) = dbInst.pool10users(msg.sender);\r\n            if(isExist || msg.value!=500000000000000000000){ // 500 ether\r\n               give = false; \r\n            }else{\r\n                poolCurrentuser=dbInst.pool10userList(dbInst.p10AcUId());\r\n               (,,payment_received) = dbInst.pool10users(poolCurrentuser);\r\n               amtSend = 400000000000000000000;\r\n            }\r\n       }else{\r\n           give = false;\r\n       }\r\n        if(give){\r\n            dbInst.saveNewPlData(_pool,msg.sender);\r\n            bool sent = false;\r\n            sent = address(uint160(poolCurrentuser)).send(amtSend);\r\n            if (sent) {\r\n                payPoolReferral(1,msg.sender,_pool);\r\n                dbInst.updPlPayment(_pool,poolCurrentuser);\r\n                if((payment_received+1)>=3)\r\n                {\r\n                    dbInst.updCurAndActUsr(_pool,2);\r\n                }\r\n                emit getPoolPayment(msg.sender,poolCurrentuser,_pool, now);\r\n            }\r\n            emit regPoolEntry(msg.sender,_pool,now);\r\n        }\r\n    }\r\n   \r\n   function getEthBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function sendBalance() private\r\n    {\r\n         if (!address(uint160(dbInst.ownerWallet())).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    }\r\n    function sendBalanceToOwner() public\r\n    {\r\n        require(msg.sender==owner);\r\n         if (!address(uint160(dbInst.ownerWallet())).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    } \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"sendBalanceToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeDbAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"buyPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_pool\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"}]","ContractName":"Akodax2_0","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://916ccc6bd3985d5bc28835d6db23efe242c3950dd89669541520bea5a2183be0"}]}