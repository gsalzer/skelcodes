{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract DoradoWorld{\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeD3Levels;\r\n        mapping(uint8 => bool) activeD4Levels;\r\n        \r\n        mapping(uint8 => D3) D3Matrix;\r\n        mapping(uint8 => D4) D4Matrix;\r\n        mapping(uint8 => D5) D5Matrix;\r\n    }\r\n    struct D5 {\r\n         uint[] D5No;\r\n    }\r\n    struct D3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    struct D4 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n    \r\n    uint8[15] private D3ReEntry = [\r\n       0,1,0,2,3,3,3,1,3,3,3,3,3,3,3\r\n    ];\r\n    \r\n    uint8[15] private D4ReEntry = [\r\n       0,0,0,1,3,3,3,1,1,3,3,3,3,3,3\r\n    ];\r\n    \r\n    uint[3] private D5LevelPrice = [\r\n        0.05 ether,\r\n        0.80 ether,\r\n        3.00 ether\r\n    ];\r\n    \r\n    uint8 public constant LAST_LEVEL = 15;\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances; \r\n    mapping(uint8 => uint[]) private L5Matrix;\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint256 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n    event NewD5Matrix(uint newid, uint benid, bool reentry);\r\n    event Reentry(uint newid, uint benid);\r\n    event D5NewId(uint newid, uint topid, uint botid,uint8 position,uint numcount);\r\n    event payout(uint indexed benid,address indexed receiver,uint indexed dividend,uint8 matrix);\r\n    event payoutblock(address receiver,uint reentry);\r\n    event Testor(string str,uint8 level,uint place);\r\n   \r\n    \r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.025 ether;\r\n        for (uint8 i = 2; i <= 10; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        levelPrice[11] = 25 ether;\r\n        levelPrice[12] = 50 ether;\r\n        levelPrice[13] = 60 ether;\r\n        levelPrice[14] = 70 ether;\r\n        levelPrice[15] = 100 ether;\r\n        \r\n        owner = ownerAddress;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeD3Levels[i] = true;\r\n            users[ownerAddress].activeD4Levels[i] = true;\r\n        }\r\n        \r\n        userIds[1] = ownerAddress;\r\n        for (uint8 i = 1; i <= 3; i++) {\r\n            users[ownerAddress].D5Matrix[i].D5No.push(1);\r\n            L5Matrix[i].push(1);\r\n            \r\n        }\r\n       \r\n        \r\n            /*L5Matrix[1][1] = 1;\r\n        \r\n        users[ownerAddress].D5Matrix[2].D5No.push(1);\r\n            L5Matrix[2][1] = 1;\r\n            \r\n        users[ownerAddress].D5Matrix[3].D5No.push(1);\r\n            \r\n    \r\n        */\r\n\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n       registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeD3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].D3Matrix[level-1].blocked) {\r\n                users[msg.sender].D3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeD3Referrer = findFreeD3Referrer(msg.sender, level);\r\n            users[msg.sender].D3Matrix[level].currentReferrer = freeD3Referrer;\r\n            users[msg.sender].activeD3Levels[level] = true;\r\n            updateD3Referrer(msg.sender, freeD3Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeD3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeD4Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].D4Matrix[level-1].blocked) {\r\n                users[msg.sender].D4Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeD4Referrer = findFreeD4Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeD4Levels[level] = true;\r\n            updateD4Referrer(msg.sender, freeD4Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeD4Referrer, 2, level);\r\n        }\r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeD3Levels[1] = true; \r\n        users[userAddress].activeD4Levels[1] = true;\r\n        \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeD3Referrer = findFreeD3Referrer(userAddress, 1);\r\n        users[userAddress].D3Matrix[1].currentReferrer = freeD3Referrer;\r\n        updateD3Referrer(userAddress, freeD3Referrer, 1);\r\n\r\n        updateD4Referrer(userAddress, findFreeD4Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function d5martixstructure(uint newid) private pure returns(uint,bool){\r\n\t\r\n\t\tuint8 matrix = 5;\r\n\t\tuint benid = 0;\r\n\t\tbool flag = true;\r\n\t\tuint numcount =1;\r\n\t\tuint topid = 0;\r\n\t\tuint botid = 0;\r\n\t\tuint8 position = 0;\r\n\t\tuint8 d5level = 1;\r\n\t    bool reentry= false;\r\n\r\n\t\twhile(flag){\r\n\r\n\t\ttopid = setUpperLine5(newid,d5level);\r\n\t\tposition = 0;\r\n        \r\n\t\t\tif(topid > 0){\r\n\t\t\t    botid = setDownlineLimit5(topid,d5level);\r\n\t\t\t    \r\n\t\t\t\tif(d5level == 6){\r\n\t\t\t\t\tbenid = topid;\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t}else{\r\n\t\t\t\t    //emit D5NewId(newid,topid,botid,position,numcount);\r\n\t\t\t\t\tif(newid == botid){\r\n\t\t\t\t\t\tposition = 1;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t   \r\n\t\t\t    \r\n\t\t\t\t\t\tfor (uint8 i = 1; i <= matrix; i++) {\r\n\t\t\t\t\r\n\t\t\t\t\t\t\tif(newid < (botid + (numcount * i))){\r\n\t\t\t\t\t\t\t\tposition = i;\r\n\t\t\t\t\t\t\t\ti = matrix;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t            \r\n\t\t\t\t\tif((position == 2) || (position == 4)){\r\n\t\t\t\t\t\tbenid = topid;\r\n\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\t\t\t\td5level += 1;\r\n\t\t\tnumcount = numcount * 5;\r\n\t\t\t}else{\r\n\t\t\t\tbenid =0;\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\td5level -= 1;\r\n\t\tif(benid > 0){\r\n\t\t    //emit D5NewId(newid, topid, botid,d5level,numcount);\r\n\t\t    if((d5level == 3) || (d5level == 4) || (d5level == 5)){\r\n\t\t        numcount = numcount / 5;\r\n\t\t        if(((botid + numcount) + 15) >= newid){\r\n\t\t\t\t    reentry = true;\r\n\t\t\t\t}\r\n\t\t\t\t    \r\n\t\t    }\r\n\t\t\t\t\r\n\t\t    if((d5level == 6) && ((botid + 15) >= newid)){\r\n\t\t\t\treentry = true;\r\n\t    \t}\r\n\t\t}\r\n\t\tif(benid == 0){\r\n\t\t    benid =1;\r\n\t\t}\r\n        return (benid,reentry);\r\n\r\n}\r\n     \r\n    function setUpperLine5(uint TrefId,uint8 level) internal pure returns(uint){\r\n    \tfor (uint8 i = 1; i <= level; i++) {\r\n    \t\tif(TrefId == 1){\r\n        \t\tTrefId = 0;\r\n    \t\t}else if(TrefId == 0){\r\n        \t\tTrefId = 0;\r\n    \t\t}else if((1 < TrefId) && (TrefId < 7)){\r\n        \t\tTrefId = 1;\r\n\t\t\t}else{\r\n\t\t\t\tTrefId -= 1;\r\n\t\t\t\tif((TrefId % 5) > 0){\r\n\t\t\t\tTrefId = uint(TrefId / 5);\r\n\t\t\t\tTrefId += 1;\r\n\t\t\t\t}else{\r\n\t\t\t\tTrefId = uint(TrefId / 5);  \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\t\r\n    \t}\r\n    \treturn TrefId;\r\n    }\r\n    \r\n    function setDownlineLimit5(uint TrefId,uint8 level) internal pure returns(uint){\r\n    \tuint8 ded = 1;\r\n\t\tuint8 add = 2;\r\n    \tfor (uint8 i = 1; i < level; i++) {\r\n    \t\tded *= 5;\r\n\t\t\tadd += ded;\r\n\t\t}\r\n\t\tded *= 5;\r\n\t\tTrefId = ((ded * TrefId) - ded) + add;\r\n    \treturn TrefId;\r\n    }\r\n    \r\n    function updateD5Referrer(address userAddress, uint8 level) private {\r\n        uint newid = uint(L5Matrix[level].length);\r\n        newid = newid + 1;\r\n        users[userAddress].D5Matrix[level].D5No.push(newid);\r\n        L5Matrix[level].push(users[userAddress].id);\r\n        (uint benid, bool reentry) = d5martixstructure(newid);\r\n        emit NewD5Matrix(newid,benid,reentry);\r\n        if(reentry){\r\n            emit Reentry(newid,benid);\r\n            updateD5Referrer(idToAddress[L5Matrix[level][benid]],level);\r\n         }else{\r\n            emit payout(benid,idToAddress[L5Matrix[level][benid]],D5LevelPrice[level-1],level + 2);\r\n            return sendETHD5(idToAddress[L5Matrix[level][benid]],D5LevelPrice[level-1]);\r\n           // emit payout(benid,idToAddress[L5Matrix[level][benid]],D5LevelPrice[level]);\r\n        }\r\n        \r\n    }\r\n    \r\n    function updateD3Referrer(address userAddress, address referrerAddress,uint8 level) private {\r\n       // emit Testor(users[referrerAddress].D3Matrix[level].referrals.length);\r\n        users[referrerAddress].D3Matrix[level].referrals.push(userAddress);\r\n       //  emit Testor(users[referrerAddress].D3Matrix[level].referrals.length);\r\n       // uint256 referrals = users[referrerAddress].D3Matrix[level].referrals.length;\r\n        uint reentry = users[referrerAddress].D3Matrix[level].reinvestCount;\r\n       //uint reentry =0;\r\n      \r\n       \r\n        if (users[referrerAddress].D3Matrix[level].referrals.length < 3) {\r\n        \t\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level,users[referrerAddress].D3Matrix[level].referrals.length);\r\n           \r\n            uint8 autolevel  = 1;\r\n            uint8 flag  = 0;\r\n            uint numcount;\r\n            if(level == 2){\r\n            \tif((reentry == 0) && (users[referrerAddress].D3Matrix[level].referrals.length == 1)){\r\n            \t\tflag  = 1;\r\n            \t\tnumcount = 1;\r\n            \t}\r\n        \t}else if(level > 3){\r\n        \t    if(level > 7){\r\n        \t        autolevel = 2;\r\n        \t    }\r\n        \t   if((level == 6) && (reentry == 0) && (users[referrerAddress].D3Matrix[level].referrals.length == 1)){\r\n        \t        flag  = 1;\r\n            \t    numcount = 1;\r\n            \t    autolevel = 2;\r\n        \t   }\r\n        \t   if((level == 8) && (reentry == 0) && (users[referrerAddress].D3Matrix[level].referrals.length == 1)){\r\n        \t        flag  = 1;\r\n            \t    numcount = 1;\r\n            \t    autolevel = 3;\r\n        \t   }\r\n            \tif(reentry >= 1){\r\n            \t\tflag  = 1;\r\n            \t\tnumcount = D3ReEntry[level-1];\r\n            \t}\r\n            \r\n            }\r\n        \t\r\n            if(flag == 1){\r\n        \t\tuint dividend = uint(levelPrice[level] - (D5LevelPrice[autolevel-1] * numcount));\r\n        \t\tfor (uint8 i = 1; i <= numcount; i++) {\r\n        \t\t\tupdateD5Referrer(referrerAddress,autolevel);\r\n        \t\t}\r\n        \t\temit payout(2,referrerAddress,dividend,1);\r\n        \t\treturn sendETHDividendsRemain(referrerAddress, userAddress, 1, level,dividend);\r\n        \t//emit payout(users[referrerAddress].D3Matrix[level].referrals.length,referrerAddress,dividend);\r\n        \t}else{\r\n        \t    emit payout(1,referrerAddress,levelPrice[level],1);\r\n            \treturn sendETHDividends(referrerAddress, userAddress, 1, level);\r\n            //\temit payout(users[referrerAddress].D3Matrix[level].referrals.length,referrerAddress,levelPrice[level]);\r\n            }\r\n        \r\n            //return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n            \r\n        }\r\n        \r\n         //close matrix\r\n        users[referrerAddress].D3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeD3Levels[level+1] && level != LAST_LEVEL) {\r\n            if(reentry >= 1){\r\n        \t\tusers[referrerAddress].D3Matrix[level].blocked = true;\r\n        \t//\temit payout(1,referrerAddress,levelPrice[level]);\r\n        \temit payoutblock(referrerAddress,reentry);\r\n        \t}\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeD3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].D3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].D3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].D3Matrix[level].reinvestCount++;\r\n           // emit NewUserPlace(userAddress, referrerAddress, 1, level,3);\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            \r\n           \r\n            updateD3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n     \t\tusers[owner].D3Matrix[level].reinvestCount++;\r\n     \t//\temit NewUserPlace(userAddress,owner, 1, level,3);\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n    \r\n    function updateD4Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeD4Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].D4Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].D4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].D4Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].D4Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].D4Matrix[level].currentReferrer;            \r\n            users[ref].D4Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].D4Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].D4Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].D4Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].D4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].D4Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].D4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].D4Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].D4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateD4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].D4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].D4Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].D4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].D4Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].D4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].D4Matrix[level].closedPart)) {\r\n\r\n                updateD4(userAddress, referrerAddress, level, true);\r\n                return updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].D4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].D4Matrix[level].closedPart) {\r\n                updateD4(userAddress, referrerAddress, level, true);\r\n                return updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateD4(userAddress, referrerAddress, level, false);\r\n                return updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].D4Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateD4(userAddress, referrerAddress, level, false);\r\n            return updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].D4Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateD4(userAddress, referrerAddress, level, true);\r\n            return updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[0]].D4Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[1]].D4Matrix[level].firstLevelReferrals.length) {\r\n            updateD4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateD4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateD4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateD4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[0]].D4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].D4Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[0]].D4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[0]].D4Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].D4Matrix[level].currentReferrer = users[referrerAddress].D4Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[1]].D4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].D4Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[1]].D4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].D4Matrix[level].firstLevelReferrals[1]].D4Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].D4Matrix[level].currentReferrer = users[referrerAddress].D4Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateD4ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        \r\n        if (users[referrerAddress].D4Matrix[level].secondLevelReferrals.length < 4) {\r\n          //  uint8 jlevel = level;\r\n        \t\r\n        \tif(level > 3){\r\n        \t    uint numcount = D4ReEntry[level-1];\r\n        \t    \r\n            \tuint8 autolevel  = 1;\r\n            \tif(level > 7){\r\n            \t    autolevel  = 2;\r\n            \t}\r\n            \tuint dividend = uint(levelPrice[level] - (D5LevelPrice[autolevel - 1] * numcount));\r\n            \t\r\n        \t\tfor (uint8 i = 1; i <= numcount; i++) {\r\n        \t\t    updateD5Referrer(referrerAddress,autolevel);\r\n        \t\t}\r\n        \t    emit payout(2,referrerAddress,dividend,2);\r\n        \t\treturn sendETHDividendsRemain(referrerAddress, userAddress, 2, level,dividend);\r\n        \t}else{\r\n        \t    emit payout(1,referrerAddress,levelPrice[level],2);\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n          }\r\n        \r\n        address[] memory D4data = users[users[referrerAddress].D4Matrix[level].currentReferrer].D4Matrix[level].firstLevelReferrals;\r\n        \r\n        if (D4data.length == 2) {\r\n            if (D4data[0] == referrerAddress ||\r\n                D4data[1] == referrerAddress) {\r\n                users[users[referrerAddress].D4Matrix[level].currentReferrer].D4Matrix[level].closedPart = referrerAddress;\r\n            } else if (D4data.length == 1) {\r\n                if (D4data[0] == referrerAddress) {\r\n                    users[users[referrerAddress].D4Matrix[level].currentReferrer].D4Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].D4Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].D4Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].D4Matrix[level].closedPart = address(0);\r\n        \r\n        if (!users[referrerAddress].activeD4Levels[level+1] && level != LAST_LEVEL) {\r\n            if(users[referrerAddress].D4Matrix[level].reinvestCount >= 1){\r\n        \t\tusers[referrerAddress].D4Matrix[level].blocked = true;\r\n        \t    emit payoutblock(referrerAddress,users[referrerAddress].D4Matrix[level].reinvestCount);\r\n        \t}\r\n        }\r\n\r\n        users[referrerAddress].D4Matrix[level].reinvestCount++;\r\n        \r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeD4Referrer(referrerAddress, level);\r\n           // emit NewUserPlace(userAddress, referrerAddress, 2, level,6);\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateD4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n          //  emit NewUserPlace(userAddress,owner, 2, level,6);\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeD3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeD3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeD4Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeD4Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveD3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeD3Levels[level];\r\n    }\r\n\r\n    function usersActiveD4Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeD4Levels[level];\r\n    }\r\n\r\n    function usersD3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].D3Matrix[level].currentReferrer,\r\n                users[userAddress].D3Matrix[level].referrals,\r\n                users[userAddress].D3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersD4Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\r\n        return (users[userAddress].D4Matrix[level].currentReferrer,\r\n                users[userAddress].D4Matrix[level].firstLevelReferrals,\r\n                users[userAddress].D4Matrix[level].secondLevelReferrals,\r\n                users[userAddress].D4Matrix[level].blocked,\r\n                users[userAddress].D4Matrix[level].closedPart);\r\n    }\r\n    \r\n    function usersD5Matrix(address userAddress, uint8 level) public view returns(uint, uint[] memory) {\r\n        return (L5Matrix[level].length,users[userAddress].D5Matrix[level].D5No);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].D3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].D3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].D4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].D4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n    function sendETHDividendsRemain(address userAddress, address _from, uint8 matrix, uint8 level,uint dividend) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(dividend)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n    function sendETHD5(address receiver,uint dividend) private {\r\n        \r\n        if (!address(uint160(receiver)).send(dividend)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"botid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numcount\",\"type\":\"uint256\"}],\"name\":\"D5NewId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"reentry\",\"type\":\"bool\"}],\"name\":\"NewD5Matrix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benid\",\"type\":\"uint256\"}],\"name\":\"Reentry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"Testor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"benid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"}],\"name\":\"payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reentry\",\"type\":\"uint256\"}],\"name\":\"payoutblock\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeD3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeD4Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveD3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveD4Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersD3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersD4Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersD5Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DoradoWorld","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eacb75de567a7be6a05170e8040b7396061e5079","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://506d037a704d25c3941594bfca7c14db4104f8051618b53ff753ff160e35294c"}]}