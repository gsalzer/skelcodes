{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n    Just the interface so solidity can compile properly\r\n    We could skip this if we use generic call creation or abi.encodeWithSelector\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/*\r\n    Generic Receiver Contract\r\n*/\r\ncontract Receiver {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        /* \r\n            Deployer's address ( Factory in our case )\r\n            do not pass this as a constructor argument because \r\n            etherscan will have issues displaying our validated source code\r\n        */\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n        @notice Send funds owned by this contract to another address\r\n        @param tracker  - ERC20 token tracker ( DAI / MKR / etc. )\r\n        @param amount   - Amount of tokens to send\r\n        @param receiver - Address we're sending these tokens to\r\n        @return true if transfer succeeded, false otherwise \r\n    */\r\n    function sendFundsTo( address tracker, uint256 amount, address receiver) public returns ( bool ) {\r\n        // callable only by the owner, not using modifiers to improve readability\r\n        require(msg.sender == owner);\r\n\r\n        // Transfer tokens from this address to the receiver\r\n        return ERC20(tracker).transfer(receiver, amount);\r\n    }\r\n\r\n    // depending on your system,  you probably want to suicide this at some\r\n    // point in the future, or reuse it for other clients\r\n}\r\n\r\n/*\r\n    Factory Contract\r\n*/\r\n\r\ncontract Factory {\r\n\r\n    address public owner;\r\n    mapping ( uint256 => address ) public receiversMap;\r\n    uint256 receiverCount = 0;\r\n\r\n    constructor() public {\r\n        /* \r\n            Deployer's address ( Factory in our case )\r\n            do not pass this as a constructor argument because \r\n            etherscan will have issues displaying our validated source code\r\n        */\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n        @notice Create a number of receiver contracts\r\n        @param number  - 0-255 \r\n    */\r\n    function createReceivers( uint8 number ) public {\r\n        require(msg.sender == owner);\r\n\r\n        for(uint8 i = 0; i < number; i++) {\r\n            // Create and index our new receiver\r\n            receiversMap[++receiverCount] = new Receiver();\r\n        }\r\n        // add event here if you need it\r\n    }\r\n\r\n    /*\r\n        @notice Send funds in a receiver to another address\r\n        @param ID       - Receiver indexed ID\r\n        @param tracker  - ERC20 token tracker ( DAI / MKR / etc. )\r\n        @param amount   - Amount of tokens to send\r\n        @param receiver - Address we're sending tokens to\r\n        @return true if transfer succeeded, false otherwise \r\n    */\r\n    function sendFundsFromReceiverTo( uint256 ID, address tracker, uint256 amount, address receiver ) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        return Receiver( receiversMap[ID] ).sendFundsTo( tracker, amount, receiver);\r\n    }\r\n\r\n    /*\r\n        Batch Collection - Should support a few hundred transansfers\r\n\r\n        @param tracker           - ERC20 token tracker ( DAI / MKR / etc. )\r\n        @param receiver          - Address we're sending tokens to\r\n        @param contractAddresses - we send an array of addresses instead of ids, so we don't need to read them ( lower gas cost )\r\n        @param amounts           - array of amounts \r\n\r\n    */\r\n    function batchCollect( address tracker, address receiver, address[] contractAddresses, uint256[] amounts ) public {\r\n        require(msg.sender == owner);\r\n\r\n        for(uint256 i = 0; i < contractAddresses.length; i++) {\r\n\r\n            // add exception handling\r\n            Receiver( contractAddresses[i] ).sendFundsTo( tracker, amounts[i], receiver);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tracker\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchCollect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"},{\"name\":\"tracker\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendFundsFromReceiverTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"createReceivers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiversMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Factory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9a7dcef7f3043f13d5e10c16bd1a7a359706dc52a3d1e560f2a0536b32882a0d"}]}