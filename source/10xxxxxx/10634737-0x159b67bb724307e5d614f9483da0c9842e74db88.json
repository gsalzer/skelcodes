{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-09\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract AopxCoin {\r\n\r\n    using SafeMath for uint256;\r\n\tuint256 constant private INITIAL_SUPPLY = 100000000e18;\r\n\tuint256 constant private TX_FEE = 8; // 8% per tx\r\n\tuint256 constant private POOL_FEE = 65; //8% per tx, 80% to pool\r\n    uint256 constant private BURN_FEE = 25; //8% per tx, 10% to burn\r\n\tuint256 constant private DEV_FEE = 10;  // 8% per tx, 10% to dev\r\n\tuint256 constant private SAHRE_COLLECT = 50;  // 50% every collect\r\n\tuint256 constant private MIN_STAKE_AMOUNT = 10000e18; // 10,000 Tokens Needed\r\n   \r\n   \r\n\tstring constant public name = \"AopxCoin\";\r\n\tstring constant public symbol = \"Aopx\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n    \r\n\tstruct Product {\r\n\t\tuint256 staked;\r\n\t\tuint256 unstakeTime;\r\n\t\tuint256 dividends;\r\n\t\tuint256 dividendsGiveOut;\r\n\t}\r\n\t\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tuint256 dividends;\r\n\t\tuint256 collectTime;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tmapping(uint256=>Product) pools;\r\n\t}\r\n\t\r\n\tstruct PoolInfo{\r\n\t    uint256 totalStaked;\r\n\t    uint256 dividends;\r\n\t    uint256 dividendsGiveOut;\r\n\t}\r\n\t\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t    mapping(uint256=>PoolInfo)  pools;//[7,15,30]\r\n\t\taddress dev;\r\n\t\taddress eater;\r\n\t\taddress owner;\r\n\t\taddress manager;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\t\r\n\tevent Stake(address indexed owner, uint256 tokens,uint256 day);\r\n\tevent Unstake(address indexed owner, uint256 tokens,uint256 day);\r\n\tevent Collect(address indexed owner, uint256 tokens);\r\n\tevent Tax(uint256 tokens);\r\n\t\r\n\r\n\tconstructor() public {\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t    info.owner=msg.sender;\r\n\t    info.eater=address(0x0);\r\n\t\tinfo.dev = address(0x3450E1D5727AA85fe63283ddFE5f2B552ce9F1B1);\r\n\t\tinfo.manager =address(0x584f298694EeB2a786d22658e85c87A01700b8F0);\r\n\t\taddress p1=address(0xEe0d33c6cDb332b3472c59D04A48e48b354e07E5);\r\n\t\taddress p2=address(0x6b722E08FbFCC60e5c499aaCFe06Ceaf92303729);\r\n\t\tinfo.users[p1].balance = 80000000e18;\r\n\t\tinfo.users[p2].balance = 20000000e18;\r\n\t\temit Transfer(address(0x0), p1, 80000000e18);\r\n\t\temit Transfer(address(0x0), p2, 20000000e18);\r\n\t}\r\n\r\n\tfunction stake(uint256 _tokens,uint256 day) external {\r\n\t\t_stake(_tokens,day);\r\n\t}\r\n\tfunction unstake(uint256 _tokens,uint256 day) external {\r\n\t\t_unstake(_tokens,day);\r\n\t}\r\n\r\n\tfunction collect() external returns (uint256) {\r\n\t    \r\n\t    require(info.users[msg.sender].collectTime < now,\"time..\");\r\n       \r\n        \r\n\t\tuint256 _dividends7\t=dividendsOf(msg.sender,7);\r\n\t\tuint256 _dividends15 =dividendsOf(msg.sender,15);\r\n\t\tuint256 _dividends30 =dividendsOf(msg.sender,30);\r\n\t\t\r\n\t\trequire( (info.users[msg.sender].dividends >0 || _dividends7 > 0 || _dividends15 > 0||_dividends30 > 0),\"no dividends\");\r\n\t\tinfo.users[msg.sender].collectTime = now + 86400;\r\n\t\tinfo.pools[7].dividendsGiveOut =info.pools[7].dividendsGiveOut.add(_dividends7);\r\n\t\tinfo.pools[15].dividendsGiveOut =info.pools[15].dividendsGiveOut.add(_dividends15);\r\n\t\tinfo.pools[30].dividendsGiveOut =info.pools[30].dividendsGiveOut.add(_dividends30);\r\n\t\t\r\n\t\tuint256 _dividends=_dividends7.add(_dividends15).add(_dividends30).add(info.users[msg.sender].dividends);\r\n\t\t\r\n\t\tinfo.users[msg.sender].dividends = _dividends.mul(SAHRE_COLLECT).div(100);\r\n\t\tinfo.users[msg.sender].balance  = \tinfo.users[msg.sender].balance.add(_dividends.mul(SAHRE_COLLECT).div(100));\r\n\t\t\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\temit Collect(msg.sender, _dividends);\r\n\t\t\r\n\t\treturn _dividends;\r\n\t}\r\n\t\r\n\tfunction dividendsOf(address _user,uint256 day) public view returns (uint256) {\r\n\r\n\t\tif(info.pools[day].totalStaked > 0 && info.users[msg.sender].collectTime <= now ){\r\n\t\t  return  (info.users[_user].pools[day].staked.mul(info.pools[day].dividends).div(info.pools[day].totalStaked));\r\n\t\t}else{\r\n\t\t    return 0;\r\n\t\t}\r\n\t   \r\n\t}\r\n\tfunction clear() external {\r\n\t    require(msg.sender == info.manager, \"Caller is not owner\");\r\n\t    if(info.pools[7].dividends<= info.pools[7].dividendsGiveOut){\r\n\t        \tinfo.pools[7].dividends=0;\r\n\t    }else{\r\n\t        \tinfo.pools[7].dividends = info.pools[7].dividends.sub(info.pools[7].dividendsGiveOut);\r\n\t    }\r\n\t\r\n\t    if(info.pools[15].dividends<= info.pools[15].dividendsGiveOut){\r\n\t        \tinfo.pools[15].dividends=0;\r\n\t    }else{\r\n\t        \tinfo.pools[15].dividends = info.pools[15].dividends.sub(info.pools[15].dividendsGiveOut);\r\n\t    }\r\n\t    \r\n\t     if(info.pools[30].dividends<= info.pools[30].dividendsGiveOut){\r\n\t        \tinfo.pools[30].dividends=0;\r\n\t    }else{\r\n\t        \tinfo.pools[30].dividends = info.pools[30].dividends.sub(info.pools[30].dividendsGiveOut);\r\n\t    }\r\n\t\t\r\n\t\tinfo.pools[7].dividendsGiveOut=0;\r\n\t\tinfo.pools[15].dividendsGiveOut=0;\r\n\t\tinfo.pools[30].dividendsGiveOut=0;\r\n\t}\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance - info.users[_user].pools[7].staked-info.users[_user].pools[15].staked-info.users[_user].pools[30].staked;\r\n\t}\r\n\r\n\tfunction allInfo(address user) public view returns( uint256 totalBurn, uint256 totalStaked7,uint256 totalStaked15,uint256 totalStaked30,uint256 dividends7,uint256 dividends15,uint256 dividends30, uint256 staked7,uint256 staked15,uint256 staked30, uint256 userDividends,uint256 userBalance,uint256 collectTime){\r\n\t      address _user=user;\r\n\t      return ( info.users[info.eater].balance,info.pools[7].totalStaked,info.pools[15].totalStaked,info.pools[30].totalStaked,info.pools[7].dividends,info.pools[15].dividends,info.pools[30].dividends,info.users[_user].pools[7].staked,info.users[_user].pools[15].staked,info.users[_user].pools[30].staked,info.users[_user].dividends,balanceOf(_user),info.users[_user].collectTime);\r\n\t}\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t\r\n\t\tinfo.users[_from].balance = info.users[_from].balance.sub(_tokens);\r\n\t\t\r\n\t\tuint256 _taxAmount = _tokens.mul(TX_FEE).div(100);\r\n\t\tuint256 _poolAmount = _taxAmount.mul(POOL_FEE).div(100);\r\n\t\tuint256 _burnAmount = _taxAmount.mul(BURN_FEE).div(100);\r\n\t\tuint256 _devAmount = _taxAmount.mul(DEV_FEE).div(100);\r\n\t\tuint256 _realAmount = _tokens.sub(_taxAmount);\r\n\r\n        \r\n        info.users[_to].balance =info.users[_to].balance.add(_realAmount);\r\n        info.users[info.dev].balance =info.users[info.dev].balance.add(_devAmount);\r\n        info.users[info.eater].balance=info.users[info.eater].balance.add(_burnAmount);\r\n        \r\n        info.pools[7].dividends = info.pools[7].dividends.add(_poolAmount.mul(20).div(100));\r\n        info.pools[15].dividends =  info.pools[15].dividends.add(_poolAmount.mul(30).div(100));\r\n        info.pools[30].dividends=info.pools[30].dividends.add(_poolAmount.mul(50).div(100));\r\n        \r\n        emit Transfer(_from, info.dev, _devAmount);\r\n        emit Transfer(_from, info.eater, _burnAmount);\r\n        emit Transfer(_from, _to, _realAmount);\r\n        \r\n        emit Tax(_taxAmount);\r\n        \r\n        return _realAmount;\r\n    }\r\n    function _stake(uint256 _amount,uint256 day) internal {\r\n      \r\n        require(day==7||day==15||day==30,\"product daytype not support\");\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\trequire(info.users[msg.sender].pools[day].staked.add(_amount) >= MIN_STAKE_AMOUNT);\r\n\t\t\r\n\r\n\t\tinfo.users[msg.sender].pools[day].unstakeTime = now + day*86400;\r\n\t\tinfo.pools[day].totalStaked =info.pools[day].totalStaked.add(_amount);\r\n\t\tinfo.users[msg.sender].pools[day].staked = info.users[msg.sender].pools[day].staked.add(_amount);\r\n\r\n\t\temit Transfer(msg.sender, address(this), _amount);\r\n\t\temit Stake(msg.sender, _amount,day);\r\n\t}\r\n\tfunction _unstake(uint256 _amount,uint256 day) internal {\r\n\t   \trequire(day==7||day==15||day==30,\"product daytype not support\");\r\n\t    require(info.users[msg.sender].pools[day].unstakeTime < now,\"unstakeTime not arrive\");\r\n\t\trequire(info.users[msg.sender].pools[day].staked >= _amount);\r\n\t\t\r\n\t\tinfo.pools[day].totalStaked =info.pools[day].totalStaked.sub(_amount);\r\n\t\tinfo.users[msg.sender].pools[day].staked =\tinfo.users[msg.sender].pools[day].staked.sub(_amount);\r\n\t\t\r\n\t\temit Unstake(msg.sender, _amount,day);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked15\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked30\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends15\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends30\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked15\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked30\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AopxCoin","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc1a49b187f8e9af3aa74465e4d3b9c413b3e5b96206a8f854316230e2d8024d"}]}