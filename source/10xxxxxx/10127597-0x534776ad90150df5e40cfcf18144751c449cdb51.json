{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title PToken Interface\r\n */\r\ninterface IPToken {\r\n    /* solhint-disable func-order */\r\n    //Standart ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    //Mintable & Burnable\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    //Distributions\r\n    function distribute(uint256 amount) external;\r\n    function claimDistributions(address account) external returns(uint256);\r\n    function claimDistributions(address account, uint256 lastDistribution) external returns(uint256);\r\n    function claimDistributions(address[] calldata accounts) external;\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external;\r\n    function fullBalanceOf(address account) external view returns(uint256);\r\n    function calculateDistributedAmount(uint256 startDistribution, uint256 nextDistribution, uint256 initialBalance) external view returns(uint256);\r\n    function nextDistribution() external view returns(uint256);\r\n    function distributionTotalSupply() external view returns(uint256);\r\n    function distributionBalanceOf(address account) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_PTOKEN            = \"ptoken\";\r\n    string internal constant MODULE_DEFI              = \"defi\";\r\n    string internal constant MODULE_CURVE             = \"curve\";\r\n    string internal constant MODULE_FUNDS             = \"funds\";\r\n    string internal constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string internal constant MODULE_LOAN              = \"loan\";\r\n    string internal constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string internal constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n    string internal constant MODULE_FLASHLOANS        = \"flashloans\";\r\n    string internal constant MODULE_ARBITRAGE         = \"arbitrage\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant MODULE_LTOKEN            = \"ltoken\";\r\n    string internal constant MODULE_CDAI              = \"cdai\";\r\n    string internal constant MODULE_RAY               = \"ray\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        if (moduleAddress == ZERO_ADDRESS) {\r\n            string memory error = string(abi.encodePacked(\"Module: requested module not found: \", module));\r\n            revert(error);\r\n        }\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @notice Interface for contracts receiving flash loans. \r\n * Compatible with Aave flash loans, see \r\n * https://github.com/aave/aave-protocol/blob/master/contracts/flashloan/interfaces/IFlashLoanReceiver.sol\r\n */\r\ninterface IFlashLoanReceiver {\r\n    /**\r\n     * @notice Execute flash-loan\r\n     * @param token Address of loaned token\r\n     * @param amount Amount loaned\r\n     * @param fee Fee has to be returned alongside with amount\r\n     * @param data Any parameters your contract may need, use ABI-encoded form to pass multiple parameteres\r\n     *\r\n     * @dev When Pool calls executeOperation(), it already transfered tokens to receiver contract.\r\n     * It's receiver responcibility to transfer back (to msg.sender) amount+fee tokens.\r\n     */\r\n    function executeOperation(address token, uint256 amount, uint256 fee, bytes calldata data) external;\r\n}\r\n\r\ncontract ArbitrageExecutor is Context, IFlashLoanReceiver {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    event OperationExecuted(uint256 amount, uint256 fee, uint256 profit);\r\n\r\n    address beneficiary;\r\n\r\n    modifier onlyBeneficiary() {\r\n        require(_msgSender() == beneficiary, \"ArbitrageExecutor: only allowed from beneficiary\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _beneficiary) public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function approve(address[] calldata tokens, address[] calldata exchanges) external onlyBeneficiary {\r\n        for (uint256 i=0; i < tokens.length; i++){\r\n            IERC20 token = IERC20(tokens[i]);\r\n            for (uint256 j=0; j < exchanges.length; j++) {\r\n                token.approve(exchanges[j], MAX_UINT256);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawLeftovers(address[] calldata tokens) external onlyBeneficiary {\r\n        for (uint256 i=0; i < tokens.length; i++){\r\n            IERC20 token = IERC20(tokens[i]);\r\n            uint256 balance = token.balanceOf(address(this));\r\n            if (balance > 0){\r\n                token.transfer(beneficiary, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function executeOperation(address token, uint256 amount, uint256 fee, bytes calldata data) external {\r\n        // Check initial conditions\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(balance == amount, \"ArbitrageFlashLoanReceiver: inital amount does not match\");\r\n\r\n        // Execute operation\r\n        (address contract1, bytes memory message1, address contract2, bytes memory message2) = abi.decode(data, (address, bytes, address, bytes));\r\n        executeExchange(contract1, message1, contract2, message2);\r\n\r\n        // Check result and repay + send profit\r\n        balance = IERC20(token).balanceOf(address(this));\r\n        uint256 repay = amount.add(fee);\r\n        require(balance >= repay, \"ArbitrageFlashLoanReceiver: not enough funds to return loan\");\r\n        IERC20(token).transfer(msg.sender, repay);\r\n        uint256 profit = balance - repay;\r\n        if (profit > 0) {\r\n            IERC20(token).transfer(beneficiary, profit);\r\n        }\r\n        emit OperationExecuted(amount, fee, profit);\r\n    }\r\n\r\n    function executeExchange(address contract1, bytes memory message1, address contract2, bytes memory message2) internal {\r\n        bool callSuccess;\r\n        bytes memory result;\r\n\r\n        (callSuccess, result) = contract1.call(message1);\r\n        if (!callSuccess) assembly { revert(add(result, 32), result) }\r\n\r\n        (callSuccess, result) = contract2.call(message2);\r\n        if (!callSuccess) assembly { revert(add(result, 32), result) }\r\n    }\r\n}\r\n\r\ncontract ArbitrageModule is Module {\r\n    using SafeMath for uint256;\r\n\r\n    event ExecutorCreated(address beneficiary, address executor);\r\n\r\n    mapping(address => ArbitrageExecutor) public executors;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n    }\r\n\r\n    function createExecutor() public returns(address) {\r\n        address beneficiary = _msgSender();\r\n        //require(!hasExecutor(beneficiary), \"ArbitrageModule: executor already created\"); // Allow to re-create executor after ArbitrageModule upgrade\r\n\r\n        // Check beneficiary is allowed to have executor\r\n        uint256 pBalance = pToken().distributionBalanceOf(beneficiary);\r\n        require(pBalance > 0, \"ArbitrageModule: beneficiary required to own PTK\");\r\n\r\n        // Create executor\r\n        ArbitrageExecutor executor = new ArbitrageExecutor(beneficiary);\r\n        executors[beneficiary] = executor;\r\n        emit ExecutorCreated(beneficiary, address(executor));\r\n        return address(executor);        \r\n    }\r\n\r\n    function hasExecutor(address beneficiary) public view returns(bool) {\r\n        return address(executors[beneficiary]) != ZERO_ADDRESS;\r\n    }\r\n\r\n    function pToken() private view returns(IPToken){\r\n        return IPToken(getModuleAddress(MODULE_PTOKEN));\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"createExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"contract ArbitrageExecutor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"hasExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArbitrageModule","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c824e47e7bf28e573ed2b7bfebd3b29b34598498206a4ac6236b474fbd00a250"}]}