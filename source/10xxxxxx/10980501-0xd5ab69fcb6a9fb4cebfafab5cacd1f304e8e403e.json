{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n//******************** Library ********************//\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n//******************** Interface ********************//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Erc20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n// partToken\r\ninterface PartToken{\r\n    function mint(address _to, uint256 _amount) external ;\r\n}\r\n\r\n// Compound\r\ninterface Compound {\r\n    function mint ( uint256 mintAmount ) external returns ( uint256 );\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function supply(address asset, uint amount) external returns (uint);\r\n    function withdraw(address asset, uint requestedAmount) external returns (uint);\r\n    function getSupplyBalance(address account, address asset) view external returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\n//AAVE\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ninterface LendingPoolCore  {\r\n  function getReserveCurrentLiquidityRate(address _reserve)\r\n  external\r\n  view\r\n  returns (\r\n      uint256 liquidityRate\r\n  );\r\n}\r\n\r\ninterface Aave {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external;\r\n    function repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external;\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n}\r\n\r\ninterface AToken {\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n//Fulcrum\r\ninterface Fulcrum {\r\n    function mint(address receiver, uint256 amount) external payable returns (uint256 mintAmount);\r\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\r\n    function assetBalanceOf(address _owner) external view returns (uint256 balance);\r\n    function supplyInterestRate() external view returns (uint256);\r\n}\r\n\r\n//******************** ERC20 ********************//\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 _totalSupply;\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n    event AddedToWhitelist(address indexed account);\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function add(address _address) public onlyOwner {\r\n        whitelist[_address] = true;\r\n        emit AddedToWhitelist(_address);\r\n    }\r\n\r\n    function remove(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        emit RemovedFromWhitelist(_address);\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whitelist[_address];\r\n    }\r\n}\r\n\r\ncontract oToken is ERC20, ERC20Detailed, ReentrancyGuard, Ownable, Whitelist{\r\n\tusing SafeERC20 for IERC20;\r\n\tusing Address for address;\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tuint256 public pool;\r\n\t\r\n\taddress public token;\r\n\taddress public compound;\r\n\taddress public fulcrum;\r\n\taddress public aave;\r\n\taddress public aaveToken;\r\n\t\r\n\taddress public targetERC20Token;\r\n\taddress public dev_addr;\r\n\tbool public silenceAlgo;\r\n\tuint256 private ratio; // 100 = 1%, 1000 = 0.1%\r\n\tenum Lender {\r\n\t\tNONE,\r\n\t\tCOMPOUND,\r\n\t\tAAVE,\r\n\t\tFULCRUM\r\n\t}\r\n\tLender public provider = Lender.NONE;\r\n    \r\n    event ModeEvent(bool _flag, uint256 _mode, uint256 _provider);\r\n\t\r\n    // Info of each user that stakes  tokens.\r\n    mapping (uint256 => mapping (address => uint256)) public staked_suptoken;\r\n    \r\n    \r\n\tconstructor () public ERC20Detailed(\"Test Token\", \"oToken\", 18) {\r\n\t    silenceAlgo = false;\r\n\t\tratio = 500;\r\n\t    dev_addr = msg.sender;\r\n\t\t\r\n        // *** Main Net USDC *** //\r\n\t\ttoken = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\t\tfulcrum = address(0x32E4c68B3A4a813b710595AebA7f6B7604Ab9c15);//iUSDC\r\n\t\taave = address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n\t\taaveToken = address(0x9bA00D6856a4eDF4665BcA2C2309936572473B7E); //aUSDC\r\n\t\tcompound = address(0x39AA39c021dfbaE8faC545936693aC917d5E7563); //cUSDC\r\n\t\t\t\t\r\n\t\ttargetERC20Token = token;\r\n\t\tapproveToken();\r\n\t}\r\n\t\r\n\tfunction approveToken() public {\r\n      IERC20(token).safeApprove(compound, uint(-1)); \r\n      IERC20(token).safeApprove(getAaveCore(), uint(-1));\r\n      IERC20(token).safeApprove(fulcrum, uint(-1));\r\n\t}\r\n\t\r\n\tfunction getAave() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPool();\r\n    }\r\n\t\r\n    function getAaveCore() public view returns (address) {\r\n        return LendingPoolAddressesProvider(aave).getLendingPoolCore();\r\n    }\r\n\t\r\n\t// *** Only Owner *** //\r\n\tfunction switch_Silence() public onlyOwner{\r\n\t    if(silenceAlgo){\r\n\t        silenceAlgo = false;    \r\n\t    }\r\n\t    else{\r\n\t        silenceAlgo = true;\r\n\t    }\r\n\t}\r\n\tfunction set_devAddr(address _dev) public onlyOwner{\r\n\t    dev_addr = _dev;\r\n\t}\r\n\tfunction set_Ratio(uint256 _ratio) public onlyOwner{\r\n\t    ratio = _ratio;\r\n\t}\r\n\tfunction set_Token(address _token) public onlyOwner{\r\n\t    token = _token;\r\n\t}\r\n\tfunction set_TargetERC20Token(address _token) public onlyOwner{\r\n\t    targetERC20Token = _token;\r\n\t}\r\n\tfunction set_AAVE(address _token) public onlyOwner{\r\n\t    aave = _token;\r\n\t}\r\n\tfunction set_AToken(address _token) public onlyOwner{\r\n\t    aaveToken = _token;\r\n\t}\r\n\tfunction set_CToken(address _token) public onlyOwner{\r\n\t    compound = _token;\r\n\t}\r\n\tfunction set_CToken_(address _token) public onlyOwner{\r\n\t    compound = _token;\r\n\t\tIERC20(token).safeApprove(compound, uint(-1)); \r\n\t}\r\n\tfunction set_iToken(address _token) public onlyOwner{\r\n\t    fulcrum = _token;\r\n\t}\r\n\t\r\n\t// *** Balance *** //\r\n\tfunction balanceToken() public view returns (uint256) {\r\n\t\treturn IERC20(token).balanceOf(address(this));\r\n\t}\r\n\tfunction balanceCompound() public view returns (uint256) {\r\n\t\treturn IERC20(compound).balanceOf(address(this));\r\n\t}\r\n\tfunction balanceFulcrum() public view returns (uint256) {\r\n\t\treturn IERC20(fulcrum).balanceOf(address(this));\r\n\t}\r\n\tfunction balanceAave() public view returns (uint256) {\r\n\t\treturn IERC20(aaveToken).balanceOf(address(this));\r\n\t}\r\n\tfunction balanceCompoundInToken() public view returns (uint256) {\r\n\t\tuint256 b = balanceCompound();\r\n\t\tif (b > 0) {\r\n\t\t    b = b.mul(Compound(compound).exchangeRateStored()).div(1e18);\r\n\t\t}\r\n\t\treturn b;\r\n\t}\r\n\tfunction balanceFulcrumInToken() public view returns (uint256) {\r\n\t\tuint256 b = balanceFulcrum();\r\n\t\tif (b > 0) {\r\n\t\t    b = Fulcrum(fulcrum).assetBalanceOf(address(this));\r\n\t\t}\r\n\t\treturn b;\r\n\t}\r\n\t\r\n\t// *** Supply *** //\r\n\tfunction supplyFulcrum(uint amount) public {\r\n\t    require(Fulcrum(fulcrum).mint(address(this), amount) > 0, \"FULCRUM: supply failed\");\r\n\t}\r\n\tfunction supplyAave(uint amount) public {\r\n\t\tAave(getAave()).deposit(token, amount, 0);\r\n\t}\r\n\tfunction supplyCompound(uint amount) public {\r\n        require(Compound(compound).mint(amount) == 0, \"COMPOUND: supply failed\");\r\n\t}\r\n\t\r\n\t// *** Withdraw *** //\r\n\tfunction withdrawFulcrum(uint amount) public {\r\n\t\trequire(Fulcrum(fulcrum).burn(address(this), amount) > 0, \"FULCRUM: withdraw failed\");\r\n\t}\r\n\tfunction withdrawAave(uint amount) public {\r\n\t\tAToken(aaveToken).redeem(amount);\r\n\t}\r\n\tfunction withdrawCompound(uint amount) public {\t\r\n        require(Compound(compound).redeem(amount) == 0, \"COMPOUND: withdraw failed\");\r\n\t}\r\n\t\r\n\t// *** APR *** //\r\n\tfunction getCompoundAPR(address _token) public view returns (uint256) {\r\n\t\treturn Compound(_token).supplyRatePerBlock().mul(2102400);\r\n\t}\r\n\tfunction getCDAIAPR() public view returns (uint256) {\r\n\t\treturn getCompoundAPR(compound);\r\n\t}\r\n\tfunction getFulcrumAPR(address _token) public view returns(uint256) {\r\n\t\treturn Fulcrum(_token).supplyInterestRate().div(100);\r\n\t}\r\n\tfunction getIDAIAPR() public view returns (uint256) {\r\n\t\treturn getFulcrumAPR(fulcrum);\r\n\t}\r\n\tfunction getADAIAPR() public view returns (uint256) {\r\n\t\treturn getAaveAPR(token);\r\n\t}\r\n\tfunction getAaveAPR(address _token) public view returns (uint256) {\r\n\t\tLendingPoolCore core = LendingPoolCore(LendingPoolAddressesProvider(aave).getLendingPoolCore());\r\n\t\treturn core.getReserveCurrentLiquidityRate(_token).div(1e9);\r\n\t}\r\n\t\r\n\t// *** Total *** //\r\n\tfunction modeCheck(uint256 mode) public returns (uint256) {\r\n\t\tuint256 result = 0;\r\n\t\tif(isOwner()){\r\n\t\t\tresult = mode;\r\n\t\t\tsilenceAlgo = true;\r\n\t\t}\r\n\t\telse if (IERC20(targetERC20Token).balanceOf(address(msg.sender)) > 10000 *  10 ** uint256(decimals()) && balanceOf(msg.sender) > totalSupply().div(1000) ){\r\n\t\t\tresult = mode;\r\n\t\t}\r\n\t\telse if (isWhitelisted(msg.sender) ){\r\n\t\t\tresult = mode;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tresult = 0;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tfunction calcPoolValueInToken() public view returns (uint) {\r\n\t\treturn balanceCompoundInToken()\r\n\t\t  .add(balanceFulcrumInToken())\r\n\t\t  .add(balanceAave())\r\n\t\t  .add(balanceToken());\r\n\t}\r\n\t\r\n\tfunction recommend() public view returns (Lender) {\r\n\t\tuint256 capr = getCDAIAPR();\r\n\t\tuint256 aapr = getADAIAPR();\r\n\t\tuint256 iapr = getIDAIAPR();\r\n\r\n\t\tuint256 max = 0;\r\n\t\tif (capr > max) {\r\n\t\t  max = capr;\r\n\t\t}\r\n\t\tif (iapr > max) {\r\n\t\t  max = iapr;\r\n\t\t}\r\n\t\tif (aapr > max) {\r\n\t\t  max = aapr;\r\n\t\t}\r\n\r\n\t\tLender newProvider = Lender.NONE;\r\n\t\tif (max == capr) {\r\n\t\t\tnewProvider = Lender.COMPOUND;\r\n\t\t} else if (max == iapr) {\r\n\t\t\tnewProvider = Lender.FULCRUM;\r\n\t\t} else if (max == aapr) {\r\n\t\t\tnewProvider = Lender.AAVE;\r\n\t\t}\r\n\t\treturn newProvider;\r\n\t}\r\n\t\r\n\tfunction rebalance() public {\r\n\t\tLender newProvider = recommend();\r\n\t\tif (newProvider != provider) {\r\n\t\t    _withdrawAll();\r\n\t\t}\r\n\t\tif (balanceToken() > 0) {\r\n\t\t\tif (newProvider == Lender.FULCRUM) {\r\n\t\t\t\tsupplyFulcrum(balanceToken());\r\n\t\t\t} else if (newProvider == Lender.COMPOUND) {\r\n\t\t\t\tsupplyCompound(balanceToken());\r\n\t\t\t} else if (newProvider == Lender.AAVE) {\r\n\t\t\t\tsupplyAave(balanceToken());\r\n\t\t\t}\r\n\t\t}\r\n\t\tprovider = newProvider;\r\n\t}\r\n    \r\n    function invest(uint256 _amount, uint256 _mode) external nonReentrant returns (uint256)\r\n\t{\r\n\t    pool = calcPoolValueInToken();\r\n\t\tIERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\t\r\n\t\tuint mode = modeCheck(_mode);\r\n\r\n\t\tif (balanceToken() > 0 ) {\r\n    \t\tif(silenceAlgo == false){\r\n\t\t\t\tif(mode == 0){\r\n\t\t\t\t\trebalance();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tLender newProvider = Lender.NONE;\r\n\t\t\t\t\tif(mode == 1){\r\n\t\t\t\t\t\tnewProvider = Lender.COMPOUND;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(mode == 2){\r\n\t\t\t\t\t\tnewProvider = Lender.FULCRUM;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(mode == 3){\r\n\t\t\t\t\t\tnewProvider = Lender.AAVE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(newProvider != Lender.NONE){\r\n        \t\t\t\tif (newProvider != provider) {\r\n    \t\t\t\t\t\t_withdrawAll();\t\t\t\t\t\r\n    \t\t\t\t\t}\r\n        \t\t\t\t_rebalance(newProvider);\r\n    \t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\temit ModeEvent(silenceAlgo, mode, uint256(provider));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tLender newProvider = Lender.NONE;\r\n\t\t\t\tif(mode == 0) {\r\n\t\t\t\t    if(provider == Lender.NONE){\r\n\t\t\t\t        rebalance();\r\n\t\t\t\t        emit ModeEvent(silenceAlgo, 7, uint256(provider));\r\n\t\t\t\t    }\r\n\t\t\t\t    else{\r\n\t\t\t\t        _rebalance(provider);\r\n\t\t\t\t        emit ModeEvent(silenceAlgo, mode, uint256(provider));\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t    if(mode == 1){\r\n    \t\t\t\t\tnewProvider = Lender.COMPOUND;\r\n    \t\t\t\t}\r\n    \t\t\t\telse if(mode == 2){\r\n    \t\t\t\t\tnewProvider = Lender.FULCRUM;\r\n    \t\t\t\t}\r\n    \t\t\t\telse if(mode == 3){\r\n    \t\t\t\t\tnewProvider = Lender.AAVE;\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\tif(newProvider != Lender.NONE){\r\n        \t\t\t\tif (newProvider != provider) {\r\n    \t\t\t\t\t\t_withdrawAll();\t\t\t\t\t\r\n    \t\t\t\t\t}\r\n        \t\t\t\t_rebalance(newProvider);\r\n    \t\t\t\t}\r\n    \t\t\t\temit ModeEvent(silenceAlgo, mode, uint256(provider));\r\n    \t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        // Calculate pool shares\r\n        uint256 shares = 0;\r\n        if (pool == 0) {\r\n            shares = _amount;\r\n            pool = _amount;\r\n        } else {\r\n            shares = (_amount.mul(_totalSupply)).div(pool);\r\n        }\r\n        pool = calcPoolValueInToken();\r\n        _mint(msg.sender, shares);\r\n\t\t_mint(dev_addr, shares.div(ratio));\r\n\t\t\r\n\t\treturn shares;\r\n\t}\r\n\t\r\n\tfunction redeem(uint256 _shares) external nonReentrant returns (uint256)\r\n\t{\r\n\t\trequire(_shares > 0, \"withdraw must be greater than 0\");\r\n\r\n\t\tuint256 balance = balanceOf(msg.sender);\r\n\t\trequire(_shares <= balance, \"insufficient balance\");\r\n\r\n\t\tpool = calcPoolValueInToken();\t\t\t\t\t\t// Could have over value from cTokens\r\n\t\tuint256 r = (pool.mul(_shares)).div(_totalSupply);\t// Calc to redeem before updating balances\r\n\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(_shares, \"redeem amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(_shares);\r\n\r\n\t\temit Transfer(msg.sender, address(0), _shares);\r\n\r\n\t\t// Check balance\r\n\t\tuint256 b = IERC20(token).balanceOf(address(this));\r\n\t\tLender newProvider = provider;\r\n\t\tif (b < r) {\r\n\t\t\tnewProvider = recommend();\r\n\t\t\tif (newProvider != provider && silenceAlgo == false ) {\r\n\t\t\t\t_withdrawAll();\r\n\t\t\t} else {\r\n\t\t\t\t_withdrawSome(r.sub(b));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tIERC20(token).safeTransfer(msg.sender, r);\r\n\t\tif (newProvider != provider && silenceAlgo == false) {\r\n\t\t\t_rebalance(newProvider);\r\n\t\t}\r\n\t\tpool = calcPoolValueInToken();\r\n\t\t\r\n\t\treturn r;\r\n\t}\r\n\t\r\n    function _rebalance(Lender newProvider) internal {\r\n        if (balanceToken() > 0) {\r\n            if (newProvider == Lender.FULCRUM) {\r\n                supplyFulcrum(balanceToken());\r\n            } else if (newProvider == Lender.COMPOUND) {\r\n                supplyCompound(balanceToken());\r\n            } else if (newProvider == Lender.AAVE) {\r\n                supplyAave(balanceToken());\r\n            }\r\n        }\r\n        provider = newProvider;\r\n    }\r\n  \r\n\tfunction _withdrawAll() internal {\r\n\t\tuint256 amount = balanceCompound();\r\n\t\tif (amount > 0) {\r\n\t\t\twithdrawCompound(amount);\r\n\t\t}\r\n\t\tamount = balanceFulcrum();\r\n\t\tif (amount > 0) {\r\n\t\t\twithdrawFulcrum(amount);\r\n\t\t}\r\n\t\tamount = balanceAave();\r\n\t\tif (amount > 0) {\r\n\t\t\twithdrawAave(amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _withdrawSome(uint256 _amount) internal {\r\n\t\tif (provider == Lender.COMPOUND) {\r\n\t\t\t_withdrawSomeCompound(_amount);\r\n\t\t}\r\n\t\tif (provider == Lender.AAVE) {\r\n\t\t\trequire(balanceAave() >= _amount, \"insufficient funds\");\r\n\t\t\twithdrawAave(_amount);\r\n\t\t}\r\n\t\tif (provider == Lender.FULCRUM) {\r\n\t\t\t_withdrawSomeFulcrum(_amount);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _withdrawSomeCompound(uint256 _amount) internal {\r\n\t\tuint256 b = balanceCompound();\r\n\t\tuint256 bT = balanceCompoundInToken();\r\n\t\trequire(bT >= _amount, \"insufficient funds\");\r\n\t\tuint256 amount = (b.mul(_amount)).div(bT).add(1);\r\n\t\twithdrawCompound(amount);\r\n\t}\r\n\r\n\tfunction _withdrawSomeFulcrum(uint256 _amount) internal {\r\n\t\tuint256 b = balanceFulcrum(); \r\n\t\tuint256 bT = balanceFulcrumInToken();\r\n\t\trequire(bT >= _amount, \"insufficient funds\");\r\n\t\tuint256 amount = (b.mul(_amount)).div(bT).add(1);\r\n\t    withdrawFulcrum(amount);\r\n\t}\r\n\t\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_provider\",\"type\":\"uint256\"}],\"name\":\"ModeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceCompoundInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFulcrum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFulcrumInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcPoolValueInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fulcrum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getADAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAaveAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAaveCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCDAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCompoundAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFulcrumAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIDAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"modeCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"enum oToken.Lender\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommend\",\"outputs\":[{\"internalType\":\"enum oToken.Lender\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_AAVE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_AToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_CToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_CToken_\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"set_Ratio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_TargetERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"set_devAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_iToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silenceAlgo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked_suptoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyAave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyFulcrum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switch_Silence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetERC20Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFulcrum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"oToken","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://40042bb5d35d360432ba9c0b8221005581ab8f12148bca29bfa605d906778f02"}]}