{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: UNLICENSED\"\r\n\r\n\r\npragma solidity 0.6.9;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Audit01 is owned{\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public constant symbol = \"Audit01\";\r\nstring public constant name = \"Audit01 Token\";\r\nuint8 public constant decimals = 16;\r\nuint256 public constant initialSupply = 4000000000 * 10 ** uint256(decimals);\r\nuint256 _totalSupply;\r\n\r\nmapping(address => uint256) balances;\r\n\r\nmapping(address => mapping (address => uint256)) allowed;\r\n\r\nconstructor() public {\r\n   owner = msg.sender;\r\n   _totalSupply = initialSupply;\r\n   balances[owner] = _totalSupply;\r\n}\r\n\r\n\r\nfunction totalSupply() public view returns (uint256) {\r\n   return _totalSupply;\r\n}\r\n\r\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n   return balances[_owner];\r\n}\r\n\r\nfunction transfer(address _to, uint256 _amount) public returns (bool success) {\r\n   if (balances[msg.sender] >= _amount && _amount > 0) {\r\n       balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n       balances[_to] = balances[_to].add(_amount);\r\n       emit Transfer(msg.sender, _to, _amount);\r\n       return true;\r\n   } else {\r\n       return false;\r\n   }\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n   if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0) {\r\n      balances[_from] = balances[_from].sub(_amount);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      emit Transfer(_from, _to, _amount);\r\n      return true;\r\n   }  else {\r\n         return false;\r\n   }\r\n}\r\n\r\nfunction approve(address _spender, uint256 _amount) public returns (bool success) {\r\n   if(balances[msg.sender]>=_amount && _amount>0) {\r\n       allowed[msg.sender][_spender] = _amount;\r\n       emit Approval(msg.sender, _spender, _amount);\r\n       return true;\r\n   } else {\r\n       return false;\r\n   }\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n   return allowed[_owner][_spender];\r\n}\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\nfunction getMyBalance() public view returns (uint) {\r\n  return balances[msg.sender];\r\n}\r\n}\r\n\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n    }\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Audit01","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fda6c6a4be8cd27ab9b2bd3942a0e996288ba4337af9b326add4bae6e958d8d0"}]}