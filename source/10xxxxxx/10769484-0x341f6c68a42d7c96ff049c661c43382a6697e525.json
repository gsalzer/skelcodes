{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/IAgreement.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract IAgreement {\r\n\r\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\r\n    event ActionClosed(uint256 indexed actionId);\r\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\r\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\r\n\r\n    enum ChallengeState {\r\n        Waiting,\r\n        Settled,\r\n        Disputed,\r\n        Rejected,\r\n        Accepted,\r\n        Voided\r\n    }\r\n\r\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\r\n\r\n    function closeAction(uint256 _actionId) external;\r\n\r\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\r\n\r\n    function settleAction(uint256 _actionId) external;\r\n\r\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/standards/ERC165.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC165 {\r\n    // Includes supportsInterface method:\r\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return _interfaceId == ERC165_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/IDisputable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract IDisputable is ERC165 {\r\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\r\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\r\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\r\n\r\n    event AgreementSet(IAgreement indexed agreement);\r\n\r\n    function setAgreement(IAgreement _agreement) external;\r\n\r\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\r\n\r\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\r\n\r\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\r\n\r\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\r\n\r\n    function getAgreement() external view returns (IAgreement);\r\n\r\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\r\n\r\n    function canClose(uint256 _disputableActionId) external view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/IAragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract IAragonApp {\r\n    // Includes appId and kernel methods:\r\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\r\n\r\n    function kernel() public view returns (IKernel);\r\n    function appId() public view returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract AppStorage is IAragonApp {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.totalSupply().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\r\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\r\n\r\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return totalSupply;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath64.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\r\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DisputableAragonApp is IDisputable, AragonApp {\r\n    /* Validation errors */\r\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \"DISPUTABLE_SENDER_NOT_AGREEMENT\";\r\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \"DISPUTABLE_AGREEMENT_STATE_INVAL\";\r\n\r\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\r\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\r\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\"CHALLENGE_ROLE\");\r\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\r\n\r\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\"SET_AGREEMENT_ROLE\");\r\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\r\n\r\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\"aragonOS.appStorage.agreement\");\r\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\r\n\r\n    modifier onlyAgreement() {\r\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Challenge disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be challenged\r\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\r\n    * @param _challenger Address that submitted the challenge\r\n    */\r\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\r\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\r\n    }\r\n\r\n    /**\r\n    * @notice Allow disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be allowed\r\n    */\r\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionAllowed(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Reject disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be rejected\r\n    */\r\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionRejected(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Void disputable action #`_disputableActionId`\r\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\r\n    *      is included. Subclasses should implement the internal implementation of the hook.\r\n    * @param _disputableActionId Identifier of the action to be voided\r\n    */\r\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\r\n        _onDisputableActionVoided(_disputableActionId);\r\n    }\r\n\r\n    /**\r\n    * @notice Set Agreement to `_agreement`\r\n    * @param _agreement Agreement instance to be set\r\n    */\r\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\r\n        IAgreement agreement = _getAgreement();\r\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\r\n\r\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\r\n        emit AgreementSet(_agreement);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement\r\n    * @return Agreement\r\n    */\r\n    function getAgreement() external view returns (IAgreement) {\r\n        return _getAgreement();\r\n    }\r\n\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\r\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\r\n    * @param _disputableActionId Identifier of the action to be challenged\r\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\r\n    * @param _challenger Address that submitted the challenge\r\n    */\r\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\r\n    * @param _disputableActionId Identifier of the action to be rejected\r\n    */\r\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\r\n    * @param _disputableActionId Identifier of the action to be allowed\r\n    */\r\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\r\n    * @param _disputableActionId Identifier of the action to be voided\r\n    */\r\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\r\n\r\n    /**\r\n    * @dev Register a new disputable action in the Agreement\r\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\r\n    * @param _context Link to human-readable context for the given action\r\n    * @param _submitter Address that submitted the action\r\n    * @return Unique identifier for the created action in the context of the Agreement\r\n    */\r\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\r\n        IAgreement agreement = _ensureAgreement();\r\n        return agreement.newAction(_disputableActionId, _context, _submitter);\r\n    }\r\n\r\n    /**\r\n    * @dev Close disputable action in the Agreement\r\n    * @param _actionId Identifier of the action in the context of the Agreement\r\n    */\r\n    function _closeDisputableAction(uint256 _actionId) internal {\r\n        IAgreement agreement = _ensureAgreement();\r\n        agreement.closeAction(_actionId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement\r\n    * @return Agreement\r\n    */\r\n    function _getAgreement() internal view returns (IAgreement) {\r\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the linked Agreement or revert if it has not been set\r\n    * @return Agreement\r\n    */\r\n    function _ensureAgreement() internal view returns (IAgreement) {\r\n        IAgreement agreement = _getAgreement();\r\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\r\n        return agreement;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/forwarding/IAbstractForwarder.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n* @title Abstract forwarder interface\r\n* @dev This is the base interface for all forwarders.\r\n*      Forwarding allows separately installed applications (smart contracts implementing the forwarding interface) to execute multi-step actions via EVM scripts.\r\n*      You should only support the forwarding interface if your \"action step\" is asynchronous (e.g. requiring a delay period or a voting period).\r\n*      Note: you should **NOT** directly inherit from this interface; see one of the other, non-abstract interfaces available.\r\n*/\r\ncontract IAbstractForwarder {\r\n    enum ForwarderType {\r\n        NOT_IMPLEMENTED,\r\n        NO_CONTEXT,\r\n        WITH_CONTEXT\r\n    }\r\n\r\n    /**\r\n    * @dev Tell whether the proposed forwarding path (an EVM script) from the given sender is allowed.\r\n    *      However, this is not a strict guarantee of safety: the implemented `forward()` method is\r\n    *      still allowed to revert even if `canForward()` returns true for the same parameters.\r\n    * @return True if the sender's proposed path is allowed\r\n    */\r\n    function canForward(address sender, bytes evmScript) external view returns (bool);\r\n\r\n    /**\r\n    * @dev Tell the forwarder type\r\n    * @return Forwarder type\r\n    */\r\n    function forwarderType() external pure returns (ForwarderType);\r\n\r\n    /**\r\n    * @dev Report whether the implementing app is a forwarder\r\n    *      Required for backwards compatibility with aragonOS 4\r\n    * @return Always true\r\n    */\r\n    function isForwarder() external pure returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/forwarding/IForwarderWithContext.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n* @title Forwarder interface requiring context information\r\n* @dev This forwarder interface allows for additional context to be attached to the action by the sender.\r\n*/\r\ncontract IForwarderWithContext is IAbstractForwarder {\r\n    /**\r\n    * @dev Forward an EVM script with an attached context\r\n    */\r\n    function forward(bytes evmScript, bytes context) external;\r\n\r\n    /**\r\n    * @dev Tell the forwarder type\r\n    * @return Always 2 (ForwarderType.WITH_CONTEXT)\r\n    */\r\n    function forwarderType() external pure returns (ForwarderType) {\r\n        return ForwarderType.WITH_CONTEXT;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/minime/contracts/ITokenController.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @dev The token controller contract must implement these functions\r\n\r\n\r\ninterface ITokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) external payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\r\n}\r\n\r\n// File: @aragon/minime/contracts/MiniMeToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    address public controller;\r\n\r\n    function Controlled()  public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController  public {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes _data\r\n    ) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        MiniMeTokenFactory _tokenFactory,\r\n        MiniMeToken _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        tokenFactory = _tokenFactory;\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount)\r\n                return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // Alerts the token controller of the transfer\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        var previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            // Adding the ` == true` makes the linter shut up so...\r\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n    ) public returns(MiniMeToken)\r\n    {\r\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\r\n\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            snapshot,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), snapshot);\r\n        return cloneToken;\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController public {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        require(_value <= uint128(-1));\r\n\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0)\r\n            return false;\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () external payable {\r\n        require(isContract(controller));\r\n        // Adding the ` == true` makes the linter shut up so...\r\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController public {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        MiniMeToken _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken)\r\n    {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n        );\r\n\r\n        newToken.changeController(msg.sender);\r\n        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n// File: contracts/DisputableVoting.sol\r\n\r\n/*\r\n * SPDX-License-Identifier:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DisputableVoting is IForwarderWithContext, DisputableAragonApp {\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n\r\n    // bytes32 public constant CREATE_VOTES_ROLE = keccak256(\"CREATE_VOTES_ROLE\");\r\n    bytes32 public constant CREATE_VOTES_ROLE = 0xe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc;\r\n\r\n    // bytes32 public constant CHANGE_VOTE_TIME_ROLE = keccak256(\"CHANGE_VOTE_TIME_ROLE\");\r\n    bytes32 public constant CHANGE_VOTE_TIME_ROLE = 0xbc5d8ebc0830a2fed8649987b8263de1397b7fa892f3b87dc2d8cad35c691f86;\r\n\r\n    // bytes32 public constant CHANGE_SUPPORT_ROLE = keccak256(\"CHANGE_SUPPORT_ROLE\");\r\n    bytes32 public constant CHANGE_SUPPORT_ROLE = 0xf3a5f71f3cb50dae9454dd13cdf0fd1b559f7e20d63c08902592486e6d460c90;\r\n\r\n    // bytes32 public constant CHANGE_QUORUM_ROLE = keccak256(\"CHANGE_QUORUM_ROLE\");\r\n    bytes32 public constant CHANGE_QUORUM_ROLE = 0xa3f675280fb3c54662067f92659ca1ee3ef7c1a7f2a6ff03a5c4228aa26b6a82;\r\n\r\n    // bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = keccak256(\"CHANGE_DELEGATED_VOTING_PERIOD_ROLE\");\r\n    bytes32 public constant CHANGE_DELEGATED_VOTING_PERIOD_ROLE = 0x59ba415d96e104e6483d76b79d9cd09941d04e229adcd62d7dc672c93975a19d;\r\n\r\n    // bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = keccak256(\"CHANGE_EXECUTION_DELAY_ROLE\");\r\n    bytes32 public constant CHANGE_EXECUTION_DELAY_ROLE = 0x5e3a3edc315e366a0cc5c94ca94a8f9bbc2f1feebb2ef7704bfefcff0cdc4ee7;\r\n\r\n    // bytes32 public constant CHANGE_QUIET_ENDING_ROLE = keccak256(\"CHANGE_QUIET_ENDING_ROLE\");\r\n    bytes32 public constant CHANGE_QUIET_ENDING_ROLE = 0x4f885d966bcd49734218a6e280d58c840b86e8cc13610b21ebd46f0b1da362c2;\r\n\r\n    uint256 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\r\n    uint256 public constant MAX_VOTES_DELEGATION_SET_LENGTH = 70;\r\n\r\n    // Validation errors\r\n    string private constant ERROR_NO_VOTE = \"VOTING_NO_VOTE\";\r\n    string private constant ERROR_VOTE_TIME_ZERO = \"VOTING_VOTE_TIME_ZERO\";\r\n    string private constant ERROR_TOKEN_NOT_CONTRACT = \"VOTING_TOKEN_NOT_CONTRACT\";\r\n    string private constant ERROR_SETTING_DOES_NOT_EXIST = \"VOTING_SETTING_DOES_NOT_EXIST\";\r\n    string private constant ERROR_CHANGE_QUORUM_TOO_BIG = \"VOTING_CHANGE_QUORUM_TOO_BIG\";\r\n    string private constant ERROR_CHANGE_SUPPORT_TOO_SMALL = \"VOTING_CHANGE_SUPPORT_TOO_SMALL\";\r\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \"VOTING_CHANGE_SUPPORT_TOO_BIG\";\r\n    string private constant ERROR_INVALID_DELEGATED_VOTING_PERIOD = \"VOTING_INVALID_DLGT_VOTE_PERIOD\";\r\n    string private constant ERROR_INVALID_QUIET_ENDING_PERIOD = \"VOTING_INVALID_QUIET_END_PERIOD\";\r\n    string private constant ERROR_INVALID_EXECUTION_SCRIPT = \"VOTING_INVALID_EXECUTION_SCRIPT\";\r\n\r\n    // Workflow errors\r\n    string private constant ERROR_CANNOT_FORWARD = \"VOTING_CANNOT_FORWARD\";\r\n    string private constant ERROR_NO_TOTAL_VOTING_POWER = \"VOTING_NO_TOTAL_VOTING_POWER\";\r\n    string private constant ERROR_CANNOT_VOTE = \"VOTING_CANNOT_VOTE\";\r\n    string private constant ERROR_NOT_REPRESENTATIVE = \"VOTING_NOT_REPRESENTATIVE\";\r\n    string private constant ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW = \"VOTING_PAST_REP_VOTING_WINDOW\";\r\n    string private constant ERROR_DELEGATES_EXCEEDS_MAX_LEN = \"VOTING_DELEGATES_EXCEEDS_MAX_LEN\";\r\n    string private constant ERROR_CANNOT_PAUSE_VOTE = \"VOTING_CANNOT_PAUSE_VOTE\";\r\n    string private constant ERROR_VOTE_NOT_PAUSED = \"VOTING_VOTE_NOT_PAUSED\";\r\n    string private constant ERROR_CANNOT_EXECUTE = \"VOTING_CANNOT_EXECUTE\";\r\n\r\n    enum VoterState { Absent, Yea, Nay }\r\n\r\n    enum VoteStatus {\r\n        Normal,                         // A vote in a \"normal\" state of operation (not one of the below)--note that this state is not related to the vote being open\r\n        Paused,                         // A vote that is paused due to it having an open challenge or dispute\r\n        Cancelled,                      // A vote that has been explicitly cancelled due to a challenge or dispute\r\n        Executed                        // A vote that has been executed\r\n    }\r\n\r\n    struct Setting {\r\n        // \"Base\" duration of each vote -- vote lifespans may be adjusted by pause and extension durations\r\n        uint64 voteTime;\r\n\r\n        // Required voter support % (yes power / voted power) for a vote to pass\r\n        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\r\n        uint64 supportRequiredPct;\r\n\r\n        // Required voter quorum % (yes power / total power) for a vote to pass\r\n        // Expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%\r\n        // Must be <= supportRequiredPct to avoid votes being impossible to pass\r\n        uint64 minAcceptQuorumPct;\r\n\r\n        // Duration from the start of a vote that representatives are allowed to vote on behalf of principals\r\n        // Must be <= voteTime; duration is bound as [)\r\n        uint64 delegatedVotingPeriod;\r\n\r\n        // Duration before the end of a vote to detect non-quiet endings\r\n        // Must be <= voteTime; duration is bound as [)\r\n        uint64 quietEndingPeriod;\r\n\r\n        // Duration to extend a vote in case of non-quiet ending\r\n        uint64 quietEndingExtension;\r\n\r\n        // Duration to wait before a passed vote can be executed\r\n        // Duration is bound as [)\r\n        uint64 executionDelay;\r\n    }\r\n\r\n    struct VoteCast {\r\n        VoterState state;\r\n        address caster;                                     // Caster of the vote (only stored if caster was not the representative)\r\n    }\r\n\r\n    struct Vote {\r\n        uint256 yea;                                        // Voting power for\r\n        uint256 nay;                                        // Voting power against\r\n        uint256 totalPower;                                 // Total voting power (based on the snapshot block)\r\n\r\n        uint64 startDate;                                   // Datetime when the vote was created\r\n        uint64 snapshotBlock;                               // Block number used to check voting power on attached token\r\n        VoteStatus status;                                  // Status of the vote\r\n\r\n        uint256 settingId;                                  // Identification number of the setting applicable to the vote\r\n        uint256 actionId;                                   // Identification number of the associated disputable action on the attached Agreement\r\n\r\n        uint64 pausedAt;                                    // Datetime when the vote was paused\r\n        uint64 pauseDuration;                               // Duration of the pause (only updated once resumed)\r\n        uint64 quietEndingExtensionDuration;                // Duration a vote was extended due to non-quiet endings\r\n        VoterState quietEndingSnapshotSupport;              // Snapshot of the vote's support at the beginning of the first quiet ending period\r\n\r\n        bytes32 executionScriptHash;                        // Hash of the EVM script attached to the vote\r\n        mapping (address => VoteCast) castVotes;            // Mapping of voter address => more information about their cast vote\r\n    }\r\n\r\n    MiniMeToken public token;                               // Token for determining voting power; we assume it's not malicious\r\n\r\n    uint256 public settingsLength;                          // Number of settings created\r\n    mapping (uint256 => Setting) internal settings;         // List of settings indexed by ID (starting at 0)\r\n\r\n    uint256 public votesLength;                             // Number of votes created\r\n    mapping (uint256 => Vote) internal votes;               // List of votes indexed by ID (starting at 0)\r\n    mapping (address => address) internal representatives;  // Mapping of voter => allowed representative\r\n\r\n    event NewSetting(uint256 settingId);\r\n    event ChangeVoteTime(uint64 voteTime);\r\n    event ChangeSupportRequired(uint64 supportRequiredPct);\r\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\r\n    event ChangeDelegatedVotingPeriod(uint64 delegatedVotingPeriod);\r\n    event ChangeQuietEndingConfiguration(uint64 quietEndingPeriod, uint64 quietEndingExtension);\r\n    event ChangeExecutionDelay(uint64 executionDelay);\r\n\r\n    event StartVote(uint256 indexed voteId, address indexed creator, bytes context, bytes executionScript);\r\n    event PauseVote(uint256 indexed voteId, uint256 indexed challengeId);\r\n    event ResumeVote(uint256 indexed voteId);\r\n    event CancelVote(uint256 indexed voteId);\r\n    event ExecuteVote(uint256 indexed voteId);\r\n    event QuietEndingExtendVote(uint256 indexed voteId, bool passing);\r\n\r\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, address caster);\r\n    event ChangeRepresentative(address indexed voter, address indexed representative);\r\n    event ProxyVoteFailure(uint256 indexed voteId, address indexed voter, address indexed representative);\r\n\r\n    /**\r\n    * @notice Initialize Disputable Voting with `_token.symbol(): string` for governance, a voting duration of `@transformTime(_voteTime)`, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, a delegated voting period of `@transformTime(_delegatedVotingPeriod), and a execution delay of `@transformTime(_executionDelay)`\r\n    * @param _token MiniMeToken Address that will be used as governance token\r\n    * @param _voteTime Base duration a vote will be open for voting\r\n    * @param _supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\r\n    * @param _minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\r\n    * @param _delegatedVotingPeriod Duration from the start of a vote that representatives are allowed to vote on behalf of principals\r\n    * @param _quietEndingPeriod Duration to detect non-quiet endings\r\n    * @param _quietEndingExtension Duration to extend a vote in case of non-quiet ending\r\n    * @param _executionDelay Duration to wait before a passed vote can be executed\r\n    */\r\n    function initialize(\r\n        MiniMeToken _token,\r\n        uint64 _voteTime,\r\n        uint64 _supportRequiredPct,\r\n        uint64 _minAcceptQuorumPct,\r\n        uint64 _delegatedVotingPeriod,\r\n        uint64 _quietEndingPeriod,\r\n        uint64 _quietEndingExtension,\r\n        uint64 _executionDelay\r\n    )\r\n        external\r\n    {\r\n        initialized();\r\n\r\n        require(isContract(_token), ERROR_TOKEN_NOT_CONTRACT);\r\n        token = _token;\r\n\r\n        (Setting storage setting, ) = _newSetting();\r\n        _changeVoteTime(setting, _voteTime);\r\n        _changeSupportRequiredPct(setting, _supportRequiredPct);\r\n        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\r\n        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\r\n        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\r\n        _changeExecutionDelay(setting, _executionDelay);\r\n    }\r\n\r\n    /**\r\n    * @notice Change vote time to `@transformTime(_voteTime)`\r\n    * @param _voteTime New vote time\r\n    */\r\n    function changeVoteTime(uint64 _voteTime) external authP(CHANGE_VOTE_TIME_ROLE, arr(uint256(_voteTime))) {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeVoteTime(setting, _voteTime);\r\n    }\r\n\r\n    /**\r\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\r\n    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\r\n    */\r\n    function changeSupportRequiredPct(uint64 _supportRequiredPct) external authP(CHANGE_SUPPORT_ROLE, arr(uint256(_supportRequiredPct))) {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeSupportRequiredPct(setting, _supportRequiredPct);\r\n    }\r\n\r\n    /**\r\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\r\n    * @param _minAcceptQuorumPct New minimum acceptance quorum; expressed as a percentage of 10^18\r\n    */\r\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) external authP(CHANGE_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct))) {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeMinAcceptQuorumPct(setting, _minAcceptQuorumPct);\r\n    }\r\n\r\n    /**\r\n    * @notice Change delegated voting period to `@transformTime(_delegatedVotingPeriod)`\r\n    * @param _delegatedVotingPeriod New delegated voting period\r\n    */\r\n    function changeDelegatedVotingPeriod(uint64 _delegatedVotingPeriod) external authP(CHANGE_DELEGATED_VOTING_PERIOD_ROLE, arr(uint256(_delegatedVotingPeriod))) {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeDelegatedVotingPeriod(setting, _delegatedVotingPeriod);\r\n    }\r\n\r\n    /**\r\n    * @notice Change quiet ending period to `@transformTime(_quietEndingPeriod)` with extensions of `@transformTime(_quietEndingExtension)`\r\n    * @param _quietEndingPeriod New quiet ending period\r\n    * @param _quietEndingExtension New quiet ending extension\r\n    */\r\n    function changeQuietEndingConfiguration(uint64 _quietEndingPeriod, uint64 _quietEndingExtension)\r\n        external\r\n        authP(CHANGE_QUIET_ENDING_ROLE, arr(uint256(_quietEndingPeriod), uint256(_quietEndingExtension)))\r\n    {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeQuietEndingConfiguration(setting, _quietEndingPeriod, _quietEndingExtension);\r\n    }\r\n\r\n    /**\r\n    * @notice Change execution delay to `@transformTime(_executionDelay)`\r\n    * @param _executionDelay New execution delay\r\n    */\r\n    function changeExecutionDelay(uint64 _executionDelay) external authP(CHANGE_EXECUTION_DELAY_ROLE, arr(uint256(_executionDelay))) {\r\n        Setting storage setting = _newCopiedSettings();\r\n        _changeExecutionDelay(setting, _executionDelay);\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new vote about \"`_context`\"\r\n    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\r\n    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\r\n    * @return Identification number of the newly created vote\r\n    */\r\n    function newVote(bytes _executionScript, bytes _context) external auth(CREATE_VOTES_ROLE) returns (uint256) {\r\n        return _newVote(_executionScript, _context);\r\n    }\r\n\r\n    /**\r\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\r\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote\r\n    * @param _supports Whether voter supports the vote\r\n    */\r\n    function vote(uint256 _voteId, bool _supports) external {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        require(_canVote(vote_, msg.sender), ERROR_CANNOT_VOTE);\r\n\r\n        _castVote(vote_, _voteId, _supports, msg.sender, address(0));\r\n    }\r\n\r\n    /**\r\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId` on behalf of delegated voters\r\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote\r\n    * @param _supports Whether the representative supports the vote\r\n    * @param _voters Addresses of the delegated voters to vote on behalf of\r\n    */\r\n    function voteOnBehalfOf(uint256 _voteId, bool _supports, address[] _voters) external {\r\n        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\r\n\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        // Note that the period for representatives to vote can never go into a quiet ending\r\n        // extension, and so we don't need to check other timing-based pre-conditions\r\n        require(_canRepresentativesVote(vote_), ERROR_PAST_REPRESENTATIVE_VOTING_WINDOW);\r\n\r\n        for (uint256 i = 0; i < _voters.length; i++) {\r\n            address voter = _voters[i];\r\n            require(_hasVotingPower(vote_, voter), ERROR_CANNOT_VOTE);\r\n            require(_isRepresentativeOf(voter, msg.sender), ERROR_NOT_REPRESENTATIVE);\r\n\r\n            if (!_hasCastVote(vote_, voter)) {\r\n                _castVote(vote_, _voteId, _supports, voter, msg.sender);\r\n            } else {\r\n                emit ProxyVoteFailure(_voteId, voter, msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Execute vote #`_voteId`\r\n    * @dev Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote\r\n    * @param _executionScript Action (encoded as an EVM script) to be executed, must match the one used when the vote was created\r\n    */\r\n    function executeVote(uint256 _voteId, bytes _executionScript) external {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        require(_canExecute(vote_), ERROR_CANNOT_EXECUTE);\r\n        require(vote_.executionScriptHash == keccak256(_executionScript), ERROR_INVALID_EXECUTION_SCRIPT);\r\n\r\n        vote_.status = VoteStatus.Executed;\r\n        _closeDisputableAction(vote_.actionId);\r\n\r\n        // Add attached Agreement to blacklist to disallow the stored EVMScript from directly calling\r\n        // the Agreement from this app's context (e.g. maliciously closing a different action)\r\n        address[] memory blacklist = new address[](1);\r\n        blacklist[0] = address(_getAgreement());\r\n        runScript(_executionScript, new bytes(0), blacklist);\r\n        emit ExecuteVote(_voteId);\r\n    }\r\n\r\n    /**\r\n    * @notice `_representative == 0x0 ? 'Set your voting representative to ' + _representative : 'Remove your representative'`\r\n    * @param _representative Address of the representative who is allowed to vote on behalf of the sender. Use the zero address for none.\r\n    */\r\n    function setRepresentative(address _representative) external isInitialized {\r\n        representatives[msg.sender] = _representative;\r\n        emit ChangeRepresentative(msg.sender, _representative);\r\n    }\r\n\r\n    // Forwarding external fns\r\n\r\n    /**\r\n    * @notice Create a vote to execute the desired action\r\n    * @dev IForwarderWithContext interface conformance.\r\n    *      This app (as a DisputableAragonApp) is required to be the initial step in the forwarding chain.\r\n    * @param _evmScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\r\n    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\r\n    */\r\n    function forward(bytes _evmScript, bytes _context) external {\r\n        require(_canForward(msg.sender, _evmScript), ERROR_CANNOT_FORWARD);\r\n        _newVote(_evmScript, _context);\r\n    }\r\n\r\n    // Forwarding getter fns\r\n\r\n    /**\r\n    * @dev Tell if an address can forward actions (by creating a vote)\r\n    *      IForwarderWithContext interface conformance\r\n    * @param _sender Address intending to forward an action\r\n    * @param _evmScript EVM script being forwarded\r\n    * @return True if the address is allowed create a vote containing the action\r\n    */\r\n    function canForward(address _sender, bytes _evmScript) external view returns (bool) {\r\n        return _canForward(_sender, _evmScript);\r\n    }\r\n\r\n    // Disputable getter fns\r\n\r\n    /**\r\n    * @dev Tell if a vote can be challenged\r\n    *      Called by the attached Agreement when a challenge is requested for the associated vote\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @return True if the vote can be challenged\r\n    */\r\n    function canChallenge(uint256 _voteId) external view returns (bool) {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        // Votes can only be challenged once\r\n        return vote_.pausedAt == 0 && _isVoteOpenForVoting(vote_, settings[vote_.settingId]);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote can be closed\r\n    *      Called by the attached Agreement when the action associated with the vote is requested to be manually closed\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @return True if the vote can be closed\r\n    */\r\n    function canClose(uint256 _voteId) external view returns (bool) {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        return (_isNormal(vote_) || _isExecuted(vote_)) && _hasEnded(vote_, settings[vote_.settingId]);\r\n    }\r\n\r\n    // Getter fns\r\n\r\n    /**\r\n    * @dev Tell the information for a setting\r\n    *      Initialization check is implicitly provided by `_getSetting()` as new settings can only be\r\n    *      created via `change*()` functions which require initialization\r\n    * @param _settingId Identification number of the setting\r\n    * @return voteTime Base vote duration\r\n    * @return supportRequiredPct Required support % (yes power / voted power) for a vote to pass; expressed as a percentage of 10^18\r\n    * @return minAcceptQuorumPct Required quorum % (yes power / total power) for a vote to pass; expressed as a percentage of 10^18\r\n    * @return delegatedVotingPeriod Duration of the delegated voting period\r\n    * @return quietEndingPeriod Duration to detect non-quiet endings\r\n    * @return quietEndingExtension Duration to extend a vote in case of non-quiet ending\r\n    * @return executionDelay Duration to wait before a passed vote can be executed\r\n    */\r\n    function getSetting(uint256 _settingId)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 voteTime,\r\n            uint64 supportRequiredPct,\r\n            uint64 minAcceptQuorumPct,\r\n            uint64 delegatedVotingPeriod,\r\n            uint64 quietEndingPeriod,\r\n            uint64 quietEndingExtension,\r\n            uint64 executionDelay\r\n        )\r\n    {\r\n        Setting storage setting = _getSetting(_settingId);\r\n        voteTime = setting.voteTime;\r\n        supportRequiredPct = setting.supportRequiredPct;\r\n        minAcceptQuorumPct = setting.minAcceptQuorumPct;\r\n        delegatedVotingPeriod = setting.delegatedVotingPeriod;\r\n        quietEndingPeriod = setting.quietEndingPeriod;\r\n        quietEndingExtension = setting.quietEndingExtension;\r\n        executionDelay = setting.executionDelay;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information for a vote\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote\r\n    * @return yea Voting power for\r\n    * @return nay Voting power against\r\n    * @return totalPower Total voting power available (based on the snapshot block)\r\n    * @return startDate Datetime when the vote was created\r\n    * @return snapshotBlock Block number used to check voting power on attached token\r\n    * @return status Status of the vote\r\n    * @return settingId Identification number of the setting applicable to the vote\r\n    * @return actionId Identification number of the associated disputable action on the attached Agreement\r\n    * @return pausedAt Datetime when the vote was paused\r\n    * @return pauseDuration Duration of the pause (only updated once resumed)\r\n    * @return quietEndingExtensionDuration Duration a vote was extended due to non-quiet endings\r\n    * @return quietEndingSnapshotSupport Snapshot of the vote's support at the beginning of the first quiet ending period\r\n    * @return executionScriptHash Hash of the EVM script attached to the vote\r\n    */\r\n    function getVote(uint256 _voteId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 yea,\r\n            uint256 nay,\r\n            uint256 totalPower,\r\n            uint64 startDate,\r\n            uint64 snapshotBlock,\r\n            VoteStatus status,\r\n            uint256 settingId,\r\n            uint256 actionId,\r\n            uint64 pausedAt,\r\n            uint64 pauseDuration,\r\n            uint64 quietEndingExtensionDuration,\r\n            VoterState quietEndingSnapshotSupport,\r\n            bytes32 executionScriptHash\r\n        )\r\n    {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n\r\n        yea = vote_.yea;\r\n        nay = vote_.nay;\r\n        totalPower = vote_.totalPower;\r\n        startDate = vote_.startDate;\r\n        snapshotBlock = vote_.snapshotBlock;\r\n        status = vote_.status;\r\n        settingId = vote_.settingId;\r\n        actionId = vote_.actionId;\r\n        pausedAt = vote_.pausedAt;\r\n        pauseDuration = vote_.pauseDuration;\r\n        quietEndingExtensionDuration = vote_.quietEndingExtensionDuration;\r\n        quietEndingSnapshotSupport = vote_.quietEndingSnapshotSupport;\r\n        executionScriptHash = vote_.executionScriptHash;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the state of a voter for a vote\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote\r\n    * @param _voter Address of the voter being queried\r\n    * @return state Voter's cast state being queried\r\n    * @return caster Address of the vote's caster\r\n    */\r\n    function getCastVote(uint256 _voteId, address _voter) external view returns (VoterState state, address caster) {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        state = _voterState(vote_, _voter);\r\n        caster = _voteCaster(vote_, _voter);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a voter can participate in a vote\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return True if the voter can participate in the vote\r\n    */\r\n    function canVote(uint256 _voteId, address _voter) external view returns (bool) {\r\n        return _canVote(_getVote(_voteId), _voter);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a representative can vote on behalf of delegated voters in a vote\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @param _voters Addresses of the delegated voters being queried\r\n    * @param _representative Address of the representative being queried\r\n    * @return True if the representative can vote on behalf of the delegated voters in the vote\r\n    */\r\n    function canVoteOnBehalfOf(uint256 _voteId, address[] _voters, address _representative) external view returns (bool) {\r\n        require(_voters.length <= MAX_VOTES_DELEGATION_SET_LENGTH, ERROR_DELEGATES_EXCEEDS_MAX_LEN);\r\n\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        if (!_canRepresentativesVote(vote_)) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < _voters.length; i++) {\r\n            address voter = _voters[i];\r\n            if (!_hasVotingPower(vote_, voter) || !_isRepresentativeOf(voter, _representative) || _hasCastVote(vote_, voter)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote can be executed\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @return True if the vote can be executed\r\n    */\r\n    function canExecute(uint256 _voteId) external view returns (bool) {\r\n        return _canExecute(_getVote(_voteId));\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote is open for voting\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Identification number of the vote being queried\r\n    * @return True if the vote is open for voting\r\n    */\r\n    function isVoteOpenForVoting(uint256 _voteId) external view returns (bool) {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        Setting storage setting = settings[vote_.settingId];\r\n        return _isVoteOpenForVoting(vote_, setting);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote currently allows representatives to vote for delegated voters\r\n    *      Initialization check is implicitly provided by `_getVote()` as new votes can only be\r\n    *      created via `newVote()`, which requires initialization\r\n    * @param _voteId Vote identifier\r\n    * @return True if the vote currently allows representatives to vote\r\n    */\r\n    function canRepresentativesVote(uint256 _voteId) external view returns (bool) {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        return _canRepresentativesVote(vote_);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a representative currently represents another voter\r\n    * @param _voter Address of the delegated voter being queried\r\n    * @param _representative Address of the representative being queried\r\n    * @return True if the representative currently represents the voter\r\n    */\r\n    function isRepresentativeOf(address _voter, address _representative) external view isInitialized returns (bool) {\r\n        return _isRepresentativeOf(_voter, _representative);\r\n    }\r\n\r\n    // DisputableAragonApp callback implementations\r\n\r\n    /**\r\n    * @dev Received when a vote is challenged\r\n    * @param _voteId Identification number of the vote\r\n    * @param _challengeId Identification number of the challenge associated to the vote on the attached Agreement\r\n    */\r\n    function _onDisputableActionChallenged(uint256 _voteId, uint256 _challengeId, address /* _challenger */) internal {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        require(_isNormal(vote_), ERROR_CANNOT_PAUSE_VOTE);\r\n\r\n        vote_.status = VoteStatus.Paused;\r\n        vote_.pausedAt = getTimestamp64();\r\n        emit PauseVote(_voteId, _challengeId);\r\n    }\r\n\r\n    /**\r\n    * @dev Received when a vote was ruled in favour of the submitter\r\n    * @param _voteId Identification number of the vote\r\n    */\r\n    function _onDisputableActionAllowed(uint256 _voteId) internal {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\r\n\r\n        vote_.status = VoteStatus.Normal;\r\n        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\r\n        emit ResumeVote(_voteId);\r\n    }\r\n\r\n    /**\r\n    * @dev Received when a vote was ruled in favour of the challenger\r\n    * @param _voteId Identification number of the vote\r\n    */\r\n    function _onDisputableActionRejected(uint256 _voteId) internal {\r\n        Vote storage vote_ = _getVote(_voteId);\r\n        require(_isPaused(vote_), ERROR_VOTE_NOT_PAUSED);\r\n\r\n        vote_.status = VoteStatus.Cancelled;\r\n        vote_.pauseDuration = getTimestamp64().sub(vote_.pausedAt);\r\n        emit CancelVote(_voteId);\r\n    }\r\n\r\n    /**\r\n    * @dev Received when a vote was ruled as void\r\n    * @param _voteId Identification number of the vote\r\n    */\r\n    function _onDisputableActionVoided(uint256 _voteId) internal {\r\n        // When a challenged vote is ruled as voided, it is considered as being allowed.\r\n        // This could be the case for challenges where the attached Agreement's arbitrator refuses to rule the case.\r\n        _onDisputableActionAllowed(_voteId);\r\n    }\r\n\r\n    // Internal fns\r\n\r\n    /**\r\n    * @dev Create a new empty setting instance\r\n    * @return New setting's instance\r\n    * @return New setting's identification number\r\n    */\r\n    function _newSetting() internal returns (Setting storage setting, uint256 settingId) {\r\n        settingId = settingsLength++;\r\n        setting = settings[settingId];\r\n        emit NewSetting(settingId);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a copy of the current settings as a new setting instance\r\n    * @return New setting's instance\r\n    */\r\n    function _newCopiedSettings() internal returns (Setting storage) {\r\n        (Setting storage to, uint256 settingId) = _newSetting();\r\n        Setting storage from = _getSetting(settingId - 1);\r\n        to.voteTime = from.voteTime;\r\n        to.supportRequiredPct = from.supportRequiredPct;\r\n        to.minAcceptQuorumPct = from.minAcceptQuorumPct;\r\n        to.delegatedVotingPeriod = from.delegatedVotingPeriod;\r\n        to.quietEndingPeriod = from.quietEndingPeriod;\r\n        to.quietEndingExtension = from.quietEndingExtension;\r\n        to.executionDelay = from.executionDelay;\r\n        return to;\r\n    }\r\n\r\n    /**\r\n    * @dev Change vote time\r\n    * @param _setting Setting instance to update\r\n    * @param _voteTime New vote time\r\n    */\r\n    function _changeVoteTime(Setting storage _setting, uint64 _voteTime) internal {\r\n        require(_voteTime > 0, ERROR_VOTE_TIME_ZERO);\r\n\r\n        _setting.voteTime = _voteTime;\r\n        emit ChangeVoteTime(_voteTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the required support\r\n    * @param _setting Setting instance to update\r\n    * @param _supportRequiredPct New required support; expressed as a percentage of 10^18\r\n    */\r\n    function _changeSupportRequiredPct(Setting storage _setting, uint64 _supportRequiredPct) internal {\r\n        require(_setting.minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_TOO_SMALL);\r\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\r\n\r\n        _setting.supportRequiredPct = _supportRequiredPct;\r\n        emit ChangeSupportRequired(_supportRequiredPct);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the minimum acceptance quorum\r\n    * @param _setting Setting instance to update\r\n    * @param _minAcceptQuorumPct New acceptance quorum; expressed as a percentage of 10^18\r\n    */\r\n    function _changeMinAcceptQuorumPct(Setting storage _setting, uint64 _minAcceptQuorumPct) internal {\r\n        require(_minAcceptQuorumPct <= _setting.supportRequiredPct, ERROR_CHANGE_QUORUM_TOO_BIG);\r\n\r\n        _setting.minAcceptQuorumPct = _minAcceptQuorumPct;\r\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the delegated voting period\r\n    * @param _setting Setting instance to update\r\n    * @param _delegatedVotingPeriod New delegated voting period\r\n    */\r\n    function _changeDelegatedVotingPeriod(Setting storage _setting, uint64 _delegatedVotingPeriod) internal {\r\n        require(_delegatedVotingPeriod <= _setting.voteTime, ERROR_INVALID_DELEGATED_VOTING_PERIOD);\r\n\r\n        _setting.delegatedVotingPeriod = _delegatedVotingPeriod;\r\n        emit ChangeDelegatedVotingPeriod(_delegatedVotingPeriod);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the quiet ending configuration\r\n    * @param _setting Setting instance to update\r\n    * @param _quietEndingPeriod New quiet ending period\r\n    * @param _quietEndingExtension New quiet ending extension\r\n    */\r\n    function _changeQuietEndingConfiguration(Setting storage _setting, uint64 _quietEndingPeriod, uint64 _quietEndingExtension) internal {\r\n        require(_quietEndingPeriod <= _setting.voteTime, ERROR_INVALID_QUIET_ENDING_PERIOD);\r\n\r\n        _setting.quietEndingPeriod = _quietEndingPeriod;\r\n        _setting.quietEndingExtension = _quietEndingExtension;\r\n        emit ChangeQuietEndingConfiguration(_quietEndingPeriod, _quietEndingExtension);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the execution delay\r\n    * @param _setting Setting instance to update\r\n    * @param _executionDelay New execution delay\r\n    */\r\n    function _changeExecutionDelay(Setting storage _setting, uint64 _executionDelay) internal {\r\n        _setting.executionDelay = _executionDelay;\r\n        emit ChangeExecutionDelay(_executionDelay);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a new vote\r\n    * @param _executionScript Action (encoded as an EVM script) that will be allowed to execute if the vote passes\r\n    * @param _context Additional context for the vote, also used as the disputable action's context on the attached Agreement\r\n    * @return voteId Identification number for the newly created vote\r\n    */\r\n    function _newVote(bytes _executionScript, bytes _context) internal returns (uint256 voteId) {\r\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\r\n        uint256 totalPower = token.totalSupplyAt(snapshotBlock);\r\n        require(totalPower > 0, ERROR_NO_TOTAL_VOTING_POWER);\r\n\r\n        voteId = votesLength++;\r\n\r\n        Vote storage vote_ = votes[voteId];\r\n        vote_.totalPower = totalPower;\r\n        vote_.startDate = getTimestamp64();\r\n        vote_.snapshotBlock = snapshotBlock;\r\n        vote_.status = VoteStatus.Normal;\r\n        vote_.settingId = _getCurrentSettingId();\r\n        vote_.executionScriptHash = keccak256(_executionScript);\r\n\r\n        // Notify the attached Agreement about the new vote; this is mandatory in making the vote disputable\r\n        // Note that we send `msg.sender` as the action's submitter--the attached Agreement may expect to be able to pull funds from this account\r\n        vote_.actionId = _registerDisputableAction(voteId, _context, msg.sender);\r\n\r\n        emit StartVote(voteId, msg.sender, _context, _executionScript);\r\n    }\r\n\r\n    /**\r\n    * @dev Cast a vote\r\n    *      Assumes all eligibility checks have passed for the given vote and voter\r\n    * @param _vote Vote instance\r\n    * @param _voteId Identification number of vote\r\n    * @param _supports Whether principal voter supports the vote\r\n    * @param _voter Address of principal voter\r\n    * @param _caster Address of vote caster, if voting via representative\r\n    */\r\n    function _castVote(Vote storage _vote, uint256 _voteId, bool _supports, address _voter, address _caster) internal {\r\n        Setting storage setting = settings[_vote.settingId];\r\n        if (_hasStartedQuietEndingPeriod(_vote, setting)) {\r\n            _ensureQuietEnding(_vote, setting, _voteId);\r\n        }\r\n\r\n        uint256 yeas = _vote.yea;\r\n        uint256 nays = _vote.nay;\r\n        uint256 voterStake = token.balanceOfAt(_voter, _vote.snapshotBlock);\r\n\r\n        VoteCast storage castVote = _vote.castVotes[_voter];\r\n        VoterState previousVoterState = castVote.state;\r\n\r\n        // If voter had previously voted, reset their vote\r\n        // Note that votes can only be changed once by the principal voter to overrule their representative's vote\r\n        if (previousVoterState == VoterState.Yea) {\r\n            yeas = yeas.sub(voterStake);\r\n        } else if (previousVoterState == VoterState.Nay) {\r\n            nays = nays.sub(voterStake);\r\n        }\r\n\r\n        if (_supports) {\r\n            yeas = yeas.add(voterStake);\r\n        } else {\r\n            nays = nays.add(voterStake);\r\n        }\r\n\r\n        _vote.yea = yeas;\r\n        _vote.nay = nays;\r\n        castVote.state = _voterStateFor(_supports);\r\n        castVote.caster = _caster;\r\n        emit CastVote(_voteId, _voter, _supports, _caster == address(0) ? _voter : _caster);\r\n    }\r\n\r\n    /**\r\n    * @dev Ensure we keep track of the information related for detecting a quiet ending\r\n    * @param _vote Vote instance\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @param _voteId Identification number of the vote\r\n    */\r\n    function _ensureQuietEnding(Vote storage _vote, Setting storage _setting, uint256 _voteId) internal {\r\n        bool isAccepted = _isAccepted(_vote, _setting);\r\n\r\n        if (_vote.quietEndingSnapshotSupport == VoterState.Absent) {\r\n            // If we do not have a snapshot of the support yet, simply store the given value.\r\n            // Note that if there are no votes during the quiet ending period, it is obviously impossible for the vote to be flipped and\r\n            // this snapshot is never stored.\r\n            _vote.quietEndingSnapshotSupport = _voterStateFor(isAccepted);\r\n        } else {\r\n            // We are calculating quiet ending extensions via \"rolling snapshots\", and so we only update the vote's cached duration once\r\n            // the last period is over and we've confirmed the flip.\r\n            if (getTimestamp() >= _lastComputedVoteEndDate(_vote, _setting)) {\r\n                _vote.quietEndingExtensionDuration = _vote.quietEndingExtensionDuration.add(_setting.quietEndingExtension);\r\n                emit QuietEndingExtendVote(_voteId, isAccepted);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch a setting's instance by identification number\r\n    * @return Identification number of the current setting\r\n    */\r\n    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\r\n        require(_settingId < settingsLength, ERROR_SETTING_DOES_NOT_EXIST);\r\n        return settings[_settingId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the identification number of the current setting\r\n    * @return Identification number of the current setting\r\n    */\r\n    function _getCurrentSettingId() internal view returns (uint256) {\r\n        // No need for SafeMath, note that a new setting is created during initialization\r\n        return settingsLength - 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Fetch a vote instance by identification number\r\n    * @param _voteId Identification number of the vote\r\n    * @return Vote instance\r\n    */\r\n    function _getVote(uint256 _voteId) internal view returns (Vote storage) {\r\n        require(_voteId < votesLength, ERROR_NO_VOTE);\r\n        return votes[_voteId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a voter can participate in a vote.\r\n    *      Note that a voter cannot change their vote once cast, except by the principal voter to overrule their representative's vote.\r\n    * @param _vote Vote instance being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return True if the voter can participate a certain vote\r\n    */\r\n    function _canVote(Vote storage _vote, address _voter) internal view returns (bool) {\r\n        Setting storage setting = settings[_vote.settingId];\r\n        return _isVoteOpenForVoting(_vote, setting) && _hasVotingPower(_vote, _voter) && _voteCaster(_vote, _voter) != _voter;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote currently allows representatives to vote for delegated voters\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote currently allows representatives to vote\r\n    */\r\n    function _canRepresentativesVote(Vote storage _vote) internal view returns (bool) {\r\n        return _isNormal(_vote) && !_hasFinishedDelegatedVotingPeriod(_vote, settings[_vote.settingId]);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote can be executed\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote can be executed\r\n    */\r\n    function _canExecute(Vote storage _vote) internal view returns (bool) {\r\n        // If the vote is executed, paused, or cancelled, it cannot be executed\r\n        if (!_isNormal(_vote)) {\r\n            return false;\r\n        }\r\n\r\n        Setting storage setting = settings[_vote.settingId];\r\n\r\n        // If the vote is still open, it cannot be executed\r\n        if (!_hasEnded(_vote, setting)) {\r\n            return false;\r\n        }\r\n\r\n        // If the vote's execution delay has not finished yet, it cannot be executed\r\n        if (!_hasFinishedExecutionDelay(_vote, setting)) {\r\n            return false;\r\n        }\r\n\r\n        // Check the vote has enough support and has reached the min quorum\r\n        return _isAccepted(_vote, setting);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote is in a \"normal\" non-exceptional state\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote is normal\r\n    */\r\n    function _isNormal(Vote storage _vote) internal view returns (bool) {\r\n        return _vote.status == VoteStatus.Normal;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote is paused\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote is paused\r\n    */\r\n    function _isPaused(Vote storage _vote) internal view returns (bool) {\r\n        return _vote.status == VoteStatus.Paused;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote was executed\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote was executed\r\n    */\r\n    function _isExecuted(Vote storage _vote) internal view returns (bool) {\r\n        return _vote.status == VoteStatus.Executed;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote is currently accepted\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote is accepted\r\n    */\r\n    function _isAccepted(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        uint256 yeas = _vote.yea;\r\n        uint256 nays = _vote.nay;\r\n        uint64 supportRequiredPct = _setting.supportRequiredPct;\r\n        uint64 minimumAcceptanceQuorumPct = _setting.minAcceptQuorumPct;\r\n        return _isValuePct(yeas, yeas.add(nays), supportRequiredPct) &&\r\n               _isValuePct(yeas, _vote.totalPower, minimumAcceptanceQuorumPct);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote is open for voting\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote is open for voting\r\n    */\r\n    function _isVoteOpenForVoting(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        return _isNormal(_vote) && !_hasEnded(_vote, _setting);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote has ended\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote has ended\r\n    */\r\n    function _hasEnded(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        return getTimestamp() >= _currentVoteEndDate(_vote, _setting);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote's delegated voting period has finished\r\n    *      This function doesn't ensure that the vote is still open\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote's delegated voting period has finished\r\n    */\r\n    function _hasFinishedDelegatedVotingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        uint64 baseDelegatedVotingPeriodEndDate = _vote.startDate.add(_setting.delegatedVotingPeriod);\r\n\r\n        // If the vote was paused before the delegated voting period ended, we need to extend it\r\n        uint64 pausedAt = _vote.pausedAt;\r\n        uint64 pauseDuration = _vote.pauseDuration;\r\n        uint64 actualDeletedVotingEndDate = pausedAt != 0 && pausedAt < baseDelegatedVotingPeriodEndDate\r\n            ? baseDelegatedVotingPeriodEndDate.add(pauseDuration)\r\n            : baseDelegatedVotingPeriodEndDate;\r\n\r\n        return getTimestamp() >= actualDeletedVotingEndDate;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote's quiet ending period has started\r\n    *      This function doesn't ensure that the vote is still open\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote's quiet ending period has started\r\n    */\r\n    function _hasStartedQuietEndingPeriod(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        uint64 voteBaseEndDate = _baseVoteEndDate(_vote, _setting);\r\n        uint64 baseQuietEndingPeriodStartDate = voteBaseEndDate.sub(_setting.quietEndingPeriod);\r\n\r\n        // If the vote was paused before the quiet ending period started, we need to delay it\r\n        uint64 pausedAt = _vote.pausedAt;\r\n        uint64 pauseDuration = _vote.pauseDuration;\r\n        uint64 actualQuietEndingPeriodStartDate = pausedAt != 0 && pausedAt < baseQuietEndingPeriodStartDate\r\n            ? baseQuietEndingPeriodStartDate.add(pauseDuration)\r\n            : baseQuietEndingPeriodStartDate;\r\n\r\n        return getTimestamp() >= actualQuietEndingPeriodStartDate;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote's execution delay has finished\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return True if the vote's execution delay has finished\r\n    */\r\n    function _hasFinishedExecutionDelay(Vote storage _vote, Setting storage _setting) internal view returns (bool) {\r\n        uint64 endDate = _currentVoteEndDate(_vote, _setting);\r\n        return getTimestamp() >= endDate.add(_setting.executionDelay);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate the original end date of a vote\r\n    *      It does not consider extensions from pauses or the quiet ending mechanism\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return Datetime of the vote's original end date\r\n    */\r\n    function _baseVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\r\n        return _vote.startDate.add(_setting.voteTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the last computed end date of a vote.\r\n    *      It considers extensions from pauses and the quiet ending mechanism.\r\n    *      We call this the \"last computed end date\" because we use the currently cached quiet ending extension, which may be off-by-one from reality\r\n    *      because it is only updated on the first vote in a new extension (which may never happen).\r\n    *      The pause duration will only be included after the vote has \"resumed\" from its pause, as we do not know how long the pause will be in advance.\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return Datetime of the vote's last computed end date\r\n    */\r\n    function _lastComputedVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\r\n        uint64 endDateAfterPause = _baseVoteEndDate(_vote, _setting).add(_vote.pauseDuration);\r\n        return endDateAfterPause.add(_vote.quietEndingExtensionDuration);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate the current end date of a vote.\r\n    *      It considers extensions from pauses and the quiet ending mechanism.\r\n    *      We call this the \"current end date\" because it takes into account a posssibly \"missing\" quiet ending extension that was not cached with the vote.\r\n    *      The pause duration will only be included after the vote has \"resumed\" from its pause, as we do not know how long the pause will be in advance.\r\n    * @param _vote Vote instance being queried\r\n    * @param _setting Setting instance applicable to the vote\r\n    * @return Datetime of the vote's current end date\r\n    */\r\n    function _currentVoteEndDate(Vote storage _vote, Setting storage _setting) internal view returns (uint64) {\r\n        uint64 lastComputedEndDate = _lastComputedVoteEndDate(_vote, _setting);\r\n\r\n        // The last computed end date is correct if we have not passed it yet or if no flip was detected in the last extension\r\n        if (getTimestamp() < lastComputedEndDate || !_wasFlipped(_vote)) {\r\n            return lastComputedEndDate;\r\n        }\r\n\r\n        // Otherwise, since the last computed end date was reached and included a flip, we need to extend the end date by one more period\r\n        return lastComputedEndDate.add(_setting.quietEndingExtension);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a vote was flipped in its most recent quiet ending period\r\n    *      This function assumes that it will only be called after the most recent quiet ending period has already ended\r\n    * @param _vote Vote instance being queried\r\n    * @return True if the vote was flipped\r\n    */\r\n    function _wasFlipped(Vote storage _vote) internal view returns (bool) {\r\n        // If there was no snapshot taken, it means no one voted during the quiet ending period. Thus, it cannot have been flipped.\r\n        VoterState snapshotSupport = _vote.quietEndingSnapshotSupport;\r\n        if (snapshotSupport == VoterState.Absent) {\r\n            return false;\r\n        }\r\n\r\n        // Otherwise, we calculate if the vote was flipped by comparing its current acceptance state to its last state at the start of the extension period\r\n        bool wasInitiallyAccepted = snapshotSupport == VoterState.Yea;\r\n        Setting storage setting = settings[_vote.settingId];\r\n        uint256 currentExtensions = _vote.quietEndingExtensionDuration / setting.quietEndingExtension;\r\n        bool wasAcceptedBeforeLastFlip = wasInitiallyAccepted != (currentExtensions % 2 != 0);\r\n        return wasAcceptedBeforeLastFlip != _isAccepted(_vote, setting);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a voter has voting power for a vote\r\n    * @param _vote Vote instance being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return True if the voter has voting power for a certain vote\r\n    */\r\n    function _hasVotingPower(Vote storage _vote, address _voter) internal view returns (bool) {\r\n        return token.balanceOfAt(_voter, _vote.snapshotBlock) > 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a voter has cast their choice in a vote (by themselves or via a representative)\r\n    * @param _vote Vote instance being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return True if the voter has cast their choice in the vote\r\n    */\r\n    function _hasCastVote(Vote storage _vote, address _voter) internal view returns (bool) {\r\n        return _voterState(_vote, _voter) != VoterState.Absent;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the state of a voter for a vote\r\n    * @param _vote Vote instance being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return Voting state of the voter\r\n    */\r\n    function _voterState(Vote storage _vote, address _voter) internal view returns (VoterState) {\r\n        return _vote.castVotes[_voter].state;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the caster of a voter on a vote\r\n    * @param _vote Vote instance being queried\r\n    * @param _voter Address of the voter being queried\r\n    * @return Address of the vote's caster\r\n    */\r\n    function _voteCaster(Vote storage _vote, address _voter) internal view returns (address) {\r\n        if (!_hasCastVote(_vote, _voter)) {\r\n            return address(0);\r\n        }\r\n\r\n        address _caster = _vote.castVotes[_voter].caster;\r\n        return _caster == address(0) ? _voter : _caster;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if a representative currently represents another voter\r\n    * @param _voter Address of the delegated voter being queried\r\n    * @param _representative Address of the representative being queried\r\n    * @return True if the representative currently represents the voter\r\n    */\r\n    function _isRepresentativeOf(address _voter, address _representative) internal view returns (bool) {\r\n        return representatives[_voter] == _representative;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell if an address can forward actions\r\n    * @param _sender Address intending to forward an action\r\n    * @return True if the address can create votes\r\n    */\r\n    function _canForward(address _sender, bytes) internal view returns (bool) {\r\n        IAgreement agreement = _getAgreement();\r\n        // To make sure the sender address is reachable by ACL oracles, we need to pass it as the first argument.\r\n        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\r\n        return agreement != IAgreement(0) && canPerform(_sender, CREATE_VOTES_ROLE, arr(_sender));\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates whether a given value is greater than a percentage of its total\r\n    * @param _value Numerator\r\n    * @param _total Divisor\r\n    * @param _pct Required percentage necessary, expressed as a percentage of 10^18\r\n    * @return True if the value is above the required percentage\r\n    */\r\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\r\n        if (_total == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\r\n        return computedPct > _pct;\r\n    }\r\n\r\n    /**\r\n    * @dev Translate a voter's support into a voter state\r\n    * @param _supports Whether voter supports the vote\r\n    * @return Voter state, as an enum\r\n    */\r\n    function _voterStateFor(bool _supports) internal pure returns (VoterState) {\r\n        return _supports ? VoterState.Yea : VoterState.Nay;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_VOTE_TIME_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"isVoteOpenForVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTES_DELEGATION_SET_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agreement\",\"type\":\"address\"}],\"name\":\"setAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSetting\",\"outputs\":[{\"name\":\"voteTime\",\"type\":\"uint64\"},{\"name\":\"supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"delegatedVotingPeriod\",\"type\":\"uint64\"},{\"name\":\"quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"quietEndingExtension\",\"type\":\"uint64\"},{\"name\":\"executionDelay\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingExtension\",\"type\":\"uint64\"}],\"name\":\"changeQuietEndingConfiguration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_EXECUTION_DELAY_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwarderType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"setRepresentative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"totalPower\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint64\"},{\"name\":\"snapshotBlock\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"settingId\",\"type\":\"uint256\"},{\"name\":\"actionId\",\"type\":\"uint256\"},{\"name\":\"pausedAt\",\"type\":\"uint64\"},{\"name\":\"pauseDuration\",\"type\":\"uint64\"},{\"name\":\"quietEndingExtensionDuration\",\"type\":\"uint64\"},{\"name\":\"quietEndingSnapshotSupport\",\"type\":\"uint8\"},{\"name\":\"executionScriptHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"changeMinAcceptQuorumPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_SUPPORT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionDelay\",\"type\":\"uint64\"}],\"name\":\"changeExecutionDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"},{\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"voteOnBehalfOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_DELEGATED_VOTING_PERIOD_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"changeSupportRequiredPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"onDisputableActionChallenged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voters\",\"type\":\"address[]\"},{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"canVoteOnBehalfOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_QUIET_ENDING_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHALLENGE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_representative\",\"type\":\"address\"}],\"name\":\"isRepresentativeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_executionScript\",\"type\":\"bytes\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_QUORUM_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getCastVote\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"caster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canRepresentativesVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_voteTime\",\"type\":\"uint64\"},{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"_delegatedVotingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingPeriod\",\"type\":\"uint64\"},{\"name\":\"_quietEndingExtension\",\"type\":\"uint64\"},{\"name\":\"_executionDelay\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionVoided\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegatedVotingPeriod\",\"type\":\"uint64\"}],\"name\":\"changeDelegatedVotingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAgreement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_VOTES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"name\":\"changeVoteTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_AGREEMENT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionRejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"NewSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voteTime\",\"type\":\"uint64\"}],\"name\":\"ChangeVoteTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"ChangeSupportRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"ChangeMinQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"delegatedVotingPeriod\",\"type\":\"uint64\"}],\"name\":\"ChangeDelegatedVotingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"quietEndingPeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"quietEndingExtension\",\"type\":\"uint64\"}],\"name\":\"ChangeQuietEndingConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"executionDelay\",\"type\":\"uint64\"}],\"name\":\"ChangeExecutionDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"context\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"executionScript\",\"type\":\"bytes\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"PauseVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ResumeVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"CancelVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"passing\",\"type\":\"bool\"}],\"name\":\"QuietEndingExtendVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supports\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"caster\",\"type\":\"address\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"representative\",\"type\":\"address\"}],\"name\":\"ChangeRepresentative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"representative\",\"type\":\"address\"}],\"name\":\"ProxyVoteFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreement\",\"type\":\"address\"}],\"name\":\"AgreementSet\",\"type\":\"event\"}]","ContractName":"DisputableVoting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0b6c6dc6789cc132d43e402f9ee287658f772cd5f8e1ec6dd8712e621e60965b"}]}