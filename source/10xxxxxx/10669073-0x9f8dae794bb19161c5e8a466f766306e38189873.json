{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SignedSafeMath {\n    int256 private constant _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(\n            !(a == -1 && b == _INT256_MIN),\n            \"SignedSafeMath: multiplication overflow\"\n        );\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require(\n            (b >= 0 && c <= a) || (b < 0 && c > a),\n            \"SignedSafeMath: subtraction overflow\"\n        );\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require(\n            (b >= 0 && c >= a) || (b < 0 && c < a),\n            \"SignedSafeMath: addition overflow\"\n        );\n\n        return c;\n    }\n}\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n\ninterface PairAggregatorInterface {\n    /**\n        @notice Gets the current answer from the aggregator.\n        @return the latest answer.\n     */\n    function getLatestAnswer() external view returns (int256);\n\n    /**\n        @notice Gets the last updated height from the aggregator.\n        @return the latest timestamp.\n     */\n    function getLatestTimestamp() external view returns (uint256);\n\n    /**\n        @notice Gets past rounds answer.\n        @param roundsBack the answer number to retrieve the answer for\n        @return the previous answer.\n     */\n    function getPreviousAnswer(uint256 roundsBack) external view returns (int256);\n\n    /**\n        @notice Gets block timestamp when an answer was last updated.\n        @param roundsBack the answer number to retrieve the updated timestamp for.\n        @return the previous timestamp.\n     */\n    function getPreviousTimestamp(uint256 roundsBack) external view returns (uint256);\n\n    /**\n        @notice Gets the latest completed round where the answer was updated.\n        @return the latest round id.\n    */\n    function getLatestRound() external view returns (uint256);\n}\n\ncontract ChainlinkPairAggregator is PairAggregatorInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 internal constant TEN = 10;\n    uint256 internal constant MAX_POWER_VALUE = 50;\n\n    AggregatorInterface public aggregator;\n    uint8 public responseDecimals;\n    uint8 public collateralDecimals;\n    uint8 public pendingDecimals;\n\n    /**\n        @notice It creates a new ChainlinkPairAggregator instance.\n        @param aggregatorAddress to use in this Chainlink pair aggregator.\n        @param responseDecimalsValue the decimals included in the Chainlink response.\n        @param collateralDecimalsValue the decimals included in the collateral token.\n    */\n    constructor(\n        address aggregatorAddress,\n        uint8 responseDecimalsValue,\n        uint8 collateralDecimalsValue\n    ) public {\n        require(aggregatorAddress != address(0x0), \"PROVIDE_AGGREGATOR_ADDRESS\");\n        aggregator = AggregatorInterface(aggregatorAddress);\n        responseDecimals = responseDecimalsValue;\n        collateralDecimals = collateralDecimalsValue;\n\n        if (collateralDecimals >= responseDecimals) {\n            pendingDecimals = collateralDecimals - responseDecimals;\n        } else {\n            pendingDecimals = responseDecimals - collateralDecimals;\n        }\n        require(pendingDecimals <= MAX_POWER_VALUE, \"MAX_PENDING_DECIMALS_EXCEEDED\");\n    }\n\n    /** External Functions */\n\n    /**\n        @notice Gets the current answer from the Chainlink aggregator oracle.\n        @return a normalized response value.\n     */\n    function getLatestAnswer() external view returns (int256) {\n        int256 latestAnswerInverted = aggregator.latestAnswer();\n        return _normalizeResponse(latestAnswerInverted);\n    }\n\n    /**\n        @notice Gets the past round answer from the Chainlink aggregator oracle.\n        @param roundsBack the answer number to retrieve the answer for\n        @return a normalized response value.\n     */\n    function getPreviousAnswer(uint256 roundsBack) external view returns (int256) {\n        int256 answer = _getPreviousAnswer(roundsBack);\n        return _normalizeResponse(answer);\n    }\n\n    /**\n        @notice Gets the last updated height from the aggregator.\n        @return the latest timestamp.\n     */\n    function getLatestTimestamp() external view returns (uint256) {\n        return aggregator.latestTimestamp();\n    }\n\n    /**\n        @notice Gets the latest completed round where the answer was updated.\n        @return the latest round id.\n    */\n    function getLatestRound() external view returns (uint256) {\n        return aggregator.latestRound();\n    }\n\n    /**\n        @notice Gets block timestamp when an answer was last updated\n        @param roundsBack the answer number to retrieve the updated timestamp for\n        @return the previous timestamp.\n     */\n    function getPreviousTimestamp(uint256 roundsBack) external view returns (uint256) {\n        uint256 latest = aggregator.latestRound();\n        require(roundsBack <= latest, \"NOT_ENOUGH_HISTORY\");\n        return aggregator.getTimestamp(latest - roundsBack);\n    }\n\n    /** Internal Functions */\n\n    /**\n        @notice Gets the past round answer from the Chainlink aggregator oracle.\n        @param roundsBack the answer number to retrieve the answer for\n        @return a non-normalized response value.\n     */\n    function _getPreviousAnswer(uint256 roundsBack) internal view returns (int256) {\n        uint256 latest = aggregator.latestRound();\n        require(roundsBack <= latest, \"NOT_ENOUGH_HISTORY\");\n        return aggregator.getAnswer(latest - roundsBack);\n    }\n\n    /**\n        @notice It normalizes a value depending on the collateral and response decimals configured in the contract.\n        @param value to normalize.\n        @return a normalized value.\n     */\n    function _normalizeResponse(int256 value) internal view returns (int256) {\n        if (collateralDecimals >= responseDecimals) {\n            return value.mul(int256(TEN**pendingDecimals));\n        } else {\n            return value.div(int256(TEN**pendingDecimals));\n        }\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"responseDecimalsValue\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralDecimalsValue\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundsBack\",\"type\":\"uint256\"}],\"name\":\"getPreviousAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundsBack\",\"type\":\"uint256\"}],\"name\":\"getPreviousTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"responseDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkPairAggregator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000773616e4d11a78f511299002da57a0a94577f1f400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000012","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}