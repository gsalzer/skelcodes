{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n\r\ninterface DharmaGasReserveInterface {\r\n    event Pulled(address indexed gasAccount, uint256 amount);\r\n\r\n    function pullGas() external;\r\n\r\n    function addGasAccount(address gasAccount) external;\r\n    function removeGasAccount(address gasAccount) external;\r\n    function setPullAmount(uint256 amount) external;\r\n    function setRateLimit(uint256 interval) external;\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external returns (bool ok, bytes memory returnData);\r\n\r\n    function getGasAccounts() external view returns (address[] memory);\r\n    function getPullAmount() external view returns (uint256);\r\n    function getRateLimit() external view returns (uint256);\r\n    function getLastPullTime(address gasAccount) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\ncontract DharmaGasReserve is DharmaGasReserveInterface, TwoStepOwnable {\r\n    // Track all authorized gas accounts.\r\n    address[] private _gasAccounts;\r\n\r\n    // Indexes start at 1, as 0 signifies non-inclusion\r\n    mapping (address => uint256) private _gasAccountIndexes;\r\n    \r\n    mapping (address => uint256) private _lastPullTime;\r\n    \r\n    uint256 private _pullAmount;\r\n    uint256 private _rateLimit;\r\n\r\n    constructor(address[] memory initialGasAccounts) public {\r\n        _pullAmount = 3 ether;\r\n        _rateLimit = 1 hours;\r\n        for (uint256 i; i < initialGasAccounts.length; i++) {\r\n            address gasAccount = initialGasAccounts[i];\r\n            _addGasAccount(gasAccount);\r\n        }\r\n    }\r\n\r\n    function pullGas() external {\r\n        require(\r\n            _gasAccountIndexes[msg.sender] != 0,\r\n            \"Only authorized gas accounts may pull from this contract.\"\r\n        );\r\n\r\n        require(\r\n            now > _lastPullTime[msg.sender] + _rateLimit,\r\n            \"Gas account is currently rate-limited.\"\r\n        );\r\n        _lastPullTime[msg.sender] = now;\r\n\r\n        uint256 pullAmount = _pullAmount;\r\n        (bool ok, ) = msg.sender.call.value(pullAmount)(\"\");\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n\r\n        emit Pulled(msg.sender, pullAmount);\r\n    }\r\n\r\n    function addGasAccount(address gasAccount) external onlyOwner {\r\n        _addGasAccount(gasAccount);\r\n    }\r\n\r\n    function removeGasAccount(address gasAccount) external onlyOwner {\r\n        uint256 removedGasAccountIndex = _gasAccountIndexes[gasAccount];\r\n        require(\r\n            removedGasAccountIndex != 0,\r\n            \"No gas account found matching the provided account.\"\r\n        );\r\n\r\n        // swap account to remove with the last one then pop from the array.\r\n        address lastGasAccount = _gasAccounts[_gasAccounts.length - 1];\r\n        _gasAccounts[removedGasAccountIndex - 1] = lastGasAccount;\r\n        _gasAccountIndexes[lastGasAccount] = removedGasAccountIndex;\r\n        _gasAccounts.pop();\r\n        delete _gasAccountIndexes[gasAccount];\r\n    }\r\n\r\n    function setPullAmount(uint256 amount) external onlyOwner {\r\n        _pullAmount = amount;\r\n    }\r\n\r\n    function setRateLimit(uint256 interval) external onlyOwner {\r\n        _rateLimit = interval;\r\n    }\r\n\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external onlyOwner returns (bool ok, bytes memory returnData) {\r\n        // Call the specified target and supply the specified data.\r\n        (ok, returnData) = target.call.value(amount)(data);\r\n    }\r\n\r\n    function getGasAccounts() external view returns (address[] memory) {\r\n        return _gasAccounts;\r\n    }\r\n\r\n    function getPullAmount() external view returns (uint256) {\r\n        return  _pullAmount;\r\n    }\r\n\r\n    function getRateLimit() external view returns (uint256) {\r\n        return _rateLimit;\r\n    }\r\n\r\n    function getLastPullTime(address gasAccount) external view returns (uint256) {\r\n        return _lastPullTime[gasAccount];\r\n    }\r\n\r\n    function _addGasAccount(address gasAccount) internal {\r\n        require(\r\n            _gasAccountIndexes[gasAccount] == 0,\r\n            \"Gas account matching the provided account already exists.\"\r\n        );\r\n        _gasAccounts.push(gasAccount);\r\n        _gasAccountIndexes[gasAccount] = _gasAccounts.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialGasAccounts\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"addGasAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAny\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"getLastPullTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPullAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"removeGasAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPullAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DharmaGasReserve","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000011000000000000000000000000a4723f399e526ad2c201e995b69e66936dc0d84e0000000000000000000000005ce45bb57fef19d63b374e464e04d040b2fbe5bd00000000000000000000000054a80223e78c36ad29b4fb3b3f63e0fed917b29d0000000000000000000000000bd183093718b5178af0b9977d3e137d09675cb4000000000000000000000000c2683080bfdc93df05e515879d5decda920206be000000000000000000000000c127d53cf7455fb56d1ea1786379fcd0cbbf19f1000000000000000000000000e2b255dd452cb15e69b18b883e0c123298236f480000000000000000000000007630ef110a30c2991cf4e3aa4837fd51b3cb7ba0000000000000000000000000ffe22aa0c8de8e998e13dc8160d05475a52009420000000000000000000000006d54018da206dec8ef3f1227bdb6b7ef4a73184600000000000000000000000028ebc02fbd21bf8f6cdfed42f62099ceafd4ccb9000000000000000000000000b9d2960022afe657c27c0b2c59120545f50f73210000000000000000000000003f03060e03c95f5570f6e2a852462a77c9ecc86600000000000000000000000048f3078ab1a47726fc86820e2bc2d1449f0b1707000000000000000000000000d0d6e51ea96708ac12f2ff49be5c29e7c2d3f62e00000000000000000000000057058e11ab55eb4de1b676c759064bcb5925c9db00000000000000000000000080a0d849ba63a9ec425716c9f98195698b2dae59","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://37ae767235385b47d008a0da10c6b02de42de4141c31c31d7d7c556815d67171"}]}