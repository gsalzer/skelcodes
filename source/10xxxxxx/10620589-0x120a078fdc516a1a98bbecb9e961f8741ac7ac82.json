{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/PriceOracleInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface PriceOracleInterface {\r\n    /**\r\n     * @dev Returns `true`if oracle is working.\r\n     */\r\n    function isWorking() external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the latest id. The id start from 1 and increments by 1.\r\n     */\r\n    function latestId() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the last updated price. Decimals is 8.\r\n     **/\r\n    function latestPrice() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of the last updated price.\r\n     */\r\n    function latestTimestamp() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the historical price specified by `id`. Decimals is 8.\r\n     */\r\n    function getPrice(uint256 id) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of historical price specified by `id`.\r\n     */\r\n    function getTimestamp(uint256 id) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/VolatilityOracleInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Interface of the volatility oracle.\r\n */\r\ninterface VolatilityOracleInterface {\r\n    /**\r\n     * @dev Returns the latest volatility.\r\n     * Decimals is 8.\r\n     * This is not a view function because in order for gas efficiency, we would sometimes need to store some values during the calculation of volatility value.\r\n     */\r\n    function getVolatility() external returns (uint256);\r\n}\r\n\r\n// File: contracts/MarketOracle.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Market data oracle. It provides prices and historical volatility of the price.\r\n * Without any problems, It continues to refer to one certain price oracle (main oracle).\r\n * No one can reassign any other oracle to the main oracle as long as the main oracle is working correctly.\r\n * When this contract recognizes that the main oracle is not working correctly (stop updating data, start giving wrong data, self truncated), MarketOracle automatically enters Recovery phase.\r\n *\r\n * [Recovery phase]\r\n * When it turns into Recovery phase, it start to refer to a sub oracle in order to keep providing market data continuously.\r\n * The sub oracle is referred to only in such a case.\r\n * The sub oracle is not expected to be used for long.\r\n * In the meanwhile the owner of MarketOracle finds another reliable oracle and assigns it to the new main oracle.\r\n * If the new main oracle passes some checks, MarketOracle returns to the normal phase from the Recovery phase.\r\n * Owner can reassign the sub oracle anytime.\r\n *\r\n * Volatility is calculated by some last prices provided by the oracle.\r\n * Calculating volatility is an expensive task, So MarketOracle stores some intermediate values to storage.\r\n */\r\ncontract MarketOracle is\r\n    Ownable,\r\n    PriceOracleInterface,\r\n    VolatilityOracleInterface\r\n{\r\n    using SafeMath for uint256;\r\n    uint256 public constant VOLATILITY_DATA_NUM = 25;\r\n    uint256 private constant SECONDS_IN_YEAR = 31536000;\r\n\r\n    /**\r\n     *@notice If true, this contract is in Recovery phase.\r\n     */\r\n    bool public isRecoveryPhase;\r\n    PriceOracleInterface public mainOracle;\r\n    PriceOracleInterface public subOracle;\r\n\r\n    uint256 private exTo;\r\n    uint256 private lastCalculatedVolatility;\r\n    PriceOracleInterface private exVolatilityOracle;\r\n    uint256 private exSquareReturnSum;\r\n\r\n    event EnterRecoveryPhase();\r\n    event ReturnFromRecoveryPhase(PriceOracleInterface newMainOracle);\r\n    event SetSubOracle(PriceOracleInterface newSubOracle);\r\n    event VolatilityCalculated(uint256 volatility);\r\n\r\n    /**\r\n     * @dev Enters Recovery phase if the main oracle is not working.\r\n     */\r\n    modifier recoveryPhaseCheck() {\r\n        if (!mainOracle.isWorking() && !isRecoveryPhase) {\r\n            emit EnterRecoveryPhase();\r\n            isRecoveryPhase = true;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        PriceOracleInterface _mainOracle,\r\n        PriceOracleInterface _subOracle\r\n    ) public {\r\n        mainOracle = _mainOracle;\r\n        subOracle = _subOracle;\r\n    }\r\n\r\n    /**\r\n     * @notice Assigns `oracle` to the new main oracle and returns to the normal phase from Recovery phase.\r\n     * Only owner can call this function only when the main oracle is not working correctly.\r\n     */\r\n    function setMainOracle(PriceOracleInterface oracle) external onlyOwner {\r\n        require(isRecoveryPhase, \"Cannot change working main oracle\");\r\n        require(oracle.isWorking(), \"New oracle is not working\");\r\n        mainOracle = oracle;\r\n        isRecoveryPhase = false;\r\n        emit ReturnFromRecoveryPhase(oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Assigns `oracle` to the new sub oracle.\r\n     * Only owner can call this function anytime.\r\n     */\r\n    function setSubOracle(PriceOracleInterface oracle) external onlyOwner {\r\n        subOracle = oracle;\r\n        emit SetSubOracle(oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the latest volatility.\r\n     * If any update to the price after the last calculation of volatility, recalculates and returns the new value.\r\n     */\r\n    function getVolatility()\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        uint256 to;\r\n        uint256 from;\r\n        uint256 _exTo;\r\n        uint256 exFrom;\r\n\r\n        uint256 squareReturnSum;\r\n\r\n        PriceOracleInterface oracle = _activeOracle();\r\n        to = oracle.latestId();\r\n        from = to.sub(VOLATILITY_DATA_NUM, \"data is too few\").add(1);\r\n        _exTo = exTo;\r\n\r\n        bool needToRecalculateAll = oracle != exVolatilityOracle || // if oracle has been changed\r\n            (to.sub(_exTo)) >= VOLATILITY_DATA_NUM / 2; // if it is not efficient to reuse some intermediate values.\r\n\r\n        if (needToRecalculateAll) {\r\n            // recalculate the whole of intermediate values\r\n            squareReturnSum = _sumOfSquareReturn(oracle, from, to);\r\n        } else if (_exTo == to) {\r\n            // no need to recalculate\r\n            return lastCalculatedVolatility;\r\n        } else {\r\n            // reuse some of intermediate values and recalculate others for gas cost reduce.\r\n            // `_exTo` is same as `to` on the last volatility updated.\r\n            // Whenever volatility is updated, `to` is equal to or more than 25, so `_exTo` never goes below 25.\r\n            exFrom = _exTo.add(1).sub(VOLATILITY_DATA_NUM);\r\n            squareReturnSum = exSquareReturnSum\r\n                .add(_sumOfSquareReturn(oracle, _exTo, to))\r\n                .sub(_sumOfSquareReturn(oracle, exFrom, from));\r\n        }\r\n\r\n        uint256 time = oracle.getTimestamp(to).sub(oracle.getTimestamp(from));\r\n        uint256 s = squareReturnSum.mul(SECONDS_IN_YEAR).div(time);\r\n        uint256 v = _sqrt(s);\r\n        lastCalculatedVolatility = v;\r\n        exTo = to;\r\n        exVolatilityOracle = oracle;\r\n        exSquareReturnSum = squareReturnSum;\r\n        emit VolatilityCalculated(v);\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns 'true' if either of the main oracle or the sub oracle is working.\r\n     * @dev See {PriceOracleInterface-isWorking}.\r\n     */\r\n    function isWorking() external override recoveryPhaseCheck returns (bool) {\r\n        return mainOracle.isWorking() || subOracle.isWorking();\r\n    }\r\n\r\n    /**\r\n     * @dev See {PriceOracleInterface-latestId}.\r\n     */\r\n    function latestId()\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        return _activeOracle().latestId();\r\n    }\r\n\r\n    /**\r\n     * @dev See {PriceOracleInterface-latestPrice}.\r\n     */\r\n    function latestPrice()\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        return _activeOracle().latestPrice();\r\n    }\r\n\r\n    /**\r\n     * @dev See {PriceOracleInterface-latestTimestamp}.\r\n     */\r\n    function latestTimestamp()\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        return _activeOracle().latestTimestamp();\r\n    }\r\n\r\n    /**\r\n     * @dev See {PriceOracleInterface-getPrice}.\r\n     */\r\n    function getPrice(uint256 id)\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        return _activeOracle().getPrice(id);\r\n    }\r\n\r\n    /**\r\n     * @dev See {PriceOracleInterface-getTimestamp}.\r\n     */\r\n    function getTimestamp(uint256 id)\r\n        external\r\n        override\r\n        recoveryPhaseCheck\r\n        returns (uint256)\r\n    {\r\n        return _activeOracle().getTimestamp(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the main oracle if this contract is in Recovery phase.\r\n     * Returns the sub oracle if the main oracle is not working.\r\n     * Reverts if neither is working.\r\n     * recoveryPhaseCheck modifier must be called before this function is called.\r\n     */\r\n    function _activeOracle() private returns (PriceOracleInterface) {\r\n        if (!isRecoveryPhase) {\r\n            return mainOracle;\r\n        }\r\n        require(subOracle.isWorking(), \"both of the oracles are not working\");\r\n        return subOracle;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns sum of the square of relative returns of prices given by `oracle`.\r\n     */\r\n    function _sumOfSquareReturn(\r\n        PriceOracleInterface oracle,\r\n        uint256 from,\r\n        uint256 to\r\n    ) private returns (uint256) {\r\n        uint256 a;\r\n        uint256 b;\r\n        uint256 sum;\r\n        b = oracle.getPrice(from);\r\n        for (uint256 id = from + 1; id <= to; id++) {\r\n            a = b;\r\n            b = oracle.getPrice(id);\r\n            sum = sum.add(_squareReturn(a, b));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns squareReturn of two values.\r\n     * v = {abs(b-a)/a}^2 * 10^16\r\n     */\r\n    function _squareReturn(uint256 a, uint256 b)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 sub = _absDef(a, b);\r\n        return (sub.mul(10**8)**2).div(a**2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns absolute difference of two numbers.\r\n     */\r\n    function _absDef(uint256 a, uint256 b) private pure returns (uint256) {\r\n        if (a > b) {\r\n            return a - b;\r\n        } else {\r\n            return b - a;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns square root of `x`.\r\n     * Babylonian method for square root.\r\n     */\r\n    function _sqrt(uint256 x) private pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"_mainOracle\",\"type\":\"address\"},{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"_subOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnterRecoveryPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracleInterface\",\"name\":\"newMainOracle\",\"type\":\"address\"}],\"name\":\"ReturnFromRecoveryPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracleInterface\",\"name\":\"newSubOracle\",\"type\":\"address\"}],\"name\":\"SetSubOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volatility\",\"type\":\"uint256\"}],\"name\":\"VolatilityCalculated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VOLATILITY_DATA_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVolatility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRecoveryPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainOracle\",\"outputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setMainOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setSubOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subOracle\",\"outputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketOracle","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000fd38a152dddf1f9cf5ec9b23599c6d5f080d6aff00000000000000000000000032e85c00caf25f8217315d711e026f4dbaa45e31","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2dee76f4b19eb60fb248071ab8a818e79196a8048d56fee82765d152226671f"}]}