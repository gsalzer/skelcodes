{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/IPairedInvestments.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\ninterface IPairedInvestments {\n\n    /// @dev New investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _token token address\n    /// @param _amount amount to invest\n    /// @param _investorProfitPercent percentage profit for investor\n    /// @param _type type of investment\n    /// @return investment id and start date\n    function invest(address _traderAddress, address _investorAddress, address _token, uint256 _amount, uint16 _investorProfitPercent,\n            uint8 _type) \n        external \n        returns(uint256, uint256);\n\n    /// @dev Stop investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @return end date\n    function stop(address _traderAddress, address _investorAddress, uint256 _investmentId) \n        external \n        returns (uint256);\n\n    /// @dev Investor requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    function requestExitInvestor(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value) \n        external;\n\n    /// @dev Trader requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _amount transaction amount\n    function requestExitTrader(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, uint256 _amount) \n        external;\n\n    /// @dev Approve investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _signer Signer address\n    /// @param _investmentId investment id\n    /// @param _amount transaction amount\n    /// @return array with: trader payout, investor payout, fee payout, original investment amount\n    function approveExit(address _traderAddress, address _investorAddress, address _signer, uint256 _investmentId, uint256 _amount) \n        external  \n        returns (uint256[5] memory);\n\n    /// @dev Reject an exit request\n    /// @param _traderAddress trader address\n    /// @param _investmentId investment id\n    /// @param _value proposed investment value\n    function rejectExit(address _traderAddress, uint256 _investmentId, uint256 _value) \n        external;\n\n\n    /// @dev Calculate investment profits and fees\n    /// @param _value investment value\n    /// @param _amount original investment amount\n    /// @param _traderFeePercent trader fee percent\n    /// @param _investorFeePercent investor fee percent\n    /// @param _investorProfitPercent investor profit percent\n    /// @return array with: trader fee, investor fee, trader profit, investor profit\n    function calculateProfitsAndFees(\n\t\tuint256 _value,\n\t\tuint256 _amount,\n\t\tuint256 _traderFeePercent,\n\t\tuint256 _investorFeePercent,\n\t\tuint256 _investorProfitPercent\n\t) \n        external \n        pure \n        returns (uint256, uint256, uint256, uint256);\n}\n\n// File: contracts/PairedInvestments.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\n\n\n\n\ncontract PairedInvestments is Initializable, Ownable, IPairedInvestments {\n\tusing SafeMath for uint256;\n\n    /*\n     *  Constants\n     */\n    uint8 constant INVESTMENT_TYPE_COLLATERAL = 0;\n    uint8 constant INVESTMENT_TYPE_DIRECT = 1;\n\n    /*\n     *  Storage\n     */\n\taddress public manager;\n\n\tuint256 public traderFeePercent; // trader fee percentage in unit of 100, i.e. 100 == 1% and 5 == 0.05% and 10000 == 100%\n    uint256 public investorFeePercent; // investor fee percentage in unit of 100, i.e. 100 == 1% and 5 == 0.05% and 10000 == 100%\n    uint256 public investorProfitPercent;\n\n\tmapping(uint256 => _Investment) public investments;\n    uint256 public investmentCount;\n\n    /*\n     *  Structs\n     */\n    enum InvestmentState {\n        Invested,\n        Stopped,\n        ExitRequestedInvestor,\n        ExitRequestedTrader,\n        Divested\n    }\n\n    struct _Investment {\n        uint256 id;\n        address trader;\n        address investor;\n        address token;\n        uint256 amount;\n        uint256 value;\n        uint256 start;\n        uint256 end;\n        uint16 investorProfitPercent;\n        uint8 investmentType;\n        InvestmentState state;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyManager() {\n        require(manager == msg.sender);\n        _;\n    }\n\n    /// @dev Initialize\n    /// @param _traderFeePercent trader fee percentage in unit of 100, i.e. 100 == 1% and 5 == 0.05% and 10000 == 100%\n    /// @param _investorFeePercent investor fee percentage\n    function initialize(\n\t    \tuint256 _traderFeePercent, \n\t        uint256 _investorFeePercent) \n        public \n        initializer \n    {\n    \tOwnable.initialize(msg.sender);\n    \ttraderFeePercent = _traderFeePercent;\n        investorFeePercent = _investorFeePercent;\n    }\n\n    /// @dev Set manager\n    /// @param _manager manager address\n    function setManager(address _manager) \n        public \n        onlyOwner \n    {\n        manager = _manager;\n    }\n\n    /// @dev New investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _token token address\n    /// @param _amount amount to invest\n    /// @param _investorProfitPercent percentage profit for investor\n    /// @param _type type of investment\n    /// @return investment id and start date\n    function invest(\n            address _traderAddress, \n            address _investorAddress, \n            address _token, \n            uint256 _amount, \n            uint16 _investorProfitPercent,\n            uint8 _type) \n        public \n        onlyManager \n        returns(uint256, uint256) \n    {\n        require(_investorProfitPercent > 0 && _investorProfitPercent < 10000);\n        require(_type == INVESTMENT_TYPE_COLLATERAL || _type == INVESTMENT_TYPE_DIRECT);\n        \n        uint256 start = now;\n        investmentCount = investmentCount.add(1);\n        investments[investmentCount] = _Investment({\n                id: investmentCount,\n                trader: _traderAddress,\n                investor: _investorAddress,\n                token: _token,\n                amount: _amount,\n                value: 0,\n                start: start,\n                end: 0,\n                investorProfitPercent: _investorProfitPercent,\n                state: InvestmentState.Invested,\n                investmentType: _type\n            });\n\n        return (investmentCount, start);\n    }\n\n    /// @dev Stop investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @return end date\n    function stop(address _traderAddress, address _investorAddress, uint256 _investmentId) \n        public \n        onlyManager \n        returns (uint256)\n    {\n        uint256 end = now;\n        _Investment storage _investment = investments[_investmentId];\n\n        require(_investment.trader == _traderAddress);\n        require(_investment.investor == _investorAddress);\n        require(_investment.state == InvestmentState.Invested);\n\n        _investment.end = end;\n        _investment.state = InvestmentState.Stopped;\n\n        return end;\n    }\n\n    /// @dev Investor requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    function requestExitInvestor(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value) \n        public  \n    {\n        _requestExit(_traderAddress, _investorAddress, _investmentId, _value, InvestmentState.ExitRequestedInvestor);\n    }\n\n    /// @dev Trader requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _amount transaction amount\n    function requestExitTrader(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, uint256 _amount) \n        public \n    {\n        _Investment memory _investment = investments[_investmentId];\n\n        uint256 _expected = 0;\n\n        if (_value > _investment.amount) {\n\n            (\n                uint256 _traderFee,\n                uint256 _investorFee,\n                ,\n                uint256 _investorProfit\n            ) = calculateProfitsAndFees(\n                _value, \n                _investment.amount, \n                traderFeePercent, \n                investorFeePercent, \n                _investment.investorProfitPercent\n            );\n\n            _expected = _investorProfit.add(_traderFee).add(_investorFee);\n\n            if (_investment.investmentType == INVESTMENT_TYPE_DIRECT) {\n                _expected = _expected.add(_investment.amount);\n            }\n\n            require(_expected == _amount);\n            \n        } else {\n\n            uint256 _traderFee = (_investment.amount.sub(_value)).mul(traderFeePercent).div(10000);\n\n            _expected =_traderFee;\n\n            if (_investment.investmentType == INVESTMENT_TYPE_DIRECT) {\n                _expected = _expected.add(_value);\n            }\n\n            require(_expected == _amount);\n        }\n\n        _requestExit(_traderAddress, _investorAddress, _investmentId, _value, InvestmentState.ExitRequestedTrader);\n    }\n\n    /// @dev Request investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _state new investment state\n    function _requestExit(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, InvestmentState _state) \n        internal \n        onlyManager \n    {\n        _Investment storage _investment = investments[_investmentId];\n\n        require(_investment.trader == _traderAddress);\n        require(_investment.investor == _investorAddress);\n        require(_investment.state == InvestmentState.Stopped);\n\n        _investment.value = _value;\n        _investment.state = _state;\n    }\n\n    /// @dev Approve investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _signer Signer address\n    /// @param _investmentId investment id\n    /// @param _amount transaction amount\n    /// @return array with: trader payout, investor payout, fee payout, original investment amount\n    function approveExit(address _traderAddress, address _investorAddress, address _signer, uint256 _investmentId, uint256 _amount) \n        public \n        onlyManager \n        returns (uint256[5] memory result) \n    {\n        _Investment storage _investment = investments[_investmentId];\n        require(_investment.trader == _traderAddress);\n        require(_investment.investor == _investorAddress);\n        require(_investment.state == InvestmentState.ExitRequestedInvestor || \n                _investment.state == InvestmentState.ExitRequestedTrader);\n\n        uint256 _expected = 0;\n\n        if (_investment.value > _investment.amount) {\n\n        \t(\n            \tuint256 _traderFee,\n            \tuint256 _investorFee,\n            \t,\n            \tuint256 _investorProfit\n            ) = calculateProfitsAndFees(\n            \t_investment.value, \n            \t_investment.amount, \n            \ttraderFeePercent, \n            \tinvestorFeePercent, \n            \t_investment.investorProfitPercent\n            );\n\n            if (_signer != _traderAddress && _signer != _investorAddress) {\n                // signed by admin\n                require(0 == _amount);\n\n                if (_investment.investmentType == INVESTMENT_TYPE_COLLATERAL) {\n                    if (_investment.state == InvestmentState.ExitRequestedTrader) {\n                        result[1] = _investment.amount.add(_investorProfit);\n                        result[2] = _traderFee.add(_investorFee);\n                    } else {\n                        result[1] = _investment.amount.sub(_investorFee);\n                        result[2] = _investorFee;\n                    }\n                } else {\n                    if (_investment.state == InvestmentState.ExitRequestedTrader) {\n                        result[1] = _investment.amount.add(_investorProfit);\n                        result[2] = _traderFee.add(_investorFee);\n                    }\n                }\n\n            } else {\n                // if the investor requested the exit, the trader will have to pay the amount\n                // if the trader requested the exit, they've already paid the amount\n                if (_investment.state == InvestmentState.ExitRequestedInvestor) {\n                    _expected = _investorProfit.add(_traderFee).add(_investorFee);\n\n                    if (_investment.investmentType == INVESTMENT_TYPE_DIRECT) {\n                        _expected = _expected.add(_investment.amount);\n                    }\n                }\n\n                require(_expected == _amount);\n\n                // investment amount plus profit (minus fee)\n                result[1] = _investment.amount.add(_investorProfit);\n\n                // pay trader and investor fee\n                result[2] = _traderFee.add(_investorFee);\n            }\n            \n        } else {\n\n        \tuint256 _traderFee = (_investment.amount.sub(_investment.value)).mul(traderFeePercent).div(10000);\n\n            if (_signer != _traderAddress && _signer != _investorAddress) {\n                // signed by admin\n                require(0 == _amount);\n\n                if (_investment.investmentType == INVESTMENT_TYPE_COLLATERAL) {\n                    if (_investment.state == InvestmentState.ExitRequestedTrader) {\n                        result[0] = _investment.amount.sub(_investment.value);\n                        result[1] = _investment.value;\n                        result[2] = _traderFee;\n                    } else {\n                        result[0] = _investment.amount.sub(_investment.value);\n                        result[1] = _investment.value;\n                    }\n                } else {\n                    if (_investment.state == InvestmentState.ExitRequestedTrader) {\n                        result[1] = _investment.value;\n                        result[2] = _traderFee;\n                    }\n                }\n\n            } else {\n                // if the investor requested the exit, the trader will have to pay the amount\n                // if the trader requested the exit, they've already paid the amount\n                if (_investment.state == InvestmentState.ExitRequestedInvestor) {\n                    _expected = _traderFee;\n\n                    if (_investment.investmentType == INVESTMENT_TYPE_DIRECT) {\n                        _expected = _expected.add(_investment.value);\n                    }\n                }\n\n                require(_expected == _amount);\n\n                // take losses away from investor\n                result[1] = _investment.value;\n                \n                if (_investment.investmentType == INVESTMENT_TYPE_COLLATERAL) {\n                    // add losses to trader balance\n                    result[0] = _investment.amount.sub(_investment.value);\n                }\n                \n                // trader fee\n                result[2] = _traderFee;\n            }\n        }\n\n        _investment.state = InvestmentState.Divested;\n\n        result[3] = _investment.amount;\n        result[4] = _investment.investmentType;\n    }\n\n    /// @dev Reject an exit request\n    /// @param _traderAddress trader address\n    /// @param _investmentId investment id\n    /// @param _value proposed investment value\n    function rejectExit(address _traderAddress, uint256 _investmentId, uint256 _value) \n        public \n        onlyManager\n    {\n        \n        _Investment storage _investment = investments[_investmentId];\n        require(_investment.trader == _traderAddress);\n        require(_investment.state == InvestmentState.ExitRequestedInvestor || \n                _investment.state == InvestmentState.ExitRequestedTrader);\n        \n        _investment.value = _value;\n        _investment.state = InvestmentState.Stopped;\n    }\n\n\n    /// @dev Calculate investment profits and fees\n    /// @param _value investment value\n    /// @param _amount original investment amount\n    /// @param _traderFeePercent trader fee percent\n    /// @param _investorFeePercent investor fee percent\n    /// @param _investorProfitPercent investor profit percent\n    /// @return array with: trader fee, investor fee, trader profit, investor profit\n    function calculateProfitsAndFees (\n\t\tuint256 _value,\n\t\tuint256 _amount,\n\t\tuint256 _traderFeePercent,\n\t\tuint256 _investorFeePercent,\n\t\tuint256 _investorProfitPercent\n\t) public pure returns (uint256, uint256, uint256, uint256) {\n\t\t\n        if (_value > _amount) {\n    \t\tuint256 _profit = _value - _amount;\n            uint256 _investorProfit = _profit.mul(_investorProfitPercent.sub(_investorFeePercent)).div(10000);\n            uint256 _traderProfit = _profit.mul(uint256(10000).sub(_investorProfitPercent).sub(_traderFeePercent)).div(10000);\n            uint256 _fee = _profit.sub(_investorProfit).sub(_traderProfit);\n            uint256 _investorFee = _fee.div(2);\n            uint256 _traderFee = _fee.sub(_investorFee);\n\n            return (_traderFee, _investorFee, _traderProfit, _investorProfit);\n        }\n\n        uint _traderFee = (_amount.sub(_value)).mul(_traderFeePercent).div(10000);\n        return (_traderFee, 0, 0, 0);\n\t}\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveExit\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"result\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_traderFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorProfitPercent\",\"type\":\"uint256\"}],\"name\":\"calculateProfitsAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traderFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorFeePercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_investorProfitPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"investorProfitPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"investmentType\",\"type\":\"uint8\"},{\"internalType\":\"enum PairedInvestments.InvestmentState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorProfitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rejectExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestExitInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestExitTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"}],\"name\":\"stop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traderFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PairedInvestments","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}